
cevizlibag_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013038  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08013208  08013208  00014208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080137f8  080137f8  000151f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080137f8  080137f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013800  08013800  000151f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013800  08013800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013804  08013804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08013808  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a48  200001f0  080139f8  000151f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c38  080139f8  00015c38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e924  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c9a  00000000  00000000  00033b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001332  00000000  00000000  0003a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a967  00000000  00000000  0003b3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002543a  00000000  00000000  00065d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed323  00000000  00000000  0008b16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017848e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081e0  00000000  00000000  001784d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001806b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080131f0 	.word	0x080131f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080131f0 	.word	0x080131f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f02:	f000 ba09 	b.w	8001318 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f98:	f000 b9be 	b.w	8001318 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	468e      	mov	lr, r1
 8001028:	4604      	mov	r4, r0
 800102a:	4688      	mov	r8, r1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d14a      	bne.n	80010c6 <__udivmoddi4+0xa6>
 8001030:	428a      	cmp	r2, r1
 8001032:	4617      	mov	r7, r2
 8001034:	d962      	bls.n	80010fc <__udivmoddi4+0xdc>
 8001036:	fab2 f682 	clz	r6, r2
 800103a:	b14e      	cbz	r6, 8001050 <__udivmoddi4+0x30>
 800103c:	f1c6 0320 	rsb	r3, r6, #32
 8001040:	fa01 f806 	lsl.w	r8, r1, r6
 8001044:	fa20 f303 	lsr.w	r3, r0, r3
 8001048:	40b7      	lsls	r7, r6
 800104a:	ea43 0808 	orr.w	r8, r3, r8
 800104e:	40b4      	lsls	r4, r6
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	fa1f fc87 	uxth.w	ip, r7
 8001058:	fbb8 f1fe 	udiv	r1, r8, lr
 800105c:	0c23      	lsrs	r3, r4, #16
 800105e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001062:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001066:	fb01 f20c 	mul.w	r2, r1, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x62>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001074:	f080 80ea 	bcs.w	800124c <__udivmoddi4+0x22c>
 8001078:	429a      	cmp	r2, r3
 800107a:	f240 80e7 	bls.w	800124c <__udivmoddi4+0x22c>
 800107e:	3902      	subs	r1, #2
 8001080:	443b      	add	r3, r7
 8001082:	1a9a      	subs	r2, r3, r2
 8001084:	b2a3      	uxth	r3, r4
 8001086:	fbb2 f0fe 	udiv	r0, r2, lr
 800108a:	fb0e 2210 	mls	r2, lr, r0, r2
 800108e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001092:	fb00 fc0c 	mul.w	ip, r0, ip
 8001096:	459c      	cmp	ip, r3
 8001098:	d909      	bls.n	80010ae <__udivmoddi4+0x8e>
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80010a0:	f080 80d6 	bcs.w	8001250 <__udivmoddi4+0x230>
 80010a4:	459c      	cmp	ip, r3
 80010a6:	f240 80d3 	bls.w	8001250 <__udivmoddi4+0x230>
 80010aa:	443b      	add	r3, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010b2:	eba3 030c 	sub.w	r3, r3, ip
 80010b6:	2100      	movs	r1, #0
 80010b8:	b11d      	cbz	r5, 80010c2 <__udivmoddi4+0xa2>
 80010ba:	40f3      	lsrs	r3, r6
 80010bc:	2200      	movs	r2, #0
 80010be:	e9c5 3200 	strd	r3, r2, [r5]
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d905      	bls.n	80010d6 <__udivmoddi4+0xb6>
 80010ca:	b10d      	cbz	r5, 80010d0 <__udivmoddi4+0xb0>
 80010cc:	e9c5 0100 	strd	r0, r1, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4608      	mov	r0, r1
 80010d4:	e7f5      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d146      	bne.n	800116c <__udivmoddi4+0x14c>
 80010de:	4573      	cmp	r3, lr
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0xc8>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 8105 	bhi.w	80012f2 <__udivmoddi4+0x2d2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	4690      	mov	r8, r2
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d0e5      	beq.n	80010c2 <__udivmoddi4+0xa2>
 80010f6:	e9c5 4800 	strd	r4, r8, [r5]
 80010fa:	e7e2      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	f000 8090 	beq.w	8001222 <__udivmoddi4+0x202>
 8001102:	fab2 f682 	clz	r6, r2
 8001106:	2e00      	cmp	r6, #0
 8001108:	f040 80a4 	bne.w	8001254 <__udivmoddi4+0x234>
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	0c03      	lsrs	r3, r0, #16
 8001110:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001114:	b280      	uxth	r0, r0
 8001116:	b2bc      	uxth	r4, r7
 8001118:	2101      	movs	r1, #1
 800111a:	fbb2 fcfe 	udiv	ip, r2, lr
 800111e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001126:	fb04 f20c 	mul.w	r2, r4, ip
 800112a:	429a      	cmp	r2, r3
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x11e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001134:	d202      	bcs.n	800113c <__udivmoddi4+0x11c>
 8001136:	429a      	cmp	r2, r3
 8001138:	f200 80e0 	bhi.w	80012fc <__udivmoddi4+0x2dc>
 800113c:	46c4      	mov	ip, r8
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	fbb3 f2fe 	udiv	r2, r3, lr
 8001144:	fb0e 3312 	mls	r3, lr, r2, r3
 8001148:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800114c:	fb02 f404 	mul.w	r4, r2, r4
 8001150:	429c      	cmp	r4, r3
 8001152:	d907      	bls.n	8001164 <__udivmoddi4+0x144>
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800115a:	d202      	bcs.n	8001162 <__udivmoddi4+0x142>
 800115c:	429c      	cmp	r4, r3
 800115e:	f200 80ca 	bhi.w	80012f6 <__udivmoddi4+0x2d6>
 8001162:	4602      	mov	r2, r0
 8001164:	1b1b      	subs	r3, r3, r4
 8001166:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800116a:	e7a5      	b.n	80010b8 <__udivmoddi4+0x98>
 800116c:	f1c1 0620 	rsb	r6, r1, #32
 8001170:	408b      	lsls	r3, r1
 8001172:	fa22 f706 	lsr.w	r7, r2, r6
 8001176:	431f      	orrs	r7, r3
 8001178:	fa0e f401 	lsl.w	r4, lr, r1
 800117c:	fa20 f306 	lsr.w	r3, r0, r6
 8001180:	fa2e fe06 	lsr.w	lr, lr, r6
 8001184:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001188:	4323      	orrs	r3, r4
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	fa1f fc87 	uxth.w	ip, r7
 8001192:	fbbe f0f9 	udiv	r0, lr, r9
 8001196:	0c1c      	lsrs	r4, r3, #16
 8001198:	fb09 ee10 	mls	lr, r9, r0, lr
 800119c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80011a4:	45a6      	cmp	lr, r4
 80011a6:	fa02 f201 	lsl.w	r2, r2, r1
 80011aa:	d909      	bls.n	80011c0 <__udivmoddi4+0x1a0>
 80011ac:	193c      	adds	r4, r7, r4
 80011ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80011b2:	f080 809c 	bcs.w	80012ee <__udivmoddi4+0x2ce>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8099 	bls.w	80012ee <__udivmoddi4+0x2ce>
 80011bc:	3802      	subs	r0, #2
 80011be:	443c      	add	r4, r7
 80011c0:	eba4 040e 	sub.w	r4, r4, lr
 80011c4:	fa1f fe83 	uxth.w	lr, r3
 80011c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80011cc:	fb09 4413 	mls	r4, r9, r3, r4
 80011d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011d8:	45a4      	cmp	ip, r4
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x1ce>
 80011dc:	193c      	adds	r4, r7, r4
 80011de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80011e2:	f080 8082 	bcs.w	80012ea <__udivmoddi4+0x2ca>
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d97f      	bls.n	80012ea <__udivmoddi4+0x2ca>
 80011ea:	3b02      	subs	r3, #2
 80011ec:	443c      	add	r4, r7
 80011ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011f2:	eba4 040c 	sub.w	r4, r4, ip
 80011f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80011fa:	4564      	cmp	r4, ip
 80011fc:	4673      	mov	r3, lr
 80011fe:	46e1      	mov	r9, ip
 8001200:	d362      	bcc.n	80012c8 <__udivmoddi4+0x2a8>
 8001202:	d05f      	beq.n	80012c4 <__udivmoddi4+0x2a4>
 8001204:	b15d      	cbz	r5, 800121e <__udivmoddi4+0x1fe>
 8001206:	ebb8 0203 	subs.w	r2, r8, r3
 800120a:	eb64 0409 	sbc.w	r4, r4, r9
 800120e:	fa04 f606 	lsl.w	r6, r4, r6
 8001212:	fa22 f301 	lsr.w	r3, r2, r1
 8001216:	431e      	orrs	r6, r3
 8001218:	40cc      	lsrs	r4, r1
 800121a:	e9c5 6400 	strd	r6, r4, [r5]
 800121e:	2100      	movs	r1, #0
 8001220:	e74f      	b.n	80010c2 <__udivmoddi4+0xa2>
 8001222:	fbb1 fcf2 	udiv	ip, r1, r2
 8001226:	0c01      	lsrs	r1, r0, #16
 8001228:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800122c:	b280      	uxth	r0, r0
 800122e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001232:	463b      	mov	r3, r7
 8001234:	4638      	mov	r0, r7
 8001236:	463c      	mov	r4, r7
 8001238:	46b8      	mov	r8, r7
 800123a:	46be      	mov	lr, r7
 800123c:	2620      	movs	r6, #32
 800123e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001242:	eba2 0208 	sub.w	r2, r2, r8
 8001246:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124a:	e766      	b.n	800111a <__udivmoddi4+0xfa>
 800124c:	4601      	mov	r1, r0
 800124e:	e718      	b.n	8001082 <__udivmoddi4+0x62>
 8001250:	4610      	mov	r0, r2
 8001252:	e72c      	b.n	80010ae <__udivmoddi4+0x8e>
 8001254:	f1c6 0220 	rsb	r2, r6, #32
 8001258:	fa2e f302 	lsr.w	r3, lr, r2
 800125c:	40b7      	lsls	r7, r6
 800125e:	40b1      	lsls	r1, r6
 8001260:	fa20 f202 	lsr.w	r2, r0, r2
 8001264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001268:	430a      	orrs	r2, r1
 800126a:	fbb3 f8fe 	udiv	r8, r3, lr
 800126e:	b2bc      	uxth	r4, r7
 8001270:	fb0e 3318 	mls	r3, lr, r8, r3
 8001274:	0c11      	lsrs	r1, r2, #16
 8001276:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800127a:	fb08 f904 	mul.w	r9, r8, r4
 800127e:	40b0      	lsls	r0, r6
 8001280:	4589      	cmp	r9, r1
 8001282:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001286:	b280      	uxth	r0, r0
 8001288:	d93e      	bls.n	8001308 <__udivmoddi4+0x2e8>
 800128a:	1879      	adds	r1, r7, r1
 800128c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001290:	d201      	bcs.n	8001296 <__udivmoddi4+0x276>
 8001292:	4589      	cmp	r9, r1
 8001294:	d81f      	bhi.n	80012d6 <__udivmoddi4+0x2b6>
 8001296:	eba1 0109 	sub.w	r1, r1, r9
 800129a:	fbb1 f9fe 	udiv	r9, r1, lr
 800129e:	fb09 f804 	mul.w	r8, r9, r4
 80012a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80012a6:	b292      	uxth	r2, r2
 80012a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012ac:	4542      	cmp	r2, r8
 80012ae:	d229      	bcs.n	8001304 <__udivmoddi4+0x2e4>
 80012b0:	18ba      	adds	r2, r7, r2
 80012b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80012b6:	d2c4      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012b8:	4542      	cmp	r2, r8
 80012ba:	d2c2      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012bc:	f1a9 0102 	sub.w	r1, r9, #2
 80012c0:	443a      	add	r2, r7
 80012c2:	e7be      	b.n	8001242 <__udivmoddi4+0x222>
 80012c4:	45f0      	cmp	r8, lr
 80012c6:	d29d      	bcs.n	8001204 <__udivmoddi4+0x1e4>
 80012c8:	ebbe 0302 	subs.w	r3, lr, r2
 80012cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012d0:	3801      	subs	r0, #1
 80012d2:	46e1      	mov	r9, ip
 80012d4:	e796      	b.n	8001204 <__udivmoddi4+0x1e4>
 80012d6:	eba7 0909 	sub.w	r9, r7, r9
 80012da:	4449      	add	r1, r9
 80012dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80012e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80012e4:	fb09 f804 	mul.w	r8, r9, r4
 80012e8:	e7db      	b.n	80012a2 <__udivmoddi4+0x282>
 80012ea:	4673      	mov	r3, lr
 80012ec:	e77f      	b.n	80011ee <__udivmoddi4+0x1ce>
 80012ee:	4650      	mov	r0, sl
 80012f0:	e766      	b.n	80011c0 <__udivmoddi4+0x1a0>
 80012f2:	4608      	mov	r0, r1
 80012f4:	e6fd      	b.n	80010f2 <__udivmoddi4+0xd2>
 80012f6:	443b      	add	r3, r7
 80012f8:	3a02      	subs	r2, #2
 80012fa:	e733      	b.n	8001164 <__udivmoddi4+0x144>
 80012fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8001300:	443b      	add	r3, r7
 8001302:	e71c      	b.n	800113e <__udivmoddi4+0x11e>
 8001304:	4649      	mov	r1, r9
 8001306:	e79c      	b.n	8001242 <__udivmoddi4+0x222>
 8001308:	eba1 0109 	sub.w	r1, r1, r9
 800130c:	46c4      	mov	ip, r8
 800130e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001312:	fb09 f804 	mul.w	r8, r9, r4
 8001316:	e7c4      	b.n	80012a2 <__udivmoddi4+0x282>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001330:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <MX_ADC1_Init+0x9c>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001336:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800133a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <MX_ADC1_Init+0xa0>)
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800136a:	2201      	movs	r2, #1
 800136c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001378:	2201      	movs	r2, #1
 800137a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800137e:	f003 fc65 	bl	8004c4c <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001388:	f001 fb60 	bl	8002a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800138c:	230b      	movs	r3, #11
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800139e:	f003 fe03 	bl	8004fa8 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013a8:	f001 fb50 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000020c 	.word	0x2000020c
 80013b8:	40012000 	.word	0x40012000
 80013bc:	0f000001 	.word	0x0f000001

080013c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	@ (800145c <MX_ADC2_Init+0x9c>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <MX_ADC2_Init+0xa0>)
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_ADC2_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_ADC2_Init+0x98>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001422:	f003 fc13 	bl	8004c4c <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800142c:	f001 fb0e 	bl	8002a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001430:	230c      	movs	r3, #12
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001442:	f003 fdb1 	bl	8004fa8 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800144c:	f001 fafe 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000254 	.word	0x20000254
 800145c:	40012100 	.word	0x40012100
 8001460:	0f000001 	.word	0x0f000001

08001464 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	@ 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2e      	ldr	r2, [pc, #184]	@ (800153c <HAL_ADC_MspInit+0xd8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a2c      	ldr	r2, [pc, #176]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_V_Pin;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_V_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	481c      	ldr	r0, [pc, #112]	@ (8001544 <HAL_ADC_MspInit+0xe0>)
 80014d2:	f004 fd3b 	bl	8005f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80014d6:	e02c      	b.n	8001532 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_ADC_MspInit+0xe4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d127      	bne.n	8001532 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_C_Pin;
 800151a:	2304      	movs	r3, #4
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_C_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_ADC_MspInit+0xe0>)
 800152e:	f004 fd0d 	bl	8005f4c <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	@ 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012000 	.word	0x40012000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020800 	.word	0x40020800
 8001548:	40012100 	.word	0x40012100

0800154c <reset_algorithm_status>:
	return pow(nmbr, 2);
}
*/

void reset_algorithm_status()
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	rocket_status = STAT_ROCKET_READY;
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <reset_algorithm_status+0x14>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]

}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	200002a8 	.word	0x200002a8

08001564 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(flight_data_t *rocket)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	float velocity = 0.0;
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

	//velocity measuiring
	currentTime_1 = HAL_GetTick();
 8001572:	f003 fb3b 	bl	8004bec <HAL_GetTick>
 8001576:	4603      	mov	r3, r0
 8001578:	4a90      	ldr	r2, [pc, #576]	@ (80017bc <algorithm_1_update+0x258>)
 800157a:	6013      	str	r3, [r2, #0]
	uint32_t delta_time = currentTime_1 - lastTime_1;
 800157c:	4b8f      	ldr	r3, [pc, #572]	@ (80017bc <algorithm_1_update+0x258>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b8f      	ldr	r3, [pc, #572]	@ (80017c0 <algorithm_1_update+0x25c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	613b      	str	r3, [r7, #16]

  if(delta_time >= 90)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b59      	cmp	r3, #89	@ 0x59
 800158c:	d920      	bls.n	80015d0 <algorithm_1_update+0x6c>
  {
	  float currentAltitude = rocket->altitude;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
	  velocity = (currentAltitude - lastAltitude_1) / ((float)(delta_time) / 1000);
 8001594:	4b8b      	ldr	r3, [pc, #556]	@ (80017c4 <algorithm_1_update+0x260>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ed97 7a03 	vldr	s14, [r7, #12]
 800159e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	ed9f 6a86 	vldr	s12, [pc, #536]	@ 80017c8 <algorithm_1_update+0x264>
 80015b0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80015b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b8:	edc7 7a05 	vstr	s15, [r7, #20]
	  lastAltitude_1 = currentAltitude;
 80015bc:	4a81      	ldr	r2, [pc, #516]	@ (80017c4 <algorithm_1_update+0x260>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6013      	str	r3, [r2, #0]

	  lastTime_1 = currentTime_1;
 80015c2:	4b7e      	ldr	r3, [pc, #504]	@ (80017bc <algorithm_1_update+0x258>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7e      	ldr	r2, [pc, #504]	@ (80017c0 <algorithm_1_update+0x25c>)
 80015c8:	6013      	str	r3, [r2, #0]
	  is_updated = 1;
 80015ca:	4b80      	ldr	r3, [pc, #512]	@ (80017cc <algorithm_1_update+0x268>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
  }

  if(is_updated)
 80015d0:	4b7e      	ldr	r3, [pc, #504]	@ (80017cc <algorithm_1_update+0x268>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ec 	beq.w	80017b2 <algorithm_1_update+0x24e>
  {
	  is_updated = 0;
 80015da:	4b7c      	ldr	r3, [pc, #496]	@ (80017cc <algorithm_1_update+0x268>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

	switch(rocket_status)
 80015e0:	4b7b      	ldr	r3, [pc, #492]	@ (80017d0 <algorithm_1_update+0x26c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	f200 80d9 	bhi.w	800179c <algorithm_1_update+0x238>
 80015ea:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <algorithm_1_update+0x8c>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001619 	.word	0x08001619
 80015f4:	08001669 	.word	0x08001669
 80015f8:	080016a7 	.word	0x080016a7
 80015fc:	080016e3 	.word	0x080016e3
 8001600:	0800179d 	.word	0x0800179d
 8001604:	0800179d 	.word	0x0800179d
 8001608:	0800175d 	.word	0x0800175d
 800160c:	0800179d 	.word	0x0800179d
 8001610:	0800179d 	.word	0x0800179d
 8001614:	0800179d 	.word	0x0800179d
	{
		case STAT_ROCKET_READY:						//rising detection
			if(velocity > RISING_VELOCITY_TRESHOLD || rocket->accel_y > RISING_G_TRESHOLD)
 8001618:	edd7 7a05 	vldr	s15, [r7, #20]
 800161c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	dc09      	bgt.n	800163e <algorithm_1_update+0xda>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001630:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017d4 <algorithm_1_update+0x270>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	dd05      	ble.n	800164a <algorithm_1_update+0xe6>
			{
				counter++;
 800163e:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <algorithm_1_update+0x274>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a64      	ldr	r2, [pc, #400]	@ (80017d8 <algorithm_1_update+0x274>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e002      	b.n	8001650 <algorithm_1_update+0xec>
			}
			else
			{
				counter = 0;
 800164a:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <algorithm_1_update+0x274>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
			}

			if(counter == 2)
 8001650:	4b61      	ldr	r3, [pc, #388]	@ (80017d8 <algorithm_1_update+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	f040 80a3 	bne.w	80017a0 <algorithm_1_update+0x23c>
			{
				rocket_status = STAT_FLIGHT_STARTED;
 800165a:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <algorithm_1_update+0x26c>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001660:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <algorithm_1_update+0x274>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
				//serial_println("Fligth started", &TTL_HNDLR);

			}
			break;
 8001666:	e09b      	b.n	80017a0 <algorithm_1_update+0x23c>

		case STAT_FLIGHT_STARTED:					//Burnout detect
			if(rocket->accel_y < BURNOUT_THRESHOLD)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a05 	vldr	s15, [r3, #20]
 800166e:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80017dc <algorithm_1_update+0x278>
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	d505      	bpl.n	8001688 <algorithm_1_update+0x124>
			{
				counter++;
 800167c:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <algorithm_1_update+0x274>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a55      	ldr	r2, [pc, #340]	@ (80017d8 <algorithm_1_update+0x274>)
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e002      	b.n	800168e <algorithm_1_update+0x12a>
			}
			else
			{
				counter = 0;
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <algorithm_1_update+0x274>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			}

			if(counter == 1)
 800168e:	4b52      	ldr	r3, [pc, #328]	@ (80017d8 <algorithm_1_update+0x274>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f040 8086 	bne.w	80017a4 <algorithm_1_update+0x240>
			{
				rocket_status = STAT_MOTOR_BURNOUT;
 8001698:	4b4d      	ldr	r3, [pc, #308]	@ (80017d0 <algorithm_1_update+0x26c>)
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
				counter = 0;
 800169e:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <algorithm_1_update+0x274>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
				//serial_println("Burnout", &TTL_HNDLR);
			}
			break;
 80016a4:	e07e      	b.n	80017a4 <algorithm_1_update+0x240>

		case STAT_MOTOR_BURNOUT:					//Arming altitude achived
			if(rocket->altitude > ARMING_ALTITUDE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80017e0 <algorithm_1_update+0x27c>
 80016b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	dd05      	ble.n	80016c6 <algorithm_1_update+0x162>
			{
				counter++;
 80016ba:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <algorithm_1_update+0x274>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a45      	ldr	r2, [pc, #276]	@ (80017d8 <algorithm_1_update+0x274>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e002      	b.n	80016cc <algorithm_1_update+0x168>
			}
			else
			{
				counter = 0;
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <algorithm_1_update+0x274>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <algorithm_1_update+0x274>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d169      	bne.n	80017a8 <algorithm_1_update+0x244>
			{
				rocket_status = STAT_ARMING_DISABLE;
 80016d4:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <algorithm_1_update+0x26c>)
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]
				counter = 0;
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <algorithm_1_update+0x274>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
				//serial_println("Arming altitude achived", &TTL_HNDLR);
			}
			break;
 80016e0:	e062      	b.n	80017a8 <algorithm_1_update+0x244>

		case STAT_ARMING_DISABLE:					//Falling detection || First parachute
			if(velocity < FALLING_VELOCITY_TRESHOLD || rocket->angle_x > ANGLE_THRESHOLD || rocket->angle_y > ANGLE_THRESHOLD || rocket->angle_z > ANGLE_THRESHOLD)
 80016e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d41d      	bmi.n	8001730 <algorithm_1_update+0x1cc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edd3 7a07 	vldr	s15, [r3, #28]
 80016fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80017e4 <algorithm_1_update+0x280>
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dc13      	bgt.n	8001730 <algorithm_1_update+0x1cc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a08 	vldr	s15, [r3, #32]
 800170e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80017e4 <algorithm_1_update+0x280>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dc09      	bgt.n	8001730 <algorithm_1_update+0x1cc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001722:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80017e4 <algorithm_1_update+0x280>
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	dd05      	ble.n	800173c <algorithm_1_update+0x1d8>
			{
				counter++;
 8001730:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <algorithm_1_update+0x274>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <algorithm_1_update+0x274>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e002      	b.n	8001742 <algorithm_1_update+0x1de>
			}
			else
			{
				counter = 0;
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <algorithm_1_update+0x274>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 8001742:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <algorithm_1_update+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d130      	bne.n	80017ac <algorithm_1_update+0x248>
			{
				rocket_status = STAT_P1_OK_P2_NO;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <algorithm_1_update+0x26c>)
 800174c:	2206      	movs	r2, #6
 800174e:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <algorithm_1_update+0x274>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
				//serial_println("First parachute_deploy", &TTL_HNDLR);
				apoge_deploy();
 8001756:	f001 f88b 	bl	8002870 <apoge_deploy>

			}
			break;
 800175a:	e027      	b.n	80017ac <algorithm_1_update+0x248>

		case STAT_P1_OK_P2_NO:							//Second parachute deploy
			if(rocket->altitude < SECOND_DEPLOY_ALTITUDE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017e8 <algorithm_1_update+0x284>
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d505      	bpl.n	800177c <algorithm_1_update+0x218>
			{
				counter++;
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <algorithm_1_update+0x274>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <algorithm_1_update+0x274>)
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e002      	b.n	8001782 <algorithm_1_update+0x21e>
			}
			else
			{
				counter = 0;
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <algorithm_1_update+0x274>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <algorithm_1_update+0x274>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d112      	bne.n	80017b0 <algorithm_1_update+0x24c>
			{
				rocket_status = STAT_P1_OK_P2_OK;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <algorithm_1_update+0x26c>)
 800178c:	2208      	movs	r2, #8
 800178e:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <algorithm_1_update+0x274>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
				//serial_println("Second parachute deploy", &TTL_HNDLR);
				main_deploy();
 8001796:	f001 f84d 	bl	8002834 <main_deploy>

			}
			break;
 800179a:	e009      	b.n	80017b0 <algorithm_1_update+0x24c>
		case STAT_TOUCH_DOWN:

			break;

		default:
			break;
 800179c:	bf00      	nop
 800179e:	e008      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017a0:	bf00      	nop
 80017a2:	e006      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017a4:	bf00      	nop
 80017a6:	e004      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017b0:	bf00      	nop

	}

  }
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000029c 	.word	0x2000029c
 80017c0:	200002a0 	.word	0x200002a0
 80017c4:	200002a4 	.word	0x200002a4
 80017c8:	447a0000 	.word	0x447a0000
 80017cc:	200002b0 	.word	0x200002b0
 80017d0:	200002a8 	.word	0x200002a8
 80017d4:	44bb8000 	.word	0x44bb8000
 80017d8:	200002ac 	.word	0x200002ac
 80017dc:	c3fa0000 	.word	0xc3fa0000
 80017e0:	44fa0000 	.word	0x44fa0000
 80017e4:	42820000 	.word	0x42820000
 80017e8:	44098000 	.word	0x44098000

080017ec <calculateCRC>:
union DataPack veriler;
uint8_t bufferPrint[400];


static uint8_t calculateCRC()
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	int check_sum = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 80017f6:	2301      	movs	r3, #1
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	e00a      	b.n	8001812 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <calculateCRC+0x48>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b3c      	cmp	r3, #60	@ 0x3c
 8001816:	d9f1      	bls.n	80017fc <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	425a      	negs	r2, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	bf58      	it	pl
 8001822:	4253      	negpl	r3, r2
 8001824:	b2db      	uxtb	r3, r3
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200002b4 	.word	0x200002b4

08001838 <send_datas>:
  * @param  data: Pointer to the data string.
  * @param  huart: Pointer to the uart handler typedef.
  * @retval None
  */
void send_datas(UART_HandleTypeDef* huart, uint8_t* data, uint16_t len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	4613      	mov	r3, r2
 8001844:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart, data, len, 50);
 8001846:	88fa      	ldrh	r2, [r7, #6]
 8001848:	2332      	movs	r3, #50	@ 0x32
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f007 fed3 	bl	80095f8 <HAL_UART_Transmit>
}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <packDatas>:


uint8_t* packDatas(bmi088_struct_t *bmi, bme280_struct_t *bme, S_GPS_L86_DATA* gps , power_t *power_s, uint16_t status)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	6178      	str	r0, [r7, #20]
 8001864:	6139      	str	r1, [r7, #16]
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 800186a:	4bb1      	ldr	r3, [pc, #708]	@ (8001b30 <packDatas+0x2d4>)
 800186c:	22ff      	movs	r2, #255	@ 0xff
 800186e:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	edd3 7a03 	vldr	s15, [r3, #12]
 800187e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001882:	ee17 3a90 	vmov	r3, s15
 8001886:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	4aaa      	ldr	r2, [pc, #680]	@ (8001b34 <packDatas+0x2d8>)
 800188c:	fb82 1203 	smull	r1, r2, r2, r3
 8001890:	1151      	asrs	r1, r2, #5
 8001892:	17da      	asrs	r2, r3, #31
 8001894:	1a8a      	subs	r2, r1, r2
 8001896:	2164      	movs	r1, #100	@ 0x64
 8001898:	fb01 f202 	mul.w	r2, r1, r2
 800189c:	1a9a      	subs	r2, r3, r2
 800189e:	4613      	mov	r3, r2
 80018a0:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4aa3      	ldr	r2, [pc, #652]	@ (8001b34 <packDatas+0x2d8>)
 80018a6:	fb82 1203 	smull	r1, r2, r2, r3
 80018aa:	1152      	asrs	r2, r2, #5
 80018ac:	17db      	asrs	r3, r3, #31
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4a9f      	ldr	r2, [pc, #636]	@ (8001b34 <packDatas+0x2d8>)
 80018b6:	fb82 1203 	smull	r1, r2, r2, r3
 80018ba:	1151      	asrs	r1, r2, #5
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	1a8a      	subs	r2, r1, r2
 80018c0:	2164      	movs	r1, #100	@ 0x64
 80018c2:	fb01 f202 	mul.w	r2, r1, r2
 80018c6:	1a9a      	subs	r2, r3, r2
 80018c8:	4613      	mov	r3, r2
 80018ca:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 80018cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	7fbb      	ldrb	r3, [r7, #30]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (status);
 80018e2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	4313      	orrs	r3, r2
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 80018f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001b30 <packDatas+0x2d4>)
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80018fa:	4a8d      	ldr	r2, [pc, #564]	@ (8001b30 <packDatas+0x2d4>)
 80018fc:	7fbb      	ldrb	r3, [r7, #30]
 80018fe:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(power_s->voltage * 100);
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001b38 <packDatas+0x2dc>
 800190a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001912:	ee17 3a90 	vmov	r3, s15
 8001916:	b29a      	uxth	r2, r3
 8001918:	4b85      	ldr	r3, [pc, #532]	@ (8001b30 <packDatas+0x2d4>)
 800191a:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(power_s->current);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001926:	ee17 3a90 	vmov	r3, s15
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b80      	ldr	r3, [pc, #512]	@ (8001b30 <packDatas+0x2d4>)
 800192e:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->datas.temperature * 2);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	edd3 7a03 	vldr	s15, [r3, #12]
 8001936:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800193a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001942:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001946:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <packDatas+0x2d4>)
 8001948:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->datas.humidity);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001954:	edc7 7a01 	vstr	s15, [r7, #4]
 8001958:	793a      	ldrb	r2, [r7, #4]
 800195a:	4b75      	ldr	r3, [pc, #468]	@ (8001b30 <packDatas+0x2d4>)
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	veriler.dataYapi.yukseklik_p = bme->datas.altitude;
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a72      	ldr	r2, [pc, #456]	@ (8001b30 <packDatas+0x2d4>)
 8001966:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)bme->parameters->max_alt;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001974:	ee17 3a90 	vmov	r3, s15
 8001978:	b21a      	sxth	r2, r3
 800197a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b30 <packDatas+0x2d4>)
 800197c:	875a      	strh	r2, [r3, #58]	@ 0x3a
#else
	veriler.dataYapi.maxAltitude = 0;
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001982:	4a6b      	ldr	r2, [pc, #428]	@ (8001b30 <packDatas+0x2d4>)
 8001984:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a69      	ldr	r2, [pc, #420]	@ (8001b30 <packDatas+0x2d4>)
 800198c:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a67      	ldr	r2, [pc, #412]	@ (8001b30 <packDatas+0x2d4>)
 8001994:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->datas.gyro_x;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	edd3 7a06 	vldr	s15, [r3, #24]
 800199c:	eef1 7a67 	vneg.f32	s15, s15
 80019a0:	4b63      	ldr	r3, [pc, #396]	@ (8001b30 <packDatas+0x2d4>)
 80019a2:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->datas.gyro_z;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	edd3 7a08 	vldr	s15, [r3, #32]
 80019ac:	eef1 7a67 	vneg.f32	s15, s15
 80019b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <packDatas+0x2d4>)
 80019b2:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->datas.gyro_y;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80019bc:	eef1 7a67 	vneg.f32	s15, s15
 80019c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b30 <packDatas+0x2d4>)
 80019c2:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->datas.acc_x / 1000;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80019cc:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001b3c <packDatas+0x2e0>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	4b56      	ldr	r3, [pc, #344]	@ (8001b30 <packDatas+0x2d4>)
 80019d6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	veriler.dataYapi.accY = bmi->datas.acc_z / 1000;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80019e0:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001b3c <packDatas+0x2e0>
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	4b51      	ldr	r3, [pc, #324]	@ (8001b30 <packDatas+0x2d4>)
 80019ea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	veriler.dataYapi.accZ = (status > STAT_ROCKET_READY) ? (-bmi->datas.acc_y / 1000) - 1.0 : bmi->datas.acc_y / 1000;
 80019ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00d      	beq.n	8001a10 <packDatas+0x1b4>
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80019fa:	eeb1 7a67 	vneg.f32	s14, s15
 80019fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001b3c <packDatas+0x2e0>
 8001a02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a0e:	e006      	b.n	8001a1e <packDatas+0x1c2>
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001a16:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001b3c <packDatas+0x2e0>
 8001a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1e:	4b44      	ldr	r3, [pc, #272]	@ (8001b30 <packDatas+0x2d4>)
 8001a20:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	b25a      	sxtb	r2, r3
 8001a2e:	4b44      	ldr	r3, [pc, #272]	@ (8001b40 <packDatas+0x2e4>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a38:	ee17 3a90 	vmov	r3, s15
 8001a3c:	135b      	asrs	r3, r3, #13
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b25a      	sxtb	r2, r3
 8001a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b40 <packDatas+0x2e4>)
 8001a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a54:	ee17 3a90 	vmov	r3, s15
 8001a58:	139b      	asrs	r3, r3, #14
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	4313      	orrs	r3, r2
 8001a64:	b25a      	sxtb	r2, r3
 8001a66:	4b36      	ldr	r3, [pc, #216]	@ (8001b40 <packDatas+0x2e4>)
 8001a68:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	13db      	asrs	r3, r3, #15
 8001a76:	b25b      	sxtb	r3, r3
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <packDatas+0x2d4>)
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->datas.velocity * 10);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a90:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9c:	ee17 3a90 	vmov	r3, s15
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	4b23      	ldr	r3, [pc, #140]	@ (8001b30 <packDatas+0x2d4>)
 8001aa4:	871a      	strh	r2, [r3, #56]	@ 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 8001aa6:	f001 fa4b 	bl	8002f40 <quaternionToTheta>
 8001aaa:	eef0 7a40 	vmov.f32	s15, s0
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <packDatas+0x2d4>)
 8001ab0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 8001ab4:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <packDatas+0x2e4>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001abe:	ee17 3a90 	vmov	r3, s15
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	bfb8      	it	lt
 8001ac6:	425b      	neglt	r3, r3
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <packDatas+0x2d4>)
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <packDatas+0x2e4>)
 8001ad2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 3a90 	vmov	r3, s15
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bfb8      	it	lt
 8001ae2:	425b      	neglt	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <packDatas+0x2d4>)
 8001ae8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 8001aec:	4b14      	ldr	r3, [pc, #80]	@ (8001b40 <packDatas+0x2e4>)
 8001aee:	edd3 7a02 	vldr	s15, [r3, #8]
 8001af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af6:	ee17 3a90 	vmov	r3, s15
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bfb8      	it	lt
 8001afe:	425b      	neglt	r3, r3
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <packDatas+0x2d4>)
 8001b04:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8001b08:	f7ff fe70 	bl	80017ec <calculateCRC>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <packDatas+0x2d4>)
 8001b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	veriler.dataYapi.CR	= '\r';
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <packDatas+0x2d4>)
 8001b18:	220d      	movs	r2, #13
 8001b1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	veriler.dataYapi.LF	= '\n';
 8001b1e:	4b04      	ldr	r3, [pc, #16]	@ (8001b30 <packDatas+0x2d4>)
 8001b20:	220a      	movs	r2, #10
 8001b22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	return veriler.arr;
 8001b26:	4b02      	ldr	r3, [pc, #8]	@ (8001b30 <packDatas+0x2d4>)
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200002b4 	.word	0x200002b4
 8001b34:	51eb851f 	.word	0x51eb851f
 8001b38:	42c80000 	.word	0x42c80000
 8001b3c:	447a0000 	.word	0x447a0000
 8001b40:	200005c0 	.word	0x200005c0

08001b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b17      	ldr	r3, [pc, #92]	@ (8001bac <MX_DMA_Init+0x68>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <MX_DMA_Init+0x68>)
 8001b54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b14      	ldr	r3, [pc, #80]	@ (8001bac <MX_DMA_Init+0x68>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <MX_DMA_Init+0x68>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bac <MX_DMA_Init+0x68>)
 8001b70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b0d      	ldr	r3, [pc, #52]	@ (8001bac <MX_DMA_Init+0x68>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	200c      	movs	r0, #12
 8001b88:	f003 fd3b 	bl	8005602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b8c:	200c      	movs	r0, #12
 8001b8e:	f003 fd54 	bl	800563a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2039      	movs	r0, #57	@ 0x39
 8001b98:	f003 fd33 	bl	8005602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b9c:	2039      	movs	r0, #57	@ 0x39
 8001b9e:	f003 fd4c 	bl	800563a <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	@ 0x28
 8001bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b75      	ldr	r3, [pc, #468]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a74      	ldr	r2, [pc, #464]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b72      	ldr	r3, [pc, #456]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b6e      	ldr	r3, [pc, #440]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a6d      	ldr	r2, [pc, #436]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b6b      	ldr	r3, [pc, #428]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	4b67      	ldr	r3, [pc, #412]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a66      	ldr	r2, [pc, #408]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b64      	ldr	r3, [pc, #400]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b60      	ldr	r3, [pc, #384]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	4a5f      	ldr	r2, [pc, #380]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
 8001c3a:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a58      	ldr	r2, [pc, #352]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b56      	ldr	r3, [pc, #344]	@ (8001da0 <MX_GPIO_Init+0x1f0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|APOGE_STAT_DIS_Pin|APOGE_MOS_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	f241 0109 	movw	r1, #4105	@ 0x1009
 8001c58:	4852      	ldr	r0, [pc, #328]	@ (8001da4 <MX_GPIO_Init+0x1f4>)
 8001c5a:	f004 fbff 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, APOGEE_LED_Pin|MAIN_LED_Pin|RF_M0_Pin|RF_M1_Pin, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f641 0109 	movw	r1, #6153	@ 0x1809
 8001c64:	4850      	ldr	r0, [pc, #320]	@ (8001da8 <MX_GPIO_Init+0x1f8>)
 8001c66:	f004 fbf9 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENS_RES_Pin|USER_LED_Pin|SD_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f248 0116 	movw	r1, #32790	@ 0x8016
 8001c70:	484d      	ldr	r0, [pc, #308]	@ (8001da8 <MX_GPIO_Init+0x1f8>)
 8001c72:	f004 fbf3 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAIN_MOS_Pin|MAIN_STAT_DIS_Pin|IO_1_Pin|IO_0_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	f246 0105 	movw	r1, #24581	@ 0x6005
 8001c7c:	484b      	ldr	r0, [pc, #300]	@ (8001dac <MX_GPIO_Init+0x1fc>)
 8001c7e:	f004 fbed 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RES_GPIO_Port, FLASH_RES_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2104      	movs	r1, #4
 8001c86:	484a      	ldr	r0, [pc, #296]	@ (8001db0 <MX_GPIO_Init+0x200>)
 8001c88:	f004 fbe8 	bl	800645c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : APOGE_STAT_Pin SD_CD_Pin */
  GPIO_InitStruct.Pin = APOGE_STAT_Pin|SD_CD_Pin;
 8001c8c:	f242 0310 	movw	r3, #8208	@ 0x2010
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4840      	ldr	r0, [pc, #256]	@ (8001da4 <MX_GPIO_Init+0x1f4>)
 8001ca2:	f004 f953 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin APOGE_STAT_DIS_Pin APOGE_MOS_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|APOGE_STAT_DIS_Pin|APOGE_MOS_Pin;
 8001ca6:	f241 0309 	movw	r3, #4105	@ 0x1009
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb8:	f107 0314 	add.w	r3, r7, #20
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4839      	ldr	r0, [pc, #228]	@ (8001da4 <MX_GPIO_Init+0x1f4>)
 8001cc0:	f004 f944 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : APOGEE_LED_Pin SENS_RES_Pin USER_LED_Pin MAIN_LED_Pin
                           SD_CS_Pin RF_M0_Pin RF_M1_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = APOGEE_LED_Pin|SENS_RES_Pin|USER_LED_Pin|MAIN_LED_Pin
 8001cc4:	f649 031f 	movw	r3, #38943	@ 0x981f
 8001cc8:	617b      	str	r3, [r7, #20]
                          |SD_CS_Pin|RF_M0_Pin|RF_M1_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4832      	ldr	r0, [pc, #200]	@ (8001da8 <MX_GPIO_Init+0x1f8>)
 8001cde:	f004 f935 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_MOS_Pin MAIN_STAT_DIS_Pin IO_1_Pin IO_0_Pin */
  GPIO_InitStruct.Pin = MAIN_MOS_Pin|MAIN_STAT_DIS_Pin|IO_1_Pin|IO_0_Pin;
 8001ce2:	f246 0305 	movw	r3, #24581	@ 0x6005
 8001ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	482c      	ldr	r0, [pc, #176]	@ (8001dac <MX_GPIO_Init+0x1fc>)
 8001cfc:	f004 f926 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_STAT_Pin GPS_LED_Pin FLASH_WP_Pin */
  GPIO_InitStruct.Pin = MAIN_STAT_Pin|GPS_LED_Pin|FLASH_WP_Pin;
 8001d00:	f249 0302 	movw	r3, #36866	@ 0x9002
 8001d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	4825      	ldr	r0, [pc, #148]	@ (8001dac <MX_GPIO_Init+0x1fc>)
 8001d16:	f004 f919 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8001d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d20:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	481c      	ldr	r0, [pc, #112]	@ (8001da4 <MX_GPIO_Init+0x1f4>)
 8001d32:	f004 f90b 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ACC_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin;
 8001d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_ACC_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4816      	ldr	r0, [pc, #88]	@ (8001da8 <MX_GPIO_Init+0x1f8>)
 8001d4e:	f004 f8fd 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_AUX_Pin */
  GPIO_InitStruct.Pin = RF_AUX_Pin;
 8001d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_AUX_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	4810      	ldr	r0, [pc, #64]	@ (8001da8 <MX_GPIO_Init+0x1f8>)
 8001d68:	f004 f8f0 	bl	8005f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RES_Pin */
  GPIO_InitStruct.Pin = FLASH_RES_Pin;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_RES_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	480b      	ldr	r0, [pc, #44]	@ (8001db0 <MX_GPIO_Init+0x200>)
 8001d84:	f004 f8e2 	bl	8005f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	2017      	movs	r0, #23
 8001d8e:	f003 fc38 	bl	8005602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d92:	2017      	movs	r0, #23
 8001d94:	f003 fc51 	bl	800563a <HAL_NVIC_EnableIRQ>

}
 8001d98:	bf00      	nop
 8001d9a:	3728      	adds	r7, #40	@ 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020c00 	.word	0x40020c00

08001db4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dba:	4a13      	ldr	r2, [pc, #76]	@ (8001e08 <MX_I2C1_Init+0x54>)
 8001dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dc0:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <MX_I2C1_Init+0x58>)
 8001dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <MX_I2C1_Init+0x50>)
 8001df2:	f004 fb65 	bl	80064c0 <HAL_I2C_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dfc:	f000 fe26 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	200002f4 	.word	0x200002f4
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	000186a0 	.word	0x000186a0

08001e10 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001e14:	4b12      	ldr	r3, [pc, #72]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e16:	4a13      	ldr	r2, [pc, #76]	@ (8001e64 <MX_I2C3_Init+0x54>)
 8001e18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e1c:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <MX_I2C3_Init+0x58>)
 8001e1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e20:	4b0f      	ldr	r3, [pc, #60]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001e26:	4b0e      	ldr	r3, [pc, #56]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e2e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e32:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e3a:	4b09      	ldr	r3, [pc, #36]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e40:	4b07      	ldr	r3, [pc, #28]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e4c:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_I2C3_Init+0x50>)
 8001e4e:	f004 fb37 	bl	80064c0 <HAL_I2C_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e58:	f000 fdf8 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000348 	.word	0x20000348
 8001e64:	40005c00 	.word	0x40005c00
 8001e68:	000186a0 	.word	0x000186a0

08001e6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	@ 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a42      	ldr	r2, [pc, #264]	@ (8001f94 <HAL_I2C_MspInit+0x128>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d12d      	bne.n	8001eea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a40      	ldr	r2, [pc, #256]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb0:	2312      	movs	r3, #18
 8001eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec0:	f107 031c 	add.w	r3, r7, #28
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4835      	ldr	r0, [pc, #212]	@ (8001f9c <HAL_I2C_MspInit+0x130>)
 8001ec8:	f004 f840 	bl	8005f4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	4b31      	ldr	r3, [pc, #196]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed4:	4a30      	ldr	r2, [pc, #192]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001ed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001edc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001ee8:	e050      	b.n	8001f8c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa0 <HAL_I2C_MspInit+0x134>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d14b      	bne.n	8001f8c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	4a26      	ldr	r2, [pc, #152]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f04:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b20      	ldr	r3, [pc, #128]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f32:	2312      	movs	r3, #18
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3e:	2304      	movs	r3, #4
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4816      	ldr	r0, [pc, #88]	@ (8001fa4 <HAL_I2C_MspInit+0x138>)
 8001f4a:	f003 ffff 	bl	8005f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f54:	2312      	movs	r3, #18
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f60:	2304      	movs	r3, #4
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480f      	ldr	r0, [pc, #60]	@ (8001fa8 <HAL_I2C_MspInit+0x13c>)
 8001f6c:	f003 ffee 	bl	8005f4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	4b08      	ldr	r3, [pc, #32]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	4a07      	ldr	r2, [pc, #28]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f80:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_I2C_MspInit+0x12c>)
 8001f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
}
 8001f8c:	bf00      	nop
 8001f8e:	3730      	adds	r7, #48	@ 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40005400 	.word	0x40005400
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40005c00 	.word	0x40005c00
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000

08001fac <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a16      	ldr	r2, [pc, #88]	@ (8002014 <HAL_I2C_MspDeInit+0x68>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d110      	bne.n	8001fe0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <HAL_I2C_MspDeInit+0x6c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <HAL_I2C_MspDeInit+0x6c>)
 8001fc4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001fca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001fce:	4813      	ldr	r0, [pc, #76]	@ (800201c <HAL_I2C_MspDeInit+0x70>)
 8001fd0:	f004 f950 	bl	8006274 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001fd4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fd8:	4810      	ldr	r0, [pc, #64]	@ (800201c <HAL_I2C_MspDeInit+0x70>)
 8001fda:	f004 f94b 	bl	8006274 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001fde:	e014      	b.n	800200a <HAL_I2C_MspDeInit+0x5e>
  else if(i2cHandle->Instance==I2C3)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8002020 <HAL_I2C_MspDeInit+0x74>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10f      	bne.n	800200a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_I2C_MspDeInit+0x6c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fee:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <HAL_I2C_MspDeInit+0x6c>)
 8001ff0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ff4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8001ff6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ffa:	480a      	ldr	r0, [pc, #40]	@ (8002024 <HAL_I2C_MspDeInit+0x78>)
 8001ffc:	f004 f93a 	bl	8006274 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8002000:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002004:	4808      	ldr	r0, [pc, #32]	@ (8002028 <HAL_I2C_MspDeInit+0x7c>)
 8002006:	f004 f935 	bl	8006274 <HAL_GPIO_DeInit>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40005400 	.word	0x40005400
 8002018:	40023800 	.word	0x40023800
 800201c:	40020400 	.word	0x40020400
 8002020:	40005c00 	.word	0x40005c00
 8002024:	40020800 	.word	0x40020800
 8002028:	40020000 	.word	0x40020000

0800202c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002032:	f002 fd75 	bl	8004b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002036:	f000 f98d 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800203a:	f7ff fdb9 	bl	8001bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 800203e:	f7ff fd81 	bl	8001b44 <MX_DMA_Init>
  MX_I2C1_Init();
 8002042:	f7ff feb7 	bl	8001db4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002046:	f7ff fee3 	bl	8001e10 <MX_I2C3_Init>
  MX_SPI1_Init();
 800204a:	f001 f9a5 	bl	8003398 <MX_SPI1_Init>
  MX_SPI3_Init();
 800204e:	f001 f9d9 	bl	8003404 <MX_SPI3_Init>
  MX_UART4_Init();
 8002052:	f002 f8a3 	bl	800419c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8002056:	f002 f8cb 	bl	80041f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800205a:	f002 f8f3 	bl	8004244 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800205e:	f002 f91b 	bl	8004298 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8002062:	f001 f949 	bl	80032f8 <MX_RTC_Init>
  MX_TIM3_Init();
 8002066:	f001 fc43 	bl	80038f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800206a:	f001 fc8f 	bl	800398c <MX_TIM4_Init>
  MX_TIM5_Init();
 800206e:	f001 fcdb 	bl	8003a28 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002072:	f001 fd27 	bl	8003ac4 <MX_TIM6_Init>
  MX_TIM9_Init();
 8002076:	f001 fd5b 	bl	8003b30 <MX_TIM9_Init>
  MX_ADC1_Init();
 800207a:	f7ff f94f 	bl	800131c <MX_ADC1_Init>
  MX_ADC2_Init();
 800207e:	f7ff f99f 	bl	80013c0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 8002082:	f005 fa71 	bl	8007568 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <main+0x2a4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a91      	ldr	r2, [pc, #580]	@ (80022d0 <main+0x2a4>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
  HAL_PWR_EnableBkUpReg();
 8002092:	f005 fa7d 	bl	8007590 <HAL_PWREx_EnableBkUpReg>

  HAL_GPIO_WritePin(SENS_RES_GPIO_Port, SENS_RES_Pin, GPIO_PIN_SET);
 8002096:	2201      	movs	r2, #1
 8002098:	2102      	movs	r1, #2
 800209a:	488e      	ldr	r0, [pc, #568]	@ (80022d4 <main+0x2a8>)
 800209c:	f004 f9de 	bl	800645c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80020a0:	2032      	movs	r0, #50	@ 0x32
 80020a2:	f002 fdaf 	bl	8004c04 <HAL_Delay>
  HAL_GPIO_WritePin(SENS_RES_GPIO_Port, SENS_RES_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2102      	movs	r1, #2
 80020aa:	488a      	ldr	r0, [pc, #552]	@ (80022d4 <main+0x2a8>)
 80020ac:	f004 f9d6 	bl	800645c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80020b0:	2032      	movs	r0, #50	@ 0x32
 80020b2:	f002 fda7 	bl	8004c04 <HAL_Delay>

  uint8_t bme_ret = bme280_begin();
 80020b6:	f000 f9c1 	bl	800243c <bme280_begin>
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if(bme_ret)
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <main+0xa0>
  {
	  serial_println("bme sensor fail", &TTL_HNDLR);
 80020c4:	4984      	ldr	r1, [pc, #528]	@ (80022d8 <main+0x2ac>)
 80020c6:	4885      	ldr	r0, [pc, #532]	@ (80022dc <main+0x2b0>)
 80020c8:	f000 fa86 	bl	80025d8 <serial_println>
  else
  {
	  //serial_println("bme sensor success", &TTL_HNDLR);
  }

  bme280_config(&bme_sensor_s);
 80020cc:	4884      	ldr	r0, [pc, #528]	@ (80022e0 <main+0x2b4>)
 80020ce:	f008 fd9b 	bl	800ac08 <bme280_config>

  uint8_t bmi_ret = bmi088_begin();
 80020d2:	f000 fa4b 	bl	800256c <bmi088_begin>
 80020d6:	4603      	mov	r3, r0
 80020d8:	71bb      	strb	r3, [r7, #6]
  if(bmi_ret)
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01d      	beq.n	800211c <main+0xf0>
  {
	  serial_println("bmi fail", &TTL_HNDLR);
 80020e0:	497d      	ldr	r1, [pc, #500]	@ (80022d8 <main+0x2ac>)
 80020e2:	4880      	ldr	r0, [pc, #512]	@ (80022e4 <main+0x2b8>)
 80020e4:	f000 fa78 	bl	80025d8 <serial_println>
      if((bmi_ret & 0x01) == 0x01)
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <main+0xd6>
      {
        sprintf((char*)str, "error in accel");
 80020f2:	497d      	ldr	r1, [pc, #500]	@ (80022e8 <main+0x2bc>)
 80020f4:	487d      	ldr	r0, [pc, #500]	@ (80022ec <main+0x2c0>)
 80020f6:	f00b f9f9 	bl	800d4ec <siprintf>
        serial_println((char*) str, &TTL_HNDLR);
 80020fa:	4977      	ldr	r1, [pc, #476]	@ (80022d8 <main+0x2ac>)
 80020fc:	487b      	ldr	r0, [pc, #492]	@ (80022ec <main+0x2c0>)
 80020fe:	f000 fa6b 	bl	80025d8 <serial_println>
      }
      if((bmi_ret & 0x02) == 0x02)
 8002102:	79bb      	ldrb	r3, [r7, #6]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <main+0xf0>
      {
        sprintf((char*)str, "error in gyro");
 800210c:	4978      	ldr	r1, [pc, #480]	@ (80022f0 <main+0x2c4>)
 800210e:	4877      	ldr	r0, [pc, #476]	@ (80022ec <main+0x2c0>)
 8002110:	f00b f9ec 	bl	800d4ec <siprintf>
        serial_println((char*) str, &TTL_HNDLR);
 8002114:	4970      	ldr	r1, [pc, #448]	@ (80022d8 <main+0x2ac>)
 8002116:	4875      	ldr	r0, [pc, #468]	@ (80022ec <main+0x2c0>)
 8002118:	f000 fa5e 	bl	80025d8 <serial_println>
  else
  {
	  //serial_println("bmi success", &TTL_HNDLR);
  }

    bmi088_config(&bmi_imu_s);
 800211c:	4875      	ldr	r0, [pc, #468]	@ (80022f4 <main+0x2c8>)
 800211e:	f009 fb59 	bl	800b7d4 <bmi088_config>
    get_offset(&bmi_imu_s);
 8002122:	4874      	ldr	r0, [pc, #464]	@ (80022f4 <main+0x2c8>)
 8002124:	f00a f8a4 	bl	800c270 <get_offset>

    ukb_test_init(&test_datas);
 8002128:	4873      	ldr	r0, [pc, #460]	@ (80022f8 <main+0x2cc>)
 800212a:	f001 fddb 	bl	8003ce4 <ukb_test_init>
    quaternon_init(backup_datas->q);
 800212e:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <main+0x2d0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3344      	adds	r3, #68	@ 0x44
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fc8f 	bl	8002a58 <quaternon_init>
    bmi088_update(&bmi_imu_s);
 800213a:	486e      	ldr	r0, [pc, #440]	@ (80022f4 <main+0x2c8>)
 800213c:	f009 fd4c 	bl	800bbd8 <bmi088_update>
    getInitialQuaternion(bmi_imu_s.datas.acc_x, bmi_imu_s.datas.acc_y, bmi_imu_s.datas.acc_z);
 8002140:	4b6c      	ldr	r3, [pc, #432]	@ (80022f4 <main+0x2c8>)
 8002142:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002146:	4b6b      	ldr	r3, [pc, #428]	@ (80022f4 <main+0x2c8>)
 8002148:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800214c:	4b69      	ldr	r3, [pc, #420]	@ (80022f4 <main+0x2c8>)
 800214e:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 8002152:	eeb0 1a66 	vmov.f32	s2, s13
 8002156:	eef0 0a47 	vmov.f32	s1, s14
 800215a:	eeb0 0a67 	vmov.f32	s0, s15
 800215e:	f000 ffbb 	bl	80030d8 <getInitialQuaternion>


    // GNSS config baud rate 57600 with PMTK command.
    serial_println("$PMTK251,57600*2C", &GPS_UART_HNDLR);	// GNSS baud set 57600
 8002162:	4967      	ldr	r1, [pc, #412]	@ (8002300 <main+0x2d4>)
 8002164:	4867      	ldr	r0, [pc, #412]	@ (8002304 <main+0x2d8>)
 8002166:	f000 fa37 	bl	80025d8 <serial_println>
    HAL_UART_DeInit(&GPS_UART_HNDLR);
 800216a:	4865      	ldr	r0, [pc, #404]	@ (8002300 <main+0x2d4>)
 800216c:	f007 fa12 	bl	8009594 <HAL_UART_DeInit>
    GPS_UART_HNDLR.Init.BaudRate = 57600;
 8002170:	4b63      	ldr	r3, [pc, #396]	@ (8002300 <main+0x2d4>)
 8002172:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002176:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&GPS_UART_HNDLR);
 8002178:	4861      	ldr	r0, [pc, #388]	@ (8002300 <main+0x2d4>)
 800217a:	f007 f9bb 	bl	80094f4 <HAL_UART_Init>
    UsrGpsL86Init(&GPS_UART_HNDLR);
 800217e:	4860      	ldr	r0, [pc, #384]	@ (8002300 <main+0x2d4>)
 8002180:	f002 faaa 	bl	80046d8 <UsrGpsL86Init>
    //VIEW_GPS()											// Read and write to TTL raw GNSS raw value.

    // Lora module config.
    lora_init();
 8002184:	f000 fc14 	bl	80029b0 <lora_init>

    // Config phase finished beep.
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002188:	2201      	movs	r2, #1
 800218a:	2101      	movs	r1, #1
 800218c:	485e      	ldr	r0, [pc, #376]	@ (8002308 <main+0x2dc>)
 800218e:	f004 f965 	bl	800645c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002192:	2064      	movs	r0, #100	@ 0x64
 8002194:	f002 fd36 	bl	8004c04 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002198:	2200      	movs	r2, #0
 800219a:	2101      	movs	r1, #1
 800219c:	485a      	ldr	r0, [pc, #360]	@ (8002308 <main+0x2dc>)
 800219e:	f004 f95d 	bl	800645c <HAL_GPIO_WritePin>

    // Start timer interrupts.
    HAL_TIM_Base_Start_IT(&htim3);
 80021a2:	485a      	ldr	r0, [pc, #360]	@ (800230c <main+0x2e0>)
 80021a4:	f006 fd58 	bl	8008c58 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 80021a8:	4859      	ldr	r0, [pc, #356]	@ (8002310 <main+0x2e4>)
 80021aa:	f006 fd55 	bl	8008c58 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 80021ae:	4859      	ldr	r0, [pc, #356]	@ (8002314 <main+0x2e8>)
 80021b0:	f006 fd52 	bl	8008c58 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 80021b4:	4858      	ldr	r0, [pc, #352]	@ (8002318 <main+0x2ec>)
 80021b6:	f006 fd4f 	bl	8008c58 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim7);
    HAL_TIM_Base_Start_IT(&htim9);
 80021ba:	4858      	ldr	r0, [pc, #352]	@ (800231c <main+0x2f0>)
 80021bc:	f006 fd4c 	bl	8008c58 <HAL_TIM_Base_Start_IT>

    // Start receiving DMA form GNSS UART.
    HAL_UART_Receive_DMA(&RS232_HNDLR, dma_rx_buf, RX_BUFFER_LEN + 6);
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <main+0x2f4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	222a      	movs	r2, #42	@ 0x2a
 80021c6:	4619      	mov	r1, r3
 80021c8:	4856      	ldr	r0, [pc, #344]	@ (8002324 <main+0x2f8>)
 80021ca:	f007 faa0 	bl	800970e <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(&RS232_HNDLR, UART_IT_IDLE);
 80021ce:	4b55      	ldr	r3, [pc, #340]	@ (8002324 <main+0x2f8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	4b53      	ldr	r3, [pc, #332]	@ (8002324 <main+0x2f8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0210 	orr.w	r2, r2, #16
 80021dc:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN 3 */



	  if(get_test_mode() != last_mode)
 80021de:	f001 ff81 	bl	80040e4 <get_test_mode>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b50      	ldr	r3, [pc, #320]	@ (8002328 <main+0x2fc>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d029      	beq.n	8002242 <main+0x216>
	  {
		  last_mode = get_test_mode();
 80021ee:	f001 ff79 	bl	80040e4 <get_test_mode>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002328 <main+0x2fc>)
 80021f8:	701a      	strb	r2, [r3, #0]
		  switch(get_test_mode())
 80021fa:	f001 ff73 	bl	80040e4 <get_test_mode>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b02      	cmp	r3, #2
 8002202:	d017      	beq.n	8002234 <main+0x208>
 8002204:	2b02      	cmp	r3, #2
 8002206:	dc1c      	bgt.n	8002242 <main+0x216>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <main+0x1e6>
 800220c:	2b01      	cmp	r3, #1
 800220e:	d00a      	beq.n	8002226 <main+0x1fa>
 8002210:	e017      	b.n	8002242 <main+0x216>
		  {
		  case 0:
			  HAL_TIM_Base_Stop_IT(&htim4);
 8002212:	483f      	ldr	r0, [pc, #252]	@ (8002310 <main+0x2e4>)
 8002214:	f006 fd90 	bl	8008d38 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Stop_IT(&htim3);
 8002218:	483c      	ldr	r0, [pc, #240]	@ (800230c <main+0x2e0>)
 800221a:	f006 fd8d 	bl	8008d38 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Start_IT(&htim5);
 800221e:	483d      	ldr	r0, [pc, #244]	@ (8002314 <main+0x2e8>)
 8002220:	f006 fd1a 	bl	8008c58 <HAL_TIM_Base_Start_IT>
			  break;
 8002224:	e00d      	b.n	8002242 <main+0x216>

		  case 1:
			  HAL_TIM_Base_Stop_IT(&htim5);
 8002226:	483b      	ldr	r0, [pc, #236]	@ (8002314 <main+0x2e8>)
 8002228:	f006 fd86 	bl	8008d38 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 800222c:	4837      	ldr	r0, [pc, #220]	@ (800230c <main+0x2e0>)
 800222e:	f006 fd13 	bl	8008c58 <HAL_TIM_Base_Start_IT>
			  break;
 8002232:	e006      	b.n	8002242 <main+0x216>

		  case 2:
			  HAL_TIM_Base_Stop_IT(&htim5);
 8002234:	4837      	ldr	r0, [pc, #220]	@ (8002314 <main+0x2e8>)
 8002236:	f006 fd7f 	bl	8008d38 <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Start_IT(&htim4);
 800223a:	4835      	ldr	r0, [pc, #212]	@ (8002310 <main+0x2e4>)
 800223c:	f006 fd0c 	bl	8008c58 <HAL_TIM_Base_Start_IT>
			  break;
 8002240:	bf00      	nop
		  }
	  }
	  if(is_1000ms)	// This condition works at 1Hz.
 8002242:	4b3a      	ldr	r3, [pc, #232]	@ (800232c <main+0x300>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <main+0x232>
	  {
		  Usr_GpsL86GetValues(&gps_s, &GPS_UART_HNDLR);
 800224a:	492d      	ldr	r1, [pc, #180]	@ (8002300 <main+0x2d4>)
 800224c:	4838      	ldr	r0, [pc, #224]	@ (8002330 <main+0x304>)
 800224e:	f002 fa69 	bl	8004724 <Usr_GpsL86GetValues>
		  is_power_1s = 1;
 8002252:	4b38      	ldr	r3, [pc, #224]	@ (8002334 <main+0x308>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
		  is_1000ms = 0;
 8002258:	4b34      	ldr	r3, [pc, #208]	@ (800232c <main+0x300>)
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
	  }
	  if(is_200ms)	// This condition works at 5Hz.
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <main+0x30c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01c      	beq.n	80022a0 <main+0x274>
	  {
		  packed_datas_p = packDatas(&bmi_imu_s, &bme_sensor_s, &gps_s, &power_s, rocket_status + 1);
 8002266:	4b35      	ldr	r3, [pc, #212]	@ (800233c <main+0x310>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b29b      	uxth	r3, r3
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <main+0x314>)
 8002272:	4a2f      	ldr	r2, [pc, #188]	@ (8002330 <main+0x304>)
 8002274:	491a      	ldr	r1, [pc, #104]	@ (80022e0 <main+0x2b4>)
 8002276:	481f      	ldr	r0, [pc, #124]	@ (80022f4 <main+0x2c8>)
 8002278:	f7ff faf0 	bl	800185c <packDatas>
 800227c:	4603      	mov	r3, r0
 800227e:	4a31      	ldr	r2, [pc, #196]	@ (8002344 <main+0x318>)
 8002280:	6013      	str	r3, [r2, #0]
		  send_datas(&TTL_HNDLR, packed_datas_p, 64);	// Sends the packets via uart bridge to GCS.
 8002282:	4b30      	ldr	r3, [pc, #192]	@ (8002344 <main+0x318>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2240      	movs	r2, #64	@ 0x40
 8002288:	4619      	mov	r1, r3
 800228a:	4813      	ldr	r0, [pc, #76]	@ (80022d8 <main+0x2ac>)
 800228c:	f7ff fad4 	bl	8001838 <send_datas>

		  sayac++;
 8002290:	4b2d      	ldr	r3, [pc, #180]	@ (8002348 <main+0x31c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a2c      	ldr	r2, [pc, #176]	@ (8002348 <main+0x31c>)
 8002298:	6013      	str	r3, [r2, #0]
		  is_200ms = 0;
 800229a:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <main+0x30c>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
	  }
	  if(is_10ms)// This condition works at 100Hz.
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <main+0x320>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <main+0x288>
	  {
		  bme280_update(&bme_sensor_s);	// 100Hz call is enough for baro sensor.
 80022a8:	480d      	ldr	r0, [pc, #52]	@ (80022e0 <main+0x2b4>)
 80022aa:	f008 fe61 	bl	800af70 <bme280_update>
		  is_10ms = 0;
 80022ae:	4b27      	ldr	r3, [pc, #156]	@ (800234c <main+0x320>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
	  }
	  if(is_1ms)	// This condition works at 1kHz.
 80022b4:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <main+0x324>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <main+0x29c>
	  {
		  is_1ms = 0;
 80022bc:	4b24      	ldr	r3, [pc, #144]	@ (8002350 <main+0x324>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
		  calc_power(&power_s);
 80022c2:	481f      	ldr	r0, [pc, #124]	@ (8002340 <main+0x314>)
 80022c4:	f000 faf4 	bl	80028b0 <calc_power>
	  }

	  bmi088_update(&bmi_imu_s);	// IMU sensor uses interrupts so it can be called always.
 80022c8:	480a      	ldr	r0, [pc, #40]	@ (80022f4 <main+0x2c8>)
 80022ca:	f009 fc85 	bl	800bbd8 <bmi088_update>
	  if(get_test_mode() != last_mode)
 80022ce:	e786      	b.n	80021de <main+0x1b2>
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40020000 	.word	0x40020000
 80022d8:	20000890 	.word	0x20000890
 80022dc:	08013208 	.word	0x08013208
 80022e0:	2000039c 	.word	0x2000039c
 80022e4:	08013218 	.word	0x08013218
 80022e8:	08013224 	.word	0x08013224
 80022ec:	20000430 	.word	0x20000430
 80022f0:	08013234 	.word	0x08013234
 80022f4:	200003c8 	.word	0x200003c8
 80022f8:	200004f8 	.word	0x200004f8
 80022fc:	20000000 	.word	0x20000000
 8002300:	20000920 	.word	0x20000920
 8002304:	08013244 	.word	0x08013244
 8002308:	40020800 	.word	0x40020800
 800230c:	200006d4 	.word	0x200006d4
 8002310:	2000071c 	.word	0x2000071c
 8002314:	20000764 	.word	0x20000764
 8002318:	200007ac 	.word	0x200007ac
 800231c:	200007f4 	.word	0x200007f4
 8002320:	200006a0 	.word	0x200006a0
 8002324:	200008d8 	.word	0x200008d8
 8002328:	20000544 	.word	0x20000544
 800232c:	200005b0 	.word	0x200005b0
 8002330:	20000548 	.word	0x20000548
 8002334:	200005b4 	.word	0x200005b4
 8002338:	200005b1 	.word	0x200005b1
 800233c:	200002a8 	.word	0x200002a8
 8002340:	200005a4 	.word	0x200005a4
 8002344:	200005a0 	.word	0x200005a0
 8002348:	200005b8 	.word	0x200005b8
 800234c:	200005b2 	.word	0x200005b2
 8002350:	200005b3 	.word	0x200005b3

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	@ 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	2234      	movs	r2, #52	@ 0x34
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f00b f965 	bl	800d632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 0308 	add.w	r3, r7, #8
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	4b2d      	ldr	r3, [pc, #180]	@ (8002434 <SystemClock_Config+0xe0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	4a2c      	ldr	r2, [pc, #176]	@ (8002434 <SystemClock_Config+0xe0>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	@ 0x40
 8002388:	4b2a      	ldr	r3, [pc, #168]	@ (8002434 <SystemClock_Config+0xe0>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <SystemClock_Config+0xe4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a26      	ldr	r2, [pc, #152]	@ (8002438 <SystemClock_Config+0xe4>)
 800239e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <SystemClock_Config+0xe4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80023b0:	2306      	movs	r3, #6
 80023b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023b4:	2301      	movs	r3, #1
 80023b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023bc:	2310      	movs	r3, #16
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c0:	2302      	movs	r3, #2
 80023c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023c4:	2300      	movs	r3, #0
 80023c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023c8:	2308      	movs	r3, #8
 80023ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80023cc:	23b4      	movs	r3, #180	@ 0xb4
 80023ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d0:	2302      	movs	r3, #2
 80023d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80023d8:	2302      	movs	r3, #2
 80023da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023dc:	f107 031c 	add.w	r3, r7, #28
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 ffbf 	bl	8008364 <HAL_RCC_OscConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80023ec:	f000 fb2e 	bl	8002a4c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023f0:	f005 f8f4 	bl	80075dc <HAL_PWREx_EnableOverDrive>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80023fa:	f000 fb27 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fe:	230f      	movs	r3, #15
 8002400:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002402:	2302      	movs	r3, #2
 8002404:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800240a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002414:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	2105      	movs	r1, #5
 800241c:	4618      	mov	r0, r3
 800241e:	f005 f92d 	bl	800767c <HAL_RCC_ClockConfig>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002428:	f000 fb10 	bl	8002a4c <Error_Handler>
  }
}
 800242c:	bf00      	nop
 800242e:	3750      	adds	r7, #80	@ 0x50
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000

0800243c <bme280_begin>:

/* USER CODE BEGIN 4 */
uint8_t bme280_begin()
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	bme_sensor_s.device_config.filter = BME280_FILTER_8;
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <bme280_begin+0x38>)
 8002442:	2203      	movs	r2, #3
 8002444:	719a      	strb	r2, [r3, #6]
	bme_sensor_s.device_config.mode = BME280_MODE_NORMAL;
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <bme280_begin+0x38>)
 8002448:	2203      	movs	r2, #3
 800244a:	711a      	strb	r2, [r3, #4]
	bme_sensor_s.device_config.over_sampling = BME280_OS_8;
 800244c:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <bme280_begin+0x38>)
 800244e:	2204      	movs	r2, #4
 8002450:	715a      	strb	r2, [r3, #5]
	bme_sensor_s.device_config.period = BME280_PERIOD_05;
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <bme280_begin+0x38>)
 8002454:	2200      	movs	r2, #0
 8002456:	71da      	strb	r2, [r3, #7]
	bme_sensor_s.device_config.BME_I2C = &BAR_I2C_HNDLR;
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <bme280_begin+0x38>)
 800245a:	4a07      	ldr	r2, [pc, #28]	@ (8002478 <bme280_begin+0x3c>)
 800245c:	609a      	str	r2, [r3, #8]
	bme_sensor_s.parameters = &backup_datas->bme_params; //if no backup data, write NULL
 800245e:	4b07      	ldr	r3, [pc, #28]	@ (800247c <bme280_begin+0x40>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <bme280_begin+0x38>)
 8002466:	601a      	str	r2, [r3, #0]
	return bme280_init(&bme_sensor_s);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <bme280_begin+0x38>)
 800246a:	f008 fd5a 	bl	800af22 <bme280_init>
 800246e:	4603      	mov	r3, r0
}
 8002470:	4618      	mov	r0, r3
 8002472:	bd80      	pop	{r7, pc}
 8002474:	2000039c 	.word	0x2000039c
 8002478:	200002f4 	.word	0x200002f4
 800247c:	20000000 	.word	0x20000000

08002480 <bmi_callback>:

void bmi_callback(bmi088_struct_t *BMI)
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	updateQuaternion(-BMI->datas.gyro_z * M_PI / 180.0, BMI->datas.gyro_x * M_PI / 180.0, -BMI->datas.gyro_y * M_PI / 180.0, BMI->datas.delta_time);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	edd3 7a08 	vldr	s15, [r3, #32]
 800248e:	eef1 7a67 	vneg.f32	s15, s15
 8002492:	ee17 3a90 	vmov	r3, s15
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f876 	bl	8000588 <__aeabi_f2d>
 800249c:	a330      	add	r3, pc, #192	@ (adr r3, 8002560 <bmi_callback+0xe0>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8c9 	bl	8000638 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b2d      	ldr	r3, [pc, #180]	@ (8002568 <bmi_callback+0xe8>)
 80024b4:	f7fe f9ea 	bl	800088c <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fbb2 	bl	8000c28 <__aeabi_d2f>
 80024c4:	4604      	mov	r4, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f85c 	bl	8000588 <__aeabi_f2d>
 80024d0:	a323      	add	r3, pc, #140	@ (adr r3, 8002560 <bmi_callback+0xe0>)
 80024d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d6:	f7fe f8af 	bl	8000638 <__aeabi_dmul>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <bmi_callback+0xe8>)
 80024e8:	f7fe f9d0 	bl	800088c <__aeabi_ddiv>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4610      	mov	r0, r2
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7fe fb98 	bl	8000c28 <__aeabi_d2f>
 80024f8:	4605      	mov	r5, r0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002500:	eef1 7a67 	vneg.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f83d 	bl	8000588 <__aeabi_f2d>
 800250e:	a314      	add	r3, pc, #80	@ (adr r3, 8002560 <bmi_callback+0xe0>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f890 	bl	8000638 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <bmi_callback+0xe8>)
 8002526:	f7fe f9b1 	bl	800088c <__aeabi_ddiv>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe fb79 	bl	8000c28 <__aeabi_d2f>
 8002536:	4602      	mov	r2, r0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800253e:	eef0 1a67 	vmov.f32	s3, s15
 8002542:	ee01 2a10 	vmov	s2, r2
 8002546:	ee00 5a90 	vmov	s1, r5
 800254a:	ee00 4a10 	vmov	s0, r4
 800254e:	f000 fa93 	bl	8002a78 <updateQuaternion>
	quaternionToEuler();
 8002552:	f000 fbf9 	bl	8002d48 <quaternionToEuler>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bdb0      	pop	{r4, r5, r7, pc}
 800255e:	bf00      	nop
 8002560:	54442d18 	.word	0x54442d18
 8002564:	400921fb 	.word	0x400921fb
 8002568:	40668000 	.word	0x40668000

0800256c <bmi088_begin>:

uint8_t bmi088_begin(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	//Acc config
	bmi_imu_s.device_config.acc_bandwith = ACC_BWP_OSR4;
 8002570:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <bmi088_begin+0x5c>)
 8002572:	2208      	movs	r2, #8
 8002574:	719a      	strb	r2, [r3, #6]
	bmi_imu_s.device_config.acc_outputDateRate = ACC_ODR_200;
 8002576:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <bmi088_begin+0x5c>)
 8002578:	2209      	movs	r2, #9
 800257a:	71da      	strb	r2, [r3, #7]
	bmi_imu_s.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <bmi088_begin+0x5c>)
 800257e:	2200      	movs	r2, #0
 8002580:	711a      	strb	r2, [r3, #4]
	bmi_imu_s.device_config.acc_range = ACC_RANGE_24G;
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <bmi088_begin+0x5c>)
 8002584:	2203      	movs	r2, #3
 8002586:	715a      	strb	r2, [r3, #5]

	// Gyro config
	bmi_imu_s.device_config.gyro_bandWidth = GYRO_BW_116;
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <bmi088_begin+0x5c>)
 800258a:	2202      	movs	r2, #2
 800258c:	725a      	strb	r2, [r3, #9]
	bmi_imu_s.device_config.gyro_range = GYRO_RANGE_2000;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <bmi088_begin+0x5c>)
 8002590:	2200      	movs	r2, #0
 8002592:	729a      	strb	r2, [r3, #10]
	bmi_imu_s.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <bmi088_begin+0x5c>)
 8002596:	2200      	movs	r2, #0
 8002598:	721a      	strb	r2, [r3, #8]

	//Device config
	bmi_imu_s.device_config.acc_IRQ = ACC_IRQ;
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <bmi088_begin+0x5c>)
 800259c:	2217      	movs	r2, #23
 800259e:	741a      	strb	r2, [r3, #16]
	bmi_imu_s.device_config.gyro_IRQ = GYRO_IRQ;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <bmi088_begin+0x5c>)
 80025a2:	2217      	movs	r2, #23
 80025a4:	745a      	strb	r2, [r3, #17]
	bmi_imu_s.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <bmi088_begin+0x5c>)
 80025a8:	4a08      	ldr	r2, [pc, #32]	@ (80025cc <bmi088_begin+0x60>)
 80025aa:	60da      	str	r2, [r3, #12]
	bmi_imu_s.device_config.offsets = &backup_datas->bmi_offsets;	//Offset datas stored in backup sram for saving them unwanted reset.
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <bmi088_begin+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	332c      	adds	r3, #44	@ 0x2c
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <bmi088_begin+0x5c>)
 80025b4:	6153      	str	r3, [r2, #20]
	bmi_imu_s.IMU_callback = bmi_callback;
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <bmi088_begin+0x5c>)
 80025b8:	4a06      	ldr	r2, [pc, #24]	@ (80025d4 <bmi088_begin+0x68>)
 80025ba:	665a      	str	r2, [r3, #100]	@ 0x64
	return	bmi088_init(&bmi_imu_s);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <bmi088_begin+0x5c>)
 80025be:	f009 f8b1 	bl	800b724 <bmi088_init>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	200003c8 	.word	0x200003c8
 80025cc:	20000348 	.word	0x20000348
 80025d0:	20000000 	.word	0x20000000
 80025d4:	08002481 	.word	0x08002481

080025d8 <serial_println>:

void serial_println(char* str, UART_HandleTypeDef *huart_disp)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart_disp, (uint8_t*)str, strlen(str), 50);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fd fe64 	bl	80002b0 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2332      	movs	r3, #50	@ 0x32
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f007 f801 	bl	80095f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart_disp, (uint8_t*)"\r\n", 2, 50);
 80025f6:	2332      	movs	r3, #50	@ 0x32
 80025f8:	2202      	movs	r2, #2
 80025fa:	4904      	ldr	r1, [pc, #16]	@ (800260c <serial_println+0x34>)
 80025fc:	6838      	ldr	r0, [r7, #0]
 80025fe:	f006 fffb 	bl	80095f8 <HAL_UART_Transmit>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	08013258 	.word	0x08013258

08002610 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002620:	d102      	bne.n	8002628 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&bmi_imu_s);
 8002622:	4807      	ldr	r0, [pc, #28]	@ (8002640 <HAL_GPIO_EXTI_Callback+0x30>)
 8002624:	f009 fe0a 	bl	800c23c <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == INT_GYRO_Pin)
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800262e:	d102      	bne.n	8002636 <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&bmi_imu_s);
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <HAL_GPIO_EXTI_Callback+0x30>)
 8002632:	f009 fe10 	bl	800c256 <bmi088_set_gyro_INT>
	}
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200003c8 	.word	0x200003c8

08002644 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	@ 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)	// This repeats in every 1000ms
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a62      	ldr	r2, [pc, #392]	@ (80027dc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d126      	bne.n	80026a4 <HAL_TIM_PeriodElapsedCallback+0x60>
    {
		rocket_flight_datas.altitude = test_datas.altitude;
 8002656:	4b62      	ldr	r3, [pc, #392]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a62      	ldr	r2, [pc, #392]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800265c:	6013      	str	r3, [r2, #0]
		rocket_flight_datas.accel_x = test_datas.accel_x;
 800265e:	4b60      	ldr	r3, [pc, #384]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a60      	ldr	r2, [pc, #384]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002664:	6113      	str	r3, [r2, #16]
		rocket_flight_datas.accel_y = test_datas.accel_y;
 8002666:	4b5e      	ldr	r3, [pc, #376]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a5e      	ldr	r2, [pc, #376]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800266c:	6153      	str	r3, [r2, #20]
		rocket_flight_datas.accel_z = test_datas.accel_z;
 800266e:	4b5c      	ldr	r3, [pc, #368]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	4a5c      	ldr	r2, [pc, #368]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002674:	6193      	str	r3, [r2, #24]
		rocket_flight_datas.angle_x = test_datas.angle_x;
 8002676:	4b5a      	ldr	r3, [pc, #360]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	4a5a      	ldr	r2, [pc, #360]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800267c:	61d3      	str	r3, [r2, #28]
		rocket_flight_datas.angle_y = test_datas.angle_y;
 800267e:	4b58      	ldr	r3, [pc, #352]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002684:	6213      	str	r3, [r2, #32]
		rocket_flight_datas.angle_z = test_datas.angle_z;
 8002686:	4b56      	ldr	r3, [pc, #344]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a56      	ldr	r2, [pc, #344]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800268c:	6253      	str	r3, [r2, #36]	@ 0x24
		algorithm_1_update(&rocket_flight_datas);
 800268e:	4855      	ldr	r0, [pc, #340]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002690:	f7fe ff68 	bl	8001564 <algorithm_1_update>
		ukb_test_stat_update(rocket_status);
 8002694:	4b54      	ldr	r3, [pc, #336]	@ (80027e8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fd2f 	bl	80040fc <ukb_test_stat_update>

		is_1000ms = 1;
 800269e:	4b53      	ldr	r3, [pc, #332]	@ (80027ec <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
    }

    if (htim->Instance == TIM4)	// This repeats in every 100ms
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a51      	ldr	r2, [pc, #324]	@ (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d145      	bne.n	800273a <HAL_TIM_PeriodElapsedCallback+0xf6>
    {
    	if(working_mode == MODE_SIT_TEST)
 80026ae:	4b51      	ldr	r3, [pc, #324]	@ (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d13e      	bne.n	8002734 <HAL_TIM_PeriodElapsedCallback+0xf0>
    	{
    		test_datas.altitude = rocket_flight_datas.alt_sea_level;
 80026b6:	4b4b      	ldr	r3, [pc, #300]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4a49      	ldr	r2, [pc, #292]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80026bc:	6013      	str	r3, [r2, #0]
    		test_datas.pressure = bme_sensor_s.datas.pressure;
 80026be:	4b4e      	ldr	r3, [pc, #312]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	4a47      	ldr	r2, [pc, #284]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80026c4:	6053      	str	r3, [r2, #4]
    		test_datas.accel_x 	= rocket_flight_datas.accel_x * TO_SI;
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80026c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80026cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80027fc <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80026d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d4:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80026d6:	edc3 7a02 	vstr	s15, [r3, #8]
    		test_datas.accel_y 	= rocket_flight_datas.accel_z * TO_SI;
 80026da:	4b42      	ldr	r3, [pc, #264]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80026dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80026e0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80027fc <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80026e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e8:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80026ea:	edc3 7a03 	vstr	s15, [r3, #12]
    		test_datas.accel_z 	= rocket_flight_datas.accel_y* TO_SI;
 80026ee:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80026f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80026f4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80027fc <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80026f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fc:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80026fe:	edc3 7a04 	vstr	s15, [r3, #16]
    		test_datas.angle_x 	= rocket_flight_datas.angle_x;	//bmi_imu_s.datas.gyro_x_angle;
 8002702:	4b38      	ldr	r3, [pc, #224]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a36      	ldr	r2, [pc, #216]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002708:	6153      	str	r3, [r2, #20]
    		test_datas.angle_y 	= rocket_flight_datas.angle_y;
 800270a:	4b36      	ldr	r3, [pc, #216]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a34      	ldr	r2, [pc, #208]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002710:	6193      	str	r3, [r2, #24]
    		test_datas.angle_z 	= rocket_flight_datas.angle_z; //bmi_imu_s.datas.gyro_z_angle;
 8002712:	4b34      	ldr	r3, [pc, #208]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	4a32      	ldr	r2, [pc, #200]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002718:	61d3      	str	r3, [r2, #28]
        	uint8_t datas_packed[36];
        	pack_datas_for_test(datas_packed, &test_datas);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	4930      	ldr	r1, [pc, #192]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002720:	4618      	mov	r0, r3
 8002722:	f001 fc29 	bl	8003f78 <pack_datas_for_test>
        	HAL_UART_Transmit(&RS232_HNDLR, datas_packed, 36, 50);
 8002726:	f107 010c 	add.w	r1, r7, #12
 800272a:	2332      	movs	r3, #50	@ 0x32
 800272c:	2224      	movs	r2, #36	@ 0x24
 800272e:	4834      	ldr	r0, [pc, #208]	@ (8002800 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002730:	f006 ff62 	bl	80095f8 <HAL_UART_Transmit>
    	}


    	is_200ms = 1;
 8002734:	4b33      	ldr	r3, [pc, #204]	@ (8002804 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]
    }

    if(htim->Instance == TIM5)	// This repeats in every 10ms
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a32      	ldr	r2, [pc, #200]	@ (8002808 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d121      	bne.n	8002788 <HAL_TIM_PeriodElapsedCallback+0x144>
    {
		rocket_flight_datas.altitude = bme_sensor_s.datas.altitude;
 8002744:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	4a26      	ldr	r2, [pc, #152]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800274a:	6013      	str	r3, [r2, #0]
		rocket_flight_datas.accel_x = bmi_imu_s.datas.acc_x;
 800274c:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800274e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002750:	4a24      	ldr	r2, [pc, #144]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002752:	6113      	str	r3, [r2, #16]
		rocket_flight_datas.accel_y = bmi_imu_s.datas.acc_y;
 8002754:	4b2d      	ldr	r3, [pc, #180]	@ (800280c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	4a22      	ldr	r2, [pc, #136]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800275a:	6153      	str	r3, [r2, #20]
		rocket_flight_datas.accel_z = bmi_imu_s.datas.acc_z;
 800275c:	4b2b      	ldr	r3, [pc, #172]	@ (800280c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	4a20      	ldr	r2, [pc, #128]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002762:	6193      	str	r3, [r2, #24]
		rocket_flight_datas.angle_x = euler[0];	//bmi_imu_s.datas.gyro_x_angle;
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1e      	ldr	r2, [pc, #120]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800276a:	61d3      	str	r3, [r2, #28]
		rocket_flight_datas.angle_y = euler[1];	//bmi_imu_s.datas.gyro_y_angle;
 800276c:	4b28      	ldr	r3, [pc, #160]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a1c      	ldr	r2, [pc, #112]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002772:	6213      	str	r3, [r2, #32]
		rocket_flight_datas.angle_z = euler[2];	//bmi_imu_s.datas.gyro_z_angle;
 8002774:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800277a:	6253      	str	r3, [r2, #36]	@ 0x24

		algorithm_1_update(&rocket_flight_datas);
 800277c:	4819      	ldr	r0, [pc, #100]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800277e:	f7fe fef1 	bl	8001564 <algorithm_1_update>

		is_10ms = 1;
 8002782:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
    }

    if(htim->Instance == TIM6)	// This repeats in every 1ms
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a22      	ldr	r2, [pc, #136]	@ (8002818 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d102      	bne.n	8002798 <HAL_TIM_PeriodElapsedCallback+0x154>
    {
    	is_1ms = 1;
 8002792:	4b22      	ldr	r3, [pc, #136]	@ (800281c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
    		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
    		HAL_GPIO_WritePin(APOGEE_LED_GPIO_Port, APOGEE_LED_Pin, GPIO_PIN_SET);
    	}
    }
 */
    if(htim->Instance == TIM9)	// This timer's frequency is changed by software for some purposes. Default 1Hz.
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a20      	ldr	r2, [pc, #128]	@ (8002820 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d117      	bne.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x18e>
    {
		if(power_s.voltage > 7.0)
 80027a2:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80027ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	dd0a      	ble.n	80027cc <HAL_TIM_PeriodElapsedCallback+0x188>
		{
		  e22_chMode_transmit(&lora_1);
 80027b6:	481c      	ldr	r0, [pc, #112]	@ (8002828 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80027b8:	f009 fe88 	bl	800c4cc <e22_chMode_transmit>
		  send_datas(&TELEM_UART_HNDLR, packed_datas_p, 64);
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2240      	movs	r2, #64	@ 0x40
 80027c2:	4619      	mov	r1, r3
 80027c4:	481a      	ldr	r0, [pc, #104]	@ (8002830 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80027c6:	f7ff f837 	bl	8001838 <send_datas>
		{
		  e22_chMode_sleep(&lora_1);
		}
    }

}
 80027ca:	e002      	b.n	80027d2 <HAL_TIM_PeriodElapsedCallback+0x18e>
		  e22_chMode_sleep(&lora_1);
 80027cc:	4816      	ldr	r0, [pc, #88]	@ (8002828 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80027ce:	f009 fe4d 	bl	800c46c <e22_chMode_sleep>
}
 80027d2:	bf00      	nop
 80027d4:	3730      	adds	r7, #48	@ 0x30
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40000400 	.word	0x40000400
 80027e0:	200004f8 	.word	0x200004f8
 80027e4:	20000518 	.word	0x20000518
 80027e8:	200002a8 	.word	0x200002a8
 80027ec:	200005b0 	.word	0x200005b0
 80027f0:	40000800 	.word	0x40000800
 80027f4:	200005bc 	.word	0x200005bc
 80027f8:	2000039c 	.word	0x2000039c
 80027fc:	3c20ba1f 	.word	0x3c20ba1f
 8002800:	200008d8 	.word	0x200008d8
 8002804:	200005b1 	.word	0x200005b1
 8002808:	40000c00 	.word	0x40000c00
 800280c:	200003c8 	.word	0x200003c8
 8002810:	200005c0 	.word	0x200005c0
 8002814:	200005b2 	.word	0x200005b2
 8002818:	40001000 	.word	0x40001000
 800281c:	200005b3 	.word	0x200005b3
 8002820:	40014000 	.word	0x40014000
 8002824:	200005a4 	.word	0x200005a4
 8002828:	20000580 	.word	0x20000580
 800282c:	200005a0 	.word	0x200005a0
 8002830:	20000848 	.word	0x20000848

08002834 <main_deploy>:

void main_deploy()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOS_GPIO_Port, MAIN_MOS_Pin, GPIO_PIN_SET);
 8002838:	2201      	movs	r2, #1
 800283a:	2101      	movs	r1, #1
 800283c:	4808      	ldr	r0, [pc, #32]	@ (8002860 <main_deploy+0x2c>)
 800283e:	f003 fe0d 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002842:	2201      	movs	r2, #1
 8002844:	2101      	movs	r1, #1
 8002846:	4807      	ldr	r0, [pc, #28]	@ (8002864 <main_deploy+0x30>)
 8002848:	f003 fe08 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MAIN_LED_GPIO_Port, MAIN_LED_Pin, GPIO_PIN_RESET);
 800284c:	2200      	movs	r2, #0
 800284e:	2108      	movs	r1, #8
 8002850:	4805      	ldr	r0, [pc, #20]	@ (8002868 <main_deploy+0x34>)
 8002852:	f003 fe03 	bl	800645c <HAL_GPIO_WritePin>
	main_mos_counter = 50;
 8002856:	4b05      	ldr	r3, [pc, #20]	@ (800286c <main_deploy+0x38>)
 8002858:	2232      	movs	r2, #50	@ 0x32
 800285a:	601a      	str	r2, [r3, #0]

}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020000 	.word	0x40020000
 800286c:	20000578 	.word	0x20000578

08002870 <apoge_deploy>:
void apoge_deploy()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(APOGE_MOS_GPIO_Port, APOGE_MOS_Pin, GPIO_PIN_SET);
 8002874:	2201      	movs	r2, #1
 8002876:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800287a:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <apoge_deploy+0x30>)
 800287c:	f003 fdee 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002880:	2201      	movs	r2, #1
 8002882:	2101      	movs	r1, #1
 8002884:	4806      	ldr	r0, [pc, #24]	@ (80028a0 <apoge_deploy+0x30>)
 8002886:	f003 fde9 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(APOGEE_LED_GPIO_Port, APOGEE_LED_Pin, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	2101      	movs	r1, #1
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <apoge_deploy+0x34>)
 8002890:	f003 fde4 	bl	800645c <HAL_GPIO_WritePin>
	apoge_mos_counter = 50;
 8002894:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <apoge_deploy+0x38>)
 8002896:	2232      	movs	r2, #50	@ 0x32
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	40020800 	.word	0x40020800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	2000057c 	.word	0x2000057c
 80028ac:	00000000 	.word	0x00000000

080028b0 <calc_power>:

void calc_power(power_t* pow)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	ed2d 8b02 	vpush	{d8}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	if(is_power_1s == 1)
 80028bc:	4b36      	ldr	r3, [pc, #216]	@ (8002998 <calc_power+0xe8>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <calc_power+0x22>
	{
		pow->current = 0;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	605a      	str	r2, [r3, #4]
		is_power_1s = 0;
 80028cc:	4b32      	ldr	r3, [pc, #200]	@ (8002998 <calc_power+0xe8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
	}
		  HAL_ADC_Start(&hadc1);
 80028d2:	4832      	ldr	r0, [pc, #200]	@ (800299c <calc_power+0xec>)
 80028d4:	f002 f9fe 	bl	8004cd4 <HAL_ADC_Start>
		  HAL_ADC_Start(&hadc2);
 80028d8:	4831      	ldr	r0, [pc, #196]	@ (80029a0 <calc_power+0xf0>)
 80028da:	f002 f9fb 	bl	8004cd4 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 2);
 80028de:	2102      	movs	r1, #2
 80028e0:	482e      	ldr	r0, [pc, #184]	@ (800299c <calc_power+0xec>)
 80028e2:	f002 fac9 	bl	8004e78 <HAL_ADC_PollForConversion>
		  HAL_ADC_PollForConversion(&hadc2, 2);
 80028e6:	2102      	movs	r1, #2
 80028e8:	482d      	ldr	r0, [pc, #180]	@ (80029a0 <calc_power+0xf0>)
 80028ea:	f002 fac5 	bl	8004e78 <HAL_ADC_PollForConversion>
		  float volt = (float)HAL_ADC_GetValue(&hadc1) * VOLT_COEF;
 80028ee:	482b      	ldr	r0, [pc, #172]	@ (800299c <calc_power+0xec>)
 80028f0:	f002 fb4d 	bl	8004f8e <HAL_ADC_GetValue>
 80028f4:	ee07 0a90 	vmov	s15, r0
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80029a4 <calc_power+0xf4>
 8002900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002904:	edc7 7a03 	vstr	s15, [r7, #12]
		  float current = (float)HAL_ADC_GetValue(&hadc2) * CRNT_COEF;
 8002908:	4825      	ldr	r0, [pc, #148]	@ (80029a0 <calc_power+0xf0>)
 800290a:	f002 fb40 	bl	8004f8e <HAL_ADC_GetValue>
 800290e:	ee07 0a90 	vmov	s15, r0
 8002912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002916:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80029a8 <calc_power+0xf8>
 800291a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800291e:	edc7 7a02 	vstr	s15, [r7, #8]
		  pow->voltage = volt + 0.05; // Offset val added.
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7fd fe30 	bl	8000588 <__aeabi_f2d>
 8002928:	a319      	add	r3, pc, #100	@ (adr r3, 8002990 <calc_power+0xe0>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fd fccd 	bl	80002cc <__adddf3>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f975 	bl	8000c28 <__aeabi_d2f>
 800293e:	4602      	mov	r2, r0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	601a      	str	r2, [r3, #0]
		  pow->current += volt * current * (HAL_GetTick() - pow->last_time) / 1000;
 8002944:	ed97 7a03 	vldr	s14, [r7, #12]
 8002948:	edd7 7a02 	vldr	s15, [r7, #8]
 800294c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002950:	f002 f94c 	bl	8004bec <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002964:	ee68 7a27 	vmul.f32	s15, s16, s15
 8002968:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80029ac <calc_power+0xfc>
 800296c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	edd3 7a01 	vldr	s15, [r3, #4]
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	ecbd 8b02 	vpop	{d8}
 800298a:	bd80      	pop	{r7, pc}
 800298c:	f3af 8000 	nop.w
 8002990:	9999999a 	.word	0x9999999a
 8002994:	3fa99999 	.word	0x3fa99999
 8002998:	200005b4 	.word	0x200005b4
 800299c:	2000020c 	.word	0x2000020c
 80029a0:	20000254 	.word	0x20000254
 80029a4:	3b533333 	.word	0x3b533333
 80029a8:	3a533334 	.word	0x3a533334
 80029ac:	447a0000 	.word	0x447a0000

080029b0 <lora_init>:

void lora_init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 80029b4:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <lora_init+0x90>)
 80029b6:	2207      	movs	r2, #7
 80029b8:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 80029ba:	4b21      	ldr	r3, [pc, #132]	@ (8002a40 <lora_init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <lora_init+0x90>)
 80029c2:	2206      	movs	r2, #6
 80029c4:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <lora_init+0x90>)
 80029c8:	2202      	movs	r2, #2
 80029ca:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 80029cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <lora_init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 80029d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <lora_init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 80029d8:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <lora_init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 80029de:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <lora_init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 80029e4:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <lora_init+0x90>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <lora_init+0x90>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <lora_init+0x90>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <lora_init+0x90>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	35;
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <lora_init+0x90>)
 80029fe:	2223      	movs	r2, #35	@ 0x23
 8002a00:	755a      	strb	r2, [r3, #21]

	lora_1.pins.m0_pin = RF_M0_Pin;
 8002a02:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <lora_init+0x90>)
 8002a04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a08:	811a      	strh	r2, [r3, #8]
	lora_1.pins.m0_pin_port = RF_M0_GPIO_Port;
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <lora_init+0x90>)
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a44 <lora_init+0x94>)
 8002a0e:	601a      	str	r2, [r3, #0]
	lora_1.pins.m1_pin = RF_M1_Pin;
 8002a10:	4b0b      	ldr	r3, [pc, #44]	@ (8002a40 <lora_init+0x90>)
 8002a12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a16:	815a      	strh	r2, [r3, #10]
	lora_1.pins.m1_pin_port = RF_M1_GPIO_Port;
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <lora_init+0x90>)
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <lora_init+0x94>)
 8002a1c:	605a      	str	r2, [r3, #4]

	e22_init(&lora_1, &TELEM_UART_HNDLR);
 8002a1e:	490a      	ldr	r1, [pc, #40]	@ (8002a48 <lora_init+0x98>)
 8002a20:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <lora_init+0x90>)
 8002a22:	f009 fc91 	bl	800c348 <e22_init>

	HAL_UART_DeInit(&TELEM_UART_HNDLR);
 8002a26:	4808      	ldr	r0, [pc, #32]	@ (8002a48 <lora_init+0x98>)
 8002a28:	f006 fdb4 	bl	8009594 <HAL_UART_DeInit>
	TELEM_UART_HNDLR.Init.BaudRate = 115200;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <lora_init+0x98>)
 8002a2e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a32:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(&TELEM_UART_HNDLR);
 8002a34:	4804      	ldr	r0, [pc, #16]	@ (8002a48 <lora_init+0x98>)
 8002a36:	f006 fd5d 	bl	80094f4 <HAL_UART_Init>
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000580 	.word	0x20000580
 8002a44:	40020000 	.word	0x40020000
 8002a48:	20000848 	.word	0x20000848

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <Error_Handler+0x8>

08002a58 <quaternon_init>:

float euler[3];		//pitch roll yaw
float *saved_q;

void quaternon_init(float *backup_datas)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
	saved_q = backup_datas;
 8002a60:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <quaternon_init+0x1c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
	quaternionSet_zero();
 8002a66:	f000 fc27 	bl	80032b8 <quaternionSet_zero>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200005cc 	.word	0x200005cc

08002a78 <updateQuaternion>:
void updateQuaternion(float gx, float gy, float gz, float dt) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08a      	sub	sp, #40	@ 0x28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a82:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a86:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a8a:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_q[1] * gx - saved_q[2] * gy - saved_q[3] * gz);
 8002a8e:	4bac      	ldr	r3, [pc, #688]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3304      	adds	r3, #4
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	eeb1 7a67 	vneg.f32	s14, s15
 8002a9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa4:	4ba6      	ldr	r3, [pc, #664]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	edd3 6a00 	vldr	s13, [r3]
 8002aae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aba:	4ba1      	ldr	r3, [pc, #644]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	330c      	adds	r3, #12
 8002ac0:	edd3 6a00 	vldr	s13, [r3]
 8002ac4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float qDot2 = 0.5f * (saved_q[0] * gx + saved_q[2] * gz - saved_q[3] * gy);
 8002adc:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aec:	4b94      	ldr	r3, [pc, #592]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	3308      	adds	r3, #8
 8002af2:	edd3 6a00 	vldr	s13, [r3]
 8002af6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b02:	4b8f      	ldr	r3, [pc, #572]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	edd3 6a00 	vldr	s13, [r3]
 8002b0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b20:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_q[0] * gy - saved_q[1] * gz + saved_q[3] * gx);
 8002b24:	4b86      	ldr	r3, [pc, #536]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	ed93 7a00 	vldr	s14, [r3]
 8002b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b34:	4b82      	ldr	r3, [pc, #520]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	edd3 6a00 	vldr	s13, [r3]
 8002b3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4a:	4b7d      	ldr	r3, [pc, #500]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	330c      	adds	r3, #12
 8002b50:	edd3 6a00 	vldr	s13, [r3]
 8002b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b68:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_q[0] * gz + saved_q[1] * gy - saved_q[2] * gx);
 8002b6c:	4b74      	ldr	r3, [pc, #464]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b7c:	4b70      	ldr	r3, [pc, #448]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3304      	adds	r3, #4
 8002b82:	edd3 6a00 	vldr	s13, [r3]
 8002b86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b92:	4b6b      	ldr	r3, [pc, #428]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3308      	adds	r3, #8
 8002b98:	edd3 6a00 	vldr	s13, [r3]
 8002b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb0:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_q[0] += qDot1 * dt;
 8002bb4:	4b62      	ldr	r3, [pc, #392]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002bc0:	edd7 7a00 	vldr	s15, [r7]
 8002bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
  saved_q[1] += qDot2 * dt;
 8002bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	edd7 6a08 	vldr	s13, [r7, #32]
 8002be2:	edd7 7a00 	vldr	s15, [r7]
 8002be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bea:	4b55      	ldr	r3, [pc, #340]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf4:	edc3 7a00 	vstr	s15, [r3]
  saved_q[2] += qDot3 * dt;
 8002bf8:	4b51      	ldr	r3, [pc, #324]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c06:	edd7 7a00 	vldr	s15, [r7]
 8002c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3308      	adds	r3, #8
 8002c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c18:	edc3 7a00 	vstr	s15, [r3]
  saved_q[3] += qDot4 * dt;
 8002c1c:	4b48      	ldr	r3, [pc, #288]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	ed93 7a00 	vldr	s14, [r3]
 8002c26:	edd7 6a06 	vldr	s13, [r7, #24]
 8002c2a:	edd7 7a00 	vldr	s15, [r7]
 8002c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c32:	4b43      	ldr	r3, [pc, #268]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3c:	edc3 7a00 	vstr	s15, [r3]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_q[0] * saved_q[0] + saved_q[1] * saved_q[1] + saved_q[2] * saved_q[2] + saved_q[3] * saved_q[3]);
 8002c40:	4b3f      	ldr	r3, [pc, #252]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	4b3d      	ldr	r3, [pc, #244]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c54:	4b3a      	ldr	r3, [pc, #232]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	edd3 6a00 	vldr	s13, [r3]
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3304      	adds	r3, #4
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c70:	4b33      	ldr	r3, [pc, #204]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3308      	adds	r3, #8
 8002c76:	edd3 6a00 	vldr	s13, [r3]
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3308      	adds	r3, #8
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	edd3 6a00 	vldr	s13, [r3]
 8002c96:	4b2a      	ldr	r3, [pc, #168]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	330c      	adds	r3, #12
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	ee17 0a90 	vmov	r0, s15
 8002cac:	f7fd fc6c 	bl	8000588 <__aeabi_f2d>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	ec43 2b10 	vmov	d0, r2, r3
 8002cb8:	f00e fcc0 	bl	801163c <sqrt>
 8002cbc:	ec53 2b10 	vmov	r2, r3, d0
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f7fd ffb0 	bl	8000c28 <__aeabi_d2f>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	617b      	str	r3, [r7, #20]
  saved_q[0] /= norm;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	edd3 6a00 	vldr	s13, [r3]
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ce0:	edc3 7a00 	vstr	s15, [r3]
  saved_q[1] /= norm;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	edd3 6a00 	vldr	s13, [r3]
 8002cee:	4b14      	ldr	r3, [pc, #80]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cfc:	edc3 7a00 	vstr	s15, [r3]
  saved_q[2] /= norm;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3308      	adds	r3, #8
 8002d06:	edd3 6a00 	vldr	s13, [r3]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3308      	adds	r3, #8
 8002d10:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d18:	edc3 7a00 	vstr	s15, [r3]
  saved_q[3] /= norm;
 8002d1c:	4b08      	ldr	r3, [pc, #32]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	330c      	adds	r3, #12
 8002d22:	edd3 6a00 	vldr	s13, [r3]
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <updateQuaternion+0x2c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	330c      	adds	r3, #12
 8002d2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d34:	edc3 7a00 	vstr	s15, [r3]
}
 8002d38:	bf00      	nop
 8002d3a:	3728      	adds	r7, #40	@ 0x28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200005cc 	.word	0x200005cc
 8002d44:	00000000 	.word	0x00000000

08002d48 <quaternionToEuler>:

void quaternionToEuler(void) {
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_q[0] * saved_q[1] + saved_q[2] * saved_q[3]), 1.0f - 2.0f * (saved_q[1] * saved_q[1] + saved_q[2] * saved_q[2])) * (180.0 / M_PI);
 8002d4c:	4b7a      	ldr	r3, [pc, #488]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	ed93 7a00 	vldr	s14, [r3]
 8002d54:	4b78      	ldr	r3, [pc, #480]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	edd3 7a00 	vldr	s15, [r3]
 8002d5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d62:	4b75      	ldr	r3, [pc, #468]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3308      	adds	r3, #8
 8002d68:	edd3 6a00 	vldr	s13, [r3]
 8002d6c:	4b72      	ldr	r3, [pc, #456]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	330c      	adds	r3, #12
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d82:	ee17 0a90 	vmov	r0, s15
 8002d86:	f7fd fbff 	bl	8000588 <__aeabi_f2d>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3304      	adds	r3, #4
 8002d94:	ed93 7a00 	vldr	s14, [r3]
 8002d98:	4b67      	ldr	r3, [pc, #412]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	edd3 7a00 	vldr	s15, [r3]
 8002da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da6:	4b64      	ldr	r3, [pc, #400]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	edd3 6a00 	vldr	s13, [r3]
 8002db0:	4b61      	ldr	r3, [pc, #388]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dce:	ee17 0a90 	vmov	r0, s15
 8002dd2:	f7fd fbd9 	bl	8000588 <__aeabi_f2d>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	ec43 2b11 	vmov	d1, r2, r3
 8002dde:	ec45 4b10 	vmov	d0, r4, r5
 8002de2:	f00e fbb9 	bl	8011558 <atan2>
 8002de6:	ec51 0b10 	vmov	r0, r1, d0
 8002dea:	a351      	add	r3, pc, #324	@ (adr r3, 8002f30 <quaternionToEuler+0x1e8>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f7fd fc22 	bl	8000638 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f7fd ff14 	bl	8000c28 <__aeabi_d2f>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a4e      	ldr	r2, [pc, #312]	@ (8002f3c <quaternionToEuler+0x1f4>)
 8002e04:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_q[0] * saved_q[2] - saved_q[3] * saved_q[1])) * (180.0 / M_PI);
 8002e06:	4b4c      	ldr	r3, [pc, #304]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	ed93 7a00 	vldr	s14, [r3]
 8002e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	edd3 7a00 	vldr	s15, [r3]
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	4b46      	ldr	r3, [pc, #280]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	330c      	adds	r3, #12
 8002e22:	edd3 6a00 	vldr	s13, [r3]
 8002e26:	4b44      	ldr	r3, [pc, #272]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	edd3 7a00 	vldr	s15, [r3]
 8002e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e3c:	ee17 0a90 	vmov	r0, s15
 8002e40:	f7fd fba2 	bl	8000588 <__aeabi_f2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	ec43 2b10 	vmov	d0, r2, r3
 8002e4c:	f00e fb50 	bl	80114f0 <asin>
 8002e50:	ec51 0b10 	vmov	r0, r1, d0
 8002e54:	a336      	add	r3, pc, #216	@ (adr r3, 8002f30 <quaternionToEuler+0x1e8>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fbed 	bl	8000638 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	f7fd fedf 	bl	8000c28 <__aeabi_d2f>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	4a33      	ldr	r2, [pc, #204]	@ (8002f3c <quaternionToEuler+0x1f4>)
 8002e6e:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_q[0] * saved_q[3] + saved_q[1] * saved_q[2]), 1.0f - 2.0f * (saved_q[2] * saved_q[2] + saved_q[3] * saved_q[3])) * (180.0 / M_PI);
 8002e70:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	ed93 7a00 	vldr	s14, [r3]
 8002e78:	4b2f      	ldr	r3, [pc, #188]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e86:	4b2c      	ldr	r3, [pc, #176]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	edd3 6a00 	vldr	s13, [r3]
 8002e90:	4b29      	ldr	r3, [pc, #164]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3308      	adds	r3, #8
 8002e96:	edd3 7a00 	vldr	s15, [r3]
 8002e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb6d 	bl	8000588 <__aeabi_f2d>
 8002eae:	4604      	mov	r4, r0
 8002eb0:	460d      	mov	r5, r1
 8002eb2:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	ed93 7a00 	vldr	s14, [r3]
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eca:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	edd3 6a00 	vldr	s13, [r3]
 8002ed4:	4b18      	ldr	r3, [pc, #96]	@ (8002f38 <quaternionToEuler+0x1f0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	330c      	adds	r3, #12
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ee6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef2:	ee17 0a90 	vmov	r0, s15
 8002ef6:	f7fd fb47 	bl	8000588 <__aeabi_f2d>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	ec43 2b11 	vmov	d1, r2, r3
 8002f02:	ec45 4b10 	vmov	d0, r4, r5
 8002f06:	f00e fb27 	bl	8011558 <atan2>
 8002f0a:	ec51 0b10 	vmov	r0, r1, d0
 8002f0e:	a308      	add	r3, pc, #32	@ (adr r3, 8002f30 <quaternionToEuler+0x1e8>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	f7fd fb90 	bl	8000638 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fe82 	bl	8000c28 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a05      	ldr	r2, [pc, #20]	@ (8002f3c <quaternionToEuler+0x1f4>)
 8002f28:	6093      	str	r3, [r2, #8]
}
 8002f2a:	bf00      	nop
 8002f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	1a63c1f8 	.word	0x1a63c1f8
 8002f34:	404ca5dc 	.word	0x404ca5dc
 8002f38:	200005cc 	.word	0x200005cc
 8002f3c:	200005c0 	.word	0x200005c0

08002f40 <quaternionToTheta>:


float quaternionToTheta(){
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0

	float theta = 0.0;
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	@ 0x24

	float r13 = 2 * saved_q[1] * saved_q[3] + 2 * saved_q[2] * saved_q[0];
 8002f4c:	4b60      	ldr	r3, [pc, #384]	@ (80030d0 <quaternionToTheta+0x190>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3304      	adds	r3, #4
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	@ (80030d0 <quaternionToTheta+0x190>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f68:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <quaternionToTheta+0x190>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f76:	4b56      	ldr	r3, [pc, #344]	@ (80030d0 <quaternionToTheta+0x190>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	edd3 7a00 	vldr	s15, [r3]
 8002f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f86:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_q[2] * saved_q[3] - 2 * saved_q[1] * saved_q[0];
 8002f8a:	4b51      	ldr	r3, [pc, #324]	@ (80030d0 <quaternionToTheta+0x190>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3308      	adds	r3, #8
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f98:	4b4d      	ldr	r3, [pc, #308]	@ (80030d0 <quaternionToTheta+0x190>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80030d0 <quaternionToTheta+0x190>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3304      	adds	r3, #4
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002fb4:	4b46      	ldr	r3, [pc, #280]	@ (80030d0 <quaternionToTheta+0x190>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc4:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_q[1] * saved_q[1] - 2 * saved_q[2] * saved_q[2];
 8002fc8:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <quaternionToTheta+0x190>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	edd3 7a00 	vldr	s15, [r3]
 8002fd2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002fd6:	4b3e      	ldr	r3, [pc, #248]	@ (80030d0 <quaternionToTheta+0x190>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fec:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <quaternionToTheta+0x190>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002ffa:	4b35      	ldr	r3, [pc, #212]	@ (80030d0 <quaternionToTheta+0x190>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	edd3 7a00 	vldr	s15, [r3]
 8003004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 8003020:	edd7 7a05 	vldr	s15, [r7, #20]
 8003024:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003028:	edd7 7a04 	vldr	s15, [r7, #16]
 800302c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003034:	edd7 7a03 	vldr	s15, [r7, #12]
 8003038:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800303c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003040:	ee17 0a90 	vmov	r0, s15
 8003044:	f7fd faa0 	bl	8000588 <__aeabi_f2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	ec43 2b10 	vmov	d0, r2, r3
 8003050:	f00e faf4 	bl	801163c <sqrt>
 8003054:	ec53 2b10 	vmov	r2, r3, d0
 8003058:	4610      	mov	r0, r2
 800305a:	4619      	mov	r1, r3
 800305c:	f7fd fde4 	bl	8000c28 <__aeabi_d2f>
 8003060:	4603      	mov	r3, r0
 8003062:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8003064:	ed97 7a02 	vldr	s14, [r7, #8]
 8003068:	edd7 7a01 	vldr	s15, [r7, #4]
 800306c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003070:	ee16 0a90 	vmov	r0, s13
 8003074:	f7fd fa88 	bl	8000588 <__aeabi_f2d>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	ec43 2b10 	vmov	d0, r2, r3
 8003080:	f00e fa02 	bl	8011488 <acos>
 8003084:	ec51 0b10 	vmov	r0, r1, d0
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <quaternionToTheta+0x194>)
 800308e:	f7fd fad3 	bl	8000638 <__aeabi_dmul>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4610      	mov	r0, r2
 8003098:	4619      	mov	r1, r3
 800309a:	a30b      	add	r3, pc, #44	@ (adr r3, 80030c8 <quaternionToTheta+0x188>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fbf4 	bl	800088c <__aeabi_ddiv>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7fd fdbc 	bl	8000c28 <__aeabi_d2f>
 80030b0:	4603      	mov	r3, r0
 80030b2:	627b      	str	r3, [r7, #36]	@ 0x24
	return theta;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	ee07 3a90 	vmov	s15, r3
}
 80030ba:	eeb0 0a67 	vmov.f32	s0, s15
 80030be:	3728      	adds	r7, #40	@ 0x28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	f3af 8000 	nop.w
 80030c8:	51eb851f 	.word	0x51eb851f
 80030cc:	40091eb8 	.word	0x40091eb8
 80030d0:	200005cc 	.word	0x200005cc
 80030d4:	40668000 	.word	0x40668000

080030d8 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion(float acc_x, float acc_y, float acc_z) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08e      	sub	sp, #56	@ 0x38
 80030dc:	af00      	add	r7, sp, #0
 80030de:	ed87 0a03 	vstr	s0, [r7, #12]
 80030e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80030e6:	ed87 1a01 	vstr	s2, [r7, #4]

    float norm = sqrt(acc_z * acc_z + acc_x * acc_x + acc_y * acc_y);
 80030ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80030f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80030f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003102:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310a:	ee17 0a90 	vmov	r0, s15
 800310e:	f7fd fa3b 	bl	8000588 <__aeabi_f2d>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	ec43 2b10 	vmov	d0, r2, r3
 800311a:	f00e fa8f 	bl	801163c <sqrt>
 800311e:	ec53 2b10 	vmov	r2, r3, d0
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd7f 	bl	8000c28 <__aeabi_d2f>
 800312a:	4603      	mov	r3, r0
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
    float accel_temp[3];

    accel_temp[0] = acc_x;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
    accel_temp[1] = acc_y;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	62bb      	str	r3, [r7, #40]	@ 0x28
    accel_temp[2] = acc_z;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c

    accel_temp[0] /= norm;
 800313a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800313e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003146:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    accel_temp[1] /= norm;
 800314a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800314e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003156:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 800315a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800315e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003166:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 800316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fa0b 	bl	8000588 <__aeabi_f2d>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	f04f 0000 	mov.w	r0, #0
 800317a:	494c      	ldr	r1, [pc, #304]	@ (80032ac <getInitialQuaternion+0x1d4>)
 800317c:	f7fd f8a4 	bl	80002c8 <__aeabi_dsub>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	ec43 2b17 	vmov	d7, r2, r3
 8003188:	eeb0 0a47 	vmov.f32	s0, s14
 800318c:	eef0 0a67 	vmov.f32	s1, s15
 8003190:	f00e fa54 	bl	801163c <sqrt>
 8003194:	ec51 0b10 	vmov	r0, r1, d0
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	4b44      	ldr	r3, [pc, #272]	@ (80032b0 <getInitialQuaternion+0x1d8>)
 800319e:	f7fd fa4b 	bl	8000638 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fd3d 	bl	8000c28 <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	617b      	str	r3, [r7, #20]
    float k = 0.5 / q_temp[0];
 80031b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80031b6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80031ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031be:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_temp[1] = accel_temp[0] * k * 0.5;
 80031c2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80031c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031d6:	edc7 7a06 	vstr	s15, [r7, #24]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80031da:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80031ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ee:	edc7 7a07 	vstr	s15, [r7, #28]
    q_temp[3] = 0.0;
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	623b      	str	r3, [r7, #32]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80031f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003204:	edd7 6a06 	vldr	s13, [r7, #24]
 8003208:	edd7 7a06 	vldr	s15, [r7, #24]
 800320c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003214:	edd7 6a07 	vldr	s13, [r7, #28]
 8003218:	edd7 7a07 	vldr	s15, [r7, #28]
 800321c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003224:	edd7 6a08 	vldr	s13, [r7, #32]
 8003228:	edd7 7a08 	vldr	s15, [r7, #32]
 800322c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003234:	ee17 0a90 	vmov	r0, s15
 8003238:	f7fd f9a6 	bl	8000588 <__aeabi_f2d>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	ec43 2b10 	vmov	d0, r2, r3
 8003244:	f00e f9fa 	bl	801163c <sqrt>
 8003248:	ec53 2b10 	vmov	r2, r3, d0
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fcea 	bl	8000c28 <__aeabi_d2f>
 8003254:	4603      	mov	r3, r0
 8003256:	637b      	str	r3, [r7, #52]	@ 0x34

    saved_q[0] = q_temp[0] / norm;
 8003258:	edd7 6a05 	vldr	s13, [r7, #20]
 800325c:	4b15      	ldr	r3, [pc, #84]	@ (80032b4 <getInitialQuaternion+0x1dc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003268:	edc3 7a00 	vstr	s15, [r3]
    saved_q[1] = q_temp[1] / norm;
 800326c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003270:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <getInitialQuaternion+0x1dc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3304      	adds	r3, #4
 8003276:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800327a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327e:	edc3 7a00 	vstr	s15, [r3]
    saved_q[2] = q_temp[2] / norm;
 8003282:	edd7 6a07 	vldr	s13, [r7, #28]
 8003286:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <getInitialQuaternion+0x1dc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3308      	adds	r3, #8
 800328c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003294:	edc3 7a00 	vstr	s15, [r3]
    saved_q[3] = 0.0f;
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <getInitialQuaternion+0x1dc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	3738      	adds	r7, #56	@ 0x38
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	3ff00000 	.word	0x3ff00000
 80032b0:	3fe00000 	.word	0x3fe00000
 80032b4:	200005cc 	.word	0x200005cc

080032b8 <quaternionSet_zero>:

void quaternionSet_zero(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
	saved_q[0] = 1.0;
 80032bc:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <quaternionSet_zero+0x3c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032c4:	601a      	str	r2, [r3, #0]
	saved_q[1] = 0.0;
 80032c6:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <quaternionSet_zero+0x3c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3304      	adds	r3, #4
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	601a      	str	r2, [r3, #0]
	saved_q[2] = 0.0;
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <quaternionSet_zero+0x3c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
	saved_q[3] = 0.0;
 80032de:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <quaternionSet_zero+0x3c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	200005cc 	.word	0x200005cc

080032f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032fc:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <MX_RTC_Init+0x44>)
 80032fe:	4a10      	ldr	r2, [pc, #64]	@ (8003340 <MX_RTC_Init+0x48>)
 8003300:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003302:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <MX_RTC_Init+0x44>)
 8003304:	2200      	movs	r2, #0
 8003306:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <MX_RTC_Init+0x44>)
 800330a:	227f      	movs	r2, #127	@ 0x7f
 800330c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800330e:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <MX_RTC_Init+0x44>)
 8003310:	22ff      	movs	r2, #255	@ 0xff
 8003312:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <MX_RTC_Init+0x44>)
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <MX_RTC_Init+0x44>)
 800331c:	2200      	movs	r2, #0
 800331e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <MX_RTC_Init+0x44>)
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	@ (800333c <MX_RTC_Init+0x44>)
 8003328:	f005 faba 	bl	80088a0 <HAL_RTC_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003332:	f7ff fb8b 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200005d0 	.word	0x200005d0
 8003340:	40002800 	.word	0x40002800

08003344 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b09a      	sub	sp, #104	@ 0x68
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800334c:	f107 030c 	add.w	r3, r7, #12
 8003350:	225c      	movs	r2, #92	@ 0x5c
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f00a f96c 	bl	800d632 <memset>
  if(rtcHandle->Instance==RTC)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a0c      	ldr	r2, [pc, #48]	@ (8003390 <HAL_RTC_MspInit+0x4c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003364:	2320      	movs	r3, #32
 8003366:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800336c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800336e:	f107 030c 	add.w	r3, r7, #12
 8003372:	4618      	mov	r0, r3
 8003374:	f004 fa9c 	bl	80078b0 <HAL_RCCEx_PeriphCLKConfig>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800337e:	f7ff fb65 	bl	8002a4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003382:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <HAL_RTC_MspInit+0x50>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003388:	bf00      	nop
 800338a:	3768      	adds	r7, #104	@ 0x68
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40002800 	.word	0x40002800
 8003394:	42470e3c 	.word	0x42470e3c

08003398 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800339c:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <MX_SPI1_Init+0x64>)
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <MX_SPI1_Init+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033a2:	4b16      	ldr	r3, [pc, #88]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80033a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033aa:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033b0:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033c2:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ca:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033d0:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033d6:	4b09      	ldr	r3, [pc, #36]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033d8:	2200      	movs	r2, #0
 80033da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033dc:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033e4:	220a      	movs	r2, #10
 80033e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033e8:	4804      	ldr	r0, [pc, #16]	@ (80033fc <MX_SPI1_Init+0x64>)
 80033ea:	f005 fb5d 	bl	8008aa8 <HAL_SPI_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033f4:	f7ff fb2a 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200005f0 	.word	0x200005f0
 8003400:	40013000 	.word	0x40013000

08003404 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003408:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <MX_SPI3_Init+0x64>)
 800340a:	4a18      	ldr	r2, [pc, #96]	@ (800346c <MX_SPI3_Init+0x68>)
 800340c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800340e:	4b16      	ldr	r3, [pc, #88]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003410:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003414:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003416:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800341c:	4b12      	ldr	r3, [pc, #72]	@ (8003468 <MX_SPI3_Init+0x64>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003422:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003428:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <MX_SPI3_Init+0x64>)
 800342a:	2200      	movs	r2, #0
 800342c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800342e:	4b0e      	ldr	r3, [pc, #56]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003430:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003434:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003438:	2200      	movs	r2, #0
 800343a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800343c:	4b0a      	ldr	r3, [pc, #40]	@ (8003468 <MX_SPI3_Init+0x64>)
 800343e:	2200      	movs	r2, #0
 8003440:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003444:	2200      	movs	r2, #0
 8003446:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003448:	4b07      	ldr	r3, [pc, #28]	@ (8003468 <MX_SPI3_Init+0x64>)
 800344a:	2200      	movs	r2, #0
 800344c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003450:	220a      	movs	r2, #10
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003454:	4804      	ldr	r0, [pc, #16]	@ (8003468 <MX_SPI3_Init+0x64>)
 8003456:	f005 fb27 	bl	8008aa8 <HAL_SPI_Init>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003460:	f7ff faf4 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000648 	.word	0x20000648
 800346c:	40003c00 	.word	0x40003c00

08003470 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08c      	sub	sp, #48	@ 0x30
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 031c 	add.w	r3, r7, #28
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a32      	ldr	r2, [pc, #200]	@ (8003558 <HAL_SPI_MspInit+0xe8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12c      	bne.n	80034ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
 8003496:	4b31      	ldr	r3, [pc, #196]	@ (800355c <HAL_SPI_MspInit+0xec>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800349a:	4a30      	ldr	r2, [pc, #192]	@ (800355c <HAL_SPI_MspInit+0xec>)
 800349c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80034a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a2:	4b2e      	ldr	r3, [pc, #184]	@ (800355c <HAL_SPI_MspInit+0xec>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	4b2a      	ldr	r3, [pc, #168]	@ (800355c <HAL_SPI_MspInit+0xec>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b6:	4a29      	ldr	r2, [pc, #164]	@ (800355c <HAL_SPI_MspInit+0xec>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80034be:	4b27      	ldr	r3, [pc, #156]	@ (800355c <HAL_SPI_MspInit+0xec>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034ca:	23e0      	movs	r3, #224	@ 0xe0
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d6:	2303      	movs	r3, #3
 80034d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034da:	2305      	movs	r3, #5
 80034dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	4619      	mov	r1, r3
 80034e4:	481e      	ldr	r0, [pc, #120]	@ (8003560 <HAL_SPI_MspInit+0xf0>)
 80034e6:	f002 fd31 	bl	8005f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80034ea:	e030      	b.n	800354e <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_SPI_MspInit+0xf4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d12b      	bne.n	800354e <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	4b18      	ldr	r3, [pc, #96]	@ (800355c <HAL_SPI_MspInit+0xec>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fe:	4a17      	ldr	r2, [pc, #92]	@ (800355c <HAL_SPI_MspInit+0xec>)
 8003500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003504:	6413      	str	r3, [r2, #64]	@ 0x40
 8003506:	4b15      	ldr	r3, [pc, #84]	@ (800355c <HAL_SPI_MspInit+0xec>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b11      	ldr	r3, [pc, #68]	@ (800355c <HAL_SPI_MspInit+0xec>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351a:	4a10      	ldr	r2, [pc, #64]	@ (800355c <HAL_SPI_MspInit+0xec>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6313      	str	r3, [r2, #48]	@ 0x30
 8003522:	4b0e      	ldr	r3, [pc, #56]	@ (800355c <HAL_SPI_MspInit+0xec>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800352e:	2338      	movs	r3, #56	@ 0x38
 8003530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800353e:	2306      	movs	r3, #6
 8003540:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003542:	f107 031c 	add.w	r3, r7, #28
 8003546:	4619      	mov	r1, r3
 8003548:	4807      	ldr	r0, [pc, #28]	@ (8003568 <HAL_SPI_MspInit+0xf8>)
 800354a:	f002 fcff 	bl	8005f4c <HAL_GPIO_Init>
}
 800354e:	bf00      	nop
 8003550:	3730      	adds	r7, #48	@ 0x30
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40013000 	.word	0x40013000
 800355c:	40023800 	.word	0x40023800
 8003560:	40020000 	.word	0x40020000
 8003564:	40003c00 	.word	0x40003c00
 8003568:	40020400 	.word	0x40020400

0800356c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_MspInit+0x4c>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <HAL_MspInit+0x4c>)
 800357c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003580:	6453      	str	r3, [r2, #68]	@ 0x44
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <HAL_MspInit+0x4c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358a:	607b      	str	r3, [r7, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	603b      	str	r3, [r7, #0]
 8003592:	4b09      	ldr	r3, [pc, #36]	@ (80035b8 <HAL_MspInit+0x4c>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a08      	ldr	r2, [pc, #32]	@ (80035b8 <HAL_MspInit+0x4c>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_MspInit+0x4c>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <NMI_Handler+0x4>

080035c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <HardFault_Handler+0x4>

080035cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <MemManage_Handler+0x4>

080035d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <BusFault_Handler+0x4>

080035dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035e0:	bf00      	nop
 80035e2:	e7fd      	b.n	80035e0 <UsageFault_Handler+0x4>

080035e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035e8:	bf00      	nop
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003612:	f001 fad7 	bl	8004bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003620:	4802      	ldr	r0, [pc, #8]	@ (800362c <DMA1_Stream1_IRQHandler+0x10>)
 8003622:	f002 fa29 	bl	8005a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000968 	.word	0x20000968

08003630 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 8003634:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003638:	f002 ff2a 	bl	8006490 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 800363c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003640:	f002 ff26 	bl	8006490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}

08003648 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800364c:	4802      	ldr	r0, [pc, #8]	@ (8003658 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800364e:	f005 fba2 	bl	8008d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200007f4 	.word	0x200007f4

0800365c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003660:	4802      	ldr	r0, [pc, #8]	@ (800366c <TIM3_IRQHandler+0x10>)
 8003662:	f005 fb98 	bl	8008d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200006d4 	.word	0x200006d4

08003670 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003674:	4802      	ldr	r0, [pc, #8]	@ (8003680 <TIM4_IRQHandler+0x10>)
 8003676:	f005 fb8e 	bl	8008d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000071c 	.word	0x2000071c

08003684 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&RS232_HNDLR, UART_FLAG_IDLE))
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <USART3_IRQHandler+0x50>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	2b10      	cmp	r3, #16
 8003696:	d115      	bne.n	80036c4 <USART3_IRQHandler+0x40>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&RS232_HNDLR);
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <USART3_IRQHandler+0x50>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <USART3_IRQHandler+0x50>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
		HAL_UART_DMAStop(&RS232_HNDLR);
 80036ae:	4809      	ldr	r0, [pc, #36]	@ (80036d4 <USART3_IRQHandler+0x50>)
 80036b0:	f006 f852 	bl	8009758 <HAL_UART_DMAStop>
		process_received_datas(dma_rx_buf);
 80036b4:	4808      	ldr	r0, [pc, #32]	@ (80036d8 <USART3_IRQHandler+0x54>)
 80036b6:	f000 fb29 	bl	8003d0c <process_received_datas>
		HAL_UART_Receive_DMA(&RS232_HNDLR, dma_rx_buf, RX_BUFFER_LEN + 6);
 80036ba:	222a      	movs	r2, #42	@ 0x2a
 80036bc:	4906      	ldr	r1, [pc, #24]	@ (80036d8 <USART3_IRQHandler+0x54>)
 80036be:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <USART3_IRQHandler+0x50>)
 80036c0:	f006 f825 	bl	800970e <HAL_UART_Receive_DMA>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80036c4:	4803      	ldr	r0, [pc, #12]	@ (80036d4 <USART3_IRQHandler+0x50>)
 80036c6:	f006 f8c7 	bl	8009858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200008d8 	.word	0x200008d8
 80036d8:	200006a0 	.word	0x200006a0

080036dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80036e0:	4802      	ldr	r0, [pc, #8]	@ (80036ec <TIM5_IRQHandler+0x10>)
 80036e2:	f005 fb58 	bl	8008d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000764 	.word	0x20000764

080036f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80036f4:	4802      	ldr	r0, [pc, #8]	@ (8003700 <UART4_IRQHandler+0x10>)
 80036f6:	f006 f8af 	bl	8009858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000848 	.word	0x20000848

08003704 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003708:	4802      	ldr	r0, [pc, #8]	@ (8003714 <TIM6_DAC_IRQHandler+0x10>)
 800370a:	f005 fb44 	bl	8008d96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	200007ac 	.word	0x200007ac

08003718 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800371c:	4802      	ldr	r0, [pc, #8]	@ (8003728 <DMA2_Stream1_IRQHandler+0x10>)
 800371e:	f002 f9ab 	bl	8005a78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003722:	bf00      	nop
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200009c8 	.word	0x200009c8

0800372c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003730:	4802      	ldr	r0, [pc, #8]	@ (800373c <USART6_IRQHandler+0x10>)
 8003732:	f006 f891 	bl	8009858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000920 	.word	0x20000920

08003740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return 1;
 8003744:	2301      	movs	r3, #1
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <_kill>:

int _kill(int pid, int sig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800375a:	f009 ffe3 	bl	800d724 <__errno>
 800375e:	4603      	mov	r3, r0
 8003760:	2216      	movs	r2, #22
 8003762:	601a      	str	r2, [r3, #0]
  return -1;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_exit>:

void _exit (int status)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003778:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ffe7 	bl	8003750 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003782:	bf00      	nop
 8003784:	e7fd      	b.n	8003782 <_exit+0x12>

08003786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003792:	2300      	movs	r3, #0
 8003794:	617b      	str	r3, [r7, #20]
 8003796:	e00a      	b.n	80037ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003798:	f3af 8000 	nop.w
 800379c:	4601      	mov	r1, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	60ba      	str	r2, [r7, #8]
 80037a4:	b2ca      	uxtb	r2, r1
 80037a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	dbf0      	blt.n	8003798 <_read+0x12>
  }

  return len;
 80037b6:	687b      	ldr	r3, [r7, #4]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e009      	b.n	80037e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	1c5a      	adds	r2, r3, #1
 80037d6:	60ba      	str	r2, [r7, #8]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3301      	adds	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	dbf1      	blt.n	80037d2 <_write+0x12>
  }
  return len;
 80037ee:	687b      	ldr	r3, [r7, #4]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <_close>:

int _close(int file)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003820:	605a      	str	r2, [r3, #4]
  return 0;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <_isatty>:

int _isatty(int file)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003838:	2301      	movs	r3, #1
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003868:	4a14      	ldr	r2, [pc, #80]	@ (80038bc <_sbrk+0x5c>)
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <_sbrk+0x60>)
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003874:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <_sbrk+0x64>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <_sbrk+0x64>)
 800387e:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <_sbrk+0x68>)
 8003880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <_sbrk+0x64>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	429a      	cmp	r2, r3
 800388e:	d207      	bcs.n	80038a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003890:	f009 ff48 	bl	800d724 <__errno>
 8003894:	4603      	mov	r3, r0
 8003896:	220c      	movs	r2, #12
 8003898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800389e:	e009      	b.n	80038b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a0:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <_sbrk+0x64>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038a6:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <_sbrk+0x64>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	4a05      	ldr	r2, [pc, #20]	@ (80038c4 <_sbrk+0x64>)
 80038b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038b2:	68fb      	ldr	r3, [r7, #12]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20020000 	.word	0x20020000
 80038c0:	00000400 	.word	0x00000400
 80038c4:	200006d0 	.word	0x200006d0
 80038c8:	20001c38 	.word	0x20001c38

080038cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038d0:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <SystemInit+0x20>)
 80038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d6:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <SystemInit+0x20>)
 80038d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	605a      	str	r2, [r3, #4]
 8003900:	609a      	str	r2, [r3, #8]
 8003902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003904:	463b      	mov	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800390c:	4b1d      	ldr	r3, [pc, #116]	@ (8003984 <MX_TIM3_Init+0x94>)
 800390e:	4a1e      	ldr	r2, [pc, #120]	@ (8003988 <MX_TIM3_Init+0x98>)
 8003910:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 8003912:	4b1c      	ldr	r3, [pc, #112]	@ (8003984 <MX_TIM3_Init+0x94>)
 8003914:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800391a:	4b1a      	ldr	r3, [pc, #104]	@ (8003984 <MX_TIM3_Init+0x94>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003920:	4b18      	ldr	r3, [pc, #96]	@ (8003984 <MX_TIM3_Init+0x94>)
 8003922:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003926:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003928:	4b16      	ldr	r3, [pc, #88]	@ (8003984 <MX_TIM3_Init+0x94>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800392e:	4b15      	ldr	r3, [pc, #84]	@ (8003984 <MX_TIM3_Init+0x94>)
 8003930:	2200      	movs	r2, #0
 8003932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003934:	4813      	ldr	r0, [pc, #76]	@ (8003984 <MX_TIM3_Init+0x94>)
 8003936:	f005 f940 	bl	8008bba <HAL_TIM_Base_Init>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003940:	f7ff f884 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003948:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800394a:	f107 0308 	add.w	r3, r7, #8
 800394e:	4619      	mov	r1, r3
 8003950:	480c      	ldr	r0, [pc, #48]	@ (8003984 <MX_TIM3_Init+0x94>)
 8003952:	f005 fb10 	bl	8008f76 <HAL_TIM_ConfigClockSource>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800395c:	f7ff f876 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003964:	2300      	movs	r3, #0
 8003966:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003968:	463b      	mov	r3, r7
 800396a:	4619      	mov	r1, r3
 800396c:	4805      	ldr	r0, [pc, #20]	@ (8003984 <MX_TIM3_Init+0x94>)
 800396e:	f005 fd31 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003978:	f7ff f868 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800397c:	bf00      	nop
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	200006d4 	.word	0x200006d4
 8003988:	40000400 	.word	0x40000400

0800398c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003992:	f107 0308 	add.w	r3, r7, #8
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039a0:	463b      	mov	r3, r7
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003a24 <MX_TIM4_Init+0x98>)
 80039ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8999;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039b0:	f242 3227 	movw	r2, #8999	@ 0x2327
 80039b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80039bc:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039be:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80039c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039c4:	4b16      	ldr	r3, [pc, #88]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039d0:	4813      	ldr	r0, [pc, #76]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039d2:	f005 f8f2 	bl	8008bba <HAL_TIM_Base_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80039dc:	f7ff f836 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039e6:	f107 0308 	add.w	r3, r7, #8
 80039ea:	4619      	mov	r1, r3
 80039ec:	480c      	ldr	r0, [pc, #48]	@ (8003a20 <MX_TIM4_Init+0x94>)
 80039ee:	f005 fac2 	bl	8008f76 <HAL_TIM_ConfigClockSource>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80039f8:	f7ff f828 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a04:	463b      	mov	r3, r7
 8003a06:	4619      	mov	r1, r3
 8003a08:	4805      	ldr	r0, [pc, #20]	@ (8003a20 <MX_TIM4_Init+0x94>)
 8003a0a:	f005 fce3 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003a14:	f7ff f81a 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a18:	bf00      	nop
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	2000071c 	.word	0x2000071c
 8003a24:	40000800 	.word	0x40000800

08003a28 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a3c:	463b      	mov	r3, r7
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a46:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac0 <MX_TIM5_Init+0x98>)
 8003a48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8999;
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a4c:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003a50:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a52:	4b1a      	ldr	r3, [pc, #104]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8003a58:	4b18      	ldr	r3, [pc, #96]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a5a:	2263      	movs	r2, #99	@ 0x63
 8003a5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5e:	4b17      	ldr	r3, [pc, #92]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a6a:	4814      	ldr	r0, [pc, #80]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a6c:	f005 f8a5 	bl	8008bba <HAL_TIM_Base_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003a76:	f7fe ffe9 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	4619      	mov	r1, r3
 8003a86:	480d      	ldr	r0, [pc, #52]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003a88:	f005 fa75 	bl	8008f76 <HAL_TIM_ConfigClockSource>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003a92:	f7fe ffdb 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4806      	ldr	r0, [pc, #24]	@ (8003abc <MX_TIM5_Init+0x94>)
 8003aa4:	f005 fc96 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003aae:	f7fe ffcd 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000764 	.word	0x20000764
 8003ac0:	40000c00 	.word	0x40000c00

08003ac4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aca:	463b      	mov	r3, r7
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ad2:	4b15      	ldr	r3, [pc, #84]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003ad4:	4a15      	ldr	r2, [pc, #84]	@ (8003b2c <MX_TIM6_Init+0x68>)
 8003ad6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003ada:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003ade:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003ae8:	2209      	movs	r2, #9
 8003aea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003af2:	480d      	ldr	r0, [pc, #52]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003af4:	f005 f861 	bl	8008bba <HAL_TIM_Base_Init>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003afe:	f7fe ffa5 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b02:	2300      	movs	r3, #0
 8003b04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003b0a:	463b      	mov	r3, r7
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4806      	ldr	r0, [pc, #24]	@ (8003b28 <MX_TIM6_Init+0x64>)
 8003b10:	f005 fc60 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003b1a:	f7fe ff97 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200007ac 	.word	0x200007ac
 8003b2c:	40001000 	.word	0x40001000

08003b30 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b36:	463b      	mov	r3, r7
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b42:	4b16      	ldr	r3, [pc, #88]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b44:	4a16      	ldr	r2, [pc, #88]	@ (8003ba0 <MX_TIM9_Init+0x70>)
 8003b46:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8999;
 8003b48:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b4a:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003b4e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b50:	4b12      	ldr	r3, [pc, #72]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 3999;
 8003b56:	4b11      	ldr	r3, [pc, #68]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b58:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8003b5c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b64:	4b0d      	ldr	r3, [pc, #52]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b66:	2280      	movs	r2, #128	@ 0x80
 8003b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b6a:	480c      	ldr	r0, [pc, #48]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b6c:	f005 f825 	bl	8008bba <HAL_TIM_Base_Init>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8003b76:	f7fe ff69 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b7a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b7e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003b80:	463b      	mov	r3, r7
 8003b82:	4619      	mov	r1, r3
 8003b84:	4805      	ldr	r0, [pc, #20]	@ (8003b9c <MX_TIM9_Init+0x6c>)
 8003b86:	f005 f9f6 	bl	8008f76 <HAL_TIM_ConfigClockSource>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003b90:	f7fe ff5c 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003b94:	bf00      	nop
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	200007f4 	.word	0x200007f4
 8003ba0:	40014000 	.word	0x40014000

08003ba4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a46      	ldr	r2, [pc, #280]	@ (8003ccc <HAL_TIM_Base_MspInit+0x128>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d116      	bne.n	8003be4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	4b45      	ldr	r3, [pc, #276]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	4a44      	ldr	r2, [pc, #272]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003bc0:	f043 0302 	orr.w	r3, r3, #2
 8003bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc6:	4b42      	ldr	r3, [pc, #264]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	69fb      	ldr	r3, [r7, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	201d      	movs	r0, #29
 8003bd8:	f001 fd13 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bdc:	201d      	movs	r0, #29
 8003bde:	f001 fd2c 	bl	800563a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003be2:	e06e      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM4)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a3a      	ldr	r2, [pc, #232]	@ (8003cd4 <HAL_TIM_Base_MspInit+0x130>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d116      	bne.n	8003c1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	4b37      	ldr	r3, [pc, #220]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf6:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003bf8:	f043 0304 	orr.w	r3, r3, #4
 8003bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bfe:	4b34      	ldr	r3, [pc, #208]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	f003 0304 	and.w	r3, r3, #4
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	201e      	movs	r0, #30
 8003c10:	f001 fcf7 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003c14:	201e      	movs	r0, #30
 8003c16:	f001 fd10 	bl	800563a <HAL_NVIC_EnableIRQ>
}
 8003c1a:	e052      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM5)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <HAL_TIM_Base_MspInit+0x134>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d116      	bne.n	8003c54 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	4b29      	ldr	r3, [pc, #164]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2e:	4a28      	ldr	r2, [pc, #160]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c30:	f043 0308 	orr.w	r3, r3, #8
 8003c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c36:	4b26      	ldr	r3, [pc, #152]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c42:	2200      	movs	r2, #0
 8003c44:	2100      	movs	r1, #0
 8003c46:	2032      	movs	r0, #50	@ 0x32
 8003c48:	f001 fcdb 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c4c:	2032      	movs	r0, #50	@ 0x32
 8003c4e:	f001 fcf4 	bl	800563a <HAL_NVIC_EnableIRQ>
}
 8003c52:	e036      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM6)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a20      	ldr	r2, [pc, #128]	@ (8003cdc <HAL_TIM_Base_MspInit+0x138>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d116      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c66:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c68:	f043 0310 	orr.w	r3, r3, #16
 8003c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c6e:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	2036      	movs	r0, #54	@ 0x36
 8003c80:	f001 fcbf 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c84:	2036      	movs	r0, #54	@ 0x36
 8003c86:	f001 fcd8 	bl	800563a <HAL_NVIC_EnableIRQ>
}
 8003c8a:	e01a      	b.n	8003cc2 <HAL_TIM_Base_MspInit+0x11e>
  else if(tim_baseHandle->Instance==TIM9)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a13      	ldr	r2, [pc, #76]	@ (8003ce0 <HAL_TIM_Base_MspInit+0x13c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d115      	bne.n	8003cc2 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <HAL_TIM_Base_MspInit+0x12c>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2018      	movs	r0, #24
 8003cb8:	f001 fca3 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003cbc:	2018      	movs	r0, #24
 8003cbe:	f001 fcbc 	bl	800563a <HAL_NVIC_EnableIRQ>
}
 8003cc2:	bf00      	nop
 8003cc4:	3720      	adds	r7, #32
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40000400 	.word	0x40000400
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40001000 	.word	0x40001000
 8003ce0:	40014000 	.word	0x40014000

08003ce4 <ukb_test_init>:
  ukb_test_s.angle_X  =
  ukb_test_s.angle_Y  =
  ukb_test_s.angle_Z  =
 */
void ukb_test_init(UKB_test_t *UKB_datas)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	ukb_s = UKB_datas;
 8003cec:	4a05      	ldr	r2, [pc, #20]	@ (8003d04 <ukb_test_init+0x20>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6013      	str	r3, [r2, #0]
	status_data.data16 = 0;
 8003cf2:	4b05      	ldr	r3, [pc, #20]	@ (8003d08 <ukb_test_init+0x24>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	801a      	strh	r2, [r3, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	20000840 	.word	0x20000840
 8003d08:	20000844 	.word	0x20000844

08003d0c <process_received_datas>:

void process_received_datas(uint8_t *data)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	@ 0x30
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	uint8_t packet[37] = {0};
 8003d14:	f107 0308 	add.w	r3, r7, #8
 8003d18:	2225      	movs	r2, #37	@ 0x25
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f009 fc88 	bl	800d632 <memset>
	memcpy(packet, data, 36);
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	2224      	movs	r2, #36	@ 0x24
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f009 fd27 	bl	800d77e <memcpy>
	packet[36] = '\0';
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	if(mode == 0)
 8003d36:	4b25      	ldr	r3, [pc, #148]	@ (8003dcc <process_received_datas+0xc0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d123      	bne.n	8003d86 <process_received_datas+0x7a>
	{
		if(!memcmp(packet, sut_start, 5))
 8003d3e:	f107 0308 	add.w	r3, r7, #8
 8003d42:	2205      	movs	r2, #5
 8003d44:	4922      	ldr	r1, [pc, #136]	@ (8003dd0 <process_received_datas+0xc4>)
 8003d46:	4618      	mov	r0, r3
 8003d48:	f009 fc63 	bl	800d612 <memcmp>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <process_received_datas+0x56>
		{
			serial_println("sut start", &TTL_HNDLR);
 8003d52:	4920      	ldr	r1, [pc, #128]	@ (8003dd4 <process_received_datas+0xc8>)
 8003d54:	4820      	ldr	r0, [pc, #128]	@ (8003dd8 <process_received_datas+0xcc>)
 8003d56:	f7fe fc3f 	bl	80025d8 <serial_println>
			mode = 1;
 8003d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dcc <process_received_datas+0xc0>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
			{

			}
		}
	}
}
 8003d60:	e030      	b.n	8003dc4 <process_received_datas+0xb8>
		else if(!memcmp(packet, sit_start, 5))
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	2205      	movs	r2, #5
 8003d68:	491c      	ldr	r1, [pc, #112]	@ (8003ddc <process_received_datas+0xd0>)
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f009 fc51 	bl	800d612 <memcmp>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d126      	bne.n	8003dc4 <process_received_datas+0xb8>
			serial_println("sit start", &TTL_HNDLR);
 8003d76:	4917      	ldr	r1, [pc, #92]	@ (8003dd4 <process_received_datas+0xc8>)
 8003d78:	4819      	ldr	r0, [pc, #100]	@ (8003de0 <process_received_datas+0xd4>)
 8003d7a:	f7fe fc2d 	bl	80025d8 <serial_println>
			mode = 2;
 8003d7e:	4b13      	ldr	r3, [pc, #76]	@ (8003dcc <process_received_datas+0xc0>)
 8003d80:	2202      	movs	r2, #2
 8003d82:	701a      	strb	r2, [r3, #0]
}
 8003d84:	e01e      	b.n	8003dc4 <process_received_datas+0xb8>
		if(!memcmp(packet, test_stop, 5))
 8003d86:	f107 0308 	add.w	r3, r7, #8
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	4915      	ldr	r1, [pc, #84]	@ (8003de4 <process_received_datas+0xd8>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f009 fc3f 	bl	800d612 <memcmp>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10c      	bne.n	8003db4 <process_received_datas+0xa8>
			serial_println("test stop", &TTL_HNDLR);
 8003d9a:	490e      	ldr	r1, [pc, #56]	@ (8003dd4 <process_received_datas+0xc8>)
 8003d9c:	4812      	ldr	r0, [pc, #72]	@ (8003de8 <process_received_datas+0xdc>)
 8003d9e:	f7fe fc1b 	bl	80025d8 <serial_println>
			mode = 0;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dcc <process_received_datas+0xc0>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
			reset_algorithm_status();
 8003da8:	f7fd fbd0 	bl	800154c <reset_algorithm_status>
			status_data.data16 = 0;
 8003dac:	4b0f      	ldr	r3, [pc, #60]	@ (8003dec <process_received_datas+0xe0>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	801a      	strh	r2, [r3, #0]
}
 8003db2:	e007      	b.n	8003dc4 <process_received_datas+0xb8>
			if(!unpack_datas_for_test(packet, ukb_s))
 8003db4:	4b0e      	ldr	r3, [pc, #56]	@ (8003df0 <process_received_datas+0xe4>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	f107 0308 	add.w	r3, r7, #8
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f818 	bl	8003df4 <unpack_datas_for_test>
}
 8003dc4:	bf00      	nop
 8003dc6:	3730      	adds	r7, #48	@ 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	2000083c 	.word	0x2000083c
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	20000890 	.word	0x20000890
 8003dd8:	0801325c 	.word	0x0801325c
 8003ddc:	20000008 	.word	0x20000008
 8003de0:	08013268 	.word	0x08013268
 8003de4:	20000018 	.word	0x20000018
 8003de8:	08013274 	.word	0x08013274
 8003dec:	20000844 	.word	0x20000844
 8003df0:	20000840 	.word	0x20000840

08003df4 <unpack_datas_for_test>:

int unpack_datas_for_test(uint8_t *packed_datas, UKB_test_t *ukb_s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  union float_to_UINT8_converter var;
  if(packed_datas[0] == 0xAB && packed_datas[34] == 0x0D && packed_datas[35] == 0x0A && calc_checksum(packed_datas, 33) == packed_datas[33])
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2bab      	cmp	r3, #171	@ 0xab
 8003e04:	f040 80b1 	bne.w	8003f6a <unpack_datas_for_test+0x176>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3322      	adds	r3, #34	@ 0x22
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b0d      	cmp	r3, #13
 8003e10:	f040 80ab 	bne.w	8003f6a <unpack_datas_for_test+0x176>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3323      	adds	r3, #35	@ 0x23
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b0a      	cmp	r3, #10
 8003e1c:	f040 80a5 	bne.w	8003f6a <unpack_datas_for_test+0x176>
 8003e20:	2121      	movs	r1, #33	@ 0x21
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f998 	bl	8004158 <calc_checksum>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3321      	adds	r3, #33	@ 0x21
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	f040 8099 	bne.w	8003f6a <unpack_datas_for_test+0x176>
  {
    var.array[arr_0] = packed_datas[1];
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[2];
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	789b      	ldrb	r3, [r3, #2]
 8003e42:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[3];
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[4];
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	791b      	ldrb	r3, [r3, #4]
 8003e4e:	733b      	strb	r3, [r7, #12]
    ukb_s->altitude = var.num;
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]

    var.array[arr_0] = packed_datas[5];
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	795b      	ldrb	r3, [r3, #5]
 8003e5a:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[6];
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	799b      	ldrb	r3, [r3, #6]
 8003e60:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[7];
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	79db      	ldrb	r3, [r3, #7]
 8003e66:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[8];
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7a1b      	ldrb	r3, [r3, #8]
 8003e6c:	733b      	strb	r3, [r7, #12]
    ukb_s->pressure = var.num;
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]

    var.array[arr_0] = packed_datas[9];
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	7a5b      	ldrb	r3, [r3, #9]
 8003e78:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[10];
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	7a9b      	ldrb	r3, [r3, #10]
 8003e7e:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[11];
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7adb      	ldrb	r3, [r3, #11]
 8003e84:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[12];
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	7b1b      	ldrb	r3, [r3, #12]
 8003e8a:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_x = var.num;
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]
    ukb_s->accel_x *= TO_MG;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e98:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8003f74 <unpack_datas_for_test+0x180>
 8003e9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	edc3 7a02 	vstr	s15, [r3, #8]

    var.array[arr_0] = packed_datas[13];
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7b5b      	ldrb	r3, [r3, #13]
 8003eaa:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[14];
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7b9b      	ldrb	r3, [r3, #14]
 8003eb0:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[15];
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	7bdb      	ldrb	r3, [r3, #15]
 8003eb6:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[16];
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7c1b      	ldrb	r3, [r3, #16]
 8003ebc:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_y = var.num;
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	60da      	str	r2, [r3, #12]
    ukb_s->accel_y *= TO_MG;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eca:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003f74 <unpack_datas_for_test+0x180>
 8003ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	edc3 7a03 	vstr	s15, [r3, #12]

    var.array[arr_0] = packed_datas[17];
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	7c5b      	ldrb	r3, [r3, #17]
 8003edc:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[18];
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	7c9b      	ldrb	r3, [r3, #18]
 8003ee2:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[19];
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	7cdb      	ldrb	r3, [r3, #19]
 8003ee8:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[20];
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7d1b      	ldrb	r3, [r3, #20]
 8003eee:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_z = var.num;
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	611a      	str	r2, [r3, #16]
    ukb_s->accel_z *= TO_MG;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003efc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003f74 <unpack_datas_for_test+0x180>
 8003f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	edc3 7a04 	vstr	s15, [r3, #16]

    var.array[arr_0] = packed_datas[21];
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7d5b      	ldrb	r3, [r3, #21]
 8003f0e:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[22];
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7d9b      	ldrb	r3, [r3, #22]
 8003f14:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[23];
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7ddb      	ldrb	r3, [r3, #23]
 8003f1a:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[24];
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7e1b      	ldrb	r3, [r3, #24]
 8003f20:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_x = var.num;
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	615a      	str	r2, [r3, #20]

    var.array[arr_0] = packed_datas[25];
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	7e5b      	ldrb	r3, [r3, #25]
 8003f2c:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[26];
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7e9b      	ldrb	r3, [r3, #26]
 8003f32:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[27];
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7edb      	ldrb	r3, [r3, #27]
 8003f38:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[28];
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7f1b      	ldrb	r3, [r3, #28]
 8003f3e:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_y = var.num;
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	619a      	str	r2, [r3, #24]

    var.array[arr_0] = packed_datas[29];
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7f5b      	ldrb	r3, [r3, #29]
 8003f4a:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[30];
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7f9b      	ldrb	r3, [r3, #30]
 8003f50:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[31];
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	7fdb      	ldrb	r3, [r3, #31]
 8003f56:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[32];
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f5e:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_z = var.num;
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	61da      	str	r2, [r3, #28]

    return 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e000      	b.n	8003f6c <unpack_datas_for_test+0x178>
  }
  return 1;
 8003f6a:	2301      	movs	r3, #1
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	42cbe148 	.word	0x42cbe148

08003f78 <pack_datas_for_test>:

void pack_datas_for_test(uint8_t *packed_datas, UKB_test_t *ukb_s)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  union float_to_UINT8_converter var;
  packed_datas[0] = 0xAB;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	22ab      	movs	r2, #171	@ 0xab
 8003f86:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->altitude;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
  packed_datas[1] = var.array[arr_0];
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3301      	adds	r3, #1
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	701a      	strb	r2, [r3, #0]
  packed_datas[2] = var.array[arr_1];
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3302      	adds	r3, #2
 8003f9a:	7bba      	ldrb	r2, [r7, #14]
 8003f9c:	701a      	strb	r2, [r3, #0]
  packed_datas[3] = var.array[arr_2];
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3303      	adds	r3, #3
 8003fa2:	7b7a      	ldrb	r2, [r7, #13]
 8003fa4:	701a      	strb	r2, [r3, #0]
  packed_datas[4] = var.array[arr_3];
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	7b3a      	ldrb	r2, [r7, #12]
 8003fac:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->pressure;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]
  packed_datas[5] = var.array[arr_0];
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3305      	adds	r3, #5
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	701a      	strb	r2, [r3, #0]
  packed_datas[6] = var.array[arr_1];
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3306      	adds	r3, #6
 8003fc0:	7bba      	ldrb	r2, [r7, #14]
 8003fc2:	701a      	strb	r2, [r3, #0]
  packed_datas[7] = var.array[arr_2];
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3307      	adds	r3, #7
 8003fc8:	7b7a      	ldrb	r2, [r7, #13]
 8003fca:	701a      	strb	r2, [r3, #0]
  packed_datas[8] = var.array[arr_3];
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	7b3a      	ldrb	r2, [r7, #12]
 8003fd2:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_x;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
  packed_datas[9] = var.array[arr_0];
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3309      	adds	r3, #9
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	701a      	strb	r2, [r3, #0]
  packed_datas[10] = var.array[arr_1];
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	330a      	adds	r3, #10
 8003fe6:	7bba      	ldrb	r2, [r7, #14]
 8003fe8:	701a      	strb	r2, [r3, #0]
  packed_datas[11] = var.array[arr_2];
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	330b      	adds	r3, #11
 8003fee:	7b7a      	ldrb	r2, [r7, #13]
 8003ff0:	701a      	strb	r2, [r3, #0]
  packed_datas[12] = var.array[arr_3];
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	7b3a      	ldrb	r2, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_y;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	60fb      	str	r3, [r7, #12]
  packed_datas[13] = var.array[arr_0];
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	330d      	adds	r3, #13
 8004004:	7bfa      	ldrb	r2, [r7, #15]
 8004006:	701a      	strb	r2, [r3, #0]
  packed_datas[14] = var.array[arr_1];
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	330e      	adds	r3, #14
 800400c:	7bba      	ldrb	r2, [r7, #14]
 800400e:	701a      	strb	r2, [r3, #0]
  packed_datas[15] = var.array[arr_2];
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	330f      	adds	r3, #15
 8004014:	7b7a      	ldrb	r2, [r7, #13]
 8004016:	701a      	strb	r2, [r3, #0]
  packed_datas[16] = var.array[arr_3];
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3310      	adds	r3, #16
 800401c:	7b3a      	ldrb	r2, [r7, #12]
 800401e:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_z;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	60fb      	str	r3, [r7, #12]
  packed_datas[17] = var.array[arr_0];
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3311      	adds	r3, #17
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	701a      	strb	r2, [r3, #0]
  packed_datas[18] = var.array[arr_1];
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3312      	adds	r3, #18
 8004032:	7bba      	ldrb	r2, [r7, #14]
 8004034:	701a      	strb	r2, [r3, #0]
  packed_datas[19] = var.array[arr_2];
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3313      	adds	r3, #19
 800403a:	7b7a      	ldrb	r2, [r7, #13]
 800403c:	701a      	strb	r2, [r3, #0]
  packed_datas[20] = var.array[arr_3];
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3314      	adds	r3, #20
 8004042:	7b3a      	ldrb	r2, [r7, #12]
 8004044:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_x;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60fb      	str	r3, [r7, #12]
  packed_datas[21] = var.array[arr_0];
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3315      	adds	r3, #21
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	701a      	strb	r2, [r3, #0]
  packed_datas[22] = var.array[arr_1];
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3316      	adds	r3, #22
 8004058:	7bba      	ldrb	r2, [r7, #14]
 800405a:	701a      	strb	r2, [r3, #0]
  packed_datas[23] = var.array[arr_2];
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3317      	adds	r3, #23
 8004060:	7b7a      	ldrb	r2, [r7, #13]
 8004062:	701a      	strb	r2, [r3, #0]
  packed_datas[24] = var.array[arr_3];
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3318      	adds	r3, #24
 8004068:	7b3a      	ldrb	r2, [r7, #12]
 800406a:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_y;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	60fb      	str	r3, [r7, #12]
  packed_datas[25] = var.array[arr_0];
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3319      	adds	r3, #25
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	701a      	strb	r2, [r3, #0]
  packed_datas[26] = var.array[arr_1];
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	331a      	adds	r3, #26
 800407e:	7bba      	ldrb	r2, [r7, #14]
 8004080:	701a      	strb	r2, [r3, #0]
  packed_datas[27] = var.array[arr_2];
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	331b      	adds	r3, #27
 8004086:	7b7a      	ldrb	r2, [r7, #13]
 8004088:	701a      	strb	r2, [r3, #0]
  packed_datas[28] = var.array[arr_3];
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	331c      	adds	r3, #28
 800408e:	7b3a      	ldrb	r2, [r7, #12]
 8004090:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_z;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	60fb      	str	r3, [r7, #12]
  packed_datas[29] = var.array[arr_0];
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	331d      	adds	r3, #29
 800409c:	7bfa      	ldrb	r2, [r7, #15]
 800409e:	701a      	strb	r2, [r3, #0]
  packed_datas[30] = var.array[arr_1];
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	331e      	adds	r3, #30
 80040a4:	7bba      	ldrb	r2, [r7, #14]
 80040a6:	701a      	strb	r2, [r3, #0]
  packed_datas[31] = var.array[arr_2];
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	331f      	adds	r3, #31
 80040ac:	7b7a      	ldrb	r2, [r7, #13]
 80040ae:	701a      	strb	r2, [r3, #0]
  packed_datas[32] = var.array[arr_3];
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3320      	adds	r3, #32
 80040b4:	7b3a      	ldrb	r2, [r7, #12]
 80040b6:	701a      	strb	r2, [r3, #0]

  packed_datas[33] = calc_checksum(packed_datas, 33);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f103 0421 	add.w	r4, r3, #33	@ 0x21
 80040be:	2121      	movs	r1, #33	@ 0x21
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f849 	bl	8004158 <calc_checksum>
 80040c6:	4603      	mov	r3, r0
 80040c8:	7023      	strb	r3, [r4, #0]

  packed_datas[34] = 0x0D;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3322      	adds	r3, #34	@ 0x22
 80040ce:	220d      	movs	r2, #13
 80040d0:	701a      	strb	r2, [r3, #0]
  packed_datas[35] = 0x0A;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3323      	adds	r3, #35	@ 0x23
 80040d6:	220a      	movs	r2, #10
 80040d8:	701a      	strb	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd90      	pop	{r4, r7, pc}
	...

080040e4 <get_test_mode>:

UKB_test_mode_t get_test_mode()
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
	return mode;
 80040e8:	4b03      	ldr	r3, [pc, #12]	@ (80040f8 <get_test_mode+0x14>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	2000083c 	.word	0x2000083c

080040fc <ukb_test_stat_update>:
	STAT_TOUCH_DOWN		=	(uint8_t)0x08,
	STAT_P1_NO_P2_OK	=	(uint8_t)0x09,
 */

void ukb_test_stat_update(flight_states_e status)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	4603      	mov	r3, r0
 8004104:	71fb      	strb	r3, [r7, #7]

	status_data.data16 = ((1 << (status)) - 1) | status;
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	2201      	movs	r2, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	b21a      	sxth	r2, r3
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	b21b      	sxth	r3, r3
 800411a:	4313      	orrs	r3, r2
 800411c:	b21b      	sxth	r3, r3
 800411e:	b29a      	uxth	r2, r3
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <ukb_test_stat_update+0x58>)
 8004122:	801a      	strh	r2, [r3, #0]
	uint8_t data[7];

	data[0] = 0xaa;
 8004124:	23aa      	movs	r3, #170	@ 0xaa
 8004126:	723b      	strb	r3, [r7, #8]
	data[1] = status_data.data8[0];
 8004128:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <ukb_test_stat_update+0x58>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	727b      	strb	r3, [r7, #9]
	data[2] = status_data.data8[1];
 800412e:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <ukb_test_stat_update+0x58>)
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	72bb      	strb	r3, [r7, #10]
	data[3] = calc_checksum(data, 3);
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	2103      	movs	r1, #3
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f80c 	bl	8004158 <calc_checksum>
 8004140:	4603      	mov	r3, r0
 8004142:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x0d;
 8004144:	230d      	movs	r3, #13
 8004146:	733b      	strb	r3, [r7, #12]
	data[5] = 0x0a;
 8004148:	230a      	movs	r3, #10
 800414a:	737b      	strb	r3, [r7, #13]

	//HAL_UART_Transmit(&RS232_HNDLR, data, 6, 30);
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000844 	.word	0x20000844

08004158 <calc_checksum>:
uint8_t calc_checksum(uint8_t *packed_datas, uint16_t len)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  uint32_t sum = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < len; i++)
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]
 800416c:	e00a      	b.n	8004184 <calc_checksum+0x2c>
  {
    sum += packed_datas[i];
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4413      	add	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < len; i++)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	429a      	cmp	r2, r3
 800418a:	dbf0      	blt.n	800416e <calc_checksum+0x16>
  }
  return (uint8_t)(sum % 256);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	b2db      	uxtb	r3, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041a2:	4a12      	ldr	r2, [pc, #72]	@ (80041ec <MX_UART4_Init+0x50>)
 80041a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80041a6:	4b10      	ldr	r3, [pc, #64]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80041ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041c0:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041c2:	220c      	movs	r2, #12
 80041c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041cc:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041d2:	4805      	ldr	r0, [pc, #20]	@ (80041e8 <MX_UART4_Init+0x4c>)
 80041d4:	f005 f98e 	bl	80094f4 <HAL_UART_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80041de:	f7fe fc35 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000848 	.word	0x20000848
 80041ec:	40004c00 	.word	0x40004c00

080041f0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041f4:	4b11      	ldr	r3, [pc, #68]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 80041f6:	4a12      	ldr	r2, [pc, #72]	@ (8004240 <MX_USART1_UART_Init+0x50>)
 80041f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 80041fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004200:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004202:	4b0e      	ldr	r3, [pc, #56]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 8004204:	2200      	movs	r2, #0
 8004206:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004208:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 800420a:	2200      	movs	r2, #0
 800420c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 8004210:	2200      	movs	r2, #0
 8004212:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004214:	4b09      	ldr	r3, [pc, #36]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 8004216:	220c      	movs	r2, #12
 8004218:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800421a:	4b08      	ldr	r3, [pc, #32]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 800421c:	2200      	movs	r2, #0
 800421e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 8004222:	2200      	movs	r2, #0
 8004224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004226:	4805      	ldr	r0, [pc, #20]	@ (800423c <MX_USART1_UART_Init+0x4c>)
 8004228:	f005 f964 	bl	80094f4 <HAL_UART_Init>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004232:	f7fe fc0b 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000890 	.word	0x20000890
 8004240:	40011000 	.word	0x40011000

08004244 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004248:	4b11      	ldr	r3, [pc, #68]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 800424a:	4a12      	ldr	r2, [pc, #72]	@ (8004294 <MX_USART3_UART_Init+0x50>)
 800424c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800424e:	4b10      	ldr	r3, [pc, #64]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 8004250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004254:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004256:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 8004258:	2200      	movs	r2, #0
 800425a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800425c:	4b0c      	ldr	r3, [pc, #48]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 800425e:	2200      	movs	r2, #0
 8004260:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 8004264:	2200      	movs	r2, #0
 8004266:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004268:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 800426a:	220c      	movs	r2, #12
 800426c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800426e:	4b08      	ldr	r3, [pc, #32]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 8004270:	2200      	movs	r2, #0
 8004272:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 8004276:	2200      	movs	r2, #0
 8004278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800427a:	4805      	ldr	r0, [pc, #20]	@ (8004290 <MX_USART3_UART_Init+0x4c>)
 800427c:	f005 f93a 	bl	80094f4 <HAL_UART_Init>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004286:	f7fe fbe1 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	200008d8 	.word	0x200008d8
 8004294:	40004800 	.word	0x40004800

08004298 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800429c:	4b11      	ldr	r3, [pc, #68]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 800429e:	4a12      	ldr	r2, [pc, #72]	@ (80042e8 <MX_USART6_UART_Init+0x50>)
 80042a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80042a2:	4b10      	ldr	r3, [pc, #64]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80042a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80042aa:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80042bc:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042be:	220c      	movs	r2, #12
 80042c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042c2:	4b08      	ldr	r3, [pc, #32]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80042ce:	4805      	ldr	r0, [pc, #20]	@ (80042e4 <MX_USART6_UART_Init+0x4c>)
 80042d0:	f005 f910 	bl	80094f4 <HAL_UART_Init>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80042da:	f7fe fbb7 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000920 	.word	0x20000920
 80042e8:	40011400 	.word	0x40011400

080042ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b090      	sub	sp, #64	@ 0x40
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	60da      	str	r2, [r3, #12]
 8004302:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a79      	ldr	r2, [pc, #484]	@ (80044f0 <HAL_UART_MspInit+0x204>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d135      	bne.n	800437a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004312:	4b78      	ldr	r3, [pc, #480]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	4a77      	ldr	r2, [pc, #476]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004318:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800431c:	6413      	str	r3, [r2, #64]	@ 0x40
 800431e:	4b75      	ldr	r3, [pc, #468]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004328:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
 800432e:	4b71      	ldr	r3, [pc, #452]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	4a70      	ldr	r2, [pc, #448]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	6313      	str	r3, [r2, #48]	@ 0x30
 800433a:	4b6e      	ldr	r3, [pc, #440]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004346:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800434a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004354:	2303      	movs	r3, #3
 8004356:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004358:	2308      	movs	r3, #8
 800435a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800435c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004360:	4619      	mov	r1, r3
 8004362:	4865      	ldr	r0, [pc, #404]	@ (80044f8 <HAL_UART_MspInit+0x20c>)
 8004364:	f001 fdf2 	bl	8005f4c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004368:	2200      	movs	r2, #0
 800436a:	2100      	movs	r1, #0
 800436c:	2034      	movs	r0, #52	@ 0x34
 800436e:	f001 f948 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004372:	2034      	movs	r0, #52	@ 0x34
 8004374:	f001 f961 	bl	800563a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004378:	e131      	b.n	80045de <HAL_UART_MspInit+0x2f2>
  else if(uartHandle->Instance==USART1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5f      	ldr	r2, [pc, #380]	@ (80044fc <HAL_UART_MspInit+0x210>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d12c      	bne.n	80043de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004384:	2300      	movs	r3, #0
 8004386:	623b      	str	r3, [r7, #32]
 8004388:	4b5a      	ldr	r3, [pc, #360]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 800438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438c:	4a59      	ldr	r2, [pc, #356]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 800438e:	f043 0310 	orr.w	r3, r3, #16
 8004392:	6453      	str	r3, [r2, #68]	@ 0x44
 8004394:	4b57      	ldr	r3, [pc, #348]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	4b53      	ldr	r3, [pc, #332]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	4a52      	ldr	r2, [pc, #328]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 80043aa:	f043 0302 	orr.w	r3, r3, #2
 80043ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80043b0:	4b50      	ldr	r3, [pc, #320]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043bc:	23c0      	movs	r3, #192	@ 0xc0
 80043be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c0:	2302      	movs	r3, #2
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043cc:	2307      	movs	r3, #7
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80043d4:	4619      	mov	r1, r3
 80043d6:	484a      	ldr	r0, [pc, #296]	@ (8004500 <HAL_UART_MspInit+0x214>)
 80043d8:	f001 fdb8 	bl	8005f4c <HAL_GPIO_Init>
}
 80043dc:	e0ff      	b.n	80045de <HAL_UART_MspInit+0x2f2>
  else if(uartHandle->Instance==USART3)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a48      	ldr	r2, [pc, #288]	@ (8004504 <HAL_UART_MspInit+0x218>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	f040 8093 	bne.w	8004510 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	4b41      	ldr	r3, [pc, #260]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	4a40      	ldr	r2, [pc, #256]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80043fa:	4b3e      	ldr	r3, [pc, #248]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	4a39      	ldr	r2, [pc, #228]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6313      	str	r3, [r2, #48]	@ 0x30
 8004416:	4b37      	ldr	r3, [pc, #220]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	4b33      	ldr	r3, [pc, #204]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442a:	4a32      	ldr	r2, [pc, #200]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 800442c:	f043 0302 	orr.w	r3, r3, #2
 8004430:	6313      	str	r3, [r2, #48]	@ 0x30
 8004432:	4b30      	ldr	r3, [pc, #192]	@ (80044f4 <HAL_UART_MspInit+0x208>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800443e:	2320      	movs	r3, #32
 8004440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	2302      	movs	r3, #2
 8004444:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	2300      	movs	r3, #0
 8004448:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444a:	2303      	movs	r3, #3
 800444c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800444e:	2307      	movs	r3, #7
 8004450:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004456:	4619      	mov	r1, r3
 8004458:	4827      	ldr	r0, [pc, #156]	@ (80044f8 <HAL_UART_MspInit+0x20c>)
 800445a:	f001 fd77 	bl	8005f4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800445e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004464:	2302      	movs	r3, #2
 8004466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446c:	2303      	movs	r3, #3
 800446e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004470:	2307      	movs	r3, #7
 8004472:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004478:	4619      	mov	r1, r3
 800447a:	4821      	ldr	r0, [pc, #132]	@ (8004500 <HAL_UART_MspInit+0x214>)
 800447c:	f001 fd66 	bl	8005f4c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004480:	4b21      	ldr	r3, [pc, #132]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 8004482:	4a22      	ldr	r2, [pc, #136]	@ (800450c <HAL_UART_MspInit+0x220>)
 8004484:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004486:	4b20      	ldr	r3, [pc, #128]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 8004488:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800448c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800448e:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004494:	4b1c      	ldr	r3, [pc, #112]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 8004496:	2200      	movs	r2, #0
 8004498:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800449a:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 800449c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044a2:	4b19      	ldr	r3, [pc, #100]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044a8:	4b17      	ldr	r3, [pc, #92]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80044ae:	4b16      	ldr	r3, [pc, #88]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044b4:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80044ba:	4b13      	ldr	r3, [pc, #76]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80044c0:	4811      	ldr	r0, [pc, #68]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044c2:	f001 f8e3 	bl	800568c <HAL_DMA_Init>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 80044cc:	f7fe fabe 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004508 <HAL_UART_MspInit+0x21c>)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80044dc:	2200      	movs	r2, #0
 80044de:	2100      	movs	r1, #0
 80044e0:	2027      	movs	r0, #39	@ 0x27
 80044e2:	f001 f88e 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044e6:	2027      	movs	r0, #39	@ 0x27
 80044e8:	f001 f8a7 	bl	800563a <HAL_NVIC_EnableIRQ>
}
 80044ec:	e077      	b.n	80045de <HAL_UART_MspInit+0x2f2>
 80044ee:	bf00      	nop
 80044f0:	40004c00 	.word	0x40004c00
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40020800 	.word	0x40020800
 80044fc:	40011000 	.word	0x40011000
 8004500:	40020400 	.word	0x40020400
 8004504:	40004800 	.word	0x40004800
 8004508:	20000968 	.word	0x20000968
 800450c:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a34      	ldr	r2, [pc, #208]	@ (80045e8 <HAL_UART_MspInit+0x2fc>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d161      	bne.n	80045de <HAL_UART_MspInit+0x2f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	4b33      	ldr	r3, [pc, #204]	@ (80045ec <HAL_UART_MspInit+0x300>)
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <HAL_UART_MspInit+0x300>)
 8004524:	f043 0320 	orr.w	r3, r3, #32
 8004528:	6453      	str	r3, [r2, #68]	@ 0x44
 800452a:	4b30      	ldr	r3, [pc, #192]	@ (80045ec <HAL_UART_MspInit+0x300>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b2c      	ldr	r3, [pc, #176]	@ (80045ec <HAL_UART_MspInit+0x300>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	4a2b      	ldr	r2, [pc, #172]	@ (80045ec <HAL_UART_MspInit+0x300>)
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	6313      	str	r3, [r2, #48]	@ 0x30
 8004546:	4b29      	ldr	r3, [pc, #164]	@ (80045ec <HAL_UART_MspInit+0x300>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004552:	23c0      	movs	r3, #192	@ 0xc0
 8004554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004556:	2302      	movs	r3, #2
 8004558:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455a:	2300      	movs	r3, #0
 800455c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800455e:	2303      	movs	r3, #3
 8004560:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004562:	2308      	movs	r3, #8
 8004564:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004566:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800456a:	4619      	mov	r1, r3
 800456c:	4820      	ldr	r0, [pc, #128]	@ (80045f0 <HAL_UART_MspInit+0x304>)
 800456e:	f001 fced 	bl	8005f4c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004572:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 8004574:	4a20      	ldr	r2, [pc, #128]	@ (80045f8 <HAL_UART_MspInit+0x30c>)
 8004576:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004578:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 800457a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800457e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004580:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004586:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 8004588:	2200      	movs	r2, #0
 800458a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800458c:	4b19      	ldr	r3, [pc, #100]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 800458e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004592:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004594:	4b17      	ldr	r3, [pc, #92]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 8004596:	2200      	movs	r2, #0
 8004598:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800459a:	4b16      	ldr	r3, [pc, #88]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 800459c:	2200      	movs	r2, #0
 800459e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80045a0:	4b14      	ldr	r3, [pc, #80]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80045a6:	4b13      	ldr	r3, [pc, #76]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80045b2:	4810      	ldr	r0, [pc, #64]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 80045b4:	f001 f86a 	bl	800568c <HAL_DMA_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 80045be:	f7fe fa45 	bl	8002a4c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a0b      	ldr	r2, [pc, #44]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 80045c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80045c8:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <HAL_UART_MspInit+0x308>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	2047      	movs	r0, #71	@ 0x47
 80045d4:	f001 f815 	bl	8005602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80045d8:	2047      	movs	r0, #71	@ 0x47
 80045da:	f001 f82e 	bl	800563a <HAL_NVIC_EnableIRQ>
}
 80045de:	bf00      	nop
 80045e0:	3740      	adds	r7, #64	@ 0x40
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40011400 	.word	0x40011400
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40020800 	.word	0x40020800
 80045f4:	200009c8 	.word	0x200009c8
 80045f8:	40026428 	.word	0x40026428

080045fc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a2c      	ldr	r2, [pc, #176]	@ (80046bc <HAL_UART_MspDeInit+0xc0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10e      	bne.n	800462c <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800460e:	4b2c      	ldr	r3, [pc, #176]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a2b      	ldr	r2, [pc, #172]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 8004614:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 800461a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800461e:	4829      	ldr	r0, [pc, #164]	@ (80046c4 <HAL_UART_MspDeInit+0xc8>)
 8004620:	f001 fe28 	bl	8006274 <HAL_GPIO_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004624:	2034      	movs	r0, #52	@ 0x34
 8004626:	f001 f816 	bl	8005656 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 800462a:	e043      	b.n	80046b4 <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a25      	ldr	r2, [pc, #148]	@ (80046c8 <HAL_UART_MspDeInit+0xcc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d10a      	bne.n	800464c <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART1_CLK_DISABLE();
 8004636:	4b22      	ldr	r3, [pc, #136]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 800463c:	f023 0310 	bic.w	r3, r3, #16
 8004640:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8004642:	21c0      	movs	r1, #192	@ 0xc0
 8004644:	4821      	ldr	r0, [pc, #132]	@ (80046cc <HAL_UART_MspDeInit+0xd0>)
 8004646:	f001 fe15 	bl	8006274 <HAL_GPIO_DeInit>
}
 800464a:	e033      	b.n	80046b4 <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1f      	ldr	r2, [pc, #124]	@ (80046d0 <HAL_UART_MspDeInit+0xd4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d117      	bne.n	8004686 <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART3_CLK_DISABLE();
 8004656:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 800465c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004660:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8004662:	2120      	movs	r1, #32
 8004664:	4817      	ldr	r0, [pc, #92]	@ (80046c4 <HAL_UART_MspDeInit+0xc8>)
 8004666:	f001 fe05 	bl	8006274 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800466a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800466e:	4817      	ldr	r0, [pc, #92]	@ (80046cc <HAL_UART_MspDeInit+0xd0>)
 8004670:	f001 fe00 	bl	8006274 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f8b5 	bl	80057e8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 800467e:	2027      	movs	r0, #39	@ 0x27
 8004680:	f000 ffe9 	bl	8005656 <HAL_NVIC_DisableIRQ>
}
 8004684:	e016      	b.n	80046b4 <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART6)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a12      	ldr	r2, [pc, #72]	@ (80046d4 <HAL_UART_MspDeInit+0xd8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_UART_MspDeInit+0xb8>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004690:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	4a0a      	ldr	r2, [pc, #40]	@ (80046c0 <HAL_UART_MspDeInit+0xc4>)
 8004696:	f023 0320 	bic.w	r3, r3, #32
 800469a:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 800469c:	21c0      	movs	r1, #192	@ 0xc0
 800469e:	4809      	ldr	r0, [pc, #36]	@ (80046c4 <HAL_UART_MspDeInit+0xc8>)
 80046a0:	f001 fde8 	bl	8006274 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f89d 	bl	80057e8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80046ae:	2047      	movs	r0, #71	@ 0x47
 80046b0:	f000 ffd1 	bl	8005656 <HAL_NVIC_DisableIRQ>
}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40004c00 	.word	0x40004c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	40020800 	.word	0x40020800
 80046c8:	40011000 	.word	0x40011000
 80046cc:	40020400 	.word	0x40020400
 80046d0:	40004800 	.word	0x40004800
 80046d4:	40011400 	.word	0x40011400

080046d8 <UsrGpsL86Init>:



//============================= Initial section
void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 80046e0:	f240 228a 	movw	r2, #650	@ 0x28a
 80046e4:	4903      	ldr	r1, [pc, #12]	@ (80046f4 <UsrGpsL86Init+0x1c>)
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f005 f811 	bl	800970e <HAL_UART_Receive_DMA>
}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000afc 	.word	0x20000afc

080046f8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	if(huart == &GPS_UART_HNDLR)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a06      	ldr	r2, [pc, #24]	@ (800471c <HAL_UART_RxCpltCallback+0x24>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d102      	bne.n	800470e <HAL_UART_RxCpltCallback+0x16>
	{
		g_openFixedDataTransmition = true;
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <HAL_UART_RxCpltCallback+0x28>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000920 	.word	0x20000920
 8004720:	20000a28 	.word	0x20000a28

08004724 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_, UART_HandleTypeDef *huart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
    getRmc();
 800472e:	f000 f839 	bl	80047a4 <getRmc>
    getGGA();
 8004732:	f000 f945 	bl	80049c0 <getGGA>
    if (rmcValidFlag)
 8004736:	4b18      	ldr	r3, [pc, #96]	@ (8004798 <Usr_GpsL86GetValues+0x74>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <Usr_GpsL86GetValues+0x22>
    {
        rmcValidFlag = false;
 8004740:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <Usr_GpsL86GetValues+0x74>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8004746:	f000 f8cd 	bl	80048e4 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 800474a:	4b14      	ldr	r3, [pc, #80]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8004752:	4b12      	ldr	r3, [pc, #72]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 800475c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	625a      	str	r2, [r3, #36]	@ 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8004762:	4b0e      	ldr	r3, [pc, #56]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 800476c:	6a1a      	ldr	r2, [r3, #32]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 800477a:	4b08      	ldr	r3, [pc, #32]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8004782:	4b06      	ldr	r3, [pc, #24]	@ (800479c <Usr_GpsL86GetValues+0x78>)
 8004784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	629a      	str	r2, [r3, #40]	@ 0x28
    UsrGpsL86Init(&GPS_UART_HNDLR);
 800478a:	4805      	ldr	r0, [pc, #20]	@ (80047a0 <Usr_GpsL86GetValues+0x7c>)
 800478c:	f7ff ffa4 	bl	80046d8 <UsrGpsL86Init>
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000a29 	.word	0x20000a29
 800479c:	20001aa4 	.word	0x20001aa4
 80047a0:	20000920 	.word	0x20000920

080047a4 <getRmc>:

//============================= Statics

_io void getRmc()
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af02      	add	r7, sp, #8

	        MsgIndex = 0;
 80047aa:	4b40      	ldr	r3, [pc, #256]	@ (80048ac <getRmc+0x108>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
	        memcpy(m_gpsTransmitBuf, (char *)(m_rxData), 1000);
 80047b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047b4:	493e      	ldr	r1, [pc, #248]	@ (80048b0 <getRmc+0x10c>)
 80047b6:	483f      	ldr	r0, [pc, #252]	@ (80048b4 <getRmc+0x110>)
 80047b8:	f008 ffe1 	bl	800d77e <memcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 80047bc:	493e      	ldr	r1, [pc, #248]	@ (80048b8 <getRmc+0x114>)
 80047be:	483d      	ldr	r0, [pc, #244]	@ (80048b4 <getRmc+0x110>)
 80047c0:	f008 ff3f 	bl	800d642 <strstr>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4a3d      	ldr	r2, [pc, #244]	@ (80048bc <getRmc+0x118>)
 80047c8:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 80047ca:	4b3c      	ldr	r3, [pc, #240]	@ (80048bc <getRmc+0x118>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b47      	cmp	r3, #71	@ 0x47
 80047d2:	d167      	bne.n	80048a4 <getRmc+0x100>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 80047d4:	4b39      	ldr	r3, [pc, #228]	@ (80048bc <getRmc+0x118>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <getRmc+0x108>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	7811      	ldrb	r1, [r2, #0]
 80047de:	4a38      	ldr	r2, [pc, #224]	@ (80048c0 <getRmc+0x11c>)
 80047e0:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 80047e2:	4b32      	ldr	r3, [pc, #200]	@ (80048ac <getRmc+0x108>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	4a30      	ldr	r2, [pc, #192]	@ (80048ac <getRmc+0x108>)
 80047ea:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 80047ec:	4b33      	ldr	r3, [pc, #204]	@ (80048bc <getRmc+0x118>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2e      	ldr	r2, [pc, #184]	@ (80048ac <getRmc+0x108>)
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	441a      	add	r2, r3
 80047f6:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <getRmc+0x118>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80047fe:	4b2f      	ldr	r3, [pc, #188]	@ (80048bc <getRmc+0x118>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b0a      	cmp	r3, #10
 8004806:	d003      	beq.n	8004810 <getRmc+0x6c>
 8004808:	4b28      	ldr	r3, [pc, #160]	@ (80048ac <getRmc+0x108>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b5a      	cmp	r3, #90	@ 0x5a
 800480e:	dde1      	ble.n	80047d4 <getRmc+0x30>
	                {
	                    MsgIndex = 0;
 8004810:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <getRmc+0x108>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

	                    for (int i = 0; i < 100; i++)
 8004816:	2300      	movs	r3, #0
 8004818:	607b      	str	r3, [r7, #4]
 800481a:	e014      	b.n	8004846 <getRmc+0xa2>
	                    {
	                        if (gpsPayload[i] == 'N')
 800481c:	4a28      	ldr	r2, [pc, #160]	@ (80048c0 <getRmc+0x11c>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b4e      	cmp	r3, #78	@ 0x4e
 8004826:	d102      	bne.n	800482e <getRmc+0x8a>
	                            f_northFlag = true;
 8004828:	4b26      	ldr	r3, [pc, #152]	@ (80048c4 <getRmc+0x120>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 800482e:	4a24      	ldr	r2, [pc, #144]	@ (80048c0 <getRmc+0x11c>)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4413      	add	r3, r2
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b45      	cmp	r3, #69	@ 0x45
 8004838:	d102      	bne.n	8004840 <getRmc+0x9c>
	                            f_eastFlag = true;
 800483a:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <getRmc+0x124>)
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3301      	adds	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b63      	cmp	r3, #99	@ 0x63
 800484a:	dde7      	ble.n	800481c <getRmc+0x78>
	                    }
	                    if (strlen(gpsPayload) > 10)
 800484c:	481c      	ldr	r0, [pc, #112]	@ (80048c0 <getRmc+0x11c>)
 800484e:	f7fb fd2f 	bl	80002b0 <strlen>
 8004852:	4603      	mov	r3, r0
 8004854:	2b0a      	cmp	r3, #10
 8004856:	d91f      	bls.n	8004898 <getRmc+0xf4>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8004858:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <getRmc+0x124>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d01f      	beq.n	80048a2 <getRmc+0xfe>
 8004862:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <getRmc+0x120>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01a      	beq.n	80048a2 <getRmc+0xfe>
	                        {
	                            f_northFlag = false;
 800486c:	4b15      	ldr	r3, [pc, #84]	@ (80048c4 <getRmc+0x120>)
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8004872:	4b15      	ldr	r3, [pc, #84]	@ (80048c8 <getRmc+0x124>)
 8004874:	2200      	movs	r2, #0
 8004876:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8004878:	4b14      	ldr	r3, [pc, #80]	@ (80048cc <getRmc+0x128>)
 800487a:	9301      	str	r3, [sp, #4]
 800487c:	4b14      	ldr	r3, [pc, #80]	@ (80048d0 <getRmc+0x12c>)
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	4b14      	ldr	r3, [pc, #80]	@ (80048d4 <getRmc+0x130>)
 8004882:	4a15      	ldr	r2, [pc, #84]	@ (80048d8 <getRmc+0x134>)
 8004884:	4915      	ldr	r1, [pc, #84]	@ (80048dc <getRmc+0x138>)
 8004886:	480e      	ldr	r0, [pc, #56]	@ (80048c0 <getRmc+0x11c>)
 8004888:	f008 fe52 	bl	800d530 <siscanf>
	                            rmcValidFlag = true;
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <getRmc+0x13c>)
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8004892:	f000 f827 	bl	80048e4 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8004896:	e004      	b.n	80048a2 <getRmc+0xfe>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8004898:	2264      	movs	r2, #100	@ 0x64
 800489a:	2100      	movs	r1, #0
 800489c:	4808      	ldr	r0, [pc, #32]	@ (80048c0 <getRmc+0x11c>)
 800489e:	f008 fec8 	bl	800d632 <memset>
	                    break;
 80048a2:	bf00      	nop
	                }
	            }
	        }

}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20000a2c 	.word	0x20000a2c
 80048b0:	20000afc 	.word	0x20000afc
 80048b4:	200012cc 	.word	0x200012cc
 80048b8:	08013280 	.word	0x08013280
 80048bc:	20000a30 	.word	0x20000a30
 80048c0:	20000a34 	.word	0x20000a34
 80048c4:	20000a2a 	.word	0x20000a2a
 80048c8:	20000a2b 	.word	0x20000a2b
 80048cc:	20001aac 	.word	0x20001aac
 80048d0:	20001aa0 	.word	0x20001aa0
 80048d4:	20001a9c 	.word	0x20001a9c
 80048d8:	20001ab0 	.word	0x20001ab0
 80048dc:	08013288 	.word	0x08013288
 80048e0:	20000a29 	.word	0x20000a29

080048e4 <formatLatLong>:

_io void formatLatLong(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 80048ea:	4b30      	ldr	r3, [pc, #192]	@ (80049ac <formatLatLong+0xc8>)
 80048ec:	edd3 7a00 	vldr	s15, [r3]
 80048f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f4:	ee17 1a90 	vmov	r1, s15
 80048f8:	4b2d      	ldr	r3, [pc, #180]	@ (80049b0 <formatLatLong+0xcc>)
 80048fa:	fb83 2301 	smull	r2, r3, r3, r1
 80048fe:	115a      	asrs	r2, r3, #5
 8004900:	17cb      	asrs	r3, r1, #31
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8004906:	4b29      	ldr	r3, [pc, #164]	@ (80049ac <formatLatLong+0xc8>)
 8004908:	ed93 7a00 	vldr	s14, [r3]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2264      	movs	r2, #100	@ 0x64
 8004910:	fb02 f303 	mul.w	r3, r2, r3
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800491c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004920:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800492e:	edd7 6a00 	vldr	s13, [r7]
 8004932:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80049b4 <formatLatLong+0xd0>
 8004936:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800493a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800493e:	4b1e      	ldr	r3, [pc, #120]	@ (80049b8 <formatLatLong+0xd4>)
 8004940:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8004944:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <formatLatLong+0xd8>)
 8004946:	edd3 7a00 	vldr	s15, [r3]
 800494a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494e:	ee17 1a90 	vmov	r1, s15
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <formatLatLong+0xcc>)
 8004954:	fb83 2301 	smull	r2, r3, r3, r1
 8004958:	115a      	asrs	r2, r3, #5
 800495a:	17cb      	asrs	r3, r1, #31
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8004960:	4b16      	ldr	r3, [pc, #88]	@ (80049bc <formatLatLong+0xd8>)
 8004962:	ed93 7a00 	vldr	s14, [r3]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2264      	movs	r2, #100	@ 0x64
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004976:	ee77 7a67 	vsub.f32	s15, s14, s15
 800497a:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004988:	edd7 6a00 	vldr	s13, [r7]
 800498c:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 80049b4 <formatLatLong+0xd0>
 8004990:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004998:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <formatLatLong+0xd4>)
 800499a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20001a9c 	.word	0x20001a9c
 80049b0:	51eb851f 	.word	0x51eb851f
 80049b4:	42700000 	.word	0x42700000
 80049b8:	20001aa4 	.word	0x20001aa4
 80049bc:	20001aa0 	.word	0x20001aa0

080049c0 <getGGA>:

_io void getGGA(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af06      	add	r7, sp, #24

        MsgIndex = 0;
 80049c6:	4b30      	ldr	r3, [pc, #192]	@ (8004a88 <getGGA+0xc8>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 80049cc:	492f      	ldr	r1, [pc, #188]	@ (8004a8c <getGGA+0xcc>)
 80049ce:	4830      	ldr	r0, [pc, #192]	@ (8004a90 <getGGA+0xd0>)
 80049d0:	f008 fe37 	bl	800d642 <strstr>
 80049d4:	4603      	mov	r3, r0
 80049d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a94 <getGGA+0xd4>)
 80049d8:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 80049da:	4b2e      	ldr	r3, [pc, #184]	@ (8004a94 <getGGA+0xd4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b47      	cmp	r3, #71	@ 0x47
 80049e2:	d14a      	bne.n	8004a7a <getGGA+0xba>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 80049e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <getGGA+0xd4>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b27      	ldr	r3, [pc, #156]	@ (8004a88 <getGGA+0xc8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	7811      	ldrb	r1, [r2, #0]
 80049ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <getGGA+0xd8>)
 80049f0:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 80049f2:	4b25      	ldr	r3, [pc, #148]	@ (8004a88 <getGGA+0xc8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3301      	adds	r3, #1
 80049f8:	4a23      	ldr	r2, [pc, #140]	@ (8004a88 <getGGA+0xc8>)
 80049fa:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 80049fc:	4b25      	ldr	r3, [pc, #148]	@ (8004a94 <getGGA+0xd4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a21      	ldr	r2, [pc, #132]	@ (8004a88 <getGGA+0xc8>)
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	441a      	add	r2, r3
 8004a06:	4b23      	ldr	r3, [pc, #140]	@ (8004a94 <getGGA+0xd4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8004a0e:	4b21      	ldr	r3, [pc, #132]	@ (8004a94 <getGGA+0xd4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b0a      	cmp	r3, #10
 8004a16:	d003      	beq.n	8004a20 <getGGA+0x60>
 8004a18:	4b1b      	ldr	r3, [pc, #108]	@ (8004a88 <getGGA+0xc8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b5a      	cmp	r3, #90	@ 0x5a
 8004a1e:	dde1      	ble.n	80049e4 <getGGA+0x24>
                {
                    MsgIndex = 0;
 8004a20:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <getGGA+0xc8>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8004a26:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	4818      	ldr	r0, [pc, #96]	@ (8004a90 <getGGA+0xd0>)
 8004a2e:	f008 fe00 	bl	800d632 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8004a32:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004a36:	2100      	movs	r1, #0
 8004a38:	4818      	ldr	r0, [pc, #96]	@ (8004a9c <getGGA+0xdc>)
 8004a3a:	f008 fdfa 	bl	800d632 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8004a3e:	4816      	ldr	r0, [pc, #88]	@ (8004a98 <getGGA+0xd8>)
 8004a40:	f7fb fc36 	bl	80002b0 <strlen>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b0a      	cmp	r3, #10
 8004a48:	d912      	bls.n	8004a70 <getGGA+0xb0>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8004a4a:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <getGGA+0xe0>)
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <getGGA+0xe4>)
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <getGGA+0xe8>)
 8004a54:	9303      	str	r3, [sp, #12]
 8004a56:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <getGGA+0xec>)
 8004a58:	9302      	str	r3, [sp, #8]
 8004a5a:	4b15      	ldr	r3, [pc, #84]	@ (8004ab0 <getGGA+0xf0>)
 8004a5c:	9301      	str	r3, [sp, #4]
 8004a5e:	4b15      	ldr	r3, [pc, #84]	@ (8004ab4 <getGGA+0xf4>)
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <getGGA+0xf8>)
 8004a64:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <getGGA+0xfc>)
 8004a66:	4916      	ldr	r1, [pc, #88]	@ (8004ac0 <getGGA+0x100>)
 8004a68:	480b      	ldr	r0, [pc, #44]	@ (8004a98 <getGGA+0xd8>)
 8004a6a:	f008 fd61 	bl	800d530 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8004a6e:	e004      	b.n	8004a7a <getGGA+0xba>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8004a70:	2264      	movs	r2, #100	@ 0x64
 8004a72:	2100      	movs	r1, #0
 8004a74:	4813      	ldr	r0, [pc, #76]	@ (8004ac4 <getGGA+0x104>)
 8004a76:	f008 fddc 	bl	800d632 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8004a7a:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <getGGA+0x108>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);

}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20000a2c 	.word	0x20000a2c
 8004a8c:	080132a4 	.word	0x080132a4
 8004a90:	200012cc 	.word	0x200012cc
 8004a94:	20000a30 	.word	0x20000a30
 8004a98:	20000a98 	.word	0x20000a98
 8004a9c:	20000afc 	.word	0x20000afc
 8004aa0:	20001ad0 	.word	0x20001ad0
 8004aa4:	20001acc 	.word	0x20001acc
 8004aa8:	20001ac8 	.word	0x20001ac8
 8004aac:	20001ac4 	.word	0x20001ac4
 8004ab0:	20001ac0 	.word	0x20001ac0
 8004ab4:	20001abc 	.word	0x20001abc
 8004ab8:	20001ab8 	.word	0x20001ab8
 8004abc:	20001ab4 	.word	0x20001ab4
 8004ac0:	080132ac 	.word	0x080132ac
 8004ac4:	20000a34 	.word	0x20000a34
 8004ac8:	20000a28 	.word	0x20000a28

08004acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004acc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004ad0:	f7fe fefc 	bl	80038cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ad4:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ad6:	490d      	ldr	r1, [pc, #52]	@ (8004b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004adc:	e002      	b.n	8004ae4 <LoopCopyDataInit>

08004ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ae2:	3304      	adds	r3, #4

08004ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae8:	d3f9      	bcc.n	8004ade <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004aea:	4a0a      	ldr	r2, [pc, #40]	@ (8004b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004aec:	4c0a      	ldr	r4, [pc, #40]	@ (8004b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af0:	e001      	b.n	8004af6 <LoopFillZerobss>

08004af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004af4:	3204      	adds	r2, #4

08004af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af8:	d3fb      	bcc.n	8004af2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004afa:	f008 fe19 	bl	800d730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004afe:	f7fd fa95 	bl	800202c <main>
  bx  lr    
 8004b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b0c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004b10:	08013808 	.word	0x08013808
  ldr r2, =_sbss
 8004b14:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004b18:	20001c38 	.word	0x20001c38

08004b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b1c:	e7fe      	b.n	8004b1c <ADC_IRQHandler>
	...

08004b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b24:	4b0e      	ldr	r3, [pc, #56]	@ (8004b60 <HAL_Init+0x40>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a0d      	ldr	r2, [pc, #52]	@ (8004b60 <HAL_Init+0x40>)
 8004b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <HAL_Init+0x40>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0a      	ldr	r2, [pc, #40]	@ (8004b60 <HAL_Init+0x40>)
 8004b36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b3c:	4b08      	ldr	r3, [pc, #32]	@ (8004b60 <HAL_Init+0x40>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a07      	ldr	r2, [pc, #28]	@ (8004b60 <HAL_Init+0x40>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b48:	2003      	movs	r0, #3
 8004b4a:	f000 fd4f 	bl	80055ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b4e:	200f      	movs	r0, #15
 8004b50:	f000 f808 	bl	8004b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b54:	f7fe fd0a 	bl	800356c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023c00 	.word	0x40023c00

08004b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b6c:	4b12      	ldr	r3, [pc, #72]	@ (8004bb8 <HAL_InitTick+0x54>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <HAL_InitTick+0x58>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	4619      	mov	r1, r3
 8004b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fd75 	bl	8005672 <HAL_SYSTICK_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e00e      	b.n	8004bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b0f      	cmp	r3, #15
 8004b96:	d80a      	bhi.n	8004bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	6879      	ldr	r1, [r7, #4]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ba0:	f000 fd2f 	bl	8005602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ba4:	4a06      	ldr	r2, [pc, #24]	@ (8004bc0 <HAL_InitTick+0x5c>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20000004 	.word	0x20000004
 8004bbc:	20000024 	.word	0x20000024
 8004bc0:	20000020 	.word	0x20000020

08004bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <HAL_IncTick+0x20>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b06      	ldr	r3, [pc, #24]	@ (8004be8 <HAL_IncTick+0x24>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	4a04      	ldr	r2, [pc, #16]	@ (8004be8 <HAL_IncTick+0x24>)
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000024 	.word	0x20000024
 8004be8:	20001ad4 	.word	0x20001ad4

08004bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return uwTick;
 8004bf0:	4b03      	ldr	r3, [pc, #12]	@ (8004c00 <HAL_GetTick+0x14>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20001ad4 	.word	0x20001ad4

08004c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c0c:	f7ff ffee 	bl	8004bec <HAL_GetTick>
 8004c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1c:	d005      	beq.n	8004c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c48 <HAL_Delay+0x44>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	461a      	mov	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c2a:	bf00      	nop
 8004c2c:	f7ff ffde 	bl	8004bec <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d8f7      	bhi.n	8004c2c <HAL_Delay+0x28>
  {
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000024 	.word	0x20000024

08004c4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e033      	b.n	8004cca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fbfa 	bl	8001464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f003 0310 	and.w	r3, r3, #16
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c92:	f023 0302 	bic.w	r3, r3, #2
 8004c96:	f043 0202 	orr.w	r2, r3, #2
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fab4 	bl	800520c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004cba:	e001      	b.n	8004cc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_Start+0x1a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0b2      	b.n	8004e54 <HAL_ADC_Start+0x180>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d018      	beq.n	8004d36 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_ADC_Start+0x18c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a52      	ldr	r2, [pc, #328]	@ (8004e64 <HAL_ADC_Start+0x190>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0c9a      	lsrs	r2, r3, #18
 8004d20:	4613      	mov	r3, r2
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004d28:	e002      	b.n	8004d30 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f9      	bne.n	8004d2a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d17a      	bne.n	8004e3a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004d6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d82:	d106      	bne.n	8004d92 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d88:	f023 0206 	bic.w	r2, r3, #6
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d90:	e002      	b.n	8004d98 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004da0:	4b31      	ldr	r3, [pc, #196]	@ (8004e68 <HAL_ADC_Start+0x194>)
 8004da2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004dac:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d12a      	bne.n	8004e10 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a2b      	ldr	r2, [pc, #172]	@ (8004e6c <HAL_ADC_Start+0x198>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d015      	beq.n	8004df0 <HAL_ADC_Start+0x11c>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a29      	ldr	r2, [pc, #164]	@ (8004e70 <HAL_ADC_Start+0x19c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d105      	bne.n	8004dda <HAL_ADC_Start+0x106>
 8004dce:	4b26      	ldr	r3, [pc, #152]	@ (8004e68 <HAL_ADC_Start+0x194>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a25      	ldr	r2, [pc, #148]	@ (8004e74 <HAL_ADC_Start+0x1a0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d136      	bne.n	8004e52 <HAL_ADC_Start+0x17e>
 8004de4:	4b20      	ldr	r3, [pc, #128]	@ (8004e68 <HAL_ADC_Start+0x194>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0310 	and.w	r3, r3, #16
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d130      	bne.n	8004e52 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d129      	bne.n	8004e52 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e0c:	609a      	str	r2, [r3, #8]
 8004e0e:	e020      	b.n	8004e52 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a15      	ldr	r2, [pc, #84]	@ (8004e6c <HAL_ADC_Start+0x198>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d11b      	bne.n	8004e52 <HAL_ADC_Start+0x17e>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d114      	bne.n	8004e52 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	e00b      	b.n	8004e52 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f043 0210 	orr.w	r2, r3, #16
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	20000004 	.word	0x20000004
 8004e64:	431bde83 	.word	0x431bde83
 8004e68:	40012300 	.word	0x40012300
 8004e6c:	40012000 	.word	0x40012000
 8004e70:	40012100 	.word	0x40012100
 8004e74:	40012200 	.word	0x40012200

08004e78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e94:	d113      	bne.n	8004ebe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea4:	d10b      	bne.n	8004ebe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e063      	b.n	8004f86 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ebe:	f7ff fe95 	bl	8004bec <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ec4:	e021      	b.n	8004f0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ecc:	d01d      	beq.n	8004f0a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_ADC_PollForConversion+0x6c>
 8004ed4:	f7ff fe8a 	bl	8004bec <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d212      	bcs.n	8004f0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d00b      	beq.n	8004f0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	f043 0204 	orr.w	r2, r3, #4
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e03d      	b.n	8004f86 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d1d6      	bne.n	8004ec6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f06f 0212 	mvn.w	r2, #18
 8004f20:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d123      	bne.n	8004f84 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d11f      	bne.n	8004f84 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d006      	beq.n	8004f60 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d105      	bne.n	8004f84 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	f043 0201 	orr.w	r2, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x1c>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e113      	b.n	80051ec <HAL_ADC_ConfigChannel+0x244>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b09      	cmp	r3, #9
 8004fd2:	d925      	bls.n	8005020 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68d9      	ldr	r1, [r3, #12]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	4413      	add	r3, r2
 8004fe8:	3b1e      	subs	r3, #30
 8004fea:	2207      	movs	r2, #7
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43da      	mvns	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68d9      	ldr	r1, [r3, #12]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	4618      	mov	r0, r3
 800500c:	4603      	mov	r3, r0
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	4403      	add	r3, r0
 8005012:	3b1e      	subs	r3, #30
 8005014:	409a      	lsls	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	60da      	str	r2, [r3, #12]
 800501e:	e022      	b.n	8005066 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6919      	ldr	r1, [r3, #16]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	b29b      	uxth	r3, r3
 800502c:	461a      	mov	r2, r3
 800502e:	4613      	mov	r3, r2
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	4413      	add	r3, r2
 8005034:	2207      	movs	r2, #7
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43da      	mvns	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	400a      	ands	r2, r1
 8005042:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6919      	ldr	r1, [r3, #16]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	4618      	mov	r0, r3
 8005056:	4603      	mov	r3, r0
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4403      	add	r3, r0
 800505c:	409a      	lsls	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b06      	cmp	r3, #6
 800506c:	d824      	bhi.n	80050b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	3b05      	subs	r3, #5
 8005080:	221f      	movs	r2, #31
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43da      	mvns	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	400a      	ands	r2, r1
 800508e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	b29b      	uxth	r3, r3
 800509c:	4618      	mov	r0, r3
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	3b05      	subs	r3, #5
 80050aa:	fa00 f203 	lsl.w	r2, r0, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80050b6:	e04c      	b.n	8005152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b0c      	cmp	r3, #12
 80050be:	d824      	bhi.n	800510a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	3b23      	subs	r3, #35	@ 0x23
 80050d2:	221f      	movs	r2, #31
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43da      	mvns	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	400a      	ands	r2, r1
 80050e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	4618      	mov	r0, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	3b23      	subs	r3, #35	@ 0x23
 80050fc:	fa00 f203 	lsl.w	r2, r0, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
 8005108:	e023      	b.n	8005152 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	3b41      	subs	r3, #65	@ 0x41
 800511c:	221f      	movs	r2, #31
 800511e:	fa02 f303 	lsl.w	r3, r2, r3
 8005122:	43da      	mvns	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	400a      	ands	r2, r1
 800512a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	b29b      	uxth	r3, r3
 8005138:	4618      	mov	r0, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	3b41      	subs	r3, #65	@ 0x41
 8005146:	fa00 f203 	lsl.w	r2, r0, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <HAL_ADC_ConfigChannel+0x250>)
 8005154:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a28      	ldr	r2, [pc, #160]	@ (80051fc <HAL_ADC_ConfigChannel+0x254>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10f      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x1d8>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b12      	cmp	r3, #18
 8005166:	d10b      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1d      	ldr	r2, [pc, #116]	@ (80051fc <HAL_ADC_ConfigChannel+0x254>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d12b      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0x23a>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <HAL_ADC_ConfigChannel+0x258>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d003      	beq.n	800519c <HAL_ADC_ConfigChannel+0x1f4>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b11      	cmp	r3, #17
 800519a:	d122      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a11      	ldr	r2, [pc, #68]	@ (8005200 <HAL_ADC_ConfigChannel+0x258>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d111      	bne.n	80051e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051be:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_ADC_ConfigChannel+0x25c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a11      	ldr	r2, [pc, #68]	@ (8005208 <HAL_ADC_ConfigChannel+0x260>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	0c9a      	lsrs	r2, r3, #18
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80051d4:	e002      	b.n	80051dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3b01      	subs	r3, #1
 80051da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f9      	bne.n	80051d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40012300 	.word	0x40012300
 80051fc:	40012000 	.word	0x40012000
 8005200:	10000012 	.word	0x10000012
 8005204:	20000004 	.word	0x20000004
 8005208:	431bde83 	.word	0x431bde83

0800520c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005214:	4b79      	ldr	r3, [pc, #484]	@ (80053fc <ADC_Init+0x1f0>)
 8005216:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005240:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6859      	ldr	r1, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	021a      	lsls	r2, r3, #8
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	4a58      	ldr	r2, [pc, #352]	@ (8005400 <ADC_Init+0x1f4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80052d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6899      	ldr	r1, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	e00f      	b.n	800530a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80052f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005308:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0202 	bic.w	r2, r2, #2
 8005318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6899      	ldr	r1, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	7e1b      	ldrb	r3, [r3, #24]
 8005324:	005a      	lsls	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005346:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005356:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6859      	ldr	r1, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	3b01      	subs	r3, #1
 8005364:	035a      	lsls	r2, r3, #13
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	e007      	b.n	8005380 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800538e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	3b01      	subs	r3, #1
 800539c:	051a      	lsls	r2, r3, #20
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80053b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6899      	ldr	r1, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053c2:	025a      	lsls	r2, r3, #9
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	029a      	lsls	r2, r3, #10
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	bf00      	nop
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40012300 	.word	0x40012300
 8005400:	0f000001 	.word	0x0f000001

08005404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005414:	4b0c      	ldr	r3, [pc, #48]	@ (8005448 <__NVIC_SetPriorityGrouping+0x44>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005420:	4013      	ands	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800542c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005436:	4a04      	ldr	r2, [pc, #16]	@ (8005448 <__NVIC_SetPriorityGrouping+0x44>)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	60d3      	str	r3, [r2, #12]
}
 800543c:	bf00      	nop
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	e000ed00 	.word	0xe000ed00

0800544c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005450:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <__NVIC_GetPriorityGrouping+0x18>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	f003 0307 	and.w	r3, r3, #7
}
 800545a:	4618      	mov	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	4603      	mov	r3, r0
 8005470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	2b00      	cmp	r3, #0
 8005478:	db0b      	blt.n	8005492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	f003 021f 	and.w	r2, r3, #31
 8005480:	4907      	ldr	r1, [pc, #28]	@ (80054a0 <__NVIC_EnableIRQ+0x38>)
 8005482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2001      	movs	r0, #1
 800548a:	fa00 f202 	lsl.w	r2, r0, r2
 800548e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000e100 	.word	0xe000e100

080054a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db12      	blt.n	80054dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	f003 021f 	and.w	r2, r3, #31
 80054bc:	490a      	ldr	r1, [pc, #40]	@ (80054e8 <__NVIC_DisableIRQ+0x44>)
 80054be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	2001      	movs	r0, #1
 80054c6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ca:	3320      	adds	r3, #32
 80054cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80054d0:	f3bf 8f4f 	dsb	sy
}
 80054d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80054d6:	f3bf 8f6f 	isb	sy
}
 80054da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	e000e100 	.word	0xe000e100

080054ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	6039      	str	r1, [r7, #0]
 80054f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	db0a      	blt.n	8005516 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	490c      	ldr	r1, [pc, #48]	@ (8005538 <__NVIC_SetPriority+0x4c>)
 8005506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550a:	0112      	lsls	r2, r2, #4
 800550c:	b2d2      	uxtb	r2, r2
 800550e:	440b      	add	r3, r1
 8005510:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005514:	e00a      	b.n	800552c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	4908      	ldr	r1, [pc, #32]	@ (800553c <__NVIC_SetPriority+0x50>)
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	3b04      	subs	r3, #4
 8005524:	0112      	lsls	r2, r2, #4
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	440b      	add	r3, r1
 800552a:	761a      	strb	r2, [r3, #24]
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000e100 	.word	0xe000e100
 800553c:	e000ed00 	.word	0xe000ed00

08005540 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005540:	b480      	push	{r7}
 8005542:	b089      	sub	sp, #36	@ 0x24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f1c3 0307 	rsb	r3, r3, #7
 800555a:	2b04      	cmp	r3, #4
 800555c:	bf28      	it	cs
 800555e:	2304      	movcs	r3, #4
 8005560:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	3304      	adds	r3, #4
 8005566:	2b06      	cmp	r3, #6
 8005568:	d902      	bls.n	8005570 <NVIC_EncodePriority+0x30>
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	3b03      	subs	r3, #3
 800556e:	e000      	b.n	8005572 <NVIC_EncodePriority+0x32>
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005574:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	43da      	mvns	r2, r3
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	401a      	ands	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005588:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	fa01 f303 	lsl.w	r3, r1, r3
 8005592:	43d9      	mvns	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005598:	4313      	orrs	r3, r2
         );
}
 800559a:	4618      	mov	r0, r3
 800559c:	3724      	adds	r7, #36	@ 0x24
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055b8:	d301      	bcc.n	80055be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ba:	2301      	movs	r3, #1
 80055bc:	e00f      	b.n	80055de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055be:	4a0a      	ldr	r2, [pc, #40]	@ (80055e8 <SysTick_Config+0x40>)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055c6:	210f      	movs	r1, #15
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055cc:	f7ff ff8e 	bl	80054ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055d0:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <SysTick_Config+0x40>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055d6:	4b04      	ldr	r3, [pc, #16]	@ (80055e8 <SysTick_Config+0x40>)
 80055d8:	2207      	movs	r2, #7
 80055da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	e000e010 	.word	0xe000e010

080055ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff05 	bl	8005404 <__NVIC_SetPriorityGrouping>
}
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	4603      	mov	r3, r0
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005614:	f7ff ff1a 	bl	800544c <__NVIC_GetPriorityGrouping>
 8005618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	6978      	ldr	r0, [r7, #20]
 8005620:	f7ff ff8e 	bl	8005540 <NVIC_EncodePriority>
 8005624:	4602      	mov	r2, r0
 8005626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562a:	4611      	mov	r1, r2
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff ff5d 	bl	80054ec <__NVIC_SetPriority>
}
 8005632:	bf00      	nop
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	4603      	mov	r3, r0
 8005642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ff0d 	bl	8005468 <__NVIC_EnableIRQ>
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	4603      	mov	r3, r0
 800565e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ff1d 	bl	80054a4 <__NVIC_DisableIRQ>
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ff94 	bl	80055a8 <SysTick_Config>
 8005680:	4603      	mov	r3, r0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005698:	f7ff faa8 	bl	8004bec <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e099      	b.n	80057dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c8:	e00f      	b.n	80056ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056ca:	f7ff fa8f 	bl	8004bec <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d908      	bls.n	80056ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2203      	movs	r2, #3
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e078      	b.n	80057dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e8      	bne.n	80056ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4b38      	ldr	r3, [pc, #224]	@ (80057e4 <HAL_DMA_Init+0x158>)
 8005704:	4013      	ands	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005716:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4313      	orrs	r3, r2
 800573a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	2b04      	cmp	r3, #4
 8005742:	d107      	bne.n	8005754 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	4313      	orrs	r3, r2
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0307 	bic.w	r3, r3, #7
 800576a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	2b04      	cmp	r3, #4
 800577c:	d117      	bne.n	80057ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4313      	orrs	r3, r2
 8005786:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00e      	beq.n	80057ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fb5f 	bl	8005e54 <DMA_CheckFifoParam>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	@ 0x40
 80057a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80057aa:	2301      	movs	r3, #1
 80057ac:	e016      	b.n	80057dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fb16 	bl	8005de8 <DMA_CalcBaseAndBitshift>
 80057bc:	4603      	mov	r3, r0
 80057be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c4:	223f      	movs	r2, #63	@ 0x3f
 80057c6:	409a      	lsls	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	f010803f 	.word	0xf010803f

080057e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e050      	b.n	800589c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d101      	bne.n	800580a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	e048      	b.n	800589c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2200      	movs	r2, #0
 8005828:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2200      	movs	r2, #0
 8005838:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2200      	movs	r2, #0
 8005840:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2221      	movs	r2, #33	@ 0x21
 8005848:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 facc 	bl	8005de8 <DMA_CalcBaseAndBitshift>
 8005850:	4603      	mov	r3, r0
 8005852:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587c:	223f      	movs	r2, #63	@ 0x3f
 800587e:	409a      	lsls	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_DMA_Start_IT+0x26>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e040      	b.n	800594c <HAL_DMA_Start_IT+0xa8>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d12f      	bne.n	800593e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2202      	movs	r2, #2
 80058e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 fa4a 	bl	8005d8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058fc:	223f      	movs	r2, #63	@ 0x3f
 80058fe:	409a      	lsls	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0216 	orr.w	r2, r2, #22
 8005912:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0208 	orr.w	r2, r2, #8
 800592a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0201 	orr.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e005      	b.n	800594a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005946:	2302      	movs	r3, #2
 8005948:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005960:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005962:	f7ff f943 	bl	8004bec <HAL_GetTick>
 8005966:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d008      	beq.n	8005986 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2280      	movs	r2, #128	@ 0x80
 8005978:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e052      	b.n	8005a2c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0216 	bic.w	r2, r2, #22
 8005994:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <HAL_DMA_Abort+0x62>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d007      	beq.n	80059c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0208 	bic.w	r2, r2, #8
 80059c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d6:	e013      	b.n	8005a00 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d8:	f7ff f908 	bl	8004bec <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d90c      	bls.n	8005a00 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e015      	b.n	8005a2c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e4      	bne.n	80059d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a12:	223f      	movs	r2, #63	@ 0x3f
 8005a14:	409a      	lsls	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d004      	beq.n	8005a52 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	@ 0x80
 8005a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e00c      	b.n	8005a6c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2205      	movs	r2, #5
 8005a56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a80:	2300      	movs	r3, #0
 8005a82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a84:	4b8e      	ldr	r3, [pc, #568]	@ (8005cc0 <HAL_DMA_IRQHandler+0x248>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a8e      	ldr	r2, [pc, #568]	@ (8005cc4 <HAL_DMA_IRQHandler+0x24c>)
 8005a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8e:	0a9b      	lsrs	r3, r3, #10
 8005a90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01a      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d013      	beq.n	8005ae4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad0:	2208      	movs	r2, #8
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005adc:	f043 0201 	orr.w	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	2201      	movs	r2, #1
 8005aea:	409a      	lsls	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d012      	beq.n	8005b1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00b      	beq.n	8005b1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b06:	2201      	movs	r2, #1
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b12:	f043 0202 	orr.w	r2, r3, #2
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1e:	2204      	movs	r2, #4
 8005b20:	409a      	lsls	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d012      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b48:	f043 0204 	orr.w	r2, r3, #4
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b54:	2210      	movs	r2, #16
 8005b56:	409a      	lsls	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d043      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0308 	and.w	r3, r3, #8
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d03c      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b72:	2210      	movs	r2, #16
 8005b74:	409a      	lsls	r2, r3
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d018      	beq.n	8005bba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d108      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d024      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
 8005ba6:	e01f      	b.n	8005be8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d01b      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	4798      	blx	r3
 8005bb8:	e016      	b.n	8005be8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d107      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0208 	bic.w	r2, r2, #8
 8005bd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bec:	2220      	movs	r2, #32
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 808f 	beq.w	8005d18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 8087 	beq.w	8005d18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c0e:	2220      	movs	r2, #32
 8005c10:	409a      	lsls	r2, r3
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d136      	bne.n	8005c90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0216 	bic.w	r2, r2, #22
 8005c30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <HAL_DMA_IRQHandler+0x1da>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0208 	bic.w	r2, r2, #8
 8005c60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c66:	223f      	movs	r2, #63	@ 0x3f
 8005c68:	409a      	lsls	r2, r3
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d07e      	beq.n	8005d84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
        }
        return;
 8005c8e:	e079      	b.n	8005d84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d01d      	beq.n	8005cda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d031      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	4798      	blx	r3
 8005cbc:	e02c      	b.n	8005d18 <HAL_DMA_IRQHandler+0x2a0>
 8005cbe:	bf00      	nop
 8005cc0:	20000004 	.word	0x20000004
 8005cc4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d023      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4798      	blx	r3
 8005cd8:	e01e      	b.n	8005d18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10f      	bne.n	8005d08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0210 	bic.w	r2, r2, #16
 8005cf6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d032      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d022      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2205      	movs	r2, #5
 8005d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d307      	bcc.n	8005d60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f2      	bne.n	8005d44 <HAL_DMA_IRQHandler+0x2cc>
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005d60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	e000      	b.n	8005d86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d84:	bf00      	nop
    }
  }
}
 8005d86:	3718      	adds	r7, #24
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005da8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	d108      	bne.n	8005dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005dca:	e007      	b.n	8005ddc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	60da      	str	r2, [r3, #12]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	3b10      	subs	r3, #16
 8005df8:	4a14      	ldr	r2, [pc, #80]	@ (8005e4c <DMA_CalcBaseAndBitshift+0x64>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e02:	4a13      	ldr	r2, [pc, #76]	@ (8005e50 <DMA_CalcBaseAndBitshift+0x68>)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	d909      	bls.n	8005e2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	1d1a      	adds	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	659a      	str	r2, [r3, #88]	@ 0x58
 8005e28:	e007      	b.n	8005e3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005e32:	f023 0303 	bic.w	r3, r3, #3
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	aaaaaaab 	.word	0xaaaaaaab
 8005e50:	080132f8 	.word	0x080132f8

08005e54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d11f      	bne.n	8005eae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d856      	bhi.n	8005f22 <DMA_CheckFifoParam+0xce>
 8005e74:	a201      	add	r2, pc, #4	@ (adr r2, 8005e7c <DMA_CheckFifoParam+0x28>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005e9f 	.word	0x08005e9f
 8005e84:	08005e8d 	.word	0x08005e8d
 8005e88:	08005f23 	.word	0x08005f23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d046      	beq.n	8005f26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e9c:	e043      	b.n	8005f26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ea6:	d140      	bne.n	8005f2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eac:	e03d      	b.n	8005f2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eb6:	d121      	bne.n	8005efc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d837      	bhi.n	8005f2e <DMA_CheckFifoParam+0xda>
 8005ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <DMA_CheckFifoParam+0x70>)
 8005ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005edb 	.word	0x08005edb
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005eed 	.word	0x08005eed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed8:	e030      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ede:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d025      	beq.n	8005f32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eea:	e022      	b.n	8005f32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ef4:	d11f      	bne.n	8005f36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005efa:	e01c      	b.n	8005f36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d903      	bls.n	8005f0a <DMA_CheckFifoParam+0xb6>
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d003      	beq.n	8005f10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005f08:	e018      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0e:	e015      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e00b      	b.n	8005f3a <DMA_CheckFifoParam+0xe6>
      break;
 8005f22:	bf00      	nop
 8005f24:	e00a      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      break;
 8005f26:	bf00      	nop
 8005f28:	e008      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      break;
 8005f2a:	bf00      	nop
 8005f2c:	e006      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      break;
 8005f2e:	bf00      	nop
 8005f30:	e004      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      break;
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      break;   
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <DMA_CheckFifoParam+0xe8>
      break;
 8005f3a:	bf00      	nop
    }
  } 
  
  return status; 
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop

08005f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	@ 0x24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e165      	b.n	8006234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f68:	2201      	movs	r2, #1
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4013      	ands	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	f040 8154 	bne.w	800622e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d005      	beq.n	8005f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d130      	bne.n	8006000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2203      	movs	r2, #3
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	091b      	lsrs	r3, r3, #4
 8005fea:	f003 0201 	and.w	r2, r3, #1
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b03      	cmp	r3, #3
 800600a:	d017      	beq.n	800603c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	2203      	movs	r2, #3
 8006018:	fa02 f303 	lsl.w	r3, r2, r3
 800601c:	43db      	mvns	r3, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4013      	ands	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d123      	bne.n	8006090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	08da      	lsrs	r2, r3, #3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3208      	adds	r2, #8
 8006050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	220f      	movs	r2, #15
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	43db      	mvns	r3, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4013      	ands	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	4313      	orrs	r3, r2
 8006080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	08da      	lsrs	r2, r3, #3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3208      	adds	r2, #8
 800608a:	69b9      	ldr	r1, [r7, #24]
 800608c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	2203      	movs	r2, #3
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	4013      	ands	r3, r2
 80060a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f003 0203 	and.w	r2, r3, #3
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80ae 	beq.w	800622e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	4b5d      	ldr	r3, [pc, #372]	@ (800624c <HAL_GPIO_Init+0x300>)
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	4a5c      	ldr	r2, [pc, #368]	@ (800624c <HAL_GPIO_Init+0x300>)
 80060dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80060e2:	4b5a      	ldr	r3, [pc, #360]	@ (800624c <HAL_GPIO_Init+0x300>)
 80060e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ee:	4a58      	ldr	r2, [pc, #352]	@ (8006250 <HAL_GPIO_Init+0x304>)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	3302      	adds	r3, #2
 80060f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	220f      	movs	r2, #15
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a4f      	ldr	r2, [pc, #316]	@ (8006254 <HAL_GPIO_Init+0x308>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d025      	beq.n	8006166 <HAL_GPIO_Init+0x21a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a4e      	ldr	r2, [pc, #312]	@ (8006258 <HAL_GPIO_Init+0x30c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01f      	beq.n	8006162 <HAL_GPIO_Init+0x216>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a4d      	ldr	r2, [pc, #308]	@ (800625c <HAL_GPIO_Init+0x310>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d019      	beq.n	800615e <HAL_GPIO_Init+0x212>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a4c      	ldr	r2, [pc, #304]	@ (8006260 <HAL_GPIO_Init+0x314>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_GPIO_Init+0x20e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a4b      	ldr	r2, [pc, #300]	@ (8006264 <HAL_GPIO_Init+0x318>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00d      	beq.n	8006156 <HAL_GPIO_Init+0x20a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a4a      	ldr	r2, [pc, #296]	@ (8006268 <HAL_GPIO_Init+0x31c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <HAL_GPIO_Init+0x206>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a49      	ldr	r2, [pc, #292]	@ (800626c <HAL_GPIO_Init+0x320>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_GPIO_Init+0x202>
 800614a:	2306      	movs	r3, #6
 800614c:	e00c      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 800614e:	2307      	movs	r3, #7
 8006150:	e00a      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 8006152:	2305      	movs	r3, #5
 8006154:	e008      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 8006156:	2304      	movs	r3, #4
 8006158:	e006      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 800615a:	2303      	movs	r3, #3
 800615c:	e004      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 800615e:	2302      	movs	r3, #2
 8006160:	e002      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <HAL_GPIO_Init+0x21c>
 8006166:	2300      	movs	r3, #0
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	f002 0203 	and.w	r2, r2, #3
 800616e:	0092      	lsls	r2, r2, #2
 8006170:	4093      	lsls	r3, r2
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006178:	4935      	ldr	r1, [pc, #212]	@ (8006250 <HAL_GPIO_Init+0x304>)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	3302      	adds	r3, #2
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006186:	4b3a      	ldr	r3, [pc, #232]	@ (8006270 <HAL_GPIO_Init+0x324>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	43db      	mvns	r3, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4013      	ands	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061aa:	4a31      	ldr	r2, [pc, #196]	@ (8006270 <HAL_GPIO_Init+0x324>)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061b0:	4b2f      	ldr	r3, [pc, #188]	@ (8006270 <HAL_GPIO_Init+0x324>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	43db      	mvns	r3, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4013      	ands	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061d4:	4a26      	ldr	r2, [pc, #152]	@ (8006270 <HAL_GPIO_Init+0x324>)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061da:	4b25      	ldr	r3, [pc, #148]	@ (8006270 <HAL_GPIO_Init+0x324>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	43db      	mvns	r3, r3
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	4013      	ands	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80061fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <HAL_GPIO_Init+0x324>)
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006204:	4b1a      	ldr	r3, [pc, #104]	@ (8006270 <HAL_GPIO_Init+0x324>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	43db      	mvns	r3, r3
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4013      	ands	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006228:	4a11      	ldr	r2, [pc, #68]	@ (8006270 <HAL_GPIO_Init+0x324>)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3301      	adds	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b0f      	cmp	r3, #15
 8006238:	f67f ae96 	bls.w	8005f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	3724      	adds	r7, #36	@ 0x24
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800
 8006250:	40013800 	.word	0x40013800
 8006254:	40020000 	.word	0x40020000
 8006258:	40020400 	.word	0x40020400
 800625c:	40020800 	.word	0x40020800
 8006260:	40020c00 	.word	0x40020c00
 8006264:	40021000 	.word	0x40021000
 8006268:	40021400 	.word	0x40021400
 800626c:	40021800 	.word	0x40021800
 8006270:	40013c00 	.word	0x40013c00

08006274 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e0c7      	b.n	8006420 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006290:	2201      	movs	r2, #1
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800629a:	683a      	ldr	r2, [r7, #0]
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	f040 80b7 	bne.w	800641a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80062ac:	4a62      	ldr	r2, [pc, #392]	@ (8006438 <HAL_GPIO_DeInit+0x1c4>)
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	3302      	adds	r3, #2
 80062b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	220f      	movs	r2, #15
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	4013      	ands	r3, r2
 80062cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a5a      	ldr	r2, [pc, #360]	@ (800643c <HAL_GPIO_DeInit+0x1c8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d025      	beq.n	8006322 <HAL_GPIO_DeInit+0xae>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a59      	ldr	r2, [pc, #356]	@ (8006440 <HAL_GPIO_DeInit+0x1cc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01f      	beq.n	800631e <HAL_GPIO_DeInit+0xaa>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a58      	ldr	r2, [pc, #352]	@ (8006444 <HAL_GPIO_DeInit+0x1d0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d019      	beq.n	800631a <HAL_GPIO_DeInit+0xa6>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a57      	ldr	r2, [pc, #348]	@ (8006448 <HAL_GPIO_DeInit+0x1d4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d013      	beq.n	8006316 <HAL_GPIO_DeInit+0xa2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a56      	ldr	r2, [pc, #344]	@ (800644c <HAL_GPIO_DeInit+0x1d8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d00d      	beq.n	8006312 <HAL_GPIO_DeInit+0x9e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a55      	ldr	r2, [pc, #340]	@ (8006450 <HAL_GPIO_DeInit+0x1dc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d007      	beq.n	800630e <HAL_GPIO_DeInit+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a54      	ldr	r2, [pc, #336]	@ (8006454 <HAL_GPIO_DeInit+0x1e0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d101      	bne.n	800630a <HAL_GPIO_DeInit+0x96>
 8006306:	2306      	movs	r3, #6
 8006308:	e00c      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 800630a:	2307      	movs	r3, #7
 800630c:	e00a      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 800630e:	2305      	movs	r3, #5
 8006310:	e008      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 8006312:	2304      	movs	r3, #4
 8006314:	e006      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 8006316:	2303      	movs	r3, #3
 8006318:	e004      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 800631a:	2302      	movs	r3, #2
 800631c:	e002      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_GPIO_DeInit+0xb0>
 8006322:	2300      	movs	r3, #0
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	f002 0203 	and.w	r2, r2, #3
 800632a:	0092      	lsls	r2, r2, #2
 800632c:	4093      	lsls	r3, r2
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	d132      	bne.n	800639a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006334:	4b48      	ldr	r3, [pc, #288]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	43db      	mvns	r3, r3
 800633c:	4946      	ldr	r1, [pc, #280]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 800633e:	4013      	ands	r3, r2
 8006340:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006342:	4b45      	ldr	r3, [pc, #276]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	43db      	mvns	r3, r3
 800634a:	4943      	ldr	r1, [pc, #268]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 800634c:	4013      	ands	r3, r2
 800634e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006350:	4b41      	ldr	r3, [pc, #260]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 8006352:	68da      	ldr	r2, [r3, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	43db      	mvns	r3, r3
 8006358:	493f      	ldr	r1, [pc, #252]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 800635a:	4013      	ands	r3, r2
 800635c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800635e:	4b3e      	ldr	r3, [pc, #248]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	43db      	mvns	r3, r3
 8006366:	493c      	ldr	r1, [pc, #240]	@ (8006458 <HAL_GPIO_DeInit+0x1e4>)
 8006368:	4013      	ands	r3, r2
 800636a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	220f      	movs	r2, #15
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800637c:	4a2e      	ldr	r2, [pc, #184]	@ (8006438 <HAL_GPIO_DeInit+0x1c4>)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	089b      	lsrs	r3, r3, #2
 8006382:	3302      	adds	r3, #2
 8006384:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	43da      	mvns	r2, r3
 800638c:	482a      	ldr	r0, [pc, #168]	@ (8006438 <HAL_GPIO_DeInit+0x1c4>)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	089b      	lsrs	r3, r3, #2
 8006392:	400a      	ands	r2, r1
 8006394:	3302      	adds	r3, #2
 8006396:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	2103      	movs	r1, #3
 80063a4:	fa01 f303 	lsl.w	r3, r1, r3
 80063a8:	43db      	mvns	r3, r3
 80063aa:	401a      	ands	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	08da      	lsrs	r2, r3, #3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3208      	adds	r2, #8
 80063b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	220f      	movs	r2, #15
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43db      	mvns	r3, r3
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	08d2      	lsrs	r2, r2, #3
 80063d0:	4019      	ands	r1, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3208      	adds	r2, #8
 80063d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	2103      	movs	r1, #3
 80063e4:	fa01 f303 	lsl.w	r3, r1, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	401a      	ands	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	2101      	movs	r1, #1
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	401a      	ands	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	2103      	movs	r1, #3
 800640e:	fa01 f303 	lsl.w	r3, r1, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	401a      	ands	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3301      	adds	r3, #1
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	f67f af34 	bls.w	8006290 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40013800 	.word	0x40013800
 800643c:	40020000 	.word	0x40020000
 8006440:	40020400 	.word	0x40020400
 8006444:	40020800 	.word	0x40020800
 8006448:	40020c00 	.word	0x40020c00
 800644c:	40021000 	.word	0x40021000
 8006450:	40021400 	.word	0x40021400
 8006454:	40021800 	.word	0x40021800
 8006458:	40013c00 	.word	0x40013c00

0800645c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	807b      	strh	r3, [r7, #2]
 8006468:	4613      	mov	r3, r2
 800646a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800646c:	787b      	ldrb	r3, [r7, #1]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006472:	887a      	ldrh	r2, [r7, #2]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006478:	e003      	b.n	8006482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800647a:	887b      	ldrh	r3, [r7, #2]
 800647c:	041a      	lsls	r2, r3, #16
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	619a      	str	r2, [r3, #24]
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	4603      	mov	r3, r0
 8006498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800649a:	4b08      	ldr	r3, [pc, #32]	@ (80064bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064a6:	4a05      	ldr	r2, [pc, #20]	@ (80064bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064ac:	88fb      	ldrh	r3, [r7, #6]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fc f8ae 	bl	8002610 <HAL_GPIO_EXTI_Callback>
  }
}
 80064b4:	bf00      	nop
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40013c00 	.word	0x40013c00

080064c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e12b      	b.n	800672a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb fcc0 	bl	8001e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	@ 0x24
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006524:	f001 f99c 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 8006528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4a81      	ldr	r2, [pc, #516]	@ (8006734 <HAL_I2C_Init+0x274>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d807      	bhi.n	8006544 <HAL_I2C_Init+0x84>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a80      	ldr	r2, [pc, #512]	@ (8006738 <HAL_I2C_Init+0x278>)
 8006538:	4293      	cmp	r3, r2
 800653a:	bf94      	ite	ls
 800653c:	2301      	movls	r3, #1
 800653e:	2300      	movhi	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e006      	b.n	8006552 <HAL_I2C_Init+0x92>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4a7d      	ldr	r2, [pc, #500]	@ (800673c <HAL_I2C_Init+0x27c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	bf94      	ite	ls
 800654c:	2301      	movls	r3, #1
 800654e:	2300      	movhi	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e0e7      	b.n	800672a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a78      	ldr	r2, [pc, #480]	@ (8006740 <HAL_I2C_Init+0x280>)
 800655e:	fba2 2303 	umull	r2, r3, r2, r3
 8006562:	0c9b      	lsrs	r3, r3, #18
 8006564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	430a      	orrs	r2, r1
 8006578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	4a6a      	ldr	r2, [pc, #424]	@ (8006734 <HAL_I2C_Init+0x274>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d802      	bhi.n	8006594 <HAL_I2C_Init+0xd4>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	3301      	adds	r3, #1
 8006592:	e009      	b.n	80065a8 <HAL_I2C_Init+0xe8>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800659a:	fb02 f303 	mul.w	r3, r2, r3
 800659e:	4a69      	ldr	r2, [pc, #420]	@ (8006744 <HAL_I2C_Init+0x284>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	099b      	lsrs	r3, r3, #6
 80065a6:	3301      	adds	r3, #1
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	6812      	ldr	r2, [r2, #0]
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80065ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	495c      	ldr	r1, [pc, #368]	@ (8006734 <HAL_I2C_Init+0x274>)
 80065c4:	428b      	cmp	r3, r1
 80065c6:	d819      	bhi.n	80065fc <HAL_I2C_Init+0x13c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1e59      	subs	r1, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065d6:	1c59      	adds	r1, r3, #1
 80065d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065dc:	400b      	ands	r3, r1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_I2C_Init+0x138>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1e59      	subs	r1, r3, #1
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065f6:	e051      	b.n	800669c <HAL_I2C_Init+0x1dc>
 80065f8:	2304      	movs	r3, #4
 80065fa:	e04f      	b.n	800669c <HAL_I2C_Init+0x1dc>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d111      	bne.n	8006628 <HAL_I2C_Init+0x168>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	1e58      	subs	r0, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6859      	ldr	r1, [r3, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	440b      	add	r3, r1
 8006612:	fbb0 f3f3 	udiv	r3, r0, r3
 8006616:	3301      	adds	r3, #1
 8006618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf0c      	ite	eq
 8006620:	2301      	moveq	r3, #1
 8006622:	2300      	movne	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e012      	b.n	800664e <HAL_I2C_Init+0x18e>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	1e58      	subs	r0, r3, #1
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6859      	ldr	r1, [r3, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	0099      	lsls	r1, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	fbb0 f3f3 	udiv	r3, r0, r3
 800663e:	3301      	adds	r3, #1
 8006640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006644:	2b00      	cmp	r3, #0
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Init+0x196>
 8006652:	2301      	movs	r3, #1
 8006654:	e022      	b.n	800669c <HAL_I2C_Init+0x1dc>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10e      	bne.n	800667c <HAL_I2C_Init+0x1bc>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1e58      	subs	r0, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6859      	ldr	r1, [r3, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	440b      	add	r3, r1
 800666c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006670:	3301      	adds	r3, #1
 8006672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006676:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800667a:	e00f      	b.n	800669c <HAL_I2C_Init+0x1dc>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1e58      	subs	r0, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	0099      	lsls	r1, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006692:	3301      	adds	r3, #1
 8006694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006698:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	6809      	ldr	r1, [r1, #0]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	69da      	ldr	r2, [r3, #28]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80066ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	6911      	ldr	r1, [r2, #16]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68d2      	ldr	r2, [r2, #12]
 80066d6:	4311      	orrs	r1, r2
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	430b      	orrs	r3, r1
 80066de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	000186a0 	.word	0x000186a0
 8006738:	001e847f 	.word	0x001e847f
 800673c:	003d08ff 	.word	0x003d08ff
 8006740:	431bde83 	.word	0x431bde83
 8006744:	10624dd3 	.word	0x10624dd3

08006748 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e021      	b.n	800679e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2224      	movs	r2, #36	@ 0x24
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0201 	bic.w	r2, r2, #1
 8006770:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fb fc1a 	bl	8001fac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	4608      	mov	r0, r1
 80067b2:	4611      	mov	r1, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	817b      	strh	r3, [r7, #10]
 80067ba:	460b      	mov	r3, r1
 80067bc:	813b      	strh	r3, [r7, #8]
 80067be:	4613      	mov	r3, r2
 80067c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067c2:	f7fe fa13 	bl	8004bec <HAL_GetTick>
 80067c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	f040 80d9 	bne.w	8006988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	2319      	movs	r3, #25
 80067dc:	2201      	movs	r2, #1
 80067de:	496d      	ldr	r1, [pc, #436]	@ (8006994 <HAL_I2C_Mem_Write+0x1ec>)
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fc8b 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
 80067ee:	e0cc      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_I2C_Mem_Write+0x56>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e0c5      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b01      	cmp	r3, #1
 8006812:	d007      	beq.n	8006824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2221      	movs	r2, #33	@ 0x21
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2240      	movs	r2, #64	@ 0x40
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	4a4d      	ldr	r2, [pc, #308]	@ (8006998 <HAL_I2C_Mem_Write+0x1f0>)
 8006864:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006866:	88f8      	ldrh	r0, [r7, #6]
 8006868:	893a      	ldrh	r2, [r7, #8]
 800686a:	8979      	ldrh	r1, [r7, #10]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	4603      	mov	r3, r0
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fac2 	bl	8006e00 <I2C_RequestMemoryWrite>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d052      	beq.n	8006928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e081      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fd50 	bl	8007330 <I2C_WaitOnTXEFlagUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00d      	beq.n	80068b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800689a:	2b04      	cmp	r3, #4
 800689c:	d107      	bne.n	80068ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06b      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	781a      	ldrb	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_I2C_Mem_Write+0x180>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d017      	beq.n	8006928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1aa      	bne.n	8006886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fd43 	bl	80073c0 <I2C_WaitOnBTFFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00d      	beq.n	800695c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006944:	2b04      	cmp	r3, #4
 8006946:	d107      	bne.n	8006958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e016      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800696a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	e000      	b.n	800698a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006988:	2302      	movs	r3, #2
  }
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	00100002 	.word	0x00100002
 8006998:	ffff0000 	.word	0xffff0000

0800699c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08c      	sub	sp, #48	@ 0x30
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	4608      	mov	r0, r1
 80069a6:	4611      	mov	r1, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	4603      	mov	r3, r0
 80069ac:	817b      	strh	r3, [r7, #10]
 80069ae:	460b      	mov	r3, r1
 80069b0:	813b      	strh	r3, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069b6:	f7fe f919 	bl	8004bec <HAL_GetTick>
 80069ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	f040 8214 	bne.w	8006df2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	2319      	movs	r3, #25
 80069d0:	2201      	movs	r2, #1
 80069d2:	497b      	ldr	r1, [pc, #492]	@ (8006bc0 <HAL_I2C_Mem_Read+0x224>)
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 fb91 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80069e0:	2302      	movs	r3, #2
 80069e2:	e207      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_I2C_Mem_Read+0x56>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e200      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d007      	beq.n	8006a18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2222      	movs	r2, #34	@ 0x22
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2240      	movs	r2, #64	@ 0x40
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a5b      	ldr	r2, [pc, #364]	@ (8006bc4 <HAL_I2C_Mem_Read+0x228>)
 8006a58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a5a:	88f8      	ldrh	r0, [r7, #6]
 8006a5c:	893a      	ldrh	r2, [r7, #8]
 8006a5e:	8979      	ldrh	r1, [r7, #10]
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	4603      	mov	r3, r0
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa5e 	bl	8006f2c <I2C_RequestMemoryRead>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e1bc      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d113      	bne.n	8006aaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a82:	2300      	movs	r3, #0
 8006a84:	623b      	str	r3, [r7, #32]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aa6:	601a      	str	r2, [r3, #0]
 8006aa8:	e190      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d11b      	bne.n	8006aea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ac0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e170      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d11b      	bne.n	8006b2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	e150      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	695b      	ldr	r3, [r3, #20]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006b40:	e144      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	f200 80f1 	bhi.w	8006d2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d123      	bne.n	8006b9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b56:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 fc79 	bl	8007450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e145      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	691a      	ldr	r2, [r3, #16]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006b9a:	e117      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d14e      	bne.n	8006c42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006baa:	2200      	movs	r2, #0
 8006bac:	4906      	ldr	r1, [pc, #24]	@ (8006bc8 <HAL_I2C_Mem_Read+0x22c>)
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 faa4 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d008      	beq.n	8006bcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e11a      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
 8006bbe:	bf00      	nop
 8006bc0:	00100002 	.word	0x00100002
 8006bc4:	ffff0000 	.word	0xffff0000
 8006bc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	1c5a      	adds	r2, r3, #1
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c20:	1c5a      	adds	r2, r3, #1
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006c40:	e0c4      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	2200      	movs	r2, #0
 8006c4a:	496c      	ldr	r1, [pc, #432]	@ (8006dfc <HAL_I2C_Mem_Read+0x460>)
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 fa55 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0cb      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4955      	ldr	r1, [pc, #340]	@ (8006dfc <HAL_I2C_Mem_Read+0x460>)
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 fa27 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e09d      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691a      	ldr	r2, [r3, #16]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d2c:	e04e      	b.n	8006dcc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fb8c 	bl	8007450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e058      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	691a      	ldr	r2, [r3, #16]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d54:	1c5a      	adds	r2, r3, #1
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0304 	and.w	r3, r3, #4
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d124      	bne.n	8006dcc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d86:	2b03      	cmp	r3, #3
 8006d88:	d107      	bne.n	8006d9a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f47f aeb6 	bne.w	8006b42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e000      	b.n	8006df4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006df2:	2302      	movs	r3, #2
  }
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3728      	adds	r7, #40	@ 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	00010004 	.word	0x00010004

08006e00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	4608      	mov	r0, r1
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	4603      	mov	r3, r0
 8006e10:	817b      	strh	r3, [r7, #10]
 8006e12:	460b      	mov	r3, r1
 8006e14:	813b      	strh	r3, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f000 f960 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e50:	d103      	bne.n	8006e5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e05f      	b.n	8006f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e5e:	897b      	ldrh	r3, [r7, #10]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	492d      	ldr	r1, [pc, #180]	@ (8006f28 <I2C_RequestMemoryWrite+0x128>)
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f9bb 	bl	80071f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e04c      	b.n	8006f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e84:	2300      	movs	r3, #0
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e9c:	6a39      	ldr	r1, [r7, #32]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	f000 fa46 	bl	8007330 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00d      	beq.n	8006ec6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d107      	bne.n	8006ec2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e02b      	b.n	8006f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ec6:	88fb      	ldrh	r3, [r7, #6]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d105      	bne.n	8006ed8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ecc:	893b      	ldrh	r3, [r7, #8]
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	611a      	str	r2, [r3, #16]
 8006ed6:	e021      	b.n	8006f1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ed8:	893b      	ldrh	r3, [r7, #8]
 8006eda:	0a1b      	lsrs	r3, r3, #8
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee8:	6a39      	ldr	r1, [r7, #32]
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fa20 	bl	8007330 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d107      	bne.n	8006f0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e005      	b.n	8006f1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f12:	893b      	ldrh	r3, [r7, #8]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	00010002 	.word	0x00010002

08006f2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	817b      	strh	r3, [r7, #10]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	813b      	strh	r3, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f8c2 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8c:	d103      	bne.n	8006f96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e0aa      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f9a:	897b      	ldrh	r3, [r7, #10]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fac:	6a3a      	ldr	r2, [r7, #32]
 8006fae:	4952      	ldr	r1, [pc, #328]	@ (80070f8 <I2C_RequestMemoryRead+0x1cc>)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f91d 	bl	80071f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e097      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	617b      	str	r3, [r7, #20]
 8006fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd8:	6a39      	ldr	r1, [r7, #32]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f9a8 	bl	8007330 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00d      	beq.n	8007002 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d107      	bne.n	8006ffe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e076      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d105      	bne.n	8007014 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007008:	893b      	ldrh	r3, [r7, #8]
 800700a:	b2da      	uxtb	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	611a      	str	r2, [r3, #16]
 8007012:	e021      	b.n	8007058 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	0a1b      	lsrs	r3, r3, #8
 8007018:	b29b      	uxth	r3, r3
 800701a:	b2da      	uxtb	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007024:	6a39      	ldr	r1, [r7, #32]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 f982 	bl	8007330 <I2C_WaitOnTXEFlagUntilTimeout>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00d      	beq.n	800704e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007036:	2b04      	cmp	r3, #4
 8007038:	d107      	bne.n	800704a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e050      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800704e:	893b      	ldrh	r3, [r7, #8]
 8007050:	b2da      	uxtb	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705a:	6a39      	ldr	r1, [r7, #32]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f967 	bl	8007330 <I2C_WaitOnTXEFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706c:	2b04      	cmp	r3, #4
 800706e:	d107      	bne.n	8007080 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800707e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e035      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007092:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	2200      	movs	r2, #0
 800709c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 f82b 	bl	80070fc <I2C_WaitOnFlagUntilTimeout>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00d      	beq.n	80070c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070ba:	d103      	bne.n	80070c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e013      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80070c8:	897b      	ldrh	r3, [r7, #10]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f043 0301 	orr.w	r3, r3, #1
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	6a3a      	ldr	r2, [r7, #32]
 80070dc:	4906      	ldr	r1, [pc, #24]	@ (80070f8 <I2C_RequestMemoryRead+0x1cc>)
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f886 	bl	80071f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	00010002 	.word	0x00010002

080070fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	603b      	str	r3, [r7, #0]
 8007108:	4613      	mov	r3, r2
 800710a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800710c:	e048      	b.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007114:	d044      	beq.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007116:	f7fd fd69 	bl	8004bec <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d302      	bcc.n	800712c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d139      	bne.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	0c1b      	lsrs	r3, r3, #16
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b01      	cmp	r3, #1
 8007134:	d10d      	bne.n	8007152 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	43da      	mvns	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	bf0c      	ite	eq
 8007148:	2301      	moveq	r3, #1
 800714a:	2300      	movne	r3, #0
 800714c:	b2db      	uxtb	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	e00c      	b.n	800716c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	43da      	mvns	r2, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	4013      	ands	r3, r2
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	bf0c      	ite	eq
 8007164:	2301      	moveq	r3, #1
 8007166:	2300      	movne	r3, #0
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	429a      	cmp	r2, r3
 8007170:	d116      	bne.n	80071a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e023      	b.n	80071e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10d      	bne.n	80071c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	43da      	mvns	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	4013      	ands	r3, r2
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	bf0c      	ite	eq
 80071bc:	2301      	moveq	r3, #1
 80071be:	2300      	movne	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	461a      	mov	r2, r3
 80071c4:	e00c      	b.n	80071e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	43da      	mvns	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	4013      	ands	r3, r2
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bf0c      	ite	eq
 80071d8:	2301      	moveq	r3, #1
 80071da:	2300      	movne	r3, #0
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d093      	beq.n	800710e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071fe:	e071      	b.n	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800720a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800720e:	d123      	bne.n	8007258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800721e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007244:	f043 0204 	orr.w	r2, r3, #4
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e067      	b.n	8007328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800725e:	d041      	beq.n	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007260:	f7fd fcc4 	bl	8004bec <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d136      	bne.n	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	0c1b      	lsrs	r3, r3, #16
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10c      	bne.n	800729a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	43da      	mvns	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	bf14      	ite	ne
 8007292:	2301      	movne	r3, #1
 8007294:	2300      	moveq	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	e00b      	b.n	80072b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	43da      	mvns	r2, r3
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4013      	ands	r3, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bf14      	ite	ne
 80072ac:	2301      	movne	r3, #1
 80072ae:	2300      	moveq	r3, #0
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d016      	beq.n	80072e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2220      	movs	r2, #32
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d0:	f043 0220 	orr.w	r2, r3, #32
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e021      	b.n	8007328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d10c      	bne.n	8007308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	43da      	mvns	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4013      	ands	r3, r2
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	bf14      	ite	ne
 8007300:	2301      	movne	r3, #1
 8007302:	2300      	moveq	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	e00b      	b.n	8007320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	43da      	mvns	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4013      	ands	r3, r2
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	bf14      	ite	ne
 800731a:	2301      	movne	r3, #1
 800731c:	2300      	moveq	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	f47f af6d 	bne.w	8007200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800733c:	e034      	b.n	80073a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f8e3 	bl	800750a <I2C_IsAcknowledgeFailed>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e034      	b.n	80073b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007354:	d028      	beq.n	80073a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007356:	f7fd fc49 	bl	8004bec <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	d302      	bcc.n	800736c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d11d      	bne.n	80073a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007376:	2b80      	cmp	r3, #128	@ 0x80
 8007378:	d016      	beq.n	80073a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007394:	f043 0220 	orr.w	r2, r3, #32
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	e007      	b.n	80073b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073b2:	2b80      	cmp	r3, #128	@ 0x80
 80073b4:	d1c3      	bne.n	800733e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073cc:	e034      	b.n	8007438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f89b 	bl	800750a <I2C_IsAcknowledgeFailed>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e034      	b.n	8007448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073e4:	d028      	beq.n	8007438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e6:	f7fd fc01 	bl	8004bec <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d302      	bcc.n	80073fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d11d      	bne.n	8007438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0304 	and.w	r3, r3, #4
 8007406:	2b04      	cmp	r3, #4
 8007408:	d016      	beq.n	8007438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007424:	f043 0220 	orr.w	r2, r3, #32
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e007      	b.n	8007448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	f003 0304 	and.w	r3, r3, #4
 8007442:	2b04      	cmp	r3, #4
 8007444:	d1c3      	bne.n	80073ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800745c:	e049      	b.n	80074f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b10      	cmp	r3, #16
 800746a:	d119      	bne.n	80074a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0210 	mvn.w	r2, #16
 8007474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e030      	b.n	8007502 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a0:	f7fd fba4 	bl	8004bec <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d302      	bcc.n	80074b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d11d      	bne.n	80074f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c0:	2b40      	cmp	r3, #64	@ 0x40
 80074c2:	d016      	beq.n	80074f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074de:	f043 0220 	orr.w	r2, r3, #32
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e007      	b.n	8007502 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	695b      	ldr	r3, [r3, #20]
 80074f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fc:	2b40      	cmp	r3, #64	@ 0x40
 80074fe:	d1ae      	bne.n	800745e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800751c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007520:	d11b      	bne.n	800755a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800752a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007546:	f043 0204 	orr.w	r2, r3, #4
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800756e:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <HAL_PWR_EnableBkUpAccess+0x20>)
 8007570:	2201      	movs	r2, #1
 8007572:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007574:	4b05      	ldr	r3, [pc, #20]	@ (800758c <HAL_PWR_EnableBkUpAccess+0x24>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800757a:	687b      	ldr	r3, [r7, #4]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	420e0020 	.word	0x420e0020
 800758c:	40007000 	.word	0x40007000

08007590 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800759a:	4b0e      	ldr	r3, [pc, #56]	@ (80075d4 <HAL_PWREx_EnableBkUpReg+0x44>)
 800759c:	2201      	movs	r2, #1
 800759e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075a0:	f7fd fb24 	bl	8004bec <HAL_GetTick>
 80075a4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80075a6:	e009      	b.n	80075bc <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80075a8:	f7fd fb20 	bl	8004bec <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80075b6:	d901      	bls.n	80075bc <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e006      	b.n	80075ca <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80075bc:	4b06      	ldr	r3, [pc, #24]	@ (80075d8 <HAL_PWREx_EnableBkUpReg+0x48>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f003 0308 	and.w	r3, r3, #8
 80075c4:	2b08      	cmp	r3, #8
 80075c6:	d1ef      	bne.n	80075a8 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	420e00a4 	.word	0x420e00a4
 80075d8:	40007000 	.word	0x40007000

080075dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80075e6:	2300      	movs	r3, #0
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	4b20      	ldr	r3, [pc, #128]	@ (800766c <HAL_PWREx_EnableOverDrive+0x90>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ee:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <HAL_PWREx_EnableOverDrive+0x90>)
 80075f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075f6:	4b1d      	ldr	r3, [pc, #116]	@ (800766c <HAL_PWREx_EnableOverDrive+0x90>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007602:	4b1b      	ldr	r3, [pc, #108]	@ (8007670 <HAL_PWREx_EnableOverDrive+0x94>)
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007608:	f7fd faf0 	bl	8004bec <HAL_GetTick>
 800760c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800760e:	e009      	b.n	8007624 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007610:	f7fd faec 	bl	8004bec <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800761e:	d901      	bls.n	8007624 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e01f      	b.n	8007664 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007624:	4b13      	ldr	r3, [pc, #76]	@ (8007674 <HAL_PWREx_EnableOverDrive+0x98>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d1ee      	bne.n	8007610 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007632:	4b11      	ldr	r3, [pc, #68]	@ (8007678 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007638:	f7fd fad8 	bl	8004bec <HAL_GetTick>
 800763c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800763e:	e009      	b.n	8007654 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007640:	f7fd fad4 	bl	8004bec <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800764e:	d901      	bls.n	8007654 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e007      	b.n	8007664 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007654:	4b07      	ldr	r3, [pc, #28]	@ (8007674 <HAL_PWREx_EnableOverDrive+0x98>)
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007660:	d1ee      	bne.n	8007640 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40023800 	.word	0x40023800
 8007670:	420e0040 	.word	0x420e0040
 8007674:	40007000 	.word	0x40007000
 8007678:	420e0044 	.word	0x420e0044

0800767c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e0cc      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007690:	4b68      	ldr	r3, [pc, #416]	@ (8007834 <HAL_RCC_ClockConfig+0x1b8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d90c      	bls.n	80076b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800769e:	4b65      	ldr	r3, [pc, #404]	@ (8007834 <HAL_RCC_ClockConfig+0x1b8>)
 80076a0:	683a      	ldr	r2, [r7, #0]
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a6:	4b63      	ldr	r3, [pc, #396]	@ (8007834 <HAL_RCC_ClockConfig+0x1b8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d001      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0b8      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d020      	beq.n	8007706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076d0:	4b59      	ldr	r3, [pc, #356]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	4a58      	ldr	r2, [pc, #352]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80076d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80076e8:	4b53      	ldr	r3, [pc, #332]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	4a52      	ldr	r2, [pc, #328]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80076f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076f4:	4b50      	ldr	r3, [pc, #320]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	494d      	ldr	r1, [pc, #308]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	4313      	orrs	r3, r2
 8007704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d044      	beq.n	800779c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d107      	bne.n	800772a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800771a:	4b47      	ldr	r3, [pc, #284]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d119      	bne.n	800775a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e07f      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d003      	beq.n	800773a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007736:	2b03      	cmp	r3, #3
 8007738:	d107      	bne.n	800774a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800773a:	4b3f      	ldr	r3, [pc, #252]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e06f      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800774a:	4b3b      	ldr	r3, [pc, #236]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e067      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800775a:	4b37      	ldr	r3, [pc, #220]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f023 0203 	bic.w	r2, r3, #3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	4934      	ldr	r1, [pc, #208]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 8007768:	4313      	orrs	r3, r2
 800776a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800776c:	f7fd fa3e 	bl	8004bec <HAL_GetTick>
 8007770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007772:	e00a      	b.n	800778a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007774:	f7fd fa3a 	bl	8004bec <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007782:	4293      	cmp	r3, r2
 8007784:	d901      	bls.n	800778a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e04f      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800778a:	4b2b      	ldr	r3, [pc, #172]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 020c 	and.w	r2, r3, #12
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	429a      	cmp	r2, r3
 800779a:	d1eb      	bne.n	8007774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800779c:	4b25      	ldr	r3, [pc, #148]	@ (8007834 <HAL_RCC_ClockConfig+0x1b8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d20c      	bcs.n	80077c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077aa:	4b22      	ldr	r3, [pc, #136]	@ (8007834 <HAL_RCC_ClockConfig+0x1b8>)
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077b2:	4b20      	ldr	r3, [pc, #128]	@ (8007834 <HAL_RCC_ClockConfig+0x1b8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d001      	beq.n	80077c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e032      	b.n	800782a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d008      	beq.n	80077e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077d0:	4b19      	ldr	r3, [pc, #100]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	4916      	ldr	r1, [pc, #88]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077ee:	4b12      	ldr	r3, [pc, #72]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	490e      	ldr	r1, [pc, #56]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007802:	f000 fb7f 	bl	8007f04 <HAL_RCC_GetSysClockFreq>
 8007806:	4602      	mov	r2, r0
 8007808:	4b0b      	ldr	r3, [pc, #44]	@ (8007838 <HAL_RCC_ClockConfig+0x1bc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	490a      	ldr	r1, [pc, #40]	@ (800783c <HAL_RCC_ClockConfig+0x1c0>)
 8007814:	5ccb      	ldrb	r3, [r1, r3]
 8007816:	fa22 f303 	lsr.w	r3, r2, r3
 800781a:	4a09      	ldr	r2, [pc, #36]	@ (8007840 <HAL_RCC_ClockConfig+0x1c4>)
 800781c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800781e:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <HAL_RCC_ClockConfig+0x1c8>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f7fd f99e 	bl	8004b64 <HAL_InitTick>

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	40023c00 	.word	0x40023c00
 8007838:	40023800 	.word	0x40023800
 800783c:	080132e0 	.word	0x080132e0
 8007840:	20000004 	.word	0x20000004
 8007844:	20000020 	.word	0x20000020

08007848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800784c:	4b03      	ldr	r3, [pc, #12]	@ (800785c <HAL_RCC_GetHCLKFreq+0x14>)
 800784e:	681b      	ldr	r3, [r3, #0]
}
 8007850:	4618      	mov	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000004 	.word	0x20000004

08007860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007864:	f7ff fff0 	bl	8007848 <HAL_RCC_GetHCLKFreq>
 8007868:	4602      	mov	r2, r0
 800786a:	4b05      	ldr	r3, [pc, #20]	@ (8007880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	0a9b      	lsrs	r3, r3, #10
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	4903      	ldr	r1, [pc, #12]	@ (8007884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007876:	5ccb      	ldrb	r3, [r1, r3]
 8007878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800787c:	4618      	mov	r0, r3
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40023800 	.word	0x40023800
 8007884:	080132f0 	.word	0x080132f0

08007888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800788c:	f7ff ffdc 	bl	8007848 <HAL_RCC_GetHCLKFreq>
 8007890:	4602      	mov	r2, r0
 8007892:	4b05      	ldr	r3, [pc, #20]	@ (80078a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	0b5b      	lsrs	r3, r3, #13
 8007898:	f003 0307 	and.w	r3, r3, #7
 800789c:	4903      	ldr	r1, [pc, #12]	@ (80078ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800789e:	5ccb      	ldrb	r3, [r1, r3]
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	40023800 	.word	0x40023800
 80078ac:	080132f0 	.word	0x080132f0

080078b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08c      	sub	sp, #48	@ 0x30
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078b8:	2300      	movs	r3, #0
 80078ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d010      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80078e8:	4b6f      	ldr	r3, [pc, #444]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ee:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f6:	496c      	ldr	r1, [pc, #432]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007906:	2301      	movs	r3, #1
 8007908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d010      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007916:	4b64      	ldr	r3, [pc, #400]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800791c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007924:	4960      	ldr	r1, [pc, #384]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007934:	2301      	movs	r3, #1
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f003 0304 	and.w	r3, r3, #4
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007944:	4b58      	ldr	r3, [pc, #352]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800794a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007952:	4955      	ldr	r1, [pc, #340]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007962:	d101      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007964:	2301      	movs	r3, #1
 8007966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	2b00      	cmp	r3, #0
 800796e:	d101      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007970:	2301      	movs	r3, #1
 8007972:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d017      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007980:	4b49      	ldr	r3, [pc, #292]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800798e:	4946      	ldr	r1, [pc, #280]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007990:	4313      	orrs	r3, r2
 8007992:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800799a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800799e:	d101      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80079a0:	2301      	movs	r3, #1
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80079ac:	2301      	movs	r3, #1
 80079ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 808a 	beq.w	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	4b39      	ldr	r3, [pc, #228]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c6:	4a38      	ldr	r2, [pc, #224]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80079c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80079ce:	4b36      	ldr	r3, [pc, #216]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80079da:	4b34      	ldr	r3, [pc, #208]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a33      	ldr	r2, [pc, #204]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80079e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079e6:	f7fd f901 	bl	8004bec <HAL_GetTick>
 80079ea:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80079ec:	e008      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079ee:	f7fd f8fd 	bl	8004bec <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d901      	bls.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80079fc:	2303      	movs	r3, #3
 80079fe:	e278      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007a00:	4b2a      	ldr	r3, [pc, #168]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0f0      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a0c:	4b26      	ldr	r3, [pc, #152]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a14:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d02f      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a24:	6a3a      	ldr	r2, [r7, #32]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d028      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a32:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a34:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007a36:	2201      	movs	r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007a40:	4a19      	ldr	r2, [pc, #100]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a42:	6a3b      	ldr	r3, [r7, #32]
 8007a44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a46:	4b18      	ldr	r3, [pc, #96]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d114      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007a52:	f7fd f8cb 	bl	8004bec <HAL_GetTick>
 8007a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a58:	e00a      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5a:	f7fd f8c7 	bl	8004bec <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e240      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a70:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0ee      	beq.n	8007a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a88:	d114      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007a8a:	4b07      	ldr	r3, [pc, #28]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a9e:	4902      	ldr	r1, [pc, #8]	@ (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	608b      	str	r3, [r1, #8]
 8007aa4:	e00c      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007aa6:	bf00      	nop
 8007aa8:	40023800 	.word	0x40023800
 8007aac:	40007000 	.word	0x40007000
 8007ab0:	42470e40 	.word	0x42470e40
 8007ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a49      	ldr	r2, [pc, #292]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007aba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007abe:	6093      	str	r3, [r2, #8]
 8007ac0:	4b47      	ldr	r3, [pc, #284]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ac2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007acc:	4944      	ldr	r1, [pc, #272]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0310 	and.w	r3, r3, #16
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007ae6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007af4:	4b3a      	ldr	r3, [pc, #232]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007afa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b02:	4937      	ldr	r1, [pc, #220]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b16:	4b32      	ldr	r3, [pc, #200]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b1c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b24:	492e      	ldr	r1, [pc, #184]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d011      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007b38:	4b29      	ldr	r3, [pc, #164]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b3e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b46:	4926      	ldr	r1, [pc, #152]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b56:	d101      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00a      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007b68:	4b1d      	ldr	r3, [pc, #116]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b6e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	491a      	ldr	r1, [pc, #104]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d011      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b90:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b98:	4911      	ldr	r1, [pc, #68]	@ (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ba8:	d101      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007baa:	2301      	movs	r3, #1
 8007bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d005      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bbc:	f040 80ff 	bne.w	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007bc0:	4b09      	ldr	r3, [pc, #36]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc6:	f7fd f811 	bl	8004bec <HAL_GetTick>
 8007bca:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bcc:	e00e      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007bce:	f7fd f80d 	bl	8004bec <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d907      	bls.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e188      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007be0:	40023800 	.word	0x40023800
 8007be4:	424711e0 	.word	0x424711e0
 8007be8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bec:	4b7e      	ldr	r3, [pc, #504]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1ea      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d028      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d124      	bne.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007c20:	4b71      	ldr	r3, [pc, #452]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c26:	0c1b      	lsrs	r3, r3, #16
 8007c28:	f003 0303 	and.w	r3, r3, #3
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	005b      	lsls	r3, r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c32:	4b6d      	ldr	r3, [pc, #436]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	f003 030f 	and.w	r3, r3, #15
 8007c3e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	019b      	lsls	r3, r3, #6
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	085b      	lsrs	r3, r3, #1
 8007c50:	3b01      	subs	r3, #1
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	431a      	orrs	r2, r3
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	061b      	lsls	r3, r3, #24
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	071b      	lsls	r3, r3, #28
 8007c62:	4961      	ldr	r1, [pc, #388]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d004      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c7e:	d00a      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d035      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c94:	d130      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007c96:	4b54      	ldr	r3, [pc, #336]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	f003 0303 	and.w	r3, r3, #3
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cae:	0f1b      	lsrs	r3, r3, #28
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	019b      	lsls	r3, r3, #6
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	085b      	lsrs	r3, r3, #1
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	041b      	lsls	r3, r3, #16
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	691b      	ldr	r3, [r3, #16]
 8007cd0:	061b      	lsls	r3, r3, #24
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	071b      	lsls	r3, r3, #28
 8007cd8:	4943      	ldr	r1, [pc, #268]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ce0:	4b41      	ldr	r3, [pc, #260]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ce6:	f023 021f 	bic.w	r2, r3, #31
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	493d      	ldr	r1, [pc, #244]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d029      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d0c:	d124      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007d0e:	4b36      	ldr	r3, [pc, #216]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d20:	4b31      	ldr	r3, [pc, #196]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d26:	0f1b      	lsrs	r3, r3, #28
 8007d28:	f003 0307 	and.w	r3, r3, #7
 8007d2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	019b      	lsls	r3, r3, #6
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	3b01      	subs	r3, #1
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	431a      	orrs	r2, r3
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	071b      	lsls	r3, r3, #28
 8007d50:	4925      	ldr	r1, [pc, #148]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d016      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	019b      	lsls	r3, r3, #6
 8007d6e:	431a      	orrs	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	085b      	lsrs	r3, r3, #1
 8007d76:	3b01      	subs	r3, #1
 8007d78:	041b      	lsls	r3, r3, #16
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	061b      	lsls	r3, r3, #24
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	071b      	lsls	r3, r3, #28
 8007d8a:	4917      	ldr	r1, [pc, #92]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d92:	4b16      	ldr	r3, [pc, #88]	@ (8007dec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d98:	f7fc ff28 	bl	8004bec <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007da0:	f7fc ff24 	bl	8004bec <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e09f      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007db2:	4b0d      	ldr	r3, [pc, #52]	@ (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	f040 8095 	bne.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dcc:	f7fc ff0e 	bl	8004bec <HAL_GetTick>
 8007dd0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dd2:	e00f      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dd4:	f7fc ff0a 	bl	8004bec <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d908      	bls.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e085      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007de6:	bf00      	nop
 8007de8:	40023800 	.word	0x40023800
 8007dec:	42470068 	.word	0x42470068
 8007df0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007df4:	4b41      	ldr	r3, [pc, #260]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e00:	d0e8      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0304 	and.w	r3, r3, #4
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d009      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d02b      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d127      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007e2a:	4b34      	ldr	r3, [pc, #208]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e30:	0c1b      	lsrs	r3, r3, #16
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	3301      	adds	r3, #1
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	431a      	orrs	r2, r3
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	041b      	lsls	r3, r3, #16
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e56:	061b      	lsls	r3, r3, #24
 8007e58:	4928      	ldr	r1, [pc, #160]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e60:	4b26      	ldr	r3, [pc, #152]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e66:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	021b      	lsls	r3, r3, #8
 8007e72:	4922      	ldr	r1, [pc, #136]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d01d      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e8e:	d118      	bne.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e90:	4b1a      	ldr	r3, [pc, #104]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e96:	0e1b      	lsrs	r3, r3, #24
 8007e98:	f003 030f 	and.w	r3, r3, #15
 8007e9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	019b      	lsls	r3, r3, #6
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	085b      	lsrs	r3, r3, #1
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	061b      	lsls	r3, r3, #24
 8007eba:	4910      	ldr	r1, [pc, #64]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ec8:	f7fc fe90 	bl	8004bec <HAL_GetTick>
 8007ecc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ed0:	f7fc fe8c 	bl	8004bec <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e007      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ee2:	4b06      	ldr	r3, [pc, #24]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eee:	d1ef      	bne.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3730      	adds	r7, #48	@ 0x30
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	40023800 	.word	0x40023800
 8007f00:	42470070 	.word	0x42470070

08007f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f08:	b0ae      	sub	sp, #184	@ 0xb8
 8007f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f2a:	4bcb      	ldr	r3, [pc, #812]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 030c 	and.w	r3, r3, #12
 8007f32:	2b0c      	cmp	r3, #12
 8007f34:	f200 8206 	bhi.w	8008344 <HAL_RCC_GetSysClockFreq+0x440>
 8007f38:	a201      	add	r2, pc, #4	@ (adr r2, 8007f40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8007f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3e:	bf00      	nop
 8007f40:	08007f75 	.word	0x08007f75
 8007f44:	08008345 	.word	0x08008345
 8007f48:	08008345 	.word	0x08008345
 8007f4c:	08008345 	.word	0x08008345
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08008345 	.word	0x08008345
 8007f58:	08008345 	.word	0x08008345
 8007f5c:	08008345 	.word	0x08008345
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	08008345 	.word	0x08008345
 8007f68:	08008345 	.word	0x08008345
 8007f6c:	08008345 	.word	0x08008345
 8007f70:	08008175 	.word	0x08008175
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f74:	4bb9      	ldr	r3, [pc, #740]	@ (800825c <HAL_RCC_GetSysClockFreq+0x358>)
 8007f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f7a:	e1e7      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f7c:	4bb8      	ldr	r3, [pc, #736]	@ (8008260 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8007f82:	e1e3      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f84:	4bb4      	ldr	r3, [pc, #720]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f90:	4bb1      	ldr	r3, [pc, #708]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d071      	beq.n	8008080 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f9c:	4bae      	ldr	r3, [pc, #696]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	099b      	lsrs	r3, r3, #6
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	f04f 0000 	mov.w	r0, #0
 8007fca:	f04f 0100 	mov.w	r1, #0
 8007fce:	0159      	lsls	r1, r3, #5
 8007fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fd4:	0150      	lsls	r0, r2, #5
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4621      	mov	r1, r4
 8007fdc:	1a51      	subs	r1, r2, r1
 8007fde:	6439      	str	r1, [r7, #64]	@ 0x40
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	018b      	lsls	r3, r1, #6
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007ffe:	4641      	mov	r1, r8
 8008000:	018a      	lsls	r2, r1, #6
 8008002:	4641      	mov	r1, r8
 8008004:	1a51      	subs	r1, r2, r1
 8008006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008008:	4649      	mov	r1, r9
 800800a:	eb63 0301 	sbc.w	r3, r3, r1
 800800e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800801c:	4649      	mov	r1, r9
 800801e:	00cb      	lsls	r3, r1, #3
 8008020:	4641      	mov	r1, r8
 8008022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008026:	4641      	mov	r1, r8
 8008028:	00ca      	lsls	r2, r1, #3
 800802a:	4610      	mov	r0, r2
 800802c:	4619      	mov	r1, r3
 800802e:	4603      	mov	r3, r0
 8008030:	4622      	mov	r2, r4
 8008032:	189b      	adds	r3, r3, r2
 8008034:	633b      	str	r3, [r7, #48]	@ 0x30
 8008036:	462b      	mov	r3, r5
 8008038:	460a      	mov	r2, r1
 800803a:	eb42 0303 	adc.w	r3, r2, r3
 800803e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800804c:	4629      	mov	r1, r5
 800804e:	024b      	lsls	r3, r1, #9
 8008050:	4621      	mov	r1, r4
 8008052:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008056:	4621      	mov	r1, r4
 8008058:	024a      	lsls	r2, r1, #9
 800805a:	4610      	mov	r0, r2
 800805c:	4619      	mov	r1, r3
 800805e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008062:	2200      	movs	r2, #0
 8008064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800806c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008070:	f7f8 ff88 	bl	8000f84 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4613      	mov	r3, r2
 800807a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800807e:	e067      	b.n	8008150 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008080:	4b75      	ldr	r3, [pc, #468]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	099b      	lsrs	r3, r3, #6
 8008086:	2200      	movs	r2, #0
 8008088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800808c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008098:	67bb      	str	r3, [r7, #120]	@ 0x78
 800809a:	2300      	movs	r3, #0
 800809c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800809e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80080a2:	4622      	mov	r2, r4
 80080a4:	462b      	mov	r3, r5
 80080a6:	f04f 0000 	mov.w	r0, #0
 80080aa:	f04f 0100 	mov.w	r1, #0
 80080ae:	0159      	lsls	r1, r3, #5
 80080b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080b4:	0150      	lsls	r0, r2, #5
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4621      	mov	r1, r4
 80080bc:	1a51      	subs	r1, r2, r1
 80080be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080c0:	4629      	mov	r1, r5
 80080c2:	eb63 0301 	sbc.w	r3, r3, r1
 80080c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080c8:	f04f 0200 	mov.w	r2, #0
 80080cc:	f04f 0300 	mov.w	r3, #0
 80080d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80080d4:	4649      	mov	r1, r9
 80080d6:	018b      	lsls	r3, r1, #6
 80080d8:	4641      	mov	r1, r8
 80080da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080de:	4641      	mov	r1, r8
 80080e0:	018a      	lsls	r2, r1, #6
 80080e2:	4641      	mov	r1, r8
 80080e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80080e8:	4649      	mov	r1, r9
 80080ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	f04f 0300 	mov.w	r3, #0
 80080f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008102:	4692      	mov	sl, r2
 8008104:	469b      	mov	fp, r3
 8008106:	4623      	mov	r3, r4
 8008108:	eb1a 0303 	adds.w	r3, sl, r3
 800810c:	623b      	str	r3, [r7, #32]
 800810e:	462b      	mov	r3, r5
 8008110:	eb4b 0303 	adc.w	r3, fp, r3
 8008114:	627b      	str	r3, [r7, #36]	@ 0x24
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008122:	4629      	mov	r1, r5
 8008124:	028b      	lsls	r3, r1, #10
 8008126:	4621      	mov	r1, r4
 8008128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800812c:	4621      	mov	r1, r4
 800812e:	028a      	lsls	r2, r1, #10
 8008130:	4610      	mov	r0, r2
 8008132:	4619      	mov	r1, r3
 8008134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008138:	2200      	movs	r2, #0
 800813a:	673b      	str	r3, [r7, #112]	@ 0x70
 800813c:	677a      	str	r2, [r7, #116]	@ 0x74
 800813e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008142:	f7f8 ff1f 	bl	8000f84 <__aeabi_uldivmod>
 8008146:	4602      	mov	r2, r0
 8008148:	460b      	mov	r3, r1
 800814a:	4613      	mov	r3, r2
 800814c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008150:	4b41      	ldr	r3, [pc, #260]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	0c1b      	lsrs	r3, r3, #16
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	3301      	adds	r3, #1
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800816a:	fbb2 f3f3 	udiv	r3, r2, r3
 800816e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008172:	e0eb      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008174:	4b38      	ldr	r3, [pc, #224]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800817c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008180:	4b35      	ldr	r3, [pc, #212]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d06b      	beq.n	8008264 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800818c:	4b32      	ldr	r3, [pc, #200]	@ (8008258 <HAL_RCC_GetSysClockFreq+0x354>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	099b      	lsrs	r3, r3, #6
 8008192:	2200      	movs	r2, #0
 8008194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800819a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819e:	663b      	str	r3, [r7, #96]	@ 0x60
 80081a0:	2300      	movs	r3, #0
 80081a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80081a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80081a8:	4622      	mov	r2, r4
 80081aa:	462b      	mov	r3, r5
 80081ac:	f04f 0000 	mov.w	r0, #0
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	0159      	lsls	r1, r3, #5
 80081b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081ba:	0150      	lsls	r0, r2, #5
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	4621      	mov	r1, r4
 80081c2:	1a51      	subs	r1, r2, r1
 80081c4:	61b9      	str	r1, [r7, #24]
 80081c6:	4629      	mov	r1, r5
 80081c8:	eb63 0301 	sbc.w	r3, r3, r1
 80081cc:	61fb      	str	r3, [r7, #28]
 80081ce:	f04f 0200 	mov.w	r2, #0
 80081d2:	f04f 0300 	mov.w	r3, #0
 80081d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80081da:	4659      	mov	r1, fp
 80081dc:	018b      	lsls	r3, r1, #6
 80081de:	4651      	mov	r1, sl
 80081e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081e4:	4651      	mov	r1, sl
 80081e6:	018a      	lsls	r2, r1, #6
 80081e8:	4651      	mov	r1, sl
 80081ea:	ebb2 0801 	subs.w	r8, r2, r1
 80081ee:	4659      	mov	r1, fp
 80081f0:	eb63 0901 	sbc.w	r9, r3, r1
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008204:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008208:	4690      	mov	r8, r2
 800820a:	4699      	mov	r9, r3
 800820c:	4623      	mov	r3, r4
 800820e:	eb18 0303 	adds.w	r3, r8, r3
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	462b      	mov	r3, r5
 8008216:	eb49 0303 	adc.w	r3, r9, r3
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008228:	4629      	mov	r1, r5
 800822a:	024b      	lsls	r3, r1, #9
 800822c:	4621      	mov	r1, r4
 800822e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008232:	4621      	mov	r1, r4
 8008234:	024a      	lsls	r2, r1, #9
 8008236:	4610      	mov	r0, r2
 8008238:	4619      	mov	r1, r3
 800823a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800823e:	2200      	movs	r2, #0
 8008240:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008242:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008248:	f7f8 fe9c 	bl	8000f84 <__aeabi_uldivmod>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4613      	mov	r3, r2
 8008252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008256:	e065      	b.n	8008324 <HAL_RCC_GetSysClockFreq+0x420>
 8008258:	40023800 	.word	0x40023800
 800825c:	00f42400 	.word	0x00f42400
 8008260:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008264:	4b3d      	ldr	r3, [pc, #244]	@ (800835c <HAL_RCC_GetSysClockFreq+0x458>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	099b      	lsrs	r3, r3, #6
 800826a:	2200      	movs	r2, #0
 800826c:	4618      	mov	r0, r3
 800826e:	4611      	mov	r1, r2
 8008270:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008274:	653b      	str	r3, [r7, #80]	@ 0x50
 8008276:	2300      	movs	r3, #0
 8008278:	657b      	str	r3, [r7, #84]	@ 0x54
 800827a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800827e:	4642      	mov	r2, r8
 8008280:	464b      	mov	r3, r9
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f04f 0100 	mov.w	r1, #0
 800828a:	0159      	lsls	r1, r3, #5
 800828c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008290:	0150      	lsls	r0, r2, #5
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4641      	mov	r1, r8
 8008298:	1a51      	subs	r1, r2, r1
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	4649      	mov	r1, r9
 800829e:	eb63 0301 	sbc.w	r3, r3, r1
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80082b0:	4659      	mov	r1, fp
 80082b2:	018b      	lsls	r3, r1, #6
 80082b4:	4651      	mov	r1, sl
 80082b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082ba:	4651      	mov	r1, sl
 80082bc:	018a      	lsls	r2, r1, #6
 80082be:	4651      	mov	r1, sl
 80082c0:	1a54      	subs	r4, r2, r1
 80082c2:	4659      	mov	r1, fp
 80082c4:	eb63 0501 	sbc.w	r5, r3, r1
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	f04f 0300 	mov.w	r3, #0
 80082d0:	00eb      	lsls	r3, r5, #3
 80082d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082d6:	00e2      	lsls	r2, r4, #3
 80082d8:	4614      	mov	r4, r2
 80082da:	461d      	mov	r5, r3
 80082dc:	4643      	mov	r3, r8
 80082de:	18e3      	adds	r3, r4, r3
 80082e0:	603b      	str	r3, [r7, #0]
 80082e2:	464b      	mov	r3, r9
 80082e4:	eb45 0303 	adc.w	r3, r5, r3
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	f04f 0200 	mov.w	r2, #0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082f6:	4629      	mov	r1, r5
 80082f8:	028b      	lsls	r3, r1, #10
 80082fa:	4621      	mov	r1, r4
 80082fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008300:	4621      	mov	r1, r4
 8008302:	028a      	lsls	r2, r1, #10
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800830c:	2200      	movs	r2, #0
 800830e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008310:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008312:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008316:	f7f8 fe35 	bl	8000f84 <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4613      	mov	r3, r2
 8008320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008324:	4b0d      	ldr	r3, [pc, #52]	@ (800835c <HAL_RCC_GetSysClockFreq+0x458>)
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	0f1b      	lsrs	r3, r3, #28
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800833a:	fbb2 f3f3 	udiv	r3, r2, r3
 800833e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008342:	e003      	b.n	800834c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008344:	4b06      	ldr	r3, [pc, #24]	@ (8008360 <HAL_RCC_GetSysClockFreq+0x45c>)
 8008346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800834a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800834c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008350:	4618      	mov	r0, r3
 8008352:	37b8      	adds	r7, #184	@ 0xb8
 8008354:	46bd      	mov	sp, r7
 8008356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800835a:	bf00      	nop
 800835c:	40023800 	.word	0x40023800
 8008360:	00f42400 	.word	0x00f42400

08008364 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e28d      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 8083 	beq.w	800848a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008384:	4b94      	ldr	r3, [pc, #592]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 030c 	and.w	r3, r3, #12
 800838c:	2b04      	cmp	r3, #4
 800838e:	d019      	beq.n	80083c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008390:	4b91      	ldr	r3, [pc, #580]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f003 030c 	and.w	r3, r3, #12
        || \
 8008398:	2b08      	cmp	r3, #8
 800839a:	d106      	bne.n	80083aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800839c:	4b8e      	ldr	r3, [pc, #568]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083a8:	d00c      	beq.n	80083c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083aa:	4b8b      	ldr	r3, [pc, #556]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80083b2:	2b0c      	cmp	r3, #12
 80083b4:	d112      	bne.n	80083dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083b6:	4b88      	ldr	r3, [pc, #544]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083c2:	d10b      	bne.n	80083dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c4:	4b84      	ldr	r3, [pc, #528]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d05b      	beq.n	8008488 <HAL_RCC_OscConfig+0x124>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d157      	bne.n	8008488 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e25a      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e4:	d106      	bne.n	80083f4 <HAL_RCC_OscConfig+0x90>
 80083e6:	4b7c      	ldr	r3, [pc, #496]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a7b      	ldr	r2, [pc, #492]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80083ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083f0:	6013      	str	r3, [r2, #0]
 80083f2:	e01d      	b.n	8008430 <HAL_RCC_OscConfig+0xcc>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083fc:	d10c      	bne.n	8008418 <HAL_RCC_OscConfig+0xb4>
 80083fe:	4b76      	ldr	r3, [pc, #472]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a75      	ldr	r2, [pc, #468]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	4b73      	ldr	r3, [pc, #460]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a72      	ldr	r2, [pc, #456]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	e00b      	b.n	8008430 <HAL_RCC_OscConfig+0xcc>
 8008418:	4b6f      	ldr	r3, [pc, #444]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a6e      	ldr	r2, [pc, #440]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800841e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	4b6c      	ldr	r3, [pc, #432]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a6b      	ldr	r2, [pc, #428]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800842a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800842e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d013      	beq.n	8008460 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008438:	f7fc fbd8 	bl	8004bec <HAL_GetTick>
 800843c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800843e:	e008      	b.n	8008452 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008440:	f7fc fbd4 	bl	8004bec <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	2b64      	cmp	r3, #100	@ 0x64
 800844c:	d901      	bls.n	8008452 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800844e:	2303      	movs	r3, #3
 8008450:	e21f      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008452:	4b61      	ldr	r3, [pc, #388]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0f0      	beq.n	8008440 <HAL_RCC_OscConfig+0xdc>
 800845e:	e014      	b.n	800848a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008460:	f7fc fbc4 	bl	8004bec <HAL_GetTick>
 8008464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008468:	f7fc fbc0 	bl	8004bec <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b64      	cmp	r3, #100	@ 0x64
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e20b      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800847a:	4b57      	ldr	r3, [pc, #348]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1f0      	bne.n	8008468 <HAL_RCC_OscConfig+0x104>
 8008486:	e000      	b.n	800848a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d06f      	beq.n	8008576 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008496:	4b50      	ldr	r3, [pc, #320]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d017      	beq.n	80084d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80084a2:	4b4d      	ldr	r3, [pc, #308]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80084aa:	2b08      	cmp	r3, #8
 80084ac:	d105      	bne.n	80084ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80084ae:	4b4a      	ldr	r3, [pc, #296]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ba:	4b47      	ldr	r3, [pc, #284]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80084c2:	2b0c      	cmp	r3, #12
 80084c4:	d11c      	bne.n	8008500 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084c6:	4b44      	ldr	r3, [pc, #272]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d116      	bne.n	8008500 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084d2:	4b41      	ldr	r3, [pc, #260]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d005      	beq.n	80084ea <HAL_RCC_OscConfig+0x186>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d001      	beq.n	80084ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e1d3      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ea:	4b3b      	ldr	r3, [pc, #236]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	00db      	lsls	r3, r3, #3
 80084f8:	4937      	ldr	r1, [pc, #220]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084fe:	e03a      	b.n	8008576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d020      	beq.n	800854a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008508:	4b34      	ldr	r3, [pc, #208]	@ (80085dc <HAL_RCC_OscConfig+0x278>)
 800850a:	2201      	movs	r2, #1
 800850c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800850e:	f7fc fb6d 	bl	8004bec <HAL_GetTick>
 8008512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008514:	e008      	b.n	8008528 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008516:	f7fc fb69 	bl	8004bec <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e1b4      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008528:	4b2b      	ldr	r3, [pc, #172]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0f0      	beq.n	8008516 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008534:	4b28      	ldr	r3, [pc, #160]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	00db      	lsls	r3, r3, #3
 8008542:	4925      	ldr	r1, [pc, #148]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 8008544:	4313      	orrs	r3, r2
 8008546:	600b      	str	r3, [r1, #0]
 8008548:	e015      	b.n	8008576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800854a:	4b24      	ldr	r3, [pc, #144]	@ (80085dc <HAL_RCC_OscConfig+0x278>)
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008550:	f7fc fb4c 	bl	8004bec <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008558:	f7fc fb48 	bl	8004bec <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e193      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800856a:	4b1b      	ldr	r3, [pc, #108]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f0      	bne.n	8008558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0308 	and.w	r3, r3, #8
 800857e:	2b00      	cmp	r3, #0
 8008580:	d036      	beq.n	80085f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d016      	beq.n	80085b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800858a:	4b15      	ldr	r3, [pc, #84]	@ (80085e0 <HAL_RCC_OscConfig+0x27c>)
 800858c:	2201      	movs	r2, #1
 800858e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008590:	f7fc fb2c 	bl	8004bec <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008598:	f7fc fb28 	bl	8004bec <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e173      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085aa:	4b0b      	ldr	r3, [pc, #44]	@ (80085d8 <HAL_RCC_OscConfig+0x274>)
 80085ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCC_OscConfig+0x234>
 80085b6:	e01b      	b.n	80085f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085b8:	4b09      	ldr	r3, [pc, #36]	@ (80085e0 <HAL_RCC_OscConfig+0x27c>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085be:	f7fc fb15 	bl	8004bec <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085c4:	e00e      	b.n	80085e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085c6:	f7fc fb11 	bl	8004bec <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d907      	bls.n	80085e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e15c      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
 80085d8:	40023800 	.word	0x40023800
 80085dc:	42470000 	.word	0x42470000
 80085e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085e4:	4b8a      	ldr	r3, [pc, #552]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80085e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1ea      	bne.n	80085c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8097 	beq.w	800872c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008602:	4b83      	ldr	r3, [pc, #524]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10f      	bne.n	800862e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	4b7f      	ldr	r3, [pc, #508]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	4a7e      	ldr	r2, [pc, #504]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800861c:	6413      	str	r3, [r2, #64]	@ 0x40
 800861e:	4b7c      	ldr	r3, [pc, #496]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800862a:	2301      	movs	r3, #1
 800862c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800862e:	4b79      	ldr	r3, [pc, #484]	@ (8008814 <HAL_RCC_OscConfig+0x4b0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008636:	2b00      	cmp	r3, #0
 8008638:	d118      	bne.n	800866c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800863a:	4b76      	ldr	r3, [pc, #472]	@ (8008814 <HAL_RCC_OscConfig+0x4b0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a75      	ldr	r2, [pc, #468]	@ (8008814 <HAL_RCC_OscConfig+0x4b0>)
 8008640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008646:	f7fc fad1 	bl	8004bec <HAL_GetTick>
 800864a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800864e:	f7fc facd 	bl	8004bec <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e118      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008660:	4b6c      	ldr	r3, [pc, #432]	@ (8008814 <HAL_RCC_OscConfig+0x4b0>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0f0      	beq.n	800864e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d106      	bne.n	8008682 <HAL_RCC_OscConfig+0x31e>
 8008674:	4b66      	ldr	r3, [pc, #408]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008678:	4a65      	ldr	r2, [pc, #404]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008680:	e01c      	b.n	80086bc <HAL_RCC_OscConfig+0x358>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	2b05      	cmp	r3, #5
 8008688:	d10c      	bne.n	80086a4 <HAL_RCC_OscConfig+0x340>
 800868a:	4b61      	ldr	r3, [pc, #388]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	4a60      	ldr	r2, [pc, #384]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008690:	f043 0304 	orr.w	r3, r3, #4
 8008694:	6713      	str	r3, [r2, #112]	@ 0x70
 8008696:	4b5e      	ldr	r3, [pc, #376]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869a:	4a5d      	ldr	r2, [pc, #372]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a2:	e00b      	b.n	80086bc <HAL_RCC_OscConfig+0x358>
 80086a4:	4b5a      	ldr	r3, [pc, #360]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a8:	4a59      	ldr	r2, [pc, #356]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80086aa:	f023 0301 	bic.w	r3, r3, #1
 80086ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b0:	4b57      	ldr	r3, [pc, #348]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80086b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086b4:	4a56      	ldr	r2, [pc, #344]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80086b6:	f023 0304 	bic.w	r3, r3, #4
 80086ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d015      	beq.n	80086f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086c4:	f7fc fa92 	bl	8004bec <HAL_GetTick>
 80086c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ca:	e00a      	b.n	80086e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086cc:	f7fc fa8e 	bl	8004bec <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086da:	4293      	cmp	r3, r2
 80086dc:	d901      	bls.n	80086e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	e0d7      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80086e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e6:	f003 0302 	and.w	r3, r3, #2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d0ee      	beq.n	80086cc <HAL_RCC_OscConfig+0x368>
 80086ee:	e014      	b.n	800871a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f0:	f7fc fa7c 	bl	8004bec <HAL_GetTick>
 80086f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086f6:	e00a      	b.n	800870e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086f8:	f7fc fa78 	bl	8004bec <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008706:	4293      	cmp	r3, r2
 8008708:	d901      	bls.n	800870e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e0c1      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800870e:	4b40      	ldr	r3, [pc, #256]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1ee      	bne.n	80086f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d105      	bne.n	800872c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008720:	4b3b      	ldr	r3, [pc, #236]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008724:	4a3a      	ldr	r2, [pc, #232]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800872a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 80ad 	beq.w	8008890 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008736:	4b36      	ldr	r3, [pc, #216]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 030c 	and.w	r3, r3, #12
 800873e:	2b08      	cmp	r3, #8
 8008740:	d060      	beq.n	8008804 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	2b02      	cmp	r3, #2
 8008748:	d145      	bne.n	80087d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800874a:	4b33      	ldr	r3, [pc, #204]	@ (8008818 <HAL_RCC_OscConfig+0x4b4>)
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fc fa4c 	bl	8004bec <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008758:	f7fc fa48 	bl	8004bec <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e093      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800876a:	4b29      	ldr	r3, [pc, #164]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69da      	ldr	r2, [r3, #28]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008784:	019b      	lsls	r3, r3, #6
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	3b01      	subs	r3, #1
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008798:	061b      	lsls	r3, r3, #24
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a0:	071b      	lsls	r3, r3, #28
 80087a2:	491b      	ldr	r1, [pc, #108]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80087a4:	4313      	orrs	r3, r2
 80087a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <HAL_RCC_OscConfig+0x4b4>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ae:	f7fc fa1d 	bl	8004bec <HAL_GetTick>
 80087b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b4:	e008      	b.n	80087c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087b6:	f7fc fa19 	bl	8004bec <HAL_GetTick>
 80087ba:	4602      	mov	r2, r0
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d901      	bls.n	80087c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e064      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087c8:	4b11      	ldr	r3, [pc, #68]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0f0      	beq.n	80087b6 <HAL_RCC_OscConfig+0x452>
 80087d4:	e05c      	b.n	8008890 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087d6:	4b10      	ldr	r3, [pc, #64]	@ (8008818 <HAL_RCC_OscConfig+0x4b4>)
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087dc:	f7fc fa06 	bl	8004bec <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087e4:	f7fc fa02 	bl	8004bec <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e04d      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087f6:	4b06      	ldr	r3, [pc, #24]	@ (8008810 <HAL_RCC_OscConfig+0x4ac>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1f0      	bne.n	80087e4 <HAL_RCC_OscConfig+0x480>
 8008802:	e045      	b.n	8008890 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d107      	bne.n	800881c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e040      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
 8008810:	40023800 	.word	0x40023800
 8008814:	40007000 	.word	0x40007000
 8008818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800881c:	4b1f      	ldr	r3, [pc, #124]	@ (800889c <HAL_RCC_OscConfig+0x538>)
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d030      	beq.n	800888c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008834:	429a      	cmp	r2, r3
 8008836:	d129      	bne.n	800888c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008842:	429a      	cmp	r2, r3
 8008844:	d122      	bne.n	800888c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800884c:	4013      	ands	r3, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008854:	4293      	cmp	r3, r2
 8008856:	d119      	bne.n	800888c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	3b01      	subs	r3, #1
 8008866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008868:	429a      	cmp	r2, r3
 800886a:	d10f      	bne.n	800888c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008878:	429a      	cmp	r2, r3
 800887a:	d107      	bne.n	800888c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008886:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008888:	429a      	cmp	r2, r3
 800888a:	d001      	beq.n	8008890 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e000      	b.n	8008892 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3718      	adds	r7, #24
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40023800 	.word	0x40023800

080088a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e073      	b.n	800899a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	7f5b      	ldrb	r3, [r3, #29]
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d105      	bne.n	80088c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fa fd3e 	bl	8003344 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b10      	cmp	r3, #16
 80088da:	d055      	beq.n	8008988 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	22ca      	movs	r2, #202	@ 0xca
 80088e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2253      	movs	r2, #83	@ 0x53
 80088ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f87f 	bl	80089f0 <RTC_EnterInitMode>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d12c      	bne.n	8008956 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6812      	ldr	r2, [r2, #0]
 8008906:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800890a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800890e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6899      	ldr	r1, [r3, #8]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	431a      	orrs	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	431a      	orrs	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	68d2      	ldr	r2, [r2, #12]
 8008936:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6919      	ldr	r1, [r3, #16]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	041a      	lsls	r2, r3, #16
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f886 	bl	8008a5e <RTC_ExitInitMode>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008956:	7bfb      	ldrb	r3, [r7, #15]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d110      	bne.n	800897e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800896a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	22ff      	movs	r2, #255	@ 0xff
 8008984:	625a      	str	r2, [r3, #36]	@ 0x24
 8008986:	e001      	b.n	800898c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
	...

080089a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a0d      	ldr	r2, [pc, #52]	@ (80089ec <HAL_RTC_WaitForSynchro+0x48>)
 80089b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089b8:	f7fc f918 	bl	8004bec <HAL_GetTick>
 80089bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089be:	e009      	b.n	80089d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089c0:	f7fc f914 	bl	8004bec <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089ce:	d901      	bls.n	80089d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e007      	b.n	80089e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0ee      	beq.n	80089c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	00017f5f 	.word	0x00017f5f

080089f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d122      	bne.n	8008a54 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008a1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1e:	f7fc f8e5 	bl	8004bec <HAL_GetTick>
 8008a22:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a24:	e00c      	b.n	8008a40 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a26:	f7fc f8e1 	bl	8004bec <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a34:	d904      	bls.n	8008a40 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d102      	bne.n	8008a54 <RTC_EnterInitMode+0x64>
 8008a4e:	7bfb      	ldrb	r3, [r7, #15]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d1e8      	bne.n	8008a26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff ff8b 	bl	80089a4 <HAL_RTC_WaitForSynchro>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d004      	beq.n	8008a9e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2204      	movs	r2, #4
 8008a98:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e07b      	b.n	8008bb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d108      	bne.n	8008ad4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008aca:	d009      	beq.n	8008ae0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	61da      	str	r2, [r3, #28]
 8008ad2:	e005      	b.n	8008ae0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d106      	bne.n	8008b00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7fa fcb8 	bl	8003470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b32:	431a      	orrs	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	691b      	ldr	r3, [r3, #16]
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b64:	ea42 0103 	orr.w	r1, r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	0c1b      	lsrs	r3, r3, #16
 8008b7e:	f003 0104 	and.w	r1, r3, #4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b86:	f003 0210 	and.w	r2, r3, #16
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ba0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b082      	sub	sp, #8
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e041      	b.n	8008c50 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7fa ffdf 	bl	8003ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2202      	movs	r2, #2
 8008bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f000 faab 	bl	8009154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d001      	beq.n	8008c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e04e      	b.n	8008d0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68da      	ldr	r2, [r3, #12]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0201 	orr.w	r2, r2, #1
 8008c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a23      	ldr	r2, [pc, #140]	@ (8008d1c <HAL_TIM_Base_Start_IT+0xc4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d022      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9a:	d01d      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8008d20 <HAL_TIM_Base_Start_IT+0xc8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d018      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a1e      	ldr	r2, [pc, #120]	@ (8008d24 <HAL_TIM_Base_Start_IT+0xcc>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d013      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8008d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00e      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8008d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d009      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a19      	ldr	r2, [pc, #100]	@ (8008d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d004      	beq.n	8008cd8 <HAL_TIM_Base_Start_IT+0x80>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a18      	ldr	r2, [pc, #96]	@ (8008d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d111      	bne.n	8008cfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b06      	cmp	r3, #6
 8008ce8:	d010      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0201 	orr.w	r2, r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cfa:	e007      	b.n	8008d0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	40010000 	.word	0x40010000
 8008d20:	40000400 	.word	0x40000400
 8008d24:	40000800 	.word	0x40000800
 8008d28:	40000c00 	.word	0x40000c00
 8008d2c:	40010400 	.word	0x40010400
 8008d30:	40014000 	.word	0x40014000
 8008d34:	40001800 	.word	0x40001800

08008d38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f022 0201 	bic.w	r2, r2, #1
 8008d4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10f      	bne.n	8008d80 <HAL_TIM_Base_Stop_IT+0x48>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6a1a      	ldr	r2, [r3, #32]
 8008d66:	f240 4344 	movw	r3, #1092	@ 0x444
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d107      	bne.n	8008d80 <HAL_TIM_Base_Stop_IT+0x48>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0201 	bic.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	370c      	adds	r7, #12
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	f003 0302 	and.w	r3, r3, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d020      	beq.n	8008dfa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01b      	beq.n	8008dfa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f06f 0202 	mvn.w	r2, #2
 8008dca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d003      	beq.n	8008de8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f999 	bl	8009118 <HAL_TIM_IC_CaptureCallback>
 8008de6:	e005      	b.n	8008df4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f98b 	bl	8009104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f99c 	bl	800912c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d020      	beq.n	8008e46 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f003 0304 	and.w	r3, r3, #4
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d01b      	beq.n	8008e46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f06f 0204 	mvn.w	r2, #4
 8008e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f973 	bl	8009118 <HAL_TIM_IC_CaptureCallback>
 8008e32:	e005      	b.n	8008e40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f965 	bl	8009104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f976 	bl	800912c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f003 0308 	and.w	r3, r3, #8
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d020      	beq.n	8008e92 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f003 0308 	and.w	r3, r3, #8
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d01b      	beq.n	8008e92 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f06f 0208 	mvn.w	r2, #8
 8008e62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2204      	movs	r2, #4
 8008e68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	f003 0303 	and.w	r3, r3, #3
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d003      	beq.n	8008e80 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f94d 	bl	8009118 <HAL_TIM_IC_CaptureCallback>
 8008e7e:	e005      	b.n	8008e8c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 f93f 	bl	8009104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f950 	bl	800912c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d020      	beq.n	8008ede <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d01b      	beq.n	8008ede <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f06f 0210 	mvn.w	r2, #16
 8008eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2208      	movs	r2, #8
 8008eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f927 	bl	8009118 <HAL_TIM_IC_CaptureCallback>
 8008eca:	e005      	b.n	8008ed8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f919 	bl	8009104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 f92a 	bl	800912c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00c      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f06f 0201 	mvn.w	r2, #1
 8008efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7f9 fba1 	bl	8002644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00c      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d007      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fadd 	bl	80094e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00c      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d007      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f8fb 	bl	8009140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00c      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d007      	beq.n	8008f6e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f06f 0220 	mvn.w	r2, #32
 8008f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 faaf 	bl	80094cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_TIM_ConfigClockSource+0x1c>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e0b4      	b.n	80090fc <HAL_TIM_ConfigClockSource+0x186>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fca:	d03e      	beq.n	800904a <HAL_TIM_ConfigClockSource+0xd4>
 8008fcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fd0:	f200 8087 	bhi.w	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8008fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fd8:	f000 8086 	beq.w	80090e8 <HAL_TIM_ConfigClockSource+0x172>
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fe0:	d87f      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8008fe2:	2b70      	cmp	r3, #112	@ 0x70
 8008fe4:	d01a      	beq.n	800901c <HAL_TIM_ConfigClockSource+0xa6>
 8008fe6:	2b70      	cmp	r3, #112	@ 0x70
 8008fe8:	d87b      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8008fea:	2b60      	cmp	r3, #96	@ 0x60
 8008fec:	d050      	beq.n	8009090 <HAL_TIM_ConfigClockSource+0x11a>
 8008fee:	2b60      	cmp	r3, #96	@ 0x60
 8008ff0:	d877      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff2:	2b50      	cmp	r3, #80	@ 0x50
 8008ff4:	d03c      	beq.n	8009070 <HAL_TIM_ConfigClockSource+0xfa>
 8008ff6:	2b50      	cmp	r3, #80	@ 0x50
 8008ff8:	d873      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8008ffa:	2b40      	cmp	r3, #64	@ 0x40
 8008ffc:	d058      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x13a>
 8008ffe:	2b40      	cmp	r3, #64	@ 0x40
 8009000:	d86f      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8009002:	2b30      	cmp	r3, #48	@ 0x30
 8009004:	d064      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x15a>
 8009006:	2b30      	cmp	r3, #48	@ 0x30
 8009008:	d86b      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 800900a:	2b20      	cmp	r3, #32
 800900c:	d060      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x15a>
 800900e:	2b20      	cmp	r3, #32
 8009010:	d867      	bhi.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d05c      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x15a>
 8009016:	2b10      	cmp	r3, #16
 8009018:	d05a      	beq.n	80090d0 <HAL_TIM_ConfigClockSource+0x15a>
 800901a:	e062      	b.n	80090e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800902c:	f000 f9b2 	bl	8009394 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800903e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	609a      	str	r2, [r3, #8]
      break;
 8009048:	e04f      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800905a:	f000 f99b 	bl	8009394 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800906c:	609a      	str	r2, [r3, #8]
      break;
 800906e:	e03c      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800907c:	461a      	mov	r2, r3
 800907e:	f000 f90f 	bl	80092a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2150      	movs	r1, #80	@ 0x50
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f968 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 800908e:	e02c      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800909c:	461a      	mov	r2, r3
 800909e:	f000 f92e 	bl	80092fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2160      	movs	r1, #96	@ 0x60
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f958 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 80090ae:	e01c      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090bc:	461a      	mov	r2, r3
 80090be:	f000 f8ef 	bl	80092a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2140      	movs	r1, #64	@ 0x40
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f948 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 80090ce:	e00c      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f000 f93f 	bl	800935e <TIM_ITRx_SetConfig>
      break;
 80090e0:	e003      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
      break;
 80090e6:	e000      	b.n	80090ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80090fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a43      	ldr	r2, [pc, #268]	@ (8009274 <TIM_Base_SetConfig+0x120>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d013      	beq.n	8009194 <TIM_Base_SetConfig+0x40>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009172:	d00f      	beq.n	8009194 <TIM_Base_SetConfig+0x40>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a40      	ldr	r2, [pc, #256]	@ (8009278 <TIM_Base_SetConfig+0x124>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d00b      	beq.n	8009194 <TIM_Base_SetConfig+0x40>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a3f      	ldr	r2, [pc, #252]	@ (800927c <TIM_Base_SetConfig+0x128>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d007      	beq.n	8009194 <TIM_Base_SetConfig+0x40>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a3e      	ldr	r2, [pc, #248]	@ (8009280 <TIM_Base_SetConfig+0x12c>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d003      	beq.n	8009194 <TIM_Base_SetConfig+0x40>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a3d      	ldr	r2, [pc, #244]	@ (8009284 <TIM_Base_SetConfig+0x130>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d108      	bne.n	80091a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a32      	ldr	r2, [pc, #200]	@ (8009274 <TIM_Base_SetConfig+0x120>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d02b      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b4:	d027      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a2f      	ldr	r2, [pc, #188]	@ (8009278 <TIM_Base_SetConfig+0x124>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d023      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a2e      	ldr	r2, [pc, #184]	@ (800927c <TIM_Base_SetConfig+0x128>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d01f      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a2d      	ldr	r2, [pc, #180]	@ (8009280 <TIM_Base_SetConfig+0x12c>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d01b      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a2c      	ldr	r2, [pc, #176]	@ (8009284 <TIM_Base_SetConfig+0x130>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d017      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a2b      	ldr	r2, [pc, #172]	@ (8009288 <TIM_Base_SetConfig+0x134>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d013      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a2a      	ldr	r2, [pc, #168]	@ (800928c <TIM_Base_SetConfig+0x138>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00f      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a29      	ldr	r2, [pc, #164]	@ (8009290 <TIM_Base_SetConfig+0x13c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00b      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a28      	ldr	r2, [pc, #160]	@ (8009294 <TIM_Base_SetConfig+0x140>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d007      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a27      	ldr	r2, [pc, #156]	@ (8009298 <TIM_Base_SetConfig+0x144>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d003      	beq.n	8009206 <TIM_Base_SetConfig+0xb2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a26      	ldr	r2, [pc, #152]	@ (800929c <TIM_Base_SetConfig+0x148>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d108      	bne.n	8009218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800920c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	689a      	ldr	r2, [r3, #8]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a0e      	ldr	r2, [pc, #56]	@ (8009274 <TIM_Base_SetConfig+0x120>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d003      	beq.n	8009246 <TIM_Base_SetConfig+0xf2>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a10      	ldr	r2, [pc, #64]	@ (8009284 <TIM_Base_SetConfig+0x130>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d103      	bne.n	800924e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	691a      	ldr	r2, [r3, #16]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f043 0204 	orr.w	r2, r3, #4
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	601a      	str	r2, [r3, #0]
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40010000 	.word	0x40010000
 8009278:	40000400 	.word	0x40000400
 800927c:	40000800 	.word	0x40000800
 8009280:	40000c00 	.word	0x40000c00
 8009284:	40010400 	.word	0x40010400
 8009288:	40014000 	.word	0x40014000
 800928c:	40014400 	.word	0x40014400
 8009290:	40014800 	.word	0x40014800
 8009294:	40001800 	.word	0x40001800
 8009298:	40001c00 	.word	0x40001c00
 800929c:	40002000 	.word	0x40002000

080092a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0201 	bic.w	r2, r3, #1
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f023 030a 	bic.w	r3, r3, #10
 80092dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	621a      	str	r2, [r3, #32]
}
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f023 0210 	bic.w	r2, r3, #16
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	031b      	lsls	r3, r3, #12
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800933a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	621a      	str	r2, [r3, #32]
}
 8009352:	bf00      	nop
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800935e:	b480      	push	{r7}
 8009360:	b085      	sub	sp, #20
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
 8009366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	f043 0307 	orr.w	r3, r3, #7
 8009380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	609a      	str	r2, [r3, #8]
}
 8009388:	bf00      	nop
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80093ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	431a      	orrs	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	4313      	orrs	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	609a      	str	r2, [r3, #8]
}
 80093c8:	bf00      	nop
 80093ca:	371c      	adds	r7, #28
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e05a      	b.n	80094a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a21      	ldr	r2, [pc, #132]	@ (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d022      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009438:	d01d      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1d      	ldr	r2, [pc, #116]	@ (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d018      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a1b      	ldr	r2, [pc, #108]	@ (80094b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a1a      	ldr	r2, [pc, #104]	@ (80094bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00e      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a18      	ldr	r2, [pc, #96]	@ (80094c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d009      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a17      	ldr	r2, [pc, #92]	@ (80094c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a15      	ldr	r2, [pc, #84]	@ (80094c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d10c      	bne.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800947c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	4313      	orrs	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3714      	adds	r7, #20
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	40010000 	.word	0x40010000
 80094b4:	40000400 	.word	0x40000400
 80094b8:	40000800 	.word	0x40000800
 80094bc:	40000c00 	.word	0x40000c00
 80094c0:	40010400 	.word	0x40010400
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40001800 	.word	0x40001800

080094cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e042      	b.n	800958c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b00      	cmp	r3, #0
 8009510:	d106      	bne.n	8009520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7fa fee6 	bl	80042ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2224      	movs	r2, #36	@ 0x24
 8009524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f821 	bl	800a580 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691a      	ldr	r2, [r3, #16]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800954c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	695a      	ldr	r2, [r3, #20]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800955c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68da      	ldr	r2, [r3, #12]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800956c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e024      	b.n	80095f0 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2224      	movs	r2, #36	@ 0x24
 80095aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68da      	ldr	r2, [r3, #12]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095bc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7fb f81c 	bl	80045fc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	@ 0x28
 80095fc:	af02      	add	r7, sp, #8
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b20      	cmp	r3, #32
 8009616:	d175      	bne.n	8009704 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d002      	beq.n	8009624 <HAL_UART_Transmit+0x2c>
 800961e:	88fb      	ldrh	r3, [r7, #6]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d101      	bne.n	8009628 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	e06e      	b.n	8009706 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2221      	movs	r2, #33	@ 0x21
 8009632:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009636:	f7fb fad9 	bl	8004bec <HAL_GetTick>
 800963a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	88fa      	ldrh	r2, [r7, #6]
 8009640:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	88fa      	ldrh	r2, [r7, #6]
 8009646:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009650:	d108      	bne.n	8009664 <HAL_UART_Transmit+0x6c>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d104      	bne.n	8009664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800965a:	2300      	movs	r3, #0
 800965c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	e003      	b.n	800966c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009668:	2300      	movs	r3, #0
 800966a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800966c:	e02e      	b.n	80096cc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2200      	movs	r2, #0
 8009676:	2180      	movs	r1, #128	@ 0x80
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 fcbf 	bl	8009ffc <UART_WaitOnFlagUntilTimeout>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d005      	beq.n	8009690 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2220      	movs	r2, #32
 8009688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e03a      	b.n	8009706 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d10b      	bne.n	80096ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	3302      	adds	r3, #2
 80096aa:	61bb      	str	r3, [r7, #24]
 80096ac:	e007      	b.n	80096be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	781a      	ldrb	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	3301      	adds	r3, #1
 80096bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	3b01      	subs	r3, #1
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1cb      	bne.n	800966e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	2200      	movs	r2, #0
 80096de:	2140      	movs	r1, #64	@ 0x40
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f000 fc8b 	bl	8009ffc <UART_WaitOnFlagUntilTimeout>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e006      	b.n	8009706 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2220      	movs	r2, #32
 80096fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009700:	2300      	movs	r3, #0
 8009702:	e000      	b.n	8009706 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009704:	2302      	movs	r3, #2
  }
}
 8009706:	4618      	mov	r0, r3
 8009708:	3720      	adds	r7, #32
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	4613      	mov	r3, r2
 800971a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b20      	cmp	r3, #32
 8009726:	d112      	bne.n	800974e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_UART_Receive_DMA+0x26>
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e00b      	b.n	8009750 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800973e:	88fb      	ldrh	r3, [r7, #6]
 8009740:	461a      	mov	r2, r3
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 fcb3 	bl	800a0b0 <UART_Start_Receive_DMA>
 800974a:	4603      	mov	r3, r0
 800974c:	e000      	b.n	8009750 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
  }
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b090      	sub	sp, #64	@ 0x40
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009760:	2300      	movs	r3, #0
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800976e:	2b80      	cmp	r3, #128	@ 0x80
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	b2db      	uxtb	r3, r3
 8009778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b21      	cmp	r3, #33	@ 0x21
 8009784:	d128      	bne.n	80097d8 <HAL_UART_DMAStop+0x80>
 8009786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d025      	beq.n	80097d8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3314      	adds	r3, #20
 8009792:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	e853 3f00 	ldrex	r3, [r3]
 800979a:	623b      	str	r3, [r7, #32]
   return(result);
 800979c:	6a3b      	ldr	r3, [r7, #32]
 800979e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3314      	adds	r3, #20
 80097aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80097ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097b4:	e841 2300 	strex	r3, r2, [r1]
 80097b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1e5      	bne.n	800978c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d004      	beq.n	80097d2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7fc f8c1 	bl	8005954 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fd12 	bl	800a1fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e2:	2b40      	cmp	r3, #64	@ 0x40
 80097e4:	bf0c      	ite	eq
 80097e6:	2301      	moveq	r3, #1
 80097e8:	2300      	movne	r3, #0
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b22      	cmp	r3, #34	@ 0x22
 80097f8:	d128      	bne.n	800984c <HAL_UART_DMAStop+0xf4>
 80097fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d025      	beq.n	800984c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3314      	adds	r3, #20
 8009806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	3314      	adds	r3, #20
 800981e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009820:	61fa      	str	r2, [r7, #28]
 8009822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	69b9      	ldr	r1, [r7, #24]
 8009826:	69fa      	ldr	r2, [r7, #28]
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	617b      	str	r3, [r7, #20]
   return(result);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e5      	bne.n	8009800 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d004      	beq.n	8009846 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009840:	4618      	mov	r0, r3
 8009842:	f7fc f887 	bl	8005954 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fd00 	bl	800a24c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3740      	adds	r7, #64	@ 0x40
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
	...

08009858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b0ba      	sub	sp, #232	@ 0xe8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800987e:	2300      	movs	r3, #0
 8009880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009884:	2300      	movs	r3, #0
 8009886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10f      	bne.n	80098be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800989e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d009      	beq.n	80098be <HAL_UART_IRQHandler+0x66>
 80098aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 fda4 	bl	800a404 <UART_Receive_IT>
      return;
 80098bc:	e273      	b.n	8009da6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80098be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 80de 	beq.w	8009a84 <HAL_UART_IRQHandler+0x22c>
 80098c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80098d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 80d1 	beq.w	8009a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80098e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00b      	beq.n	8009906 <HAL_UART_IRQHandler+0xae>
 80098ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098fe:	f043 0201 	orr.w	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00b      	beq.n	800992a <HAL_UART_IRQHandler+0xd2>
 8009912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009922:	f043 0202 	orr.w	r2, r3, #2
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800992a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <HAL_UART_IRQHandler+0xf6>
 8009936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009946:	f043 0204 	orr.w	r2, r3, #4
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800994e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009952:	f003 0308 	and.w	r3, r3, #8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d011      	beq.n	800997e <HAL_UART_IRQHandler+0x126>
 800995a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800995e:	f003 0320 	and.w	r3, r3, #32
 8009962:	2b00      	cmp	r3, #0
 8009964:	d105      	bne.n	8009972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009976:	f043 0208 	orr.w	r2, r3, #8
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009982:	2b00      	cmp	r3, #0
 8009984:	f000 820a 	beq.w	8009d9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800998c:	f003 0320 	and.w	r3, r3, #32
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_UART_IRQHandler+0x14e>
 8009994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fd2f 	bl	800a404 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099b0:	2b40      	cmp	r3, #64	@ 0x40
 80099b2:	bf0c      	ite	eq
 80099b4:	2301      	moveq	r3, #1
 80099b6:	2300      	movne	r3, #0
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d103      	bne.n	80099d2 <HAL_UART_IRQHandler+0x17a>
 80099ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d04f      	beq.n	8009a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fc3a 	bl	800a24c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099e2:	2b40      	cmp	r3, #64	@ 0x40
 80099e4:	d141      	bne.n	8009a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3314      	adds	r3, #20
 80099ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80099fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3314      	adds	r3, #20
 8009a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d1d9      	bne.n	80099e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d013      	beq.n	8009a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a3e:	4a8a      	ldr	r2, [pc, #552]	@ (8009c68 <HAL_UART_IRQHandler+0x410>)
 8009a40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fb fff4 	bl	8005a34 <HAL_DMA_Abort_IT>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009a5c:	4610      	mov	r0, r2
 8009a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a60:	e00e      	b.n	8009a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9b6 	bl	8009dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a68:	e00a      	b.n	8009a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f9b2 	bl	8009dd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a70:	e006      	b.n	8009a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f9ae 	bl	8009dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009a7e:	e18d      	b.n	8009d9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a80:	bf00      	nop
    return;
 8009a82:	e18b      	b.n	8009d9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	f040 8167 	bne.w	8009d5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	f000 8160 	beq.w	8009d5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 8159 	beq.w	8009d5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	60bb      	str	r3, [r7, #8]
 8009abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aca:	2b40      	cmp	r3, #64	@ 0x40
 8009acc:	f040 80ce 	bne.w	8009c6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 80a9 	beq.w	8009c38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009aee:	429a      	cmp	r2, r3
 8009af0:	f080 80a2 	bcs.w	8009c38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009afa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b06:	f000 8088 	beq.w	8009c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	330c      	adds	r3, #12
 8009b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b18:	e853 3f00 	ldrex	r3, [r3]
 8009b1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	330c      	adds	r3, #12
 8009b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009b36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b46:	e841 2300 	strex	r3, r2, [r1]
 8009b4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1d9      	bne.n	8009b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	3314      	adds	r3, #20
 8009b5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b60:	e853 3f00 	ldrex	r3, [r3]
 8009b64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3314      	adds	r3, #20
 8009b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e1      	bne.n	8009b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3314      	adds	r3, #20
 8009b98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b9c:	e853 3f00 	ldrex	r3, [r3]
 8009ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3314      	adds	r3, #20
 8009bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009bb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bbe:	e841 2300 	strex	r3, r2, [r1]
 8009bc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d1e3      	bne.n	8009b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2220      	movs	r2, #32
 8009bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	330c      	adds	r3, #12
 8009bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009be2:	e853 3f00 	ldrex	r3, [r3]
 8009be6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bea:	f023 0310 	bic.w	r3, r3, #16
 8009bee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	330c      	adds	r3, #12
 8009bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009bfc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009bfe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e3      	bne.n	8009bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fb fe9d 	bl	8005954 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 f8d9 	bl	8009de8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009c36:	e0b3      	b.n	8009da0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c40:	429a      	cmp	r2, r3
 8009c42:	f040 80ad 	bne.w	8009da0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c50:	f040 80a6 	bne.w	8009da0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f8c1 	bl	8009de8 <HAL_UARTEx_RxEventCallback>
      return;
 8009c66:	e09b      	b.n	8009da0 <HAL_UART_IRQHandler+0x548>
 8009c68:	0800a313 	.word	0x0800a313
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	f000 808e 	beq.w	8009da4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 8089 	beq.w	8009da4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	330c      	adds	r3, #12
 8009c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	330c      	adds	r3, #12
 8009cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cbe:	e841 2300 	strex	r3, r2, [r1]
 8009cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1e3      	bne.n	8009c92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3314      	adds	r3, #20
 8009cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8009cda:	6a3b      	ldr	r3, [r7, #32]
 8009cdc:	f023 0301 	bic.w	r3, r3, #1
 8009ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3314      	adds	r3, #20
 8009cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009cee:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cf6:	e841 2300 	strex	r3, r2, [r1]
 8009cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1e3      	bne.n	8009cca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2220      	movs	r2, #32
 8009d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	330c      	adds	r3, #12
 8009d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	e853 3f00 	ldrex	r3, [r3]
 8009d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f023 0310 	bic.w	r3, r3, #16
 8009d26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	330c      	adds	r3, #12
 8009d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009d34:	61fa      	str	r2, [r7, #28]
 8009d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	69b9      	ldr	r1, [r7, #24]
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	617b      	str	r3, [r7, #20]
   return(result);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e3      	bne.n	8009d10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f847 	bl	8009de8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009d5a:	e023      	b.n	8009da4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <HAL_UART_IRQHandler+0x524>
 8009d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fadd 	bl	800a334 <UART_Transmit_IT>
    return;
 8009d7a:	e014      	b.n	8009da6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00e      	beq.n	8009da6 <HAL_UART_IRQHandler+0x54e>
 8009d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d008      	beq.n	8009da6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb1d 	bl	800a3d4 <UART_EndTransmit_IT>
    return;
 8009d9a:	e004      	b.n	8009da6 <HAL_UART_IRQHandler+0x54e>
    return;
 8009d9c:	bf00      	nop
 8009d9e:	e002      	b.n	8009da6 <HAL_UART_IRQHandler+0x54e>
      return;
 8009da0:	bf00      	nop
 8009da2:	e000      	b.n	8009da6 <HAL_UART_IRQHandler+0x54e>
      return;
 8009da4:	bf00      	nop
  }
}
 8009da6:	37e8      	adds	r7, #232	@ 0xe8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b09c      	sub	sp, #112	@ 0x70
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d172      	bne.n	8009f02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e1e:	2200      	movs	r2, #0
 8009e20:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	330c      	adds	r3, #12
 8009e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	330c      	adds	r3, #12
 8009e40:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009e44:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e5      	bne.n	8009e22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3314      	adds	r3, #20
 8009e74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e76:	647a      	str	r2, [r7, #68]	@ 0x44
 8009e78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e5      	bne.n	8009e56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3314      	adds	r3, #20
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	623b      	str	r3, [r7, #32]
   return(result);
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3314      	adds	r3, #20
 8009ea8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009eaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8009eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d119      	bne.n	8009f02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	330c      	adds	r3, #12
 8009ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	e853 3f00 	ldrex	r3, [r3]
 8009edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f023 0310 	bic.w	r3, r3, #16
 8009ee4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	330c      	adds	r3, #12
 8009eec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009eee:	61fa      	str	r2, [r7, #28]
 8009ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef2:	69b9      	ldr	r1, [r7, #24]
 8009ef4:	69fa      	ldr	r2, [r7, #28]
 8009ef6:	e841 2300 	strex	r3, r2, [r1]
 8009efa:	617b      	str	r3, [r7, #20]
   return(result);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1e5      	bne.n	8009ece <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f04:	2200      	movs	r2, #0
 8009f06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d106      	bne.n	8009f1e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f14:	4619      	mov	r1, r3
 8009f16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f18:	f7ff ff66 	bl	8009de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f1c:	e002      	b.n	8009f24 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009f1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f20:	f7fa fbea 	bl	80046f8 <HAL_UART_RxCpltCallback>
}
 8009f24:	bf00      	nop
 8009f26:	3770      	adds	r7, #112	@ 0x70
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d108      	bne.n	8009f5a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4619      	mov	r1, r3
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7ff ff48 	bl	8009de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f58:	e002      	b.n	8009f60 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f7ff ff30 	bl	8009dc0 <HAL_UART_RxHalfCpltCallback>
}
 8009f60:	bf00      	nop
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f84:	2b80      	cmp	r3, #128	@ 0x80
 8009f86:	bf0c      	ite	eq
 8009f88:	2301      	moveq	r3, #1
 8009f8a:	2300      	movne	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b21      	cmp	r3, #33	@ 0x21
 8009f9a:	d108      	bne.n	8009fae <UART_DMAError+0x46>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d005      	beq.n	8009fae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009fa8:	68b8      	ldr	r0, [r7, #8]
 8009faa:	f000 f927 	bl	800a1fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb8:	2b40      	cmp	r3, #64	@ 0x40
 8009fba:	bf0c      	ite	eq
 8009fbc:	2301      	moveq	r3, #1
 8009fbe:	2300      	movne	r3, #0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b22      	cmp	r3, #34	@ 0x22
 8009fce:	d108      	bne.n	8009fe2 <UART_DMAError+0x7a>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d005      	beq.n	8009fe2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009fdc:	68b8      	ldr	r0, [r7, #8]
 8009fde:	f000 f935 	bl	800a24c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe6:	f043 0210 	orr.w	r2, r3, #16
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fee:	68b8      	ldr	r0, [r7, #8]
 8009ff0:	f7ff fef0 	bl	8009dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ff4:	bf00      	nop
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	4613      	mov	r3, r2
 800a00a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a00c:	e03b      	b.n	800a086 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a014:	d037      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a016:	f7fa fde9 	bl	8004bec <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	6a3a      	ldr	r2, [r7, #32]
 800a022:	429a      	cmp	r2, r3
 800a024:	d302      	bcc.n	800a02c <UART_WaitOnFlagUntilTimeout+0x30>
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d101      	bne.n	800a030 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e03a      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f003 0304 	and.w	r3, r3, #4
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d023      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b80      	cmp	r3, #128	@ 0x80
 800a042:	d020      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2b40      	cmp	r3, #64	@ 0x40
 800a048:	d01d      	beq.n	800a086 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0308 	and.w	r3, r3, #8
 800a054:	2b08      	cmp	r3, #8
 800a056:	d116      	bne.n	800a086 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f8ec 	bl	800a24c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2208      	movs	r2, #8
 800a078:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e00f      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	4013      	ands	r3, r2
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	429a      	cmp	r2, r3
 800a094:	bf0c      	ite	eq
 800a096:	2301      	moveq	r3, #1
 800a098:	2300      	movne	r3, #0
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d0b4      	beq.n	800a00e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b098      	sub	sp, #96	@ 0x60
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	88fa      	ldrh	r2, [r7, #6]
 800a0c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2222      	movs	r2, #34	@ 0x22
 800a0d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0dc:	4a44      	ldr	r2, [pc, #272]	@ (800a1f0 <UART_Start_Receive_DMA+0x140>)
 800a0de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0e4:	4a43      	ldr	r2, [pc, #268]	@ (800a1f4 <UART_Start_Receive_DMA+0x144>)
 800a0e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ec:	4a42      	ldr	r2, [pc, #264]	@ (800a1f8 <UART_Start_Receive_DMA+0x148>)
 800a0ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a0f8:	f107 0308 	add.w	r3, r7, #8
 800a0fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	88fb      	ldrh	r3, [r7, #6]
 800a110:	f7fb fbc8 	bl	80058a4 <HAL_DMA_Start_IT>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d008      	beq.n	800a12c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2210      	movs	r2, #16
 800a11e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2220      	movs	r2, #32
 800a124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e05d      	b.n	800a1e8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	613b      	str	r3, [r7, #16]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d019      	beq.n	800a17e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	330c      	adds	r3, #12
 800a150:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a15c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a160:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	330c      	adds	r3, #12
 800a168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a16a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a16c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a170:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e5      	bne.n	800a14a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3314      	adds	r3, #20
 800a184:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a190:	f043 0301 	orr.w	r3, r3, #1
 800a194:	657b      	str	r3, [r7, #84]	@ 0x54
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3314      	adds	r3, #20
 800a19c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a19e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a1a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a1a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3314      	adds	r3, #20
 800a1b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3314      	adds	r3, #20
 800a1d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a1d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a1d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	6a39      	ldr	r1, [r7, #32]
 800a1d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e5      	bne.n	800a1b2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3760      	adds	r7, #96	@ 0x60
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	08009e01 	.word	0x08009e01
 800a1f4:	08009f2d 	.word	0x08009f2d
 800a1f8:	08009f69 	.word	0x08009f69

0800a1fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b089      	sub	sp, #36	@ 0x24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	330c      	adds	r3, #12
 800a20a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	e853 3f00 	ldrex	r3, [r3]
 800a212:	60bb      	str	r3, [r7, #8]
   return(result);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a21a:	61fb      	str	r3, [r7, #28]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	330c      	adds	r3, #12
 800a222:	69fa      	ldr	r2, [r7, #28]
 800a224:	61ba      	str	r2, [r7, #24]
 800a226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	6979      	ldr	r1, [r7, #20]
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	613b      	str	r3, [r7, #16]
   return(result);
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e5      	bne.n	800a204 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2220      	movs	r2, #32
 800a23c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a240:	bf00      	nop
 800a242:	3724      	adds	r7, #36	@ 0x24
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b095      	sub	sp, #84	@ 0x54
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	330c      	adds	r3, #12
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a266:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a26a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	330c      	adds	r3, #12
 800a272:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a274:	643a      	str	r2, [r7, #64]	@ 0x40
 800a276:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a278:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a27a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a27c:	e841 2300 	strex	r3, r2, [r1]
 800a280:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1e5      	bne.n	800a254 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3314      	adds	r3, #20
 800a28e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a290:	6a3b      	ldr	r3, [r7, #32]
 800a292:	e853 3f00 	ldrex	r3, [r3]
 800a296:	61fb      	str	r3, [r7, #28]
   return(result);
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	f023 0301 	bic.w	r3, r3, #1
 800a29e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3314      	adds	r3, #20
 800a2a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a2ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e5      	bne.n	800a288 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d119      	bne.n	800a2f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	330c      	adds	r3, #12
 800a2ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	e853 3f00 	ldrex	r3, [r3]
 800a2d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f023 0310 	bic.w	r3, r3, #16
 800a2da:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	330c      	adds	r3, #12
 800a2e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2e4:	61ba      	str	r2, [r7, #24]
 800a2e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e8:	6979      	ldr	r1, [r7, #20]
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	e841 2300 	strex	r3, r2, [r1]
 800a2f0:	613b      	str	r3, [r7, #16]
   return(result);
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d1e5      	bne.n	800a2c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a306:	bf00      	nop
 800a308:	3754      	adds	r7, #84	@ 0x54
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2200      	movs	r2, #0
 800a324:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7ff fd54 	bl	8009dd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a32c:	bf00      	nop
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b21      	cmp	r3, #33	@ 0x21
 800a346:	d13e      	bne.n	800a3c6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a350:	d114      	bne.n	800a37c <UART_Transmit_IT+0x48>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d110      	bne.n	800a37c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	461a      	mov	r2, r3
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a36e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	1c9a      	adds	r2, r3, #2
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	621a      	str	r2, [r3, #32]
 800a37a:	e008      	b.n	800a38e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	1c59      	adds	r1, r3, #1
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6211      	str	r1, [r2, #32]
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a392:	b29b      	uxth	r3, r3
 800a394:	3b01      	subs	r3, #1
 800a396:	b29b      	uxth	r3, r3
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	4619      	mov	r1, r3
 800a39c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10f      	bne.n	800a3c2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68da      	ldr	r2, [r3, #12]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3b0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3c0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e000      	b.n	800a3c8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3c6:	2302      	movs	r3, #2
  }
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68da      	ldr	r2, [r3, #12]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a3ea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f7ff fcd9 	bl	8009dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08c      	sub	sp, #48	@ 0x30
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a40c:	2300      	movs	r3, #0
 800a40e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a410:	2300      	movs	r3, #0
 800a412:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b22      	cmp	r3, #34	@ 0x22
 800a41e:	f040 80aa 	bne.w	800a576 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a42a:	d115      	bne.n	800a458 <UART_Receive_IT+0x54>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d111      	bne.n	800a458 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a438:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	b29b      	uxth	r3, r3
 800a442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a446:	b29a      	uxth	r2, r3
 800a448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a450:	1c9a      	adds	r2, r3, #2
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	629a      	str	r2, [r3, #40]	@ 0x28
 800a456:	e024      	b.n	800a4a2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a45c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a466:	d007      	beq.n	800a478 <UART_Receive_IT+0x74>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10a      	bne.n	800a486 <UART_Receive_IT+0x82>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d106      	bne.n	800a486 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	b2da      	uxtb	r2, r3
 800a480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	e008      	b.n	800a498 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	b2db      	uxtb	r3, r3
 800a48e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a492:	b2da      	uxtb	r2, r3
 800a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a496:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	3b01      	subs	r3, #1
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d15d      	bne.n	800a572 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	68da      	ldr	r2, [r3, #12]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f022 0220 	bic.w	r2, r2, #32
 800a4c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68da      	ldr	r2, [r3, #12]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	695a      	ldr	r2, [r3, #20]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f022 0201 	bic.w	r2, r2, #1
 800a4e4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2220      	movs	r2, #32
 800a4ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d135      	bne.n	800a568 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	330c      	adds	r3, #12
 800a508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	e853 3f00 	ldrex	r3, [r3]
 800a510:	613b      	str	r3, [r7, #16]
   return(result);
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f023 0310 	bic.w	r3, r3, #16
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	330c      	adds	r3, #12
 800a520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a522:	623a      	str	r2, [r7, #32]
 800a524:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a526:	69f9      	ldr	r1, [r7, #28]
 800a528:	6a3a      	ldr	r2, [r7, #32]
 800a52a:	e841 2300 	strex	r3, r2, [r1]
 800a52e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1e5      	bne.n	800a502 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0310 	and.w	r3, r3, #16
 800a540:	2b10      	cmp	r3, #16
 800a542:	d10a      	bne.n	800a55a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff fc41 	bl	8009de8 <HAL_UARTEx_RxEventCallback>
 800a566:	e002      	b.n	800a56e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7fa f8c5 	bl	80046f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a56e:	2300      	movs	r3, #0
 800a570:	e002      	b.n	800a578 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a572:	2300      	movs	r3, #0
 800a574:	e000      	b.n	800a578 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a576:	2302      	movs	r3, #2
  }
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3730      	adds	r7, #48	@ 0x30
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a584:	b0c0      	sub	sp, #256	@ 0x100
 800a586:	af00      	add	r7, sp, #0
 800a588:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a59c:	68d9      	ldr	r1, [r3, #12]
 800a59e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	ea40 0301 	orr.w	r3, r0, r1
 800a5a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	431a      	orrs	r2, r3
 800a5b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	431a      	orrs	r2, r3
 800a5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a5d8:	f021 010c 	bic.w	r1, r1, #12
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5fa:	6999      	ldr	r1, [r3, #24]
 800a5fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	ea40 0301 	orr.w	r3, r0, r1
 800a606:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b8f      	ldr	r3, [pc, #572]	@ (800a84c <UART_SetConfig+0x2cc>)
 800a610:	429a      	cmp	r2, r3
 800a612:	d005      	beq.n	800a620 <UART_SetConfig+0xa0>
 800a614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4b8d      	ldr	r3, [pc, #564]	@ (800a850 <UART_SetConfig+0x2d0>)
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d104      	bne.n	800a62a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a620:	f7fd f932 	bl	8007888 <HAL_RCC_GetPCLK2Freq>
 800a624:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a628:	e003      	b.n	800a632 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a62a:	f7fd f919 	bl	8007860 <HAL_RCC_GetPCLK1Freq>
 800a62e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a63c:	f040 810c 	bne.w	800a858 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a644:	2200      	movs	r2, #0
 800a646:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a64a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a64e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a652:	4622      	mov	r2, r4
 800a654:	462b      	mov	r3, r5
 800a656:	1891      	adds	r1, r2, r2
 800a658:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a65a:	415b      	adcs	r3, r3
 800a65c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a65e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a662:	4621      	mov	r1, r4
 800a664:	eb12 0801 	adds.w	r8, r2, r1
 800a668:	4629      	mov	r1, r5
 800a66a:	eb43 0901 	adc.w	r9, r3, r1
 800a66e:	f04f 0200 	mov.w	r2, #0
 800a672:	f04f 0300 	mov.w	r3, #0
 800a676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a67a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a67e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a682:	4690      	mov	r8, r2
 800a684:	4699      	mov	r9, r3
 800a686:	4623      	mov	r3, r4
 800a688:	eb18 0303 	adds.w	r3, r8, r3
 800a68c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a690:	462b      	mov	r3, r5
 800a692:	eb49 0303 	adc.w	r3, r9, r3
 800a696:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a69a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a6a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a6aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	18db      	adds	r3, r3, r3
 800a6b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	eb42 0303 	adc.w	r3, r2, r3
 800a6ba:	657b      	str	r3, [r7, #84]	@ 0x54
 800a6bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a6c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a6c4:	f7f6 fc5e 	bl	8000f84 <__aeabi_uldivmod>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4b61      	ldr	r3, [pc, #388]	@ (800a854 <UART_SetConfig+0x2d4>)
 800a6ce:	fba3 2302 	umull	r2, r3, r3, r2
 800a6d2:	095b      	lsrs	r3, r3, #5
 800a6d4:	011c      	lsls	r4, r3, #4
 800a6d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a6e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	464b      	mov	r3, r9
 800a6ec:	1891      	adds	r1, r2, r2
 800a6ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a6f0:	415b      	adcs	r3, r3
 800a6f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a6f8:	4641      	mov	r1, r8
 800a6fa:	eb12 0a01 	adds.w	sl, r2, r1
 800a6fe:	4649      	mov	r1, r9
 800a700:	eb43 0b01 	adc.w	fp, r3, r1
 800a704:	f04f 0200 	mov.w	r2, #0
 800a708:	f04f 0300 	mov.w	r3, #0
 800a70c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a710:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a718:	4692      	mov	sl, r2
 800a71a:	469b      	mov	fp, r3
 800a71c:	4643      	mov	r3, r8
 800a71e:	eb1a 0303 	adds.w	r3, sl, r3
 800a722:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a726:	464b      	mov	r3, r9
 800a728:	eb4b 0303 	adc.w	r3, fp, r3
 800a72c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a73c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a740:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a744:	460b      	mov	r3, r1
 800a746:	18db      	adds	r3, r3, r3
 800a748:	643b      	str	r3, [r7, #64]	@ 0x40
 800a74a:	4613      	mov	r3, r2
 800a74c:	eb42 0303 	adc.w	r3, r2, r3
 800a750:	647b      	str	r3, [r7, #68]	@ 0x44
 800a752:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a756:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a75a:	f7f6 fc13 	bl	8000f84 <__aeabi_uldivmod>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4611      	mov	r1, r2
 800a764:	4b3b      	ldr	r3, [pc, #236]	@ (800a854 <UART_SetConfig+0x2d4>)
 800a766:	fba3 2301 	umull	r2, r3, r3, r1
 800a76a:	095b      	lsrs	r3, r3, #5
 800a76c:	2264      	movs	r2, #100	@ 0x64
 800a76e:	fb02 f303 	mul.w	r3, r2, r3
 800a772:	1acb      	subs	r3, r1, r3
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a77a:	4b36      	ldr	r3, [pc, #216]	@ (800a854 <UART_SetConfig+0x2d4>)
 800a77c:	fba3 2302 	umull	r2, r3, r3, r2
 800a780:	095b      	lsrs	r3, r3, #5
 800a782:	005b      	lsls	r3, r3, #1
 800a784:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a788:	441c      	add	r4, r3
 800a78a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a78e:	2200      	movs	r2, #0
 800a790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a794:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a798:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a79c:	4642      	mov	r2, r8
 800a79e:	464b      	mov	r3, r9
 800a7a0:	1891      	adds	r1, r2, r2
 800a7a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a7a4:	415b      	adcs	r3, r3
 800a7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a7a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a7ac:	4641      	mov	r1, r8
 800a7ae:	1851      	adds	r1, r2, r1
 800a7b0:	6339      	str	r1, [r7, #48]	@ 0x30
 800a7b2:	4649      	mov	r1, r9
 800a7b4:	414b      	adcs	r3, r1
 800a7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7b8:	f04f 0200 	mov.w	r2, #0
 800a7bc:	f04f 0300 	mov.w	r3, #0
 800a7c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a7c4:	4659      	mov	r1, fp
 800a7c6:	00cb      	lsls	r3, r1, #3
 800a7c8:	4651      	mov	r1, sl
 800a7ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7ce:	4651      	mov	r1, sl
 800a7d0:	00ca      	lsls	r2, r1, #3
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	4642      	mov	r2, r8
 800a7da:	189b      	adds	r3, r3, r2
 800a7dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7e0:	464b      	mov	r3, r9
 800a7e2:	460a      	mov	r2, r1
 800a7e4:	eb42 0303 	adc.w	r3, r2, r3
 800a7e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a7f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a7fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a800:	460b      	mov	r3, r1
 800a802:	18db      	adds	r3, r3, r3
 800a804:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a806:	4613      	mov	r3, r2
 800a808:	eb42 0303 	adc.w	r3, r2, r3
 800a80c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a80e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a812:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a816:	f7f6 fbb5 	bl	8000f84 <__aeabi_uldivmod>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4b0d      	ldr	r3, [pc, #52]	@ (800a854 <UART_SetConfig+0x2d4>)
 800a820:	fba3 1302 	umull	r1, r3, r3, r2
 800a824:	095b      	lsrs	r3, r3, #5
 800a826:	2164      	movs	r1, #100	@ 0x64
 800a828:	fb01 f303 	mul.w	r3, r1, r3
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	3332      	adds	r3, #50	@ 0x32
 800a832:	4a08      	ldr	r2, [pc, #32]	@ (800a854 <UART_SetConfig+0x2d4>)
 800a834:	fba2 2303 	umull	r2, r3, r2, r3
 800a838:	095b      	lsrs	r3, r3, #5
 800a83a:	f003 0207 	and.w	r2, r3, #7
 800a83e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4422      	add	r2, r4
 800a846:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a848:	e106      	b.n	800aa58 <UART_SetConfig+0x4d8>
 800a84a:	bf00      	nop
 800a84c:	40011000 	.word	0x40011000
 800a850:	40011400 	.word	0x40011400
 800a854:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a862:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a866:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a86a:	4642      	mov	r2, r8
 800a86c:	464b      	mov	r3, r9
 800a86e:	1891      	adds	r1, r2, r2
 800a870:	6239      	str	r1, [r7, #32]
 800a872:	415b      	adcs	r3, r3
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24
 800a876:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a87a:	4641      	mov	r1, r8
 800a87c:	1854      	adds	r4, r2, r1
 800a87e:	4649      	mov	r1, r9
 800a880:	eb43 0501 	adc.w	r5, r3, r1
 800a884:	f04f 0200 	mov.w	r2, #0
 800a888:	f04f 0300 	mov.w	r3, #0
 800a88c:	00eb      	lsls	r3, r5, #3
 800a88e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a892:	00e2      	lsls	r2, r4, #3
 800a894:	4614      	mov	r4, r2
 800a896:	461d      	mov	r5, r3
 800a898:	4643      	mov	r3, r8
 800a89a:	18e3      	adds	r3, r4, r3
 800a89c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a8a0:	464b      	mov	r3, r9
 800a8a2:	eb45 0303 	adc.w	r3, r5, r3
 800a8a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a8aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a8b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a8ba:	f04f 0200 	mov.w	r2, #0
 800a8be:	f04f 0300 	mov.w	r3, #0
 800a8c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	008b      	lsls	r3, r1, #2
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	008a      	lsls	r2, r1, #2
 800a8d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a8d8:	f7f6 fb54 	bl	8000f84 <__aeabi_uldivmod>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4b60      	ldr	r3, [pc, #384]	@ (800aa64 <UART_SetConfig+0x4e4>)
 800a8e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8e6:	095b      	lsrs	r3, r3, #5
 800a8e8:	011c      	lsls	r4, r3, #4
 800a8ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a8f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a8fc:	4642      	mov	r2, r8
 800a8fe:	464b      	mov	r3, r9
 800a900:	1891      	adds	r1, r2, r2
 800a902:	61b9      	str	r1, [r7, #24]
 800a904:	415b      	adcs	r3, r3
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a90c:	4641      	mov	r1, r8
 800a90e:	1851      	adds	r1, r2, r1
 800a910:	6139      	str	r1, [r7, #16]
 800a912:	4649      	mov	r1, r9
 800a914:	414b      	adcs	r3, r1
 800a916:	617b      	str	r3, [r7, #20]
 800a918:	f04f 0200 	mov.w	r2, #0
 800a91c:	f04f 0300 	mov.w	r3, #0
 800a920:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a924:	4659      	mov	r1, fp
 800a926:	00cb      	lsls	r3, r1, #3
 800a928:	4651      	mov	r1, sl
 800a92a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a92e:	4651      	mov	r1, sl
 800a930:	00ca      	lsls	r2, r1, #3
 800a932:	4610      	mov	r0, r2
 800a934:	4619      	mov	r1, r3
 800a936:	4603      	mov	r3, r0
 800a938:	4642      	mov	r2, r8
 800a93a:	189b      	adds	r3, r3, r2
 800a93c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a940:	464b      	mov	r3, r9
 800a942:	460a      	mov	r2, r1
 800a944:	eb42 0303 	adc.w	r3, r2, r3
 800a948:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a956:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	f04f 0300 	mov.w	r3, #0
 800a960:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a964:	4649      	mov	r1, r9
 800a966:	008b      	lsls	r3, r1, #2
 800a968:	4641      	mov	r1, r8
 800a96a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a96e:	4641      	mov	r1, r8
 800a970:	008a      	lsls	r2, r1, #2
 800a972:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a976:	f7f6 fb05 	bl	8000f84 <__aeabi_uldivmod>
 800a97a:	4602      	mov	r2, r0
 800a97c:	460b      	mov	r3, r1
 800a97e:	4611      	mov	r1, r2
 800a980:	4b38      	ldr	r3, [pc, #224]	@ (800aa64 <UART_SetConfig+0x4e4>)
 800a982:	fba3 2301 	umull	r2, r3, r3, r1
 800a986:	095b      	lsrs	r3, r3, #5
 800a988:	2264      	movs	r2, #100	@ 0x64
 800a98a:	fb02 f303 	mul.w	r3, r2, r3
 800a98e:	1acb      	subs	r3, r1, r3
 800a990:	011b      	lsls	r3, r3, #4
 800a992:	3332      	adds	r3, #50	@ 0x32
 800a994:	4a33      	ldr	r2, [pc, #204]	@ (800aa64 <UART_SetConfig+0x4e4>)
 800a996:	fba2 2303 	umull	r2, r3, r2, r3
 800a99a:	095b      	lsrs	r3, r3, #5
 800a99c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a9a0:	441c      	add	r4, r3
 800a9a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a9aa:	677a      	str	r2, [r7, #116]	@ 0x74
 800a9ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	464b      	mov	r3, r9
 800a9b4:	1891      	adds	r1, r2, r2
 800a9b6:	60b9      	str	r1, [r7, #8]
 800a9b8:	415b      	adcs	r3, r3
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9c0:	4641      	mov	r1, r8
 800a9c2:	1851      	adds	r1, r2, r1
 800a9c4:	6039      	str	r1, [r7, #0]
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	414b      	adcs	r3, r1
 800a9ca:	607b      	str	r3, [r7, #4]
 800a9cc:	f04f 0200 	mov.w	r2, #0
 800a9d0:	f04f 0300 	mov.w	r3, #0
 800a9d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9d8:	4659      	mov	r1, fp
 800a9da:	00cb      	lsls	r3, r1, #3
 800a9dc:	4651      	mov	r1, sl
 800a9de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9e2:	4651      	mov	r1, sl
 800a9e4:	00ca      	lsls	r2, r1, #3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	4642      	mov	r2, r8
 800a9ee:	189b      	adds	r3, r3, r2
 800a9f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a9f2:	464b      	mov	r3, r9
 800a9f4:	460a      	mov	r2, r1
 800a9f6:	eb42 0303 	adc.w	r3, r2, r3
 800a9fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	663b      	str	r3, [r7, #96]	@ 0x60
 800aa06:	667a      	str	r2, [r7, #100]	@ 0x64
 800aa08:	f04f 0200 	mov.w	r2, #0
 800aa0c:	f04f 0300 	mov.w	r3, #0
 800aa10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800aa14:	4649      	mov	r1, r9
 800aa16:	008b      	lsls	r3, r1, #2
 800aa18:	4641      	mov	r1, r8
 800aa1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa1e:	4641      	mov	r1, r8
 800aa20:	008a      	lsls	r2, r1, #2
 800aa22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800aa26:	f7f6 faad 	bl	8000f84 <__aeabi_uldivmod>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	@ (800aa64 <UART_SetConfig+0x4e4>)
 800aa30:	fba3 1302 	umull	r1, r3, r3, r2
 800aa34:	095b      	lsrs	r3, r3, #5
 800aa36:	2164      	movs	r1, #100	@ 0x64
 800aa38:	fb01 f303 	mul.w	r3, r1, r3
 800aa3c:	1ad3      	subs	r3, r2, r3
 800aa3e:	011b      	lsls	r3, r3, #4
 800aa40:	3332      	adds	r3, #50	@ 0x32
 800aa42:	4a08      	ldr	r2, [pc, #32]	@ (800aa64 <UART_SetConfig+0x4e4>)
 800aa44:	fba2 2303 	umull	r2, r3, r2, r3
 800aa48:	095b      	lsrs	r3, r3, #5
 800aa4a:	f003 020f 	and.w	r2, r3, #15
 800aa4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4422      	add	r2, r4
 800aa56:	609a      	str	r2, [r3, #8]
}
 800aa58:	bf00      	nop
 800aa5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa64:	51eb851f 	.word	0x51eb851f

0800aa68 <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals(bme280_struct_t* BME, uint32_t* ut, uint32_t* up, uint32_t* uh)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	@ 0x30
 800aa6c:	af04      	add	r7, sp, #16
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 30);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6898      	ldr	r0, [r3, #8]
 800aa7a:	231e      	movs	r3, #30
 800aa7c:	9302      	str	r3, [sp, #8]
 800aa7e:	2301      	movs	r3, #1
 800aa80:	9301      	str	r3, [sp, #4]
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	2301      	movs	r3, #1
 800aa8a:	22f3      	movs	r2, #243	@ 0xf3
 800aa8c:	21ec      	movs	r1, #236	@ 0xec
 800aa8e:	f7fb ff85 	bl	800699c <HAL_I2C_Mem_Read>
 800aa92:	4603      	mov	r3, r0
 800aa94:	77fb      	strb	r3, [r7, #31]
	BME->flags.is_bme_updated_1 = 0;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	BME->flags.is_bme_updated_3 = 0;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	if((params[0] & 0x01) == 0x00)
 800aaa6:	7d3b      	ldrb	r3, [r7, #20]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d139      	bne.n	800ab24 <bme280_getVals+0xbc>
	{
		retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6898      	ldr	r0, [r3, #8]
 800aab4:	2314      	movs	r3, #20
 800aab6:	9302      	str	r3, [sp, #8]
 800aab8:	2308      	movs	r3, #8
 800aaba:	9301      	str	r3, [sp, #4]
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2301      	movs	r3, #1
 800aac4:	22f7      	movs	r2, #247	@ 0xf7
 800aac6:	21ec      	movs	r1, #236	@ 0xec
 800aac8:	f7fb ff68 	bl	800699c <HAL_I2C_Mem_Read>
 800aacc:	4603      	mov	r3, r0
 800aace:	77fb      	strb	r3, [r7, #31]
		if (retVal == HAL_OK){
 800aad0:	7ffb      	ldrb	r3, [r7, #31]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d126      	bne.n	800ab24 <bme280_getVals+0xbc>
			BME->flags.is_bme_updated_1 = 1;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			BME->flags.is_bme_updated_3 = 1;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			*ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	031a      	lsls	r2, r3, #12
 800aaea:	7e3b      	ldrb	r3, [r7, #24]
 800aaec:	011b      	lsls	r3, r3, #4
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	7e7a      	ldrb	r2, [r7, #25]
 800aaf2:	0912      	lsrs	r2, r2, #4
 800aaf4:	b2d2      	uxtb	r2, r2
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	461a      	mov	r2, r3
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	601a      	str	r2, [r3, #0]
			*up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800aafe:	7d3b      	ldrb	r3, [r7, #20]
 800ab00:	031a      	lsls	r2, r3, #12
 800ab02:	7d7b      	ldrb	r3, [r7, #21]
 800ab04:	011b      	lsls	r3, r3, #4
 800ab06:	4313      	orrs	r3, r2
 800ab08:	7dba      	ldrb	r2, [r7, #22]
 800ab0a:	0912      	lsrs	r2, r2, #4
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	461a      	mov	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	601a      	str	r2, [r3, #0]
			*uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 800ab16:	7ebb      	ldrb	r3, [r7, #26]
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	7efa      	ldrb	r2, [r7, #27]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	461a      	mov	r2, r3
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	601a      	str	r2, [r3, #0]
		}
	}
	UNUSED(retVal);
}
 800ab24:	bf00      	nop
 800ab26:	3720      	adds	r7, #32
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	0000      	movs	r0, r0
	...

0800ab30 <bme280_get_altitude>:

static void bme280_get_altitude(bme280_struct_t* BME)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
	float p_seaLevel = 1013.25;		//hPa
 800ab38:	4b31      	ldr	r3, [pc, #196]	@ (800ac00 <bme280_get_altitude+0xd0>)
 800ab3a:	60fb      	str	r3, [r7, #12]
	float alt = 44330.0 * (1.0 - pow((BME->datas.pressure / p_seaLevel), (1.0 / 5.255)));
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	ed93 7a04 	vldr	s14, [r3, #16]
 800ab42:	edd7 7a03 	vldr	s15, [r7, #12]
 800ab46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ab4a:	ee16 0a90 	vmov	r0, s13
 800ab4e:	f7f5 fd1b 	bl	8000588 <__aeabi_f2d>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 800abf0 <bme280_get_altitude+0xc0>
 800ab5a:	ec43 2b10 	vmov	d0, r2, r3
 800ab5e:	f006 fcfd 	bl	801155c <pow>
 800ab62:	ec53 2b10 	vmov	r2, r3, d0
 800ab66:	f04f 0000 	mov.w	r0, #0
 800ab6a:	4926      	ldr	r1, [pc, #152]	@ (800ac04 <bme280_get_altitude+0xd4>)
 800ab6c:	f7f5 fbac 	bl	80002c8 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4610      	mov	r0, r2
 800ab76:	4619      	mov	r1, r3
 800ab78:	a31f      	add	r3, pc, #124	@ (adr r3, 800abf8 <bme280_get_altitude+0xc8>)
 800ab7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7e:	f7f5 fd5b 	bl	8000638 <__aeabi_dmul>
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	4610      	mov	r0, r2
 800ab88:	4619      	mov	r1, r3
 800ab8a:	f7f6 f84d 	bl	8000c28 <__aeabi_d2f>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	60bb      	str	r3, [r7, #8]
	BME->datas.height = alt;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	68ba      	ldr	r2, [r7, #8]
 800ab96:	619a      	str	r2, [r3, #24]
	BME->datas.altitude = alt - BME->parameters->base_alt;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800aba0:	ed97 7a02 	vldr	s14, [r7, #8]
 800aba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	edc3 7a07 	vstr	s15, [r3, #28]
	if(BME->datas.altitude > BME->parameters->max_alt && BME->parameters->base_alt != 0.0)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	ed93 7a07 	vldr	s14, [r3, #28]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800abbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc4:	dc00      	bgt.n	800abc8 <bme280_get_altitude+0x98>
	{
		BME->parameters->max_alt = BME->datas.altitude;
	}
}
 800abc6:	e00d      	b.n	800abe4 <bme280_get_altitude+0xb4>
	if(BME->datas.altitude > BME->parameters->max_alt && BME->parameters->base_alt != 0.0)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800abd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800abd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abd8:	d004      	beq.n	800abe4 <bme280_get_altitude+0xb4>
		BME->parameters->max_alt = BME->datas.altitude;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	69d2      	ldr	r2, [r2, #28]
 800abe2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800abe4:	bf00      	nop
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	f3af 8000 	nop.w
 800abf0:	ccd9456c 	.word	0xccd9456c
 800abf4:	3fc85b95 	.word	0x3fc85b95
 800abf8:	00000000 	.word	0x00000000
 800abfc:	40e5a540 	.word	0x40e5a540
 800ac00:	447d5000 	.word	0x447d5000
 800ac04:	3ff00000 	.word	0x3ff00000

0800ac08 <bme280_config>:
void bme280_config(bme280_struct_t* BME)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b090      	sub	sp, #64	@ 0x40
 800ac0c:	af04      	add	r7, sp, #16
 800ac0e:	6078      	str	r0, [r7, #4]
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	BME->parameters->base_alt = 0.0;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f04f 0200 	mov.w	r2, #0
 800ac18:	625a      	str	r2, [r3, #36]	@ 0x24
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(BME->device_config.BME_I2C);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fb fd92 	bl	8006748 <HAL_I2C_DeInit>
	HAL_Delay(5);
 800ac24:	2005      	movs	r0, #5
 800ac26:	f7f9 ffed 	bl	8004c04 <HAL_Delay>
	HAL_I2C_Init(BME->device_config.BME_I2C);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fb fc46 	bl	80064c0 <HAL_I2C_Init>
	HAL_Delay(5);
 800ac34:	2005      	movs	r0, #5
 800ac36:	f7f9 ffe5 	bl	8004c04 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6898      	ldr	r0, [r3, #8]
 800ac3e:	23c8      	movs	r3, #200	@ 0xc8
 800ac40:	9302      	str	r3, [sp, #8]
 800ac42:	2319      	movs	r3, #25
 800ac44:	9301      	str	r3, [sp, #4]
 800ac46:	f107 030c 	add.w	r3, r7, #12
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	2288      	movs	r2, #136	@ 0x88
 800ac50:	21ec      	movs	r1, #236	@ 0xec
 800ac52:	f7fb fea3 	bl	800699c <HAL_I2C_Mem_Read>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800ac5c:	7b3b      	ldrb	r3, [r7, #12]
 800ac5e:	4619      	mov	r1, r3
 800ac60:	7b7b      	ldrb	r3, [r7, #13]
 800ac62:	021b      	lsls	r3, r3, #8
 800ac64:	b29a      	uxth	r2, r3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	b292      	uxth	r2, r2
 800ac6e:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	b219      	sxth	r1, r3
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	b21b      	sxth	r3, r3
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	b21a      	sxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	b212      	sxth	r2, r2
 800ac84:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 800ac86:	7c3b      	ldrb	r3, [r7, #16]
 800ac88:	b219      	sxth	r1, r3
 800ac8a:	7c7b      	ldrb	r3, [r7, #17]
 800ac8c:	b21b      	sxth	r3, r3
 800ac8e:	021b      	lsls	r3, r3, #8
 800ac90:	b21a      	sxth	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	b212      	sxth	r2, r2
 800ac9a:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800ac9c:	7cbb      	ldrb	r3, [r7, #18]
 800ac9e:	b21a      	sxth	r2, r3
 800aca0:	7cfb      	ldrb	r3, [r7, #19]
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	b21b      	sxth	r3, r3
 800aca8:	4313      	orrs	r3, r2
 800acaa:	b21a      	sxth	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	b292      	uxth	r2, r2
 800acb2:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 800acb4:	7d3b      	ldrb	r3, [r7, #20]
 800acb6:	b219      	sxth	r1, r3
 800acb8:	7d7b      	ldrb	r3, [r7, #21]
 800acba:	b21b      	sxth	r3, r3
 800acbc:	021b      	lsls	r3, r3, #8
 800acbe:	b21a      	sxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	430a      	orrs	r2, r1
 800acc6:	b212      	sxth	r2, r2
 800acc8:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800acca:	7dbb      	ldrb	r3, [r7, #22]
 800accc:	b219      	sxth	r1, r3
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	b21b      	sxth	r3, r3
 800acd2:	021b      	lsls	r3, r3, #8
 800acd4:	b21a      	sxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	b212      	sxth	r2, r2
 800acde:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 800ace0:	7e3b      	ldrb	r3, [r7, #24]
 800ace2:	b219      	sxth	r1, r3
 800ace4:	7e7b      	ldrb	r3, [r7, #25]
 800ace6:	b21b      	sxth	r3, r3
 800ace8:	021b      	lsls	r3, r3, #8
 800acea:	b21a      	sxth	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	b212      	sxth	r2, r2
 800acf4:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 800acf6:	7ebb      	ldrb	r3, [r7, #26]
 800acf8:	b219      	sxth	r1, r3
 800acfa:	7efb      	ldrb	r3, [r7, #27]
 800acfc:	b21b      	sxth	r3, r3
 800acfe:	021b      	lsls	r3, r3, #8
 800ad00:	b21a      	sxth	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	b212      	sxth	r2, r2
 800ad0a:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800ad0c:	7f3b      	ldrb	r3, [r7, #28]
 800ad0e:	b219      	sxth	r1, r3
 800ad10:	7f7b      	ldrb	r3, [r7, #29]
 800ad12:	b21b      	sxth	r3, r3
 800ad14:	021b      	lsls	r3, r3, #8
 800ad16:	b21a      	sxth	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	b212      	sxth	r2, r2
 800ad20:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 800ad22:	7fbb      	ldrb	r3, [r7, #30]
 800ad24:	b219      	sxth	r1, r3
 800ad26:	7ffb      	ldrb	r3, [r7, #31]
 800ad28:	b21b      	sxth	r3, r3
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	b21a      	sxth	r2, r3
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	430a      	orrs	r2, r1
 800ad34:	b212      	sxth	r2, r2
 800ad36:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 800ad38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad3c:	b219      	sxth	r1, r3
 800ad3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ad42:	b21b      	sxth	r3, r3
 800ad44:	021b      	lsls	r3, r3, #8
 800ad46:	b21a      	sxth	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	b212      	sxth	r2, r2
 800ad50:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800ad52:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ad56:	b219      	sxth	r1, r3
 800ad58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad5c:	b21b      	sxth	r3, r3
 800ad5e:	021b      	lsls	r3, r3, #8
 800ad60:	b21a      	sxth	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	430a      	orrs	r2, r1
 800ad68:	b212      	sxth	r2, r2
 800ad6a:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800ad74:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6898      	ldr	r0, [r3, #8]
 800ad7a:	2332      	movs	r3, #50	@ 0x32
 800ad7c:	9302      	str	r3, [sp, #8]
 800ad7e:	2307      	movs	r3, #7
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	f107 030c 	add.w	r3, r7, #12
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	2301      	movs	r3, #1
 800ad8a:	22e1      	movs	r2, #225	@ 0xe1
 800ad8c:	21ec      	movs	r1, #236	@ 0xec
 800ad8e:	f7fb fe05 	bl	800699c <HAL_I2C_Mem_Read>
 800ad92:	4603      	mov	r3, r0
 800ad94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800ad98:	7b3b      	ldrb	r3, [r7, #12]
 800ad9a:	b219      	sxth	r1, r3
 800ad9c:	7b7b      	ldrb	r3, [r7, #13]
 800ad9e:	b21b      	sxth	r3, r3
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	b21a      	sxth	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	b212      	sxth	r2, r2
 800adac:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	7bba      	ldrb	r2, [r7, #14]
 800adb4:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800adb6:	7c3b      	ldrb	r3, [r7, #16]
 800adb8:	b21b      	sxth	r3, r3
 800adba:	f003 030f 	and.w	r3, r3, #15
 800adbe:	b219      	sxth	r1, r3
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	b21b      	sxth	r3, r3
 800adc4:	011b      	lsls	r3, r3, #4
 800adc6:	b21a      	sxth	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	b212      	sxth	r2, r2
 800add0:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 800add2:	7c3b      	ldrb	r3, [r7, #16]
 800add4:	091b      	lsrs	r3, r3, #4
 800add6:	b2db      	uxtb	r3, r3
 800add8:	b219      	sxth	r1, r3
 800adda:	7c7b      	ldrb	r3, [r7, #17]
 800addc:	b21b      	sxth	r3, r3
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	b21a      	sxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	430a      	orrs	r2, r1
 800ade8:	b212      	sxth	r2, r2
 800adea:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 800adec:	7cba      	ldrb	r2, [r7, #18]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	b252      	sxtb	r2, r2
 800adf4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	uint8_t data_ctrl = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	72fb      	strb	r3, [r7, #11]
	data_ctrl = BME->device_config.over_sampling;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	795b      	ldrb	r3, [r3, #5]
 800ae00:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6898      	ldr	r0, [r3, #8]
 800ae06:	2332      	movs	r3, #50	@ 0x32
 800ae08:	9302      	str	r3, [sp, #8]
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	f107 030b 	add.w	r3, r7, #11
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	2301      	movs	r3, #1
 800ae16:	22f2      	movs	r2, #242	@ 0xf2
 800ae18:	21ec      	movs	r1, #236	@ 0xec
 800ae1a:	f7fb fcc5 	bl	80067a8 <HAL_I2C_Mem_Write>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_ctrl = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	72fb      	strb	r3, [r7, #11]
	data_ctrl = BME->device_config.mode | (BME->device_config.over_sampling << 2) | (BME->device_config.over_sampling << 5);																		//Mode has been chosed.
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	791b      	ldrb	r3, [r3, #4]
 800ae2c:	b25a      	sxtb	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	795b      	ldrb	r3, [r3, #5]
 800ae32:	b25b      	sxtb	r3, r3
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	b25b      	sxtb	r3, r3
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	b25a      	sxtb	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	795b      	ldrb	r3, [r3, #5]
 800ae40:	b25b      	sxtb	r3, r3
 800ae42:	015b      	lsls	r3, r3, #5
 800ae44:	b25b      	sxtb	r3, r3
 800ae46:	4313      	orrs	r3, r2
 800ae48:	b25b      	sxtb	r3, r3
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6898      	ldr	r0, [r3, #8]
 800ae52:	2332      	movs	r3, #50	@ 0x32
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	2301      	movs	r3, #1
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	f107 030b 	add.w	r3, r7, #11
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	2301      	movs	r3, #1
 800ae62:	22f4      	movs	r2, #244	@ 0xf4
 800ae64:	21ec      	movs	r1, #236	@ 0xec
 800ae66:	f7fb fc9f 	bl	80067a8 <HAL_I2C_Mem_Write>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_ctrl = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	72fb      	strb	r3, [r7, #11]
	data_ctrl = (BME->device_config.filter << 2) | (BME->device_config.period << 5);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	799b      	ldrb	r3, [r3, #6]
 800ae78:	b25b      	sxtb	r3, r3
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	b25a      	sxtb	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	79db      	ldrb	r3, [r3, #7]
 800ae82:	b25b      	sxtb	r3, r3
 800ae84:	015b      	lsls	r3, r3, #5
 800ae86:	b25b      	sxtb	r3, r3
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6898      	ldr	r0, [r3, #8]
 800ae94:	2332      	movs	r3, #50	@ 0x32
 800ae96:	9302      	str	r3, [sp, #8]
 800ae98:	2301      	movs	r3, #1
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	f107 030b 	add.w	r3, r7, #11
 800aea0:	9300      	str	r3, [sp, #0]
 800aea2:	2301      	movs	r3, #1
 800aea4:	22f5      	movs	r2, #245	@ 0xf5
 800aea6:	21ec      	movs	r1, #236	@ 0xec
 800aea8:	f7fb fc7e 	bl	80067a8 <HAL_I2C_Mem_Write>
 800aeac:	4603      	mov	r3, r0
 800aeae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	float base = 0.0;
 800aeb2:	f04f 0300 	mov.w	r3, #0
 800aeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_Delay(100);
 800aeb8:	2064      	movs	r0, #100	@ 0x64
 800aeba:	f7f9 fea3 	bl	8004c04 <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 800aebe:	2300      	movs	r3, #0
 800aec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aec2:	e011      	b.n	800aee8 <bme280_config+0x2e0>
	{
	  bme280_update(BME);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f853 	bl	800af70 <bme280_update>
	  base +=  BME->datas.altitude;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	edd3 7a07 	vldr	s15, [r3, #28]
 800aed0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800aed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aed8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	  HAL_Delay(30);
 800aedc:	201e      	movs	r0, #30
 800aede:	f7f9 fe91 	bl	8004c04 <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 800aee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee4:	3301      	adds	r3, #1
 800aee6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	2b1d      	cmp	r3, #29
 800aeec:	ddea      	ble.n	800aec4 <bme280_config+0x2bc>
	}
	BME->parameters->base_alt = (base / 30.0);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800aef6:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 800aefa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aefe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	BME->flags.is_bme_updated_2 = 1;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	bme280_update(BME);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f830 	bl	800af70 <bme280_update>
	BME->parameters->max_alt = 0.0;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f04f 0200 	mov.w	r2, #0
 800af18:	629a      	str	r2, [r3, #40]	@ 0x28

	UNUSED(retVal);
}
 800af1a:	bf00      	nop
 800af1c:	3730      	adds	r7, #48	@ 0x30
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <bme280_init>:

uint8_t bme280_init(bme280_struct_t* BME)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b088      	sub	sp, #32
 800af26:	af04      	add	r7, sp, #16
 800af28:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];
	if(BME->parameters == NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d106      	bne.n	800af40 <bme280_init+0x1e>
	{
		BME->parameters = malloc(sizeof(*BME->parameters));
 800af32:	202c      	movs	r0, #44	@ 0x2c
 800af34:	f001 fafe 	bl	800c534 <malloc>
 800af38:	4603      	mov	r3, r0
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	601a      	str	r2, [r3, #0]
	}
	HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 20);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6898      	ldr	r0, [r3, #8]
 800af44:	2314      	movs	r3, #20
 800af46:	9302      	str	r3, [sp, #8]
 800af48:	2301      	movs	r3, #1
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	f107 030c 	add.w	r3, r7, #12
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	2301      	movs	r3, #1
 800af54:	22d0      	movs	r2, #208	@ 0xd0
 800af56:	21ec      	movs	r1, #236	@ 0xec
 800af58:	f7fb fd20 	bl	800699c <HAL_I2C_Mem_Read>

	if(*buf == 0x60)
 800af5c:	7b3b      	ldrb	r3, [r7, #12]
 800af5e:	2b60      	cmp	r3, #96	@ 0x60
 800af60:	d101      	bne.n	800af66 <bme280_init+0x44>
		return 0;
 800af62:	2300      	movs	r3, #0
 800af64:	e000      	b.n	800af68 <bme280_init+0x46>

	return 1;
 800af66:	2301      	movs	r3, #1
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <bme280_update>:


void bme280_update(bme280_struct_t* BME){
 800af70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af74:	b0d8      	sub	sp, #352	@ 0x160
 800af76:	af00      	add	r7, sp, #0
 800af78:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int32_t var1_t, var2_t, T, adc_T;
	uint32_t	ut, up, uh;

	bme280_getVals(BME, &ut, &up, &uh);
 800af7c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800af80:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800af84:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800af88:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800af8c:	f7ff fd6c 	bl	800aa68 <bme280_getVals>

	if(BME->flags.is_bme_updated_1 == 1)
 800af90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af98:	2b01      	cmp	r3, #1
 800af9a:	f040 83b7 	bne.w	800b70c <bme280_update+0x79c>
	{
		//For tempereature
		adc_T =	ut;
 800af9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800afa2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800afa6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800afaa:	10da      	asrs	r2, r3, #3
 800afac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	1ad2      	subs	r2, r2, r3
 800afb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800afc2:	fb02 f303 	mul.w	r3, r2, r3
 800afc6:	12db      	asrs	r3, r3, #11
 800afc8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 800afcc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800afd0:	111a      	asrs	r2, r3, #4
 800afd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	881b      	ldrh	r3, [r3, #0]
 800afda:	1ad1      	subs	r1, r2, r3
 800afdc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800afe0:	111a      	asrs	r2, r3, #4
 800afe2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	fb01 f303 	mul.w	r3, r1, r3
 800aff0:	131a      	asrs	r2, r3, #12
 800aff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800affc:	fb02 f303 	mul.w	r3, r2, r3
 800b000:	139b      	asrs	r3, r3, #14
 800b002:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		int32_t t_fine = var1_t + var2_t;
 800b006:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800b00a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b00e:	4413      	add	r3, r2
 800b010:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
		T = (t_fine * 5 + 128) >> 8;
 800b014:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800b018:	4613      	mov	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	4413      	add	r3, r2
 800b01e:	3380      	adds	r3, #128	@ 0x80
 800b020:	121b      	asrs	r3, r3, #8
 800b022:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		BME->datas.temperature = (float)T / 100.0;
 800b026:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b032:	eddf 6abb 	vldr	s13, [pc, #748]	@ 800b320 <bme280_update+0x3b0>
 800b036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b03a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03e:	edc3 7a03 	vstr	s15, [r3, #12]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)up;
 800b042:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b046:	2200      	movs	r2, #0
 800b048:	653b      	str	r3, [r7, #80]	@ 0x50
 800b04a:	657a      	str	r2, [r7, #84]	@ 0x54
 800b04c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b050:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
		var1_p = ((int64_t)t_fine) - 128000;
 800b054:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b058:	17da      	asrs	r2, r3, #31
 800b05a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b05e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b062:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b066:	460b      	mov	r3, r1
 800b068:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 800b06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b06e:	4613      	mov	r3, r2
 800b070:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800b074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b076:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b07a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 800b07e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b082:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b086:	fb03 f102 	mul.w	r1, r3, r2
 800b08a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b08e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b092:	fb02 f303 	mul.w	r3, r2, r3
 800b096:	18ca      	adds	r2, r1, r3
 800b098:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b09c:	fba3 4503 	umull	r4, r5, r3, r3
 800b0a0:	1953      	adds	r3, r2, r5
 800b0a2:	461d      	mov	r5, r3
 800b0a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b0ae:	b21b      	sxth	r3, r3
 800b0b0:	17da      	asrs	r2, r3, #31
 800b0b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0b6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b0ba:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	fb03 f205 	mul.w	r2, r3, r5
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	fb04 f303 	mul.w	r3, r4, r3
 800b0ca:	4413      	add	r3, r2
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	fba4 ab02 	umull	sl, fp, r4, r2
 800b0d2:	445b      	add	r3, fp
 800b0d4:	469b      	mov	fp, r3
 800b0d6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
 800b0da:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 800b0de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b0e8:	b21b      	sxth	r3, r3
 800b0ea:	17da      	asrs	r2, r3, #31
 800b0ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b0f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b0f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b0f8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	fb02 f203 	mul.w	r2, r2, r3
 800b102:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b106:	4621      	mov	r1, r4
 800b108:	fb01 f303 	mul.w	r3, r1, r3
 800b10c:	441a      	add	r2, r3
 800b10e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b112:	4621      	mov	r1, r4
 800b114:	fba3 8901 	umull	r8, r9, r3, r1
 800b118:	eb02 0309 	add.w	r3, r2, r9
 800b11c:	4699      	mov	r9, r3
 800b11e:	f04f 0000 	mov.w	r0, #0
 800b122:	f04f 0100 	mov.w	r1, #0
 800b126:	ea4f 4149 	mov.w	r1, r9, lsl #17
 800b12a:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 800b12e:	ea4f 4048 	mov.w	r0, r8, lsl #17
 800b132:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b136:	1814      	adds	r4, r2, r0
 800b138:	643c      	str	r4, [r7, #64]	@ 0x40
 800b13a:	414b      	adcs	r3, r1
 800b13c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b13e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800b142:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 800b146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b150:	b21b      	sxth	r3, r3
 800b152:	17da      	asrs	r2, r3, #31
 800b154:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b158:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b15c:	f04f 0000 	mov.w	r0, #0
 800b160:	f04f 0100 	mov.w	r1, #0
 800b164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b168:	00d9      	lsls	r1, r3, #3
 800b16a:	2000      	movs	r0, #0
 800b16c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b170:	1814      	adds	r4, r2, r0
 800b172:	63bc      	str	r4, [r7, #56]	@ 0x38
 800b174:	414b      	adcs	r3, r1
 800b176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b178:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b17c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 800b180:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b184:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b188:	fb03 f102 	mul.w	r1, r3, r2
 800b18c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b190:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b194:	fb02 f303 	mul.w	r3, r2, r3
 800b198:	18ca      	adds	r2, r1, r3
 800b19a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b19e:	fba3 1303 	umull	r1, r3, r3, r3
 800b1a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1b0:	18d3      	adds	r3, r2, r3
 800b1b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b1c0:	b21b      	sxth	r3, r3
 800b1c2:	17da      	asrs	r2, r3, #31
 800b1c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b1c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b1cc:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b1d6:	4642      	mov	r2, r8
 800b1d8:	fb02 f203 	mul.w	r2, r2, r3
 800b1dc:	464b      	mov	r3, r9
 800b1de:	4621      	mov	r1, r4
 800b1e0:	fb01 f303 	mul.w	r3, r1, r3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	4641      	mov	r1, r8
 800b1ea:	fba2 1201 	umull	r1, r2, r2, r1
 800b1ee:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800b1f2:	460a      	mov	r2, r1
 800b1f4:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800b1f8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b202:	f04f 0000 	mov.w	r0, #0
 800b206:	f04f 0100 	mov.w	r1, #0
 800b20a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800b20e:	4623      	mov	r3, r4
 800b210:	0a18      	lsrs	r0, r3, #8
 800b212:	462b      	mov	r3, r5
 800b214:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b218:	462b      	mov	r3, r5
 800b21a:	1219      	asrs	r1, r3, #8
 800b21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b226:	b21b      	sxth	r3, r3
 800b228:	17da      	asrs	r2, r3, #31
 800b22a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b22e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b232:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b236:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b23a:	464a      	mov	r2, r9
 800b23c:	fb02 f203 	mul.w	r2, r2, r3
 800b240:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b244:	4644      	mov	r4, r8
 800b246:	fb04 f303 	mul.w	r3, r4, r3
 800b24a:	441a      	add	r2, r3
 800b24c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b250:	4644      	mov	r4, r8
 800b252:	fba3 4304 	umull	r4, r3, r3, r4
 800b256:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b25a:	4623      	mov	r3, r4
 800b25c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b264:	18d3      	adds	r3, r2, r3
 800b266:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b26a:	f04f 0200 	mov.w	r2, #0
 800b26e:	f04f 0300 	mov.w	r3, #0
 800b272:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800b276:	464c      	mov	r4, r9
 800b278:	0323      	lsls	r3, r4, #12
 800b27a:	4644      	mov	r4, r8
 800b27c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800b280:	4644      	mov	r4, r8
 800b282:	0322      	lsls	r2, r4, #12
 800b284:	1884      	adds	r4, r0, r2
 800b286:	633c      	str	r4, [r7, #48]	@ 0x30
 800b288:	eb41 0303 	adc.w	r3, r1, r3
 800b28c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b28e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b292:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 800b296:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b29a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800b29e:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800b2a2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800b2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	88db      	ldrh	r3, [r3, #6]
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b2b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b2ba:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b2be:	462b      	mov	r3, r5
 800b2c0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800b2c4:	4642      	mov	r2, r8
 800b2c6:	fb02 f203 	mul.w	r2, r2, r3
 800b2ca:	464b      	mov	r3, r9
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	fb01 f303 	mul.w	r3, r1, r3
 800b2d2:	4413      	add	r3, r2
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	fba2 1201 	umull	r1, r2, r2, r1
 800b2dc:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b2e0:	460a      	mov	r2, r1
 800b2e2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800b2e6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b2f0:	f04f 0200 	mov.w	r2, #0
 800b2f4:	f04f 0300 	mov.w	r3, #0
 800b2f8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	104a      	asrs	r2, r1, #1
 800b300:	4629      	mov	r1, r5
 800b302:	17cb      	asrs	r3, r1, #31
 800b304:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		if(var1_p == 0)
 800b308:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b30c:	4313      	orrs	r3, r2
 800b30e:	d109      	bne.n	800b324 <bme280_update+0x3b4>
		{
			P = 0;
 800b310:	f04f 0200 	mov.w	r2, #0
 800b314:	f04f 0300 	mov.w	r3, #0
 800b318:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 800b31c:	e14e      	b.n	800b5bc <bme280_update+0x64c>
 800b31e:	bf00      	nop
 800b320:	42c80000 	.word	0x42c80000
		}else
		{
		P = 1048576 - adc_P;
 800b324:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800b328:	2100      	movs	r1, #0
 800b32a:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 800b32e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b330:	eb61 0303 	sbc.w	r3, r1, r3
 800b334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b336:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b33a:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 800b33e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b342:	f04f 0000 	mov.w	r0, #0
 800b346:	f04f 0100 	mov.w	r1, #0
 800b34a:	07d9      	lsls	r1, r3, #31
 800b34c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800b350:	07d0      	lsls	r0, r2, #31
 800b352:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b356:	1a84      	subs	r4, r0, r2
 800b358:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800b35c:	eb61 0303 	sbc.w	r3, r1, r3
 800b360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b364:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800b368:	4622      	mov	r2, r4
 800b36a:	462b      	mov	r3, r5
 800b36c:	1891      	adds	r1, r2, r2
 800b36e:	6239      	str	r1, [r7, #32]
 800b370:	415b      	adcs	r3, r3
 800b372:	627b      	str	r3, [r7, #36]	@ 0x24
 800b374:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b378:	4621      	mov	r1, r4
 800b37a:	1851      	adds	r1, r2, r1
 800b37c:	61b9      	str	r1, [r7, #24]
 800b37e:	4629      	mov	r1, r5
 800b380:	414b      	adcs	r3, r1
 800b382:	61fb      	str	r3, [r7, #28]
 800b384:	f04f 0200 	mov.w	r2, #0
 800b388:	f04f 0300 	mov.w	r3, #0
 800b38c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800b390:	4649      	mov	r1, r9
 800b392:	018b      	lsls	r3, r1, #6
 800b394:	4641      	mov	r1, r8
 800b396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b39a:	4641      	mov	r1, r8
 800b39c:	018a      	lsls	r2, r1, #6
 800b39e:	4641      	mov	r1, r8
 800b3a0:	1889      	adds	r1, r1, r2
 800b3a2:	6139      	str	r1, [r7, #16]
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	eb43 0101 	adc.w	r1, r3, r1
 800b3aa:	6179      	str	r1, [r7, #20]
 800b3ac:	f04f 0200 	mov.w	r2, #0
 800b3b0:	f04f 0300 	mov.w	r3, #0
 800b3b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	008b      	lsls	r3, r1, #2
 800b3bc:	4641      	mov	r1, r8
 800b3be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3c2:	4641      	mov	r1, r8
 800b3c4:	008a      	lsls	r2, r1, #2
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	189b      	adds	r3, r3, r2
 800b3d0:	60bb      	str	r3, [r7, #8]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	462a      	mov	r2, r5
 800b3d6:	eb42 0303 	adc.w	r3, r2, r3
 800b3da:	60fb      	str	r3, [r7, #12]
 800b3dc:	f04f 0200 	mov.w	r2, #0
 800b3e0:	f04f 0300 	mov.w	r3, #0
 800b3e4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	008b      	lsls	r3, r1, #2
 800b3ec:	4641      	mov	r1, r8
 800b3ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3f2:	4641      	mov	r1, r8
 800b3f4:	008a      	lsls	r2, r1, #2
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	189b      	adds	r3, r3, r2
 800b400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b404:	462b      	mov	r3, r5
 800b406:	460a      	mov	r2, r1
 800b408:	eb42 0303 	adc.w	r3, r2, r3
 800b40c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b410:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b414:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b418:	f7f5 fd64 	bl	8000ee4 <__aeabi_ldivmod>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 800b424:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b42e:	b21b      	sxth	r3, r3
 800b430:	17da      	asrs	r2, r3, #31
 800b432:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b434:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b436:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b43a:	f04f 0000 	mov.w	r0, #0
 800b43e:	f04f 0100 	mov.w	r1, #0
 800b442:	0b50      	lsrs	r0, r2, #13
 800b444:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b448:	1359      	asrs	r1, r3, #13
 800b44a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800b44e:	462b      	mov	r3, r5
 800b450:	fb00 f203 	mul.w	r2, r0, r3
 800b454:	4623      	mov	r3, r4
 800b456:	fb03 f301 	mul.w	r3, r3, r1
 800b45a:	4413      	add	r3, r2
 800b45c:	4622      	mov	r2, r4
 800b45e:	fba2 1200 	umull	r1, r2, r2, r0
 800b462:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b466:	460a      	mov	r2, r1
 800b468:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800b46c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b470:	4413      	add	r3, r2
 800b472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b476:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b47a:	f04f 0000 	mov.w	r0, #0
 800b47e:	f04f 0100 	mov.w	r1, #0
 800b482:	0b50      	lsrs	r0, r2, #13
 800b484:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b488:	1359      	asrs	r1, r3, #13
 800b48a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800b48e:	462b      	mov	r3, r5
 800b490:	fb00 f203 	mul.w	r2, r0, r3
 800b494:	4623      	mov	r3, r4
 800b496:	fb03 f301 	mul.w	r3, r3, r1
 800b49a:	4413      	add	r3, r2
 800b49c:	4622      	mov	r2, r4
 800b49e:	fba2 1200 	umull	r1, r2, r2, r0
 800b4a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b4a6:	460a      	mov	r2, r1
 800b4a8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800b4ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b4b6:	f04f 0200 	mov.w	r2, #0
 800b4ba:	f04f 0300 	mov.w	r3, #0
 800b4be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800b4c2:	4621      	mov	r1, r4
 800b4c4:	0e4a      	lsrs	r2, r1, #25
 800b4c6:	4629      	mov	r1, r5
 800b4c8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	164b      	asrs	r3, r1, #25
 800b4d0:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800b4d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b4de:	b21b      	sxth	r3, r3
 800b4e0:	17da      	asrs	r2, r3, #31
 800b4e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4e4:	677a      	str	r2, [r7, #116]	@ 0x74
 800b4e6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b4ea:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	fb02 f203 	mul.w	r2, r2, r3
 800b4f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	fb01 f303 	mul.w	r3, r1, r3
 800b4fe:	4413      	add	r3, r2
 800b500:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b504:	4621      	mov	r1, r4
 800b506:	fba2 1201 	umull	r1, r2, r2, r1
 800b50a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b50e:	460a      	mov	r2, r1
 800b510:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800b514:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b518:	4413      	add	r3, r2
 800b51a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b51e:	f04f 0200 	mov.w	r2, #0
 800b522:	f04f 0300 	mov.w	r3, #0
 800b526:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800b52a:	4621      	mov	r1, r4
 800b52c:	0cca      	lsrs	r2, r1, #19
 800b52e:	4629      	mov	r1, r5
 800b530:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b534:	4629      	mov	r1, r5
 800b536:	14cb      	asrs	r3, r1, #19
 800b538:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 800b53c:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800b540:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b544:	1884      	adds	r4, r0, r2
 800b546:	66bc      	str	r4, [r7, #104]	@ 0x68
 800b548:	eb41 0303 	adc.w	r3, r1, r3
 800b54c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b54e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b552:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800b556:	4621      	mov	r1, r4
 800b558:	1889      	adds	r1, r1, r2
 800b55a:	6639      	str	r1, [r7, #96]	@ 0x60
 800b55c:	4629      	mov	r1, r5
 800b55e:	eb43 0101 	adc.w	r1, r3, r1
 800b562:	6679      	str	r1, [r7, #100]	@ 0x64
 800b564:	f04f 0000 	mov.w	r0, #0
 800b568:	f04f 0100 	mov.w	r1, #0
 800b56c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b570:	4623      	mov	r3, r4
 800b572:	0a18      	lsrs	r0, r3, #8
 800b574:	462b      	mov	r3, r5
 800b576:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b57a:	462b      	mov	r3, r5
 800b57c:	1219      	asrs	r1, r3, #8
 800b57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b588:	b21b      	sxth	r3, r3
 800b58a:	17da      	asrs	r2, r3, #31
 800b58c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b58e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b590:	f04f 0200 	mov.w	r2, #0
 800b594:	f04f 0300 	mov.w	r3, #0
 800b598:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 800b59c:	464c      	mov	r4, r9
 800b59e:	0123      	lsls	r3, r4, #4
 800b5a0:	4644      	mov	r4, r8
 800b5a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800b5a6:	4644      	mov	r4, r8
 800b5a8:	0122      	lsls	r2, r4, #4
 800b5aa:	1884      	adds	r4, r0, r2
 800b5ac:	603c      	str	r4, [r7, #0]
 800b5ae:	eb41 0303 	adc.w	r3, r1, r3
 800b5b2:	607b      	str	r3, [r7, #4]
 800b5b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b5b8:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		}

		BME->datas.pressure = ((float)P / 256.0 / 100.0);
 800b5bc:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800b5c0:	f7f5 fc52 	bl	8000e68 <__aeabi_l2f>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f4 ffde 	bl	8000588 <__aeabi_f2d>
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	4b51      	ldr	r3, [pc, #324]	@ (800b718 <bme280_update+0x7a8>)
 800b5d2:	f7f5 f95b 	bl	800088c <__aeabi_ddiv>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4610      	mov	r0, r2
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f04f 0200 	mov.w	r2, #0
 800b5e2:	4b4e      	ldr	r3, [pc, #312]	@ (800b71c <bme280_update+0x7ac>)
 800b5e4:	f7f5 f952 	bl	800088c <__aeabi_ddiv>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	4619      	mov	r1, r3
 800b5f0:	f7f5 fb1a 	bl	8000c28 <__aeabi_d2f>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fa:	611a      	str	r2, [r3, #16]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = uh;
 800b5fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b600:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		var_h = (t_fine - ((int32_t)76800));
 800b604:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b608:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800b60c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 800b610:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b614:	039a      	lsls	r2, r3, #14
 800b616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800b620:	051b      	lsls	r3, r3, #20
 800b622:	1ad2      	subs	r2, r2, r3
 800b624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b62e:	4619      	mov	r1, r3
 800b630:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b634:	fb01 f303 	mul.w	r3, r1, r3
 800b638:	1ad3      	subs	r3, r2, r3
 800b63a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b63e:	0bdb      	lsrs	r3, r3, #15
 800b640:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b644:	6812      	ldr	r2, [r2, #0]
 800b646:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800b64a:	4611      	mov	r1, r2
 800b64c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b650:	fb01 f202 	mul.w	r2, r1, r2
 800b654:	0a92      	lsrs	r2, r2, #10
 800b656:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800b65a:	6809      	ldr	r1, [r1, #0]
 800b65c:	7f09      	ldrb	r1, [r1, #28]
 800b65e:	4608      	mov	r0, r1
 800b660:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800b664:	fb00 f101 	mul.w	r1, r0, r1
 800b668:	0ac9      	lsrs	r1, r1, #11
 800b66a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b66e:	fb01 f202 	mul.w	r2, r1, r2
 800b672:	0a92      	lsrs	r2, r2, #10
 800b674:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b678:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800b67c:	6809      	ldr	r1, [r1, #0]
 800b67e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800b682:	fb01 f202 	mul.w	r2, r1, r2
 800b686:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b68a:	0b92      	lsrs	r2, r2, #14
 800b68c:	fb02 f303 	mul.w	r3, r2, r3
 800b690:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 800b694:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b698:	0bdb      	lsrs	r3, r3, #15
 800b69a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b69e:	0bd2      	lsrs	r2, r2, #15
 800b6a0:	fb02 f303 	mul.w	r3, r2, r3
 800b6a4:	09db      	lsrs	r3, r3, #7
 800b6a6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b6aa:	6812      	ldr	r2, [r2, #0]
 800b6ac:	7e12      	ldrb	r2, [r2, #24]
 800b6ae:	fb02 f303 	mul.w	r3, r2, r3
 800b6b2:	091b      	lsrs	r3, r3, #4
 800b6b4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800b6be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b6c2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800b6c6:	bf28      	it	cs
 800b6c8:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 800b6cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		BME->datas.humidity = ((float)(var_h >> 12)) / 1024.0;
 800b6d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b6d4:	0b1b      	lsrs	r3, r3, #12
 800b6d6:	ee07 3a90 	vmov	s15, r3
 800b6da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b6de:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800b720 <bme280_update+0x7b0>
 800b6e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6ea:	edc3 7a05 	vstr	s15, [r3, #20]

		// Get time of update.
		BME->datas.time_of_update = HAL_GetTick();
 800b6ee:	f7f9 fa7d 	bl	8004bec <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f8:	625a      	str	r2, [r3, #36]	@ 0x24

		//get altitude
		bme280_get_altitude(BME);
 800b6fa:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800b6fe:	f7ff fa17 	bl	800ab30 <bme280_get_altitude>
		BME->flags.is_bme_updated_1 = 0;
 800b702:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b706:	2200      	movs	r2, #0
 800b708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

}
 800b70c:	bf00      	nop
 800b70e:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800b712:	46bd      	mov	sp, r7
 800b714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b718:	40700000 	.word	0x40700000
 800b71c:	40590000 	.word	0x40590000
 800b720:	44800000 	.word	0x44800000

0800b724 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af04      	add	r7, sp, #16
 800b72a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800b73c:	4b23      	ldr	r3, [pc, #140]	@ (800b7cc <bmi088_init+0xa8>)
 800b73e:	2200      	movs	r2, #0
 800b740:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 800b742:	4b23      	ldr	r3, [pc, #140]	@ (800b7d0 <bmi088_init+0xac>)
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800b748:	2300      	movs	r3, #0
 800b74a:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d107      	bne.n	800b764 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 800b754:	2101      	movs	r1, #1
 800b756:	2018      	movs	r0, #24
 800b758:	f000 fed0 	bl	800c4fc <calloc>
 800b75c:	4603      	mov	r3, r0
 800b75e:	461a      	mov	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68d8      	ldr	r0, [r3, #12]
 800b768:	2332      	movs	r3, #50	@ 0x32
 800b76a:	9302      	str	r3, [sp, #8]
 800b76c:	2301      	movs	r3, #1
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	f107 030c 	add.w	r3, r7, #12
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	2301      	movs	r3, #1
 800b778:	2200      	movs	r2, #0
 800b77a:	2130      	movs	r1, #48	@ 0x30
 800b77c:	f7fb f90e 	bl	800699c <HAL_I2C_Mem_Read>
 800b780:	4603      	mov	r3, r0
 800b782:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68d8      	ldr	r0, [r3, #12]
 800b788:	2332      	movs	r3, #50	@ 0x32
 800b78a:	9302      	str	r3, [sp, #8]
 800b78c:	2301      	movs	r3, #1
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	f107 030c 	add.w	r3, r7, #12
 800b794:	3301      	adds	r3, #1
 800b796:	9300      	str	r3, [sp, #0]
 800b798:	2301      	movs	r3, #1
 800b79a:	2200      	movs	r2, #0
 800b79c:	21d0      	movs	r1, #208	@ 0xd0
 800b79e:	f7fb f8fd 	bl	800699c <HAL_I2C_Mem_Read>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 800b7a6:	7b3b      	ldrb	r3, [r7, #12]
 800b7a8:	2b1e      	cmp	r3, #30
 800b7aa:	d003      	beq.n	800b7b4 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 800b7b4:	7b7b      	ldrb	r3, [r7, #13]
 800b7b6:	2b0f      	cmp	r3, #15
 800b7b8:	d003      	beq.n	800b7c2 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	f043 0302 	orr.w	r3, r3, #2
 800b7c0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20001ad8 	.word	0x20001ad8
 800b7d0:	20001ad9 	.word	0x20001ad9

0800b7d4 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af04      	add	r7, sp, #16
 800b7da:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7f9 ff37 	bl	8005656 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7f9 ff31 	bl	8005656 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68d8      	ldr	r0, [r3, #12]
 800b800:	2364      	movs	r3, #100	@ 0x64
 800b802:	9302      	str	r3, [sp, #8]
 800b804:	2301      	movs	r3, #1
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	f107 030c 	add.w	r3, r7, #12
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	2301      	movs	r3, #1
 800b810:	227c      	movs	r2, #124	@ 0x7c
 800b812:	2130      	movs	r1, #48	@ 0x30
 800b814:	f7fa ffc8 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b818:	4603      	mov	r3, r0
 800b81a:	461a      	mov	r2, r3
 800b81c:	7bfb      	ldrb	r3, [r7, #15]
 800b81e:	4313      	orrs	r3, r2
 800b820:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 800b822:	2300      	movs	r3, #0
 800b824:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68d8      	ldr	r0, [r3, #12]
 800b82a:	2364      	movs	r3, #100	@ 0x64
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	2301      	movs	r3, #1
 800b830:	9301      	str	r3, [sp, #4]
 800b832:	f107 030c 	add.w	r3, r7, #12
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	2301      	movs	r3, #1
 800b83a:	227d      	movs	r2, #125	@ 0x7d
 800b83c:	2130      	movs	r1, #48	@ 0x30
 800b83e:	f7fa ffb3 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b842:	4603      	mov	r3, r0
 800b844:	461a      	mov	r2, r3
 800b846:	7bfb      	ldrb	r3, [r7, #15]
 800b848:	4313      	orrs	r3, r2
 800b84a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800b84c:	2014      	movs	r0, #20
 800b84e:	f7f9 f9d9 	bl	8004c04 <HAL_Delay>

	buf[0] = ACC_RESET;
 800b852:	23b6      	movs	r3, #182	@ 0xb6
 800b854:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68d8      	ldr	r0, [r3, #12]
 800b85a:	2364      	movs	r3, #100	@ 0x64
 800b85c:	9302      	str	r3, [sp, #8]
 800b85e:	2301      	movs	r3, #1
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	f107 030c 	add.w	r3, r7, #12
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	2301      	movs	r3, #1
 800b86a:	227e      	movs	r2, #126	@ 0x7e
 800b86c:	2130      	movs	r1, #48	@ 0x30
 800b86e:	f7fa ff9b 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b872:	4603      	mov	r3, r0
 800b874:	461a      	mov	r2, r3
 800b876:	7bfb      	ldrb	r3, [r7, #15]
 800b878:	4313      	orrs	r3, r2
 800b87a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d002      	beq.n	800b888 <bmi088_config+0xb4>
 800b882:	4bb4      	ldr	r3, [pc, #720]	@ (800bb54 <bmi088_config+0x380>)
 800b884:	22a0      	movs	r2, #160	@ 0xa0
 800b886:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800b888:	200a      	movs	r0, #10
 800b88a:	f7f9 f9bb 	bl	8004c04 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800b88e:	23b0      	movs	r3, #176	@ 0xb0
 800b890:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	68d8      	ldr	r0, [r3, #12]
 800b896:	2364      	movs	r3, #100	@ 0x64
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	2301      	movs	r3, #1
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	f107 030c 	add.w	r3, r7, #12
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	227e      	movs	r2, #126	@ 0x7e
 800b8a8:	2130      	movs	r1, #48	@ 0x30
 800b8aa:	f7fa ff7d 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b8b8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <bmi088_config+0xf0>
 800b8be:	4ba5      	ldr	r3, [pc, #660]	@ (800bb54 <bmi088_config+0x380>)
 800b8c0:	22a5      	movs	r2, #165	@ 0xa5
 800b8c2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800b8c4:	200a      	movs	r0, #10
 800b8c6:	f7f9 f99d 	bl	8004c04 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800b8ca:	23b6      	movs	r3, #182	@ 0xb6
 800b8cc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	68d8      	ldr	r0, [r3, #12]
 800b8d2:	2364      	movs	r3, #100	@ 0x64
 800b8d4:	9302      	str	r3, [sp, #8]
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	9301      	str	r3, [sp, #4]
 800b8da:	f107 030c 	add.w	r3, r7, #12
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	2214      	movs	r2, #20
 800b8e4:	21d0      	movs	r1, #208	@ 0xd0
 800b8e6:	f7fa ff5f 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	7bfb      	ldrb	r3, [r7, #15]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b8f4:	7bfb      	ldrb	r3, [r7, #15]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <bmi088_config+0x12c>
 800b8fa:	4b96      	ldr	r3, [pc, #600]	@ (800bb54 <bmi088_config+0x380>)
 800b8fc:	22aa      	movs	r2, #170	@ 0xaa
 800b8fe:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800b900:	200a      	movs	r0, #10
 800b902:	f7f9 f97f 	bl	8004c04 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	7a9b      	ldrb	r3, [r3, #10]
 800b90a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	68d8      	ldr	r0, [r3, #12]
 800b910:	2364      	movs	r3, #100	@ 0x64
 800b912:	9302      	str	r3, [sp, #8]
 800b914:	2301      	movs	r3, #1
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	f107 030c 	add.w	r3, r7, #12
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	2301      	movs	r3, #1
 800b920:	220f      	movs	r2, #15
 800b922:	21d0      	movs	r1, #208	@ 0xd0
 800b924:	f7fa ff40 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	4313      	orrs	r3, r2
 800b930:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b932:	7bfb      	ldrb	r3, [r7, #15]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <bmi088_config+0x16a>
 800b938:	4b86      	ldr	r3, [pc, #536]	@ (800bb54 <bmi088_config+0x380>)
 800b93a:	22b0      	movs	r2, #176	@ 0xb0
 800b93c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	7a5b      	ldrb	r3, [r3, #9]
 800b942:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68d8      	ldr	r0, [r3, #12]
 800b948:	2314      	movs	r3, #20
 800b94a:	9302      	str	r3, [sp, #8]
 800b94c:	2301      	movs	r3, #1
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	f107 030c 	add.w	r3, r7, #12
 800b954:	9300      	str	r3, [sp, #0]
 800b956:	2301      	movs	r3, #1
 800b958:	2210      	movs	r2, #16
 800b95a:	21d0      	movs	r1, #208	@ 0xd0
 800b95c:	f7fa ff24 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b960:	4603      	mov	r3, r0
 800b962:	461a      	mov	r2, r3
 800b964:	7bfb      	ldrb	r3, [r7, #15]
 800b966:	4313      	orrs	r3, r2
 800b968:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d002      	beq.n	800b976 <bmi088_config+0x1a2>
 800b970:	4b78      	ldr	r3, [pc, #480]	@ (800bb54 <bmi088_config+0x380>)
 800b972:	22b4      	movs	r2, #180	@ 0xb4
 800b974:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7a1b      	ldrb	r3, [r3, #8]
 800b97a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68d8      	ldr	r0, [r3, #12]
 800b980:	2314      	movs	r3, #20
 800b982:	9302      	str	r3, [sp, #8]
 800b984:	2301      	movs	r3, #1
 800b986:	9301      	str	r3, [sp, #4]
 800b988:	f107 030c 	add.w	r3, r7, #12
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	2301      	movs	r3, #1
 800b990:	2211      	movs	r2, #17
 800b992:	21d0      	movs	r1, #208	@ 0xd0
 800b994:	f7fa ff08 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b998:	4603      	mov	r3, r0
 800b99a:	461a      	mov	r2, r3
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <bmi088_config+0x1da>
 800b9a8:	4b6a      	ldr	r3, [pc, #424]	@ (800bb54 <bmi088_config+0x380>)
 800b9aa:	22b8      	movs	r2, #184	@ 0xb8
 800b9ac:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800b9ae:	2014      	movs	r0, #20
 800b9b0:	f7f9 f928 	bl	8004c04 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 800b9b4:	2380      	movs	r3, #128	@ 0x80
 800b9b6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68d8      	ldr	r0, [r3, #12]
 800b9bc:	2314      	movs	r3, #20
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	9301      	str	r3, [sp, #4]
 800b9c4:	f107 030c 	add.w	r3, r7, #12
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	2215      	movs	r2, #21
 800b9ce:	21d0      	movs	r1, #208	@ 0xd0
 800b9d0:	f7fa feea 	bl	80067a8 <HAL_I2C_Mem_Write>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	7bfb      	ldrb	r3, [r7, #15]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <bmi088_config+0x216>
 800b9e4:	4b5b      	ldr	r3, [pc, #364]	@ (800bb54 <bmi088_config+0x380>)
 800b9e6:	22be      	movs	r2, #190	@ 0xbe
 800b9e8:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800b9ea:	2305      	movs	r3, #5
 800b9ec:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68d8      	ldr	r0, [r3, #12]
 800b9f2:	2314      	movs	r3, #20
 800b9f4:	9302      	str	r3, [sp, #8]
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	f107 030c 	add.w	r3, r7, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2301      	movs	r3, #1
 800ba02:	2216      	movs	r2, #22
 800ba04:	21d0      	movs	r1, #208	@ 0xd0
 800ba06:	f7fa fecf 	bl	80067a8 <HAL_I2C_Mem_Write>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <bmi088_config+0x24c>
 800ba1a:	4b4e      	ldr	r3, [pc, #312]	@ (800bb54 <bmi088_config+0x380>)
 800ba1c:	22c2      	movs	r2, #194	@ 0xc2
 800ba1e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 800ba20:	2381      	movs	r3, #129	@ 0x81
 800ba22:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	68d8      	ldr	r0, [r3, #12]
 800ba28:	2314      	movs	r3, #20
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	f107 030c 	add.w	r3, r7, #12
 800ba34:	9300      	str	r3, [sp, #0]
 800ba36:	2301      	movs	r3, #1
 800ba38:	2218      	movs	r2, #24
 800ba3a:	21d0      	movs	r1, #208	@ 0xd0
 800ba3c:	f7fa feb4 	bl	80067a8 <HAL_I2C_Mem_Write>
 800ba40:	4603      	mov	r3, r0
 800ba42:	461a      	mov	r2, r3
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
 800ba46:	4313      	orrs	r3, r2
 800ba48:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d002      	beq.n	800ba56 <bmi088_config+0x282>
 800ba50:	4b40      	ldr	r3, [pc, #256]	@ (800bb54 <bmi088_config+0x380>)
 800ba52:	22c6      	movs	r2, #198	@ 0xc6
 800ba54:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800ba56:	2304      	movs	r3, #4
 800ba58:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68d8      	ldr	r0, [r3, #12]
 800ba5e:	2314      	movs	r3, #20
 800ba60:	9302      	str	r3, [sp, #8]
 800ba62:	2301      	movs	r3, #1
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	f107 030c 	add.w	r3, r7, #12
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	227d      	movs	r2, #125	@ 0x7d
 800ba70:	2130      	movs	r1, #48	@ 0x30
 800ba72:	f7fa fe99 	bl	80067a8 <HAL_I2C_Mem_Write>
 800ba76:	4603      	mov	r3, r0
 800ba78:	461a      	mov	r2, r3
 800ba7a:	7bfb      	ldrb	r3, [r7, #15]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d002      	beq.n	800ba8c <bmi088_config+0x2b8>
 800ba86:	4b33      	ldr	r3, [pc, #204]	@ (800bb54 <bmi088_config+0x380>)
 800ba88:	22cb      	movs	r2, #203	@ 0xcb
 800ba8a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800ba8c:	2008      	movs	r0, #8
 800ba8e:	f7f9 f8b9 	bl	8004c04 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	791b      	ldrb	r3, [r3, #4]
 800ba96:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68d8      	ldr	r0, [r3, #12]
 800ba9c:	2314      	movs	r3, #20
 800ba9e:	9302      	str	r3, [sp, #8]
 800baa0:	2301      	movs	r3, #1
 800baa2:	9301      	str	r3, [sp, #4]
 800baa4:	f107 030c 	add.w	r3, r7, #12
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	2301      	movs	r3, #1
 800baac:	227c      	movs	r2, #124	@ 0x7c
 800baae:	2130      	movs	r1, #48	@ 0x30
 800bab0:	f7fa fe7a 	bl	80067a8 <HAL_I2C_Mem_Write>
 800bab4:	4603      	mov	r3, r0
 800bab6:	461a      	mov	r2, r3
 800bab8:	7bfb      	ldrb	r3, [r7, #15]
 800baba:	4313      	orrs	r3, r2
 800babc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d002      	beq.n	800baca <bmi088_config+0x2f6>
 800bac4:	4b23      	ldr	r3, [pc, #140]	@ (800bb54 <bmi088_config+0x380>)
 800bac6:	22d0      	movs	r2, #208	@ 0xd0
 800bac8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800baca:	2008      	movs	r0, #8
 800bacc:	f7f9 f89a 	bl	8004c04 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	799b      	ldrb	r3, [r3, #6]
 800bad4:	b25b      	sxtb	r3, r3
 800bad6:	011b      	lsls	r3, r3, #4
 800bad8:	b25a      	sxtb	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	79db      	ldrb	r3, [r3, #7]
 800bade:	b25b      	sxtb	r3, r3
 800bae0:	4313      	orrs	r3, r2
 800bae2:	b25b      	sxtb	r3, r3
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	68d8      	ldr	r0, [r3, #12]
 800baec:	2314      	movs	r3, #20
 800baee:	9302      	str	r3, [sp, #8]
 800baf0:	2301      	movs	r3, #1
 800baf2:	9301      	str	r3, [sp, #4]
 800baf4:	f107 030c 	add.w	r3, r7, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	2301      	movs	r3, #1
 800bafc:	2240      	movs	r2, #64	@ 0x40
 800bafe:	2130      	movs	r1, #48	@ 0x30
 800bb00:	f7fa fe52 	bl	80067a8 <HAL_I2C_Mem_Write>
 800bb04:	4603      	mov	r3, r0
 800bb06:	461a      	mov	r2, r3
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d002      	beq.n	800bb1a <bmi088_config+0x346>
 800bb14:	4b0f      	ldr	r3, [pc, #60]	@ (800bb54 <bmi088_config+0x380>)
 800bb16:	22d5      	movs	r2, #213	@ 0xd5
 800bb18:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	795b      	ldrb	r3, [r3, #5]
 800bb1e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	68d8      	ldr	r0, [r3, #12]
 800bb24:	2314      	movs	r3, #20
 800bb26:	9302      	str	r3, [sp, #8]
 800bb28:	2301      	movs	r3, #1
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	f107 030c 	add.w	r3, r7, #12
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	2301      	movs	r3, #1
 800bb34:	2241      	movs	r2, #65	@ 0x41
 800bb36:	2130      	movs	r1, #48	@ 0x30
 800bb38:	f7fa fe36 	bl	80067a8 <HAL_I2C_Mem_Write>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	461a      	mov	r2, r3
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d005      	beq.n	800bb58 <bmi088_config+0x384>
 800bb4c:	4b01      	ldr	r3, [pc, #4]	@ (800bb54 <bmi088_config+0x380>)
 800bb4e:	22d9      	movs	r2, #217	@ 0xd9
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	e001      	b.n	800bb58 <bmi088_config+0x384>
 800bb54:	20001adc 	.word	0x20001adc

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800bb58:	230a      	movs	r3, #10
 800bb5a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68d8      	ldr	r0, [r3, #12]
 800bb60:	2314      	movs	r3, #20
 800bb62:	9302      	str	r3, [sp, #8]
 800bb64:	2301      	movs	r3, #1
 800bb66:	9301      	str	r3, [sp, #4]
 800bb68:	f107 030c 	add.w	r3, r7, #12
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	2301      	movs	r3, #1
 800bb70:	2253      	movs	r2, #83	@ 0x53
 800bb72:	2130      	movs	r1, #48	@ 0x30
 800bb74:	f7fa fe18 	bl	80067a8 <HAL_I2C_Mem_Write>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800bb82:	2304      	movs	r3, #4
 800bb84:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	68d8      	ldr	r0, [r3, #12]
 800bb8a:	2314      	movs	r3, #20
 800bb8c:	9302      	str	r3, [sp, #8]
 800bb8e:	2301      	movs	r3, #1
 800bb90:	9301      	str	r3, [sp, #4]
 800bb92:	f107 030c 	add.w	r3, r7, #12
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	2301      	movs	r3, #1
 800bb9a:	2258      	movs	r2, #88	@ 0x58
 800bb9c:	2130      	movs	r1, #48	@ 0x30
 800bb9e:	f7fa fe03 	bl	80067a8 <HAL_I2C_Mem_Write>
 800bba2:	4603      	mov	r3, r0
 800bba4:	461a      	mov	r2, r3
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7f9 fd41 	bl	800563a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f9 fd3b 	bl	800563a <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 800bbc4:	2046      	movs	r0, #70	@ 0x46
 800bbc6:	f7f9 f81d 	bl	8004c04 <HAL_Delay>
}
 800bbca:	bf00      	nop
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}
 800bbd2:	bf00      	nop
 800bbd4:	0000      	movs	r0, r0
	...

0800bbd8 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 800bbd8:	b5b0      	push	{r4, r5, r7, lr}
 800bbda:	b092      	sub	sp, #72	@ 0x48
 800bbdc:	af04      	add	r7, sp, #16
 800bbde:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	785b      	ldrb	r3, [r3, #1]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 81d9 	beq.w	800bfa2 <bmi088_update+0x3ca>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68d8      	ldr	r0, [r3, #12]
 800bbf4:	2314      	movs	r3, #20
 800bbf6:	9302      	str	r3, [sp, #8]
 800bbf8:	2309      	movs	r3, #9
 800bbfa:	9301      	str	r3, [sp, #4]
 800bbfc:	f107 0314 	add.w	r3, r7, #20
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	2301      	movs	r3, #1
 800bc04:	2212      	movs	r2, #18
 800bc06:	2130      	movs	r1, #48	@ 0x30
 800bc08:	f7fa fec8 	bl	800699c <HAL_I2C_Mem_Read>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68d8      	ldr	r0, [r3, #12]
 800bc16:	2314      	movs	r3, #20
 800bc18:	9302      	str	r3, [sp, #8]
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	f107 0310 	add.w	r3, r7, #16
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	2301      	movs	r3, #1
 800bc26:	2222      	movs	r2, #34	@ 0x22
 800bc28:	2130      	movs	r1, #48	@ 0x30
 800bc2a:	f7fa feb7 	bl	800699c <HAL_I2C_Mem_Read>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 800bc34:	7c3b      	ldrb	r3, [r7, #16]
 800bc36:	b21b      	sxth	r3, r3
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	b21a      	sxth	r2, r3
 800bc3c:	7c7b      	ldrb	r3, [r7, #17]
 800bc3e:	095b      	lsrs	r3, r3, #5
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	b21b      	sxth	r3, r3
 800bc44:	4313      	orrs	r3, r2
 800bc46:	b21b      	sxth	r3, r3
 800bc48:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800bc4e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bc50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc54:	d305      	bcc.n	800bc62 <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 800bc56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bc58:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	867b      	strh	r3, [r7, #50]	@ 0x32
 800bc60:	e023      	b.n	800bcaa <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 800bc62:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bc64:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 800bc66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800bc6a:	ee07 3a90 	vmov	s15, r3
 800bc6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc72:	ee17 0a90 	vmov	r0, s15
 800bc76:	f7f4 fc87 	bl	8000588 <__aeabi_f2d>
 800bc7a:	f04f 0200 	mov.w	r2, #0
 800bc7e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bc82:	f7f4 fcd9 	bl	8000638 <__aeabi_dmul>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	4bb5      	ldr	r3, [pc, #724]	@ (800bf68 <bmi088_update+0x390>)
 800bc94:	f7f4 fb1a 	bl	80002cc <__adddf3>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4610      	mov	r0, r2
 800bc9e:	4619      	mov	r1, r3
 800bca0:	f7f4 ffc2 	bl	8000c28 <__aeabi_d2f>
 800bca4:	4602      	mov	r2, r0
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	649a      	str	r2, [r3, #72]	@ 0x48
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 800bcaa:	7f3b      	ldrb	r3, [r7, #28]
 800bcac:	041a      	lsls	r2, r3, #16
 800bcae:	7efb      	ldrb	r3, [r7, #27]
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	7eba      	ldrb	r2, [r7, #26]
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	ee07 3a90 	vmov	s15, r3
 800bcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc4:	ee17 0a90 	vmov	r0, s15
 800bcc8:	f7f4 fc5e 	bl	8000588 <__aeabi_f2d>
 800bccc:	a3a0      	add	r3, pc, #640	@ (adr r3, 800bf50 <bmi088_update+0x378>)
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	f7f4 fcb1 	bl	8000638 <__aeabi_dmul>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4619      	mov	r1, r3
 800bcde:	a39e      	add	r3, pc, #632	@ (adr r3, 800bf58 <bmi088_update+0x380>)
 800bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce4:	f7f4 fdd2 	bl	800088c <__aeabi_ddiv>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4610      	mov	r0, r2
 800bcee:	4619      	mov	r1, r3
 800bcf0:	f7f4 ff9a 	bl	8000c28 <__aeabi_d2f>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	64da      	str	r2, [r3, #76]	@ 0x4c

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 800bcfa:	7e7b      	ldrb	r3, [r7, #25]
 800bcfc:	b21b      	sxth	r3, r3
 800bcfe:	021b      	lsls	r3, r3, #8
 800bd00:	b21a      	sxth	r2, r3
 800bd02:	7e3b      	ldrb	r3, [r7, #24]
 800bd04:	b21b      	sxth	r3, r3
 800bd06:	4313      	orrs	r3, r2
 800bd08:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	b21a      	sxth	r2, r3
 800bd12:	7dbb      	ldrb	r3, [r7, #22]
 800bd14:	b21b      	sxth	r3, r3
 800bd16:	4313      	orrs	r3, r2
 800bd18:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 800bd1a:	7d7b      	ldrb	r3, [r7, #21]
 800bd1c:	b21b      	sxth	r3, r3
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	b21a      	sxth	r2, r3
 800bd22:	7d3b      	ldrb	r3, [r7, #20]
 800bd24:	b21b      	sxth	r3, r3
 800bd26:	4313      	orrs	r3, r2
 800bd28:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET;
 800bd2a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd36:	ee17 0a90 	vmov	r0, s15
 800bd3a:	f7f4 fc25 	bl	8000588 <__aeabi_f2d>
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	4b8a      	ldr	r3, [pc, #552]	@ (800bf6c <bmi088_update+0x394>)
 800bd44:	f7f4 fda2 	bl	800088c <__aeabi_ddiv>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	4619      	mov	r1, r3
 800bd50:	f04f 0200 	mov.w	r2, #0
 800bd54:	4b86      	ldr	r3, [pc, #536]	@ (800bf70 <bmi088_update+0x398>)
 800bd56:	f7f4 fc6f 	bl	8000638 <__aeabi_dmul>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4610      	mov	r0, r2
 800bd60:	4619      	mov	r1, r3
 800bd62:	f04f 0200 	mov.w	r2, #0
 800bd66:	4b83      	ldr	r3, [pc, #524]	@ (800bf74 <bmi088_update+0x39c>)
 800bd68:	f7f4 fc66 	bl	8000638 <__aeabi_dmul>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4614      	mov	r4, r2
 800bd72:	461d      	mov	r5, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	795b      	ldrb	r3, [r3, #5]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	ee07 3a90 	vmov	s15, r3
 800bd7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd82:	ee17 0a90 	vmov	r0, s15
 800bd86:	f7f4 fbff 	bl	8000588 <__aeabi_f2d>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	ec43 2b11 	vmov	d1, r2, r3
 800bd92:	ed9f 0b73 	vldr	d0, [pc, #460]	@ 800bf60 <bmi088_update+0x388>
 800bd96:	f005 fbe1 	bl	801155c <pow>
 800bd9a:	ec53 2b10 	vmov	r2, r3, d0
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fc49 	bl	8000638 <__aeabi_dmul>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4610      	mov	r0, r2
 800bdac:	4619      	mov	r1, r3
 800bdae:	f04f 0200 	mov.w	r2, #0
 800bdb2:	4b71      	ldr	r3, [pc, #452]	@ (800bf78 <bmi088_update+0x3a0>)
 800bdb4:	f7f4 fa88 	bl	80002c8 <__aeabi_dsub>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	f7f4 ff32 	bl	8000c28 <__aeabi_d2f>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	645a      	str	r2, [r3, #68]	@ 0x44
			BMI->datas.acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET;
 800bdca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800bdce:	ee07 3a90 	vmov	s15, r3
 800bdd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdd6:	ee17 0a90 	vmov	r0, s15
 800bdda:	f7f4 fbd5 	bl	8000588 <__aeabi_f2d>
 800bdde:	f04f 0200 	mov.w	r2, #0
 800bde2:	4b62      	ldr	r3, [pc, #392]	@ (800bf6c <bmi088_update+0x394>)
 800bde4:	f7f4 fd52 	bl	800088c <__aeabi_ddiv>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4610      	mov	r0, r2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	4b5e      	ldr	r3, [pc, #376]	@ (800bf70 <bmi088_update+0x398>)
 800bdf6:	f7f4 fc1f 	bl	8000638 <__aeabi_dmul>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4610      	mov	r0, r2
 800be00:	4619      	mov	r1, r3
 800be02:	f04f 0200 	mov.w	r2, #0
 800be06:	4b5b      	ldr	r3, [pc, #364]	@ (800bf74 <bmi088_update+0x39c>)
 800be08:	f7f4 fc16 	bl	8000638 <__aeabi_dmul>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4614      	mov	r4, r2
 800be12:	461d      	mov	r5, r3
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	795b      	ldrb	r3, [r3, #5]
 800be18:	3301      	adds	r3, #1
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be22:	ee17 0a90 	vmov	r0, s15
 800be26:	f7f4 fbaf 	bl	8000588 <__aeabi_f2d>
 800be2a:	4602      	mov	r2, r0
 800be2c:	460b      	mov	r3, r1
 800be2e:	ec43 2b11 	vmov	d1, r2, r3
 800be32:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 800bf60 <bmi088_update+0x388>
 800be36:	f005 fb91 	bl	801155c <pow>
 800be3a:	ec53 2b10 	vmov	r2, r3, d0
 800be3e:	4620      	mov	r0, r4
 800be40:	4629      	mov	r1, r5
 800be42:	f7f4 fbf9 	bl	8000638 <__aeabi_dmul>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4610      	mov	r0, r2
 800be4c:	4619      	mov	r1, r3
 800be4e:	f04f 0200 	mov.w	r2, #0
 800be52:	4b4a      	ldr	r3, [pc, #296]	@ (800bf7c <bmi088_update+0x3a4>)
 800be54:	f7f4 fa3a 	bl	80002cc <__adddf3>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	4610      	mov	r0, r2
 800be5e:	4619      	mov	r1, r3
 800be60:	f7f4 fee2 	bl	8000c28 <__aeabi_d2f>
 800be64:	4602      	mov	r2, r0
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	641a      	str	r2, [r3, #64]	@ 0x40
			BMI->datas.acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET;
 800be6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800be6e:	ee07 3a90 	vmov	s15, r3
 800be72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be76:	ee17 0a90 	vmov	r0, s15
 800be7a:	f7f4 fb85 	bl	8000588 <__aeabi_f2d>
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	4b3a      	ldr	r3, [pc, #232]	@ (800bf6c <bmi088_update+0x394>)
 800be84:	f7f4 fd02 	bl	800088c <__aeabi_ddiv>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4610      	mov	r0, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	f04f 0200 	mov.w	r2, #0
 800be94:	4b36      	ldr	r3, [pc, #216]	@ (800bf70 <bmi088_update+0x398>)
 800be96:	f7f4 fbcf 	bl	8000638 <__aeabi_dmul>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4610      	mov	r0, r2
 800bea0:	4619      	mov	r1, r3
 800bea2:	f04f 0200 	mov.w	r2, #0
 800bea6:	4b33      	ldr	r3, [pc, #204]	@ (800bf74 <bmi088_update+0x39c>)
 800bea8:	f7f4 fbc6 	bl	8000638 <__aeabi_dmul>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4614      	mov	r4, r2
 800beb2:	461d      	mov	r5, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	795b      	ldrb	r3, [r3, #5]
 800beb8:	3301      	adds	r3, #1
 800beba:	ee07 3a90 	vmov	s15, r3
 800bebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bec2:	ee17 0a90 	vmov	r0, s15
 800bec6:	f7f4 fb5f 	bl	8000588 <__aeabi_f2d>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	ec43 2b11 	vmov	d1, r2, r3
 800bed2:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 800bf60 <bmi088_update+0x388>
 800bed6:	f005 fb41 	bl	801155c <pow>
 800beda:	ec53 2b10 	vmov	r2, r3, d0
 800bede:	4620      	mov	r0, r4
 800bee0:	4629      	mov	r1, r5
 800bee2:	f7f4 fba9 	bl	8000638 <__aeabi_dmul>
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	4610      	mov	r0, r2
 800beec:	4619      	mov	r1, r3
 800beee:	f04f 0200 	mov.w	r2, #0
 800bef2:	4b21      	ldr	r3, [pc, #132]	@ (800bf78 <bmi088_update+0x3a0>)
 800bef4:	f7f4 f9ea 	bl	80002cc <__adddf3>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4610      	mov	r0, r2
 800befe:	4619      	mov	r1, r3
 800bf00:	f7f4 fe92 	bl	8000c28 <__aeabi_d2f>
 800bf04:	4602      	mov	r2, r0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	63da      	str	r2, [r3, #60]	@ 0x3c

			if(is_starded)
 800bf0a:	4b1d      	ldr	r3, [pc, #116]	@ (800bf80 <bmi088_update+0x3a8>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d03a      	beq.n	800bf88 <bmi088_update+0x3b0>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800bf1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2a:	d502      	bpl.n	800bf32 <bmi088_update+0x35a>
 800bf2c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bf84 <bmi088_update+0x3ac>
 800bf30:	e007      	b.n	800bf42 <bmi088_update+0x36a>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800bf3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800bf48:	e021      	b.n	800bf8e <bmi088_update+0x3b6>
 800bf4a:	bf00      	nop
 800bf4c:	f3af 8000 	nop.w
 800bf50:	00000000 	.word	0x00000000
 800bf54:	40438800 	.word	0x40438800
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	412e8480 	.word	0x412e8480
 800bf60:	00000000 	.word	0x00000000
 800bf64:	40000000 	.word	0x40000000
 800bf68:	40370000 	.word	0x40370000
 800bf6c:	40e00000 	.word	0x40e00000
 800bf70:	408f4000 	.word	0x408f4000
 800bf74:	3ff80000 	.word	0x3ff80000
 800bf78:	40100000 	.word	0x40100000
 800bf7c:	402e0000 	.word	0x402e0000
 800bf80:	20001ad9 	.word	0x20001ad9
 800bf84:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 800bf88:	4ba9      	ldr	r3, [pc, #676]	@ (800c230 <bmi088_update+0x658>)
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	651a      	str	r2, [r3, #80]	@ 0x50
			BMI->flags.isAccelUpdated = 0;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 800bf9c:	4ba5      	ldr	r3, [pc, #660]	@ (800c234 <bmi088_update+0x65c>)
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f000 813b 	beq.w	800c222 <bmi088_update+0x64a>
 800bfac:	4ba1      	ldr	r3, [pc, #644]	@ (800c234 <bmi088_update+0x65c>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 8136 	beq.w	800c222 <bmi088_update+0x64a>
		{
			if(is_starded){
 800bfb6:	4b9e      	ldr	r3, [pc, #632]	@ (800c230 <bmi088_update+0x658>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f000 8129 	beq.w	800c212 <bmi088_update+0x63a>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68d8      	ldr	r0, [r3, #12]
 800bfc4:	230a      	movs	r3, #10
 800bfc6:	9302      	str	r3, [sp, #8]
 800bfc8:	2306      	movs	r3, #6
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	f107 0308 	add.w	r3, r7, #8
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	21d0      	movs	r1, #208	@ 0xd0
 800bfd8:	f7fa fce0 	bl	800699c <HAL_I2C_Mem_Read>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800bfe2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f040 811a 	bne.w	800c220 <bmi088_update+0x648>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 800bfec:	7a7b      	ldrb	r3, [r7, #9]
 800bfee:	b21b      	sxth	r3, r3
 800bff0:	021b      	lsls	r3, r3, #8
 800bff2:	b21a      	sxth	r2, r3
 800bff4:	7a3b      	ldrb	r3, [r7, #8]
 800bff6:	b21b      	sxth	r3, r3
 800bff8:	4313      	orrs	r3, r2
 800bffa:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 800bffc:	7afb      	ldrb	r3, [r7, #11]
 800bffe:	b21b      	sxth	r3, r3
 800c000:	021b      	lsls	r3, r3, #8
 800c002:	b21a      	sxth	r2, r3
 800c004:	7abb      	ldrb	r3, [r7, #10]
 800c006:	b21b      	sxth	r3, r3
 800c008:	4313      	orrs	r3, r2
 800c00a:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 800c00c:	7b7b      	ldrb	r3, [r7, #13]
 800c00e:	b21b      	sxth	r3, r3
 800c010:	021b      	lsls	r3, r3, #8
 800c012:	b21a      	sxth	r2, r3
 800c014:	7b3b      	ldrb	r3, [r7, #12]
 800c016:	b21b      	sxth	r3, r3
 800c018:	4313      	orrs	r3, r2
 800c01a:	843b      	strh	r3, [r7, #32]
/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][2]) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][1]) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][0]) * BMI->deltaTime;
*/
				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]);
 800c01c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c020:	ee07 3a90 	vmov	s15, r3
 800c024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c028:	ee17 0a90 	vmov	r0, s15
 800c02c:	f7f4 faac 	bl	8000588 <__aeabi_f2d>
 800c030:	a37d      	add	r3, pc, #500	@ (adr r3, 800c228 <bmi088_update+0x650>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f7f4 fc29 	bl	800088c <__aeabi_ddiv>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	4614      	mov	r4, r2
 800c040:	461d      	mov	r5, r3
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	7a9b      	ldrb	r3, [r3, #10]
 800c046:	461a      	mov	r2, r3
 800c048:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c04c:	4113      	asrs	r3, r2
 800c04e:	ee07 3a90 	vmov	s15, r3
 800c052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c056:	ee17 0a90 	vmov	r0, s15
 800c05a:	f7f4 fa95 	bl	8000588 <__aeabi_f2d>
 800c05e:	4602      	mov	r2, r0
 800c060:	460b      	mov	r3, r1
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	f7f4 fae7 	bl	8000638 <__aeabi_dmul>
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4614      	mov	r4, r2
 800c070:	461d      	mov	r5, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	695b      	ldr	r3, [r3, #20]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7f4 fa85 	bl	8000588 <__aeabi_f2d>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	4620      	mov	r0, r4
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 f91f 	bl	80002c8 <__aeabi_dsub>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4610      	mov	r0, r2
 800c090:	4619      	mov	r1, r3
 800c092:	f7f4 fdc9 	bl	8000c28 <__aeabi_d2f>
 800c096:	4602      	mov	r2, r0
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]);
 800c09c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c0a0:	ee07 3a90 	vmov	s15, r3
 800c0a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0a8:	ee17 0a90 	vmov	r0, s15
 800c0ac:	f7f4 fa6c 	bl	8000588 <__aeabi_f2d>
 800c0b0:	a35d      	add	r3, pc, #372	@ (adr r3, 800c228 <bmi088_update+0x650>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 fbe9 	bl	800088c <__aeabi_ddiv>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	4614      	mov	r4, r2
 800c0c0:	461d      	mov	r5, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	7a9b      	ldrb	r3, [r3, #10]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c0cc:	4113      	asrs	r3, r2
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0d6:	ee17 0a90 	vmov	r0, s15
 800c0da:	f7f4 fa55 	bl	8000588 <__aeabi_f2d>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 faa7 	bl	8000638 <__aeabi_dmul>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	461d      	mov	r5, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f4 fa45 	bl	8000588 <__aeabi_f2d>
 800c0fe:	4602      	mov	r2, r0
 800c100:	460b      	mov	r3, r1
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	f7f4 f8df 	bl	80002c8 <__aeabi_dsub>
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4610      	mov	r0, r2
 800c110:	4619      	mov	r1, r3
 800c112:	f7f4 fd89 	bl	8000c28 <__aeabi_d2f>
 800c116:	4602      	mov	r2, r0
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]);
 800c11c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c120:	ee07 3a90 	vmov	s15, r3
 800c124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c128:	ee17 0a90 	vmov	r0, s15
 800c12c:	f7f4 fa2c 	bl	8000588 <__aeabi_f2d>
 800c130:	a33d      	add	r3, pc, #244	@ (adr r3, 800c228 <bmi088_update+0x650>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 fba9 	bl	800088c <__aeabi_ddiv>
 800c13a:	4602      	mov	r2, r0
 800c13c:	460b      	mov	r3, r1
 800c13e:	4614      	mov	r4, r2
 800c140:	461d      	mov	r5, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7a9b      	ldrb	r3, [r3, #10]
 800c146:	461a      	mov	r2, r3
 800c148:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c14c:	4113      	asrs	r3, r2
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c156:	ee17 0a90 	vmov	r0, s15
 800c15a:	f7f4 fa15 	bl	8000588 <__aeabi_f2d>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	4620      	mov	r0, r4
 800c164:	4629      	mov	r1, r5
 800c166:	f7f4 fa67 	bl	8000638 <__aeabi_dmul>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4614      	mov	r4, r2
 800c170:	461d      	mov	r5, r3
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7f4 fa05 	bl	8000588 <__aeabi_f2d>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4620      	mov	r0, r4
 800c184:	4629      	mov	r1, r5
 800c186:	f7f4 f89f 	bl	80002c8 <__aeabi_dsub>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4610      	mov	r0, r2
 800c190:	4619      	mov	r1, r3
 800c192:	f7f4 fd49 	bl	8000c28 <__aeabi_d2f>
 800c196:	4602      	mov	r2, r0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	621a      	str	r2, [r3, #32]

				BMI->datas.gyro_x_angle += (BMI->datas.gyro_x) * BMI->datas.delta_time;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	edd3 6a06 	vldr	s13, [r3, #24]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c1ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.gyro_y_angle += (BMI->datas.gyro_y) * BMI->datas.delta_time;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	edd3 6a07 	vldr	s13, [r3, #28]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c1ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.gyro_z_angle += (BMI->datas.gyro_z) * BMI->datas.delta_time;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	edd3 6a08 	vldr	s13, [r3, #32]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c1ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				if(BMI->IMU_callback != NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <bmi088_update+0x634>
				{
					BMI->IMU_callback(BMI);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	4798      	blx	r3

				/*
				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
				quaternionToEuler();
				*/
				is_gyro_renewed = 1;
 800c20c:	4b0a      	ldr	r3, [pc, #40]	@ (800c238 <bmi088_update+0x660>)
 800c20e:	2201      	movs	r2, #1
 800c210:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 800c218:	4b06      	ldr	r3, [pc, #24]	@ (800c234 <bmi088_update+0x65c>)
 800c21a:	2200      	movs	r2, #0
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	e000      	b.n	800c222 <bmi088_update+0x64a>
					return;
 800c220:	bf00      	nop
		}
}
 800c222:	3738      	adds	r7, #56	@ 0x38
 800c224:	46bd      	mov	sp, r7
 800c226:	bdb0      	pop	{r4, r5, r7, pc}
 800c228:	00000000 	.word	0x00000000
 800c22c:	40dfffc0 	.word	0x40dfffc0
 800c230:	20001ad9 	.word	0x20001ad9
 800c234:	20001ad8 	.word	0x20001ad8
 800c238:	20001ada 	.word	0x20001ada

0800c23c <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b083      	sub	sp, #12
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	705a      	strb	r2, [r3, #1]
}
 800c24a:	bf00      	nop
 800c24c:	370c      	adds	r7, #12
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 800c256:	b480      	push	{r7}
 800c258:	b083      	sub	sp, #12
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2201      	movs	r2, #1
 800c262:	701a      	strb	r2, [r3, #0]
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7ff fcab 	bl	800bbd8 <bmi088_update>
		if(is_gyro_renewed == 1)
 800c282:	4b2f      	ldr	r3, [pc, #188]	@ (800c340 <get_offset+0xd0>)
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d1f8      	bne.n	800c27c <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c290:	da2d      	bge.n	800c2ee <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	695b      	ldr	r3, [r3, #20]
 800c296:	ed93 7a00 	vldr	s14, [r3]
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2a8:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	695b      	ldr	r3, [r3, #20]
 800c2b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2c2:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	edd3 7a08 	vldr	s15, [r3, #32]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	695b      	ldr	r3, [r3, #20]
 800c2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2dc:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 800c2e6:	4b16      	ldr	r3, [pc, #88]	@ (800c340 <get_offset+0xd0>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	e7c6      	b.n	800c27c <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	ed93 7a00 	vldr	s14, [r3]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800c344 <get_offset+0xd4>
 800c2fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c302:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	695b      	ldr	r3, [r3, #20]
 800c30a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800c344 <get_offset+0xd4>
 800c316:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c31a:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	ed93 7a02 	vldr	s14, [r3, #8]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c344 <get_offset+0xd4>
 800c32e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c332:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 800c336:	bf00      	nop
		}

	}
}
 800c338:	bf00      	nop
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	20001ada 	.word	0x20001ada
 800c344:	447a0000 	.word	0x447a0000

0800c348 <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the connected uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 800c352:	4b45      	ldr	r3, [pc, #276]	@ (800c468 <e22_init+0x120>)
 800c354:	22c0      	movs	r2, #192	@ 0xc0
 800c356:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 800c358:	4b43      	ldr	r3, [pc, #268]	@ (800c468 <e22_init+0x120>)
 800c35a:	2203      	movs	r2, #3
 800c35c:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x06;	//6 bytes will be configured.
 800c35e:	4b42      	ldr	r3, [pc, #264]	@ (800c468 <e22_init+0x120>)
 800c360:	2206      	movs	r2, #6
 800c362:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	7c5b      	ldrb	r3, [r3, #17]
 800c368:	b25a      	sxtb	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	7c1b      	ldrb	r3, [r3, #16]
 800c36e:	b25b      	sxtb	r3, r3
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	b25b      	sxtb	r3, r3
 800c374:	4313      	orrs	r3, r2
 800c376:	b25a      	sxtb	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7bdb      	ldrb	r3, [r3, #15]
 800c37c:	b25b      	sxtb	r3, r3
 800c37e:	015b      	lsls	r3, r3, #5
 800c380:	b25b      	sxtb	r3, r3
 800c382:	4313      	orrs	r3, r2
 800c384:	b25b      	sxtb	r3, r3
 800c386:	b2da      	uxtb	r2, r3
 800c388:	4b37      	ldr	r3, [pc, #220]	@ (800c468 <e22_init+0x120>)
 800c38a:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
 800c390:	b25a      	sxtb	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	7cdb      	ldrb	r3, [r3, #19]
 800c396:	b25b      	sxtb	r3, r3
 800c398:	015b      	lsls	r3, r3, #5
 800c39a:	b25b      	sxtb	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b25a      	sxtb	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	7c9b      	ldrb	r3, [r3, #18]
 800c3a4:	b25b      	sxtb	r3, r3
 800c3a6:	019b      	lsls	r3, r3, #6
 800c3a8:	b25b      	sxtb	r3, r3
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	b25b      	sxtb	r3, r3
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	4b2d      	ldr	r3, [pc, #180]	@ (800c468 <e22_init+0x120>)
 800c3b2:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	7d5a      	ldrb	r2, [r3, #21]
 800c3b8:	4b2b      	ldr	r3, [pc, #172]	@ (800c468 <e22_init+0x120>)
 800c3ba:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	7edb      	ldrb	r3, [r3, #27]
 800c3c0:	b25a      	sxtb	r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	7e9b      	ldrb	r3, [r3, #26]
 800c3c6:	b25b      	sxtb	r3, r3
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	b25a      	sxtb	r2, r3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	7e5b      	ldrb	r3, [r3, #25]
 800c3d4:	b25b      	sxtb	r3, r3
 800c3d6:	011b      	lsls	r3, r3, #4
 800c3d8:	b25b      	sxtb	r3, r3
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	b25a      	sxtb	r2, r3
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	7e1b      	ldrb	r3, [r3, #24]
 800c3e2:	b25b      	sxtb	r3, r3
 800c3e4:	015b      	lsls	r3, r3, #5
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	b25a      	sxtb	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	7ddb      	ldrb	r3, [r3, #23]
 800c3f0:	b25b      	sxtb	r3, r3
 800c3f2:	019b      	lsls	r3, r3, #6
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	b25a      	sxtb	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	7d9b      	ldrb	r3, [r3, #22]
 800c3fe:	b25b      	sxtb	r3, r3
 800c400:	01db      	lsls	r3, r3, #7
 800c402:	b25b      	sxtb	r3, r3
 800c404:	4313      	orrs	r3, r2
 800c406:	b25b      	sxtb	r3, r3
 800c408:	b2da      	uxtb	r2, r3
 800c40a:	4b17      	ldr	r3, [pc, #92]	@ (800c468 <e22_init+0x120>)
 800c40c:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	8b9b      	ldrh	r3, [r3, #28]
 800c412:	0a1b      	lsrs	r3, r3, #8
 800c414:	b29b      	uxth	r3, r3
 800c416:	b2da      	uxtb	r2, r3
 800c418:	4b13      	ldr	r3, [pc, #76]	@ (800c468 <e22_init+0x120>)
 800c41a:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	8b9b      	ldrh	r3, [r3, #28]
 800c420:	b2da      	uxtb	r2, r3
 800c422:	4b11      	ldr	r3, [pc, #68]	@ (800c468 <e22_init+0x120>)
 800c424:	721a      	strb	r2, [r3, #8]

	// UART transmits the configuration datas.
	// Try configuring the telemetry module for a ferw times because it's sometimes not working well.
    e22_chMode_config(lora_conf_struct);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f838 	bl	800c49c <e22_chMode_config>
    HAL_Delay(20);
 800c42c:	2014      	movs	r0, #20
 800c42e:	f7f8 fbe9 	bl	8004c04 <HAL_Delay>
	for(int i = 0; i < 5; i++)
 800c432:	2300      	movs	r3, #0
 800c434:	60fb      	str	r3, [r7, #12]
 800c436:	e00e      	b.n	800c456 <e22_init+0x10e>
	{
		HAL_UART_Transmit(huart, data_packet, data_packet[2] + 3, 50);
 800c438:	4b0b      	ldr	r3, [pc, #44]	@ (800c468 <e22_init+0x120>)
 800c43a:	789b      	ldrb	r3, [r3, #2]
 800c43c:	3303      	adds	r3, #3
 800c43e:	b29a      	uxth	r2, r3
 800c440:	2332      	movs	r3, #50	@ 0x32
 800c442:	4909      	ldr	r1, [pc, #36]	@ (800c468 <e22_init+0x120>)
 800c444:	6838      	ldr	r0, [r7, #0]
 800c446:	f7fd f8d7 	bl	80095f8 <HAL_UART_Transmit>
		HAL_Delay(10);
 800c44a:	200a      	movs	r0, #10
 800c44c:	f7f8 fbda 	bl	8004c04 <HAL_Delay>
	for(int i = 0; i < 5; i++)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	3301      	adds	r3, #1
 800c454:	60fb      	str	r3, [r7, #12]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2b04      	cmp	r3, #4
 800c45a:	dded      	ble.n	800c438 <e22_init+0xf0>
	}

#ifdef DEBUG_TELEM_VIA_TTL
	view_e22_response(&TELEM_UART_HNDLR, &TTL_HNDLR);
#endif
}
 800c45c:	bf00      	nop
 800c45e:	bf00      	nop
 800c460:	3710      	adds	r7, #16
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	20001ae0 	.word	0x20001ae0

0800c46c <e22_chMode_sleep>:
  * @brief  Makes the module asleep.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_sleep(e22_conf_struct_t *lora_conf_struct)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
	//For sleep mode M0 -> 1    M1 -> 1
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_SET);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6818      	ldr	r0, [r3, #0]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	891b      	ldrh	r3, [r3, #8]
 800c47c:	2201      	movs	r2, #1
 800c47e:	4619      	mov	r1, r3
 800c480:	f7f9 ffec 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_SET);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6858      	ldr	r0, [r3, #4]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	895b      	ldrh	r3, [r3, #10]
 800c48c:	2201      	movs	r2, #1
 800c48e:	4619      	mov	r1, r3
 800c490:	f7f9 ffe4 	bl	800645c <HAL_GPIO_WritePin>
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <e22_chMode_config>:
  * @brief  Changes the mode to config.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_config(e22_conf_struct_t *lora_conf_struct)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_RESET);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6818      	ldr	r0, [r3, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	891b      	ldrh	r3, [r3, #8]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	f7f9 ffd4 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_SET);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6858      	ldr	r0, [r3, #4]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	895b      	ldrh	r3, [r3, #10]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	4619      	mov	r1, r3
 800c4c0:	f7f9 ffcc 	bl	800645c <HAL_GPIO_WritePin>
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <e22_chMode_transmit>:
  * @brief  Changes the mode to transmit.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_transmit(e22_conf_struct_t *lora_conf_struct)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_RESET);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6818      	ldr	r0, [r3, #0]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	891b      	ldrh	r3, [r3, #8]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	4619      	mov	r1, r3
 800c4e0:	f7f9 ffbc 	bl	800645c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_RESET);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6858      	ldr	r0, [r3, #4]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	895b      	ldrh	r3, [r3, #10]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	f7f9 ffb4 	bl	800645c <HAL_GPIO_WritePin>
}
 800c4f4:	bf00      	nop
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <calloc>:
 800c4fc:	4b02      	ldr	r3, [pc, #8]	@ (800c508 <calloc+0xc>)
 800c4fe:	460a      	mov	r2, r1
 800c500:	4601      	mov	r1, r0
 800c502:	6818      	ldr	r0, [r3, #0]
 800c504:	f000 b802 	b.w	800c50c <_calloc_r>
 800c508:	20000034 	.word	0x20000034

0800c50c <_calloc_r>:
 800c50c:	b570      	push	{r4, r5, r6, lr}
 800c50e:	fba1 5402 	umull	r5, r4, r1, r2
 800c512:	b934      	cbnz	r4, 800c522 <_calloc_r+0x16>
 800c514:	4629      	mov	r1, r5
 800c516:	f000 f837 	bl	800c588 <_malloc_r>
 800c51a:	4606      	mov	r6, r0
 800c51c:	b928      	cbnz	r0, 800c52a <_calloc_r+0x1e>
 800c51e:	4630      	mov	r0, r6
 800c520:	bd70      	pop	{r4, r5, r6, pc}
 800c522:	220c      	movs	r2, #12
 800c524:	6002      	str	r2, [r0, #0]
 800c526:	2600      	movs	r6, #0
 800c528:	e7f9      	b.n	800c51e <_calloc_r+0x12>
 800c52a:	462a      	mov	r2, r5
 800c52c:	4621      	mov	r1, r4
 800c52e:	f001 f880 	bl	800d632 <memset>
 800c532:	e7f4      	b.n	800c51e <_calloc_r+0x12>

0800c534 <malloc>:
 800c534:	4b02      	ldr	r3, [pc, #8]	@ (800c540 <malloc+0xc>)
 800c536:	4601      	mov	r1, r0
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f000 b825 	b.w	800c588 <_malloc_r>
 800c53e:	bf00      	nop
 800c540:	20000034 	.word	0x20000034

0800c544 <sbrk_aligned>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4e0f      	ldr	r6, [pc, #60]	@ (800c584 <sbrk_aligned+0x40>)
 800c548:	460c      	mov	r4, r1
 800c54a:	6831      	ldr	r1, [r6, #0]
 800c54c:	4605      	mov	r5, r0
 800c54e:	b911      	cbnz	r1, 800c556 <sbrk_aligned+0x12>
 800c550:	f001 f8c6 	bl	800d6e0 <_sbrk_r>
 800c554:	6030      	str	r0, [r6, #0]
 800c556:	4621      	mov	r1, r4
 800c558:	4628      	mov	r0, r5
 800c55a:	f001 f8c1 	bl	800d6e0 <_sbrk_r>
 800c55e:	1c43      	adds	r3, r0, #1
 800c560:	d103      	bne.n	800c56a <sbrk_aligned+0x26>
 800c562:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c566:	4620      	mov	r0, r4
 800c568:	bd70      	pop	{r4, r5, r6, pc}
 800c56a:	1cc4      	adds	r4, r0, #3
 800c56c:	f024 0403 	bic.w	r4, r4, #3
 800c570:	42a0      	cmp	r0, r4
 800c572:	d0f8      	beq.n	800c566 <sbrk_aligned+0x22>
 800c574:	1a21      	subs	r1, r4, r0
 800c576:	4628      	mov	r0, r5
 800c578:	f001 f8b2 	bl	800d6e0 <_sbrk_r>
 800c57c:	3001      	adds	r0, #1
 800c57e:	d1f2      	bne.n	800c566 <sbrk_aligned+0x22>
 800c580:	e7ef      	b.n	800c562 <sbrk_aligned+0x1e>
 800c582:	bf00      	nop
 800c584:	20001aec 	.word	0x20001aec

0800c588 <_malloc_r>:
 800c588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c58c:	1ccd      	adds	r5, r1, #3
 800c58e:	f025 0503 	bic.w	r5, r5, #3
 800c592:	3508      	adds	r5, #8
 800c594:	2d0c      	cmp	r5, #12
 800c596:	bf38      	it	cc
 800c598:	250c      	movcc	r5, #12
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	4606      	mov	r6, r0
 800c59e:	db01      	blt.n	800c5a4 <_malloc_r+0x1c>
 800c5a0:	42a9      	cmp	r1, r5
 800c5a2:	d904      	bls.n	800c5ae <_malloc_r+0x26>
 800c5a4:	230c      	movs	r3, #12
 800c5a6:	6033      	str	r3, [r6, #0]
 800c5a8:	2000      	movs	r0, #0
 800c5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c684 <_malloc_r+0xfc>
 800c5b2:	f000 f869 	bl	800c688 <__malloc_lock>
 800c5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ba:	461c      	mov	r4, r3
 800c5bc:	bb44      	cbnz	r4, 800c610 <_malloc_r+0x88>
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff ffbf 	bl	800c544 <sbrk_aligned>
 800c5c6:	1c43      	adds	r3, r0, #1
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	d158      	bne.n	800c67e <_malloc_r+0xf6>
 800c5cc:	f8d8 4000 	ldr.w	r4, [r8]
 800c5d0:	4627      	mov	r7, r4
 800c5d2:	2f00      	cmp	r7, #0
 800c5d4:	d143      	bne.n	800c65e <_malloc_r+0xd6>
 800c5d6:	2c00      	cmp	r4, #0
 800c5d8:	d04b      	beq.n	800c672 <_malloc_r+0xea>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	4639      	mov	r1, r7
 800c5de:	4630      	mov	r0, r6
 800c5e0:	eb04 0903 	add.w	r9, r4, r3
 800c5e4:	f001 f87c 	bl	800d6e0 <_sbrk_r>
 800c5e8:	4581      	cmp	r9, r0
 800c5ea:	d142      	bne.n	800c672 <_malloc_r+0xea>
 800c5ec:	6821      	ldr	r1, [r4, #0]
 800c5ee:	1a6d      	subs	r5, r5, r1
 800c5f0:	4629      	mov	r1, r5
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7ff ffa6 	bl	800c544 <sbrk_aligned>
 800c5f8:	3001      	adds	r0, #1
 800c5fa:	d03a      	beq.n	800c672 <_malloc_r+0xea>
 800c5fc:	6823      	ldr	r3, [r4, #0]
 800c5fe:	442b      	add	r3, r5
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	f8d8 3000 	ldr.w	r3, [r8]
 800c606:	685a      	ldr	r2, [r3, #4]
 800c608:	bb62      	cbnz	r2, 800c664 <_malloc_r+0xdc>
 800c60a:	f8c8 7000 	str.w	r7, [r8]
 800c60e:	e00f      	b.n	800c630 <_malloc_r+0xa8>
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	1b52      	subs	r2, r2, r5
 800c614:	d420      	bmi.n	800c658 <_malloc_r+0xd0>
 800c616:	2a0b      	cmp	r2, #11
 800c618:	d917      	bls.n	800c64a <_malloc_r+0xc2>
 800c61a:	1961      	adds	r1, r4, r5
 800c61c:	42a3      	cmp	r3, r4
 800c61e:	6025      	str	r5, [r4, #0]
 800c620:	bf18      	it	ne
 800c622:	6059      	strne	r1, [r3, #4]
 800c624:	6863      	ldr	r3, [r4, #4]
 800c626:	bf08      	it	eq
 800c628:	f8c8 1000 	streq.w	r1, [r8]
 800c62c:	5162      	str	r2, [r4, r5]
 800c62e:	604b      	str	r3, [r1, #4]
 800c630:	4630      	mov	r0, r6
 800c632:	f000 f82f 	bl	800c694 <__malloc_unlock>
 800c636:	f104 000b 	add.w	r0, r4, #11
 800c63a:	1d23      	adds	r3, r4, #4
 800c63c:	f020 0007 	bic.w	r0, r0, #7
 800c640:	1ac2      	subs	r2, r0, r3
 800c642:	bf1c      	itt	ne
 800c644:	1a1b      	subne	r3, r3, r0
 800c646:	50a3      	strne	r3, [r4, r2]
 800c648:	e7af      	b.n	800c5aa <_malloc_r+0x22>
 800c64a:	6862      	ldr	r2, [r4, #4]
 800c64c:	42a3      	cmp	r3, r4
 800c64e:	bf0c      	ite	eq
 800c650:	f8c8 2000 	streq.w	r2, [r8]
 800c654:	605a      	strne	r2, [r3, #4]
 800c656:	e7eb      	b.n	800c630 <_malloc_r+0xa8>
 800c658:	4623      	mov	r3, r4
 800c65a:	6864      	ldr	r4, [r4, #4]
 800c65c:	e7ae      	b.n	800c5bc <_malloc_r+0x34>
 800c65e:	463c      	mov	r4, r7
 800c660:	687f      	ldr	r7, [r7, #4]
 800c662:	e7b6      	b.n	800c5d2 <_malloc_r+0x4a>
 800c664:	461a      	mov	r2, r3
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	42a3      	cmp	r3, r4
 800c66a:	d1fb      	bne.n	800c664 <_malloc_r+0xdc>
 800c66c:	2300      	movs	r3, #0
 800c66e:	6053      	str	r3, [r2, #4]
 800c670:	e7de      	b.n	800c630 <_malloc_r+0xa8>
 800c672:	230c      	movs	r3, #12
 800c674:	6033      	str	r3, [r6, #0]
 800c676:	4630      	mov	r0, r6
 800c678:	f000 f80c 	bl	800c694 <__malloc_unlock>
 800c67c:	e794      	b.n	800c5a8 <_malloc_r+0x20>
 800c67e:	6005      	str	r5, [r0, #0]
 800c680:	e7d6      	b.n	800c630 <_malloc_r+0xa8>
 800c682:	bf00      	nop
 800c684:	20001af0 	.word	0x20001af0

0800c688 <__malloc_lock>:
 800c688:	4801      	ldr	r0, [pc, #4]	@ (800c690 <__malloc_lock+0x8>)
 800c68a:	f001 b876 	b.w	800d77a <__retarget_lock_acquire_recursive>
 800c68e:	bf00      	nop
 800c690:	20001c34 	.word	0x20001c34

0800c694 <__malloc_unlock>:
 800c694:	4801      	ldr	r0, [pc, #4]	@ (800c69c <__malloc_unlock+0x8>)
 800c696:	f001 b871 	b.w	800d77c <__retarget_lock_release_recursive>
 800c69a:	bf00      	nop
 800c69c:	20001c34 	.word	0x20001c34

0800c6a0 <__cvt>:
 800c6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6a4:	ec57 6b10 	vmov	r6, r7, d0
 800c6a8:	2f00      	cmp	r7, #0
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	bfbb      	ittet	lt
 800c6b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c6b6:	461f      	movlt	r7, r3
 800c6b8:	2300      	movge	r3, #0
 800c6ba:	232d      	movlt	r3, #45	@ 0x2d
 800c6bc:	700b      	strb	r3, [r1, #0]
 800c6be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6c0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c6c4:	4691      	mov	r9, r2
 800c6c6:	f023 0820 	bic.w	r8, r3, #32
 800c6ca:	bfbc      	itt	lt
 800c6cc:	4632      	movlt	r2, r6
 800c6ce:	4616      	movlt	r6, r2
 800c6d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c6d4:	d005      	beq.n	800c6e2 <__cvt+0x42>
 800c6d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c6da:	d100      	bne.n	800c6de <__cvt+0x3e>
 800c6dc:	3401      	adds	r4, #1
 800c6de:	2102      	movs	r1, #2
 800c6e0:	e000      	b.n	800c6e4 <__cvt+0x44>
 800c6e2:	2103      	movs	r1, #3
 800c6e4:	ab03      	add	r3, sp, #12
 800c6e6:	9301      	str	r3, [sp, #4]
 800c6e8:	ab02      	add	r3, sp, #8
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	ec47 6b10 	vmov	d0, r6, r7
 800c6f0:	4653      	mov	r3, sl
 800c6f2:	4622      	mov	r2, r4
 800c6f4:	f001 f8e0 	bl	800d8b8 <_dtoa_r>
 800c6f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c6fc:	4605      	mov	r5, r0
 800c6fe:	d119      	bne.n	800c734 <__cvt+0x94>
 800c700:	f019 0f01 	tst.w	r9, #1
 800c704:	d00e      	beq.n	800c724 <__cvt+0x84>
 800c706:	eb00 0904 	add.w	r9, r0, r4
 800c70a:	2200      	movs	r2, #0
 800c70c:	2300      	movs	r3, #0
 800c70e:	4630      	mov	r0, r6
 800c710:	4639      	mov	r1, r7
 800c712:	f7f4 f9f9 	bl	8000b08 <__aeabi_dcmpeq>
 800c716:	b108      	cbz	r0, 800c71c <__cvt+0x7c>
 800c718:	f8cd 900c 	str.w	r9, [sp, #12]
 800c71c:	2230      	movs	r2, #48	@ 0x30
 800c71e:	9b03      	ldr	r3, [sp, #12]
 800c720:	454b      	cmp	r3, r9
 800c722:	d31e      	bcc.n	800c762 <__cvt+0xc2>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c728:	1b5b      	subs	r3, r3, r5
 800c72a:	4628      	mov	r0, r5
 800c72c:	6013      	str	r3, [r2, #0]
 800c72e:	b004      	add	sp, #16
 800c730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c738:	eb00 0904 	add.w	r9, r0, r4
 800c73c:	d1e5      	bne.n	800c70a <__cvt+0x6a>
 800c73e:	7803      	ldrb	r3, [r0, #0]
 800c740:	2b30      	cmp	r3, #48	@ 0x30
 800c742:	d10a      	bne.n	800c75a <__cvt+0xba>
 800c744:	2200      	movs	r2, #0
 800c746:	2300      	movs	r3, #0
 800c748:	4630      	mov	r0, r6
 800c74a:	4639      	mov	r1, r7
 800c74c:	f7f4 f9dc 	bl	8000b08 <__aeabi_dcmpeq>
 800c750:	b918      	cbnz	r0, 800c75a <__cvt+0xba>
 800c752:	f1c4 0401 	rsb	r4, r4, #1
 800c756:	f8ca 4000 	str.w	r4, [sl]
 800c75a:	f8da 3000 	ldr.w	r3, [sl]
 800c75e:	4499      	add	r9, r3
 800c760:	e7d3      	b.n	800c70a <__cvt+0x6a>
 800c762:	1c59      	adds	r1, r3, #1
 800c764:	9103      	str	r1, [sp, #12]
 800c766:	701a      	strb	r2, [r3, #0]
 800c768:	e7d9      	b.n	800c71e <__cvt+0x7e>

0800c76a <__exponent>:
 800c76a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c76c:	2900      	cmp	r1, #0
 800c76e:	bfba      	itte	lt
 800c770:	4249      	neglt	r1, r1
 800c772:	232d      	movlt	r3, #45	@ 0x2d
 800c774:	232b      	movge	r3, #43	@ 0x2b
 800c776:	2909      	cmp	r1, #9
 800c778:	7002      	strb	r2, [r0, #0]
 800c77a:	7043      	strb	r3, [r0, #1]
 800c77c:	dd29      	ble.n	800c7d2 <__exponent+0x68>
 800c77e:	f10d 0307 	add.w	r3, sp, #7
 800c782:	461d      	mov	r5, r3
 800c784:	270a      	movs	r7, #10
 800c786:	461a      	mov	r2, r3
 800c788:	fbb1 f6f7 	udiv	r6, r1, r7
 800c78c:	fb07 1416 	mls	r4, r7, r6, r1
 800c790:	3430      	adds	r4, #48	@ 0x30
 800c792:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c796:	460c      	mov	r4, r1
 800c798:	2c63      	cmp	r4, #99	@ 0x63
 800c79a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c79e:	4631      	mov	r1, r6
 800c7a0:	dcf1      	bgt.n	800c786 <__exponent+0x1c>
 800c7a2:	3130      	adds	r1, #48	@ 0x30
 800c7a4:	1e94      	subs	r4, r2, #2
 800c7a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c7aa:	1c41      	adds	r1, r0, #1
 800c7ac:	4623      	mov	r3, r4
 800c7ae:	42ab      	cmp	r3, r5
 800c7b0:	d30a      	bcc.n	800c7c8 <__exponent+0x5e>
 800c7b2:	f10d 0309 	add.w	r3, sp, #9
 800c7b6:	1a9b      	subs	r3, r3, r2
 800c7b8:	42ac      	cmp	r4, r5
 800c7ba:	bf88      	it	hi
 800c7bc:	2300      	movhi	r3, #0
 800c7be:	3302      	adds	r3, #2
 800c7c0:	4403      	add	r3, r0
 800c7c2:	1a18      	subs	r0, r3, r0
 800c7c4:	b003      	add	sp, #12
 800c7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7c8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c7cc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c7d0:	e7ed      	b.n	800c7ae <__exponent+0x44>
 800c7d2:	2330      	movs	r3, #48	@ 0x30
 800c7d4:	3130      	adds	r1, #48	@ 0x30
 800c7d6:	7083      	strb	r3, [r0, #2]
 800c7d8:	70c1      	strb	r1, [r0, #3]
 800c7da:	1d03      	adds	r3, r0, #4
 800c7dc:	e7f1      	b.n	800c7c2 <__exponent+0x58>
	...

0800c7e0 <_printf_float>:
 800c7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7e4:	b08d      	sub	sp, #52	@ 0x34
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	461f      	mov	r7, r3
 800c7f0:	4605      	mov	r5, r0
 800c7f2:	f000 ff3d 	bl	800d670 <_localeconv_r>
 800c7f6:	6803      	ldr	r3, [r0, #0]
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7f3 fd58 	bl	80002b0 <strlen>
 800c800:	2300      	movs	r3, #0
 800c802:	930a      	str	r3, [sp, #40]	@ 0x28
 800c804:	f8d8 3000 	ldr.w	r3, [r8]
 800c808:	9005      	str	r0, [sp, #20]
 800c80a:	3307      	adds	r3, #7
 800c80c:	f023 0307 	bic.w	r3, r3, #7
 800c810:	f103 0208 	add.w	r2, r3, #8
 800c814:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c818:	f8d4 b000 	ldr.w	fp, [r4]
 800c81c:	f8c8 2000 	str.w	r2, [r8]
 800c820:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c828:	9307      	str	r3, [sp, #28]
 800c82a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c82e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c836:	4b9c      	ldr	r3, [pc, #624]	@ (800caa8 <_printf_float+0x2c8>)
 800c838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c83c:	f7f4 f996 	bl	8000b6c <__aeabi_dcmpun>
 800c840:	bb70      	cbnz	r0, 800c8a0 <_printf_float+0xc0>
 800c842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c846:	4b98      	ldr	r3, [pc, #608]	@ (800caa8 <_printf_float+0x2c8>)
 800c848:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c84c:	f7f4 f970 	bl	8000b30 <__aeabi_dcmple>
 800c850:	bb30      	cbnz	r0, 800c8a0 <_printf_float+0xc0>
 800c852:	2200      	movs	r2, #0
 800c854:	2300      	movs	r3, #0
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	f7f4 f95f 	bl	8000b1c <__aeabi_dcmplt>
 800c85e:	b110      	cbz	r0, 800c866 <_printf_float+0x86>
 800c860:	232d      	movs	r3, #45	@ 0x2d
 800c862:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c866:	4a91      	ldr	r2, [pc, #580]	@ (800caac <_printf_float+0x2cc>)
 800c868:	4b91      	ldr	r3, [pc, #580]	@ (800cab0 <_printf_float+0x2d0>)
 800c86a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c86e:	bf8c      	ite	hi
 800c870:	4690      	movhi	r8, r2
 800c872:	4698      	movls	r8, r3
 800c874:	2303      	movs	r3, #3
 800c876:	6123      	str	r3, [r4, #16]
 800c878:	f02b 0304 	bic.w	r3, fp, #4
 800c87c:	6023      	str	r3, [r4, #0]
 800c87e:	f04f 0900 	mov.w	r9, #0
 800c882:	9700      	str	r7, [sp, #0]
 800c884:	4633      	mov	r3, r6
 800c886:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c888:	4621      	mov	r1, r4
 800c88a:	4628      	mov	r0, r5
 800c88c:	f000 f9d2 	bl	800cc34 <_printf_common>
 800c890:	3001      	adds	r0, #1
 800c892:	f040 808d 	bne.w	800c9b0 <_printf_float+0x1d0>
 800c896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c89a:	b00d      	add	sp, #52	@ 0x34
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	4642      	mov	r2, r8
 800c8a2:	464b      	mov	r3, r9
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	f7f4 f960 	bl	8000b6c <__aeabi_dcmpun>
 800c8ac:	b140      	cbz	r0, 800c8c0 <_printf_float+0xe0>
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	bfbc      	itt	lt
 800c8b4:	232d      	movlt	r3, #45	@ 0x2d
 800c8b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c8ba:	4a7e      	ldr	r2, [pc, #504]	@ (800cab4 <_printf_float+0x2d4>)
 800c8bc:	4b7e      	ldr	r3, [pc, #504]	@ (800cab8 <_printf_float+0x2d8>)
 800c8be:	e7d4      	b.n	800c86a <_printf_float+0x8a>
 800c8c0:	6863      	ldr	r3, [r4, #4]
 800c8c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c8c6:	9206      	str	r2, [sp, #24]
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	d13b      	bne.n	800c944 <_printf_float+0x164>
 800c8cc:	2306      	movs	r3, #6
 800c8ce:	6063      	str	r3, [r4, #4]
 800c8d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	6022      	str	r2, [r4, #0]
 800c8d8:	9303      	str	r3, [sp, #12]
 800c8da:	ab0a      	add	r3, sp, #40	@ 0x28
 800c8dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c8e0:	ab09      	add	r3, sp, #36	@ 0x24
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	6861      	ldr	r1, [r4, #4]
 800c8e6:	ec49 8b10 	vmov	d0, r8, r9
 800c8ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f7ff fed6 	bl	800c6a0 <__cvt>
 800c8f4:	9b06      	ldr	r3, [sp, #24]
 800c8f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c8f8:	2b47      	cmp	r3, #71	@ 0x47
 800c8fa:	4680      	mov	r8, r0
 800c8fc:	d129      	bne.n	800c952 <_printf_float+0x172>
 800c8fe:	1cc8      	adds	r0, r1, #3
 800c900:	db02      	blt.n	800c908 <_printf_float+0x128>
 800c902:	6863      	ldr	r3, [r4, #4]
 800c904:	4299      	cmp	r1, r3
 800c906:	dd41      	ble.n	800c98c <_printf_float+0x1ac>
 800c908:	f1aa 0a02 	sub.w	sl, sl, #2
 800c90c:	fa5f fa8a 	uxtb.w	sl, sl
 800c910:	3901      	subs	r1, #1
 800c912:	4652      	mov	r2, sl
 800c914:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c918:	9109      	str	r1, [sp, #36]	@ 0x24
 800c91a:	f7ff ff26 	bl	800c76a <__exponent>
 800c91e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c920:	1813      	adds	r3, r2, r0
 800c922:	2a01      	cmp	r2, #1
 800c924:	4681      	mov	r9, r0
 800c926:	6123      	str	r3, [r4, #16]
 800c928:	dc02      	bgt.n	800c930 <_printf_float+0x150>
 800c92a:	6822      	ldr	r2, [r4, #0]
 800c92c:	07d2      	lsls	r2, r2, #31
 800c92e:	d501      	bpl.n	800c934 <_printf_float+0x154>
 800c930:	3301      	adds	r3, #1
 800c932:	6123      	str	r3, [r4, #16]
 800c934:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d0a2      	beq.n	800c882 <_printf_float+0xa2>
 800c93c:	232d      	movs	r3, #45	@ 0x2d
 800c93e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c942:	e79e      	b.n	800c882 <_printf_float+0xa2>
 800c944:	9a06      	ldr	r2, [sp, #24]
 800c946:	2a47      	cmp	r2, #71	@ 0x47
 800c948:	d1c2      	bne.n	800c8d0 <_printf_float+0xf0>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1c0      	bne.n	800c8d0 <_printf_float+0xf0>
 800c94e:	2301      	movs	r3, #1
 800c950:	e7bd      	b.n	800c8ce <_printf_float+0xee>
 800c952:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c956:	d9db      	bls.n	800c910 <_printf_float+0x130>
 800c958:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c95c:	d118      	bne.n	800c990 <_printf_float+0x1b0>
 800c95e:	2900      	cmp	r1, #0
 800c960:	6863      	ldr	r3, [r4, #4]
 800c962:	dd0b      	ble.n	800c97c <_printf_float+0x19c>
 800c964:	6121      	str	r1, [r4, #16]
 800c966:	b913      	cbnz	r3, 800c96e <_printf_float+0x18e>
 800c968:	6822      	ldr	r2, [r4, #0]
 800c96a:	07d0      	lsls	r0, r2, #31
 800c96c:	d502      	bpl.n	800c974 <_printf_float+0x194>
 800c96e:	3301      	adds	r3, #1
 800c970:	440b      	add	r3, r1
 800c972:	6123      	str	r3, [r4, #16]
 800c974:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c976:	f04f 0900 	mov.w	r9, #0
 800c97a:	e7db      	b.n	800c934 <_printf_float+0x154>
 800c97c:	b913      	cbnz	r3, 800c984 <_printf_float+0x1a4>
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	07d2      	lsls	r2, r2, #31
 800c982:	d501      	bpl.n	800c988 <_printf_float+0x1a8>
 800c984:	3302      	adds	r3, #2
 800c986:	e7f4      	b.n	800c972 <_printf_float+0x192>
 800c988:	2301      	movs	r3, #1
 800c98a:	e7f2      	b.n	800c972 <_printf_float+0x192>
 800c98c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c992:	4299      	cmp	r1, r3
 800c994:	db05      	blt.n	800c9a2 <_printf_float+0x1c2>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	6121      	str	r1, [r4, #16]
 800c99a:	07d8      	lsls	r0, r3, #31
 800c99c:	d5ea      	bpl.n	800c974 <_printf_float+0x194>
 800c99e:	1c4b      	adds	r3, r1, #1
 800c9a0:	e7e7      	b.n	800c972 <_printf_float+0x192>
 800c9a2:	2900      	cmp	r1, #0
 800c9a4:	bfd4      	ite	le
 800c9a6:	f1c1 0202 	rsble	r2, r1, #2
 800c9aa:	2201      	movgt	r2, #1
 800c9ac:	4413      	add	r3, r2
 800c9ae:	e7e0      	b.n	800c972 <_printf_float+0x192>
 800c9b0:	6823      	ldr	r3, [r4, #0]
 800c9b2:	055a      	lsls	r2, r3, #21
 800c9b4:	d407      	bmi.n	800c9c6 <_printf_float+0x1e6>
 800c9b6:	6923      	ldr	r3, [r4, #16]
 800c9b8:	4642      	mov	r2, r8
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4628      	mov	r0, r5
 800c9be:	47b8      	blx	r7
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	d12b      	bne.n	800ca1c <_printf_float+0x23c>
 800c9c4:	e767      	b.n	800c896 <_printf_float+0xb6>
 800c9c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c9ca:	f240 80dd 	bls.w	800cb88 <_printf_float+0x3a8>
 800c9ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f7f4 f897 	bl	8000b08 <__aeabi_dcmpeq>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d033      	beq.n	800ca46 <_printf_float+0x266>
 800c9de:	4a37      	ldr	r2, [pc, #220]	@ (800cabc <_printf_float+0x2dc>)
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	4631      	mov	r1, r6
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	47b8      	blx	r7
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	f43f af54 	beq.w	800c896 <_printf_float+0xb6>
 800c9ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c9f2:	4543      	cmp	r3, r8
 800c9f4:	db02      	blt.n	800c9fc <_printf_float+0x21c>
 800c9f6:	6823      	ldr	r3, [r4, #0]
 800c9f8:	07d8      	lsls	r0, r3, #31
 800c9fa:	d50f      	bpl.n	800ca1c <_printf_float+0x23c>
 800c9fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca00:	4631      	mov	r1, r6
 800ca02:	4628      	mov	r0, r5
 800ca04:	47b8      	blx	r7
 800ca06:	3001      	adds	r0, #1
 800ca08:	f43f af45 	beq.w	800c896 <_printf_float+0xb6>
 800ca0c:	f04f 0900 	mov.w	r9, #0
 800ca10:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ca14:	f104 0a1a 	add.w	sl, r4, #26
 800ca18:	45c8      	cmp	r8, r9
 800ca1a:	dc09      	bgt.n	800ca30 <_printf_float+0x250>
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	079b      	lsls	r3, r3, #30
 800ca20:	f100 8103 	bmi.w	800cc2a <_printf_float+0x44a>
 800ca24:	68e0      	ldr	r0, [r4, #12]
 800ca26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca28:	4298      	cmp	r0, r3
 800ca2a:	bfb8      	it	lt
 800ca2c:	4618      	movlt	r0, r3
 800ca2e:	e734      	b.n	800c89a <_printf_float+0xba>
 800ca30:	2301      	movs	r3, #1
 800ca32:	4652      	mov	r2, sl
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b8      	blx	r7
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	f43f af2b 	beq.w	800c896 <_printf_float+0xb6>
 800ca40:	f109 0901 	add.w	r9, r9, #1
 800ca44:	e7e8      	b.n	800ca18 <_printf_float+0x238>
 800ca46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	dc39      	bgt.n	800cac0 <_printf_float+0x2e0>
 800ca4c:	4a1b      	ldr	r2, [pc, #108]	@ (800cabc <_printf_float+0x2dc>)
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4631      	mov	r1, r6
 800ca52:	4628      	mov	r0, r5
 800ca54:	47b8      	blx	r7
 800ca56:	3001      	adds	r0, #1
 800ca58:	f43f af1d 	beq.w	800c896 <_printf_float+0xb6>
 800ca5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ca60:	ea59 0303 	orrs.w	r3, r9, r3
 800ca64:	d102      	bne.n	800ca6c <_printf_float+0x28c>
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	07d9      	lsls	r1, r3, #31
 800ca6a:	d5d7      	bpl.n	800ca1c <_printf_float+0x23c>
 800ca6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca70:	4631      	mov	r1, r6
 800ca72:	4628      	mov	r0, r5
 800ca74:	47b8      	blx	r7
 800ca76:	3001      	adds	r0, #1
 800ca78:	f43f af0d 	beq.w	800c896 <_printf_float+0xb6>
 800ca7c:	f04f 0a00 	mov.w	sl, #0
 800ca80:	f104 0b1a 	add.w	fp, r4, #26
 800ca84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca86:	425b      	negs	r3, r3
 800ca88:	4553      	cmp	r3, sl
 800ca8a:	dc01      	bgt.n	800ca90 <_printf_float+0x2b0>
 800ca8c:	464b      	mov	r3, r9
 800ca8e:	e793      	b.n	800c9b8 <_printf_float+0x1d8>
 800ca90:	2301      	movs	r3, #1
 800ca92:	465a      	mov	r2, fp
 800ca94:	4631      	mov	r1, r6
 800ca96:	4628      	mov	r0, r5
 800ca98:	47b8      	blx	r7
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	f43f aefb 	beq.w	800c896 <_printf_float+0xb6>
 800caa0:	f10a 0a01 	add.w	sl, sl, #1
 800caa4:	e7ee      	b.n	800ca84 <_printf_float+0x2a4>
 800caa6:	bf00      	nop
 800caa8:	7fefffff 	.word	0x7fefffff
 800caac:	08013304 	.word	0x08013304
 800cab0:	08013300 	.word	0x08013300
 800cab4:	0801330c 	.word	0x0801330c
 800cab8:	08013308 	.word	0x08013308
 800cabc:	08013446 	.word	0x08013446
 800cac0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cac2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cac6:	4553      	cmp	r3, sl
 800cac8:	bfa8      	it	ge
 800caca:	4653      	movge	r3, sl
 800cacc:	2b00      	cmp	r3, #0
 800cace:	4699      	mov	r9, r3
 800cad0:	dc36      	bgt.n	800cb40 <_printf_float+0x360>
 800cad2:	f04f 0b00 	mov.w	fp, #0
 800cad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cada:	f104 021a 	add.w	r2, r4, #26
 800cade:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cae0:	9306      	str	r3, [sp, #24]
 800cae2:	eba3 0309 	sub.w	r3, r3, r9
 800cae6:	455b      	cmp	r3, fp
 800cae8:	dc31      	bgt.n	800cb4e <_printf_float+0x36e>
 800caea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caec:	459a      	cmp	sl, r3
 800caee:	dc3a      	bgt.n	800cb66 <_printf_float+0x386>
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	07da      	lsls	r2, r3, #31
 800caf4:	d437      	bmi.n	800cb66 <_printf_float+0x386>
 800caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf8:	ebaa 0903 	sub.w	r9, sl, r3
 800cafc:	9b06      	ldr	r3, [sp, #24]
 800cafe:	ebaa 0303 	sub.w	r3, sl, r3
 800cb02:	4599      	cmp	r9, r3
 800cb04:	bfa8      	it	ge
 800cb06:	4699      	movge	r9, r3
 800cb08:	f1b9 0f00 	cmp.w	r9, #0
 800cb0c:	dc33      	bgt.n	800cb76 <_printf_float+0x396>
 800cb0e:	f04f 0800 	mov.w	r8, #0
 800cb12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb16:	f104 0b1a 	add.w	fp, r4, #26
 800cb1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb1c:	ebaa 0303 	sub.w	r3, sl, r3
 800cb20:	eba3 0309 	sub.w	r3, r3, r9
 800cb24:	4543      	cmp	r3, r8
 800cb26:	f77f af79 	ble.w	800ca1c <_printf_float+0x23c>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	465a      	mov	r2, fp
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b8      	blx	r7
 800cb34:	3001      	adds	r0, #1
 800cb36:	f43f aeae 	beq.w	800c896 <_printf_float+0xb6>
 800cb3a:	f108 0801 	add.w	r8, r8, #1
 800cb3e:	e7ec      	b.n	800cb1a <_printf_float+0x33a>
 800cb40:	4642      	mov	r2, r8
 800cb42:	4631      	mov	r1, r6
 800cb44:	4628      	mov	r0, r5
 800cb46:	47b8      	blx	r7
 800cb48:	3001      	adds	r0, #1
 800cb4a:	d1c2      	bne.n	800cad2 <_printf_float+0x2f2>
 800cb4c:	e6a3      	b.n	800c896 <_printf_float+0xb6>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	4631      	mov	r1, r6
 800cb52:	4628      	mov	r0, r5
 800cb54:	9206      	str	r2, [sp, #24]
 800cb56:	47b8      	blx	r7
 800cb58:	3001      	adds	r0, #1
 800cb5a:	f43f ae9c 	beq.w	800c896 <_printf_float+0xb6>
 800cb5e:	9a06      	ldr	r2, [sp, #24]
 800cb60:	f10b 0b01 	add.w	fp, fp, #1
 800cb64:	e7bb      	b.n	800cade <_printf_float+0x2fe>
 800cb66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	47b8      	blx	r7
 800cb70:	3001      	adds	r0, #1
 800cb72:	d1c0      	bne.n	800caf6 <_printf_float+0x316>
 800cb74:	e68f      	b.n	800c896 <_printf_float+0xb6>
 800cb76:	9a06      	ldr	r2, [sp, #24]
 800cb78:	464b      	mov	r3, r9
 800cb7a:	4442      	add	r2, r8
 800cb7c:	4631      	mov	r1, r6
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b8      	blx	r7
 800cb82:	3001      	adds	r0, #1
 800cb84:	d1c3      	bne.n	800cb0e <_printf_float+0x32e>
 800cb86:	e686      	b.n	800c896 <_printf_float+0xb6>
 800cb88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb8c:	f1ba 0f01 	cmp.w	sl, #1
 800cb90:	dc01      	bgt.n	800cb96 <_printf_float+0x3b6>
 800cb92:	07db      	lsls	r3, r3, #31
 800cb94:	d536      	bpl.n	800cc04 <_printf_float+0x424>
 800cb96:	2301      	movs	r3, #1
 800cb98:	4642      	mov	r2, r8
 800cb9a:	4631      	mov	r1, r6
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	47b8      	blx	r7
 800cba0:	3001      	adds	r0, #1
 800cba2:	f43f ae78 	beq.w	800c896 <_printf_float+0xb6>
 800cba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbaa:	4631      	mov	r1, r6
 800cbac:	4628      	mov	r0, r5
 800cbae:	47b8      	blx	r7
 800cbb0:	3001      	adds	r0, #1
 800cbb2:	f43f ae70 	beq.w	800c896 <_printf_float+0xb6>
 800cbb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cbc2:	f7f3 ffa1 	bl	8000b08 <__aeabi_dcmpeq>
 800cbc6:	b9c0      	cbnz	r0, 800cbfa <_printf_float+0x41a>
 800cbc8:	4653      	mov	r3, sl
 800cbca:	f108 0201 	add.w	r2, r8, #1
 800cbce:	4631      	mov	r1, r6
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	47b8      	blx	r7
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d10c      	bne.n	800cbf2 <_printf_float+0x412>
 800cbd8:	e65d      	b.n	800c896 <_printf_float+0xb6>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	465a      	mov	r2, fp
 800cbde:	4631      	mov	r1, r6
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	47b8      	blx	r7
 800cbe4:	3001      	adds	r0, #1
 800cbe6:	f43f ae56 	beq.w	800c896 <_printf_float+0xb6>
 800cbea:	f108 0801 	add.w	r8, r8, #1
 800cbee:	45d0      	cmp	r8, sl
 800cbf0:	dbf3      	blt.n	800cbda <_printf_float+0x3fa>
 800cbf2:	464b      	mov	r3, r9
 800cbf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cbf8:	e6df      	b.n	800c9ba <_printf_float+0x1da>
 800cbfa:	f04f 0800 	mov.w	r8, #0
 800cbfe:	f104 0b1a 	add.w	fp, r4, #26
 800cc02:	e7f4      	b.n	800cbee <_printf_float+0x40e>
 800cc04:	2301      	movs	r3, #1
 800cc06:	4642      	mov	r2, r8
 800cc08:	e7e1      	b.n	800cbce <_printf_float+0x3ee>
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	464a      	mov	r2, r9
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	f43f ae3e 	beq.w	800c896 <_printf_float+0xb6>
 800cc1a:	f108 0801 	add.w	r8, r8, #1
 800cc1e:	68e3      	ldr	r3, [r4, #12]
 800cc20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cc22:	1a5b      	subs	r3, r3, r1
 800cc24:	4543      	cmp	r3, r8
 800cc26:	dcf0      	bgt.n	800cc0a <_printf_float+0x42a>
 800cc28:	e6fc      	b.n	800ca24 <_printf_float+0x244>
 800cc2a:	f04f 0800 	mov.w	r8, #0
 800cc2e:	f104 0919 	add.w	r9, r4, #25
 800cc32:	e7f4      	b.n	800cc1e <_printf_float+0x43e>

0800cc34 <_printf_common>:
 800cc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc38:	4616      	mov	r6, r2
 800cc3a:	4698      	mov	r8, r3
 800cc3c:	688a      	ldr	r2, [r1, #8]
 800cc3e:	690b      	ldr	r3, [r1, #16]
 800cc40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cc44:	4293      	cmp	r3, r2
 800cc46:	bfb8      	it	lt
 800cc48:	4613      	movlt	r3, r2
 800cc4a:	6033      	str	r3, [r6, #0]
 800cc4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cc50:	4607      	mov	r7, r0
 800cc52:	460c      	mov	r4, r1
 800cc54:	b10a      	cbz	r2, 800cc5a <_printf_common+0x26>
 800cc56:	3301      	adds	r3, #1
 800cc58:	6033      	str	r3, [r6, #0]
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	0699      	lsls	r1, r3, #26
 800cc5e:	bf42      	ittt	mi
 800cc60:	6833      	ldrmi	r3, [r6, #0]
 800cc62:	3302      	addmi	r3, #2
 800cc64:	6033      	strmi	r3, [r6, #0]
 800cc66:	6825      	ldr	r5, [r4, #0]
 800cc68:	f015 0506 	ands.w	r5, r5, #6
 800cc6c:	d106      	bne.n	800cc7c <_printf_common+0x48>
 800cc6e:	f104 0a19 	add.w	sl, r4, #25
 800cc72:	68e3      	ldr	r3, [r4, #12]
 800cc74:	6832      	ldr	r2, [r6, #0]
 800cc76:	1a9b      	subs	r3, r3, r2
 800cc78:	42ab      	cmp	r3, r5
 800cc7a:	dc26      	bgt.n	800ccca <_printf_common+0x96>
 800cc7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cc80:	6822      	ldr	r2, [r4, #0]
 800cc82:	3b00      	subs	r3, #0
 800cc84:	bf18      	it	ne
 800cc86:	2301      	movne	r3, #1
 800cc88:	0692      	lsls	r2, r2, #26
 800cc8a:	d42b      	bmi.n	800cce4 <_printf_common+0xb0>
 800cc8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc90:	4641      	mov	r1, r8
 800cc92:	4638      	mov	r0, r7
 800cc94:	47c8      	blx	r9
 800cc96:	3001      	adds	r0, #1
 800cc98:	d01e      	beq.n	800ccd8 <_printf_common+0xa4>
 800cc9a:	6823      	ldr	r3, [r4, #0]
 800cc9c:	6922      	ldr	r2, [r4, #16]
 800cc9e:	f003 0306 	and.w	r3, r3, #6
 800cca2:	2b04      	cmp	r3, #4
 800cca4:	bf02      	ittt	eq
 800cca6:	68e5      	ldreq	r5, [r4, #12]
 800cca8:	6833      	ldreq	r3, [r6, #0]
 800ccaa:	1aed      	subeq	r5, r5, r3
 800ccac:	68a3      	ldr	r3, [r4, #8]
 800ccae:	bf0c      	ite	eq
 800ccb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccb4:	2500      	movne	r5, #0
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	bfc4      	itt	gt
 800ccba:	1a9b      	subgt	r3, r3, r2
 800ccbc:	18ed      	addgt	r5, r5, r3
 800ccbe:	2600      	movs	r6, #0
 800ccc0:	341a      	adds	r4, #26
 800ccc2:	42b5      	cmp	r5, r6
 800ccc4:	d11a      	bne.n	800ccfc <_printf_common+0xc8>
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	e008      	b.n	800ccdc <_printf_common+0xa8>
 800ccca:	2301      	movs	r3, #1
 800cccc:	4652      	mov	r2, sl
 800ccce:	4641      	mov	r1, r8
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	47c8      	blx	r9
 800ccd4:	3001      	adds	r0, #1
 800ccd6:	d103      	bne.n	800cce0 <_printf_common+0xac>
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ccdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cce0:	3501      	adds	r5, #1
 800cce2:	e7c6      	b.n	800cc72 <_printf_common+0x3e>
 800cce4:	18e1      	adds	r1, r4, r3
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	2030      	movs	r0, #48	@ 0x30
 800ccea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ccee:	4422      	add	r2, r4
 800ccf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ccf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ccf8:	3302      	adds	r3, #2
 800ccfa:	e7c7      	b.n	800cc8c <_printf_common+0x58>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	4622      	mov	r2, r4
 800cd00:	4641      	mov	r1, r8
 800cd02:	4638      	mov	r0, r7
 800cd04:	47c8      	blx	r9
 800cd06:	3001      	adds	r0, #1
 800cd08:	d0e6      	beq.n	800ccd8 <_printf_common+0xa4>
 800cd0a:	3601      	adds	r6, #1
 800cd0c:	e7d9      	b.n	800ccc2 <_printf_common+0x8e>
	...

0800cd10 <_printf_i>:
 800cd10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd14:	7e0f      	ldrb	r7, [r1, #24]
 800cd16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd18:	2f78      	cmp	r7, #120	@ 0x78
 800cd1a:	4691      	mov	r9, r2
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	469a      	mov	sl, r3
 800cd22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd26:	d807      	bhi.n	800cd38 <_printf_i+0x28>
 800cd28:	2f62      	cmp	r7, #98	@ 0x62
 800cd2a:	d80a      	bhi.n	800cd42 <_printf_i+0x32>
 800cd2c:	2f00      	cmp	r7, #0
 800cd2e:	f000 80d1 	beq.w	800ced4 <_printf_i+0x1c4>
 800cd32:	2f58      	cmp	r7, #88	@ 0x58
 800cd34:	f000 80b8 	beq.w	800cea8 <_printf_i+0x198>
 800cd38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cd40:	e03a      	b.n	800cdb8 <_printf_i+0xa8>
 800cd42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cd46:	2b15      	cmp	r3, #21
 800cd48:	d8f6      	bhi.n	800cd38 <_printf_i+0x28>
 800cd4a:	a101      	add	r1, pc, #4	@ (adr r1, 800cd50 <_printf_i+0x40>)
 800cd4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd50:	0800cda9 	.word	0x0800cda9
 800cd54:	0800cdbd 	.word	0x0800cdbd
 800cd58:	0800cd39 	.word	0x0800cd39
 800cd5c:	0800cd39 	.word	0x0800cd39
 800cd60:	0800cd39 	.word	0x0800cd39
 800cd64:	0800cd39 	.word	0x0800cd39
 800cd68:	0800cdbd 	.word	0x0800cdbd
 800cd6c:	0800cd39 	.word	0x0800cd39
 800cd70:	0800cd39 	.word	0x0800cd39
 800cd74:	0800cd39 	.word	0x0800cd39
 800cd78:	0800cd39 	.word	0x0800cd39
 800cd7c:	0800cebb 	.word	0x0800cebb
 800cd80:	0800cde7 	.word	0x0800cde7
 800cd84:	0800ce75 	.word	0x0800ce75
 800cd88:	0800cd39 	.word	0x0800cd39
 800cd8c:	0800cd39 	.word	0x0800cd39
 800cd90:	0800cedd 	.word	0x0800cedd
 800cd94:	0800cd39 	.word	0x0800cd39
 800cd98:	0800cde7 	.word	0x0800cde7
 800cd9c:	0800cd39 	.word	0x0800cd39
 800cda0:	0800cd39 	.word	0x0800cd39
 800cda4:	0800ce7d 	.word	0x0800ce7d
 800cda8:	6833      	ldr	r3, [r6, #0]
 800cdaa:	1d1a      	adds	r2, r3, #4
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6032      	str	r2, [r6, #0]
 800cdb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e09c      	b.n	800cef6 <_printf_i+0x1e6>
 800cdbc:	6833      	ldr	r3, [r6, #0]
 800cdbe:	6820      	ldr	r0, [r4, #0]
 800cdc0:	1d19      	adds	r1, r3, #4
 800cdc2:	6031      	str	r1, [r6, #0]
 800cdc4:	0606      	lsls	r6, r0, #24
 800cdc6:	d501      	bpl.n	800cdcc <_printf_i+0xbc>
 800cdc8:	681d      	ldr	r5, [r3, #0]
 800cdca:	e003      	b.n	800cdd4 <_printf_i+0xc4>
 800cdcc:	0645      	lsls	r5, r0, #25
 800cdce:	d5fb      	bpl.n	800cdc8 <_printf_i+0xb8>
 800cdd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cdd4:	2d00      	cmp	r5, #0
 800cdd6:	da03      	bge.n	800cde0 <_printf_i+0xd0>
 800cdd8:	232d      	movs	r3, #45	@ 0x2d
 800cdda:	426d      	negs	r5, r5
 800cddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cde0:	4858      	ldr	r0, [pc, #352]	@ (800cf44 <_printf_i+0x234>)
 800cde2:	230a      	movs	r3, #10
 800cde4:	e011      	b.n	800ce0a <_printf_i+0xfa>
 800cde6:	6821      	ldr	r1, [r4, #0]
 800cde8:	6833      	ldr	r3, [r6, #0]
 800cdea:	0608      	lsls	r0, r1, #24
 800cdec:	f853 5b04 	ldr.w	r5, [r3], #4
 800cdf0:	d402      	bmi.n	800cdf8 <_printf_i+0xe8>
 800cdf2:	0649      	lsls	r1, r1, #25
 800cdf4:	bf48      	it	mi
 800cdf6:	b2ad      	uxthmi	r5, r5
 800cdf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800cdfa:	4852      	ldr	r0, [pc, #328]	@ (800cf44 <_printf_i+0x234>)
 800cdfc:	6033      	str	r3, [r6, #0]
 800cdfe:	bf14      	ite	ne
 800ce00:	230a      	movne	r3, #10
 800ce02:	2308      	moveq	r3, #8
 800ce04:	2100      	movs	r1, #0
 800ce06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce0a:	6866      	ldr	r6, [r4, #4]
 800ce0c:	60a6      	str	r6, [r4, #8]
 800ce0e:	2e00      	cmp	r6, #0
 800ce10:	db05      	blt.n	800ce1e <_printf_i+0x10e>
 800ce12:	6821      	ldr	r1, [r4, #0]
 800ce14:	432e      	orrs	r6, r5
 800ce16:	f021 0104 	bic.w	r1, r1, #4
 800ce1a:	6021      	str	r1, [r4, #0]
 800ce1c:	d04b      	beq.n	800ceb6 <_printf_i+0x1a6>
 800ce1e:	4616      	mov	r6, r2
 800ce20:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce24:	fb03 5711 	mls	r7, r3, r1, r5
 800ce28:	5dc7      	ldrb	r7, [r0, r7]
 800ce2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce2e:	462f      	mov	r7, r5
 800ce30:	42bb      	cmp	r3, r7
 800ce32:	460d      	mov	r5, r1
 800ce34:	d9f4      	bls.n	800ce20 <_printf_i+0x110>
 800ce36:	2b08      	cmp	r3, #8
 800ce38:	d10b      	bne.n	800ce52 <_printf_i+0x142>
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	07df      	lsls	r7, r3, #31
 800ce3e:	d508      	bpl.n	800ce52 <_printf_i+0x142>
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	6861      	ldr	r1, [r4, #4]
 800ce44:	4299      	cmp	r1, r3
 800ce46:	bfde      	ittt	le
 800ce48:	2330      	movle	r3, #48	@ 0x30
 800ce4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce4e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ce52:	1b92      	subs	r2, r2, r6
 800ce54:	6122      	str	r2, [r4, #16]
 800ce56:	f8cd a000 	str.w	sl, [sp]
 800ce5a:	464b      	mov	r3, r9
 800ce5c:	aa03      	add	r2, sp, #12
 800ce5e:	4621      	mov	r1, r4
 800ce60:	4640      	mov	r0, r8
 800ce62:	f7ff fee7 	bl	800cc34 <_printf_common>
 800ce66:	3001      	adds	r0, #1
 800ce68:	d14a      	bne.n	800cf00 <_printf_i+0x1f0>
 800ce6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce6e:	b004      	add	sp, #16
 800ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	f043 0320 	orr.w	r3, r3, #32
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	4832      	ldr	r0, [pc, #200]	@ (800cf48 <_printf_i+0x238>)
 800ce7e:	2778      	movs	r7, #120	@ 0x78
 800ce80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	6831      	ldr	r1, [r6, #0]
 800ce88:	061f      	lsls	r7, r3, #24
 800ce8a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce8e:	d402      	bmi.n	800ce96 <_printf_i+0x186>
 800ce90:	065f      	lsls	r7, r3, #25
 800ce92:	bf48      	it	mi
 800ce94:	b2ad      	uxthmi	r5, r5
 800ce96:	6031      	str	r1, [r6, #0]
 800ce98:	07d9      	lsls	r1, r3, #31
 800ce9a:	bf44      	itt	mi
 800ce9c:	f043 0320 	orrmi.w	r3, r3, #32
 800cea0:	6023      	strmi	r3, [r4, #0]
 800cea2:	b11d      	cbz	r5, 800ceac <_printf_i+0x19c>
 800cea4:	2310      	movs	r3, #16
 800cea6:	e7ad      	b.n	800ce04 <_printf_i+0xf4>
 800cea8:	4826      	ldr	r0, [pc, #152]	@ (800cf44 <_printf_i+0x234>)
 800ceaa:	e7e9      	b.n	800ce80 <_printf_i+0x170>
 800ceac:	6823      	ldr	r3, [r4, #0]
 800ceae:	f023 0320 	bic.w	r3, r3, #32
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	e7f6      	b.n	800cea4 <_printf_i+0x194>
 800ceb6:	4616      	mov	r6, r2
 800ceb8:	e7bd      	b.n	800ce36 <_printf_i+0x126>
 800ceba:	6833      	ldr	r3, [r6, #0]
 800cebc:	6825      	ldr	r5, [r4, #0]
 800cebe:	6961      	ldr	r1, [r4, #20]
 800cec0:	1d18      	adds	r0, r3, #4
 800cec2:	6030      	str	r0, [r6, #0]
 800cec4:	062e      	lsls	r6, r5, #24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	d501      	bpl.n	800cece <_printf_i+0x1be>
 800ceca:	6019      	str	r1, [r3, #0]
 800cecc:	e002      	b.n	800ced4 <_printf_i+0x1c4>
 800cece:	0668      	lsls	r0, r5, #25
 800ced0:	d5fb      	bpl.n	800ceca <_printf_i+0x1ba>
 800ced2:	8019      	strh	r1, [r3, #0]
 800ced4:	2300      	movs	r3, #0
 800ced6:	6123      	str	r3, [r4, #16]
 800ced8:	4616      	mov	r6, r2
 800ceda:	e7bc      	b.n	800ce56 <_printf_i+0x146>
 800cedc:	6833      	ldr	r3, [r6, #0]
 800cede:	1d1a      	adds	r2, r3, #4
 800cee0:	6032      	str	r2, [r6, #0]
 800cee2:	681e      	ldr	r6, [r3, #0]
 800cee4:	6862      	ldr	r2, [r4, #4]
 800cee6:	2100      	movs	r1, #0
 800cee8:	4630      	mov	r0, r6
 800ceea:	f7f3 f991 	bl	8000210 <memchr>
 800ceee:	b108      	cbz	r0, 800cef4 <_printf_i+0x1e4>
 800cef0:	1b80      	subs	r0, r0, r6
 800cef2:	6060      	str	r0, [r4, #4]
 800cef4:	6863      	ldr	r3, [r4, #4]
 800cef6:	6123      	str	r3, [r4, #16]
 800cef8:	2300      	movs	r3, #0
 800cefa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cefe:	e7aa      	b.n	800ce56 <_printf_i+0x146>
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	4632      	mov	r2, r6
 800cf04:	4649      	mov	r1, r9
 800cf06:	4640      	mov	r0, r8
 800cf08:	47d0      	blx	sl
 800cf0a:	3001      	adds	r0, #1
 800cf0c:	d0ad      	beq.n	800ce6a <_printf_i+0x15a>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	079b      	lsls	r3, r3, #30
 800cf12:	d413      	bmi.n	800cf3c <_printf_i+0x22c>
 800cf14:	68e0      	ldr	r0, [r4, #12]
 800cf16:	9b03      	ldr	r3, [sp, #12]
 800cf18:	4298      	cmp	r0, r3
 800cf1a:	bfb8      	it	lt
 800cf1c:	4618      	movlt	r0, r3
 800cf1e:	e7a6      	b.n	800ce6e <_printf_i+0x15e>
 800cf20:	2301      	movs	r3, #1
 800cf22:	4632      	mov	r2, r6
 800cf24:	4649      	mov	r1, r9
 800cf26:	4640      	mov	r0, r8
 800cf28:	47d0      	blx	sl
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	d09d      	beq.n	800ce6a <_printf_i+0x15a>
 800cf2e:	3501      	adds	r5, #1
 800cf30:	68e3      	ldr	r3, [r4, #12]
 800cf32:	9903      	ldr	r1, [sp, #12]
 800cf34:	1a5b      	subs	r3, r3, r1
 800cf36:	42ab      	cmp	r3, r5
 800cf38:	dcf2      	bgt.n	800cf20 <_printf_i+0x210>
 800cf3a:	e7eb      	b.n	800cf14 <_printf_i+0x204>
 800cf3c:	2500      	movs	r5, #0
 800cf3e:	f104 0619 	add.w	r6, r4, #25
 800cf42:	e7f5      	b.n	800cf30 <_printf_i+0x220>
 800cf44:	08013310 	.word	0x08013310
 800cf48:	08013321 	.word	0x08013321

0800cf4c <_scanf_float>:
 800cf4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf50:	b087      	sub	sp, #28
 800cf52:	4691      	mov	r9, r2
 800cf54:	9303      	str	r3, [sp, #12]
 800cf56:	688b      	ldr	r3, [r1, #8]
 800cf58:	1e5a      	subs	r2, r3, #1
 800cf5a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cf5e:	bf81      	itttt	hi
 800cf60:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cf64:	eb03 0b05 	addhi.w	fp, r3, r5
 800cf68:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cf6c:	608b      	strhi	r3, [r1, #8]
 800cf6e:	680b      	ldr	r3, [r1, #0]
 800cf70:	460a      	mov	r2, r1
 800cf72:	f04f 0500 	mov.w	r5, #0
 800cf76:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cf7a:	f842 3b1c 	str.w	r3, [r2], #28
 800cf7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf82:	4680      	mov	r8, r0
 800cf84:	460c      	mov	r4, r1
 800cf86:	bf98      	it	ls
 800cf88:	f04f 0b00 	movls.w	fp, #0
 800cf8c:	9201      	str	r2, [sp, #4]
 800cf8e:	4616      	mov	r6, r2
 800cf90:	46aa      	mov	sl, r5
 800cf92:	462f      	mov	r7, r5
 800cf94:	9502      	str	r5, [sp, #8]
 800cf96:	68a2      	ldr	r2, [r4, #8]
 800cf98:	b15a      	cbz	r2, 800cfb2 <_scanf_float+0x66>
 800cf9a:	f8d9 3000 	ldr.w	r3, [r9]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b4e      	cmp	r3, #78	@ 0x4e
 800cfa2:	d863      	bhi.n	800d06c <_scanf_float+0x120>
 800cfa4:	2b40      	cmp	r3, #64	@ 0x40
 800cfa6:	d83b      	bhi.n	800d020 <_scanf_float+0xd4>
 800cfa8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cfac:	b2c8      	uxtb	r0, r1
 800cfae:	280e      	cmp	r0, #14
 800cfb0:	d939      	bls.n	800d026 <_scanf_float+0xda>
 800cfb2:	b11f      	cbz	r7, 800cfbc <_scanf_float+0x70>
 800cfb4:	6823      	ldr	r3, [r4, #0]
 800cfb6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cfba:	6023      	str	r3, [r4, #0]
 800cfbc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cfc0:	f1ba 0f01 	cmp.w	sl, #1
 800cfc4:	f200 8114 	bhi.w	800d1f0 <_scanf_float+0x2a4>
 800cfc8:	9b01      	ldr	r3, [sp, #4]
 800cfca:	429e      	cmp	r6, r3
 800cfcc:	f200 8105 	bhi.w	800d1da <_scanf_float+0x28e>
 800cfd0:	2001      	movs	r0, #1
 800cfd2:	b007      	add	sp, #28
 800cfd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cfdc:	2a0d      	cmp	r2, #13
 800cfde:	d8e8      	bhi.n	800cfb2 <_scanf_float+0x66>
 800cfe0:	a101      	add	r1, pc, #4	@ (adr r1, 800cfe8 <_scanf_float+0x9c>)
 800cfe2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cfe6:	bf00      	nop
 800cfe8:	0800d131 	.word	0x0800d131
 800cfec:	0800cfb3 	.word	0x0800cfb3
 800cff0:	0800cfb3 	.word	0x0800cfb3
 800cff4:	0800cfb3 	.word	0x0800cfb3
 800cff8:	0800d18d 	.word	0x0800d18d
 800cffc:	0800d167 	.word	0x0800d167
 800d000:	0800cfb3 	.word	0x0800cfb3
 800d004:	0800cfb3 	.word	0x0800cfb3
 800d008:	0800d13f 	.word	0x0800d13f
 800d00c:	0800cfb3 	.word	0x0800cfb3
 800d010:	0800cfb3 	.word	0x0800cfb3
 800d014:	0800cfb3 	.word	0x0800cfb3
 800d018:	0800cfb3 	.word	0x0800cfb3
 800d01c:	0800d0fb 	.word	0x0800d0fb
 800d020:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d024:	e7da      	b.n	800cfdc <_scanf_float+0x90>
 800d026:	290e      	cmp	r1, #14
 800d028:	d8c3      	bhi.n	800cfb2 <_scanf_float+0x66>
 800d02a:	a001      	add	r0, pc, #4	@ (adr r0, 800d030 <_scanf_float+0xe4>)
 800d02c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d030:	0800d0eb 	.word	0x0800d0eb
 800d034:	0800cfb3 	.word	0x0800cfb3
 800d038:	0800d0eb 	.word	0x0800d0eb
 800d03c:	0800d17b 	.word	0x0800d17b
 800d040:	0800cfb3 	.word	0x0800cfb3
 800d044:	0800d08d 	.word	0x0800d08d
 800d048:	0800d0d1 	.word	0x0800d0d1
 800d04c:	0800d0d1 	.word	0x0800d0d1
 800d050:	0800d0d1 	.word	0x0800d0d1
 800d054:	0800d0d1 	.word	0x0800d0d1
 800d058:	0800d0d1 	.word	0x0800d0d1
 800d05c:	0800d0d1 	.word	0x0800d0d1
 800d060:	0800d0d1 	.word	0x0800d0d1
 800d064:	0800d0d1 	.word	0x0800d0d1
 800d068:	0800d0d1 	.word	0x0800d0d1
 800d06c:	2b6e      	cmp	r3, #110	@ 0x6e
 800d06e:	d809      	bhi.n	800d084 <_scanf_float+0x138>
 800d070:	2b60      	cmp	r3, #96	@ 0x60
 800d072:	d8b1      	bhi.n	800cfd8 <_scanf_float+0x8c>
 800d074:	2b54      	cmp	r3, #84	@ 0x54
 800d076:	d07b      	beq.n	800d170 <_scanf_float+0x224>
 800d078:	2b59      	cmp	r3, #89	@ 0x59
 800d07a:	d19a      	bne.n	800cfb2 <_scanf_float+0x66>
 800d07c:	2d07      	cmp	r5, #7
 800d07e:	d198      	bne.n	800cfb2 <_scanf_float+0x66>
 800d080:	2508      	movs	r5, #8
 800d082:	e02f      	b.n	800d0e4 <_scanf_float+0x198>
 800d084:	2b74      	cmp	r3, #116	@ 0x74
 800d086:	d073      	beq.n	800d170 <_scanf_float+0x224>
 800d088:	2b79      	cmp	r3, #121	@ 0x79
 800d08a:	e7f6      	b.n	800d07a <_scanf_float+0x12e>
 800d08c:	6821      	ldr	r1, [r4, #0]
 800d08e:	05c8      	lsls	r0, r1, #23
 800d090:	d51e      	bpl.n	800d0d0 <_scanf_float+0x184>
 800d092:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d096:	6021      	str	r1, [r4, #0]
 800d098:	3701      	adds	r7, #1
 800d09a:	f1bb 0f00 	cmp.w	fp, #0
 800d09e:	d003      	beq.n	800d0a8 <_scanf_float+0x15c>
 800d0a0:	3201      	adds	r2, #1
 800d0a2:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d0a6:	60a2      	str	r2, [r4, #8]
 800d0a8:	68a3      	ldr	r3, [r4, #8]
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	60a3      	str	r3, [r4, #8]
 800d0ae:	6923      	ldr	r3, [r4, #16]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	6123      	str	r3, [r4, #16]
 800d0b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f8c9 3004 	str.w	r3, [r9, #4]
 800d0c0:	f340 8082 	ble.w	800d1c8 <_scanf_float+0x27c>
 800d0c4:	f8d9 3000 	ldr.w	r3, [r9]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	f8c9 3000 	str.w	r3, [r9]
 800d0ce:	e762      	b.n	800cf96 <_scanf_float+0x4a>
 800d0d0:	eb1a 0105 	adds.w	r1, sl, r5
 800d0d4:	f47f af6d 	bne.w	800cfb2 <_scanf_float+0x66>
 800d0d8:	6822      	ldr	r2, [r4, #0]
 800d0da:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d0de:	6022      	str	r2, [r4, #0]
 800d0e0:	460d      	mov	r5, r1
 800d0e2:	468a      	mov	sl, r1
 800d0e4:	f806 3b01 	strb.w	r3, [r6], #1
 800d0e8:	e7de      	b.n	800d0a8 <_scanf_float+0x15c>
 800d0ea:	6822      	ldr	r2, [r4, #0]
 800d0ec:	0610      	lsls	r0, r2, #24
 800d0ee:	f57f af60 	bpl.w	800cfb2 <_scanf_float+0x66>
 800d0f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0f6:	6022      	str	r2, [r4, #0]
 800d0f8:	e7f4      	b.n	800d0e4 <_scanf_float+0x198>
 800d0fa:	f1ba 0f00 	cmp.w	sl, #0
 800d0fe:	d10c      	bne.n	800d11a <_scanf_float+0x1ce>
 800d100:	b977      	cbnz	r7, 800d120 <_scanf_float+0x1d4>
 800d102:	6822      	ldr	r2, [r4, #0]
 800d104:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d108:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d10c:	d108      	bne.n	800d120 <_scanf_float+0x1d4>
 800d10e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d112:	6022      	str	r2, [r4, #0]
 800d114:	f04f 0a01 	mov.w	sl, #1
 800d118:	e7e4      	b.n	800d0e4 <_scanf_float+0x198>
 800d11a:	f1ba 0f02 	cmp.w	sl, #2
 800d11e:	d050      	beq.n	800d1c2 <_scanf_float+0x276>
 800d120:	2d01      	cmp	r5, #1
 800d122:	d002      	beq.n	800d12a <_scanf_float+0x1de>
 800d124:	2d04      	cmp	r5, #4
 800d126:	f47f af44 	bne.w	800cfb2 <_scanf_float+0x66>
 800d12a:	3501      	adds	r5, #1
 800d12c:	b2ed      	uxtb	r5, r5
 800d12e:	e7d9      	b.n	800d0e4 <_scanf_float+0x198>
 800d130:	f1ba 0f01 	cmp.w	sl, #1
 800d134:	f47f af3d 	bne.w	800cfb2 <_scanf_float+0x66>
 800d138:	f04f 0a02 	mov.w	sl, #2
 800d13c:	e7d2      	b.n	800d0e4 <_scanf_float+0x198>
 800d13e:	b975      	cbnz	r5, 800d15e <_scanf_float+0x212>
 800d140:	2f00      	cmp	r7, #0
 800d142:	f47f af37 	bne.w	800cfb4 <_scanf_float+0x68>
 800d146:	6822      	ldr	r2, [r4, #0]
 800d148:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d14c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d150:	f040 8103 	bne.w	800d35a <_scanf_float+0x40e>
 800d154:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d158:	6022      	str	r2, [r4, #0]
 800d15a:	2501      	movs	r5, #1
 800d15c:	e7c2      	b.n	800d0e4 <_scanf_float+0x198>
 800d15e:	2d03      	cmp	r5, #3
 800d160:	d0e3      	beq.n	800d12a <_scanf_float+0x1de>
 800d162:	2d05      	cmp	r5, #5
 800d164:	e7df      	b.n	800d126 <_scanf_float+0x1da>
 800d166:	2d02      	cmp	r5, #2
 800d168:	f47f af23 	bne.w	800cfb2 <_scanf_float+0x66>
 800d16c:	2503      	movs	r5, #3
 800d16e:	e7b9      	b.n	800d0e4 <_scanf_float+0x198>
 800d170:	2d06      	cmp	r5, #6
 800d172:	f47f af1e 	bne.w	800cfb2 <_scanf_float+0x66>
 800d176:	2507      	movs	r5, #7
 800d178:	e7b4      	b.n	800d0e4 <_scanf_float+0x198>
 800d17a:	6822      	ldr	r2, [r4, #0]
 800d17c:	0591      	lsls	r1, r2, #22
 800d17e:	f57f af18 	bpl.w	800cfb2 <_scanf_float+0x66>
 800d182:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d186:	6022      	str	r2, [r4, #0]
 800d188:	9702      	str	r7, [sp, #8]
 800d18a:	e7ab      	b.n	800d0e4 <_scanf_float+0x198>
 800d18c:	6822      	ldr	r2, [r4, #0]
 800d18e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d192:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d196:	d005      	beq.n	800d1a4 <_scanf_float+0x258>
 800d198:	0550      	lsls	r0, r2, #21
 800d19a:	f57f af0a 	bpl.w	800cfb2 <_scanf_float+0x66>
 800d19e:	2f00      	cmp	r7, #0
 800d1a0:	f000 80db 	beq.w	800d35a <_scanf_float+0x40e>
 800d1a4:	0591      	lsls	r1, r2, #22
 800d1a6:	bf58      	it	pl
 800d1a8:	9902      	ldrpl	r1, [sp, #8]
 800d1aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d1ae:	bf58      	it	pl
 800d1b0:	1a79      	subpl	r1, r7, r1
 800d1b2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d1b6:	bf58      	it	pl
 800d1b8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d1bc:	6022      	str	r2, [r4, #0]
 800d1be:	2700      	movs	r7, #0
 800d1c0:	e790      	b.n	800d0e4 <_scanf_float+0x198>
 800d1c2:	f04f 0a03 	mov.w	sl, #3
 800d1c6:	e78d      	b.n	800d0e4 <_scanf_float+0x198>
 800d1c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d1cc:	4649      	mov	r1, r9
 800d1ce:	4640      	mov	r0, r8
 800d1d0:	4798      	blx	r3
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	f43f aedf 	beq.w	800cf96 <_scanf_float+0x4a>
 800d1d8:	e6eb      	b.n	800cfb2 <_scanf_float+0x66>
 800d1da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d1de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1e2:	464a      	mov	r2, r9
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	4798      	blx	r3
 800d1e8:	6923      	ldr	r3, [r4, #16]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	6123      	str	r3, [r4, #16]
 800d1ee:	e6eb      	b.n	800cfc8 <_scanf_float+0x7c>
 800d1f0:	1e6b      	subs	r3, r5, #1
 800d1f2:	2b06      	cmp	r3, #6
 800d1f4:	d824      	bhi.n	800d240 <_scanf_float+0x2f4>
 800d1f6:	2d02      	cmp	r5, #2
 800d1f8:	d836      	bhi.n	800d268 <_scanf_float+0x31c>
 800d1fa:	9b01      	ldr	r3, [sp, #4]
 800d1fc:	429e      	cmp	r6, r3
 800d1fe:	f67f aee7 	bls.w	800cfd0 <_scanf_float+0x84>
 800d202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d20a:	464a      	mov	r2, r9
 800d20c:	4640      	mov	r0, r8
 800d20e:	4798      	blx	r3
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	3b01      	subs	r3, #1
 800d214:	6123      	str	r3, [r4, #16]
 800d216:	e7f0      	b.n	800d1fa <_scanf_float+0x2ae>
 800d218:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d21c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d220:	464a      	mov	r2, r9
 800d222:	4640      	mov	r0, r8
 800d224:	4798      	blx	r3
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	3b01      	subs	r3, #1
 800d22a:	6123      	str	r3, [r4, #16]
 800d22c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d230:	fa5f fa8a 	uxtb.w	sl, sl
 800d234:	f1ba 0f02 	cmp.w	sl, #2
 800d238:	d1ee      	bne.n	800d218 <_scanf_float+0x2cc>
 800d23a:	3d03      	subs	r5, #3
 800d23c:	b2ed      	uxtb	r5, r5
 800d23e:	1b76      	subs	r6, r6, r5
 800d240:	6823      	ldr	r3, [r4, #0]
 800d242:	05da      	lsls	r2, r3, #23
 800d244:	d530      	bpl.n	800d2a8 <_scanf_float+0x35c>
 800d246:	055b      	lsls	r3, r3, #21
 800d248:	d511      	bpl.n	800d26e <_scanf_float+0x322>
 800d24a:	9b01      	ldr	r3, [sp, #4]
 800d24c:	429e      	cmp	r6, r3
 800d24e:	f67f aebf 	bls.w	800cfd0 <_scanf_float+0x84>
 800d252:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d256:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d25a:	464a      	mov	r2, r9
 800d25c:	4640      	mov	r0, r8
 800d25e:	4798      	blx	r3
 800d260:	6923      	ldr	r3, [r4, #16]
 800d262:	3b01      	subs	r3, #1
 800d264:	6123      	str	r3, [r4, #16]
 800d266:	e7f0      	b.n	800d24a <_scanf_float+0x2fe>
 800d268:	46aa      	mov	sl, r5
 800d26a:	46b3      	mov	fp, r6
 800d26c:	e7de      	b.n	800d22c <_scanf_float+0x2e0>
 800d26e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d272:	6923      	ldr	r3, [r4, #16]
 800d274:	2965      	cmp	r1, #101	@ 0x65
 800d276:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d27a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d27e:	6123      	str	r3, [r4, #16]
 800d280:	d00c      	beq.n	800d29c <_scanf_float+0x350>
 800d282:	2945      	cmp	r1, #69	@ 0x45
 800d284:	d00a      	beq.n	800d29c <_scanf_float+0x350>
 800d286:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d28a:	464a      	mov	r2, r9
 800d28c:	4640      	mov	r0, r8
 800d28e:	4798      	blx	r3
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d296:	3b01      	subs	r3, #1
 800d298:	1eb5      	subs	r5, r6, #2
 800d29a:	6123      	str	r3, [r4, #16]
 800d29c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d2a0:	464a      	mov	r2, r9
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	4798      	blx	r3
 800d2a6:	462e      	mov	r6, r5
 800d2a8:	6822      	ldr	r2, [r4, #0]
 800d2aa:	f012 0210 	ands.w	r2, r2, #16
 800d2ae:	d001      	beq.n	800d2b4 <_scanf_float+0x368>
 800d2b0:	2000      	movs	r0, #0
 800d2b2:	e68e      	b.n	800cfd2 <_scanf_float+0x86>
 800d2b4:	7032      	strb	r2, [r6, #0]
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d2bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d2c0:	d125      	bne.n	800d30e <_scanf_float+0x3c2>
 800d2c2:	9b02      	ldr	r3, [sp, #8]
 800d2c4:	429f      	cmp	r7, r3
 800d2c6:	d00a      	beq.n	800d2de <_scanf_float+0x392>
 800d2c8:	1bda      	subs	r2, r3, r7
 800d2ca:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d2ce:	429e      	cmp	r6, r3
 800d2d0:	bf28      	it	cs
 800d2d2:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d2d6:	4922      	ldr	r1, [pc, #136]	@ (800d360 <_scanf_float+0x414>)
 800d2d8:	4630      	mov	r0, r6
 800d2da:	f000 f907 	bl	800d4ec <siprintf>
 800d2de:	9901      	ldr	r1, [sp, #4]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	f002 fbb0 	bl	800fa48 <_strtod_r>
 800d2e8:	9b03      	ldr	r3, [sp, #12]
 800d2ea:	6821      	ldr	r1, [r4, #0]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f011 0f02 	tst.w	r1, #2
 800d2f2:	ec57 6b10 	vmov	r6, r7, d0
 800d2f6:	f103 0204 	add.w	r2, r3, #4
 800d2fa:	d015      	beq.n	800d328 <_scanf_float+0x3dc>
 800d2fc:	9903      	ldr	r1, [sp, #12]
 800d2fe:	600a      	str	r2, [r1, #0]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	e9c3 6700 	strd	r6, r7, [r3]
 800d306:	68e3      	ldr	r3, [r4, #12]
 800d308:	3301      	adds	r3, #1
 800d30a:	60e3      	str	r3, [r4, #12]
 800d30c:	e7d0      	b.n	800d2b0 <_scanf_float+0x364>
 800d30e:	9b04      	ldr	r3, [sp, #16]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d0e4      	beq.n	800d2de <_scanf_float+0x392>
 800d314:	9905      	ldr	r1, [sp, #20]
 800d316:	230a      	movs	r3, #10
 800d318:	3101      	adds	r1, #1
 800d31a:	4640      	mov	r0, r8
 800d31c:	f002 fc14 	bl	800fb48 <_strtol_r>
 800d320:	9b04      	ldr	r3, [sp, #16]
 800d322:	9e05      	ldr	r6, [sp, #20]
 800d324:	1ac2      	subs	r2, r0, r3
 800d326:	e7d0      	b.n	800d2ca <_scanf_float+0x37e>
 800d328:	f011 0f04 	tst.w	r1, #4
 800d32c:	9903      	ldr	r1, [sp, #12]
 800d32e:	600a      	str	r2, [r1, #0]
 800d330:	d1e6      	bne.n	800d300 <_scanf_float+0x3b4>
 800d332:	681d      	ldr	r5, [r3, #0]
 800d334:	4632      	mov	r2, r6
 800d336:	463b      	mov	r3, r7
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	f7f3 fc16 	bl	8000b6c <__aeabi_dcmpun>
 800d340:	b128      	cbz	r0, 800d34e <_scanf_float+0x402>
 800d342:	4808      	ldr	r0, [pc, #32]	@ (800d364 <_scanf_float+0x418>)
 800d344:	f000 fa2a 	bl	800d79c <nanf>
 800d348:	ed85 0a00 	vstr	s0, [r5]
 800d34c:	e7db      	b.n	800d306 <_scanf_float+0x3ba>
 800d34e:	4630      	mov	r0, r6
 800d350:	4639      	mov	r1, r7
 800d352:	f7f3 fc69 	bl	8000c28 <__aeabi_d2f>
 800d356:	6028      	str	r0, [r5, #0]
 800d358:	e7d5      	b.n	800d306 <_scanf_float+0x3ba>
 800d35a:	2700      	movs	r7, #0
 800d35c:	e62e      	b.n	800cfbc <_scanf_float+0x70>
 800d35e:	bf00      	nop
 800d360:	08013332 	.word	0x08013332
 800d364:	0801348e 	.word	0x0801348e

0800d368 <std>:
 800d368:	2300      	movs	r3, #0
 800d36a:	b510      	push	{r4, lr}
 800d36c:	4604      	mov	r4, r0
 800d36e:	e9c0 3300 	strd	r3, r3, [r0]
 800d372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d376:	6083      	str	r3, [r0, #8]
 800d378:	8181      	strh	r1, [r0, #12]
 800d37a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d37c:	81c2      	strh	r2, [r0, #14]
 800d37e:	6183      	str	r3, [r0, #24]
 800d380:	4619      	mov	r1, r3
 800d382:	2208      	movs	r2, #8
 800d384:	305c      	adds	r0, #92	@ 0x5c
 800d386:	f000 f954 	bl	800d632 <memset>
 800d38a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c0 <std+0x58>)
 800d38c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d38e:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c4 <std+0x5c>)
 800d390:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d392:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <std+0x60>)
 800d394:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d396:	4b0d      	ldr	r3, [pc, #52]	@ (800d3cc <std+0x64>)
 800d398:	6323      	str	r3, [r4, #48]	@ 0x30
 800d39a:	4b0d      	ldr	r3, [pc, #52]	@ (800d3d0 <std+0x68>)
 800d39c:	6224      	str	r4, [r4, #32]
 800d39e:	429c      	cmp	r4, r3
 800d3a0:	d006      	beq.n	800d3b0 <std+0x48>
 800d3a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d3a6:	4294      	cmp	r4, r2
 800d3a8:	d002      	beq.n	800d3b0 <std+0x48>
 800d3aa:	33d0      	adds	r3, #208	@ 0xd0
 800d3ac:	429c      	cmp	r4, r3
 800d3ae:	d105      	bne.n	800d3bc <std+0x54>
 800d3b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d3b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3b8:	f000 b9de 	b.w	800d778 <__retarget_lock_init_recursive>
 800d3bc:	bd10      	pop	{r4, pc}
 800d3be:	bf00      	nop
 800d3c0:	0800d589 	.word	0x0800d589
 800d3c4:	0800d5af 	.word	0x0800d5af
 800d3c8:	0800d5e7 	.word	0x0800d5e7
 800d3cc:	0800d60b 	.word	0x0800d60b
 800d3d0:	20001af4 	.word	0x20001af4

0800d3d4 <stdio_exit_handler>:
 800d3d4:	4a02      	ldr	r2, [pc, #8]	@ (800d3e0 <stdio_exit_handler+0xc>)
 800d3d6:	4903      	ldr	r1, [pc, #12]	@ (800d3e4 <stdio_exit_handler+0x10>)
 800d3d8:	4803      	ldr	r0, [pc, #12]	@ (800d3e8 <stdio_exit_handler+0x14>)
 800d3da:	f000 b869 	b.w	800d4b0 <_fwalk_sglue>
 800d3de:	bf00      	nop
 800d3e0:	20000028 	.word	0x20000028
 800d3e4:	08010541 	.word	0x08010541
 800d3e8:	20000038 	.word	0x20000038

0800d3ec <cleanup_stdio>:
 800d3ec:	6841      	ldr	r1, [r0, #4]
 800d3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d420 <cleanup_stdio+0x34>)
 800d3f0:	4299      	cmp	r1, r3
 800d3f2:	b510      	push	{r4, lr}
 800d3f4:	4604      	mov	r4, r0
 800d3f6:	d001      	beq.n	800d3fc <cleanup_stdio+0x10>
 800d3f8:	f003 f8a2 	bl	8010540 <_fflush_r>
 800d3fc:	68a1      	ldr	r1, [r4, #8]
 800d3fe:	4b09      	ldr	r3, [pc, #36]	@ (800d424 <cleanup_stdio+0x38>)
 800d400:	4299      	cmp	r1, r3
 800d402:	d002      	beq.n	800d40a <cleanup_stdio+0x1e>
 800d404:	4620      	mov	r0, r4
 800d406:	f003 f89b 	bl	8010540 <_fflush_r>
 800d40a:	68e1      	ldr	r1, [r4, #12]
 800d40c:	4b06      	ldr	r3, [pc, #24]	@ (800d428 <cleanup_stdio+0x3c>)
 800d40e:	4299      	cmp	r1, r3
 800d410:	d004      	beq.n	800d41c <cleanup_stdio+0x30>
 800d412:	4620      	mov	r0, r4
 800d414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d418:	f003 b892 	b.w	8010540 <_fflush_r>
 800d41c:	bd10      	pop	{r4, pc}
 800d41e:	bf00      	nop
 800d420:	20001af4 	.word	0x20001af4
 800d424:	20001b5c 	.word	0x20001b5c
 800d428:	20001bc4 	.word	0x20001bc4

0800d42c <global_stdio_init.part.0>:
 800d42c:	b510      	push	{r4, lr}
 800d42e:	4b0b      	ldr	r3, [pc, #44]	@ (800d45c <global_stdio_init.part.0+0x30>)
 800d430:	4c0b      	ldr	r4, [pc, #44]	@ (800d460 <global_stdio_init.part.0+0x34>)
 800d432:	4a0c      	ldr	r2, [pc, #48]	@ (800d464 <global_stdio_init.part.0+0x38>)
 800d434:	601a      	str	r2, [r3, #0]
 800d436:	4620      	mov	r0, r4
 800d438:	2200      	movs	r2, #0
 800d43a:	2104      	movs	r1, #4
 800d43c:	f7ff ff94 	bl	800d368 <std>
 800d440:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d444:	2201      	movs	r2, #1
 800d446:	2109      	movs	r1, #9
 800d448:	f7ff ff8e 	bl	800d368 <std>
 800d44c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d450:	2202      	movs	r2, #2
 800d452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d456:	2112      	movs	r1, #18
 800d458:	f7ff bf86 	b.w	800d368 <std>
 800d45c:	20001c2c 	.word	0x20001c2c
 800d460:	20001af4 	.word	0x20001af4
 800d464:	0800d3d5 	.word	0x0800d3d5

0800d468 <__sfp_lock_acquire>:
 800d468:	4801      	ldr	r0, [pc, #4]	@ (800d470 <__sfp_lock_acquire+0x8>)
 800d46a:	f000 b986 	b.w	800d77a <__retarget_lock_acquire_recursive>
 800d46e:	bf00      	nop
 800d470:	20001c35 	.word	0x20001c35

0800d474 <__sfp_lock_release>:
 800d474:	4801      	ldr	r0, [pc, #4]	@ (800d47c <__sfp_lock_release+0x8>)
 800d476:	f000 b981 	b.w	800d77c <__retarget_lock_release_recursive>
 800d47a:	bf00      	nop
 800d47c:	20001c35 	.word	0x20001c35

0800d480 <__sinit>:
 800d480:	b510      	push	{r4, lr}
 800d482:	4604      	mov	r4, r0
 800d484:	f7ff fff0 	bl	800d468 <__sfp_lock_acquire>
 800d488:	6a23      	ldr	r3, [r4, #32]
 800d48a:	b11b      	cbz	r3, 800d494 <__sinit+0x14>
 800d48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d490:	f7ff bff0 	b.w	800d474 <__sfp_lock_release>
 800d494:	4b04      	ldr	r3, [pc, #16]	@ (800d4a8 <__sinit+0x28>)
 800d496:	6223      	str	r3, [r4, #32]
 800d498:	4b04      	ldr	r3, [pc, #16]	@ (800d4ac <__sinit+0x2c>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f5      	bne.n	800d48c <__sinit+0xc>
 800d4a0:	f7ff ffc4 	bl	800d42c <global_stdio_init.part.0>
 800d4a4:	e7f2      	b.n	800d48c <__sinit+0xc>
 800d4a6:	bf00      	nop
 800d4a8:	0800d3ed 	.word	0x0800d3ed
 800d4ac:	20001c2c 	.word	0x20001c2c

0800d4b0 <_fwalk_sglue>:
 800d4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b4:	4607      	mov	r7, r0
 800d4b6:	4688      	mov	r8, r1
 800d4b8:	4614      	mov	r4, r2
 800d4ba:	2600      	movs	r6, #0
 800d4bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d4c0:	f1b9 0901 	subs.w	r9, r9, #1
 800d4c4:	d505      	bpl.n	800d4d2 <_fwalk_sglue+0x22>
 800d4c6:	6824      	ldr	r4, [r4, #0]
 800d4c8:	2c00      	cmp	r4, #0
 800d4ca:	d1f7      	bne.n	800d4bc <_fwalk_sglue+0xc>
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4d2:	89ab      	ldrh	r3, [r5, #12]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d907      	bls.n	800d4e8 <_fwalk_sglue+0x38>
 800d4d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	d003      	beq.n	800d4e8 <_fwalk_sglue+0x38>
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4638      	mov	r0, r7
 800d4e4:	47c0      	blx	r8
 800d4e6:	4306      	orrs	r6, r0
 800d4e8:	3568      	adds	r5, #104	@ 0x68
 800d4ea:	e7e9      	b.n	800d4c0 <_fwalk_sglue+0x10>

0800d4ec <siprintf>:
 800d4ec:	b40e      	push	{r1, r2, r3}
 800d4ee:	b510      	push	{r4, lr}
 800d4f0:	b09d      	sub	sp, #116	@ 0x74
 800d4f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d4f4:	9002      	str	r0, [sp, #8]
 800d4f6:	9006      	str	r0, [sp, #24]
 800d4f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d4fc:	480a      	ldr	r0, [pc, #40]	@ (800d528 <siprintf+0x3c>)
 800d4fe:	9107      	str	r1, [sp, #28]
 800d500:	9104      	str	r1, [sp, #16]
 800d502:	490a      	ldr	r1, [pc, #40]	@ (800d52c <siprintf+0x40>)
 800d504:	f853 2b04 	ldr.w	r2, [r3], #4
 800d508:	9105      	str	r1, [sp, #20]
 800d50a:	2400      	movs	r4, #0
 800d50c:	a902      	add	r1, sp, #8
 800d50e:	6800      	ldr	r0, [r0, #0]
 800d510:	9301      	str	r3, [sp, #4]
 800d512:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d514:	f002 fb76 	bl	800fc04 <_svfiprintf_r>
 800d518:	9b02      	ldr	r3, [sp, #8]
 800d51a:	701c      	strb	r4, [r3, #0]
 800d51c:	b01d      	add	sp, #116	@ 0x74
 800d51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d522:	b003      	add	sp, #12
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	20000034 	.word	0x20000034
 800d52c:	ffff0208 	.word	0xffff0208

0800d530 <siscanf>:
 800d530:	b40e      	push	{r1, r2, r3}
 800d532:	b570      	push	{r4, r5, r6, lr}
 800d534:	b09d      	sub	sp, #116	@ 0x74
 800d536:	ac21      	add	r4, sp, #132	@ 0x84
 800d538:	2500      	movs	r5, #0
 800d53a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d53e:	f854 6b04 	ldr.w	r6, [r4], #4
 800d542:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d546:	951b      	str	r5, [sp, #108]	@ 0x6c
 800d548:	9002      	str	r0, [sp, #8]
 800d54a:	9006      	str	r0, [sp, #24]
 800d54c:	f7f2 feb0 	bl	80002b0 <strlen>
 800d550:	4b0b      	ldr	r3, [pc, #44]	@ (800d580 <siscanf+0x50>)
 800d552:	9003      	str	r0, [sp, #12]
 800d554:	9007      	str	r0, [sp, #28]
 800d556:	480b      	ldr	r0, [pc, #44]	@ (800d584 <siscanf+0x54>)
 800d558:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d55a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d55e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d562:	4632      	mov	r2, r6
 800d564:	4623      	mov	r3, r4
 800d566:	a902      	add	r1, sp, #8
 800d568:	6800      	ldr	r0, [r0, #0]
 800d56a:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d56c:	9514      	str	r5, [sp, #80]	@ 0x50
 800d56e:	9401      	str	r4, [sp, #4]
 800d570:	f002 fc9e 	bl	800feb0 <__ssvfiscanf_r>
 800d574:	b01d      	add	sp, #116	@ 0x74
 800d576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d57a:	b003      	add	sp, #12
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	0800d5ab 	.word	0x0800d5ab
 800d584:	20000034 	.word	0x20000034

0800d588 <__sread>:
 800d588:	b510      	push	{r4, lr}
 800d58a:	460c      	mov	r4, r1
 800d58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d590:	f000 f894 	bl	800d6bc <_read_r>
 800d594:	2800      	cmp	r0, #0
 800d596:	bfab      	itete	ge
 800d598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d59a:	89a3      	ldrhlt	r3, [r4, #12]
 800d59c:	181b      	addge	r3, r3, r0
 800d59e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d5a2:	bfac      	ite	ge
 800d5a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d5a6:	81a3      	strhlt	r3, [r4, #12]
 800d5a8:	bd10      	pop	{r4, pc}

0800d5aa <__seofread>:
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	4770      	bx	lr

0800d5ae <__swrite>:
 800d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b2:	461f      	mov	r7, r3
 800d5b4:	898b      	ldrh	r3, [r1, #12]
 800d5b6:	05db      	lsls	r3, r3, #23
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	4616      	mov	r6, r2
 800d5be:	d505      	bpl.n	800d5cc <__swrite+0x1e>
 800d5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f000 f866 	bl	800d698 <_lseek_r>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	4632      	mov	r2, r6
 800d5da:	463b      	mov	r3, r7
 800d5dc:	4628      	mov	r0, r5
 800d5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e2:	f000 b88d 	b.w	800d700 <_write_r>

0800d5e6 <__sseek>:
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	460c      	mov	r4, r1
 800d5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ee:	f000 f853 	bl	800d698 <_lseek_r>
 800d5f2:	1c43      	adds	r3, r0, #1
 800d5f4:	89a3      	ldrh	r3, [r4, #12]
 800d5f6:	bf15      	itete	ne
 800d5f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d5fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d5fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d602:	81a3      	strheq	r3, [r4, #12]
 800d604:	bf18      	it	ne
 800d606:	81a3      	strhne	r3, [r4, #12]
 800d608:	bd10      	pop	{r4, pc}

0800d60a <__sclose>:
 800d60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d60e:	f000 b833 	b.w	800d678 <_close_r>

0800d612 <memcmp>:
 800d612:	b510      	push	{r4, lr}
 800d614:	3901      	subs	r1, #1
 800d616:	4402      	add	r2, r0
 800d618:	4290      	cmp	r0, r2
 800d61a:	d101      	bne.n	800d620 <memcmp+0xe>
 800d61c:	2000      	movs	r0, #0
 800d61e:	e005      	b.n	800d62c <memcmp+0x1a>
 800d620:	7803      	ldrb	r3, [r0, #0]
 800d622:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d626:	42a3      	cmp	r3, r4
 800d628:	d001      	beq.n	800d62e <memcmp+0x1c>
 800d62a:	1b18      	subs	r0, r3, r4
 800d62c:	bd10      	pop	{r4, pc}
 800d62e:	3001      	adds	r0, #1
 800d630:	e7f2      	b.n	800d618 <memcmp+0x6>

0800d632 <memset>:
 800d632:	4402      	add	r2, r0
 800d634:	4603      	mov	r3, r0
 800d636:	4293      	cmp	r3, r2
 800d638:	d100      	bne.n	800d63c <memset+0xa>
 800d63a:	4770      	bx	lr
 800d63c:	f803 1b01 	strb.w	r1, [r3], #1
 800d640:	e7f9      	b.n	800d636 <memset+0x4>

0800d642 <strstr>:
 800d642:	780a      	ldrb	r2, [r1, #0]
 800d644:	b570      	push	{r4, r5, r6, lr}
 800d646:	b96a      	cbnz	r2, 800d664 <strstr+0x22>
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d109      	bne.n	800d662 <strstr+0x20>
 800d64e:	460c      	mov	r4, r1
 800d650:	4605      	mov	r5, r0
 800d652:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0f6      	beq.n	800d648 <strstr+0x6>
 800d65a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d65e:	429e      	cmp	r6, r3
 800d660:	d0f7      	beq.n	800d652 <strstr+0x10>
 800d662:	3001      	adds	r0, #1
 800d664:	7803      	ldrb	r3, [r0, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1ef      	bne.n	800d64a <strstr+0x8>
 800d66a:	4618      	mov	r0, r3
 800d66c:	e7ec      	b.n	800d648 <strstr+0x6>
	...

0800d670 <_localeconv_r>:
 800d670:	4800      	ldr	r0, [pc, #0]	@ (800d674 <_localeconv_r+0x4>)
 800d672:	4770      	bx	lr
 800d674:	20000174 	.word	0x20000174

0800d678 <_close_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d06      	ldr	r5, [pc, #24]	@ (800d694 <_close_r+0x1c>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7f6 f8b8 	bl	80037f8 <_close>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_close_r+0x1a>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_close_r+0x1a>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20001c30 	.word	0x20001c30

0800d698 <_lseek_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4d07      	ldr	r5, [pc, #28]	@ (800d6b8 <_lseek_r+0x20>)
 800d69c:	4604      	mov	r4, r0
 800d69e:	4608      	mov	r0, r1
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	602a      	str	r2, [r5, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	f7f6 f8cd 	bl	8003846 <_lseek>
 800d6ac:	1c43      	adds	r3, r0, #1
 800d6ae:	d102      	bne.n	800d6b6 <_lseek_r+0x1e>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	b103      	cbz	r3, 800d6b6 <_lseek_r+0x1e>
 800d6b4:	6023      	str	r3, [r4, #0]
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}
 800d6b8:	20001c30 	.word	0x20001c30

0800d6bc <_read_r>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4d07      	ldr	r5, [pc, #28]	@ (800d6dc <_read_r+0x20>)
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	4608      	mov	r0, r1
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	602a      	str	r2, [r5, #0]
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	f7f6 f85b 	bl	8003786 <_read>
 800d6d0:	1c43      	adds	r3, r0, #1
 800d6d2:	d102      	bne.n	800d6da <_read_r+0x1e>
 800d6d4:	682b      	ldr	r3, [r5, #0]
 800d6d6:	b103      	cbz	r3, 800d6da <_read_r+0x1e>
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	bd38      	pop	{r3, r4, r5, pc}
 800d6dc:	20001c30 	.word	0x20001c30

0800d6e0 <_sbrk_r>:
 800d6e0:	b538      	push	{r3, r4, r5, lr}
 800d6e2:	4d06      	ldr	r5, [pc, #24]	@ (800d6fc <_sbrk_r+0x1c>)
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	4608      	mov	r0, r1
 800d6ea:	602b      	str	r3, [r5, #0]
 800d6ec:	f7f6 f8b8 	bl	8003860 <_sbrk>
 800d6f0:	1c43      	adds	r3, r0, #1
 800d6f2:	d102      	bne.n	800d6fa <_sbrk_r+0x1a>
 800d6f4:	682b      	ldr	r3, [r5, #0]
 800d6f6:	b103      	cbz	r3, 800d6fa <_sbrk_r+0x1a>
 800d6f8:	6023      	str	r3, [r4, #0]
 800d6fa:	bd38      	pop	{r3, r4, r5, pc}
 800d6fc:	20001c30 	.word	0x20001c30

0800d700 <_write_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	@ (800d720 <_write_r+0x20>)
 800d704:	4604      	mov	r4, r0
 800d706:	4608      	mov	r0, r1
 800d708:	4611      	mov	r1, r2
 800d70a:	2200      	movs	r2, #0
 800d70c:	602a      	str	r2, [r5, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	f7f6 f856 	bl	80037c0 <_write>
 800d714:	1c43      	adds	r3, r0, #1
 800d716:	d102      	bne.n	800d71e <_write_r+0x1e>
 800d718:	682b      	ldr	r3, [r5, #0]
 800d71a:	b103      	cbz	r3, 800d71e <_write_r+0x1e>
 800d71c:	6023      	str	r3, [r4, #0]
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	20001c30 	.word	0x20001c30

0800d724 <__errno>:
 800d724:	4b01      	ldr	r3, [pc, #4]	@ (800d72c <__errno+0x8>)
 800d726:	6818      	ldr	r0, [r3, #0]
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	20000034 	.word	0x20000034

0800d730 <__libc_init_array>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	4d0d      	ldr	r5, [pc, #52]	@ (800d768 <__libc_init_array+0x38>)
 800d734:	4c0d      	ldr	r4, [pc, #52]	@ (800d76c <__libc_init_array+0x3c>)
 800d736:	1b64      	subs	r4, r4, r5
 800d738:	10a4      	asrs	r4, r4, #2
 800d73a:	2600      	movs	r6, #0
 800d73c:	42a6      	cmp	r6, r4
 800d73e:	d109      	bne.n	800d754 <__libc_init_array+0x24>
 800d740:	4d0b      	ldr	r5, [pc, #44]	@ (800d770 <__libc_init_array+0x40>)
 800d742:	4c0c      	ldr	r4, [pc, #48]	@ (800d774 <__libc_init_array+0x44>)
 800d744:	f005 fd54 	bl	80131f0 <_init>
 800d748:	1b64      	subs	r4, r4, r5
 800d74a:	10a4      	asrs	r4, r4, #2
 800d74c:	2600      	movs	r6, #0
 800d74e:	42a6      	cmp	r6, r4
 800d750:	d105      	bne.n	800d75e <__libc_init_array+0x2e>
 800d752:	bd70      	pop	{r4, r5, r6, pc}
 800d754:	f855 3b04 	ldr.w	r3, [r5], #4
 800d758:	4798      	blx	r3
 800d75a:	3601      	adds	r6, #1
 800d75c:	e7ee      	b.n	800d73c <__libc_init_array+0xc>
 800d75e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d762:	4798      	blx	r3
 800d764:	3601      	adds	r6, #1
 800d766:	e7f2      	b.n	800d74e <__libc_init_array+0x1e>
 800d768:	08013800 	.word	0x08013800
 800d76c:	08013800 	.word	0x08013800
 800d770:	08013800 	.word	0x08013800
 800d774:	08013804 	.word	0x08013804

0800d778 <__retarget_lock_init_recursive>:
 800d778:	4770      	bx	lr

0800d77a <__retarget_lock_acquire_recursive>:
 800d77a:	4770      	bx	lr

0800d77c <__retarget_lock_release_recursive>:
 800d77c:	4770      	bx	lr

0800d77e <memcpy>:
 800d77e:	440a      	add	r2, r1
 800d780:	4291      	cmp	r1, r2
 800d782:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d786:	d100      	bne.n	800d78a <memcpy+0xc>
 800d788:	4770      	bx	lr
 800d78a:	b510      	push	{r4, lr}
 800d78c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d790:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d794:	4291      	cmp	r1, r2
 800d796:	d1f9      	bne.n	800d78c <memcpy+0xe>
 800d798:	bd10      	pop	{r4, pc}
	...

0800d79c <nanf>:
 800d79c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d7a4 <nanf+0x8>
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	7fc00000 	.word	0x7fc00000

0800d7a8 <quorem>:
 800d7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7ac:	6903      	ldr	r3, [r0, #16]
 800d7ae:	690c      	ldr	r4, [r1, #16]
 800d7b0:	42a3      	cmp	r3, r4
 800d7b2:	4607      	mov	r7, r0
 800d7b4:	db7e      	blt.n	800d8b4 <quorem+0x10c>
 800d7b6:	3c01      	subs	r4, #1
 800d7b8:	f101 0814 	add.w	r8, r1, #20
 800d7bc:	00a3      	lsls	r3, r4, #2
 800d7be:	f100 0514 	add.w	r5, r0, #20
 800d7c2:	9300      	str	r3, [sp, #0]
 800d7c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7da:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7de:	d32e      	bcc.n	800d83e <quorem+0x96>
 800d7e0:	f04f 0a00 	mov.w	sl, #0
 800d7e4:	46c4      	mov	ip, r8
 800d7e6:	46ae      	mov	lr, r5
 800d7e8:	46d3      	mov	fp, sl
 800d7ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d7ee:	b298      	uxth	r0, r3
 800d7f0:	fb06 a000 	mla	r0, r6, r0, sl
 800d7f4:	0c02      	lsrs	r2, r0, #16
 800d7f6:	0c1b      	lsrs	r3, r3, #16
 800d7f8:	fb06 2303 	mla	r3, r6, r3, r2
 800d7fc:	f8de 2000 	ldr.w	r2, [lr]
 800d800:	b280      	uxth	r0, r0
 800d802:	b292      	uxth	r2, r2
 800d804:	1a12      	subs	r2, r2, r0
 800d806:	445a      	add	r2, fp
 800d808:	f8de 0000 	ldr.w	r0, [lr]
 800d80c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d810:	b29b      	uxth	r3, r3
 800d812:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d816:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d81a:	b292      	uxth	r2, r2
 800d81c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d820:	45e1      	cmp	r9, ip
 800d822:	f84e 2b04 	str.w	r2, [lr], #4
 800d826:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d82a:	d2de      	bcs.n	800d7ea <quorem+0x42>
 800d82c:	9b00      	ldr	r3, [sp, #0]
 800d82e:	58eb      	ldr	r3, [r5, r3]
 800d830:	b92b      	cbnz	r3, 800d83e <quorem+0x96>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	3b04      	subs	r3, #4
 800d836:	429d      	cmp	r5, r3
 800d838:	461a      	mov	r2, r3
 800d83a:	d32f      	bcc.n	800d89c <quorem+0xf4>
 800d83c:	613c      	str	r4, [r7, #16]
 800d83e:	4638      	mov	r0, r7
 800d840:	f001 f910 	bl	800ea64 <__mcmp>
 800d844:	2800      	cmp	r0, #0
 800d846:	db25      	blt.n	800d894 <quorem+0xec>
 800d848:	4629      	mov	r1, r5
 800d84a:	2000      	movs	r0, #0
 800d84c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d850:	f8d1 c000 	ldr.w	ip, [r1]
 800d854:	fa1f fe82 	uxth.w	lr, r2
 800d858:	fa1f f38c 	uxth.w	r3, ip
 800d85c:	eba3 030e 	sub.w	r3, r3, lr
 800d860:	4403      	add	r3, r0
 800d862:	0c12      	lsrs	r2, r2, #16
 800d864:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d868:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d872:	45c1      	cmp	r9, r8
 800d874:	f841 3b04 	str.w	r3, [r1], #4
 800d878:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d87c:	d2e6      	bcs.n	800d84c <quorem+0xa4>
 800d87e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d886:	b922      	cbnz	r2, 800d892 <quorem+0xea>
 800d888:	3b04      	subs	r3, #4
 800d88a:	429d      	cmp	r5, r3
 800d88c:	461a      	mov	r2, r3
 800d88e:	d30b      	bcc.n	800d8a8 <quorem+0x100>
 800d890:	613c      	str	r4, [r7, #16]
 800d892:	3601      	adds	r6, #1
 800d894:	4630      	mov	r0, r6
 800d896:	b003      	add	sp, #12
 800d898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89c:	6812      	ldr	r2, [r2, #0]
 800d89e:	3b04      	subs	r3, #4
 800d8a0:	2a00      	cmp	r2, #0
 800d8a2:	d1cb      	bne.n	800d83c <quorem+0x94>
 800d8a4:	3c01      	subs	r4, #1
 800d8a6:	e7c6      	b.n	800d836 <quorem+0x8e>
 800d8a8:	6812      	ldr	r2, [r2, #0]
 800d8aa:	3b04      	subs	r3, #4
 800d8ac:	2a00      	cmp	r2, #0
 800d8ae:	d1ef      	bne.n	800d890 <quorem+0xe8>
 800d8b0:	3c01      	subs	r4, #1
 800d8b2:	e7ea      	b.n	800d88a <quorem+0xe2>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	e7ee      	b.n	800d896 <quorem+0xee>

0800d8b8 <_dtoa_r>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	69c7      	ldr	r7, [r0, #28]
 800d8be:	b097      	sub	sp, #92	@ 0x5c
 800d8c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d8c4:	ec55 4b10 	vmov	r4, r5, d0
 800d8c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d8ca:	9107      	str	r1, [sp, #28]
 800d8cc:	4681      	mov	r9, r0
 800d8ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800d8d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d8d2:	b97f      	cbnz	r7, 800d8f4 <_dtoa_r+0x3c>
 800d8d4:	2010      	movs	r0, #16
 800d8d6:	f7fe fe2d 	bl	800c534 <malloc>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	f8c9 001c 	str.w	r0, [r9, #28]
 800d8e0:	b920      	cbnz	r0, 800d8ec <_dtoa_r+0x34>
 800d8e2:	4ba9      	ldr	r3, [pc, #676]	@ (800db88 <_dtoa_r+0x2d0>)
 800d8e4:	21ef      	movs	r1, #239	@ 0xef
 800d8e6:	48a9      	ldr	r0, [pc, #676]	@ (800db8c <_dtoa_r+0x2d4>)
 800d8e8:	f002 fefa 	bl	80106e0 <__assert_func>
 800d8ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d8f0:	6007      	str	r7, [r0, #0]
 800d8f2:	60c7      	str	r7, [r0, #12]
 800d8f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d8f8:	6819      	ldr	r1, [r3, #0]
 800d8fa:	b159      	cbz	r1, 800d914 <_dtoa_r+0x5c>
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	604a      	str	r2, [r1, #4]
 800d900:	2301      	movs	r3, #1
 800d902:	4093      	lsls	r3, r2
 800d904:	608b      	str	r3, [r1, #8]
 800d906:	4648      	mov	r0, r9
 800d908:	f000 fe30 	bl	800e56c <_Bfree>
 800d90c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d910:	2200      	movs	r2, #0
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	1e2b      	subs	r3, r5, #0
 800d916:	bfb9      	ittee	lt
 800d918:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d91c:	9305      	strlt	r3, [sp, #20]
 800d91e:	2300      	movge	r3, #0
 800d920:	6033      	strge	r3, [r6, #0]
 800d922:	9f05      	ldr	r7, [sp, #20]
 800d924:	4b9a      	ldr	r3, [pc, #616]	@ (800db90 <_dtoa_r+0x2d8>)
 800d926:	bfbc      	itt	lt
 800d928:	2201      	movlt	r2, #1
 800d92a:	6032      	strlt	r2, [r6, #0]
 800d92c:	43bb      	bics	r3, r7
 800d92e:	d112      	bne.n	800d956 <_dtoa_r+0x9e>
 800d930:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d932:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d936:	6013      	str	r3, [r2, #0]
 800d938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d93c:	4323      	orrs	r3, r4
 800d93e:	f000 855a 	beq.w	800e3f6 <_dtoa_r+0xb3e>
 800d942:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d944:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dba4 <_dtoa_r+0x2ec>
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f000 855c 	beq.w	800e406 <_dtoa_r+0xb4e>
 800d94e:	f10a 0303 	add.w	r3, sl, #3
 800d952:	f000 bd56 	b.w	800e402 <_dtoa_r+0xb4a>
 800d956:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d95a:	2200      	movs	r2, #0
 800d95c:	ec51 0b17 	vmov	r0, r1, d7
 800d960:	2300      	movs	r3, #0
 800d962:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d966:	f7f3 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800d96a:	4680      	mov	r8, r0
 800d96c:	b158      	cbz	r0, 800d986 <_dtoa_r+0xce>
 800d96e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d970:	2301      	movs	r3, #1
 800d972:	6013      	str	r3, [r2, #0]
 800d974:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d976:	b113      	cbz	r3, 800d97e <_dtoa_r+0xc6>
 800d978:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d97a:	4b86      	ldr	r3, [pc, #536]	@ (800db94 <_dtoa_r+0x2dc>)
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800dba8 <_dtoa_r+0x2f0>
 800d982:	f000 bd40 	b.w	800e406 <_dtoa_r+0xb4e>
 800d986:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d98a:	aa14      	add	r2, sp, #80	@ 0x50
 800d98c:	a915      	add	r1, sp, #84	@ 0x54
 800d98e:	4648      	mov	r0, r9
 800d990:	f001 f988 	bl	800eca4 <__d2b>
 800d994:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d998:	9002      	str	r0, [sp, #8]
 800d99a:	2e00      	cmp	r6, #0
 800d99c:	d078      	beq.n	800da90 <_dtoa_r+0x1d8>
 800d99e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d9a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d9ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d9b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d9b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4b76      	ldr	r3, [pc, #472]	@ (800db98 <_dtoa_r+0x2e0>)
 800d9be:	f7f2 fc83 	bl	80002c8 <__aeabi_dsub>
 800d9c2:	a36b      	add	r3, pc, #428	@ (adr r3, 800db70 <_dtoa_r+0x2b8>)
 800d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c8:	f7f2 fe36 	bl	8000638 <__aeabi_dmul>
 800d9cc:	a36a      	add	r3, pc, #424	@ (adr r3, 800db78 <_dtoa_r+0x2c0>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	f7f2 fc7b 	bl	80002cc <__adddf3>
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4630      	mov	r0, r6
 800d9da:	460d      	mov	r5, r1
 800d9dc:	f7f2 fdc2 	bl	8000564 <__aeabi_i2d>
 800d9e0:	a367      	add	r3, pc, #412	@ (adr r3, 800db80 <_dtoa_r+0x2c8>)
 800d9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e6:	f7f2 fe27 	bl	8000638 <__aeabi_dmul>
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	f7f2 fc6b 	bl	80002cc <__adddf3>
 800d9f6:	4604      	mov	r4, r0
 800d9f8:	460d      	mov	r5, r1
 800d9fa:	f7f3 f8cd 	bl	8000b98 <__aeabi_d2iz>
 800d9fe:	2200      	movs	r2, #0
 800da00:	4607      	mov	r7, r0
 800da02:	2300      	movs	r3, #0
 800da04:	4620      	mov	r0, r4
 800da06:	4629      	mov	r1, r5
 800da08:	f7f3 f888 	bl	8000b1c <__aeabi_dcmplt>
 800da0c:	b140      	cbz	r0, 800da20 <_dtoa_r+0x168>
 800da0e:	4638      	mov	r0, r7
 800da10:	f7f2 fda8 	bl	8000564 <__aeabi_i2d>
 800da14:	4622      	mov	r2, r4
 800da16:	462b      	mov	r3, r5
 800da18:	f7f3 f876 	bl	8000b08 <__aeabi_dcmpeq>
 800da1c:	b900      	cbnz	r0, 800da20 <_dtoa_r+0x168>
 800da1e:	3f01      	subs	r7, #1
 800da20:	2f16      	cmp	r7, #22
 800da22:	d852      	bhi.n	800daca <_dtoa_r+0x212>
 800da24:	4b5d      	ldr	r3, [pc, #372]	@ (800db9c <_dtoa_r+0x2e4>)
 800da26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800da32:	f7f3 f873 	bl	8000b1c <__aeabi_dcmplt>
 800da36:	2800      	cmp	r0, #0
 800da38:	d049      	beq.n	800dace <_dtoa_r+0x216>
 800da3a:	3f01      	subs	r7, #1
 800da3c:	2300      	movs	r3, #0
 800da3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800da40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800da42:	1b9b      	subs	r3, r3, r6
 800da44:	1e5a      	subs	r2, r3, #1
 800da46:	bf45      	ittet	mi
 800da48:	f1c3 0301 	rsbmi	r3, r3, #1
 800da4c:	9300      	strmi	r3, [sp, #0]
 800da4e:	2300      	movpl	r3, #0
 800da50:	2300      	movmi	r3, #0
 800da52:	9206      	str	r2, [sp, #24]
 800da54:	bf54      	ite	pl
 800da56:	9300      	strpl	r3, [sp, #0]
 800da58:	9306      	strmi	r3, [sp, #24]
 800da5a:	2f00      	cmp	r7, #0
 800da5c:	db39      	blt.n	800dad2 <_dtoa_r+0x21a>
 800da5e:	9b06      	ldr	r3, [sp, #24]
 800da60:	970d      	str	r7, [sp, #52]	@ 0x34
 800da62:	443b      	add	r3, r7
 800da64:	9306      	str	r3, [sp, #24]
 800da66:	2300      	movs	r3, #0
 800da68:	9308      	str	r3, [sp, #32]
 800da6a:	9b07      	ldr	r3, [sp, #28]
 800da6c:	2b09      	cmp	r3, #9
 800da6e:	d863      	bhi.n	800db38 <_dtoa_r+0x280>
 800da70:	2b05      	cmp	r3, #5
 800da72:	bfc4      	itt	gt
 800da74:	3b04      	subgt	r3, #4
 800da76:	9307      	strgt	r3, [sp, #28]
 800da78:	9b07      	ldr	r3, [sp, #28]
 800da7a:	f1a3 0302 	sub.w	r3, r3, #2
 800da7e:	bfcc      	ite	gt
 800da80:	2400      	movgt	r4, #0
 800da82:	2401      	movle	r4, #1
 800da84:	2b03      	cmp	r3, #3
 800da86:	d863      	bhi.n	800db50 <_dtoa_r+0x298>
 800da88:	e8df f003 	tbb	[pc, r3]
 800da8c:	2b375452 	.word	0x2b375452
 800da90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800da94:	441e      	add	r6, r3
 800da96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800da9a:	2b20      	cmp	r3, #32
 800da9c:	bfc1      	itttt	gt
 800da9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800daa2:	409f      	lslgt	r7, r3
 800daa4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800daa8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800daac:	bfd6      	itet	le
 800daae:	f1c3 0320 	rsble	r3, r3, #32
 800dab2:	ea47 0003 	orrgt.w	r0, r7, r3
 800dab6:	fa04 f003 	lslle.w	r0, r4, r3
 800daba:	f7f2 fd43 	bl	8000544 <__aeabi_ui2d>
 800dabe:	2201      	movs	r2, #1
 800dac0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dac4:	3e01      	subs	r6, #1
 800dac6:	9212      	str	r2, [sp, #72]	@ 0x48
 800dac8:	e776      	b.n	800d9b8 <_dtoa_r+0x100>
 800daca:	2301      	movs	r3, #1
 800dacc:	e7b7      	b.n	800da3e <_dtoa_r+0x186>
 800dace:	9010      	str	r0, [sp, #64]	@ 0x40
 800dad0:	e7b6      	b.n	800da40 <_dtoa_r+0x188>
 800dad2:	9b00      	ldr	r3, [sp, #0]
 800dad4:	1bdb      	subs	r3, r3, r7
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	427b      	negs	r3, r7
 800dada:	9308      	str	r3, [sp, #32]
 800dadc:	2300      	movs	r3, #0
 800dade:	930d      	str	r3, [sp, #52]	@ 0x34
 800dae0:	e7c3      	b.n	800da6a <_dtoa_r+0x1b2>
 800dae2:	2301      	movs	r3, #1
 800dae4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dae8:	eb07 0b03 	add.w	fp, r7, r3
 800daec:	f10b 0301 	add.w	r3, fp, #1
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	9303      	str	r3, [sp, #12]
 800daf4:	bfb8      	it	lt
 800daf6:	2301      	movlt	r3, #1
 800daf8:	e006      	b.n	800db08 <_dtoa_r+0x250>
 800dafa:	2301      	movs	r3, #1
 800dafc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dafe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800db00:	2b00      	cmp	r3, #0
 800db02:	dd28      	ble.n	800db56 <_dtoa_r+0x29e>
 800db04:	469b      	mov	fp, r3
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800db0c:	2100      	movs	r1, #0
 800db0e:	2204      	movs	r2, #4
 800db10:	f102 0514 	add.w	r5, r2, #20
 800db14:	429d      	cmp	r5, r3
 800db16:	d926      	bls.n	800db66 <_dtoa_r+0x2ae>
 800db18:	6041      	str	r1, [r0, #4]
 800db1a:	4648      	mov	r0, r9
 800db1c:	f000 fce6 	bl	800e4ec <_Balloc>
 800db20:	4682      	mov	sl, r0
 800db22:	2800      	cmp	r0, #0
 800db24:	d142      	bne.n	800dbac <_dtoa_r+0x2f4>
 800db26:	4b1e      	ldr	r3, [pc, #120]	@ (800dba0 <_dtoa_r+0x2e8>)
 800db28:	4602      	mov	r2, r0
 800db2a:	f240 11af 	movw	r1, #431	@ 0x1af
 800db2e:	e6da      	b.n	800d8e6 <_dtoa_r+0x2e>
 800db30:	2300      	movs	r3, #0
 800db32:	e7e3      	b.n	800dafc <_dtoa_r+0x244>
 800db34:	2300      	movs	r3, #0
 800db36:	e7d5      	b.n	800dae4 <_dtoa_r+0x22c>
 800db38:	2401      	movs	r4, #1
 800db3a:	2300      	movs	r3, #0
 800db3c:	9307      	str	r3, [sp, #28]
 800db3e:	9409      	str	r4, [sp, #36]	@ 0x24
 800db40:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800db44:	2200      	movs	r2, #0
 800db46:	f8cd b00c 	str.w	fp, [sp, #12]
 800db4a:	2312      	movs	r3, #18
 800db4c:	920c      	str	r2, [sp, #48]	@ 0x30
 800db4e:	e7db      	b.n	800db08 <_dtoa_r+0x250>
 800db50:	2301      	movs	r3, #1
 800db52:	9309      	str	r3, [sp, #36]	@ 0x24
 800db54:	e7f4      	b.n	800db40 <_dtoa_r+0x288>
 800db56:	f04f 0b01 	mov.w	fp, #1
 800db5a:	f8cd b00c 	str.w	fp, [sp, #12]
 800db5e:	465b      	mov	r3, fp
 800db60:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800db64:	e7d0      	b.n	800db08 <_dtoa_r+0x250>
 800db66:	3101      	adds	r1, #1
 800db68:	0052      	lsls	r2, r2, #1
 800db6a:	e7d1      	b.n	800db10 <_dtoa_r+0x258>
 800db6c:	f3af 8000 	nop.w
 800db70:	636f4361 	.word	0x636f4361
 800db74:	3fd287a7 	.word	0x3fd287a7
 800db78:	8b60c8b3 	.word	0x8b60c8b3
 800db7c:	3fc68a28 	.word	0x3fc68a28
 800db80:	509f79fb 	.word	0x509f79fb
 800db84:	3fd34413 	.word	0x3fd34413
 800db88:	08013344 	.word	0x08013344
 800db8c:	0801335b 	.word	0x0801335b
 800db90:	7ff00000 	.word	0x7ff00000
 800db94:	08013447 	.word	0x08013447
 800db98:	3ff80000 	.word	0x3ff80000
 800db9c:	08013528 	.word	0x08013528
 800dba0:	080133b3 	.word	0x080133b3
 800dba4:	08013340 	.word	0x08013340
 800dba8:	08013446 	.word	0x08013446
 800dbac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbb0:	6018      	str	r0, [r3, #0]
 800dbb2:	9b03      	ldr	r3, [sp, #12]
 800dbb4:	2b0e      	cmp	r3, #14
 800dbb6:	f200 80a1 	bhi.w	800dcfc <_dtoa_r+0x444>
 800dbba:	2c00      	cmp	r4, #0
 800dbbc:	f000 809e 	beq.w	800dcfc <_dtoa_r+0x444>
 800dbc0:	2f00      	cmp	r7, #0
 800dbc2:	dd33      	ble.n	800dc2c <_dtoa_r+0x374>
 800dbc4:	4b9c      	ldr	r3, [pc, #624]	@ (800de38 <_dtoa_r+0x580>)
 800dbc6:	f007 020f 	and.w	r2, r7, #15
 800dbca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dbce:	ed93 7b00 	vldr	d7, [r3]
 800dbd2:	05f8      	lsls	r0, r7, #23
 800dbd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dbd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dbdc:	d516      	bpl.n	800dc0c <_dtoa_r+0x354>
 800dbde:	4b97      	ldr	r3, [pc, #604]	@ (800de3c <_dtoa_r+0x584>)
 800dbe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dbe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dbe8:	f7f2 fe50 	bl	800088c <__aeabi_ddiv>
 800dbec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dbf0:	f004 040f 	and.w	r4, r4, #15
 800dbf4:	2603      	movs	r6, #3
 800dbf6:	4d91      	ldr	r5, [pc, #580]	@ (800de3c <_dtoa_r+0x584>)
 800dbf8:	b954      	cbnz	r4, 800dc10 <_dtoa_r+0x358>
 800dbfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dbfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dc02:	f7f2 fe43 	bl	800088c <__aeabi_ddiv>
 800dc06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc0a:	e028      	b.n	800dc5e <_dtoa_r+0x3a6>
 800dc0c:	2602      	movs	r6, #2
 800dc0e:	e7f2      	b.n	800dbf6 <_dtoa_r+0x33e>
 800dc10:	07e1      	lsls	r1, r4, #31
 800dc12:	d508      	bpl.n	800dc26 <_dtoa_r+0x36e>
 800dc14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dc18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dc1c:	f7f2 fd0c 	bl	8000638 <__aeabi_dmul>
 800dc20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dc24:	3601      	adds	r6, #1
 800dc26:	1064      	asrs	r4, r4, #1
 800dc28:	3508      	adds	r5, #8
 800dc2a:	e7e5      	b.n	800dbf8 <_dtoa_r+0x340>
 800dc2c:	f000 80af 	beq.w	800dd8e <_dtoa_r+0x4d6>
 800dc30:	427c      	negs	r4, r7
 800dc32:	4b81      	ldr	r3, [pc, #516]	@ (800de38 <_dtoa_r+0x580>)
 800dc34:	4d81      	ldr	r5, [pc, #516]	@ (800de3c <_dtoa_r+0x584>)
 800dc36:	f004 020f 	and.w	r2, r4, #15
 800dc3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dc46:	f7f2 fcf7 	bl	8000638 <__aeabi_dmul>
 800dc4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc4e:	1124      	asrs	r4, r4, #4
 800dc50:	2300      	movs	r3, #0
 800dc52:	2602      	movs	r6, #2
 800dc54:	2c00      	cmp	r4, #0
 800dc56:	f040 808f 	bne.w	800dd78 <_dtoa_r+0x4c0>
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1d3      	bne.n	800dc06 <_dtoa_r+0x34e>
 800dc5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dc60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 8094 	beq.w	800dd92 <_dtoa_r+0x4da>
 800dc6a:	4b75      	ldr	r3, [pc, #468]	@ (800de40 <_dtoa_r+0x588>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	4620      	mov	r0, r4
 800dc70:	4629      	mov	r1, r5
 800dc72:	f7f2 ff53 	bl	8000b1c <__aeabi_dcmplt>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	f000 808b 	beq.w	800dd92 <_dtoa_r+0x4da>
 800dc7c:	9b03      	ldr	r3, [sp, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	f000 8087 	beq.w	800dd92 <_dtoa_r+0x4da>
 800dc84:	f1bb 0f00 	cmp.w	fp, #0
 800dc88:	dd34      	ble.n	800dcf4 <_dtoa_r+0x43c>
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	4b6d      	ldr	r3, [pc, #436]	@ (800de44 <_dtoa_r+0x58c>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	4629      	mov	r1, r5
 800dc92:	f7f2 fcd1 	bl	8000638 <__aeabi_dmul>
 800dc96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc9a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800dc9e:	3601      	adds	r6, #1
 800dca0:	465c      	mov	r4, fp
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7f2 fc5e 	bl	8000564 <__aeabi_i2d>
 800dca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcac:	f7f2 fcc4 	bl	8000638 <__aeabi_dmul>
 800dcb0:	4b65      	ldr	r3, [pc, #404]	@ (800de48 <_dtoa_r+0x590>)
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f7f2 fb0a 	bl	80002cc <__adddf3>
 800dcb8:	4605      	mov	r5, r0
 800dcba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dcbe:	2c00      	cmp	r4, #0
 800dcc0:	d16a      	bne.n	800dd98 <_dtoa_r+0x4e0>
 800dcc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcc6:	4b61      	ldr	r3, [pc, #388]	@ (800de4c <_dtoa_r+0x594>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f7f2 fafd 	bl	80002c8 <__aeabi_dsub>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcd6:	462a      	mov	r2, r5
 800dcd8:	4633      	mov	r3, r6
 800dcda:	f7f2 ff3d 	bl	8000b58 <__aeabi_dcmpgt>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	f040 8298 	bne.w	800e214 <_dtoa_r+0x95c>
 800dce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dce8:	462a      	mov	r2, r5
 800dcea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dcee:	f7f2 ff15 	bl	8000b1c <__aeabi_dcmplt>
 800dcf2:	bb38      	cbnz	r0, 800dd44 <_dtoa_r+0x48c>
 800dcf4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dcf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dcfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f2c0 8157 	blt.w	800dfb2 <_dtoa_r+0x6fa>
 800dd04:	2f0e      	cmp	r7, #14
 800dd06:	f300 8154 	bgt.w	800dfb2 <_dtoa_r+0x6fa>
 800dd0a:	4b4b      	ldr	r3, [pc, #300]	@ (800de38 <_dtoa_r+0x580>)
 800dd0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd10:	ed93 7b00 	vldr	d7, [r3]
 800dd14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	ed8d 7b00 	vstr	d7, [sp]
 800dd1c:	f280 80e5 	bge.w	800deea <_dtoa_r+0x632>
 800dd20:	9b03      	ldr	r3, [sp, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f300 80e1 	bgt.w	800deea <_dtoa_r+0x632>
 800dd28:	d10c      	bne.n	800dd44 <_dtoa_r+0x48c>
 800dd2a:	4b48      	ldr	r3, [pc, #288]	@ (800de4c <_dtoa_r+0x594>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	ec51 0b17 	vmov	r0, r1, d7
 800dd32:	f7f2 fc81 	bl	8000638 <__aeabi_dmul>
 800dd36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd3a:	f7f2 ff03 	bl	8000b44 <__aeabi_dcmpge>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	f000 8266 	beq.w	800e210 <_dtoa_r+0x958>
 800dd44:	2400      	movs	r4, #0
 800dd46:	4625      	mov	r5, r4
 800dd48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd4a:	4656      	mov	r6, sl
 800dd4c:	ea6f 0803 	mvn.w	r8, r3
 800dd50:	2700      	movs	r7, #0
 800dd52:	4621      	mov	r1, r4
 800dd54:	4648      	mov	r0, r9
 800dd56:	f000 fc09 	bl	800e56c <_Bfree>
 800dd5a:	2d00      	cmp	r5, #0
 800dd5c:	f000 80bd 	beq.w	800deda <_dtoa_r+0x622>
 800dd60:	b12f      	cbz	r7, 800dd6e <_dtoa_r+0x4b6>
 800dd62:	42af      	cmp	r7, r5
 800dd64:	d003      	beq.n	800dd6e <_dtoa_r+0x4b6>
 800dd66:	4639      	mov	r1, r7
 800dd68:	4648      	mov	r0, r9
 800dd6a:	f000 fbff 	bl	800e56c <_Bfree>
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4648      	mov	r0, r9
 800dd72:	f000 fbfb 	bl	800e56c <_Bfree>
 800dd76:	e0b0      	b.n	800deda <_dtoa_r+0x622>
 800dd78:	07e2      	lsls	r2, r4, #31
 800dd7a:	d505      	bpl.n	800dd88 <_dtoa_r+0x4d0>
 800dd7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd80:	f7f2 fc5a 	bl	8000638 <__aeabi_dmul>
 800dd84:	3601      	adds	r6, #1
 800dd86:	2301      	movs	r3, #1
 800dd88:	1064      	asrs	r4, r4, #1
 800dd8a:	3508      	adds	r5, #8
 800dd8c:	e762      	b.n	800dc54 <_dtoa_r+0x39c>
 800dd8e:	2602      	movs	r6, #2
 800dd90:	e765      	b.n	800dc5e <_dtoa_r+0x3a6>
 800dd92:	9c03      	ldr	r4, [sp, #12]
 800dd94:	46b8      	mov	r8, r7
 800dd96:	e784      	b.n	800dca2 <_dtoa_r+0x3ea>
 800dd98:	4b27      	ldr	r3, [pc, #156]	@ (800de38 <_dtoa_r+0x580>)
 800dd9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dda0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dda4:	4454      	add	r4, sl
 800dda6:	2900      	cmp	r1, #0
 800dda8:	d054      	beq.n	800de54 <_dtoa_r+0x59c>
 800ddaa:	4929      	ldr	r1, [pc, #164]	@ (800de50 <_dtoa_r+0x598>)
 800ddac:	2000      	movs	r0, #0
 800ddae:	f7f2 fd6d 	bl	800088c <__aeabi_ddiv>
 800ddb2:	4633      	mov	r3, r6
 800ddb4:	462a      	mov	r2, r5
 800ddb6:	f7f2 fa87 	bl	80002c8 <__aeabi_dsub>
 800ddba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ddbe:	4656      	mov	r6, sl
 800ddc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddc4:	f7f2 fee8 	bl	8000b98 <__aeabi_d2iz>
 800ddc8:	4605      	mov	r5, r0
 800ddca:	f7f2 fbcb 	bl	8000564 <__aeabi_i2d>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ddd6:	f7f2 fa77 	bl	80002c8 <__aeabi_dsub>
 800ddda:	3530      	adds	r5, #48	@ 0x30
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dde4:	f806 5b01 	strb.w	r5, [r6], #1
 800dde8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ddec:	f7f2 fe96 	bl	8000b1c <__aeabi_dcmplt>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d172      	bne.n	800deda <_dtoa_r+0x622>
 800ddf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddf8:	4911      	ldr	r1, [pc, #68]	@ (800de40 <_dtoa_r+0x588>)
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	f7f2 fa64 	bl	80002c8 <__aeabi_dsub>
 800de00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800de04:	f7f2 fe8a 	bl	8000b1c <__aeabi_dcmplt>
 800de08:	2800      	cmp	r0, #0
 800de0a:	f040 80b4 	bne.w	800df76 <_dtoa_r+0x6be>
 800de0e:	42a6      	cmp	r6, r4
 800de10:	f43f af70 	beq.w	800dcf4 <_dtoa_r+0x43c>
 800de14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de18:	4b0a      	ldr	r3, [pc, #40]	@ (800de44 <_dtoa_r+0x58c>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	f7f2 fc0c 	bl	8000638 <__aeabi_dmul>
 800de20:	4b08      	ldr	r3, [pc, #32]	@ (800de44 <_dtoa_r+0x58c>)
 800de22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de26:	2200      	movs	r2, #0
 800de28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de2c:	f7f2 fc04 	bl	8000638 <__aeabi_dmul>
 800de30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de34:	e7c4      	b.n	800ddc0 <_dtoa_r+0x508>
 800de36:	bf00      	nop
 800de38:	08013528 	.word	0x08013528
 800de3c:	08013500 	.word	0x08013500
 800de40:	3ff00000 	.word	0x3ff00000
 800de44:	40240000 	.word	0x40240000
 800de48:	401c0000 	.word	0x401c0000
 800de4c:	40140000 	.word	0x40140000
 800de50:	3fe00000 	.word	0x3fe00000
 800de54:	4631      	mov	r1, r6
 800de56:	4628      	mov	r0, r5
 800de58:	f7f2 fbee 	bl	8000638 <__aeabi_dmul>
 800de5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800de60:	9413      	str	r4, [sp, #76]	@ 0x4c
 800de62:	4656      	mov	r6, sl
 800de64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de68:	f7f2 fe96 	bl	8000b98 <__aeabi_d2iz>
 800de6c:	4605      	mov	r5, r0
 800de6e:	f7f2 fb79 	bl	8000564 <__aeabi_i2d>
 800de72:	4602      	mov	r2, r0
 800de74:	460b      	mov	r3, r1
 800de76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de7a:	f7f2 fa25 	bl	80002c8 <__aeabi_dsub>
 800de7e:	3530      	adds	r5, #48	@ 0x30
 800de80:	f806 5b01 	strb.w	r5, [r6], #1
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	42a6      	cmp	r6, r4
 800de8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de8e:	f04f 0200 	mov.w	r2, #0
 800de92:	d124      	bne.n	800dede <_dtoa_r+0x626>
 800de94:	4baf      	ldr	r3, [pc, #700]	@ (800e154 <_dtoa_r+0x89c>)
 800de96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800de9a:	f7f2 fa17 	bl	80002cc <__adddf3>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dea6:	f7f2 fe57 	bl	8000b58 <__aeabi_dcmpgt>
 800deaa:	2800      	cmp	r0, #0
 800deac:	d163      	bne.n	800df76 <_dtoa_r+0x6be>
 800deae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800deb2:	49a8      	ldr	r1, [pc, #672]	@ (800e154 <_dtoa_r+0x89c>)
 800deb4:	2000      	movs	r0, #0
 800deb6:	f7f2 fa07 	bl	80002c8 <__aeabi_dsub>
 800deba:	4602      	mov	r2, r0
 800debc:	460b      	mov	r3, r1
 800debe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dec2:	f7f2 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	f43f af14 	beq.w	800dcf4 <_dtoa_r+0x43c>
 800decc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800dece:	1e73      	subs	r3, r6, #1
 800ded0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ded2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ded6:	2b30      	cmp	r3, #48	@ 0x30
 800ded8:	d0f8      	beq.n	800decc <_dtoa_r+0x614>
 800deda:	4647      	mov	r7, r8
 800dedc:	e03b      	b.n	800df56 <_dtoa_r+0x69e>
 800dede:	4b9e      	ldr	r3, [pc, #632]	@ (800e158 <_dtoa_r+0x8a0>)
 800dee0:	f7f2 fbaa 	bl	8000638 <__aeabi_dmul>
 800dee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dee8:	e7bc      	b.n	800de64 <_dtoa_r+0x5ac>
 800deea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800deee:	4656      	mov	r6, sl
 800def0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800def4:	4620      	mov	r0, r4
 800def6:	4629      	mov	r1, r5
 800def8:	f7f2 fcc8 	bl	800088c <__aeabi_ddiv>
 800defc:	f7f2 fe4c 	bl	8000b98 <__aeabi_d2iz>
 800df00:	4680      	mov	r8, r0
 800df02:	f7f2 fb2f 	bl	8000564 <__aeabi_i2d>
 800df06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df0a:	f7f2 fb95 	bl	8000638 <__aeabi_dmul>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	4620      	mov	r0, r4
 800df14:	4629      	mov	r1, r5
 800df16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800df1a:	f7f2 f9d5 	bl	80002c8 <__aeabi_dsub>
 800df1e:	f806 4b01 	strb.w	r4, [r6], #1
 800df22:	9d03      	ldr	r5, [sp, #12]
 800df24:	eba6 040a 	sub.w	r4, r6, sl
 800df28:	42a5      	cmp	r5, r4
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	d133      	bne.n	800df98 <_dtoa_r+0x6e0>
 800df30:	f7f2 f9cc 	bl	80002cc <__adddf3>
 800df34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df38:	4604      	mov	r4, r0
 800df3a:	460d      	mov	r5, r1
 800df3c:	f7f2 fe0c 	bl	8000b58 <__aeabi_dcmpgt>
 800df40:	b9c0      	cbnz	r0, 800df74 <_dtoa_r+0x6bc>
 800df42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df46:	4620      	mov	r0, r4
 800df48:	4629      	mov	r1, r5
 800df4a:	f7f2 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 800df4e:	b110      	cbz	r0, 800df56 <_dtoa_r+0x69e>
 800df50:	f018 0f01 	tst.w	r8, #1
 800df54:	d10e      	bne.n	800df74 <_dtoa_r+0x6bc>
 800df56:	9902      	ldr	r1, [sp, #8]
 800df58:	4648      	mov	r0, r9
 800df5a:	f000 fb07 	bl	800e56c <_Bfree>
 800df5e:	2300      	movs	r3, #0
 800df60:	7033      	strb	r3, [r6, #0]
 800df62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df64:	3701      	adds	r7, #1
 800df66:	601f      	str	r7, [r3, #0]
 800df68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 824b 	beq.w	800e406 <_dtoa_r+0xb4e>
 800df70:	601e      	str	r6, [r3, #0]
 800df72:	e248      	b.n	800e406 <_dtoa_r+0xb4e>
 800df74:	46b8      	mov	r8, r7
 800df76:	4633      	mov	r3, r6
 800df78:	461e      	mov	r6, r3
 800df7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df7e:	2a39      	cmp	r2, #57	@ 0x39
 800df80:	d106      	bne.n	800df90 <_dtoa_r+0x6d8>
 800df82:	459a      	cmp	sl, r3
 800df84:	d1f8      	bne.n	800df78 <_dtoa_r+0x6c0>
 800df86:	2230      	movs	r2, #48	@ 0x30
 800df88:	f108 0801 	add.w	r8, r8, #1
 800df8c:	f88a 2000 	strb.w	r2, [sl]
 800df90:	781a      	ldrb	r2, [r3, #0]
 800df92:	3201      	adds	r2, #1
 800df94:	701a      	strb	r2, [r3, #0]
 800df96:	e7a0      	b.n	800deda <_dtoa_r+0x622>
 800df98:	4b6f      	ldr	r3, [pc, #444]	@ (800e158 <_dtoa_r+0x8a0>)
 800df9a:	2200      	movs	r2, #0
 800df9c:	f7f2 fb4c 	bl	8000638 <__aeabi_dmul>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	460d      	mov	r5, r1
 800dfa8:	f7f2 fdae 	bl	8000b08 <__aeabi_dcmpeq>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d09f      	beq.n	800def0 <_dtoa_r+0x638>
 800dfb0:	e7d1      	b.n	800df56 <_dtoa_r+0x69e>
 800dfb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfb4:	2a00      	cmp	r2, #0
 800dfb6:	f000 80ea 	beq.w	800e18e <_dtoa_r+0x8d6>
 800dfba:	9a07      	ldr	r2, [sp, #28]
 800dfbc:	2a01      	cmp	r2, #1
 800dfbe:	f300 80cd 	bgt.w	800e15c <_dtoa_r+0x8a4>
 800dfc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dfc4:	2a00      	cmp	r2, #0
 800dfc6:	f000 80c1 	beq.w	800e14c <_dtoa_r+0x894>
 800dfca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dfce:	9c08      	ldr	r4, [sp, #32]
 800dfd0:	9e00      	ldr	r6, [sp, #0]
 800dfd2:	9a00      	ldr	r2, [sp, #0]
 800dfd4:	441a      	add	r2, r3
 800dfd6:	9200      	str	r2, [sp, #0]
 800dfd8:	9a06      	ldr	r2, [sp, #24]
 800dfda:	2101      	movs	r1, #1
 800dfdc:	441a      	add	r2, r3
 800dfde:	4648      	mov	r0, r9
 800dfe0:	9206      	str	r2, [sp, #24]
 800dfe2:	f000 fbc1 	bl	800e768 <__i2b>
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	b166      	cbz	r6, 800e004 <_dtoa_r+0x74c>
 800dfea:	9b06      	ldr	r3, [sp, #24]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	dd09      	ble.n	800e004 <_dtoa_r+0x74c>
 800dff0:	42b3      	cmp	r3, r6
 800dff2:	9a00      	ldr	r2, [sp, #0]
 800dff4:	bfa8      	it	ge
 800dff6:	4633      	movge	r3, r6
 800dff8:	1ad2      	subs	r2, r2, r3
 800dffa:	9200      	str	r2, [sp, #0]
 800dffc:	9a06      	ldr	r2, [sp, #24]
 800dffe:	1af6      	subs	r6, r6, r3
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	9306      	str	r3, [sp, #24]
 800e004:	9b08      	ldr	r3, [sp, #32]
 800e006:	b30b      	cbz	r3, 800e04c <_dtoa_r+0x794>
 800e008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f000 80c6 	beq.w	800e19c <_dtoa_r+0x8e4>
 800e010:	2c00      	cmp	r4, #0
 800e012:	f000 80c0 	beq.w	800e196 <_dtoa_r+0x8de>
 800e016:	4629      	mov	r1, r5
 800e018:	4622      	mov	r2, r4
 800e01a:	4648      	mov	r0, r9
 800e01c:	f000 fc5c 	bl	800e8d8 <__pow5mult>
 800e020:	9a02      	ldr	r2, [sp, #8]
 800e022:	4601      	mov	r1, r0
 800e024:	4605      	mov	r5, r0
 800e026:	4648      	mov	r0, r9
 800e028:	f000 fbb4 	bl	800e794 <__multiply>
 800e02c:	9902      	ldr	r1, [sp, #8]
 800e02e:	4680      	mov	r8, r0
 800e030:	4648      	mov	r0, r9
 800e032:	f000 fa9b 	bl	800e56c <_Bfree>
 800e036:	9b08      	ldr	r3, [sp, #32]
 800e038:	1b1b      	subs	r3, r3, r4
 800e03a:	9308      	str	r3, [sp, #32]
 800e03c:	f000 80b1 	beq.w	800e1a2 <_dtoa_r+0x8ea>
 800e040:	9a08      	ldr	r2, [sp, #32]
 800e042:	4641      	mov	r1, r8
 800e044:	4648      	mov	r0, r9
 800e046:	f000 fc47 	bl	800e8d8 <__pow5mult>
 800e04a:	9002      	str	r0, [sp, #8]
 800e04c:	2101      	movs	r1, #1
 800e04e:	4648      	mov	r0, r9
 800e050:	f000 fb8a 	bl	800e768 <__i2b>
 800e054:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e056:	4604      	mov	r4, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 81d8 	beq.w	800e40e <_dtoa_r+0xb56>
 800e05e:	461a      	mov	r2, r3
 800e060:	4601      	mov	r1, r0
 800e062:	4648      	mov	r0, r9
 800e064:	f000 fc38 	bl	800e8d8 <__pow5mult>
 800e068:	9b07      	ldr	r3, [sp, #28]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	4604      	mov	r4, r0
 800e06e:	f300 809f 	bgt.w	800e1b0 <_dtoa_r+0x8f8>
 800e072:	9b04      	ldr	r3, [sp, #16]
 800e074:	2b00      	cmp	r3, #0
 800e076:	f040 8097 	bne.w	800e1a8 <_dtoa_r+0x8f0>
 800e07a:	9b05      	ldr	r3, [sp, #20]
 800e07c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e080:	2b00      	cmp	r3, #0
 800e082:	f040 8093 	bne.w	800e1ac <_dtoa_r+0x8f4>
 800e086:	9b05      	ldr	r3, [sp, #20]
 800e088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e08c:	0d1b      	lsrs	r3, r3, #20
 800e08e:	051b      	lsls	r3, r3, #20
 800e090:	b133      	cbz	r3, 800e0a0 <_dtoa_r+0x7e8>
 800e092:	9b00      	ldr	r3, [sp, #0]
 800e094:	3301      	adds	r3, #1
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	9b06      	ldr	r3, [sp, #24]
 800e09a:	3301      	adds	r3, #1
 800e09c:	9306      	str	r3, [sp, #24]
 800e09e:	2301      	movs	r3, #1
 800e0a0:	9308      	str	r3, [sp, #32]
 800e0a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 81b8 	beq.w	800e41a <_dtoa_r+0xb62>
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0b0:	6918      	ldr	r0, [r3, #16]
 800e0b2:	f000 fb0d 	bl	800e6d0 <__hi0bits>
 800e0b6:	f1c0 0020 	rsb	r0, r0, #32
 800e0ba:	9b06      	ldr	r3, [sp, #24]
 800e0bc:	4418      	add	r0, r3
 800e0be:	f010 001f 	ands.w	r0, r0, #31
 800e0c2:	f000 8082 	beq.w	800e1ca <_dtoa_r+0x912>
 800e0c6:	f1c0 0320 	rsb	r3, r0, #32
 800e0ca:	2b04      	cmp	r3, #4
 800e0cc:	dd73      	ble.n	800e1b6 <_dtoa_r+0x8fe>
 800e0ce:	9b00      	ldr	r3, [sp, #0]
 800e0d0:	f1c0 001c 	rsb	r0, r0, #28
 800e0d4:	4403      	add	r3, r0
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	9b06      	ldr	r3, [sp, #24]
 800e0da:	4403      	add	r3, r0
 800e0dc:	4406      	add	r6, r0
 800e0de:	9306      	str	r3, [sp, #24]
 800e0e0:	9b00      	ldr	r3, [sp, #0]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dd05      	ble.n	800e0f2 <_dtoa_r+0x83a>
 800e0e6:	9902      	ldr	r1, [sp, #8]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4648      	mov	r0, r9
 800e0ec:	f000 fc4e 	bl	800e98c <__lshift>
 800e0f0:	9002      	str	r0, [sp, #8]
 800e0f2:	9b06      	ldr	r3, [sp, #24]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dd05      	ble.n	800e104 <_dtoa_r+0x84c>
 800e0f8:	4621      	mov	r1, r4
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	4648      	mov	r0, r9
 800e0fe:	f000 fc45 	bl	800e98c <__lshift>
 800e102:	4604      	mov	r4, r0
 800e104:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e106:	2b00      	cmp	r3, #0
 800e108:	d061      	beq.n	800e1ce <_dtoa_r+0x916>
 800e10a:	9802      	ldr	r0, [sp, #8]
 800e10c:	4621      	mov	r1, r4
 800e10e:	f000 fca9 	bl	800ea64 <__mcmp>
 800e112:	2800      	cmp	r0, #0
 800e114:	da5b      	bge.n	800e1ce <_dtoa_r+0x916>
 800e116:	2300      	movs	r3, #0
 800e118:	9902      	ldr	r1, [sp, #8]
 800e11a:	220a      	movs	r2, #10
 800e11c:	4648      	mov	r0, r9
 800e11e:	f000 fa47 	bl	800e5b0 <__multadd>
 800e122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e124:	9002      	str	r0, [sp, #8]
 800e126:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 8177 	beq.w	800e41e <_dtoa_r+0xb66>
 800e130:	4629      	mov	r1, r5
 800e132:	2300      	movs	r3, #0
 800e134:	220a      	movs	r2, #10
 800e136:	4648      	mov	r0, r9
 800e138:	f000 fa3a 	bl	800e5b0 <__multadd>
 800e13c:	f1bb 0f00 	cmp.w	fp, #0
 800e140:	4605      	mov	r5, r0
 800e142:	dc6f      	bgt.n	800e224 <_dtoa_r+0x96c>
 800e144:	9b07      	ldr	r3, [sp, #28]
 800e146:	2b02      	cmp	r3, #2
 800e148:	dc49      	bgt.n	800e1de <_dtoa_r+0x926>
 800e14a:	e06b      	b.n	800e224 <_dtoa_r+0x96c>
 800e14c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e14e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e152:	e73c      	b.n	800dfce <_dtoa_r+0x716>
 800e154:	3fe00000 	.word	0x3fe00000
 800e158:	40240000 	.word	0x40240000
 800e15c:	9b03      	ldr	r3, [sp, #12]
 800e15e:	1e5c      	subs	r4, r3, #1
 800e160:	9b08      	ldr	r3, [sp, #32]
 800e162:	42a3      	cmp	r3, r4
 800e164:	db09      	blt.n	800e17a <_dtoa_r+0x8c2>
 800e166:	1b1c      	subs	r4, r3, r4
 800e168:	9b03      	ldr	r3, [sp, #12]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f6bf af30 	bge.w	800dfd0 <_dtoa_r+0x718>
 800e170:	9b00      	ldr	r3, [sp, #0]
 800e172:	9a03      	ldr	r2, [sp, #12]
 800e174:	1a9e      	subs	r6, r3, r2
 800e176:	2300      	movs	r3, #0
 800e178:	e72b      	b.n	800dfd2 <_dtoa_r+0x71a>
 800e17a:	9b08      	ldr	r3, [sp, #32]
 800e17c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e17e:	9408      	str	r4, [sp, #32]
 800e180:	1ae3      	subs	r3, r4, r3
 800e182:	441a      	add	r2, r3
 800e184:	9e00      	ldr	r6, [sp, #0]
 800e186:	9b03      	ldr	r3, [sp, #12]
 800e188:	920d      	str	r2, [sp, #52]	@ 0x34
 800e18a:	2400      	movs	r4, #0
 800e18c:	e721      	b.n	800dfd2 <_dtoa_r+0x71a>
 800e18e:	9c08      	ldr	r4, [sp, #32]
 800e190:	9e00      	ldr	r6, [sp, #0]
 800e192:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e194:	e728      	b.n	800dfe8 <_dtoa_r+0x730>
 800e196:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e19a:	e751      	b.n	800e040 <_dtoa_r+0x788>
 800e19c:	9a08      	ldr	r2, [sp, #32]
 800e19e:	9902      	ldr	r1, [sp, #8]
 800e1a0:	e750      	b.n	800e044 <_dtoa_r+0x78c>
 800e1a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e1a6:	e751      	b.n	800e04c <_dtoa_r+0x794>
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	e779      	b.n	800e0a0 <_dtoa_r+0x7e8>
 800e1ac:	9b04      	ldr	r3, [sp, #16]
 800e1ae:	e777      	b.n	800e0a0 <_dtoa_r+0x7e8>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	9308      	str	r3, [sp, #32]
 800e1b4:	e779      	b.n	800e0aa <_dtoa_r+0x7f2>
 800e1b6:	d093      	beq.n	800e0e0 <_dtoa_r+0x828>
 800e1b8:	9a00      	ldr	r2, [sp, #0]
 800e1ba:	331c      	adds	r3, #28
 800e1bc:	441a      	add	r2, r3
 800e1be:	9200      	str	r2, [sp, #0]
 800e1c0:	9a06      	ldr	r2, [sp, #24]
 800e1c2:	441a      	add	r2, r3
 800e1c4:	441e      	add	r6, r3
 800e1c6:	9206      	str	r2, [sp, #24]
 800e1c8:	e78a      	b.n	800e0e0 <_dtoa_r+0x828>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	e7f4      	b.n	800e1b8 <_dtoa_r+0x900>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	46b8      	mov	r8, r7
 800e1d4:	dc20      	bgt.n	800e218 <_dtoa_r+0x960>
 800e1d6:	469b      	mov	fp, r3
 800e1d8:	9b07      	ldr	r3, [sp, #28]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	dd1e      	ble.n	800e21c <_dtoa_r+0x964>
 800e1de:	f1bb 0f00 	cmp.w	fp, #0
 800e1e2:	f47f adb1 	bne.w	800dd48 <_dtoa_r+0x490>
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	465b      	mov	r3, fp
 800e1ea:	2205      	movs	r2, #5
 800e1ec:	4648      	mov	r0, r9
 800e1ee:	f000 f9df 	bl	800e5b0 <__multadd>
 800e1f2:	4601      	mov	r1, r0
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	9802      	ldr	r0, [sp, #8]
 800e1f8:	f000 fc34 	bl	800ea64 <__mcmp>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	f77f ada3 	ble.w	800dd48 <_dtoa_r+0x490>
 800e202:	4656      	mov	r6, sl
 800e204:	2331      	movs	r3, #49	@ 0x31
 800e206:	f806 3b01 	strb.w	r3, [r6], #1
 800e20a:	f108 0801 	add.w	r8, r8, #1
 800e20e:	e59f      	b.n	800dd50 <_dtoa_r+0x498>
 800e210:	9c03      	ldr	r4, [sp, #12]
 800e212:	46b8      	mov	r8, r7
 800e214:	4625      	mov	r5, r4
 800e216:	e7f4      	b.n	800e202 <_dtoa_r+0x94a>
 800e218:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e21e:	2b00      	cmp	r3, #0
 800e220:	f000 8101 	beq.w	800e426 <_dtoa_r+0xb6e>
 800e224:	2e00      	cmp	r6, #0
 800e226:	dd05      	ble.n	800e234 <_dtoa_r+0x97c>
 800e228:	4629      	mov	r1, r5
 800e22a:	4632      	mov	r2, r6
 800e22c:	4648      	mov	r0, r9
 800e22e:	f000 fbad 	bl	800e98c <__lshift>
 800e232:	4605      	mov	r5, r0
 800e234:	9b08      	ldr	r3, [sp, #32]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d05c      	beq.n	800e2f4 <_dtoa_r+0xa3c>
 800e23a:	6869      	ldr	r1, [r5, #4]
 800e23c:	4648      	mov	r0, r9
 800e23e:	f000 f955 	bl	800e4ec <_Balloc>
 800e242:	4606      	mov	r6, r0
 800e244:	b928      	cbnz	r0, 800e252 <_dtoa_r+0x99a>
 800e246:	4b82      	ldr	r3, [pc, #520]	@ (800e450 <_dtoa_r+0xb98>)
 800e248:	4602      	mov	r2, r0
 800e24a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e24e:	f7ff bb4a 	b.w	800d8e6 <_dtoa_r+0x2e>
 800e252:	692a      	ldr	r2, [r5, #16]
 800e254:	3202      	adds	r2, #2
 800e256:	0092      	lsls	r2, r2, #2
 800e258:	f105 010c 	add.w	r1, r5, #12
 800e25c:	300c      	adds	r0, #12
 800e25e:	f7ff fa8e 	bl	800d77e <memcpy>
 800e262:	2201      	movs	r2, #1
 800e264:	4631      	mov	r1, r6
 800e266:	4648      	mov	r0, r9
 800e268:	f000 fb90 	bl	800e98c <__lshift>
 800e26c:	f10a 0301 	add.w	r3, sl, #1
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	eb0a 030b 	add.w	r3, sl, fp
 800e276:	9308      	str	r3, [sp, #32]
 800e278:	9b04      	ldr	r3, [sp, #16]
 800e27a:	f003 0301 	and.w	r3, r3, #1
 800e27e:	462f      	mov	r7, r5
 800e280:	9306      	str	r3, [sp, #24]
 800e282:	4605      	mov	r5, r0
 800e284:	9b00      	ldr	r3, [sp, #0]
 800e286:	9802      	ldr	r0, [sp, #8]
 800e288:	4621      	mov	r1, r4
 800e28a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e28e:	f7ff fa8b 	bl	800d7a8 <quorem>
 800e292:	4603      	mov	r3, r0
 800e294:	3330      	adds	r3, #48	@ 0x30
 800e296:	9003      	str	r0, [sp, #12]
 800e298:	4639      	mov	r1, r7
 800e29a:	9802      	ldr	r0, [sp, #8]
 800e29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e29e:	f000 fbe1 	bl	800ea64 <__mcmp>
 800e2a2:	462a      	mov	r2, r5
 800e2a4:	9004      	str	r0, [sp, #16]
 800e2a6:	4621      	mov	r1, r4
 800e2a8:	4648      	mov	r0, r9
 800e2aa:	f000 fbf7 	bl	800ea9c <__mdiff>
 800e2ae:	68c2      	ldr	r2, [r0, #12]
 800e2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	bb02      	cbnz	r2, 800e2f8 <_dtoa_r+0xa40>
 800e2b6:	4601      	mov	r1, r0
 800e2b8:	9802      	ldr	r0, [sp, #8]
 800e2ba:	f000 fbd3 	bl	800ea64 <__mcmp>
 800e2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4648      	mov	r0, r9
 800e2c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e2c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2ca:	f000 f94f 	bl	800e56c <_Bfree>
 800e2ce:	9b07      	ldr	r3, [sp, #28]
 800e2d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e2d2:	9e00      	ldr	r6, [sp, #0]
 800e2d4:	ea42 0103 	orr.w	r1, r2, r3
 800e2d8:	9b06      	ldr	r3, [sp, #24]
 800e2da:	4319      	orrs	r1, r3
 800e2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2de:	d10d      	bne.n	800e2fc <_dtoa_r+0xa44>
 800e2e0:	2b39      	cmp	r3, #57	@ 0x39
 800e2e2:	d027      	beq.n	800e334 <_dtoa_r+0xa7c>
 800e2e4:	9a04      	ldr	r2, [sp, #16]
 800e2e6:	2a00      	cmp	r2, #0
 800e2e8:	dd01      	ble.n	800e2ee <_dtoa_r+0xa36>
 800e2ea:	9b03      	ldr	r3, [sp, #12]
 800e2ec:	3331      	adds	r3, #49	@ 0x31
 800e2ee:	f88b 3000 	strb.w	r3, [fp]
 800e2f2:	e52e      	b.n	800dd52 <_dtoa_r+0x49a>
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e7b9      	b.n	800e26c <_dtoa_r+0x9b4>
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	e7e2      	b.n	800e2c2 <_dtoa_r+0xa0a>
 800e2fc:	9904      	ldr	r1, [sp, #16]
 800e2fe:	2900      	cmp	r1, #0
 800e300:	db04      	blt.n	800e30c <_dtoa_r+0xa54>
 800e302:	9807      	ldr	r0, [sp, #28]
 800e304:	4301      	orrs	r1, r0
 800e306:	9806      	ldr	r0, [sp, #24]
 800e308:	4301      	orrs	r1, r0
 800e30a:	d120      	bne.n	800e34e <_dtoa_r+0xa96>
 800e30c:	2a00      	cmp	r2, #0
 800e30e:	ddee      	ble.n	800e2ee <_dtoa_r+0xa36>
 800e310:	9902      	ldr	r1, [sp, #8]
 800e312:	9300      	str	r3, [sp, #0]
 800e314:	2201      	movs	r2, #1
 800e316:	4648      	mov	r0, r9
 800e318:	f000 fb38 	bl	800e98c <__lshift>
 800e31c:	4621      	mov	r1, r4
 800e31e:	9002      	str	r0, [sp, #8]
 800e320:	f000 fba0 	bl	800ea64 <__mcmp>
 800e324:	2800      	cmp	r0, #0
 800e326:	9b00      	ldr	r3, [sp, #0]
 800e328:	dc02      	bgt.n	800e330 <_dtoa_r+0xa78>
 800e32a:	d1e0      	bne.n	800e2ee <_dtoa_r+0xa36>
 800e32c:	07da      	lsls	r2, r3, #31
 800e32e:	d5de      	bpl.n	800e2ee <_dtoa_r+0xa36>
 800e330:	2b39      	cmp	r3, #57	@ 0x39
 800e332:	d1da      	bne.n	800e2ea <_dtoa_r+0xa32>
 800e334:	2339      	movs	r3, #57	@ 0x39
 800e336:	f88b 3000 	strb.w	r3, [fp]
 800e33a:	4633      	mov	r3, r6
 800e33c:	461e      	mov	r6, r3
 800e33e:	3b01      	subs	r3, #1
 800e340:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e344:	2a39      	cmp	r2, #57	@ 0x39
 800e346:	d04e      	beq.n	800e3e6 <_dtoa_r+0xb2e>
 800e348:	3201      	adds	r2, #1
 800e34a:	701a      	strb	r2, [r3, #0]
 800e34c:	e501      	b.n	800dd52 <_dtoa_r+0x49a>
 800e34e:	2a00      	cmp	r2, #0
 800e350:	dd03      	ble.n	800e35a <_dtoa_r+0xaa2>
 800e352:	2b39      	cmp	r3, #57	@ 0x39
 800e354:	d0ee      	beq.n	800e334 <_dtoa_r+0xa7c>
 800e356:	3301      	adds	r3, #1
 800e358:	e7c9      	b.n	800e2ee <_dtoa_r+0xa36>
 800e35a:	9a00      	ldr	r2, [sp, #0]
 800e35c:	9908      	ldr	r1, [sp, #32]
 800e35e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e362:	428a      	cmp	r2, r1
 800e364:	d028      	beq.n	800e3b8 <_dtoa_r+0xb00>
 800e366:	9902      	ldr	r1, [sp, #8]
 800e368:	2300      	movs	r3, #0
 800e36a:	220a      	movs	r2, #10
 800e36c:	4648      	mov	r0, r9
 800e36e:	f000 f91f 	bl	800e5b0 <__multadd>
 800e372:	42af      	cmp	r7, r5
 800e374:	9002      	str	r0, [sp, #8]
 800e376:	f04f 0300 	mov.w	r3, #0
 800e37a:	f04f 020a 	mov.w	r2, #10
 800e37e:	4639      	mov	r1, r7
 800e380:	4648      	mov	r0, r9
 800e382:	d107      	bne.n	800e394 <_dtoa_r+0xadc>
 800e384:	f000 f914 	bl	800e5b0 <__multadd>
 800e388:	4607      	mov	r7, r0
 800e38a:	4605      	mov	r5, r0
 800e38c:	9b00      	ldr	r3, [sp, #0]
 800e38e:	3301      	adds	r3, #1
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	e777      	b.n	800e284 <_dtoa_r+0x9cc>
 800e394:	f000 f90c 	bl	800e5b0 <__multadd>
 800e398:	4629      	mov	r1, r5
 800e39a:	4607      	mov	r7, r0
 800e39c:	2300      	movs	r3, #0
 800e39e:	220a      	movs	r2, #10
 800e3a0:	4648      	mov	r0, r9
 800e3a2:	f000 f905 	bl	800e5b0 <__multadd>
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	e7f0      	b.n	800e38c <_dtoa_r+0xad4>
 800e3aa:	f1bb 0f00 	cmp.w	fp, #0
 800e3ae:	bfcc      	ite	gt
 800e3b0:	465e      	movgt	r6, fp
 800e3b2:	2601      	movle	r6, #1
 800e3b4:	4456      	add	r6, sl
 800e3b6:	2700      	movs	r7, #0
 800e3b8:	9902      	ldr	r1, [sp, #8]
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	4648      	mov	r0, r9
 800e3c0:	f000 fae4 	bl	800e98c <__lshift>
 800e3c4:	4621      	mov	r1, r4
 800e3c6:	9002      	str	r0, [sp, #8]
 800e3c8:	f000 fb4c 	bl	800ea64 <__mcmp>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	dcb4      	bgt.n	800e33a <_dtoa_r+0xa82>
 800e3d0:	d102      	bne.n	800e3d8 <_dtoa_r+0xb20>
 800e3d2:	9b00      	ldr	r3, [sp, #0]
 800e3d4:	07db      	lsls	r3, r3, #31
 800e3d6:	d4b0      	bmi.n	800e33a <_dtoa_r+0xa82>
 800e3d8:	4633      	mov	r3, r6
 800e3da:	461e      	mov	r6, r3
 800e3dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3e0:	2a30      	cmp	r2, #48	@ 0x30
 800e3e2:	d0fa      	beq.n	800e3da <_dtoa_r+0xb22>
 800e3e4:	e4b5      	b.n	800dd52 <_dtoa_r+0x49a>
 800e3e6:	459a      	cmp	sl, r3
 800e3e8:	d1a8      	bne.n	800e33c <_dtoa_r+0xa84>
 800e3ea:	2331      	movs	r3, #49	@ 0x31
 800e3ec:	f108 0801 	add.w	r8, r8, #1
 800e3f0:	f88a 3000 	strb.w	r3, [sl]
 800e3f4:	e4ad      	b.n	800dd52 <_dtoa_r+0x49a>
 800e3f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e3f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e454 <_dtoa_r+0xb9c>
 800e3fc:	b11b      	cbz	r3, 800e406 <_dtoa_r+0xb4e>
 800e3fe:	f10a 0308 	add.w	r3, sl, #8
 800e402:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e404:	6013      	str	r3, [r2, #0]
 800e406:	4650      	mov	r0, sl
 800e408:	b017      	add	sp, #92	@ 0x5c
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	9b07      	ldr	r3, [sp, #28]
 800e410:	2b01      	cmp	r3, #1
 800e412:	f77f ae2e 	ble.w	800e072 <_dtoa_r+0x7ba>
 800e416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e418:	9308      	str	r3, [sp, #32]
 800e41a:	2001      	movs	r0, #1
 800e41c:	e64d      	b.n	800e0ba <_dtoa_r+0x802>
 800e41e:	f1bb 0f00 	cmp.w	fp, #0
 800e422:	f77f aed9 	ble.w	800e1d8 <_dtoa_r+0x920>
 800e426:	4656      	mov	r6, sl
 800e428:	9802      	ldr	r0, [sp, #8]
 800e42a:	4621      	mov	r1, r4
 800e42c:	f7ff f9bc 	bl	800d7a8 <quorem>
 800e430:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e434:	f806 3b01 	strb.w	r3, [r6], #1
 800e438:	eba6 020a 	sub.w	r2, r6, sl
 800e43c:	4593      	cmp	fp, r2
 800e43e:	ddb4      	ble.n	800e3aa <_dtoa_r+0xaf2>
 800e440:	9902      	ldr	r1, [sp, #8]
 800e442:	2300      	movs	r3, #0
 800e444:	220a      	movs	r2, #10
 800e446:	4648      	mov	r0, r9
 800e448:	f000 f8b2 	bl	800e5b0 <__multadd>
 800e44c:	9002      	str	r0, [sp, #8]
 800e44e:	e7eb      	b.n	800e428 <_dtoa_r+0xb70>
 800e450:	080133b3 	.word	0x080133b3
 800e454:	08013337 	.word	0x08013337

0800e458 <_free_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	4605      	mov	r5, r0
 800e45c:	2900      	cmp	r1, #0
 800e45e:	d041      	beq.n	800e4e4 <_free_r+0x8c>
 800e460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e464:	1f0c      	subs	r4, r1, #4
 800e466:	2b00      	cmp	r3, #0
 800e468:	bfb8      	it	lt
 800e46a:	18e4      	addlt	r4, r4, r3
 800e46c:	f7fe f90c 	bl	800c688 <__malloc_lock>
 800e470:	4a1d      	ldr	r2, [pc, #116]	@ (800e4e8 <_free_r+0x90>)
 800e472:	6813      	ldr	r3, [r2, #0]
 800e474:	b933      	cbnz	r3, 800e484 <_free_r+0x2c>
 800e476:	6063      	str	r3, [r4, #4]
 800e478:	6014      	str	r4, [r2, #0]
 800e47a:	4628      	mov	r0, r5
 800e47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e480:	f7fe b908 	b.w	800c694 <__malloc_unlock>
 800e484:	42a3      	cmp	r3, r4
 800e486:	d908      	bls.n	800e49a <_free_r+0x42>
 800e488:	6820      	ldr	r0, [r4, #0]
 800e48a:	1821      	adds	r1, r4, r0
 800e48c:	428b      	cmp	r3, r1
 800e48e:	bf01      	itttt	eq
 800e490:	6819      	ldreq	r1, [r3, #0]
 800e492:	685b      	ldreq	r3, [r3, #4]
 800e494:	1809      	addeq	r1, r1, r0
 800e496:	6021      	streq	r1, [r4, #0]
 800e498:	e7ed      	b.n	800e476 <_free_r+0x1e>
 800e49a:	461a      	mov	r2, r3
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	b10b      	cbz	r3, 800e4a4 <_free_r+0x4c>
 800e4a0:	42a3      	cmp	r3, r4
 800e4a2:	d9fa      	bls.n	800e49a <_free_r+0x42>
 800e4a4:	6811      	ldr	r1, [r2, #0]
 800e4a6:	1850      	adds	r0, r2, r1
 800e4a8:	42a0      	cmp	r0, r4
 800e4aa:	d10b      	bne.n	800e4c4 <_free_r+0x6c>
 800e4ac:	6820      	ldr	r0, [r4, #0]
 800e4ae:	4401      	add	r1, r0
 800e4b0:	1850      	adds	r0, r2, r1
 800e4b2:	4283      	cmp	r3, r0
 800e4b4:	6011      	str	r1, [r2, #0]
 800e4b6:	d1e0      	bne.n	800e47a <_free_r+0x22>
 800e4b8:	6818      	ldr	r0, [r3, #0]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	6053      	str	r3, [r2, #4]
 800e4be:	4408      	add	r0, r1
 800e4c0:	6010      	str	r0, [r2, #0]
 800e4c2:	e7da      	b.n	800e47a <_free_r+0x22>
 800e4c4:	d902      	bls.n	800e4cc <_free_r+0x74>
 800e4c6:	230c      	movs	r3, #12
 800e4c8:	602b      	str	r3, [r5, #0]
 800e4ca:	e7d6      	b.n	800e47a <_free_r+0x22>
 800e4cc:	6820      	ldr	r0, [r4, #0]
 800e4ce:	1821      	adds	r1, r4, r0
 800e4d0:	428b      	cmp	r3, r1
 800e4d2:	bf04      	itt	eq
 800e4d4:	6819      	ldreq	r1, [r3, #0]
 800e4d6:	685b      	ldreq	r3, [r3, #4]
 800e4d8:	6063      	str	r3, [r4, #4]
 800e4da:	bf04      	itt	eq
 800e4dc:	1809      	addeq	r1, r1, r0
 800e4de:	6021      	streq	r1, [r4, #0]
 800e4e0:	6054      	str	r4, [r2, #4]
 800e4e2:	e7ca      	b.n	800e47a <_free_r+0x22>
 800e4e4:	bd38      	pop	{r3, r4, r5, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20001af0 	.word	0x20001af0

0800e4ec <_Balloc>:
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	69c6      	ldr	r6, [r0, #28]
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	460d      	mov	r5, r1
 800e4f4:	b976      	cbnz	r6, 800e514 <_Balloc+0x28>
 800e4f6:	2010      	movs	r0, #16
 800e4f8:	f7fe f81c 	bl	800c534 <malloc>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	61e0      	str	r0, [r4, #28]
 800e500:	b920      	cbnz	r0, 800e50c <_Balloc+0x20>
 800e502:	4b18      	ldr	r3, [pc, #96]	@ (800e564 <_Balloc+0x78>)
 800e504:	4818      	ldr	r0, [pc, #96]	@ (800e568 <_Balloc+0x7c>)
 800e506:	216b      	movs	r1, #107	@ 0x6b
 800e508:	f002 f8ea 	bl	80106e0 <__assert_func>
 800e50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e510:	6006      	str	r6, [r0, #0]
 800e512:	60c6      	str	r6, [r0, #12]
 800e514:	69e6      	ldr	r6, [r4, #28]
 800e516:	68f3      	ldr	r3, [r6, #12]
 800e518:	b183      	cbz	r3, 800e53c <_Balloc+0x50>
 800e51a:	69e3      	ldr	r3, [r4, #28]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e522:	b9b8      	cbnz	r0, 800e554 <_Balloc+0x68>
 800e524:	2101      	movs	r1, #1
 800e526:	fa01 f605 	lsl.w	r6, r1, r5
 800e52a:	1d72      	adds	r2, r6, #5
 800e52c:	0092      	lsls	r2, r2, #2
 800e52e:	4620      	mov	r0, r4
 800e530:	f7fd ffec 	bl	800c50c <_calloc_r>
 800e534:	b160      	cbz	r0, 800e550 <_Balloc+0x64>
 800e536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e53a:	e00e      	b.n	800e55a <_Balloc+0x6e>
 800e53c:	2221      	movs	r2, #33	@ 0x21
 800e53e:	2104      	movs	r1, #4
 800e540:	4620      	mov	r0, r4
 800e542:	f7fd ffe3 	bl	800c50c <_calloc_r>
 800e546:	69e3      	ldr	r3, [r4, #28]
 800e548:	60f0      	str	r0, [r6, #12]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1e4      	bne.n	800e51a <_Balloc+0x2e>
 800e550:	2000      	movs	r0, #0
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	6802      	ldr	r2, [r0, #0]
 800e556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e55a:	2300      	movs	r3, #0
 800e55c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e560:	e7f7      	b.n	800e552 <_Balloc+0x66>
 800e562:	bf00      	nop
 800e564:	08013344 	.word	0x08013344
 800e568:	080133c4 	.word	0x080133c4

0800e56c <_Bfree>:
 800e56c:	b570      	push	{r4, r5, r6, lr}
 800e56e:	69c6      	ldr	r6, [r0, #28]
 800e570:	4605      	mov	r5, r0
 800e572:	460c      	mov	r4, r1
 800e574:	b976      	cbnz	r6, 800e594 <_Bfree+0x28>
 800e576:	2010      	movs	r0, #16
 800e578:	f7fd ffdc 	bl	800c534 <malloc>
 800e57c:	4602      	mov	r2, r0
 800e57e:	61e8      	str	r0, [r5, #28]
 800e580:	b920      	cbnz	r0, 800e58c <_Bfree+0x20>
 800e582:	4b09      	ldr	r3, [pc, #36]	@ (800e5a8 <_Bfree+0x3c>)
 800e584:	4809      	ldr	r0, [pc, #36]	@ (800e5ac <_Bfree+0x40>)
 800e586:	218f      	movs	r1, #143	@ 0x8f
 800e588:	f002 f8aa 	bl	80106e0 <__assert_func>
 800e58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e590:	6006      	str	r6, [r0, #0]
 800e592:	60c6      	str	r6, [r0, #12]
 800e594:	b13c      	cbz	r4, 800e5a6 <_Bfree+0x3a>
 800e596:	69eb      	ldr	r3, [r5, #28]
 800e598:	6862      	ldr	r2, [r4, #4]
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e5a0:	6021      	str	r1, [r4, #0]
 800e5a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	08013344 	.word	0x08013344
 800e5ac:	080133c4 	.word	0x080133c4

0800e5b0 <__multadd>:
 800e5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5b4:	690d      	ldr	r5, [r1, #16]
 800e5b6:	4607      	mov	r7, r0
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	461e      	mov	r6, r3
 800e5bc:	f101 0c14 	add.w	ip, r1, #20
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e5c6:	b299      	uxth	r1, r3
 800e5c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e5cc:	0c1e      	lsrs	r6, r3, #16
 800e5ce:	0c0b      	lsrs	r3, r1, #16
 800e5d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e5d4:	b289      	uxth	r1, r1
 800e5d6:	3001      	adds	r0, #1
 800e5d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5dc:	4285      	cmp	r5, r0
 800e5de:	f84c 1b04 	str.w	r1, [ip], #4
 800e5e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5e6:	dcec      	bgt.n	800e5c2 <__multadd+0x12>
 800e5e8:	b30e      	cbz	r6, 800e62e <__multadd+0x7e>
 800e5ea:	68a3      	ldr	r3, [r4, #8]
 800e5ec:	42ab      	cmp	r3, r5
 800e5ee:	dc19      	bgt.n	800e624 <__multadd+0x74>
 800e5f0:	6861      	ldr	r1, [r4, #4]
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	3101      	adds	r1, #1
 800e5f6:	f7ff ff79 	bl	800e4ec <_Balloc>
 800e5fa:	4680      	mov	r8, r0
 800e5fc:	b928      	cbnz	r0, 800e60a <__multadd+0x5a>
 800e5fe:	4602      	mov	r2, r0
 800e600:	4b0c      	ldr	r3, [pc, #48]	@ (800e634 <__multadd+0x84>)
 800e602:	480d      	ldr	r0, [pc, #52]	@ (800e638 <__multadd+0x88>)
 800e604:	21ba      	movs	r1, #186	@ 0xba
 800e606:	f002 f86b 	bl	80106e0 <__assert_func>
 800e60a:	6922      	ldr	r2, [r4, #16]
 800e60c:	3202      	adds	r2, #2
 800e60e:	f104 010c 	add.w	r1, r4, #12
 800e612:	0092      	lsls	r2, r2, #2
 800e614:	300c      	adds	r0, #12
 800e616:	f7ff f8b2 	bl	800d77e <memcpy>
 800e61a:	4621      	mov	r1, r4
 800e61c:	4638      	mov	r0, r7
 800e61e:	f7ff ffa5 	bl	800e56c <_Bfree>
 800e622:	4644      	mov	r4, r8
 800e624:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e628:	3501      	adds	r5, #1
 800e62a:	615e      	str	r6, [r3, #20]
 800e62c:	6125      	str	r5, [r4, #16]
 800e62e:	4620      	mov	r0, r4
 800e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e634:	080133b3 	.word	0x080133b3
 800e638:	080133c4 	.word	0x080133c4

0800e63c <__s2b>:
 800e63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e640:	460c      	mov	r4, r1
 800e642:	4615      	mov	r5, r2
 800e644:	461f      	mov	r7, r3
 800e646:	2209      	movs	r2, #9
 800e648:	3308      	adds	r3, #8
 800e64a:	4606      	mov	r6, r0
 800e64c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e650:	2100      	movs	r1, #0
 800e652:	2201      	movs	r2, #1
 800e654:	429a      	cmp	r2, r3
 800e656:	db09      	blt.n	800e66c <__s2b+0x30>
 800e658:	4630      	mov	r0, r6
 800e65a:	f7ff ff47 	bl	800e4ec <_Balloc>
 800e65e:	b940      	cbnz	r0, 800e672 <__s2b+0x36>
 800e660:	4602      	mov	r2, r0
 800e662:	4b19      	ldr	r3, [pc, #100]	@ (800e6c8 <__s2b+0x8c>)
 800e664:	4819      	ldr	r0, [pc, #100]	@ (800e6cc <__s2b+0x90>)
 800e666:	21d3      	movs	r1, #211	@ 0xd3
 800e668:	f002 f83a 	bl	80106e0 <__assert_func>
 800e66c:	0052      	lsls	r2, r2, #1
 800e66e:	3101      	adds	r1, #1
 800e670:	e7f0      	b.n	800e654 <__s2b+0x18>
 800e672:	9b08      	ldr	r3, [sp, #32]
 800e674:	6143      	str	r3, [r0, #20]
 800e676:	2d09      	cmp	r5, #9
 800e678:	f04f 0301 	mov.w	r3, #1
 800e67c:	6103      	str	r3, [r0, #16]
 800e67e:	dd16      	ble.n	800e6ae <__s2b+0x72>
 800e680:	f104 0909 	add.w	r9, r4, #9
 800e684:	46c8      	mov	r8, r9
 800e686:	442c      	add	r4, r5
 800e688:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e68c:	4601      	mov	r1, r0
 800e68e:	3b30      	subs	r3, #48	@ 0x30
 800e690:	220a      	movs	r2, #10
 800e692:	4630      	mov	r0, r6
 800e694:	f7ff ff8c 	bl	800e5b0 <__multadd>
 800e698:	45a0      	cmp	r8, r4
 800e69a:	d1f5      	bne.n	800e688 <__s2b+0x4c>
 800e69c:	f1a5 0408 	sub.w	r4, r5, #8
 800e6a0:	444c      	add	r4, r9
 800e6a2:	1b2d      	subs	r5, r5, r4
 800e6a4:	1963      	adds	r3, r4, r5
 800e6a6:	42bb      	cmp	r3, r7
 800e6a8:	db04      	blt.n	800e6b4 <__s2b+0x78>
 800e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ae:	340a      	adds	r4, #10
 800e6b0:	2509      	movs	r5, #9
 800e6b2:	e7f6      	b.n	800e6a2 <__s2b+0x66>
 800e6b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e6b8:	4601      	mov	r1, r0
 800e6ba:	3b30      	subs	r3, #48	@ 0x30
 800e6bc:	220a      	movs	r2, #10
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f7ff ff76 	bl	800e5b0 <__multadd>
 800e6c4:	e7ee      	b.n	800e6a4 <__s2b+0x68>
 800e6c6:	bf00      	nop
 800e6c8:	080133b3 	.word	0x080133b3
 800e6cc:	080133c4 	.word	0x080133c4

0800e6d0 <__hi0bits>:
 800e6d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	bf36      	itet	cc
 800e6d8:	0403      	lslcc	r3, r0, #16
 800e6da:	2000      	movcs	r0, #0
 800e6dc:	2010      	movcc	r0, #16
 800e6de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e6e2:	bf3c      	itt	cc
 800e6e4:	021b      	lslcc	r3, r3, #8
 800e6e6:	3008      	addcc	r0, #8
 800e6e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e6ec:	bf3c      	itt	cc
 800e6ee:	011b      	lslcc	r3, r3, #4
 800e6f0:	3004      	addcc	r0, #4
 800e6f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e6f6:	bf3c      	itt	cc
 800e6f8:	009b      	lslcc	r3, r3, #2
 800e6fa:	3002      	addcc	r0, #2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	db05      	blt.n	800e70c <__hi0bits+0x3c>
 800e700:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e704:	f100 0001 	add.w	r0, r0, #1
 800e708:	bf08      	it	eq
 800e70a:	2020      	moveq	r0, #32
 800e70c:	4770      	bx	lr

0800e70e <__lo0bits>:
 800e70e:	6803      	ldr	r3, [r0, #0]
 800e710:	4602      	mov	r2, r0
 800e712:	f013 0007 	ands.w	r0, r3, #7
 800e716:	d00b      	beq.n	800e730 <__lo0bits+0x22>
 800e718:	07d9      	lsls	r1, r3, #31
 800e71a:	d421      	bmi.n	800e760 <__lo0bits+0x52>
 800e71c:	0798      	lsls	r0, r3, #30
 800e71e:	bf49      	itett	mi
 800e720:	085b      	lsrmi	r3, r3, #1
 800e722:	089b      	lsrpl	r3, r3, #2
 800e724:	2001      	movmi	r0, #1
 800e726:	6013      	strmi	r3, [r2, #0]
 800e728:	bf5c      	itt	pl
 800e72a:	6013      	strpl	r3, [r2, #0]
 800e72c:	2002      	movpl	r0, #2
 800e72e:	4770      	bx	lr
 800e730:	b299      	uxth	r1, r3
 800e732:	b909      	cbnz	r1, 800e738 <__lo0bits+0x2a>
 800e734:	0c1b      	lsrs	r3, r3, #16
 800e736:	2010      	movs	r0, #16
 800e738:	b2d9      	uxtb	r1, r3
 800e73a:	b909      	cbnz	r1, 800e740 <__lo0bits+0x32>
 800e73c:	3008      	adds	r0, #8
 800e73e:	0a1b      	lsrs	r3, r3, #8
 800e740:	0719      	lsls	r1, r3, #28
 800e742:	bf04      	itt	eq
 800e744:	091b      	lsreq	r3, r3, #4
 800e746:	3004      	addeq	r0, #4
 800e748:	0799      	lsls	r1, r3, #30
 800e74a:	bf04      	itt	eq
 800e74c:	089b      	lsreq	r3, r3, #2
 800e74e:	3002      	addeq	r0, #2
 800e750:	07d9      	lsls	r1, r3, #31
 800e752:	d403      	bmi.n	800e75c <__lo0bits+0x4e>
 800e754:	085b      	lsrs	r3, r3, #1
 800e756:	f100 0001 	add.w	r0, r0, #1
 800e75a:	d003      	beq.n	800e764 <__lo0bits+0x56>
 800e75c:	6013      	str	r3, [r2, #0]
 800e75e:	4770      	bx	lr
 800e760:	2000      	movs	r0, #0
 800e762:	4770      	bx	lr
 800e764:	2020      	movs	r0, #32
 800e766:	4770      	bx	lr

0800e768 <__i2b>:
 800e768:	b510      	push	{r4, lr}
 800e76a:	460c      	mov	r4, r1
 800e76c:	2101      	movs	r1, #1
 800e76e:	f7ff febd 	bl	800e4ec <_Balloc>
 800e772:	4602      	mov	r2, r0
 800e774:	b928      	cbnz	r0, 800e782 <__i2b+0x1a>
 800e776:	4b05      	ldr	r3, [pc, #20]	@ (800e78c <__i2b+0x24>)
 800e778:	4805      	ldr	r0, [pc, #20]	@ (800e790 <__i2b+0x28>)
 800e77a:	f240 1145 	movw	r1, #325	@ 0x145
 800e77e:	f001 ffaf 	bl	80106e0 <__assert_func>
 800e782:	2301      	movs	r3, #1
 800e784:	6144      	str	r4, [r0, #20]
 800e786:	6103      	str	r3, [r0, #16]
 800e788:	bd10      	pop	{r4, pc}
 800e78a:	bf00      	nop
 800e78c:	080133b3 	.word	0x080133b3
 800e790:	080133c4 	.word	0x080133c4

0800e794 <__multiply>:
 800e794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e798:	4617      	mov	r7, r2
 800e79a:	690a      	ldr	r2, [r1, #16]
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	bfa8      	it	ge
 800e7a2:	463b      	movge	r3, r7
 800e7a4:	4689      	mov	r9, r1
 800e7a6:	bfa4      	itt	ge
 800e7a8:	460f      	movge	r7, r1
 800e7aa:	4699      	movge	r9, r3
 800e7ac:	693d      	ldr	r5, [r7, #16]
 800e7ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	eb05 060a 	add.w	r6, r5, sl
 800e7ba:	42b3      	cmp	r3, r6
 800e7bc:	b085      	sub	sp, #20
 800e7be:	bfb8      	it	lt
 800e7c0:	3101      	addlt	r1, #1
 800e7c2:	f7ff fe93 	bl	800e4ec <_Balloc>
 800e7c6:	b930      	cbnz	r0, 800e7d6 <__multiply+0x42>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	4b41      	ldr	r3, [pc, #260]	@ (800e8d0 <__multiply+0x13c>)
 800e7cc:	4841      	ldr	r0, [pc, #260]	@ (800e8d4 <__multiply+0x140>)
 800e7ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e7d2:	f001 ff85 	bl	80106e0 <__assert_func>
 800e7d6:	f100 0414 	add.w	r4, r0, #20
 800e7da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e7de:	4623      	mov	r3, r4
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	4573      	cmp	r3, lr
 800e7e4:	d320      	bcc.n	800e828 <__multiply+0x94>
 800e7e6:	f107 0814 	add.w	r8, r7, #20
 800e7ea:	f109 0114 	add.w	r1, r9, #20
 800e7ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e7f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e7f6:	9302      	str	r3, [sp, #8]
 800e7f8:	1beb      	subs	r3, r5, r7
 800e7fa:	3b15      	subs	r3, #21
 800e7fc:	f023 0303 	bic.w	r3, r3, #3
 800e800:	3304      	adds	r3, #4
 800e802:	3715      	adds	r7, #21
 800e804:	42bd      	cmp	r5, r7
 800e806:	bf38      	it	cc
 800e808:	2304      	movcc	r3, #4
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	9b02      	ldr	r3, [sp, #8]
 800e80e:	9103      	str	r1, [sp, #12]
 800e810:	428b      	cmp	r3, r1
 800e812:	d80c      	bhi.n	800e82e <__multiply+0x9a>
 800e814:	2e00      	cmp	r6, #0
 800e816:	dd03      	ble.n	800e820 <__multiply+0x8c>
 800e818:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d055      	beq.n	800e8cc <__multiply+0x138>
 800e820:	6106      	str	r6, [r0, #16]
 800e822:	b005      	add	sp, #20
 800e824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e828:	f843 2b04 	str.w	r2, [r3], #4
 800e82c:	e7d9      	b.n	800e7e2 <__multiply+0x4e>
 800e82e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e832:	f1ba 0f00 	cmp.w	sl, #0
 800e836:	d01f      	beq.n	800e878 <__multiply+0xe4>
 800e838:	46c4      	mov	ip, r8
 800e83a:	46a1      	mov	r9, r4
 800e83c:	2700      	movs	r7, #0
 800e83e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e842:	f8d9 3000 	ldr.w	r3, [r9]
 800e846:	fa1f fb82 	uxth.w	fp, r2
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e850:	443b      	add	r3, r7
 800e852:	f8d9 7000 	ldr.w	r7, [r9]
 800e856:	0c12      	lsrs	r2, r2, #16
 800e858:	0c3f      	lsrs	r7, r7, #16
 800e85a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e85e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e862:	b29b      	uxth	r3, r3
 800e864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e868:	4565      	cmp	r5, ip
 800e86a:	f849 3b04 	str.w	r3, [r9], #4
 800e86e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e872:	d8e4      	bhi.n	800e83e <__multiply+0xaa>
 800e874:	9b01      	ldr	r3, [sp, #4]
 800e876:	50e7      	str	r7, [r4, r3]
 800e878:	9b03      	ldr	r3, [sp, #12]
 800e87a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e87e:	3104      	adds	r1, #4
 800e880:	f1b9 0f00 	cmp.w	r9, #0
 800e884:	d020      	beq.n	800e8c8 <__multiply+0x134>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	4647      	mov	r7, r8
 800e88a:	46a4      	mov	ip, r4
 800e88c:	f04f 0a00 	mov.w	sl, #0
 800e890:	f8b7 b000 	ldrh.w	fp, [r7]
 800e894:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e898:	fb09 220b 	mla	r2, r9, fp, r2
 800e89c:	4452      	add	r2, sl
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8a4:	f84c 3b04 	str.w	r3, [ip], #4
 800e8a8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e8ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8b0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e8b4:	fb09 330a 	mla	r3, r9, sl, r3
 800e8b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e8bc:	42bd      	cmp	r5, r7
 800e8be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e8c2:	d8e5      	bhi.n	800e890 <__multiply+0xfc>
 800e8c4:	9a01      	ldr	r2, [sp, #4]
 800e8c6:	50a3      	str	r3, [r4, r2]
 800e8c8:	3404      	adds	r4, #4
 800e8ca:	e79f      	b.n	800e80c <__multiply+0x78>
 800e8cc:	3e01      	subs	r6, #1
 800e8ce:	e7a1      	b.n	800e814 <__multiply+0x80>
 800e8d0:	080133b3 	.word	0x080133b3
 800e8d4:	080133c4 	.word	0x080133c4

0800e8d8 <__pow5mult>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	4615      	mov	r5, r2
 800e8de:	f012 0203 	ands.w	r2, r2, #3
 800e8e2:	4607      	mov	r7, r0
 800e8e4:	460e      	mov	r6, r1
 800e8e6:	d007      	beq.n	800e8f8 <__pow5mult+0x20>
 800e8e8:	4c25      	ldr	r4, [pc, #148]	@ (800e980 <__pow5mult+0xa8>)
 800e8ea:	3a01      	subs	r2, #1
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8f2:	f7ff fe5d 	bl	800e5b0 <__multadd>
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	10ad      	asrs	r5, r5, #2
 800e8fa:	d03d      	beq.n	800e978 <__pow5mult+0xa0>
 800e8fc:	69fc      	ldr	r4, [r7, #28]
 800e8fe:	b97c      	cbnz	r4, 800e920 <__pow5mult+0x48>
 800e900:	2010      	movs	r0, #16
 800e902:	f7fd fe17 	bl	800c534 <malloc>
 800e906:	4602      	mov	r2, r0
 800e908:	61f8      	str	r0, [r7, #28]
 800e90a:	b928      	cbnz	r0, 800e918 <__pow5mult+0x40>
 800e90c:	4b1d      	ldr	r3, [pc, #116]	@ (800e984 <__pow5mult+0xac>)
 800e90e:	481e      	ldr	r0, [pc, #120]	@ (800e988 <__pow5mult+0xb0>)
 800e910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e914:	f001 fee4 	bl	80106e0 <__assert_func>
 800e918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e91c:	6004      	str	r4, [r0, #0]
 800e91e:	60c4      	str	r4, [r0, #12]
 800e920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e928:	b94c      	cbnz	r4, 800e93e <__pow5mult+0x66>
 800e92a:	f240 2171 	movw	r1, #625	@ 0x271
 800e92e:	4638      	mov	r0, r7
 800e930:	f7ff ff1a 	bl	800e768 <__i2b>
 800e934:	2300      	movs	r3, #0
 800e936:	f8c8 0008 	str.w	r0, [r8, #8]
 800e93a:	4604      	mov	r4, r0
 800e93c:	6003      	str	r3, [r0, #0]
 800e93e:	f04f 0900 	mov.w	r9, #0
 800e942:	07eb      	lsls	r3, r5, #31
 800e944:	d50a      	bpl.n	800e95c <__pow5mult+0x84>
 800e946:	4631      	mov	r1, r6
 800e948:	4622      	mov	r2, r4
 800e94a:	4638      	mov	r0, r7
 800e94c:	f7ff ff22 	bl	800e794 <__multiply>
 800e950:	4631      	mov	r1, r6
 800e952:	4680      	mov	r8, r0
 800e954:	4638      	mov	r0, r7
 800e956:	f7ff fe09 	bl	800e56c <_Bfree>
 800e95a:	4646      	mov	r6, r8
 800e95c:	106d      	asrs	r5, r5, #1
 800e95e:	d00b      	beq.n	800e978 <__pow5mult+0xa0>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	b938      	cbnz	r0, 800e974 <__pow5mult+0x9c>
 800e964:	4622      	mov	r2, r4
 800e966:	4621      	mov	r1, r4
 800e968:	4638      	mov	r0, r7
 800e96a:	f7ff ff13 	bl	800e794 <__multiply>
 800e96e:	6020      	str	r0, [r4, #0]
 800e970:	f8c0 9000 	str.w	r9, [r0]
 800e974:	4604      	mov	r4, r0
 800e976:	e7e4      	b.n	800e942 <__pow5mult+0x6a>
 800e978:	4630      	mov	r0, r6
 800e97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e97e:	bf00      	nop
 800e980:	080134f0 	.word	0x080134f0
 800e984:	08013344 	.word	0x08013344
 800e988:	080133c4 	.word	0x080133c4

0800e98c <__lshift>:
 800e98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e990:	460c      	mov	r4, r1
 800e992:	6849      	ldr	r1, [r1, #4]
 800e994:	6923      	ldr	r3, [r4, #16]
 800e996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e99a:	68a3      	ldr	r3, [r4, #8]
 800e99c:	4607      	mov	r7, r0
 800e99e:	4691      	mov	r9, r2
 800e9a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9a4:	f108 0601 	add.w	r6, r8, #1
 800e9a8:	42b3      	cmp	r3, r6
 800e9aa:	db0b      	blt.n	800e9c4 <__lshift+0x38>
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	f7ff fd9d 	bl	800e4ec <_Balloc>
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	b948      	cbnz	r0, 800e9ca <__lshift+0x3e>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	4b28      	ldr	r3, [pc, #160]	@ (800ea5c <__lshift+0xd0>)
 800e9ba:	4829      	ldr	r0, [pc, #164]	@ (800ea60 <__lshift+0xd4>)
 800e9bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e9c0:	f001 fe8e 	bl	80106e0 <__assert_func>
 800e9c4:	3101      	adds	r1, #1
 800e9c6:	005b      	lsls	r3, r3, #1
 800e9c8:	e7ee      	b.n	800e9a8 <__lshift+0x1c>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f100 0114 	add.w	r1, r0, #20
 800e9d0:	f100 0210 	add.w	r2, r0, #16
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	4553      	cmp	r3, sl
 800e9d8:	db33      	blt.n	800ea42 <__lshift+0xb6>
 800e9da:	6920      	ldr	r0, [r4, #16]
 800e9dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9e0:	f104 0314 	add.w	r3, r4, #20
 800e9e4:	f019 091f 	ands.w	r9, r9, #31
 800e9e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9f0:	d02b      	beq.n	800ea4a <__lshift+0xbe>
 800e9f2:	f1c9 0e20 	rsb	lr, r9, #32
 800e9f6:	468a      	mov	sl, r1
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	fa00 f009 	lsl.w	r0, r0, r9
 800ea00:	4310      	orrs	r0, r2
 800ea02:	f84a 0b04 	str.w	r0, [sl], #4
 800ea06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea0a:	459c      	cmp	ip, r3
 800ea0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ea10:	d8f3      	bhi.n	800e9fa <__lshift+0x6e>
 800ea12:	ebac 0304 	sub.w	r3, ip, r4
 800ea16:	3b15      	subs	r3, #21
 800ea18:	f023 0303 	bic.w	r3, r3, #3
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	f104 0015 	add.w	r0, r4, #21
 800ea22:	4560      	cmp	r0, ip
 800ea24:	bf88      	it	hi
 800ea26:	2304      	movhi	r3, #4
 800ea28:	50ca      	str	r2, [r1, r3]
 800ea2a:	b10a      	cbz	r2, 800ea30 <__lshift+0xa4>
 800ea2c:	f108 0602 	add.w	r6, r8, #2
 800ea30:	3e01      	subs	r6, #1
 800ea32:	4638      	mov	r0, r7
 800ea34:	612e      	str	r6, [r5, #16]
 800ea36:	4621      	mov	r1, r4
 800ea38:	f7ff fd98 	bl	800e56c <_Bfree>
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea46:	3301      	adds	r3, #1
 800ea48:	e7c5      	b.n	800e9d6 <__lshift+0x4a>
 800ea4a:	3904      	subs	r1, #4
 800ea4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea54:	459c      	cmp	ip, r3
 800ea56:	d8f9      	bhi.n	800ea4c <__lshift+0xc0>
 800ea58:	e7ea      	b.n	800ea30 <__lshift+0xa4>
 800ea5a:	bf00      	nop
 800ea5c:	080133b3 	.word	0x080133b3
 800ea60:	080133c4 	.word	0x080133c4

0800ea64 <__mcmp>:
 800ea64:	690a      	ldr	r2, [r1, #16]
 800ea66:	4603      	mov	r3, r0
 800ea68:	6900      	ldr	r0, [r0, #16]
 800ea6a:	1a80      	subs	r0, r0, r2
 800ea6c:	b530      	push	{r4, r5, lr}
 800ea6e:	d10e      	bne.n	800ea8e <__mcmp+0x2a>
 800ea70:	3314      	adds	r3, #20
 800ea72:	3114      	adds	r1, #20
 800ea74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ea78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ea7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea84:	4295      	cmp	r5, r2
 800ea86:	d003      	beq.n	800ea90 <__mcmp+0x2c>
 800ea88:	d205      	bcs.n	800ea96 <__mcmp+0x32>
 800ea8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea8e:	bd30      	pop	{r4, r5, pc}
 800ea90:	42a3      	cmp	r3, r4
 800ea92:	d3f3      	bcc.n	800ea7c <__mcmp+0x18>
 800ea94:	e7fb      	b.n	800ea8e <__mcmp+0x2a>
 800ea96:	2001      	movs	r0, #1
 800ea98:	e7f9      	b.n	800ea8e <__mcmp+0x2a>
	...

0800ea9c <__mdiff>:
 800ea9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaa0:	4689      	mov	r9, r1
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	4611      	mov	r1, r2
 800eaa6:	4648      	mov	r0, r9
 800eaa8:	4614      	mov	r4, r2
 800eaaa:	f7ff ffdb 	bl	800ea64 <__mcmp>
 800eaae:	1e05      	subs	r5, r0, #0
 800eab0:	d112      	bne.n	800ead8 <__mdiff+0x3c>
 800eab2:	4629      	mov	r1, r5
 800eab4:	4630      	mov	r0, r6
 800eab6:	f7ff fd19 	bl	800e4ec <_Balloc>
 800eaba:	4602      	mov	r2, r0
 800eabc:	b928      	cbnz	r0, 800eaca <__mdiff+0x2e>
 800eabe:	4b3f      	ldr	r3, [pc, #252]	@ (800ebbc <__mdiff+0x120>)
 800eac0:	f240 2137 	movw	r1, #567	@ 0x237
 800eac4:	483e      	ldr	r0, [pc, #248]	@ (800ebc0 <__mdiff+0x124>)
 800eac6:	f001 fe0b 	bl	80106e0 <__assert_func>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ead0:	4610      	mov	r0, r2
 800ead2:	b003      	add	sp, #12
 800ead4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead8:	bfbc      	itt	lt
 800eada:	464b      	movlt	r3, r9
 800eadc:	46a1      	movlt	r9, r4
 800eade:	4630      	mov	r0, r6
 800eae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eae4:	bfba      	itte	lt
 800eae6:	461c      	movlt	r4, r3
 800eae8:	2501      	movlt	r5, #1
 800eaea:	2500      	movge	r5, #0
 800eaec:	f7ff fcfe 	bl	800e4ec <_Balloc>
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	b918      	cbnz	r0, 800eafc <__mdiff+0x60>
 800eaf4:	4b31      	ldr	r3, [pc, #196]	@ (800ebbc <__mdiff+0x120>)
 800eaf6:	f240 2145 	movw	r1, #581	@ 0x245
 800eafa:	e7e3      	b.n	800eac4 <__mdiff+0x28>
 800eafc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800eb00:	6926      	ldr	r6, [r4, #16]
 800eb02:	60c5      	str	r5, [r0, #12]
 800eb04:	f109 0310 	add.w	r3, r9, #16
 800eb08:	f109 0514 	add.w	r5, r9, #20
 800eb0c:	f104 0e14 	add.w	lr, r4, #20
 800eb10:	f100 0b14 	add.w	fp, r0, #20
 800eb14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eb18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	46d9      	mov	r9, fp
 800eb20:	f04f 0c00 	mov.w	ip, #0
 800eb24:	9b01      	ldr	r3, [sp, #4]
 800eb26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eb2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eb2e:	9301      	str	r3, [sp, #4]
 800eb30:	fa1f f38a 	uxth.w	r3, sl
 800eb34:	4619      	mov	r1, r3
 800eb36:	b283      	uxth	r3, r0
 800eb38:	1acb      	subs	r3, r1, r3
 800eb3a:	0c00      	lsrs	r0, r0, #16
 800eb3c:	4463      	add	r3, ip
 800eb3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eb42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eb4c:	4576      	cmp	r6, lr
 800eb4e:	f849 3b04 	str.w	r3, [r9], #4
 800eb52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eb56:	d8e5      	bhi.n	800eb24 <__mdiff+0x88>
 800eb58:	1b33      	subs	r3, r6, r4
 800eb5a:	3b15      	subs	r3, #21
 800eb5c:	f023 0303 	bic.w	r3, r3, #3
 800eb60:	3415      	adds	r4, #21
 800eb62:	3304      	adds	r3, #4
 800eb64:	42a6      	cmp	r6, r4
 800eb66:	bf38      	it	cc
 800eb68:	2304      	movcc	r3, #4
 800eb6a:	441d      	add	r5, r3
 800eb6c:	445b      	add	r3, fp
 800eb6e:	461e      	mov	r6, r3
 800eb70:	462c      	mov	r4, r5
 800eb72:	4544      	cmp	r4, r8
 800eb74:	d30e      	bcc.n	800eb94 <__mdiff+0xf8>
 800eb76:	f108 0103 	add.w	r1, r8, #3
 800eb7a:	1b49      	subs	r1, r1, r5
 800eb7c:	f021 0103 	bic.w	r1, r1, #3
 800eb80:	3d03      	subs	r5, #3
 800eb82:	45a8      	cmp	r8, r5
 800eb84:	bf38      	it	cc
 800eb86:	2100      	movcc	r1, #0
 800eb88:	440b      	add	r3, r1
 800eb8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eb8e:	b191      	cbz	r1, 800ebb6 <__mdiff+0x11a>
 800eb90:	6117      	str	r7, [r2, #16]
 800eb92:	e79d      	b.n	800ead0 <__mdiff+0x34>
 800eb94:	f854 1b04 	ldr.w	r1, [r4], #4
 800eb98:	46e6      	mov	lr, ip
 800eb9a:	0c08      	lsrs	r0, r1, #16
 800eb9c:	fa1c fc81 	uxtah	ip, ip, r1
 800eba0:	4471      	add	r1, lr
 800eba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eba6:	b289      	uxth	r1, r1
 800eba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ebac:	f846 1b04 	str.w	r1, [r6], #4
 800ebb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ebb4:	e7dd      	b.n	800eb72 <__mdiff+0xd6>
 800ebb6:	3f01      	subs	r7, #1
 800ebb8:	e7e7      	b.n	800eb8a <__mdiff+0xee>
 800ebba:	bf00      	nop
 800ebbc:	080133b3 	.word	0x080133b3
 800ebc0:	080133c4 	.word	0x080133c4

0800ebc4 <__ulp>:
 800ebc4:	b082      	sub	sp, #8
 800ebc6:	ed8d 0b00 	vstr	d0, [sp]
 800ebca:	9a01      	ldr	r2, [sp, #4]
 800ebcc:	4b0f      	ldr	r3, [pc, #60]	@ (800ec0c <__ulp+0x48>)
 800ebce:	4013      	ands	r3, r2
 800ebd0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	dc08      	bgt.n	800ebea <__ulp+0x26>
 800ebd8:	425b      	negs	r3, r3
 800ebda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ebde:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ebe2:	da04      	bge.n	800ebee <__ulp+0x2a>
 800ebe4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ebe8:	4113      	asrs	r3, r2
 800ebea:	2200      	movs	r2, #0
 800ebec:	e008      	b.n	800ec00 <__ulp+0x3c>
 800ebee:	f1a2 0314 	sub.w	r3, r2, #20
 800ebf2:	2b1e      	cmp	r3, #30
 800ebf4:	bfda      	itte	le
 800ebf6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ebfa:	40da      	lsrle	r2, r3
 800ebfc:	2201      	movgt	r2, #1
 800ebfe:	2300      	movs	r3, #0
 800ec00:	4619      	mov	r1, r3
 800ec02:	4610      	mov	r0, r2
 800ec04:	ec41 0b10 	vmov	d0, r0, r1
 800ec08:	b002      	add	sp, #8
 800ec0a:	4770      	bx	lr
 800ec0c:	7ff00000 	.word	0x7ff00000

0800ec10 <__b2d>:
 800ec10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec14:	6906      	ldr	r6, [r0, #16]
 800ec16:	f100 0814 	add.w	r8, r0, #20
 800ec1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ec1e:	1f37      	subs	r7, r6, #4
 800ec20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ec24:	4610      	mov	r0, r2
 800ec26:	f7ff fd53 	bl	800e6d0 <__hi0bits>
 800ec2a:	f1c0 0320 	rsb	r3, r0, #32
 800ec2e:	280a      	cmp	r0, #10
 800ec30:	600b      	str	r3, [r1, #0]
 800ec32:	491b      	ldr	r1, [pc, #108]	@ (800eca0 <__b2d+0x90>)
 800ec34:	dc15      	bgt.n	800ec62 <__b2d+0x52>
 800ec36:	f1c0 0c0b 	rsb	ip, r0, #11
 800ec3a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ec3e:	45b8      	cmp	r8, r7
 800ec40:	ea43 0501 	orr.w	r5, r3, r1
 800ec44:	bf34      	ite	cc
 800ec46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec4a:	2300      	movcs	r3, #0
 800ec4c:	3015      	adds	r0, #21
 800ec4e:	fa02 f000 	lsl.w	r0, r2, r0
 800ec52:	fa23 f30c 	lsr.w	r3, r3, ip
 800ec56:	4303      	orrs	r3, r0
 800ec58:	461c      	mov	r4, r3
 800ec5a:	ec45 4b10 	vmov	d0, r4, r5
 800ec5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec62:	45b8      	cmp	r8, r7
 800ec64:	bf3a      	itte	cc
 800ec66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ec6a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ec6e:	2300      	movcs	r3, #0
 800ec70:	380b      	subs	r0, #11
 800ec72:	d012      	beq.n	800ec9a <__b2d+0x8a>
 800ec74:	f1c0 0120 	rsb	r1, r0, #32
 800ec78:	fa23 f401 	lsr.w	r4, r3, r1
 800ec7c:	4082      	lsls	r2, r0
 800ec7e:	4322      	orrs	r2, r4
 800ec80:	4547      	cmp	r7, r8
 800ec82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ec86:	bf8c      	ite	hi
 800ec88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ec8c:	2200      	movls	r2, #0
 800ec8e:	4083      	lsls	r3, r0
 800ec90:	40ca      	lsrs	r2, r1
 800ec92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ec96:	4313      	orrs	r3, r2
 800ec98:	e7de      	b.n	800ec58 <__b2d+0x48>
 800ec9a:	ea42 0501 	orr.w	r5, r2, r1
 800ec9e:	e7db      	b.n	800ec58 <__b2d+0x48>
 800eca0:	3ff00000 	.word	0x3ff00000

0800eca4 <__d2b>:
 800eca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eca8:	460f      	mov	r7, r1
 800ecaa:	2101      	movs	r1, #1
 800ecac:	ec59 8b10 	vmov	r8, r9, d0
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	f7ff fc1b 	bl	800e4ec <_Balloc>
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	b930      	cbnz	r0, 800ecc8 <__d2b+0x24>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	4b23      	ldr	r3, [pc, #140]	@ (800ed4c <__d2b+0xa8>)
 800ecbe:	4824      	ldr	r0, [pc, #144]	@ (800ed50 <__d2b+0xac>)
 800ecc0:	f240 310f 	movw	r1, #783	@ 0x30f
 800ecc4:	f001 fd0c 	bl	80106e0 <__assert_func>
 800ecc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800eccc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ecd0:	b10d      	cbz	r5, 800ecd6 <__d2b+0x32>
 800ecd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecd6:	9301      	str	r3, [sp, #4]
 800ecd8:	f1b8 0300 	subs.w	r3, r8, #0
 800ecdc:	d023      	beq.n	800ed26 <__d2b+0x82>
 800ecde:	4668      	mov	r0, sp
 800ece0:	9300      	str	r3, [sp, #0]
 800ece2:	f7ff fd14 	bl	800e70e <__lo0bits>
 800ece6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ecea:	b1d0      	cbz	r0, 800ed22 <__d2b+0x7e>
 800ecec:	f1c0 0320 	rsb	r3, r0, #32
 800ecf0:	fa02 f303 	lsl.w	r3, r2, r3
 800ecf4:	430b      	orrs	r3, r1
 800ecf6:	40c2      	lsrs	r2, r0
 800ecf8:	6163      	str	r3, [r4, #20]
 800ecfa:	9201      	str	r2, [sp, #4]
 800ecfc:	9b01      	ldr	r3, [sp, #4]
 800ecfe:	61a3      	str	r3, [r4, #24]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	bf0c      	ite	eq
 800ed04:	2201      	moveq	r2, #1
 800ed06:	2202      	movne	r2, #2
 800ed08:	6122      	str	r2, [r4, #16]
 800ed0a:	b1a5      	cbz	r5, 800ed36 <__d2b+0x92>
 800ed0c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ed10:	4405      	add	r5, r0
 800ed12:	603d      	str	r5, [r7, #0]
 800ed14:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ed18:	6030      	str	r0, [r6, #0]
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	b003      	add	sp, #12
 800ed1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed22:	6161      	str	r1, [r4, #20]
 800ed24:	e7ea      	b.n	800ecfc <__d2b+0x58>
 800ed26:	a801      	add	r0, sp, #4
 800ed28:	f7ff fcf1 	bl	800e70e <__lo0bits>
 800ed2c:	9b01      	ldr	r3, [sp, #4]
 800ed2e:	6163      	str	r3, [r4, #20]
 800ed30:	3020      	adds	r0, #32
 800ed32:	2201      	movs	r2, #1
 800ed34:	e7e8      	b.n	800ed08 <__d2b+0x64>
 800ed36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ed3e:	6038      	str	r0, [r7, #0]
 800ed40:	6918      	ldr	r0, [r3, #16]
 800ed42:	f7ff fcc5 	bl	800e6d0 <__hi0bits>
 800ed46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed4a:	e7e5      	b.n	800ed18 <__d2b+0x74>
 800ed4c:	080133b3 	.word	0x080133b3
 800ed50:	080133c4 	.word	0x080133c4

0800ed54 <__ratio>:
 800ed54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed58:	b085      	sub	sp, #20
 800ed5a:	e9cd 1000 	strd	r1, r0, [sp]
 800ed5e:	a902      	add	r1, sp, #8
 800ed60:	f7ff ff56 	bl	800ec10 <__b2d>
 800ed64:	9800      	ldr	r0, [sp, #0]
 800ed66:	a903      	add	r1, sp, #12
 800ed68:	ec55 4b10 	vmov	r4, r5, d0
 800ed6c:	f7ff ff50 	bl	800ec10 <__b2d>
 800ed70:	9b01      	ldr	r3, [sp, #4]
 800ed72:	6919      	ldr	r1, [r3, #16]
 800ed74:	9b00      	ldr	r3, [sp, #0]
 800ed76:	691b      	ldr	r3, [r3, #16]
 800ed78:	1ac9      	subs	r1, r1, r3
 800ed7a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ed7e:	1a9b      	subs	r3, r3, r2
 800ed80:	ec5b ab10 	vmov	sl, fp, d0
 800ed84:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	bfce      	itee	gt
 800ed8c:	462a      	movgt	r2, r5
 800ed8e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ed92:	465a      	movle	r2, fp
 800ed94:	462f      	mov	r7, r5
 800ed96:	46d9      	mov	r9, fp
 800ed98:	bfcc      	ite	gt
 800ed9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ed9e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eda2:	464b      	mov	r3, r9
 800eda4:	4652      	mov	r2, sl
 800eda6:	4620      	mov	r0, r4
 800eda8:	4639      	mov	r1, r7
 800edaa:	f7f1 fd6f 	bl	800088c <__aeabi_ddiv>
 800edae:	ec41 0b10 	vmov	d0, r0, r1
 800edb2:	b005      	add	sp, #20
 800edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800edb8 <__copybits>:
 800edb8:	3901      	subs	r1, #1
 800edba:	b570      	push	{r4, r5, r6, lr}
 800edbc:	1149      	asrs	r1, r1, #5
 800edbe:	6914      	ldr	r4, [r2, #16]
 800edc0:	3101      	adds	r1, #1
 800edc2:	f102 0314 	add.w	r3, r2, #20
 800edc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800edca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800edce:	1f05      	subs	r5, r0, #4
 800edd0:	42a3      	cmp	r3, r4
 800edd2:	d30c      	bcc.n	800edee <__copybits+0x36>
 800edd4:	1aa3      	subs	r3, r4, r2
 800edd6:	3b11      	subs	r3, #17
 800edd8:	f023 0303 	bic.w	r3, r3, #3
 800eddc:	3211      	adds	r2, #17
 800edde:	42a2      	cmp	r2, r4
 800ede0:	bf88      	it	hi
 800ede2:	2300      	movhi	r3, #0
 800ede4:	4418      	add	r0, r3
 800ede6:	2300      	movs	r3, #0
 800ede8:	4288      	cmp	r0, r1
 800edea:	d305      	bcc.n	800edf8 <__copybits+0x40>
 800edec:	bd70      	pop	{r4, r5, r6, pc}
 800edee:	f853 6b04 	ldr.w	r6, [r3], #4
 800edf2:	f845 6f04 	str.w	r6, [r5, #4]!
 800edf6:	e7eb      	b.n	800edd0 <__copybits+0x18>
 800edf8:	f840 3b04 	str.w	r3, [r0], #4
 800edfc:	e7f4      	b.n	800ede8 <__copybits+0x30>

0800edfe <__any_on>:
 800edfe:	f100 0214 	add.w	r2, r0, #20
 800ee02:	6900      	ldr	r0, [r0, #16]
 800ee04:	114b      	asrs	r3, r1, #5
 800ee06:	4298      	cmp	r0, r3
 800ee08:	b510      	push	{r4, lr}
 800ee0a:	db11      	blt.n	800ee30 <__any_on+0x32>
 800ee0c:	dd0a      	ble.n	800ee24 <__any_on+0x26>
 800ee0e:	f011 011f 	ands.w	r1, r1, #31
 800ee12:	d007      	beq.n	800ee24 <__any_on+0x26>
 800ee14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ee18:	fa24 f001 	lsr.w	r0, r4, r1
 800ee1c:	fa00 f101 	lsl.w	r1, r0, r1
 800ee20:	428c      	cmp	r4, r1
 800ee22:	d10b      	bne.n	800ee3c <__any_on+0x3e>
 800ee24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ee28:	4293      	cmp	r3, r2
 800ee2a:	d803      	bhi.n	800ee34 <__any_on+0x36>
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	bd10      	pop	{r4, pc}
 800ee30:	4603      	mov	r3, r0
 800ee32:	e7f7      	b.n	800ee24 <__any_on+0x26>
 800ee34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee38:	2900      	cmp	r1, #0
 800ee3a:	d0f5      	beq.n	800ee28 <__any_on+0x2a>
 800ee3c:	2001      	movs	r0, #1
 800ee3e:	e7f6      	b.n	800ee2e <__any_on+0x30>

0800ee40 <sulp>:
 800ee40:	b570      	push	{r4, r5, r6, lr}
 800ee42:	4604      	mov	r4, r0
 800ee44:	460d      	mov	r5, r1
 800ee46:	ec45 4b10 	vmov	d0, r4, r5
 800ee4a:	4616      	mov	r6, r2
 800ee4c:	f7ff feba 	bl	800ebc4 <__ulp>
 800ee50:	ec51 0b10 	vmov	r0, r1, d0
 800ee54:	b17e      	cbz	r6, 800ee76 <sulp+0x36>
 800ee56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ee5a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	dd09      	ble.n	800ee76 <sulp+0x36>
 800ee62:	051b      	lsls	r3, r3, #20
 800ee64:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ee68:	2400      	movs	r4, #0
 800ee6a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ee6e:	4622      	mov	r2, r4
 800ee70:	462b      	mov	r3, r5
 800ee72:	f7f1 fbe1 	bl	8000638 <__aeabi_dmul>
 800ee76:	ec41 0b10 	vmov	d0, r0, r1
 800ee7a:	bd70      	pop	{r4, r5, r6, pc}
 800ee7c:	0000      	movs	r0, r0
	...

0800ee80 <_strtod_l>:
 800ee80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	b09f      	sub	sp, #124	@ 0x7c
 800ee86:	460c      	mov	r4, r1
 800ee88:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ee8e:	9005      	str	r0, [sp, #20]
 800ee90:	f04f 0a00 	mov.w	sl, #0
 800ee94:	f04f 0b00 	mov.w	fp, #0
 800ee98:	460a      	mov	r2, r1
 800ee9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ee9c:	7811      	ldrb	r1, [r2, #0]
 800ee9e:	292b      	cmp	r1, #43	@ 0x2b
 800eea0:	d04a      	beq.n	800ef38 <_strtod_l+0xb8>
 800eea2:	d838      	bhi.n	800ef16 <_strtod_l+0x96>
 800eea4:	290d      	cmp	r1, #13
 800eea6:	d832      	bhi.n	800ef0e <_strtod_l+0x8e>
 800eea8:	2908      	cmp	r1, #8
 800eeaa:	d832      	bhi.n	800ef12 <_strtod_l+0x92>
 800eeac:	2900      	cmp	r1, #0
 800eeae:	d03b      	beq.n	800ef28 <_strtod_l+0xa8>
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	920e      	str	r2, [sp, #56]	@ 0x38
 800eeb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800eeb6:	782a      	ldrb	r2, [r5, #0]
 800eeb8:	2a30      	cmp	r2, #48	@ 0x30
 800eeba:	f040 80b2 	bne.w	800f022 <_strtod_l+0x1a2>
 800eebe:	786a      	ldrb	r2, [r5, #1]
 800eec0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800eec4:	2a58      	cmp	r2, #88	@ 0x58
 800eec6:	d16e      	bne.n	800efa6 <_strtod_l+0x126>
 800eec8:	9302      	str	r3, [sp, #8]
 800eeca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	ab1a      	add	r3, sp, #104	@ 0x68
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	4a8f      	ldr	r2, [pc, #572]	@ (800f110 <_strtod_l+0x290>)
 800eed4:	9805      	ldr	r0, [sp, #20]
 800eed6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eed8:	a919      	add	r1, sp, #100	@ 0x64
 800eeda:	f001 fc87 	bl	80107ec <__gethex>
 800eede:	f010 060f 	ands.w	r6, r0, #15
 800eee2:	4604      	mov	r4, r0
 800eee4:	d005      	beq.n	800eef2 <_strtod_l+0x72>
 800eee6:	2e06      	cmp	r6, #6
 800eee8:	d128      	bne.n	800ef3c <_strtod_l+0xbc>
 800eeea:	3501      	adds	r5, #1
 800eeec:	2300      	movs	r3, #0
 800eeee:	9519      	str	r5, [sp, #100]	@ 0x64
 800eef0:	930e      	str	r3, [sp, #56]	@ 0x38
 800eef2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f040 858e 	bne.w	800fa16 <_strtod_l+0xb96>
 800eefa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eefc:	b1cb      	cbz	r3, 800ef32 <_strtod_l+0xb2>
 800eefe:	4652      	mov	r2, sl
 800ef00:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ef04:	ec43 2b10 	vmov	d0, r2, r3
 800ef08:	b01f      	add	sp, #124	@ 0x7c
 800ef0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef0e:	2920      	cmp	r1, #32
 800ef10:	d1ce      	bne.n	800eeb0 <_strtod_l+0x30>
 800ef12:	3201      	adds	r2, #1
 800ef14:	e7c1      	b.n	800ee9a <_strtod_l+0x1a>
 800ef16:	292d      	cmp	r1, #45	@ 0x2d
 800ef18:	d1ca      	bne.n	800eeb0 <_strtod_l+0x30>
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ef1e:	1c51      	adds	r1, r2, #1
 800ef20:	9119      	str	r1, [sp, #100]	@ 0x64
 800ef22:	7852      	ldrb	r2, [r2, #1]
 800ef24:	2a00      	cmp	r2, #0
 800ef26:	d1c5      	bne.n	800eeb4 <_strtod_l+0x34>
 800ef28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ef2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f040 8570 	bne.w	800fa12 <_strtod_l+0xb92>
 800ef32:	4652      	mov	r2, sl
 800ef34:	465b      	mov	r3, fp
 800ef36:	e7e5      	b.n	800ef04 <_strtod_l+0x84>
 800ef38:	2100      	movs	r1, #0
 800ef3a:	e7ef      	b.n	800ef1c <_strtod_l+0x9c>
 800ef3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ef3e:	b13a      	cbz	r2, 800ef50 <_strtod_l+0xd0>
 800ef40:	2135      	movs	r1, #53	@ 0x35
 800ef42:	a81c      	add	r0, sp, #112	@ 0x70
 800ef44:	f7ff ff38 	bl	800edb8 <__copybits>
 800ef48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef4a:	9805      	ldr	r0, [sp, #20]
 800ef4c:	f7ff fb0e 	bl	800e56c <_Bfree>
 800ef50:	3e01      	subs	r6, #1
 800ef52:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ef54:	2e04      	cmp	r6, #4
 800ef56:	d806      	bhi.n	800ef66 <_strtod_l+0xe6>
 800ef58:	e8df f006 	tbb	[pc, r6]
 800ef5c:	201d0314 	.word	0x201d0314
 800ef60:	14          	.byte	0x14
 800ef61:	00          	.byte	0x00
 800ef62:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ef66:	05e1      	lsls	r1, r4, #23
 800ef68:	bf48      	it	mi
 800ef6a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ef6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ef72:	0d1b      	lsrs	r3, r3, #20
 800ef74:	051b      	lsls	r3, r3, #20
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d1bb      	bne.n	800eef2 <_strtod_l+0x72>
 800ef7a:	f7fe fbd3 	bl	800d724 <__errno>
 800ef7e:	2322      	movs	r3, #34	@ 0x22
 800ef80:	6003      	str	r3, [r0, #0]
 800ef82:	e7b6      	b.n	800eef2 <_strtod_l+0x72>
 800ef84:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ef88:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ef8c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ef90:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ef94:	e7e7      	b.n	800ef66 <_strtod_l+0xe6>
 800ef96:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f118 <_strtod_l+0x298>
 800ef9a:	e7e4      	b.n	800ef66 <_strtod_l+0xe6>
 800ef9c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800efa0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800efa4:	e7df      	b.n	800ef66 <_strtod_l+0xe6>
 800efa6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	9219      	str	r2, [sp, #100]	@ 0x64
 800efac:	785b      	ldrb	r3, [r3, #1]
 800efae:	2b30      	cmp	r3, #48	@ 0x30
 800efb0:	d0f9      	beq.n	800efa6 <_strtod_l+0x126>
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d09d      	beq.n	800eef2 <_strtod_l+0x72>
 800efb6:	2301      	movs	r3, #1
 800efb8:	2700      	movs	r7, #0
 800efba:	9308      	str	r3, [sp, #32]
 800efbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800efbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800efc0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800efc2:	46b9      	mov	r9, r7
 800efc4:	220a      	movs	r2, #10
 800efc6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800efc8:	7805      	ldrb	r5, [r0, #0]
 800efca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800efce:	b2d9      	uxtb	r1, r3
 800efd0:	2909      	cmp	r1, #9
 800efd2:	d928      	bls.n	800f026 <_strtod_l+0x1a6>
 800efd4:	494f      	ldr	r1, [pc, #316]	@ (800f114 <_strtod_l+0x294>)
 800efd6:	2201      	movs	r2, #1
 800efd8:	f001 fb67 	bl	80106aa <strncmp>
 800efdc:	2800      	cmp	r0, #0
 800efde:	d032      	beq.n	800f046 <_strtod_l+0x1c6>
 800efe0:	2000      	movs	r0, #0
 800efe2:	462a      	mov	r2, r5
 800efe4:	900a      	str	r0, [sp, #40]	@ 0x28
 800efe6:	464d      	mov	r5, r9
 800efe8:	4603      	mov	r3, r0
 800efea:	2a65      	cmp	r2, #101	@ 0x65
 800efec:	d001      	beq.n	800eff2 <_strtod_l+0x172>
 800efee:	2a45      	cmp	r2, #69	@ 0x45
 800eff0:	d114      	bne.n	800f01c <_strtod_l+0x19c>
 800eff2:	b91d      	cbnz	r5, 800effc <_strtod_l+0x17c>
 800eff4:	9a08      	ldr	r2, [sp, #32]
 800eff6:	4302      	orrs	r2, r0
 800eff8:	d096      	beq.n	800ef28 <_strtod_l+0xa8>
 800effa:	2500      	movs	r5, #0
 800effc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800effe:	1c62      	adds	r2, r4, #1
 800f000:	9219      	str	r2, [sp, #100]	@ 0x64
 800f002:	7862      	ldrb	r2, [r4, #1]
 800f004:	2a2b      	cmp	r2, #43	@ 0x2b
 800f006:	d07a      	beq.n	800f0fe <_strtod_l+0x27e>
 800f008:	2a2d      	cmp	r2, #45	@ 0x2d
 800f00a:	d07e      	beq.n	800f10a <_strtod_l+0x28a>
 800f00c:	f04f 0c00 	mov.w	ip, #0
 800f010:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f014:	2909      	cmp	r1, #9
 800f016:	f240 8085 	bls.w	800f124 <_strtod_l+0x2a4>
 800f01a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f01c:	f04f 0800 	mov.w	r8, #0
 800f020:	e0a5      	b.n	800f16e <_strtod_l+0x2ee>
 800f022:	2300      	movs	r3, #0
 800f024:	e7c8      	b.n	800efb8 <_strtod_l+0x138>
 800f026:	f1b9 0f08 	cmp.w	r9, #8
 800f02a:	bfd8      	it	le
 800f02c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f02e:	f100 0001 	add.w	r0, r0, #1
 800f032:	bfda      	itte	le
 800f034:	fb02 3301 	mlale	r3, r2, r1, r3
 800f038:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f03a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f03e:	f109 0901 	add.w	r9, r9, #1
 800f042:	9019      	str	r0, [sp, #100]	@ 0x64
 800f044:	e7bf      	b.n	800efc6 <_strtod_l+0x146>
 800f046:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f048:	1c5a      	adds	r2, r3, #1
 800f04a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f04c:	785a      	ldrb	r2, [r3, #1]
 800f04e:	f1b9 0f00 	cmp.w	r9, #0
 800f052:	d03b      	beq.n	800f0cc <_strtod_l+0x24c>
 800f054:	900a      	str	r0, [sp, #40]	@ 0x28
 800f056:	464d      	mov	r5, r9
 800f058:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f05c:	2b09      	cmp	r3, #9
 800f05e:	d912      	bls.n	800f086 <_strtod_l+0x206>
 800f060:	2301      	movs	r3, #1
 800f062:	e7c2      	b.n	800efea <_strtod_l+0x16a>
 800f064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f066:	1c5a      	adds	r2, r3, #1
 800f068:	9219      	str	r2, [sp, #100]	@ 0x64
 800f06a:	785a      	ldrb	r2, [r3, #1]
 800f06c:	3001      	adds	r0, #1
 800f06e:	2a30      	cmp	r2, #48	@ 0x30
 800f070:	d0f8      	beq.n	800f064 <_strtod_l+0x1e4>
 800f072:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f076:	2b08      	cmp	r3, #8
 800f078:	f200 84d2 	bhi.w	800fa20 <_strtod_l+0xba0>
 800f07c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f07e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f080:	2000      	movs	r0, #0
 800f082:	930c      	str	r3, [sp, #48]	@ 0x30
 800f084:	4605      	mov	r5, r0
 800f086:	3a30      	subs	r2, #48	@ 0x30
 800f088:	f100 0301 	add.w	r3, r0, #1
 800f08c:	d018      	beq.n	800f0c0 <_strtod_l+0x240>
 800f08e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f090:	4419      	add	r1, r3
 800f092:	910a      	str	r1, [sp, #40]	@ 0x28
 800f094:	462e      	mov	r6, r5
 800f096:	f04f 0e0a 	mov.w	lr, #10
 800f09a:	1c71      	adds	r1, r6, #1
 800f09c:	eba1 0c05 	sub.w	ip, r1, r5
 800f0a0:	4563      	cmp	r3, ip
 800f0a2:	dc15      	bgt.n	800f0d0 <_strtod_l+0x250>
 800f0a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f0a8:	182b      	adds	r3, r5, r0
 800f0aa:	2b08      	cmp	r3, #8
 800f0ac:	f105 0501 	add.w	r5, r5, #1
 800f0b0:	4405      	add	r5, r0
 800f0b2:	dc1a      	bgt.n	800f0ea <_strtod_l+0x26a>
 800f0b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f0b6:	230a      	movs	r3, #10
 800f0b8:	fb03 2301 	mla	r3, r3, r1, r2
 800f0bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f0be:	2300      	movs	r3, #0
 800f0c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f0c2:	1c51      	adds	r1, r2, #1
 800f0c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f0c6:	7852      	ldrb	r2, [r2, #1]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	e7c5      	b.n	800f058 <_strtod_l+0x1d8>
 800f0cc:	4648      	mov	r0, r9
 800f0ce:	e7ce      	b.n	800f06e <_strtod_l+0x1ee>
 800f0d0:	2e08      	cmp	r6, #8
 800f0d2:	dc05      	bgt.n	800f0e0 <_strtod_l+0x260>
 800f0d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f0d6:	fb0e f606 	mul.w	r6, lr, r6
 800f0da:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f0dc:	460e      	mov	r6, r1
 800f0de:	e7dc      	b.n	800f09a <_strtod_l+0x21a>
 800f0e0:	2910      	cmp	r1, #16
 800f0e2:	bfd8      	it	le
 800f0e4:	fb0e f707 	mulle.w	r7, lr, r7
 800f0e8:	e7f8      	b.n	800f0dc <_strtod_l+0x25c>
 800f0ea:	2b0f      	cmp	r3, #15
 800f0ec:	bfdc      	itt	le
 800f0ee:	230a      	movle	r3, #10
 800f0f0:	fb03 2707 	mlale	r7, r3, r7, r2
 800f0f4:	e7e3      	b.n	800f0be <_strtod_l+0x23e>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e77a      	b.n	800eff4 <_strtod_l+0x174>
 800f0fe:	f04f 0c00 	mov.w	ip, #0
 800f102:	1ca2      	adds	r2, r4, #2
 800f104:	9219      	str	r2, [sp, #100]	@ 0x64
 800f106:	78a2      	ldrb	r2, [r4, #2]
 800f108:	e782      	b.n	800f010 <_strtod_l+0x190>
 800f10a:	f04f 0c01 	mov.w	ip, #1
 800f10e:	e7f8      	b.n	800f102 <_strtod_l+0x282>
 800f110:	08013604 	.word	0x08013604
 800f114:	0801341d 	.word	0x0801341d
 800f118:	7ff00000 	.word	0x7ff00000
 800f11c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f11e:	1c51      	adds	r1, r2, #1
 800f120:	9119      	str	r1, [sp, #100]	@ 0x64
 800f122:	7852      	ldrb	r2, [r2, #1]
 800f124:	2a30      	cmp	r2, #48	@ 0x30
 800f126:	d0f9      	beq.n	800f11c <_strtod_l+0x29c>
 800f128:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f12c:	2908      	cmp	r1, #8
 800f12e:	f63f af75 	bhi.w	800f01c <_strtod_l+0x19c>
 800f132:	3a30      	subs	r2, #48	@ 0x30
 800f134:	9209      	str	r2, [sp, #36]	@ 0x24
 800f136:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f138:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f13a:	f04f 080a 	mov.w	r8, #10
 800f13e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f140:	1c56      	adds	r6, r2, #1
 800f142:	9619      	str	r6, [sp, #100]	@ 0x64
 800f144:	7852      	ldrb	r2, [r2, #1]
 800f146:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f14a:	f1be 0f09 	cmp.w	lr, #9
 800f14e:	d939      	bls.n	800f1c4 <_strtod_l+0x344>
 800f150:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f152:	1a76      	subs	r6, r6, r1
 800f154:	2e08      	cmp	r6, #8
 800f156:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f15a:	dc03      	bgt.n	800f164 <_strtod_l+0x2e4>
 800f15c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f15e:	4588      	cmp	r8, r1
 800f160:	bfa8      	it	ge
 800f162:	4688      	movge	r8, r1
 800f164:	f1bc 0f00 	cmp.w	ip, #0
 800f168:	d001      	beq.n	800f16e <_strtod_l+0x2ee>
 800f16a:	f1c8 0800 	rsb	r8, r8, #0
 800f16e:	2d00      	cmp	r5, #0
 800f170:	d14e      	bne.n	800f210 <_strtod_l+0x390>
 800f172:	9908      	ldr	r1, [sp, #32]
 800f174:	4308      	orrs	r0, r1
 800f176:	f47f aebc 	bne.w	800eef2 <_strtod_l+0x72>
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	f47f aed4 	bne.w	800ef28 <_strtod_l+0xa8>
 800f180:	2a69      	cmp	r2, #105	@ 0x69
 800f182:	d028      	beq.n	800f1d6 <_strtod_l+0x356>
 800f184:	dc25      	bgt.n	800f1d2 <_strtod_l+0x352>
 800f186:	2a49      	cmp	r2, #73	@ 0x49
 800f188:	d025      	beq.n	800f1d6 <_strtod_l+0x356>
 800f18a:	2a4e      	cmp	r2, #78	@ 0x4e
 800f18c:	f47f aecc 	bne.w	800ef28 <_strtod_l+0xa8>
 800f190:	499a      	ldr	r1, [pc, #616]	@ (800f3fc <_strtod_l+0x57c>)
 800f192:	a819      	add	r0, sp, #100	@ 0x64
 800f194:	f001 fd4c 	bl	8010c30 <__match>
 800f198:	2800      	cmp	r0, #0
 800f19a:	f43f aec5 	beq.w	800ef28 <_strtod_l+0xa8>
 800f19e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	2b28      	cmp	r3, #40	@ 0x28
 800f1a4:	d12e      	bne.n	800f204 <_strtod_l+0x384>
 800f1a6:	4996      	ldr	r1, [pc, #600]	@ (800f400 <_strtod_l+0x580>)
 800f1a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f1aa:	a819      	add	r0, sp, #100	@ 0x64
 800f1ac:	f001 fd54 	bl	8010c58 <__hexnan>
 800f1b0:	2805      	cmp	r0, #5
 800f1b2:	d127      	bne.n	800f204 <_strtod_l+0x384>
 800f1b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f1b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f1ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f1be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f1c2:	e696      	b.n	800eef2 <_strtod_l+0x72>
 800f1c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f1c6:	fb08 2101 	mla	r1, r8, r1, r2
 800f1ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f1ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1d0:	e7b5      	b.n	800f13e <_strtod_l+0x2be>
 800f1d2:	2a6e      	cmp	r2, #110	@ 0x6e
 800f1d4:	e7da      	b.n	800f18c <_strtod_l+0x30c>
 800f1d6:	498b      	ldr	r1, [pc, #556]	@ (800f404 <_strtod_l+0x584>)
 800f1d8:	a819      	add	r0, sp, #100	@ 0x64
 800f1da:	f001 fd29 	bl	8010c30 <__match>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f43f aea2 	beq.w	800ef28 <_strtod_l+0xa8>
 800f1e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1e6:	4988      	ldr	r1, [pc, #544]	@ (800f408 <_strtod_l+0x588>)
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	a819      	add	r0, sp, #100	@ 0x64
 800f1ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1ee:	f001 fd1f 	bl	8010c30 <__match>
 800f1f2:	b910      	cbnz	r0, 800f1fa <_strtod_l+0x37a>
 800f1f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f1fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f418 <_strtod_l+0x598>
 800f1fe:	f04f 0a00 	mov.w	sl, #0
 800f202:	e676      	b.n	800eef2 <_strtod_l+0x72>
 800f204:	4881      	ldr	r0, [pc, #516]	@ (800f40c <_strtod_l+0x58c>)
 800f206:	f001 fa63 	bl	80106d0 <nan>
 800f20a:	ec5b ab10 	vmov	sl, fp, d0
 800f20e:	e670      	b.n	800eef2 <_strtod_l+0x72>
 800f210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f212:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f214:	eba8 0303 	sub.w	r3, r8, r3
 800f218:	f1b9 0f00 	cmp.w	r9, #0
 800f21c:	bf08      	it	eq
 800f21e:	46a9      	moveq	r9, r5
 800f220:	2d10      	cmp	r5, #16
 800f222:	9309      	str	r3, [sp, #36]	@ 0x24
 800f224:	462c      	mov	r4, r5
 800f226:	bfa8      	it	ge
 800f228:	2410      	movge	r4, #16
 800f22a:	f7f1 f98b 	bl	8000544 <__aeabi_ui2d>
 800f22e:	2d09      	cmp	r5, #9
 800f230:	4682      	mov	sl, r0
 800f232:	468b      	mov	fp, r1
 800f234:	dc13      	bgt.n	800f25e <_strtod_l+0x3de>
 800f236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f238:	2b00      	cmp	r3, #0
 800f23a:	f43f ae5a 	beq.w	800eef2 <_strtod_l+0x72>
 800f23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f240:	dd78      	ble.n	800f334 <_strtod_l+0x4b4>
 800f242:	2b16      	cmp	r3, #22
 800f244:	dc5f      	bgt.n	800f306 <_strtod_l+0x486>
 800f246:	4972      	ldr	r1, [pc, #456]	@ (800f410 <_strtod_l+0x590>)
 800f248:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f250:	4652      	mov	r2, sl
 800f252:	465b      	mov	r3, fp
 800f254:	f7f1 f9f0 	bl	8000638 <__aeabi_dmul>
 800f258:	4682      	mov	sl, r0
 800f25a:	468b      	mov	fp, r1
 800f25c:	e649      	b.n	800eef2 <_strtod_l+0x72>
 800f25e:	4b6c      	ldr	r3, [pc, #432]	@ (800f410 <_strtod_l+0x590>)
 800f260:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f264:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f268:	f7f1 f9e6 	bl	8000638 <__aeabi_dmul>
 800f26c:	4682      	mov	sl, r0
 800f26e:	4638      	mov	r0, r7
 800f270:	468b      	mov	fp, r1
 800f272:	f7f1 f967 	bl	8000544 <__aeabi_ui2d>
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	4650      	mov	r0, sl
 800f27c:	4659      	mov	r1, fp
 800f27e:	f7f1 f825 	bl	80002cc <__adddf3>
 800f282:	2d0f      	cmp	r5, #15
 800f284:	4682      	mov	sl, r0
 800f286:	468b      	mov	fp, r1
 800f288:	ddd5      	ble.n	800f236 <_strtod_l+0x3b6>
 800f28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28c:	1b2c      	subs	r4, r5, r4
 800f28e:	441c      	add	r4, r3
 800f290:	2c00      	cmp	r4, #0
 800f292:	f340 8093 	ble.w	800f3bc <_strtod_l+0x53c>
 800f296:	f014 030f 	ands.w	r3, r4, #15
 800f29a:	d00a      	beq.n	800f2b2 <_strtod_l+0x432>
 800f29c:	495c      	ldr	r1, [pc, #368]	@ (800f410 <_strtod_l+0x590>)
 800f29e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f2a2:	4652      	mov	r2, sl
 800f2a4:	465b      	mov	r3, fp
 800f2a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2aa:	f7f1 f9c5 	bl	8000638 <__aeabi_dmul>
 800f2ae:	4682      	mov	sl, r0
 800f2b0:	468b      	mov	fp, r1
 800f2b2:	f034 040f 	bics.w	r4, r4, #15
 800f2b6:	d073      	beq.n	800f3a0 <_strtod_l+0x520>
 800f2b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f2bc:	dd49      	ble.n	800f352 <_strtod_l+0x4d2>
 800f2be:	2400      	movs	r4, #0
 800f2c0:	46a0      	mov	r8, r4
 800f2c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f2c4:	46a1      	mov	r9, r4
 800f2c6:	9a05      	ldr	r2, [sp, #20]
 800f2c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f418 <_strtod_l+0x598>
 800f2cc:	2322      	movs	r3, #34	@ 0x22
 800f2ce:	6013      	str	r3, [r2, #0]
 800f2d0:	f04f 0a00 	mov.w	sl, #0
 800f2d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f43f ae0b 	beq.w	800eef2 <_strtod_l+0x72>
 800f2dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f2de:	9805      	ldr	r0, [sp, #20]
 800f2e0:	f7ff f944 	bl	800e56c <_Bfree>
 800f2e4:	9805      	ldr	r0, [sp, #20]
 800f2e6:	4649      	mov	r1, r9
 800f2e8:	f7ff f940 	bl	800e56c <_Bfree>
 800f2ec:	9805      	ldr	r0, [sp, #20]
 800f2ee:	4641      	mov	r1, r8
 800f2f0:	f7ff f93c 	bl	800e56c <_Bfree>
 800f2f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2f6:	9805      	ldr	r0, [sp, #20]
 800f2f8:	f7ff f938 	bl	800e56c <_Bfree>
 800f2fc:	9805      	ldr	r0, [sp, #20]
 800f2fe:	4621      	mov	r1, r4
 800f300:	f7ff f934 	bl	800e56c <_Bfree>
 800f304:	e5f5      	b.n	800eef2 <_strtod_l+0x72>
 800f306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f308:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f30c:	4293      	cmp	r3, r2
 800f30e:	dbbc      	blt.n	800f28a <_strtod_l+0x40a>
 800f310:	4c3f      	ldr	r4, [pc, #252]	@ (800f410 <_strtod_l+0x590>)
 800f312:	f1c5 050f 	rsb	r5, r5, #15
 800f316:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f31a:	4652      	mov	r2, sl
 800f31c:	465b      	mov	r3, fp
 800f31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f322:	f7f1 f989 	bl	8000638 <__aeabi_dmul>
 800f326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f328:	1b5d      	subs	r5, r3, r5
 800f32a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f32e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f332:	e78f      	b.n	800f254 <_strtod_l+0x3d4>
 800f334:	3316      	adds	r3, #22
 800f336:	dba8      	blt.n	800f28a <_strtod_l+0x40a>
 800f338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f33a:	eba3 0808 	sub.w	r8, r3, r8
 800f33e:	4b34      	ldr	r3, [pc, #208]	@ (800f410 <_strtod_l+0x590>)
 800f340:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f344:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f348:	4650      	mov	r0, sl
 800f34a:	4659      	mov	r1, fp
 800f34c:	f7f1 fa9e 	bl	800088c <__aeabi_ddiv>
 800f350:	e782      	b.n	800f258 <_strtod_l+0x3d8>
 800f352:	2300      	movs	r3, #0
 800f354:	4f2f      	ldr	r7, [pc, #188]	@ (800f414 <_strtod_l+0x594>)
 800f356:	1124      	asrs	r4, r4, #4
 800f358:	4650      	mov	r0, sl
 800f35a:	4659      	mov	r1, fp
 800f35c:	461e      	mov	r6, r3
 800f35e:	2c01      	cmp	r4, #1
 800f360:	dc21      	bgt.n	800f3a6 <_strtod_l+0x526>
 800f362:	b10b      	cbz	r3, 800f368 <_strtod_l+0x4e8>
 800f364:	4682      	mov	sl, r0
 800f366:	468b      	mov	fp, r1
 800f368:	492a      	ldr	r1, [pc, #168]	@ (800f414 <_strtod_l+0x594>)
 800f36a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f36e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f372:	4652      	mov	r2, sl
 800f374:	465b      	mov	r3, fp
 800f376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f37a:	f7f1 f95d 	bl	8000638 <__aeabi_dmul>
 800f37e:	4b26      	ldr	r3, [pc, #152]	@ (800f418 <_strtod_l+0x598>)
 800f380:	460a      	mov	r2, r1
 800f382:	400b      	ands	r3, r1
 800f384:	4925      	ldr	r1, [pc, #148]	@ (800f41c <_strtod_l+0x59c>)
 800f386:	428b      	cmp	r3, r1
 800f388:	4682      	mov	sl, r0
 800f38a:	d898      	bhi.n	800f2be <_strtod_l+0x43e>
 800f38c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f390:	428b      	cmp	r3, r1
 800f392:	bf86      	itte	hi
 800f394:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f420 <_strtod_l+0x5a0>
 800f398:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f39c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	9308      	str	r3, [sp, #32]
 800f3a4:	e076      	b.n	800f494 <_strtod_l+0x614>
 800f3a6:	07e2      	lsls	r2, r4, #31
 800f3a8:	d504      	bpl.n	800f3b4 <_strtod_l+0x534>
 800f3aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3ae:	f7f1 f943 	bl	8000638 <__aeabi_dmul>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	3601      	adds	r6, #1
 800f3b6:	1064      	asrs	r4, r4, #1
 800f3b8:	3708      	adds	r7, #8
 800f3ba:	e7d0      	b.n	800f35e <_strtod_l+0x4de>
 800f3bc:	d0f0      	beq.n	800f3a0 <_strtod_l+0x520>
 800f3be:	4264      	negs	r4, r4
 800f3c0:	f014 020f 	ands.w	r2, r4, #15
 800f3c4:	d00a      	beq.n	800f3dc <_strtod_l+0x55c>
 800f3c6:	4b12      	ldr	r3, [pc, #72]	@ (800f410 <_strtod_l+0x590>)
 800f3c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3cc:	4650      	mov	r0, sl
 800f3ce:	4659      	mov	r1, fp
 800f3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d4:	f7f1 fa5a 	bl	800088c <__aeabi_ddiv>
 800f3d8:	4682      	mov	sl, r0
 800f3da:	468b      	mov	fp, r1
 800f3dc:	1124      	asrs	r4, r4, #4
 800f3de:	d0df      	beq.n	800f3a0 <_strtod_l+0x520>
 800f3e0:	2c1f      	cmp	r4, #31
 800f3e2:	dd1f      	ble.n	800f424 <_strtod_l+0x5a4>
 800f3e4:	2400      	movs	r4, #0
 800f3e6:	46a0      	mov	r8, r4
 800f3e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f3ea:	46a1      	mov	r9, r4
 800f3ec:	9a05      	ldr	r2, [sp, #20]
 800f3ee:	2322      	movs	r3, #34	@ 0x22
 800f3f0:	f04f 0a00 	mov.w	sl, #0
 800f3f4:	f04f 0b00 	mov.w	fp, #0
 800f3f8:	6013      	str	r3, [r2, #0]
 800f3fa:	e76b      	b.n	800f2d4 <_strtod_l+0x454>
 800f3fc:	0801330d 	.word	0x0801330d
 800f400:	080135f0 	.word	0x080135f0
 800f404:	08013305 	.word	0x08013305
 800f408:	0801333a 	.word	0x0801333a
 800f40c:	0801348e 	.word	0x0801348e
 800f410:	08013528 	.word	0x08013528
 800f414:	08013500 	.word	0x08013500
 800f418:	7ff00000 	.word	0x7ff00000
 800f41c:	7ca00000 	.word	0x7ca00000
 800f420:	7fefffff 	.word	0x7fefffff
 800f424:	f014 0310 	ands.w	r3, r4, #16
 800f428:	bf18      	it	ne
 800f42a:	236a      	movne	r3, #106	@ 0x6a
 800f42c:	4ea9      	ldr	r6, [pc, #676]	@ (800f6d4 <_strtod_l+0x854>)
 800f42e:	9308      	str	r3, [sp, #32]
 800f430:	4650      	mov	r0, sl
 800f432:	4659      	mov	r1, fp
 800f434:	2300      	movs	r3, #0
 800f436:	07e7      	lsls	r7, r4, #31
 800f438:	d504      	bpl.n	800f444 <_strtod_l+0x5c4>
 800f43a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f43e:	f7f1 f8fb 	bl	8000638 <__aeabi_dmul>
 800f442:	2301      	movs	r3, #1
 800f444:	1064      	asrs	r4, r4, #1
 800f446:	f106 0608 	add.w	r6, r6, #8
 800f44a:	d1f4      	bne.n	800f436 <_strtod_l+0x5b6>
 800f44c:	b10b      	cbz	r3, 800f452 <_strtod_l+0x5d2>
 800f44e:	4682      	mov	sl, r0
 800f450:	468b      	mov	fp, r1
 800f452:	9b08      	ldr	r3, [sp, #32]
 800f454:	b1b3      	cbz	r3, 800f484 <_strtod_l+0x604>
 800f456:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f45a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f45e:	2b00      	cmp	r3, #0
 800f460:	4659      	mov	r1, fp
 800f462:	dd0f      	ble.n	800f484 <_strtod_l+0x604>
 800f464:	2b1f      	cmp	r3, #31
 800f466:	dd56      	ble.n	800f516 <_strtod_l+0x696>
 800f468:	2b34      	cmp	r3, #52	@ 0x34
 800f46a:	bfde      	ittt	le
 800f46c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f470:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f474:	4093      	lslle	r3, r2
 800f476:	f04f 0a00 	mov.w	sl, #0
 800f47a:	bfcc      	ite	gt
 800f47c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f480:	ea03 0b01 	andle.w	fp, r3, r1
 800f484:	2200      	movs	r2, #0
 800f486:	2300      	movs	r3, #0
 800f488:	4650      	mov	r0, sl
 800f48a:	4659      	mov	r1, fp
 800f48c:	f7f1 fb3c 	bl	8000b08 <__aeabi_dcmpeq>
 800f490:	2800      	cmp	r0, #0
 800f492:	d1a7      	bne.n	800f3e4 <_strtod_l+0x564>
 800f494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f49a:	9805      	ldr	r0, [sp, #20]
 800f49c:	462b      	mov	r3, r5
 800f49e:	464a      	mov	r2, r9
 800f4a0:	f7ff f8cc 	bl	800e63c <__s2b>
 800f4a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	f43f af09 	beq.w	800f2be <_strtod_l+0x43e>
 800f4ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4b0:	2a00      	cmp	r2, #0
 800f4b2:	eba3 0308 	sub.w	r3, r3, r8
 800f4b6:	bfa8      	it	ge
 800f4b8:	2300      	movge	r3, #0
 800f4ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800f4bc:	2400      	movs	r4, #0
 800f4be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f4c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800f4c4:	46a0      	mov	r8, r4
 800f4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4c8:	9805      	ldr	r0, [sp, #20]
 800f4ca:	6859      	ldr	r1, [r3, #4]
 800f4cc:	f7ff f80e 	bl	800e4ec <_Balloc>
 800f4d0:	4681      	mov	r9, r0
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	f43f aef7 	beq.w	800f2c6 <_strtod_l+0x446>
 800f4d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4da:	691a      	ldr	r2, [r3, #16]
 800f4dc:	3202      	adds	r2, #2
 800f4de:	f103 010c 	add.w	r1, r3, #12
 800f4e2:	0092      	lsls	r2, r2, #2
 800f4e4:	300c      	adds	r0, #12
 800f4e6:	f7fe f94a 	bl	800d77e <memcpy>
 800f4ea:	ec4b ab10 	vmov	d0, sl, fp
 800f4ee:	9805      	ldr	r0, [sp, #20]
 800f4f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800f4f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800f4f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f4f8:	f7ff fbd4 	bl	800eca4 <__d2b>
 800f4fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f4fe:	2800      	cmp	r0, #0
 800f500:	f43f aee1 	beq.w	800f2c6 <_strtod_l+0x446>
 800f504:	9805      	ldr	r0, [sp, #20]
 800f506:	2101      	movs	r1, #1
 800f508:	f7ff f92e 	bl	800e768 <__i2b>
 800f50c:	4680      	mov	r8, r0
 800f50e:	b948      	cbnz	r0, 800f524 <_strtod_l+0x6a4>
 800f510:	f04f 0800 	mov.w	r8, #0
 800f514:	e6d7      	b.n	800f2c6 <_strtod_l+0x446>
 800f516:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f51a:	fa02 f303 	lsl.w	r3, r2, r3
 800f51e:	ea03 0a0a 	and.w	sl, r3, sl
 800f522:	e7af      	b.n	800f484 <_strtod_l+0x604>
 800f524:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f526:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f528:	2d00      	cmp	r5, #0
 800f52a:	bfab      	itete	ge
 800f52c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f52e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f530:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f532:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f534:	bfac      	ite	ge
 800f536:	18ef      	addge	r7, r5, r3
 800f538:	1b5e      	sublt	r6, r3, r5
 800f53a:	9b08      	ldr	r3, [sp, #32]
 800f53c:	1aed      	subs	r5, r5, r3
 800f53e:	4415      	add	r5, r2
 800f540:	4b65      	ldr	r3, [pc, #404]	@ (800f6d8 <_strtod_l+0x858>)
 800f542:	3d01      	subs	r5, #1
 800f544:	429d      	cmp	r5, r3
 800f546:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f54a:	da50      	bge.n	800f5ee <_strtod_l+0x76e>
 800f54c:	1b5b      	subs	r3, r3, r5
 800f54e:	2b1f      	cmp	r3, #31
 800f550:	eba2 0203 	sub.w	r2, r2, r3
 800f554:	f04f 0101 	mov.w	r1, #1
 800f558:	dc3d      	bgt.n	800f5d6 <_strtod_l+0x756>
 800f55a:	fa01 f303 	lsl.w	r3, r1, r3
 800f55e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f560:	2300      	movs	r3, #0
 800f562:	9310      	str	r3, [sp, #64]	@ 0x40
 800f564:	18bd      	adds	r5, r7, r2
 800f566:	9b08      	ldr	r3, [sp, #32]
 800f568:	42af      	cmp	r7, r5
 800f56a:	4416      	add	r6, r2
 800f56c:	441e      	add	r6, r3
 800f56e:	463b      	mov	r3, r7
 800f570:	bfa8      	it	ge
 800f572:	462b      	movge	r3, r5
 800f574:	42b3      	cmp	r3, r6
 800f576:	bfa8      	it	ge
 800f578:	4633      	movge	r3, r6
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	bfc2      	ittt	gt
 800f57e:	1aed      	subgt	r5, r5, r3
 800f580:	1af6      	subgt	r6, r6, r3
 800f582:	1aff      	subgt	r7, r7, r3
 800f584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f586:	2b00      	cmp	r3, #0
 800f588:	dd16      	ble.n	800f5b8 <_strtod_l+0x738>
 800f58a:	4641      	mov	r1, r8
 800f58c:	9805      	ldr	r0, [sp, #20]
 800f58e:	461a      	mov	r2, r3
 800f590:	f7ff f9a2 	bl	800e8d8 <__pow5mult>
 800f594:	4680      	mov	r8, r0
 800f596:	2800      	cmp	r0, #0
 800f598:	d0ba      	beq.n	800f510 <_strtod_l+0x690>
 800f59a:	4601      	mov	r1, r0
 800f59c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f59e:	9805      	ldr	r0, [sp, #20]
 800f5a0:	f7ff f8f8 	bl	800e794 <__multiply>
 800f5a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f5a6:	2800      	cmp	r0, #0
 800f5a8:	f43f ae8d 	beq.w	800f2c6 <_strtod_l+0x446>
 800f5ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5ae:	9805      	ldr	r0, [sp, #20]
 800f5b0:	f7fe ffdc 	bl	800e56c <_Bfree>
 800f5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5b8:	2d00      	cmp	r5, #0
 800f5ba:	dc1d      	bgt.n	800f5f8 <_strtod_l+0x778>
 800f5bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	dd23      	ble.n	800f60a <_strtod_l+0x78a>
 800f5c2:	4649      	mov	r1, r9
 800f5c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f5c6:	9805      	ldr	r0, [sp, #20]
 800f5c8:	f7ff f986 	bl	800e8d8 <__pow5mult>
 800f5cc:	4681      	mov	r9, r0
 800f5ce:	b9e0      	cbnz	r0, 800f60a <_strtod_l+0x78a>
 800f5d0:	f04f 0900 	mov.w	r9, #0
 800f5d4:	e677      	b.n	800f2c6 <_strtod_l+0x446>
 800f5d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f5da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f5de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f5e2:	35e2      	adds	r5, #226	@ 0xe2
 800f5e4:	fa01 f305 	lsl.w	r3, r1, r5
 800f5e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f5ec:	e7ba      	b.n	800f564 <_strtod_l+0x6e4>
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f5f6:	e7b5      	b.n	800f564 <_strtod_l+0x6e4>
 800f5f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5fa:	9805      	ldr	r0, [sp, #20]
 800f5fc:	462a      	mov	r2, r5
 800f5fe:	f7ff f9c5 	bl	800e98c <__lshift>
 800f602:	901a      	str	r0, [sp, #104]	@ 0x68
 800f604:	2800      	cmp	r0, #0
 800f606:	d1d9      	bne.n	800f5bc <_strtod_l+0x73c>
 800f608:	e65d      	b.n	800f2c6 <_strtod_l+0x446>
 800f60a:	2e00      	cmp	r6, #0
 800f60c:	dd07      	ble.n	800f61e <_strtod_l+0x79e>
 800f60e:	4649      	mov	r1, r9
 800f610:	9805      	ldr	r0, [sp, #20]
 800f612:	4632      	mov	r2, r6
 800f614:	f7ff f9ba 	bl	800e98c <__lshift>
 800f618:	4681      	mov	r9, r0
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d0d8      	beq.n	800f5d0 <_strtod_l+0x750>
 800f61e:	2f00      	cmp	r7, #0
 800f620:	dd08      	ble.n	800f634 <_strtod_l+0x7b4>
 800f622:	4641      	mov	r1, r8
 800f624:	9805      	ldr	r0, [sp, #20]
 800f626:	463a      	mov	r2, r7
 800f628:	f7ff f9b0 	bl	800e98c <__lshift>
 800f62c:	4680      	mov	r8, r0
 800f62e:	2800      	cmp	r0, #0
 800f630:	f43f ae49 	beq.w	800f2c6 <_strtod_l+0x446>
 800f634:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f636:	9805      	ldr	r0, [sp, #20]
 800f638:	464a      	mov	r2, r9
 800f63a:	f7ff fa2f 	bl	800ea9c <__mdiff>
 800f63e:	4604      	mov	r4, r0
 800f640:	2800      	cmp	r0, #0
 800f642:	f43f ae40 	beq.w	800f2c6 <_strtod_l+0x446>
 800f646:	68c3      	ldr	r3, [r0, #12]
 800f648:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f64a:	2300      	movs	r3, #0
 800f64c:	60c3      	str	r3, [r0, #12]
 800f64e:	4641      	mov	r1, r8
 800f650:	f7ff fa08 	bl	800ea64 <__mcmp>
 800f654:	2800      	cmp	r0, #0
 800f656:	da45      	bge.n	800f6e4 <_strtod_l+0x864>
 800f658:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f65a:	ea53 030a 	orrs.w	r3, r3, sl
 800f65e:	d16b      	bne.n	800f738 <_strtod_l+0x8b8>
 800f660:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f664:	2b00      	cmp	r3, #0
 800f666:	d167      	bne.n	800f738 <_strtod_l+0x8b8>
 800f668:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f66c:	0d1b      	lsrs	r3, r3, #20
 800f66e:	051b      	lsls	r3, r3, #20
 800f670:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f674:	d960      	bls.n	800f738 <_strtod_l+0x8b8>
 800f676:	6963      	ldr	r3, [r4, #20]
 800f678:	b913      	cbnz	r3, 800f680 <_strtod_l+0x800>
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	dd5b      	ble.n	800f738 <_strtod_l+0x8b8>
 800f680:	4621      	mov	r1, r4
 800f682:	2201      	movs	r2, #1
 800f684:	9805      	ldr	r0, [sp, #20]
 800f686:	f7ff f981 	bl	800e98c <__lshift>
 800f68a:	4641      	mov	r1, r8
 800f68c:	4604      	mov	r4, r0
 800f68e:	f7ff f9e9 	bl	800ea64 <__mcmp>
 800f692:	2800      	cmp	r0, #0
 800f694:	dd50      	ble.n	800f738 <_strtod_l+0x8b8>
 800f696:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f69a:	9a08      	ldr	r2, [sp, #32]
 800f69c:	0d1b      	lsrs	r3, r3, #20
 800f69e:	051b      	lsls	r3, r3, #20
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	d06a      	beq.n	800f77a <_strtod_l+0x8fa>
 800f6a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f6a8:	d867      	bhi.n	800f77a <_strtod_l+0x8fa>
 800f6aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f6ae:	f67f ae9d 	bls.w	800f3ec <_strtod_l+0x56c>
 800f6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f6dc <_strtod_l+0x85c>)
 800f6b4:	4650      	mov	r0, sl
 800f6b6:	4659      	mov	r1, fp
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f7f0 ffbd 	bl	8000638 <__aeabi_dmul>
 800f6be:	4b08      	ldr	r3, [pc, #32]	@ (800f6e0 <_strtod_l+0x860>)
 800f6c0:	400b      	ands	r3, r1
 800f6c2:	4682      	mov	sl, r0
 800f6c4:	468b      	mov	fp, r1
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f47f ae08 	bne.w	800f2dc <_strtod_l+0x45c>
 800f6cc:	9a05      	ldr	r2, [sp, #20]
 800f6ce:	2322      	movs	r3, #34	@ 0x22
 800f6d0:	6013      	str	r3, [r2, #0]
 800f6d2:	e603      	b.n	800f2dc <_strtod_l+0x45c>
 800f6d4:	08013618 	.word	0x08013618
 800f6d8:	fffffc02 	.word	0xfffffc02
 800f6dc:	39500000 	.word	0x39500000
 800f6e0:	7ff00000 	.word	0x7ff00000
 800f6e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f6e8:	d165      	bne.n	800f7b6 <_strtod_l+0x936>
 800f6ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f6ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f6f0:	b35a      	cbz	r2, 800f74a <_strtod_l+0x8ca>
 800f6f2:	4a9f      	ldr	r2, [pc, #636]	@ (800f970 <_strtod_l+0xaf0>)
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d12b      	bne.n	800f750 <_strtod_l+0x8d0>
 800f6f8:	9b08      	ldr	r3, [sp, #32]
 800f6fa:	4651      	mov	r1, sl
 800f6fc:	b303      	cbz	r3, 800f740 <_strtod_l+0x8c0>
 800f6fe:	4b9d      	ldr	r3, [pc, #628]	@ (800f974 <_strtod_l+0xaf4>)
 800f700:	465a      	mov	r2, fp
 800f702:	4013      	ands	r3, r2
 800f704:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f708:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f70c:	d81b      	bhi.n	800f746 <_strtod_l+0x8c6>
 800f70e:	0d1b      	lsrs	r3, r3, #20
 800f710:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f714:	fa02 f303 	lsl.w	r3, r2, r3
 800f718:	4299      	cmp	r1, r3
 800f71a:	d119      	bne.n	800f750 <_strtod_l+0x8d0>
 800f71c:	4b96      	ldr	r3, [pc, #600]	@ (800f978 <_strtod_l+0xaf8>)
 800f71e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f720:	429a      	cmp	r2, r3
 800f722:	d102      	bne.n	800f72a <_strtod_l+0x8aa>
 800f724:	3101      	adds	r1, #1
 800f726:	f43f adce 	beq.w	800f2c6 <_strtod_l+0x446>
 800f72a:	4b92      	ldr	r3, [pc, #584]	@ (800f974 <_strtod_l+0xaf4>)
 800f72c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f72e:	401a      	ands	r2, r3
 800f730:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f734:	f04f 0a00 	mov.w	sl, #0
 800f738:	9b08      	ldr	r3, [sp, #32]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1b9      	bne.n	800f6b2 <_strtod_l+0x832>
 800f73e:	e5cd      	b.n	800f2dc <_strtod_l+0x45c>
 800f740:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f744:	e7e8      	b.n	800f718 <_strtod_l+0x898>
 800f746:	4613      	mov	r3, r2
 800f748:	e7e6      	b.n	800f718 <_strtod_l+0x898>
 800f74a:	ea53 030a 	orrs.w	r3, r3, sl
 800f74e:	d0a2      	beq.n	800f696 <_strtod_l+0x816>
 800f750:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f752:	b1db      	cbz	r3, 800f78c <_strtod_l+0x90c>
 800f754:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f756:	4213      	tst	r3, r2
 800f758:	d0ee      	beq.n	800f738 <_strtod_l+0x8b8>
 800f75a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f75c:	9a08      	ldr	r2, [sp, #32]
 800f75e:	4650      	mov	r0, sl
 800f760:	4659      	mov	r1, fp
 800f762:	b1bb      	cbz	r3, 800f794 <_strtod_l+0x914>
 800f764:	f7ff fb6c 	bl	800ee40 <sulp>
 800f768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f76c:	ec53 2b10 	vmov	r2, r3, d0
 800f770:	f7f0 fdac 	bl	80002cc <__adddf3>
 800f774:	4682      	mov	sl, r0
 800f776:	468b      	mov	fp, r1
 800f778:	e7de      	b.n	800f738 <_strtod_l+0x8b8>
 800f77a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f77e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f782:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f786:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f78a:	e7d5      	b.n	800f738 <_strtod_l+0x8b8>
 800f78c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f78e:	ea13 0f0a 	tst.w	r3, sl
 800f792:	e7e1      	b.n	800f758 <_strtod_l+0x8d8>
 800f794:	f7ff fb54 	bl	800ee40 <sulp>
 800f798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f79c:	ec53 2b10 	vmov	r2, r3, d0
 800f7a0:	f7f0 fd92 	bl	80002c8 <__aeabi_dsub>
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	4682      	mov	sl, r0
 800f7aa:	468b      	mov	fp, r1
 800f7ac:	f7f1 f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 800f7b0:	2800      	cmp	r0, #0
 800f7b2:	d0c1      	beq.n	800f738 <_strtod_l+0x8b8>
 800f7b4:	e61a      	b.n	800f3ec <_strtod_l+0x56c>
 800f7b6:	4641      	mov	r1, r8
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f7ff facb 	bl	800ed54 <__ratio>
 800f7be:	ec57 6b10 	vmov	r6, r7, d0
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	f7f1 f9b0 	bl	8000b30 <__aeabi_dcmple>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d06f      	beq.n	800f8b4 <_strtod_l+0xa34>
 800f7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d17a      	bne.n	800f8d0 <_strtod_l+0xa50>
 800f7da:	f1ba 0f00 	cmp.w	sl, #0
 800f7de:	d158      	bne.n	800f892 <_strtod_l+0xa12>
 800f7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d15a      	bne.n	800f8a0 <_strtod_l+0xa20>
 800f7ea:	4b64      	ldr	r3, [pc, #400]	@ (800f97c <_strtod_l+0xafc>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	4639      	mov	r1, r7
 800f7f2:	f7f1 f993 	bl	8000b1c <__aeabi_dcmplt>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d159      	bne.n	800f8ae <_strtod_l+0xa2e>
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	4639      	mov	r1, r7
 800f7fe:	4b60      	ldr	r3, [pc, #384]	@ (800f980 <_strtod_l+0xb00>)
 800f800:	2200      	movs	r2, #0
 800f802:	f7f0 ff19 	bl	8000638 <__aeabi_dmul>
 800f806:	4606      	mov	r6, r0
 800f808:	460f      	mov	r7, r1
 800f80a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f80e:	9606      	str	r6, [sp, #24]
 800f810:	9307      	str	r3, [sp, #28]
 800f812:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f816:	4d57      	ldr	r5, [pc, #348]	@ (800f974 <_strtod_l+0xaf4>)
 800f818:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f81e:	401d      	ands	r5, r3
 800f820:	4b58      	ldr	r3, [pc, #352]	@ (800f984 <_strtod_l+0xb04>)
 800f822:	429d      	cmp	r5, r3
 800f824:	f040 80b2 	bne.w	800f98c <_strtod_l+0xb0c>
 800f828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f82a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f82e:	ec4b ab10 	vmov	d0, sl, fp
 800f832:	f7ff f9c7 	bl	800ebc4 <__ulp>
 800f836:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f83a:	ec51 0b10 	vmov	r0, r1, d0
 800f83e:	f7f0 fefb 	bl	8000638 <__aeabi_dmul>
 800f842:	4652      	mov	r2, sl
 800f844:	465b      	mov	r3, fp
 800f846:	f7f0 fd41 	bl	80002cc <__adddf3>
 800f84a:	460b      	mov	r3, r1
 800f84c:	4949      	ldr	r1, [pc, #292]	@ (800f974 <_strtod_l+0xaf4>)
 800f84e:	4a4e      	ldr	r2, [pc, #312]	@ (800f988 <_strtod_l+0xb08>)
 800f850:	4019      	ands	r1, r3
 800f852:	4291      	cmp	r1, r2
 800f854:	4682      	mov	sl, r0
 800f856:	d942      	bls.n	800f8de <_strtod_l+0xa5e>
 800f858:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f85a:	4b47      	ldr	r3, [pc, #284]	@ (800f978 <_strtod_l+0xaf8>)
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d103      	bne.n	800f868 <_strtod_l+0x9e8>
 800f860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f862:	3301      	adds	r3, #1
 800f864:	f43f ad2f 	beq.w	800f2c6 <_strtod_l+0x446>
 800f868:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f978 <_strtod_l+0xaf8>
 800f86c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f870:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f872:	9805      	ldr	r0, [sp, #20]
 800f874:	f7fe fe7a 	bl	800e56c <_Bfree>
 800f878:	9805      	ldr	r0, [sp, #20]
 800f87a:	4649      	mov	r1, r9
 800f87c:	f7fe fe76 	bl	800e56c <_Bfree>
 800f880:	9805      	ldr	r0, [sp, #20]
 800f882:	4641      	mov	r1, r8
 800f884:	f7fe fe72 	bl	800e56c <_Bfree>
 800f888:	9805      	ldr	r0, [sp, #20]
 800f88a:	4621      	mov	r1, r4
 800f88c:	f7fe fe6e 	bl	800e56c <_Bfree>
 800f890:	e619      	b.n	800f4c6 <_strtod_l+0x646>
 800f892:	f1ba 0f01 	cmp.w	sl, #1
 800f896:	d103      	bne.n	800f8a0 <_strtod_l+0xa20>
 800f898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	f43f ada6 	beq.w	800f3ec <_strtod_l+0x56c>
 800f8a0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f950 <_strtod_l+0xad0>
 800f8a4:	4f35      	ldr	r7, [pc, #212]	@ (800f97c <_strtod_l+0xafc>)
 800f8a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f8aa:	2600      	movs	r6, #0
 800f8ac:	e7b1      	b.n	800f812 <_strtod_l+0x992>
 800f8ae:	4f34      	ldr	r7, [pc, #208]	@ (800f980 <_strtod_l+0xb00>)
 800f8b0:	2600      	movs	r6, #0
 800f8b2:	e7aa      	b.n	800f80a <_strtod_l+0x98a>
 800f8b4:	4b32      	ldr	r3, [pc, #200]	@ (800f980 <_strtod_l+0xb00>)
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	4639      	mov	r1, r7
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	f7f0 febc 	bl	8000638 <__aeabi_dmul>
 800f8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	460f      	mov	r7, r1
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d09f      	beq.n	800f80a <_strtod_l+0x98a>
 800f8ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f8ce:	e7a0      	b.n	800f812 <_strtod_l+0x992>
 800f8d0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f958 <_strtod_l+0xad8>
 800f8d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f8d8:	ec57 6b17 	vmov	r6, r7, d7
 800f8dc:	e799      	b.n	800f812 <_strtod_l+0x992>
 800f8de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f8e2:	9b08      	ldr	r3, [sp, #32]
 800f8e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d1c1      	bne.n	800f870 <_strtod_l+0x9f0>
 800f8ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f8f0:	0d1b      	lsrs	r3, r3, #20
 800f8f2:	051b      	lsls	r3, r3, #20
 800f8f4:	429d      	cmp	r5, r3
 800f8f6:	d1bb      	bne.n	800f870 <_strtod_l+0x9f0>
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	4639      	mov	r1, r7
 800f8fc:	f7f1 fb5a 	bl	8000fb4 <__aeabi_d2lz>
 800f900:	f7f0 fe6c 	bl	80005dc <__aeabi_l2d>
 800f904:	4602      	mov	r2, r0
 800f906:	460b      	mov	r3, r1
 800f908:	4630      	mov	r0, r6
 800f90a:	4639      	mov	r1, r7
 800f90c:	f7f0 fcdc 	bl	80002c8 <__aeabi_dsub>
 800f910:	460b      	mov	r3, r1
 800f912:	4602      	mov	r2, r0
 800f914:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f918:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f91c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f91e:	ea46 060a 	orr.w	r6, r6, sl
 800f922:	431e      	orrs	r6, r3
 800f924:	d06f      	beq.n	800fa06 <_strtod_l+0xb86>
 800f926:	a30e      	add	r3, pc, #56	@ (adr r3, 800f960 <_strtod_l+0xae0>)
 800f928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92c:	f7f1 f8f6 	bl	8000b1c <__aeabi_dcmplt>
 800f930:	2800      	cmp	r0, #0
 800f932:	f47f acd3 	bne.w	800f2dc <_strtod_l+0x45c>
 800f936:	a30c      	add	r3, pc, #48	@ (adr r3, 800f968 <_strtod_l+0xae8>)
 800f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f93c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f940:	f7f1 f90a 	bl	8000b58 <__aeabi_dcmpgt>
 800f944:	2800      	cmp	r0, #0
 800f946:	d093      	beq.n	800f870 <_strtod_l+0x9f0>
 800f948:	e4c8      	b.n	800f2dc <_strtod_l+0x45c>
 800f94a:	bf00      	nop
 800f94c:	f3af 8000 	nop.w
 800f950:	00000000 	.word	0x00000000
 800f954:	bff00000 	.word	0xbff00000
 800f958:	00000000 	.word	0x00000000
 800f95c:	3ff00000 	.word	0x3ff00000
 800f960:	94a03595 	.word	0x94a03595
 800f964:	3fdfffff 	.word	0x3fdfffff
 800f968:	35afe535 	.word	0x35afe535
 800f96c:	3fe00000 	.word	0x3fe00000
 800f970:	000fffff 	.word	0x000fffff
 800f974:	7ff00000 	.word	0x7ff00000
 800f978:	7fefffff 	.word	0x7fefffff
 800f97c:	3ff00000 	.word	0x3ff00000
 800f980:	3fe00000 	.word	0x3fe00000
 800f984:	7fe00000 	.word	0x7fe00000
 800f988:	7c9fffff 	.word	0x7c9fffff
 800f98c:	9b08      	ldr	r3, [sp, #32]
 800f98e:	b323      	cbz	r3, 800f9da <_strtod_l+0xb5a>
 800f990:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f994:	d821      	bhi.n	800f9da <_strtod_l+0xb5a>
 800f996:	a328      	add	r3, pc, #160	@ (adr r3, 800fa38 <_strtod_l+0xbb8>)
 800f998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f99c:	4630      	mov	r0, r6
 800f99e:	4639      	mov	r1, r7
 800f9a0:	f7f1 f8c6 	bl	8000b30 <__aeabi_dcmple>
 800f9a4:	b1a0      	cbz	r0, 800f9d0 <_strtod_l+0xb50>
 800f9a6:	4639      	mov	r1, r7
 800f9a8:	4630      	mov	r0, r6
 800f9aa:	f7f1 f91d 	bl	8000be8 <__aeabi_d2uiz>
 800f9ae:	2801      	cmp	r0, #1
 800f9b0:	bf38      	it	cc
 800f9b2:	2001      	movcc	r0, #1
 800f9b4:	f7f0 fdc6 	bl	8000544 <__aeabi_ui2d>
 800f9b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9ba:	4606      	mov	r6, r0
 800f9bc:	460f      	mov	r7, r1
 800f9be:	b9fb      	cbnz	r3, 800fa00 <_strtod_l+0xb80>
 800f9c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9c4:	9014      	str	r0, [sp, #80]	@ 0x50
 800f9c6:	9315      	str	r3, [sp, #84]	@ 0x54
 800f9c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f9cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f9d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f9d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f9d6:	1b5b      	subs	r3, r3, r5
 800f9d8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f9da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f9de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f9e2:	f7ff f8ef 	bl	800ebc4 <__ulp>
 800f9e6:	4650      	mov	r0, sl
 800f9e8:	ec53 2b10 	vmov	r2, r3, d0
 800f9ec:	4659      	mov	r1, fp
 800f9ee:	f7f0 fe23 	bl	8000638 <__aeabi_dmul>
 800f9f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f9f6:	f7f0 fc69 	bl	80002cc <__adddf3>
 800f9fa:	4682      	mov	sl, r0
 800f9fc:	468b      	mov	fp, r1
 800f9fe:	e770      	b.n	800f8e2 <_strtod_l+0xa62>
 800fa00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fa04:	e7e0      	b.n	800f9c8 <_strtod_l+0xb48>
 800fa06:	a30e      	add	r3, pc, #56	@ (adr r3, 800fa40 <_strtod_l+0xbc0>)
 800fa08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0c:	f7f1 f886 	bl	8000b1c <__aeabi_dcmplt>
 800fa10:	e798      	b.n	800f944 <_strtod_l+0xac4>
 800fa12:	2300      	movs	r3, #0
 800fa14:	930e      	str	r3, [sp, #56]	@ 0x38
 800fa16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fa18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fa1a:	6013      	str	r3, [r2, #0]
 800fa1c:	f7ff ba6d 	b.w	800eefa <_strtod_l+0x7a>
 800fa20:	2a65      	cmp	r2, #101	@ 0x65
 800fa22:	f43f ab68 	beq.w	800f0f6 <_strtod_l+0x276>
 800fa26:	2a45      	cmp	r2, #69	@ 0x45
 800fa28:	f43f ab65 	beq.w	800f0f6 <_strtod_l+0x276>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	f7ff bba0 	b.w	800f172 <_strtod_l+0x2f2>
 800fa32:	bf00      	nop
 800fa34:	f3af 8000 	nop.w
 800fa38:	ffc00000 	.word	0xffc00000
 800fa3c:	41dfffff 	.word	0x41dfffff
 800fa40:	94a03595 	.word	0x94a03595
 800fa44:	3fcfffff 	.word	0x3fcfffff

0800fa48 <_strtod_r>:
 800fa48:	4b01      	ldr	r3, [pc, #4]	@ (800fa50 <_strtod_r+0x8>)
 800fa4a:	f7ff ba19 	b.w	800ee80 <_strtod_l>
 800fa4e:	bf00      	nop
 800fa50:	20000084 	.word	0x20000084

0800fa54 <_strtol_l.isra.0>:
 800fa54:	2b24      	cmp	r3, #36	@ 0x24
 800fa56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa5a:	4686      	mov	lr, r0
 800fa5c:	4690      	mov	r8, r2
 800fa5e:	d801      	bhi.n	800fa64 <_strtol_l.isra.0+0x10>
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d106      	bne.n	800fa72 <_strtol_l.isra.0+0x1e>
 800fa64:	f7fd fe5e 	bl	800d724 <__errno>
 800fa68:	2316      	movs	r3, #22
 800fa6a:	6003      	str	r3, [r0, #0]
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa72:	4834      	ldr	r0, [pc, #208]	@ (800fb44 <_strtol_l.isra.0+0xf0>)
 800fa74:	460d      	mov	r5, r1
 800fa76:	462a      	mov	r2, r5
 800fa78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa7c:	5d06      	ldrb	r6, [r0, r4]
 800fa7e:	f016 0608 	ands.w	r6, r6, #8
 800fa82:	d1f8      	bne.n	800fa76 <_strtol_l.isra.0+0x22>
 800fa84:	2c2d      	cmp	r4, #45	@ 0x2d
 800fa86:	d110      	bne.n	800faaa <_strtol_l.isra.0+0x56>
 800fa88:	782c      	ldrb	r4, [r5, #0]
 800fa8a:	2601      	movs	r6, #1
 800fa8c:	1c95      	adds	r5, r2, #2
 800fa8e:	f033 0210 	bics.w	r2, r3, #16
 800fa92:	d115      	bne.n	800fac0 <_strtol_l.isra.0+0x6c>
 800fa94:	2c30      	cmp	r4, #48	@ 0x30
 800fa96:	d10d      	bne.n	800fab4 <_strtol_l.isra.0+0x60>
 800fa98:	782a      	ldrb	r2, [r5, #0]
 800fa9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fa9e:	2a58      	cmp	r2, #88	@ 0x58
 800faa0:	d108      	bne.n	800fab4 <_strtol_l.isra.0+0x60>
 800faa2:	786c      	ldrb	r4, [r5, #1]
 800faa4:	3502      	adds	r5, #2
 800faa6:	2310      	movs	r3, #16
 800faa8:	e00a      	b.n	800fac0 <_strtol_l.isra.0+0x6c>
 800faaa:	2c2b      	cmp	r4, #43	@ 0x2b
 800faac:	bf04      	itt	eq
 800faae:	782c      	ldrbeq	r4, [r5, #0]
 800fab0:	1c95      	addeq	r5, r2, #2
 800fab2:	e7ec      	b.n	800fa8e <_strtol_l.isra.0+0x3a>
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d1f6      	bne.n	800faa6 <_strtol_l.isra.0+0x52>
 800fab8:	2c30      	cmp	r4, #48	@ 0x30
 800faba:	bf14      	ite	ne
 800fabc:	230a      	movne	r3, #10
 800fabe:	2308      	moveq	r3, #8
 800fac0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fac4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800fac8:	2200      	movs	r2, #0
 800faca:	fbbc f9f3 	udiv	r9, ip, r3
 800face:	4610      	mov	r0, r2
 800fad0:	fb03 ca19 	mls	sl, r3, r9, ip
 800fad4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fad8:	2f09      	cmp	r7, #9
 800fada:	d80f      	bhi.n	800fafc <_strtol_l.isra.0+0xa8>
 800fadc:	463c      	mov	r4, r7
 800fade:	42a3      	cmp	r3, r4
 800fae0:	dd1b      	ble.n	800fb1a <_strtol_l.isra.0+0xc6>
 800fae2:	1c57      	adds	r7, r2, #1
 800fae4:	d007      	beq.n	800faf6 <_strtol_l.isra.0+0xa2>
 800fae6:	4581      	cmp	r9, r0
 800fae8:	d314      	bcc.n	800fb14 <_strtol_l.isra.0+0xc0>
 800faea:	d101      	bne.n	800faf0 <_strtol_l.isra.0+0x9c>
 800faec:	45a2      	cmp	sl, r4
 800faee:	db11      	blt.n	800fb14 <_strtol_l.isra.0+0xc0>
 800faf0:	fb00 4003 	mla	r0, r0, r3, r4
 800faf4:	2201      	movs	r2, #1
 800faf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fafa:	e7eb      	b.n	800fad4 <_strtol_l.isra.0+0x80>
 800fafc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fb00:	2f19      	cmp	r7, #25
 800fb02:	d801      	bhi.n	800fb08 <_strtol_l.isra.0+0xb4>
 800fb04:	3c37      	subs	r4, #55	@ 0x37
 800fb06:	e7ea      	b.n	800fade <_strtol_l.isra.0+0x8a>
 800fb08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fb0c:	2f19      	cmp	r7, #25
 800fb0e:	d804      	bhi.n	800fb1a <_strtol_l.isra.0+0xc6>
 800fb10:	3c57      	subs	r4, #87	@ 0x57
 800fb12:	e7e4      	b.n	800fade <_strtol_l.isra.0+0x8a>
 800fb14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fb18:	e7ed      	b.n	800faf6 <_strtol_l.isra.0+0xa2>
 800fb1a:	1c53      	adds	r3, r2, #1
 800fb1c:	d108      	bne.n	800fb30 <_strtol_l.isra.0+0xdc>
 800fb1e:	2322      	movs	r3, #34	@ 0x22
 800fb20:	f8ce 3000 	str.w	r3, [lr]
 800fb24:	4660      	mov	r0, ip
 800fb26:	f1b8 0f00 	cmp.w	r8, #0
 800fb2a:	d0a0      	beq.n	800fa6e <_strtol_l.isra.0+0x1a>
 800fb2c:	1e69      	subs	r1, r5, #1
 800fb2e:	e006      	b.n	800fb3e <_strtol_l.isra.0+0xea>
 800fb30:	b106      	cbz	r6, 800fb34 <_strtol_l.isra.0+0xe0>
 800fb32:	4240      	negs	r0, r0
 800fb34:	f1b8 0f00 	cmp.w	r8, #0
 800fb38:	d099      	beq.n	800fa6e <_strtol_l.isra.0+0x1a>
 800fb3a:	2a00      	cmp	r2, #0
 800fb3c:	d1f6      	bne.n	800fb2c <_strtol_l.isra.0+0xd8>
 800fb3e:	f8c8 1000 	str.w	r1, [r8]
 800fb42:	e794      	b.n	800fa6e <_strtol_l.isra.0+0x1a>
 800fb44:	08013641 	.word	0x08013641

0800fb48 <_strtol_r>:
 800fb48:	f7ff bf84 	b.w	800fa54 <_strtol_l.isra.0>

0800fb4c <__ssputs_r>:
 800fb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb50:	688e      	ldr	r6, [r1, #8]
 800fb52:	461f      	mov	r7, r3
 800fb54:	42be      	cmp	r6, r7
 800fb56:	680b      	ldr	r3, [r1, #0]
 800fb58:	4682      	mov	sl, r0
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	4690      	mov	r8, r2
 800fb5e:	d82d      	bhi.n	800fbbc <__ssputs_r+0x70>
 800fb60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fb68:	d026      	beq.n	800fbb8 <__ssputs_r+0x6c>
 800fb6a:	6965      	ldr	r5, [r4, #20]
 800fb6c:	6909      	ldr	r1, [r1, #16]
 800fb6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb72:	eba3 0901 	sub.w	r9, r3, r1
 800fb76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb7a:	1c7b      	adds	r3, r7, #1
 800fb7c:	444b      	add	r3, r9
 800fb7e:	106d      	asrs	r5, r5, #1
 800fb80:	429d      	cmp	r5, r3
 800fb82:	bf38      	it	cc
 800fb84:	461d      	movcc	r5, r3
 800fb86:	0553      	lsls	r3, r2, #21
 800fb88:	d527      	bpl.n	800fbda <__ssputs_r+0x8e>
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	f7fc fcfc 	bl	800c588 <_malloc_r>
 800fb90:	4606      	mov	r6, r0
 800fb92:	b360      	cbz	r0, 800fbee <__ssputs_r+0xa2>
 800fb94:	6921      	ldr	r1, [r4, #16]
 800fb96:	464a      	mov	r2, r9
 800fb98:	f7fd fdf1 	bl	800d77e <memcpy>
 800fb9c:	89a3      	ldrh	r3, [r4, #12]
 800fb9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fba6:	81a3      	strh	r3, [r4, #12]
 800fba8:	6126      	str	r6, [r4, #16]
 800fbaa:	6165      	str	r5, [r4, #20]
 800fbac:	444e      	add	r6, r9
 800fbae:	eba5 0509 	sub.w	r5, r5, r9
 800fbb2:	6026      	str	r6, [r4, #0]
 800fbb4:	60a5      	str	r5, [r4, #8]
 800fbb6:	463e      	mov	r6, r7
 800fbb8:	42be      	cmp	r6, r7
 800fbba:	d900      	bls.n	800fbbe <__ssputs_r+0x72>
 800fbbc:	463e      	mov	r6, r7
 800fbbe:	6820      	ldr	r0, [r4, #0]
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	4641      	mov	r1, r8
 800fbc4:	f000 fd57 	bl	8010676 <memmove>
 800fbc8:	68a3      	ldr	r3, [r4, #8]
 800fbca:	1b9b      	subs	r3, r3, r6
 800fbcc:	60a3      	str	r3, [r4, #8]
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	4433      	add	r3, r6
 800fbd2:	6023      	str	r3, [r4, #0]
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbda:	462a      	mov	r2, r5
 800fbdc:	f001 f8e9 	bl	8010db2 <_realloc_r>
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d1e0      	bne.n	800fba8 <__ssputs_r+0x5c>
 800fbe6:	6921      	ldr	r1, [r4, #16]
 800fbe8:	4650      	mov	r0, sl
 800fbea:	f7fe fc35 	bl	800e458 <_free_r>
 800fbee:	230c      	movs	r3, #12
 800fbf0:	f8ca 3000 	str.w	r3, [sl]
 800fbf4:	89a3      	ldrh	r3, [r4, #12]
 800fbf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbfa:	81a3      	strh	r3, [r4, #12]
 800fbfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc00:	e7e9      	b.n	800fbd6 <__ssputs_r+0x8a>
	...

0800fc04 <_svfiprintf_r>:
 800fc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc08:	4698      	mov	r8, r3
 800fc0a:	898b      	ldrh	r3, [r1, #12]
 800fc0c:	061b      	lsls	r3, r3, #24
 800fc0e:	b09d      	sub	sp, #116	@ 0x74
 800fc10:	4607      	mov	r7, r0
 800fc12:	460d      	mov	r5, r1
 800fc14:	4614      	mov	r4, r2
 800fc16:	d510      	bpl.n	800fc3a <_svfiprintf_r+0x36>
 800fc18:	690b      	ldr	r3, [r1, #16]
 800fc1a:	b973      	cbnz	r3, 800fc3a <_svfiprintf_r+0x36>
 800fc1c:	2140      	movs	r1, #64	@ 0x40
 800fc1e:	f7fc fcb3 	bl	800c588 <_malloc_r>
 800fc22:	6028      	str	r0, [r5, #0]
 800fc24:	6128      	str	r0, [r5, #16]
 800fc26:	b930      	cbnz	r0, 800fc36 <_svfiprintf_r+0x32>
 800fc28:	230c      	movs	r3, #12
 800fc2a:	603b      	str	r3, [r7, #0]
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc30:	b01d      	add	sp, #116	@ 0x74
 800fc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc36:	2340      	movs	r3, #64	@ 0x40
 800fc38:	616b      	str	r3, [r5, #20]
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc3e:	2320      	movs	r3, #32
 800fc40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc44:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc48:	2330      	movs	r3, #48	@ 0x30
 800fc4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fde8 <_svfiprintf_r+0x1e4>
 800fc4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc52:	f04f 0901 	mov.w	r9, #1
 800fc56:	4623      	mov	r3, r4
 800fc58:	469a      	mov	sl, r3
 800fc5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc5e:	b10a      	cbz	r2, 800fc64 <_svfiprintf_r+0x60>
 800fc60:	2a25      	cmp	r2, #37	@ 0x25
 800fc62:	d1f9      	bne.n	800fc58 <_svfiprintf_r+0x54>
 800fc64:	ebba 0b04 	subs.w	fp, sl, r4
 800fc68:	d00b      	beq.n	800fc82 <_svfiprintf_r+0x7e>
 800fc6a:	465b      	mov	r3, fp
 800fc6c:	4622      	mov	r2, r4
 800fc6e:	4629      	mov	r1, r5
 800fc70:	4638      	mov	r0, r7
 800fc72:	f7ff ff6b 	bl	800fb4c <__ssputs_r>
 800fc76:	3001      	adds	r0, #1
 800fc78:	f000 80a7 	beq.w	800fdca <_svfiprintf_r+0x1c6>
 800fc7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc7e:	445a      	add	r2, fp
 800fc80:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc82:	f89a 3000 	ldrb.w	r3, [sl]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	f000 809f 	beq.w	800fdca <_svfiprintf_r+0x1c6>
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fc92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc96:	f10a 0a01 	add.w	sl, sl, #1
 800fc9a:	9304      	str	r3, [sp, #16]
 800fc9c:	9307      	str	r3, [sp, #28]
 800fc9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fca2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fca4:	4654      	mov	r4, sl
 800fca6:	2205      	movs	r2, #5
 800fca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcac:	484e      	ldr	r0, [pc, #312]	@ (800fde8 <_svfiprintf_r+0x1e4>)
 800fcae:	f7f0 faaf 	bl	8000210 <memchr>
 800fcb2:	9a04      	ldr	r2, [sp, #16]
 800fcb4:	b9d8      	cbnz	r0, 800fcee <_svfiprintf_r+0xea>
 800fcb6:	06d0      	lsls	r0, r2, #27
 800fcb8:	bf44      	itt	mi
 800fcba:	2320      	movmi	r3, #32
 800fcbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcc0:	0711      	lsls	r1, r2, #28
 800fcc2:	bf44      	itt	mi
 800fcc4:	232b      	movmi	r3, #43	@ 0x2b
 800fcc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcca:	f89a 3000 	ldrb.w	r3, [sl]
 800fcce:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcd0:	d015      	beq.n	800fcfe <_svfiprintf_r+0xfa>
 800fcd2:	9a07      	ldr	r2, [sp, #28]
 800fcd4:	4654      	mov	r4, sl
 800fcd6:	2000      	movs	r0, #0
 800fcd8:	f04f 0c0a 	mov.w	ip, #10
 800fcdc:	4621      	mov	r1, r4
 800fcde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fce2:	3b30      	subs	r3, #48	@ 0x30
 800fce4:	2b09      	cmp	r3, #9
 800fce6:	d94b      	bls.n	800fd80 <_svfiprintf_r+0x17c>
 800fce8:	b1b0      	cbz	r0, 800fd18 <_svfiprintf_r+0x114>
 800fcea:	9207      	str	r2, [sp, #28]
 800fcec:	e014      	b.n	800fd18 <_svfiprintf_r+0x114>
 800fcee:	eba0 0308 	sub.w	r3, r0, r8
 800fcf2:	fa09 f303 	lsl.w	r3, r9, r3
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	9304      	str	r3, [sp, #16]
 800fcfa:	46a2      	mov	sl, r4
 800fcfc:	e7d2      	b.n	800fca4 <_svfiprintf_r+0xa0>
 800fcfe:	9b03      	ldr	r3, [sp, #12]
 800fd00:	1d19      	adds	r1, r3, #4
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	9103      	str	r1, [sp, #12]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	bfbb      	ittet	lt
 800fd0a:	425b      	neglt	r3, r3
 800fd0c:	f042 0202 	orrlt.w	r2, r2, #2
 800fd10:	9307      	strge	r3, [sp, #28]
 800fd12:	9307      	strlt	r3, [sp, #28]
 800fd14:	bfb8      	it	lt
 800fd16:	9204      	strlt	r2, [sp, #16]
 800fd18:	7823      	ldrb	r3, [r4, #0]
 800fd1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd1c:	d10a      	bne.n	800fd34 <_svfiprintf_r+0x130>
 800fd1e:	7863      	ldrb	r3, [r4, #1]
 800fd20:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd22:	d132      	bne.n	800fd8a <_svfiprintf_r+0x186>
 800fd24:	9b03      	ldr	r3, [sp, #12]
 800fd26:	1d1a      	adds	r2, r3, #4
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	9203      	str	r2, [sp, #12]
 800fd2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd30:	3402      	adds	r4, #2
 800fd32:	9305      	str	r3, [sp, #20]
 800fd34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fdf8 <_svfiprintf_r+0x1f4>
 800fd38:	7821      	ldrb	r1, [r4, #0]
 800fd3a:	2203      	movs	r2, #3
 800fd3c:	4650      	mov	r0, sl
 800fd3e:	f7f0 fa67 	bl	8000210 <memchr>
 800fd42:	b138      	cbz	r0, 800fd54 <_svfiprintf_r+0x150>
 800fd44:	9b04      	ldr	r3, [sp, #16]
 800fd46:	eba0 000a 	sub.w	r0, r0, sl
 800fd4a:	2240      	movs	r2, #64	@ 0x40
 800fd4c:	4082      	lsls	r2, r0
 800fd4e:	4313      	orrs	r3, r2
 800fd50:	3401      	adds	r4, #1
 800fd52:	9304      	str	r3, [sp, #16]
 800fd54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd58:	4824      	ldr	r0, [pc, #144]	@ (800fdec <_svfiprintf_r+0x1e8>)
 800fd5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd5e:	2206      	movs	r2, #6
 800fd60:	f7f0 fa56 	bl	8000210 <memchr>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d036      	beq.n	800fdd6 <_svfiprintf_r+0x1d2>
 800fd68:	4b21      	ldr	r3, [pc, #132]	@ (800fdf0 <_svfiprintf_r+0x1ec>)
 800fd6a:	bb1b      	cbnz	r3, 800fdb4 <_svfiprintf_r+0x1b0>
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	3307      	adds	r3, #7
 800fd70:	f023 0307 	bic.w	r3, r3, #7
 800fd74:	3308      	adds	r3, #8
 800fd76:	9303      	str	r3, [sp, #12]
 800fd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd7a:	4433      	add	r3, r6
 800fd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd7e:	e76a      	b.n	800fc56 <_svfiprintf_r+0x52>
 800fd80:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd84:	460c      	mov	r4, r1
 800fd86:	2001      	movs	r0, #1
 800fd88:	e7a8      	b.n	800fcdc <_svfiprintf_r+0xd8>
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	3401      	adds	r4, #1
 800fd8e:	9305      	str	r3, [sp, #20]
 800fd90:	4619      	mov	r1, r3
 800fd92:	f04f 0c0a 	mov.w	ip, #10
 800fd96:	4620      	mov	r0, r4
 800fd98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd9c:	3a30      	subs	r2, #48	@ 0x30
 800fd9e:	2a09      	cmp	r2, #9
 800fda0:	d903      	bls.n	800fdaa <_svfiprintf_r+0x1a6>
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d0c6      	beq.n	800fd34 <_svfiprintf_r+0x130>
 800fda6:	9105      	str	r1, [sp, #20]
 800fda8:	e7c4      	b.n	800fd34 <_svfiprintf_r+0x130>
 800fdaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdae:	4604      	mov	r4, r0
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	e7f0      	b.n	800fd96 <_svfiprintf_r+0x192>
 800fdb4:	ab03      	add	r3, sp, #12
 800fdb6:	9300      	str	r3, [sp, #0]
 800fdb8:	462a      	mov	r2, r5
 800fdba:	4b0e      	ldr	r3, [pc, #56]	@ (800fdf4 <_svfiprintf_r+0x1f0>)
 800fdbc:	a904      	add	r1, sp, #16
 800fdbe:	4638      	mov	r0, r7
 800fdc0:	f7fc fd0e 	bl	800c7e0 <_printf_float>
 800fdc4:	1c42      	adds	r2, r0, #1
 800fdc6:	4606      	mov	r6, r0
 800fdc8:	d1d6      	bne.n	800fd78 <_svfiprintf_r+0x174>
 800fdca:	89ab      	ldrh	r3, [r5, #12]
 800fdcc:	065b      	lsls	r3, r3, #25
 800fdce:	f53f af2d 	bmi.w	800fc2c <_svfiprintf_r+0x28>
 800fdd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdd4:	e72c      	b.n	800fc30 <_svfiprintf_r+0x2c>
 800fdd6:	ab03      	add	r3, sp, #12
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	462a      	mov	r2, r5
 800fddc:	4b05      	ldr	r3, [pc, #20]	@ (800fdf4 <_svfiprintf_r+0x1f0>)
 800fdde:	a904      	add	r1, sp, #16
 800fde0:	4638      	mov	r0, r7
 800fde2:	f7fc ff95 	bl	800cd10 <_printf_i>
 800fde6:	e7ed      	b.n	800fdc4 <_svfiprintf_r+0x1c0>
 800fde8:	0801341f 	.word	0x0801341f
 800fdec:	08013429 	.word	0x08013429
 800fdf0:	0800c7e1 	.word	0x0800c7e1
 800fdf4:	0800fb4d 	.word	0x0800fb4d
 800fdf8:	08013425 	.word	0x08013425

0800fdfc <_sungetc_r>:
 800fdfc:	b538      	push	{r3, r4, r5, lr}
 800fdfe:	1c4b      	adds	r3, r1, #1
 800fe00:	4614      	mov	r4, r2
 800fe02:	d103      	bne.n	800fe0c <_sungetc_r+0x10>
 800fe04:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800fe08:	4628      	mov	r0, r5
 800fe0a:	bd38      	pop	{r3, r4, r5, pc}
 800fe0c:	8993      	ldrh	r3, [r2, #12]
 800fe0e:	f023 0320 	bic.w	r3, r3, #32
 800fe12:	8193      	strh	r3, [r2, #12]
 800fe14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe16:	6852      	ldr	r2, [r2, #4]
 800fe18:	b2cd      	uxtb	r5, r1
 800fe1a:	b18b      	cbz	r3, 800fe40 <_sungetc_r+0x44>
 800fe1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	dd08      	ble.n	800fe34 <_sungetc_r+0x38>
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	1e5a      	subs	r2, r3, #1
 800fe26:	6022      	str	r2, [r4, #0]
 800fe28:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fe2c:	6863      	ldr	r3, [r4, #4]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	6063      	str	r3, [r4, #4]
 800fe32:	e7e9      	b.n	800fe08 <_sungetc_r+0xc>
 800fe34:	4621      	mov	r1, r4
 800fe36:	f000 fbe4 	bl	8010602 <__submore>
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	d0f1      	beq.n	800fe22 <_sungetc_r+0x26>
 800fe3e:	e7e1      	b.n	800fe04 <_sungetc_r+0x8>
 800fe40:	6921      	ldr	r1, [r4, #16]
 800fe42:	6823      	ldr	r3, [r4, #0]
 800fe44:	b151      	cbz	r1, 800fe5c <_sungetc_r+0x60>
 800fe46:	4299      	cmp	r1, r3
 800fe48:	d208      	bcs.n	800fe5c <_sungetc_r+0x60>
 800fe4a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fe4e:	42a9      	cmp	r1, r5
 800fe50:	d104      	bne.n	800fe5c <_sungetc_r+0x60>
 800fe52:	3b01      	subs	r3, #1
 800fe54:	3201      	adds	r2, #1
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	6062      	str	r2, [r4, #4]
 800fe5a:	e7d5      	b.n	800fe08 <_sungetc_r+0xc>
 800fe5c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800fe60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe64:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe66:	2303      	movs	r3, #3
 800fe68:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fe6a:	4623      	mov	r3, r4
 800fe6c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	2301      	movs	r3, #1
 800fe74:	e7dc      	b.n	800fe30 <_sungetc_r+0x34>

0800fe76 <__ssrefill_r>:
 800fe76:	b510      	push	{r4, lr}
 800fe78:	460c      	mov	r4, r1
 800fe7a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fe7c:	b169      	cbz	r1, 800fe9a <__ssrefill_r+0x24>
 800fe7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe82:	4299      	cmp	r1, r3
 800fe84:	d001      	beq.n	800fe8a <__ssrefill_r+0x14>
 800fe86:	f7fe fae7 	bl	800e458 <_free_r>
 800fe8a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe8c:	6063      	str	r3, [r4, #4]
 800fe8e:	2000      	movs	r0, #0
 800fe90:	6360      	str	r0, [r4, #52]	@ 0x34
 800fe92:	b113      	cbz	r3, 800fe9a <__ssrefill_r+0x24>
 800fe94:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fe96:	6023      	str	r3, [r4, #0]
 800fe98:	bd10      	pop	{r4, pc}
 800fe9a:	6923      	ldr	r3, [r4, #16]
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	6063      	str	r3, [r4, #4]
 800fea2:	89a3      	ldrh	r3, [r4, #12]
 800fea4:	f043 0320 	orr.w	r3, r3, #32
 800fea8:	81a3      	strh	r3, [r4, #12]
 800feaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800feae:	e7f3      	b.n	800fe98 <__ssrefill_r+0x22>

0800feb0 <__ssvfiscanf_r>:
 800feb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	460c      	mov	r4, r1
 800feb6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800feba:	2100      	movs	r1, #0
 800febc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800fec0:	49a6      	ldr	r1, [pc, #664]	@ (801015c <__ssvfiscanf_r+0x2ac>)
 800fec2:	91a0      	str	r1, [sp, #640]	@ 0x280
 800fec4:	f10d 0804 	add.w	r8, sp, #4
 800fec8:	49a5      	ldr	r1, [pc, #660]	@ (8010160 <__ssvfiscanf_r+0x2b0>)
 800feca:	4fa6      	ldr	r7, [pc, #664]	@ (8010164 <__ssvfiscanf_r+0x2b4>)
 800fecc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800fed0:	4606      	mov	r6, r0
 800fed2:	91a1      	str	r1, [sp, #644]	@ 0x284
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	f892 9000 	ldrb.w	r9, [r2]
 800feda:	f1b9 0f00 	cmp.w	r9, #0
 800fede:	f000 8158 	beq.w	8010192 <__ssvfiscanf_r+0x2e2>
 800fee2:	f817 3009 	ldrb.w	r3, [r7, r9]
 800fee6:	f013 0308 	ands.w	r3, r3, #8
 800feea:	f102 0501 	add.w	r5, r2, #1
 800feee:	d019      	beq.n	800ff24 <__ssvfiscanf_r+0x74>
 800fef0:	6863      	ldr	r3, [r4, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	dd0f      	ble.n	800ff16 <__ssvfiscanf_r+0x66>
 800fef6:	6823      	ldr	r3, [r4, #0]
 800fef8:	781a      	ldrb	r2, [r3, #0]
 800fefa:	5cba      	ldrb	r2, [r7, r2]
 800fefc:	0712      	lsls	r2, r2, #28
 800fefe:	d401      	bmi.n	800ff04 <__ssvfiscanf_r+0x54>
 800ff00:	462a      	mov	r2, r5
 800ff02:	e7e8      	b.n	800fed6 <__ssvfiscanf_r+0x26>
 800ff04:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ff06:	3201      	adds	r2, #1
 800ff08:	9245      	str	r2, [sp, #276]	@ 0x114
 800ff0a:	6862      	ldr	r2, [r4, #4]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	3a01      	subs	r2, #1
 800ff10:	6062      	str	r2, [r4, #4]
 800ff12:	6023      	str	r3, [r4, #0]
 800ff14:	e7ec      	b.n	800fef0 <__ssvfiscanf_r+0x40>
 800ff16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ff18:	4621      	mov	r1, r4
 800ff1a:	4630      	mov	r0, r6
 800ff1c:	4798      	blx	r3
 800ff1e:	2800      	cmp	r0, #0
 800ff20:	d0e9      	beq.n	800fef6 <__ssvfiscanf_r+0x46>
 800ff22:	e7ed      	b.n	800ff00 <__ssvfiscanf_r+0x50>
 800ff24:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800ff28:	f040 8085 	bne.w	8010036 <__ssvfiscanf_r+0x186>
 800ff2c:	9341      	str	r3, [sp, #260]	@ 0x104
 800ff2e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800ff30:	7853      	ldrb	r3, [r2, #1]
 800ff32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff34:	bf02      	ittt	eq
 800ff36:	2310      	moveq	r3, #16
 800ff38:	1c95      	addeq	r5, r2, #2
 800ff3a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800ff3c:	220a      	movs	r2, #10
 800ff3e:	46aa      	mov	sl, r5
 800ff40:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800ff44:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800ff48:	2b09      	cmp	r3, #9
 800ff4a:	d91e      	bls.n	800ff8a <__ssvfiscanf_r+0xda>
 800ff4c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8010168 <__ssvfiscanf_r+0x2b8>
 800ff50:	2203      	movs	r2, #3
 800ff52:	4658      	mov	r0, fp
 800ff54:	f7f0 f95c 	bl	8000210 <memchr>
 800ff58:	b138      	cbz	r0, 800ff6a <__ssvfiscanf_r+0xba>
 800ff5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ff5c:	eba0 000b 	sub.w	r0, r0, fp
 800ff60:	2301      	movs	r3, #1
 800ff62:	4083      	lsls	r3, r0
 800ff64:	4313      	orrs	r3, r2
 800ff66:	9341      	str	r3, [sp, #260]	@ 0x104
 800ff68:	4655      	mov	r5, sl
 800ff6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff6e:	2b78      	cmp	r3, #120	@ 0x78
 800ff70:	d806      	bhi.n	800ff80 <__ssvfiscanf_r+0xd0>
 800ff72:	2b57      	cmp	r3, #87	@ 0x57
 800ff74:	d810      	bhi.n	800ff98 <__ssvfiscanf_r+0xe8>
 800ff76:	2b25      	cmp	r3, #37	@ 0x25
 800ff78:	d05d      	beq.n	8010036 <__ssvfiscanf_r+0x186>
 800ff7a:	d857      	bhi.n	801002c <__ssvfiscanf_r+0x17c>
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d075      	beq.n	801006c <__ssvfiscanf_r+0x1bc>
 800ff80:	2303      	movs	r3, #3
 800ff82:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ff84:	230a      	movs	r3, #10
 800ff86:	9342      	str	r3, [sp, #264]	@ 0x108
 800ff88:	e088      	b.n	801009c <__ssvfiscanf_r+0x1ec>
 800ff8a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ff8c:	fb02 1103 	mla	r1, r2, r3, r1
 800ff90:	3930      	subs	r1, #48	@ 0x30
 800ff92:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ff94:	4655      	mov	r5, sl
 800ff96:	e7d2      	b.n	800ff3e <__ssvfiscanf_r+0x8e>
 800ff98:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ff9c:	2a20      	cmp	r2, #32
 800ff9e:	d8ef      	bhi.n	800ff80 <__ssvfiscanf_r+0xd0>
 800ffa0:	a101      	add	r1, pc, #4	@ (adr r1, 800ffa8 <__ssvfiscanf_r+0xf8>)
 800ffa2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ffa6:	bf00      	nop
 800ffa8:	0801007b 	.word	0x0801007b
 800ffac:	0800ff81 	.word	0x0800ff81
 800ffb0:	0800ff81 	.word	0x0800ff81
 800ffb4:	080100d5 	.word	0x080100d5
 800ffb8:	0800ff81 	.word	0x0800ff81
 800ffbc:	0800ff81 	.word	0x0800ff81
 800ffc0:	0800ff81 	.word	0x0800ff81
 800ffc4:	0800ff81 	.word	0x0800ff81
 800ffc8:	0800ff81 	.word	0x0800ff81
 800ffcc:	0800ff81 	.word	0x0800ff81
 800ffd0:	0800ff81 	.word	0x0800ff81
 800ffd4:	080100eb 	.word	0x080100eb
 800ffd8:	080100d1 	.word	0x080100d1
 800ffdc:	08010033 	.word	0x08010033
 800ffe0:	08010033 	.word	0x08010033
 800ffe4:	08010033 	.word	0x08010033
 800ffe8:	0800ff81 	.word	0x0800ff81
 800ffec:	0801008d 	.word	0x0801008d
 800fff0:	0800ff81 	.word	0x0800ff81
 800fff4:	0800ff81 	.word	0x0800ff81
 800fff8:	0800ff81 	.word	0x0800ff81
 800fffc:	0800ff81 	.word	0x0800ff81
 8010000:	080100fb 	.word	0x080100fb
 8010004:	08010095 	.word	0x08010095
 8010008:	08010073 	.word	0x08010073
 801000c:	0800ff81 	.word	0x0800ff81
 8010010:	0800ff81 	.word	0x0800ff81
 8010014:	080100f7 	.word	0x080100f7
 8010018:	0800ff81 	.word	0x0800ff81
 801001c:	080100d1 	.word	0x080100d1
 8010020:	0800ff81 	.word	0x0800ff81
 8010024:	0800ff81 	.word	0x0800ff81
 8010028:	0801007b 	.word	0x0801007b
 801002c:	3b45      	subs	r3, #69	@ 0x45
 801002e:	2b02      	cmp	r3, #2
 8010030:	d8a6      	bhi.n	800ff80 <__ssvfiscanf_r+0xd0>
 8010032:	2305      	movs	r3, #5
 8010034:	e031      	b.n	801009a <__ssvfiscanf_r+0x1ea>
 8010036:	6863      	ldr	r3, [r4, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	dd0d      	ble.n	8010058 <__ssvfiscanf_r+0x1a8>
 801003c:	6823      	ldr	r3, [r4, #0]
 801003e:	781a      	ldrb	r2, [r3, #0]
 8010040:	454a      	cmp	r2, r9
 8010042:	f040 80a6 	bne.w	8010192 <__ssvfiscanf_r+0x2e2>
 8010046:	3301      	adds	r3, #1
 8010048:	6862      	ldr	r2, [r4, #4]
 801004a:	6023      	str	r3, [r4, #0]
 801004c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801004e:	3a01      	subs	r2, #1
 8010050:	3301      	adds	r3, #1
 8010052:	6062      	str	r2, [r4, #4]
 8010054:	9345      	str	r3, [sp, #276]	@ 0x114
 8010056:	e753      	b.n	800ff00 <__ssvfiscanf_r+0x50>
 8010058:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801005a:	4621      	mov	r1, r4
 801005c:	4630      	mov	r0, r6
 801005e:	4798      	blx	r3
 8010060:	2800      	cmp	r0, #0
 8010062:	d0eb      	beq.n	801003c <__ssvfiscanf_r+0x18c>
 8010064:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010066:	2800      	cmp	r0, #0
 8010068:	f040 808b 	bne.w	8010182 <__ssvfiscanf_r+0x2d2>
 801006c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010070:	e08b      	b.n	801018a <__ssvfiscanf_r+0x2da>
 8010072:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010074:	f042 0220 	orr.w	r2, r2, #32
 8010078:	9241      	str	r2, [sp, #260]	@ 0x104
 801007a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801007c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010080:	9241      	str	r2, [sp, #260]	@ 0x104
 8010082:	2210      	movs	r2, #16
 8010084:	2b6e      	cmp	r3, #110	@ 0x6e
 8010086:	9242      	str	r2, [sp, #264]	@ 0x108
 8010088:	d902      	bls.n	8010090 <__ssvfiscanf_r+0x1e0>
 801008a:	e005      	b.n	8010098 <__ssvfiscanf_r+0x1e8>
 801008c:	2300      	movs	r3, #0
 801008e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010090:	2303      	movs	r3, #3
 8010092:	e002      	b.n	801009a <__ssvfiscanf_r+0x1ea>
 8010094:	2308      	movs	r3, #8
 8010096:	9342      	str	r3, [sp, #264]	@ 0x108
 8010098:	2304      	movs	r3, #4
 801009a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801009c:	6863      	ldr	r3, [r4, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	dd39      	ble.n	8010116 <__ssvfiscanf_r+0x266>
 80100a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80100a4:	0659      	lsls	r1, r3, #25
 80100a6:	d404      	bmi.n	80100b2 <__ssvfiscanf_r+0x202>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	781a      	ldrb	r2, [r3, #0]
 80100ac:	5cba      	ldrb	r2, [r7, r2]
 80100ae:	0712      	lsls	r2, r2, #28
 80100b0:	d438      	bmi.n	8010124 <__ssvfiscanf_r+0x274>
 80100b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80100b4:	2b02      	cmp	r3, #2
 80100b6:	dc47      	bgt.n	8010148 <__ssvfiscanf_r+0x298>
 80100b8:	466b      	mov	r3, sp
 80100ba:	4622      	mov	r2, r4
 80100bc:	a941      	add	r1, sp, #260	@ 0x104
 80100be:	4630      	mov	r0, r6
 80100c0:	f000 f86c 	bl	801019c <_scanf_chars>
 80100c4:	2801      	cmp	r0, #1
 80100c6:	d064      	beq.n	8010192 <__ssvfiscanf_r+0x2e2>
 80100c8:	2802      	cmp	r0, #2
 80100ca:	f47f af19 	bne.w	800ff00 <__ssvfiscanf_r+0x50>
 80100ce:	e7c9      	b.n	8010064 <__ssvfiscanf_r+0x1b4>
 80100d0:	220a      	movs	r2, #10
 80100d2:	e7d7      	b.n	8010084 <__ssvfiscanf_r+0x1d4>
 80100d4:	4629      	mov	r1, r5
 80100d6:	4640      	mov	r0, r8
 80100d8:	f000 fa5a 	bl	8010590 <__sccl>
 80100dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80100de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80100e4:	4605      	mov	r5, r0
 80100e6:	2301      	movs	r3, #1
 80100e8:	e7d7      	b.n	801009a <__ssvfiscanf_r+0x1ea>
 80100ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80100ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80100f2:	2300      	movs	r3, #0
 80100f4:	e7d1      	b.n	801009a <__ssvfiscanf_r+0x1ea>
 80100f6:	2302      	movs	r3, #2
 80100f8:	e7cf      	b.n	801009a <__ssvfiscanf_r+0x1ea>
 80100fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80100fc:	06c3      	lsls	r3, r0, #27
 80100fe:	f53f aeff 	bmi.w	800ff00 <__ssvfiscanf_r+0x50>
 8010102:	9b00      	ldr	r3, [sp, #0]
 8010104:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010106:	1d19      	adds	r1, r3, #4
 8010108:	9100      	str	r1, [sp, #0]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	07c0      	lsls	r0, r0, #31
 801010e:	bf4c      	ite	mi
 8010110:	801a      	strhmi	r2, [r3, #0]
 8010112:	601a      	strpl	r2, [r3, #0]
 8010114:	e6f4      	b.n	800ff00 <__ssvfiscanf_r+0x50>
 8010116:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010118:	4621      	mov	r1, r4
 801011a:	4630      	mov	r0, r6
 801011c:	4798      	blx	r3
 801011e:	2800      	cmp	r0, #0
 8010120:	d0bf      	beq.n	80100a2 <__ssvfiscanf_r+0x1f2>
 8010122:	e79f      	b.n	8010064 <__ssvfiscanf_r+0x1b4>
 8010124:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010126:	3201      	adds	r2, #1
 8010128:	9245      	str	r2, [sp, #276]	@ 0x114
 801012a:	6862      	ldr	r2, [r4, #4]
 801012c:	3a01      	subs	r2, #1
 801012e:	2a00      	cmp	r2, #0
 8010130:	6062      	str	r2, [r4, #4]
 8010132:	dd02      	ble.n	801013a <__ssvfiscanf_r+0x28a>
 8010134:	3301      	adds	r3, #1
 8010136:	6023      	str	r3, [r4, #0]
 8010138:	e7b6      	b.n	80100a8 <__ssvfiscanf_r+0x1f8>
 801013a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801013c:	4621      	mov	r1, r4
 801013e:	4630      	mov	r0, r6
 8010140:	4798      	blx	r3
 8010142:	2800      	cmp	r0, #0
 8010144:	d0b0      	beq.n	80100a8 <__ssvfiscanf_r+0x1f8>
 8010146:	e78d      	b.n	8010064 <__ssvfiscanf_r+0x1b4>
 8010148:	2b04      	cmp	r3, #4
 801014a:	dc0f      	bgt.n	801016c <__ssvfiscanf_r+0x2bc>
 801014c:	466b      	mov	r3, sp
 801014e:	4622      	mov	r2, r4
 8010150:	a941      	add	r1, sp, #260	@ 0x104
 8010152:	4630      	mov	r0, r6
 8010154:	f000 f87c 	bl	8010250 <_scanf_i>
 8010158:	e7b4      	b.n	80100c4 <__ssvfiscanf_r+0x214>
 801015a:	bf00      	nop
 801015c:	0800fdfd 	.word	0x0800fdfd
 8010160:	0800fe77 	.word	0x0800fe77
 8010164:	08013641 	.word	0x08013641
 8010168:	08013425 	.word	0x08013425
 801016c:	4b0a      	ldr	r3, [pc, #40]	@ (8010198 <__ssvfiscanf_r+0x2e8>)
 801016e:	2b00      	cmp	r3, #0
 8010170:	f43f aec6 	beq.w	800ff00 <__ssvfiscanf_r+0x50>
 8010174:	466b      	mov	r3, sp
 8010176:	4622      	mov	r2, r4
 8010178:	a941      	add	r1, sp, #260	@ 0x104
 801017a:	4630      	mov	r0, r6
 801017c:	f7fc fee6 	bl	800cf4c <_scanf_float>
 8010180:	e7a0      	b.n	80100c4 <__ssvfiscanf_r+0x214>
 8010182:	89a3      	ldrh	r3, [r4, #12]
 8010184:	065b      	lsls	r3, r3, #25
 8010186:	f53f af71 	bmi.w	801006c <__ssvfiscanf_r+0x1bc>
 801018a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801018e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010192:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010194:	e7f9      	b.n	801018a <__ssvfiscanf_r+0x2da>
 8010196:	bf00      	nop
 8010198:	0800cf4d 	.word	0x0800cf4d

0801019c <_scanf_chars>:
 801019c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101a0:	4615      	mov	r5, r2
 80101a2:	688a      	ldr	r2, [r1, #8]
 80101a4:	4680      	mov	r8, r0
 80101a6:	460c      	mov	r4, r1
 80101a8:	b932      	cbnz	r2, 80101b8 <_scanf_chars+0x1c>
 80101aa:	698a      	ldr	r2, [r1, #24]
 80101ac:	2a00      	cmp	r2, #0
 80101ae:	bf14      	ite	ne
 80101b0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80101b4:	2201      	moveq	r2, #1
 80101b6:	608a      	str	r2, [r1, #8]
 80101b8:	6822      	ldr	r2, [r4, #0]
 80101ba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801024c <_scanf_chars+0xb0>
 80101be:	06d1      	lsls	r1, r2, #27
 80101c0:	bf5f      	itttt	pl
 80101c2:	681a      	ldrpl	r2, [r3, #0]
 80101c4:	1d11      	addpl	r1, r2, #4
 80101c6:	6019      	strpl	r1, [r3, #0]
 80101c8:	6816      	ldrpl	r6, [r2, #0]
 80101ca:	2700      	movs	r7, #0
 80101cc:	69a0      	ldr	r0, [r4, #24]
 80101ce:	b188      	cbz	r0, 80101f4 <_scanf_chars+0x58>
 80101d0:	2801      	cmp	r0, #1
 80101d2:	d107      	bne.n	80101e4 <_scanf_chars+0x48>
 80101d4:	682b      	ldr	r3, [r5, #0]
 80101d6:	781a      	ldrb	r2, [r3, #0]
 80101d8:	6963      	ldr	r3, [r4, #20]
 80101da:	5c9b      	ldrb	r3, [r3, r2]
 80101dc:	b953      	cbnz	r3, 80101f4 <_scanf_chars+0x58>
 80101de:	2f00      	cmp	r7, #0
 80101e0:	d031      	beq.n	8010246 <_scanf_chars+0xaa>
 80101e2:	e022      	b.n	801022a <_scanf_chars+0x8e>
 80101e4:	2802      	cmp	r0, #2
 80101e6:	d120      	bne.n	801022a <_scanf_chars+0x8e>
 80101e8:	682b      	ldr	r3, [r5, #0]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80101f0:	071b      	lsls	r3, r3, #28
 80101f2:	d41a      	bmi.n	801022a <_scanf_chars+0x8e>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	06da      	lsls	r2, r3, #27
 80101f8:	bf5e      	ittt	pl
 80101fa:	682b      	ldrpl	r3, [r5, #0]
 80101fc:	781b      	ldrbpl	r3, [r3, #0]
 80101fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010202:	682a      	ldr	r2, [r5, #0]
 8010204:	686b      	ldr	r3, [r5, #4]
 8010206:	3201      	adds	r2, #1
 8010208:	602a      	str	r2, [r5, #0]
 801020a:	68a2      	ldr	r2, [r4, #8]
 801020c:	3b01      	subs	r3, #1
 801020e:	3a01      	subs	r2, #1
 8010210:	606b      	str	r3, [r5, #4]
 8010212:	3701      	adds	r7, #1
 8010214:	60a2      	str	r2, [r4, #8]
 8010216:	b142      	cbz	r2, 801022a <_scanf_chars+0x8e>
 8010218:	2b00      	cmp	r3, #0
 801021a:	dcd7      	bgt.n	80101cc <_scanf_chars+0x30>
 801021c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010220:	4629      	mov	r1, r5
 8010222:	4640      	mov	r0, r8
 8010224:	4798      	blx	r3
 8010226:	2800      	cmp	r0, #0
 8010228:	d0d0      	beq.n	80101cc <_scanf_chars+0x30>
 801022a:	6823      	ldr	r3, [r4, #0]
 801022c:	f013 0310 	ands.w	r3, r3, #16
 8010230:	d105      	bne.n	801023e <_scanf_chars+0xa2>
 8010232:	68e2      	ldr	r2, [r4, #12]
 8010234:	3201      	adds	r2, #1
 8010236:	60e2      	str	r2, [r4, #12]
 8010238:	69a2      	ldr	r2, [r4, #24]
 801023a:	b102      	cbz	r2, 801023e <_scanf_chars+0xa2>
 801023c:	7033      	strb	r3, [r6, #0]
 801023e:	6923      	ldr	r3, [r4, #16]
 8010240:	443b      	add	r3, r7
 8010242:	6123      	str	r3, [r4, #16]
 8010244:	2000      	movs	r0, #0
 8010246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801024a:	bf00      	nop
 801024c:	08013641 	.word	0x08013641

08010250 <_scanf_i>:
 8010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	4698      	mov	r8, r3
 8010256:	4b74      	ldr	r3, [pc, #464]	@ (8010428 <_scanf_i+0x1d8>)
 8010258:	460c      	mov	r4, r1
 801025a:	4682      	mov	sl, r0
 801025c:	4616      	mov	r6, r2
 801025e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010262:	b087      	sub	sp, #28
 8010264:	ab03      	add	r3, sp, #12
 8010266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801026a:	4b70      	ldr	r3, [pc, #448]	@ (801042c <_scanf_i+0x1dc>)
 801026c:	69a1      	ldr	r1, [r4, #24]
 801026e:	4a70      	ldr	r2, [pc, #448]	@ (8010430 <_scanf_i+0x1e0>)
 8010270:	2903      	cmp	r1, #3
 8010272:	bf08      	it	eq
 8010274:	461a      	moveq	r2, r3
 8010276:	68a3      	ldr	r3, [r4, #8]
 8010278:	9201      	str	r2, [sp, #4]
 801027a:	1e5a      	subs	r2, r3, #1
 801027c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010280:	bf88      	it	hi
 8010282:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010286:	4627      	mov	r7, r4
 8010288:	bf82      	ittt	hi
 801028a:	eb03 0905 	addhi.w	r9, r3, r5
 801028e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010292:	60a3      	strhi	r3, [r4, #8]
 8010294:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010298:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801029c:	bf98      	it	ls
 801029e:	f04f 0900 	movls.w	r9, #0
 80102a2:	6023      	str	r3, [r4, #0]
 80102a4:	463d      	mov	r5, r7
 80102a6:	f04f 0b00 	mov.w	fp, #0
 80102aa:	6831      	ldr	r1, [r6, #0]
 80102ac:	ab03      	add	r3, sp, #12
 80102ae:	7809      	ldrb	r1, [r1, #0]
 80102b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80102b4:	2202      	movs	r2, #2
 80102b6:	f7ef ffab 	bl	8000210 <memchr>
 80102ba:	b328      	cbz	r0, 8010308 <_scanf_i+0xb8>
 80102bc:	f1bb 0f01 	cmp.w	fp, #1
 80102c0:	d159      	bne.n	8010376 <_scanf_i+0x126>
 80102c2:	6862      	ldr	r2, [r4, #4]
 80102c4:	b92a      	cbnz	r2, 80102d2 <_scanf_i+0x82>
 80102c6:	6822      	ldr	r2, [r4, #0]
 80102c8:	2108      	movs	r1, #8
 80102ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102ce:	6061      	str	r1, [r4, #4]
 80102d0:	6022      	str	r2, [r4, #0]
 80102d2:	6822      	ldr	r2, [r4, #0]
 80102d4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80102d8:	6022      	str	r2, [r4, #0]
 80102da:	68a2      	ldr	r2, [r4, #8]
 80102dc:	1e51      	subs	r1, r2, #1
 80102de:	60a1      	str	r1, [r4, #8]
 80102e0:	b192      	cbz	r2, 8010308 <_scanf_i+0xb8>
 80102e2:	6832      	ldr	r2, [r6, #0]
 80102e4:	1c51      	adds	r1, r2, #1
 80102e6:	6031      	str	r1, [r6, #0]
 80102e8:	7812      	ldrb	r2, [r2, #0]
 80102ea:	f805 2b01 	strb.w	r2, [r5], #1
 80102ee:	6872      	ldr	r2, [r6, #4]
 80102f0:	3a01      	subs	r2, #1
 80102f2:	2a00      	cmp	r2, #0
 80102f4:	6072      	str	r2, [r6, #4]
 80102f6:	dc07      	bgt.n	8010308 <_scanf_i+0xb8>
 80102f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80102fc:	4631      	mov	r1, r6
 80102fe:	4650      	mov	r0, sl
 8010300:	4790      	blx	r2
 8010302:	2800      	cmp	r0, #0
 8010304:	f040 8085 	bne.w	8010412 <_scanf_i+0x1c2>
 8010308:	f10b 0b01 	add.w	fp, fp, #1
 801030c:	f1bb 0f03 	cmp.w	fp, #3
 8010310:	d1cb      	bne.n	80102aa <_scanf_i+0x5a>
 8010312:	6863      	ldr	r3, [r4, #4]
 8010314:	b90b      	cbnz	r3, 801031a <_scanf_i+0xca>
 8010316:	230a      	movs	r3, #10
 8010318:	6063      	str	r3, [r4, #4]
 801031a:	6863      	ldr	r3, [r4, #4]
 801031c:	4945      	ldr	r1, [pc, #276]	@ (8010434 <_scanf_i+0x1e4>)
 801031e:	6960      	ldr	r0, [r4, #20]
 8010320:	1ac9      	subs	r1, r1, r3
 8010322:	f000 f935 	bl	8010590 <__sccl>
 8010326:	f04f 0b00 	mov.w	fp, #0
 801032a:	68a3      	ldr	r3, [r4, #8]
 801032c:	6822      	ldr	r2, [r4, #0]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d03d      	beq.n	80103ae <_scanf_i+0x15e>
 8010332:	6831      	ldr	r1, [r6, #0]
 8010334:	6960      	ldr	r0, [r4, #20]
 8010336:	f891 c000 	ldrb.w	ip, [r1]
 801033a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801033e:	2800      	cmp	r0, #0
 8010340:	d035      	beq.n	80103ae <_scanf_i+0x15e>
 8010342:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010346:	d124      	bne.n	8010392 <_scanf_i+0x142>
 8010348:	0510      	lsls	r0, r2, #20
 801034a:	d522      	bpl.n	8010392 <_scanf_i+0x142>
 801034c:	f10b 0b01 	add.w	fp, fp, #1
 8010350:	f1b9 0f00 	cmp.w	r9, #0
 8010354:	d003      	beq.n	801035e <_scanf_i+0x10e>
 8010356:	3301      	adds	r3, #1
 8010358:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801035c:	60a3      	str	r3, [r4, #8]
 801035e:	6873      	ldr	r3, [r6, #4]
 8010360:	3b01      	subs	r3, #1
 8010362:	2b00      	cmp	r3, #0
 8010364:	6073      	str	r3, [r6, #4]
 8010366:	dd1b      	ble.n	80103a0 <_scanf_i+0x150>
 8010368:	6833      	ldr	r3, [r6, #0]
 801036a:	3301      	adds	r3, #1
 801036c:	6033      	str	r3, [r6, #0]
 801036e:	68a3      	ldr	r3, [r4, #8]
 8010370:	3b01      	subs	r3, #1
 8010372:	60a3      	str	r3, [r4, #8]
 8010374:	e7d9      	b.n	801032a <_scanf_i+0xda>
 8010376:	f1bb 0f02 	cmp.w	fp, #2
 801037a:	d1ae      	bne.n	80102da <_scanf_i+0x8a>
 801037c:	6822      	ldr	r2, [r4, #0]
 801037e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010382:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010386:	d1c4      	bne.n	8010312 <_scanf_i+0xc2>
 8010388:	2110      	movs	r1, #16
 801038a:	6061      	str	r1, [r4, #4]
 801038c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010390:	e7a2      	b.n	80102d8 <_scanf_i+0x88>
 8010392:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010396:	6022      	str	r2, [r4, #0]
 8010398:	780b      	ldrb	r3, [r1, #0]
 801039a:	f805 3b01 	strb.w	r3, [r5], #1
 801039e:	e7de      	b.n	801035e <_scanf_i+0x10e>
 80103a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80103a4:	4631      	mov	r1, r6
 80103a6:	4650      	mov	r0, sl
 80103a8:	4798      	blx	r3
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d0df      	beq.n	801036e <_scanf_i+0x11e>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	05d9      	lsls	r1, r3, #23
 80103b2:	d50d      	bpl.n	80103d0 <_scanf_i+0x180>
 80103b4:	42bd      	cmp	r5, r7
 80103b6:	d909      	bls.n	80103cc <_scanf_i+0x17c>
 80103b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80103bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80103c0:	4632      	mov	r2, r6
 80103c2:	4650      	mov	r0, sl
 80103c4:	4798      	blx	r3
 80103c6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80103ca:	464d      	mov	r5, r9
 80103cc:	42bd      	cmp	r5, r7
 80103ce:	d028      	beq.n	8010422 <_scanf_i+0x1d2>
 80103d0:	6822      	ldr	r2, [r4, #0]
 80103d2:	f012 0210 	ands.w	r2, r2, #16
 80103d6:	d113      	bne.n	8010400 <_scanf_i+0x1b0>
 80103d8:	702a      	strb	r2, [r5, #0]
 80103da:	6863      	ldr	r3, [r4, #4]
 80103dc:	9e01      	ldr	r6, [sp, #4]
 80103de:	4639      	mov	r1, r7
 80103e0:	4650      	mov	r0, sl
 80103e2:	47b0      	blx	r6
 80103e4:	f8d8 3000 	ldr.w	r3, [r8]
 80103e8:	6821      	ldr	r1, [r4, #0]
 80103ea:	1d1a      	adds	r2, r3, #4
 80103ec:	f8c8 2000 	str.w	r2, [r8]
 80103f0:	f011 0f20 	tst.w	r1, #32
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	d00f      	beq.n	8010418 <_scanf_i+0x1c8>
 80103f8:	6018      	str	r0, [r3, #0]
 80103fa:	68e3      	ldr	r3, [r4, #12]
 80103fc:	3301      	adds	r3, #1
 80103fe:	60e3      	str	r3, [r4, #12]
 8010400:	6923      	ldr	r3, [r4, #16]
 8010402:	1bed      	subs	r5, r5, r7
 8010404:	445d      	add	r5, fp
 8010406:	442b      	add	r3, r5
 8010408:	6123      	str	r3, [r4, #16]
 801040a:	2000      	movs	r0, #0
 801040c:	b007      	add	sp, #28
 801040e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010412:	f04f 0b00 	mov.w	fp, #0
 8010416:	e7ca      	b.n	80103ae <_scanf_i+0x15e>
 8010418:	07ca      	lsls	r2, r1, #31
 801041a:	bf4c      	ite	mi
 801041c:	8018      	strhmi	r0, [r3, #0]
 801041e:	6018      	strpl	r0, [r3, #0]
 8010420:	e7eb      	b.n	80103fa <_scanf_i+0x1aa>
 8010422:	2001      	movs	r0, #1
 8010424:	e7f2      	b.n	801040c <_scanf_i+0x1bc>
 8010426:	bf00      	nop
 8010428:	080132d4 	.word	0x080132d4
 801042c:	0800fb49 	.word	0x0800fb49
 8010430:	08010eed 	.word	0x08010eed
 8010434:	08013440 	.word	0x08013440

08010438 <__sflush_r>:
 8010438:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010440:	0716      	lsls	r6, r2, #28
 8010442:	4605      	mov	r5, r0
 8010444:	460c      	mov	r4, r1
 8010446:	d454      	bmi.n	80104f2 <__sflush_r+0xba>
 8010448:	684b      	ldr	r3, [r1, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	dc02      	bgt.n	8010454 <__sflush_r+0x1c>
 801044e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010450:	2b00      	cmp	r3, #0
 8010452:	dd48      	ble.n	80104e6 <__sflush_r+0xae>
 8010454:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010456:	2e00      	cmp	r6, #0
 8010458:	d045      	beq.n	80104e6 <__sflush_r+0xae>
 801045a:	2300      	movs	r3, #0
 801045c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010460:	682f      	ldr	r7, [r5, #0]
 8010462:	6a21      	ldr	r1, [r4, #32]
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	d030      	beq.n	80104ca <__sflush_r+0x92>
 8010468:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801046a:	89a3      	ldrh	r3, [r4, #12]
 801046c:	0759      	lsls	r1, r3, #29
 801046e:	d505      	bpl.n	801047c <__sflush_r+0x44>
 8010470:	6863      	ldr	r3, [r4, #4]
 8010472:	1ad2      	subs	r2, r2, r3
 8010474:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010476:	b10b      	cbz	r3, 801047c <__sflush_r+0x44>
 8010478:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801047a:	1ad2      	subs	r2, r2, r3
 801047c:	2300      	movs	r3, #0
 801047e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010480:	6a21      	ldr	r1, [r4, #32]
 8010482:	4628      	mov	r0, r5
 8010484:	47b0      	blx	r6
 8010486:	1c43      	adds	r3, r0, #1
 8010488:	89a3      	ldrh	r3, [r4, #12]
 801048a:	d106      	bne.n	801049a <__sflush_r+0x62>
 801048c:	6829      	ldr	r1, [r5, #0]
 801048e:	291d      	cmp	r1, #29
 8010490:	d82b      	bhi.n	80104ea <__sflush_r+0xb2>
 8010492:	4a2a      	ldr	r2, [pc, #168]	@ (801053c <__sflush_r+0x104>)
 8010494:	40ca      	lsrs	r2, r1
 8010496:	07d6      	lsls	r6, r2, #31
 8010498:	d527      	bpl.n	80104ea <__sflush_r+0xb2>
 801049a:	2200      	movs	r2, #0
 801049c:	6062      	str	r2, [r4, #4]
 801049e:	04d9      	lsls	r1, r3, #19
 80104a0:	6922      	ldr	r2, [r4, #16]
 80104a2:	6022      	str	r2, [r4, #0]
 80104a4:	d504      	bpl.n	80104b0 <__sflush_r+0x78>
 80104a6:	1c42      	adds	r2, r0, #1
 80104a8:	d101      	bne.n	80104ae <__sflush_r+0x76>
 80104aa:	682b      	ldr	r3, [r5, #0]
 80104ac:	b903      	cbnz	r3, 80104b0 <__sflush_r+0x78>
 80104ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80104b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104b2:	602f      	str	r7, [r5, #0]
 80104b4:	b1b9      	cbz	r1, 80104e6 <__sflush_r+0xae>
 80104b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104ba:	4299      	cmp	r1, r3
 80104bc:	d002      	beq.n	80104c4 <__sflush_r+0x8c>
 80104be:	4628      	mov	r0, r5
 80104c0:	f7fd ffca 	bl	800e458 <_free_r>
 80104c4:	2300      	movs	r3, #0
 80104c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80104c8:	e00d      	b.n	80104e6 <__sflush_r+0xae>
 80104ca:	2301      	movs	r3, #1
 80104cc:	4628      	mov	r0, r5
 80104ce:	47b0      	blx	r6
 80104d0:	4602      	mov	r2, r0
 80104d2:	1c50      	adds	r0, r2, #1
 80104d4:	d1c9      	bne.n	801046a <__sflush_r+0x32>
 80104d6:	682b      	ldr	r3, [r5, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d0c6      	beq.n	801046a <__sflush_r+0x32>
 80104dc:	2b1d      	cmp	r3, #29
 80104de:	d001      	beq.n	80104e4 <__sflush_r+0xac>
 80104e0:	2b16      	cmp	r3, #22
 80104e2:	d11e      	bne.n	8010522 <__sflush_r+0xea>
 80104e4:	602f      	str	r7, [r5, #0]
 80104e6:	2000      	movs	r0, #0
 80104e8:	e022      	b.n	8010530 <__sflush_r+0xf8>
 80104ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104ee:	b21b      	sxth	r3, r3
 80104f0:	e01b      	b.n	801052a <__sflush_r+0xf2>
 80104f2:	690f      	ldr	r7, [r1, #16]
 80104f4:	2f00      	cmp	r7, #0
 80104f6:	d0f6      	beq.n	80104e6 <__sflush_r+0xae>
 80104f8:	0793      	lsls	r3, r2, #30
 80104fa:	680e      	ldr	r6, [r1, #0]
 80104fc:	bf08      	it	eq
 80104fe:	694b      	ldreq	r3, [r1, #20]
 8010500:	600f      	str	r7, [r1, #0]
 8010502:	bf18      	it	ne
 8010504:	2300      	movne	r3, #0
 8010506:	eba6 0807 	sub.w	r8, r6, r7
 801050a:	608b      	str	r3, [r1, #8]
 801050c:	f1b8 0f00 	cmp.w	r8, #0
 8010510:	dde9      	ble.n	80104e6 <__sflush_r+0xae>
 8010512:	6a21      	ldr	r1, [r4, #32]
 8010514:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010516:	4643      	mov	r3, r8
 8010518:	463a      	mov	r2, r7
 801051a:	4628      	mov	r0, r5
 801051c:	47b0      	blx	r6
 801051e:	2800      	cmp	r0, #0
 8010520:	dc08      	bgt.n	8010534 <__sflush_r+0xfc>
 8010522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801052a:	81a3      	strh	r3, [r4, #12]
 801052c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010534:	4407      	add	r7, r0
 8010536:	eba8 0800 	sub.w	r8, r8, r0
 801053a:	e7e7      	b.n	801050c <__sflush_r+0xd4>
 801053c:	20400001 	.word	0x20400001

08010540 <_fflush_r>:
 8010540:	b538      	push	{r3, r4, r5, lr}
 8010542:	690b      	ldr	r3, [r1, #16]
 8010544:	4605      	mov	r5, r0
 8010546:	460c      	mov	r4, r1
 8010548:	b913      	cbnz	r3, 8010550 <_fflush_r+0x10>
 801054a:	2500      	movs	r5, #0
 801054c:	4628      	mov	r0, r5
 801054e:	bd38      	pop	{r3, r4, r5, pc}
 8010550:	b118      	cbz	r0, 801055a <_fflush_r+0x1a>
 8010552:	6a03      	ldr	r3, [r0, #32]
 8010554:	b90b      	cbnz	r3, 801055a <_fflush_r+0x1a>
 8010556:	f7fc ff93 	bl	800d480 <__sinit>
 801055a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d0f3      	beq.n	801054a <_fflush_r+0xa>
 8010562:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010564:	07d0      	lsls	r0, r2, #31
 8010566:	d404      	bmi.n	8010572 <_fflush_r+0x32>
 8010568:	0599      	lsls	r1, r3, #22
 801056a:	d402      	bmi.n	8010572 <_fflush_r+0x32>
 801056c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801056e:	f7fd f904 	bl	800d77a <__retarget_lock_acquire_recursive>
 8010572:	4628      	mov	r0, r5
 8010574:	4621      	mov	r1, r4
 8010576:	f7ff ff5f 	bl	8010438 <__sflush_r>
 801057a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801057c:	07da      	lsls	r2, r3, #31
 801057e:	4605      	mov	r5, r0
 8010580:	d4e4      	bmi.n	801054c <_fflush_r+0xc>
 8010582:	89a3      	ldrh	r3, [r4, #12]
 8010584:	059b      	lsls	r3, r3, #22
 8010586:	d4e1      	bmi.n	801054c <_fflush_r+0xc>
 8010588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801058a:	f7fd f8f7 	bl	800d77c <__retarget_lock_release_recursive>
 801058e:	e7dd      	b.n	801054c <_fflush_r+0xc>

08010590 <__sccl>:
 8010590:	b570      	push	{r4, r5, r6, lr}
 8010592:	780b      	ldrb	r3, [r1, #0]
 8010594:	4604      	mov	r4, r0
 8010596:	2b5e      	cmp	r3, #94	@ 0x5e
 8010598:	bf0b      	itete	eq
 801059a:	784b      	ldrbeq	r3, [r1, #1]
 801059c:	1c4a      	addne	r2, r1, #1
 801059e:	1c8a      	addeq	r2, r1, #2
 80105a0:	2100      	movne	r1, #0
 80105a2:	bf08      	it	eq
 80105a4:	2101      	moveq	r1, #1
 80105a6:	3801      	subs	r0, #1
 80105a8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80105ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80105b0:	42a8      	cmp	r0, r5
 80105b2:	d1fb      	bne.n	80105ac <__sccl+0x1c>
 80105b4:	b90b      	cbnz	r3, 80105ba <__sccl+0x2a>
 80105b6:	1e50      	subs	r0, r2, #1
 80105b8:	bd70      	pop	{r4, r5, r6, pc}
 80105ba:	f081 0101 	eor.w	r1, r1, #1
 80105be:	54e1      	strb	r1, [r4, r3]
 80105c0:	4610      	mov	r0, r2
 80105c2:	4602      	mov	r2, r0
 80105c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80105c8:	2d2d      	cmp	r5, #45	@ 0x2d
 80105ca:	d005      	beq.n	80105d8 <__sccl+0x48>
 80105cc:	2d5d      	cmp	r5, #93	@ 0x5d
 80105ce:	d016      	beq.n	80105fe <__sccl+0x6e>
 80105d0:	2d00      	cmp	r5, #0
 80105d2:	d0f1      	beq.n	80105b8 <__sccl+0x28>
 80105d4:	462b      	mov	r3, r5
 80105d6:	e7f2      	b.n	80105be <__sccl+0x2e>
 80105d8:	7846      	ldrb	r6, [r0, #1]
 80105da:	2e5d      	cmp	r6, #93	@ 0x5d
 80105dc:	d0fa      	beq.n	80105d4 <__sccl+0x44>
 80105de:	42b3      	cmp	r3, r6
 80105e0:	dcf8      	bgt.n	80105d4 <__sccl+0x44>
 80105e2:	3002      	adds	r0, #2
 80105e4:	461a      	mov	r2, r3
 80105e6:	3201      	adds	r2, #1
 80105e8:	4296      	cmp	r6, r2
 80105ea:	54a1      	strb	r1, [r4, r2]
 80105ec:	dcfb      	bgt.n	80105e6 <__sccl+0x56>
 80105ee:	1af2      	subs	r2, r6, r3
 80105f0:	3a01      	subs	r2, #1
 80105f2:	1c5d      	adds	r5, r3, #1
 80105f4:	42b3      	cmp	r3, r6
 80105f6:	bfa8      	it	ge
 80105f8:	2200      	movge	r2, #0
 80105fa:	18ab      	adds	r3, r5, r2
 80105fc:	e7e1      	b.n	80105c2 <__sccl+0x32>
 80105fe:	4610      	mov	r0, r2
 8010600:	e7da      	b.n	80105b8 <__sccl+0x28>

08010602 <__submore>:
 8010602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010606:	460c      	mov	r4, r1
 8010608:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801060a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801060e:	4299      	cmp	r1, r3
 8010610:	d11d      	bne.n	801064e <__submore+0x4c>
 8010612:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010616:	f7fb ffb7 	bl	800c588 <_malloc_r>
 801061a:	b918      	cbnz	r0, 8010624 <__submore+0x22>
 801061c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010624:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010628:	63a3      	str	r3, [r4, #56]	@ 0x38
 801062a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801062e:	6360      	str	r0, [r4, #52]	@ 0x34
 8010630:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010634:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010638:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801063c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010640:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010644:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010648:	6020      	str	r0, [r4, #0]
 801064a:	2000      	movs	r0, #0
 801064c:	e7e8      	b.n	8010620 <__submore+0x1e>
 801064e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010650:	0077      	lsls	r7, r6, #1
 8010652:	463a      	mov	r2, r7
 8010654:	f000 fbad 	bl	8010db2 <_realloc_r>
 8010658:	4605      	mov	r5, r0
 801065a:	2800      	cmp	r0, #0
 801065c:	d0de      	beq.n	801061c <__submore+0x1a>
 801065e:	eb00 0806 	add.w	r8, r0, r6
 8010662:	4601      	mov	r1, r0
 8010664:	4632      	mov	r2, r6
 8010666:	4640      	mov	r0, r8
 8010668:	f7fd f889 	bl	800d77e <memcpy>
 801066c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010670:	f8c4 8000 	str.w	r8, [r4]
 8010674:	e7e9      	b.n	801064a <__submore+0x48>

08010676 <memmove>:
 8010676:	4288      	cmp	r0, r1
 8010678:	b510      	push	{r4, lr}
 801067a:	eb01 0402 	add.w	r4, r1, r2
 801067e:	d902      	bls.n	8010686 <memmove+0x10>
 8010680:	4284      	cmp	r4, r0
 8010682:	4623      	mov	r3, r4
 8010684:	d807      	bhi.n	8010696 <memmove+0x20>
 8010686:	1e43      	subs	r3, r0, #1
 8010688:	42a1      	cmp	r1, r4
 801068a:	d008      	beq.n	801069e <memmove+0x28>
 801068c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010690:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010694:	e7f8      	b.n	8010688 <memmove+0x12>
 8010696:	4402      	add	r2, r0
 8010698:	4601      	mov	r1, r0
 801069a:	428a      	cmp	r2, r1
 801069c:	d100      	bne.n	80106a0 <memmove+0x2a>
 801069e:	bd10      	pop	{r4, pc}
 80106a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106a8:	e7f7      	b.n	801069a <memmove+0x24>

080106aa <strncmp>:
 80106aa:	b510      	push	{r4, lr}
 80106ac:	b16a      	cbz	r2, 80106ca <strncmp+0x20>
 80106ae:	3901      	subs	r1, #1
 80106b0:	1884      	adds	r4, r0, r2
 80106b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d103      	bne.n	80106c6 <strncmp+0x1c>
 80106be:	42a0      	cmp	r0, r4
 80106c0:	d001      	beq.n	80106c6 <strncmp+0x1c>
 80106c2:	2a00      	cmp	r2, #0
 80106c4:	d1f5      	bne.n	80106b2 <strncmp+0x8>
 80106c6:	1ad0      	subs	r0, r2, r3
 80106c8:	bd10      	pop	{r4, pc}
 80106ca:	4610      	mov	r0, r2
 80106cc:	e7fc      	b.n	80106c8 <strncmp+0x1e>
	...

080106d0 <nan>:
 80106d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80106d8 <nan+0x8>
 80106d4:	4770      	bx	lr
 80106d6:	bf00      	nop
 80106d8:	00000000 	.word	0x00000000
 80106dc:	7ff80000 	.word	0x7ff80000

080106e0 <__assert_func>:
 80106e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106e2:	4614      	mov	r4, r2
 80106e4:	461a      	mov	r2, r3
 80106e6:	4b09      	ldr	r3, [pc, #36]	@ (801070c <__assert_func+0x2c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	4605      	mov	r5, r0
 80106ec:	68d8      	ldr	r0, [r3, #12]
 80106ee:	b14c      	cbz	r4, 8010704 <__assert_func+0x24>
 80106f0:	4b07      	ldr	r3, [pc, #28]	@ (8010710 <__assert_func+0x30>)
 80106f2:	9100      	str	r1, [sp, #0]
 80106f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106f8:	4906      	ldr	r1, [pc, #24]	@ (8010714 <__assert_func+0x34>)
 80106fa:	462b      	mov	r3, r5
 80106fc:	f000 fc06 	bl	8010f0c <fiprintf>
 8010700:	f000 fc16 	bl	8010f30 <abort>
 8010704:	4b04      	ldr	r3, [pc, #16]	@ (8010718 <__assert_func+0x38>)
 8010706:	461c      	mov	r4, r3
 8010708:	e7f3      	b.n	80106f2 <__assert_func+0x12>
 801070a:	bf00      	nop
 801070c:	20000034 	.word	0x20000034
 8010710:	08013453 	.word	0x08013453
 8010714:	08013460 	.word	0x08013460
 8010718:	0801348e 	.word	0x0801348e

0801071c <rshift>:
 801071c:	6903      	ldr	r3, [r0, #16]
 801071e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010726:	ea4f 1261 	mov.w	r2, r1, asr #5
 801072a:	f100 0414 	add.w	r4, r0, #20
 801072e:	dd45      	ble.n	80107bc <rshift+0xa0>
 8010730:	f011 011f 	ands.w	r1, r1, #31
 8010734:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801073c:	d10c      	bne.n	8010758 <rshift+0x3c>
 801073e:	f100 0710 	add.w	r7, r0, #16
 8010742:	4629      	mov	r1, r5
 8010744:	42b1      	cmp	r1, r6
 8010746:	d334      	bcc.n	80107b2 <rshift+0x96>
 8010748:	1a9b      	subs	r3, r3, r2
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	1eea      	subs	r2, r5, #3
 801074e:	4296      	cmp	r6, r2
 8010750:	bf38      	it	cc
 8010752:	2300      	movcc	r3, #0
 8010754:	4423      	add	r3, r4
 8010756:	e015      	b.n	8010784 <rshift+0x68>
 8010758:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801075c:	f1c1 0820 	rsb	r8, r1, #32
 8010760:	40cf      	lsrs	r7, r1
 8010762:	f105 0e04 	add.w	lr, r5, #4
 8010766:	46a1      	mov	r9, r4
 8010768:	4576      	cmp	r6, lr
 801076a:	46f4      	mov	ip, lr
 801076c:	d815      	bhi.n	801079a <rshift+0x7e>
 801076e:	1a9a      	subs	r2, r3, r2
 8010770:	0092      	lsls	r2, r2, #2
 8010772:	3a04      	subs	r2, #4
 8010774:	3501      	adds	r5, #1
 8010776:	42ae      	cmp	r6, r5
 8010778:	bf38      	it	cc
 801077a:	2200      	movcc	r2, #0
 801077c:	18a3      	adds	r3, r4, r2
 801077e:	50a7      	str	r7, [r4, r2]
 8010780:	b107      	cbz	r7, 8010784 <rshift+0x68>
 8010782:	3304      	adds	r3, #4
 8010784:	1b1a      	subs	r2, r3, r4
 8010786:	42a3      	cmp	r3, r4
 8010788:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801078c:	bf08      	it	eq
 801078e:	2300      	moveq	r3, #0
 8010790:	6102      	str	r2, [r0, #16]
 8010792:	bf08      	it	eq
 8010794:	6143      	streq	r3, [r0, #20]
 8010796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801079a:	f8dc c000 	ldr.w	ip, [ip]
 801079e:	fa0c fc08 	lsl.w	ip, ip, r8
 80107a2:	ea4c 0707 	orr.w	r7, ip, r7
 80107a6:	f849 7b04 	str.w	r7, [r9], #4
 80107aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80107ae:	40cf      	lsrs	r7, r1
 80107b0:	e7da      	b.n	8010768 <rshift+0x4c>
 80107b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80107b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80107ba:	e7c3      	b.n	8010744 <rshift+0x28>
 80107bc:	4623      	mov	r3, r4
 80107be:	e7e1      	b.n	8010784 <rshift+0x68>

080107c0 <__hexdig_fun>:
 80107c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80107c4:	2b09      	cmp	r3, #9
 80107c6:	d802      	bhi.n	80107ce <__hexdig_fun+0xe>
 80107c8:	3820      	subs	r0, #32
 80107ca:	b2c0      	uxtb	r0, r0
 80107cc:	4770      	bx	lr
 80107ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80107d2:	2b05      	cmp	r3, #5
 80107d4:	d801      	bhi.n	80107da <__hexdig_fun+0x1a>
 80107d6:	3847      	subs	r0, #71	@ 0x47
 80107d8:	e7f7      	b.n	80107ca <__hexdig_fun+0xa>
 80107da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80107de:	2b05      	cmp	r3, #5
 80107e0:	d801      	bhi.n	80107e6 <__hexdig_fun+0x26>
 80107e2:	3827      	subs	r0, #39	@ 0x27
 80107e4:	e7f1      	b.n	80107ca <__hexdig_fun+0xa>
 80107e6:	2000      	movs	r0, #0
 80107e8:	4770      	bx	lr
	...

080107ec <__gethex>:
 80107ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f0:	b085      	sub	sp, #20
 80107f2:	468a      	mov	sl, r1
 80107f4:	9302      	str	r3, [sp, #8]
 80107f6:	680b      	ldr	r3, [r1, #0]
 80107f8:	9001      	str	r0, [sp, #4]
 80107fa:	4690      	mov	r8, r2
 80107fc:	1c9c      	adds	r4, r3, #2
 80107fe:	46a1      	mov	r9, r4
 8010800:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010804:	2830      	cmp	r0, #48	@ 0x30
 8010806:	d0fa      	beq.n	80107fe <__gethex+0x12>
 8010808:	eba9 0303 	sub.w	r3, r9, r3
 801080c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010810:	f7ff ffd6 	bl	80107c0 <__hexdig_fun>
 8010814:	4605      	mov	r5, r0
 8010816:	2800      	cmp	r0, #0
 8010818:	d168      	bne.n	80108ec <__gethex+0x100>
 801081a:	49a0      	ldr	r1, [pc, #640]	@ (8010a9c <__gethex+0x2b0>)
 801081c:	2201      	movs	r2, #1
 801081e:	4648      	mov	r0, r9
 8010820:	f7ff ff43 	bl	80106aa <strncmp>
 8010824:	4607      	mov	r7, r0
 8010826:	2800      	cmp	r0, #0
 8010828:	d167      	bne.n	80108fa <__gethex+0x10e>
 801082a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801082e:	4626      	mov	r6, r4
 8010830:	f7ff ffc6 	bl	80107c0 <__hexdig_fun>
 8010834:	2800      	cmp	r0, #0
 8010836:	d062      	beq.n	80108fe <__gethex+0x112>
 8010838:	4623      	mov	r3, r4
 801083a:	7818      	ldrb	r0, [r3, #0]
 801083c:	2830      	cmp	r0, #48	@ 0x30
 801083e:	4699      	mov	r9, r3
 8010840:	f103 0301 	add.w	r3, r3, #1
 8010844:	d0f9      	beq.n	801083a <__gethex+0x4e>
 8010846:	f7ff ffbb 	bl	80107c0 <__hexdig_fun>
 801084a:	fab0 f580 	clz	r5, r0
 801084e:	096d      	lsrs	r5, r5, #5
 8010850:	f04f 0b01 	mov.w	fp, #1
 8010854:	464a      	mov	r2, r9
 8010856:	4616      	mov	r6, r2
 8010858:	3201      	adds	r2, #1
 801085a:	7830      	ldrb	r0, [r6, #0]
 801085c:	f7ff ffb0 	bl	80107c0 <__hexdig_fun>
 8010860:	2800      	cmp	r0, #0
 8010862:	d1f8      	bne.n	8010856 <__gethex+0x6a>
 8010864:	498d      	ldr	r1, [pc, #564]	@ (8010a9c <__gethex+0x2b0>)
 8010866:	2201      	movs	r2, #1
 8010868:	4630      	mov	r0, r6
 801086a:	f7ff ff1e 	bl	80106aa <strncmp>
 801086e:	2800      	cmp	r0, #0
 8010870:	d13f      	bne.n	80108f2 <__gethex+0x106>
 8010872:	b944      	cbnz	r4, 8010886 <__gethex+0x9a>
 8010874:	1c74      	adds	r4, r6, #1
 8010876:	4622      	mov	r2, r4
 8010878:	4616      	mov	r6, r2
 801087a:	3201      	adds	r2, #1
 801087c:	7830      	ldrb	r0, [r6, #0]
 801087e:	f7ff ff9f 	bl	80107c0 <__hexdig_fun>
 8010882:	2800      	cmp	r0, #0
 8010884:	d1f8      	bne.n	8010878 <__gethex+0x8c>
 8010886:	1ba4      	subs	r4, r4, r6
 8010888:	00a7      	lsls	r7, r4, #2
 801088a:	7833      	ldrb	r3, [r6, #0]
 801088c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010890:	2b50      	cmp	r3, #80	@ 0x50
 8010892:	d13e      	bne.n	8010912 <__gethex+0x126>
 8010894:	7873      	ldrb	r3, [r6, #1]
 8010896:	2b2b      	cmp	r3, #43	@ 0x2b
 8010898:	d033      	beq.n	8010902 <__gethex+0x116>
 801089a:	2b2d      	cmp	r3, #45	@ 0x2d
 801089c:	d034      	beq.n	8010908 <__gethex+0x11c>
 801089e:	1c71      	adds	r1, r6, #1
 80108a0:	2400      	movs	r4, #0
 80108a2:	7808      	ldrb	r0, [r1, #0]
 80108a4:	f7ff ff8c 	bl	80107c0 <__hexdig_fun>
 80108a8:	1e43      	subs	r3, r0, #1
 80108aa:	b2db      	uxtb	r3, r3
 80108ac:	2b18      	cmp	r3, #24
 80108ae:	d830      	bhi.n	8010912 <__gethex+0x126>
 80108b0:	f1a0 0210 	sub.w	r2, r0, #16
 80108b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80108b8:	f7ff ff82 	bl	80107c0 <__hexdig_fun>
 80108bc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80108c0:	fa5f fc8c 	uxtb.w	ip, ip
 80108c4:	f1bc 0f18 	cmp.w	ip, #24
 80108c8:	f04f 030a 	mov.w	r3, #10
 80108cc:	d91e      	bls.n	801090c <__gethex+0x120>
 80108ce:	b104      	cbz	r4, 80108d2 <__gethex+0xe6>
 80108d0:	4252      	negs	r2, r2
 80108d2:	4417      	add	r7, r2
 80108d4:	f8ca 1000 	str.w	r1, [sl]
 80108d8:	b1ed      	cbz	r5, 8010916 <__gethex+0x12a>
 80108da:	f1bb 0f00 	cmp.w	fp, #0
 80108de:	bf0c      	ite	eq
 80108e0:	2506      	moveq	r5, #6
 80108e2:	2500      	movne	r5, #0
 80108e4:	4628      	mov	r0, r5
 80108e6:	b005      	add	sp, #20
 80108e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ec:	2500      	movs	r5, #0
 80108ee:	462c      	mov	r4, r5
 80108f0:	e7b0      	b.n	8010854 <__gethex+0x68>
 80108f2:	2c00      	cmp	r4, #0
 80108f4:	d1c7      	bne.n	8010886 <__gethex+0x9a>
 80108f6:	4627      	mov	r7, r4
 80108f8:	e7c7      	b.n	801088a <__gethex+0x9e>
 80108fa:	464e      	mov	r6, r9
 80108fc:	462f      	mov	r7, r5
 80108fe:	2501      	movs	r5, #1
 8010900:	e7c3      	b.n	801088a <__gethex+0x9e>
 8010902:	2400      	movs	r4, #0
 8010904:	1cb1      	adds	r1, r6, #2
 8010906:	e7cc      	b.n	80108a2 <__gethex+0xb6>
 8010908:	2401      	movs	r4, #1
 801090a:	e7fb      	b.n	8010904 <__gethex+0x118>
 801090c:	fb03 0002 	mla	r0, r3, r2, r0
 8010910:	e7ce      	b.n	80108b0 <__gethex+0xc4>
 8010912:	4631      	mov	r1, r6
 8010914:	e7de      	b.n	80108d4 <__gethex+0xe8>
 8010916:	eba6 0309 	sub.w	r3, r6, r9
 801091a:	3b01      	subs	r3, #1
 801091c:	4629      	mov	r1, r5
 801091e:	2b07      	cmp	r3, #7
 8010920:	dc0a      	bgt.n	8010938 <__gethex+0x14c>
 8010922:	9801      	ldr	r0, [sp, #4]
 8010924:	f7fd fde2 	bl	800e4ec <_Balloc>
 8010928:	4604      	mov	r4, r0
 801092a:	b940      	cbnz	r0, 801093e <__gethex+0x152>
 801092c:	4b5c      	ldr	r3, [pc, #368]	@ (8010aa0 <__gethex+0x2b4>)
 801092e:	4602      	mov	r2, r0
 8010930:	21e4      	movs	r1, #228	@ 0xe4
 8010932:	485c      	ldr	r0, [pc, #368]	@ (8010aa4 <__gethex+0x2b8>)
 8010934:	f7ff fed4 	bl	80106e0 <__assert_func>
 8010938:	3101      	adds	r1, #1
 801093a:	105b      	asrs	r3, r3, #1
 801093c:	e7ef      	b.n	801091e <__gethex+0x132>
 801093e:	f100 0a14 	add.w	sl, r0, #20
 8010942:	2300      	movs	r3, #0
 8010944:	4655      	mov	r5, sl
 8010946:	469b      	mov	fp, r3
 8010948:	45b1      	cmp	r9, r6
 801094a:	d337      	bcc.n	80109bc <__gethex+0x1d0>
 801094c:	f845 bb04 	str.w	fp, [r5], #4
 8010950:	eba5 050a 	sub.w	r5, r5, sl
 8010954:	10ad      	asrs	r5, r5, #2
 8010956:	6125      	str	r5, [r4, #16]
 8010958:	4658      	mov	r0, fp
 801095a:	f7fd feb9 	bl	800e6d0 <__hi0bits>
 801095e:	016d      	lsls	r5, r5, #5
 8010960:	f8d8 6000 	ldr.w	r6, [r8]
 8010964:	1a2d      	subs	r5, r5, r0
 8010966:	42b5      	cmp	r5, r6
 8010968:	dd54      	ble.n	8010a14 <__gethex+0x228>
 801096a:	1bad      	subs	r5, r5, r6
 801096c:	4629      	mov	r1, r5
 801096e:	4620      	mov	r0, r4
 8010970:	f7fe fa45 	bl	800edfe <__any_on>
 8010974:	4681      	mov	r9, r0
 8010976:	b178      	cbz	r0, 8010998 <__gethex+0x1ac>
 8010978:	1e6b      	subs	r3, r5, #1
 801097a:	1159      	asrs	r1, r3, #5
 801097c:	f003 021f 	and.w	r2, r3, #31
 8010980:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010984:	f04f 0901 	mov.w	r9, #1
 8010988:	fa09 f202 	lsl.w	r2, r9, r2
 801098c:	420a      	tst	r2, r1
 801098e:	d003      	beq.n	8010998 <__gethex+0x1ac>
 8010990:	454b      	cmp	r3, r9
 8010992:	dc36      	bgt.n	8010a02 <__gethex+0x216>
 8010994:	f04f 0902 	mov.w	r9, #2
 8010998:	4629      	mov	r1, r5
 801099a:	4620      	mov	r0, r4
 801099c:	f7ff febe 	bl	801071c <rshift>
 80109a0:	442f      	add	r7, r5
 80109a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80109a6:	42bb      	cmp	r3, r7
 80109a8:	da42      	bge.n	8010a30 <__gethex+0x244>
 80109aa:	9801      	ldr	r0, [sp, #4]
 80109ac:	4621      	mov	r1, r4
 80109ae:	f7fd fddd 	bl	800e56c <_Bfree>
 80109b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80109b4:	2300      	movs	r3, #0
 80109b6:	6013      	str	r3, [r2, #0]
 80109b8:	25a3      	movs	r5, #163	@ 0xa3
 80109ba:	e793      	b.n	80108e4 <__gethex+0xf8>
 80109bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80109c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80109c2:	d012      	beq.n	80109ea <__gethex+0x1fe>
 80109c4:	2b20      	cmp	r3, #32
 80109c6:	d104      	bne.n	80109d2 <__gethex+0x1e6>
 80109c8:	f845 bb04 	str.w	fp, [r5], #4
 80109cc:	f04f 0b00 	mov.w	fp, #0
 80109d0:	465b      	mov	r3, fp
 80109d2:	7830      	ldrb	r0, [r6, #0]
 80109d4:	9303      	str	r3, [sp, #12]
 80109d6:	f7ff fef3 	bl	80107c0 <__hexdig_fun>
 80109da:	9b03      	ldr	r3, [sp, #12]
 80109dc:	f000 000f 	and.w	r0, r0, #15
 80109e0:	4098      	lsls	r0, r3
 80109e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80109e6:	3304      	adds	r3, #4
 80109e8:	e7ae      	b.n	8010948 <__gethex+0x15c>
 80109ea:	45b1      	cmp	r9, r6
 80109ec:	d8ea      	bhi.n	80109c4 <__gethex+0x1d8>
 80109ee:	492b      	ldr	r1, [pc, #172]	@ (8010a9c <__gethex+0x2b0>)
 80109f0:	9303      	str	r3, [sp, #12]
 80109f2:	2201      	movs	r2, #1
 80109f4:	4630      	mov	r0, r6
 80109f6:	f7ff fe58 	bl	80106aa <strncmp>
 80109fa:	9b03      	ldr	r3, [sp, #12]
 80109fc:	2800      	cmp	r0, #0
 80109fe:	d1e1      	bne.n	80109c4 <__gethex+0x1d8>
 8010a00:	e7a2      	b.n	8010948 <__gethex+0x15c>
 8010a02:	1ea9      	subs	r1, r5, #2
 8010a04:	4620      	mov	r0, r4
 8010a06:	f7fe f9fa 	bl	800edfe <__any_on>
 8010a0a:	2800      	cmp	r0, #0
 8010a0c:	d0c2      	beq.n	8010994 <__gethex+0x1a8>
 8010a0e:	f04f 0903 	mov.w	r9, #3
 8010a12:	e7c1      	b.n	8010998 <__gethex+0x1ac>
 8010a14:	da09      	bge.n	8010a2a <__gethex+0x23e>
 8010a16:	1b75      	subs	r5, r6, r5
 8010a18:	4621      	mov	r1, r4
 8010a1a:	9801      	ldr	r0, [sp, #4]
 8010a1c:	462a      	mov	r2, r5
 8010a1e:	f7fd ffb5 	bl	800e98c <__lshift>
 8010a22:	1b7f      	subs	r7, r7, r5
 8010a24:	4604      	mov	r4, r0
 8010a26:	f100 0a14 	add.w	sl, r0, #20
 8010a2a:	f04f 0900 	mov.w	r9, #0
 8010a2e:	e7b8      	b.n	80109a2 <__gethex+0x1b6>
 8010a30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010a34:	42bd      	cmp	r5, r7
 8010a36:	dd6f      	ble.n	8010b18 <__gethex+0x32c>
 8010a38:	1bed      	subs	r5, r5, r7
 8010a3a:	42ae      	cmp	r6, r5
 8010a3c:	dc34      	bgt.n	8010aa8 <__gethex+0x2bc>
 8010a3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d022      	beq.n	8010a8c <__gethex+0x2a0>
 8010a46:	2b03      	cmp	r3, #3
 8010a48:	d024      	beq.n	8010a94 <__gethex+0x2a8>
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d115      	bne.n	8010a7a <__gethex+0x28e>
 8010a4e:	42ae      	cmp	r6, r5
 8010a50:	d113      	bne.n	8010a7a <__gethex+0x28e>
 8010a52:	2e01      	cmp	r6, #1
 8010a54:	d10b      	bne.n	8010a6e <__gethex+0x282>
 8010a56:	9a02      	ldr	r2, [sp, #8]
 8010a58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010a5c:	6013      	str	r3, [r2, #0]
 8010a5e:	2301      	movs	r3, #1
 8010a60:	6123      	str	r3, [r4, #16]
 8010a62:	f8ca 3000 	str.w	r3, [sl]
 8010a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a68:	2562      	movs	r5, #98	@ 0x62
 8010a6a:	601c      	str	r4, [r3, #0]
 8010a6c:	e73a      	b.n	80108e4 <__gethex+0xf8>
 8010a6e:	1e71      	subs	r1, r6, #1
 8010a70:	4620      	mov	r0, r4
 8010a72:	f7fe f9c4 	bl	800edfe <__any_on>
 8010a76:	2800      	cmp	r0, #0
 8010a78:	d1ed      	bne.n	8010a56 <__gethex+0x26a>
 8010a7a:	9801      	ldr	r0, [sp, #4]
 8010a7c:	4621      	mov	r1, r4
 8010a7e:	f7fd fd75 	bl	800e56c <_Bfree>
 8010a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a84:	2300      	movs	r3, #0
 8010a86:	6013      	str	r3, [r2, #0]
 8010a88:	2550      	movs	r5, #80	@ 0x50
 8010a8a:	e72b      	b.n	80108e4 <__gethex+0xf8>
 8010a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1f3      	bne.n	8010a7a <__gethex+0x28e>
 8010a92:	e7e0      	b.n	8010a56 <__gethex+0x26a>
 8010a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1dd      	bne.n	8010a56 <__gethex+0x26a>
 8010a9a:	e7ee      	b.n	8010a7a <__gethex+0x28e>
 8010a9c:	0801341d 	.word	0x0801341d
 8010aa0:	080133b3 	.word	0x080133b3
 8010aa4:	0801348f 	.word	0x0801348f
 8010aa8:	1e6f      	subs	r7, r5, #1
 8010aaa:	f1b9 0f00 	cmp.w	r9, #0
 8010aae:	d130      	bne.n	8010b12 <__gethex+0x326>
 8010ab0:	b127      	cbz	r7, 8010abc <__gethex+0x2d0>
 8010ab2:	4639      	mov	r1, r7
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f7fe f9a2 	bl	800edfe <__any_on>
 8010aba:	4681      	mov	r9, r0
 8010abc:	117a      	asrs	r2, r7, #5
 8010abe:	2301      	movs	r3, #1
 8010ac0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010ac4:	f007 071f 	and.w	r7, r7, #31
 8010ac8:	40bb      	lsls	r3, r7
 8010aca:	4213      	tst	r3, r2
 8010acc:	4629      	mov	r1, r5
 8010ace:	4620      	mov	r0, r4
 8010ad0:	bf18      	it	ne
 8010ad2:	f049 0902 	orrne.w	r9, r9, #2
 8010ad6:	f7ff fe21 	bl	801071c <rshift>
 8010ada:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010ade:	1b76      	subs	r6, r6, r5
 8010ae0:	2502      	movs	r5, #2
 8010ae2:	f1b9 0f00 	cmp.w	r9, #0
 8010ae6:	d047      	beq.n	8010b78 <__gethex+0x38c>
 8010ae8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010aec:	2b02      	cmp	r3, #2
 8010aee:	d015      	beq.n	8010b1c <__gethex+0x330>
 8010af0:	2b03      	cmp	r3, #3
 8010af2:	d017      	beq.n	8010b24 <__gethex+0x338>
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d109      	bne.n	8010b0c <__gethex+0x320>
 8010af8:	f019 0f02 	tst.w	r9, #2
 8010afc:	d006      	beq.n	8010b0c <__gethex+0x320>
 8010afe:	f8da 3000 	ldr.w	r3, [sl]
 8010b02:	ea49 0903 	orr.w	r9, r9, r3
 8010b06:	f019 0f01 	tst.w	r9, #1
 8010b0a:	d10e      	bne.n	8010b2a <__gethex+0x33e>
 8010b0c:	f045 0510 	orr.w	r5, r5, #16
 8010b10:	e032      	b.n	8010b78 <__gethex+0x38c>
 8010b12:	f04f 0901 	mov.w	r9, #1
 8010b16:	e7d1      	b.n	8010abc <__gethex+0x2d0>
 8010b18:	2501      	movs	r5, #1
 8010b1a:	e7e2      	b.n	8010ae2 <__gethex+0x2f6>
 8010b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b1e:	f1c3 0301 	rsb	r3, r3, #1
 8010b22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d0f0      	beq.n	8010b0c <__gethex+0x320>
 8010b2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010b2e:	f104 0314 	add.w	r3, r4, #20
 8010b32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010b36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010b3a:	f04f 0c00 	mov.w	ip, #0
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b44:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010b48:	d01b      	beq.n	8010b82 <__gethex+0x396>
 8010b4a:	3201      	adds	r2, #1
 8010b4c:	6002      	str	r2, [r0, #0]
 8010b4e:	2d02      	cmp	r5, #2
 8010b50:	f104 0314 	add.w	r3, r4, #20
 8010b54:	d13c      	bne.n	8010bd0 <__gethex+0x3e4>
 8010b56:	f8d8 2000 	ldr.w	r2, [r8]
 8010b5a:	3a01      	subs	r2, #1
 8010b5c:	42b2      	cmp	r2, r6
 8010b5e:	d109      	bne.n	8010b74 <__gethex+0x388>
 8010b60:	1171      	asrs	r1, r6, #5
 8010b62:	2201      	movs	r2, #1
 8010b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010b68:	f006 061f 	and.w	r6, r6, #31
 8010b6c:	fa02 f606 	lsl.w	r6, r2, r6
 8010b70:	421e      	tst	r6, r3
 8010b72:	d13a      	bne.n	8010bea <__gethex+0x3fe>
 8010b74:	f045 0520 	orr.w	r5, r5, #32
 8010b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010b7a:	601c      	str	r4, [r3, #0]
 8010b7c:	9b02      	ldr	r3, [sp, #8]
 8010b7e:	601f      	str	r7, [r3, #0]
 8010b80:	e6b0      	b.n	80108e4 <__gethex+0xf8>
 8010b82:	4299      	cmp	r1, r3
 8010b84:	f843 cc04 	str.w	ip, [r3, #-4]
 8010b88:	d8d9      	bhi.n	8010b3e <__gethex+0x352>
 8010b8a:	68a3      	ldr	r3, [r4, #8]
 8010b8c:	459b      	cmp	fp, r3
 8010b8e:	db17      	blt.n	8010bc0 <__gethex+0x3d4>
 8010b90:	6861      	ldr	r1, [r4, #4]
 8010b92:	9801      	ldr	r0, [sp, #4]
 8010b94:	3101      	adds	r1, #1
 8010b96:	f7fd fca9 	bl	800e4ec <_Balloc>
 8010b9a:	4681      	mov	r9, r0
 8010b9c:	b918      	cbnz	r0, 8010ba6 <__gethex+0x3ba>
 8010b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8010c08 <__gethex+0x41c>)
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	2184      	movs	r1, #132	@ 0x84
 8010ba4:	e6c5      	b.n	8010932 <__gethex+0x146>
 8010ba6:	6922      	ldr	r2, [r4, #16]
 8010ba8:	3202      	adds	r2, #2
 8010baa:	f104 010c 	add.w	r1, r4, #12
 8010bae:	0092      	lsls	r2, r2, #2
 8010bb0:	300c      	adds	r0, #12
 8010bb2:	f7fc fde4 	bl	800d77e <memcpy>
 8010bb6:	4621      	mov	r1, r4
 8010bb8:	9801      	ldr	r0, [sp, #4]
 8010bba:	f7fd fcd7 	bl	800e56c <_Bfree>
 8010bbe:	464c      	mov	r4, r9
 8010bc0:	6923      	ldr	r3, [r4, #16]
 8010bc2:	1c5a      	adds	r2, r3, #1
 8010bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010bc8:	6122      	str	r2, [r4, #16]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	615a      	str	r2, [r3, #20]
 8010bce:	e7be      	b.n	8010b4e <__gethex+0x362>
 8010bd0:	6922      	ldr	r2, [r4, #16]
 8010bd2:	455a      	cmp	r2, fp
 8010bd4:	dd0b      	ble.n	8010bee <__gethex+0x402>
 8010bd6:	2101      	movs	r1, #1
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f7ff fd9f 	bl	801071c <rshift>
 8010bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010be2:	3701      	adds	r7, #1
 8010be4:	42bb      	cmp	r3, r7
 8010be6:	f6ff aee0 	blt.w	80109aa <__gethex+0x1be>
 8010bea:	2501      	movs	r5, #1
 8010bec:	e7c2      	b.n	8010b74 <__gethex+0x388>
 8010bee:	f016 061f 	ands.w	r6, r6, #31
 8010bf2:	d0fa      	beq.n	8010bea <__gethex+0x3fe>
 8010bf4:	4453      	add	r3, sl
 8010bf6:	f1c6 0620 	rsb	r6, r6, #32
 8010bfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010bfe:	f7fd fd67 	bl	800e6d0 <__hi0bits>
 8010c02:	42b0      	cmp	r0, r6
 8010c04:	dbe7      	blt.n	8010bd6 <__gethex+0x3ea>
 8010c06:	e7f0      	b.n	8010bea <__gethex+0x3fe>
 8010c08:	080133b3 	.word	0x080133b3

08010c0c <L_shift>:
 8010c0c:	f1c2 0208 	rsb	r2, r2, #8
 8010c10:	0092      	lsls	r2, r2, #2
 8010c12:	b570      	push	{r4, r5, r6, lr}
 8010c14:	f1c2 0620 	rsb	r6, r2, #32
 8010c18:	6843      	ldr	r3, [r0, #4]
 8010c1a:	6804      	ldr	r4, [r0, #0]
 8010c1c:	fa03 f506 	lsl.w	r5, r3, r6
 8010c20:	432c      	orrs	r4, r5
 8010c22:	40d3      	lsrs	r3, r2
 8010c24:	6004      	str	r4, [r0, #0]
 8010c26:	f840 3f04 	str.w	r3, [r0, #4]!
 8010c2a:	4288      	cmp	r0, r1
 8010c2c:	d3f4      	bcc.n	8010c18 <L_shift+0xc>
 8010c2e:	bd70      	pop	{r4, r5, r6, pc}

08010c30 <__match>:
 8010c30:	b530      	push	{r4, r5, lr}
 8010c32:	6803      	ldr	r3, [r0, #0]
 8010c34:	3301      	adds	r3, #1
 8010c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c3a:	b914      	cbnz	r4, 8010c42 <__match+0x12>
 8010c3c:	6003      	str	r3, [r0, #0]
 8010c3e:	2001      	movs	r0, #1
 8010c40:	bd30      	pop	{r4, r5, pc}
 8010c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010c4a:	2d19      	cmp	r5, #25
 8010c4c:	bf98      	it	ls
 8010c4e:	3220      	addls	r2, #32
 8010c50:	42a2      	cmp	r2, r4
 8010c52:	d0f0      	beq.n	8010c36 <__match+0x6>
 8010c54:	2000      	movs	r0, #0
 8010c56:	e7f3      	b.n	8010c40 <__match+0x10>

08010c58 <__hexnan>:
 8010c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5c:	680b      	ldr	r3, [r1, #0]
 8010c5e:	6801      	ldr	r1, [r0, #0]
 8010c60:	115e      	asrs	r6, r3, #5
 8010c62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010c66:	f013 031f 	ands.w	r3, r3, #31
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	bf18      	it	ne
 8010c6e:	3604      	addne	r6, #4
 8010c70:	2500      	movs	r5, #0
 8010c72:	1f37      	subs	r7, r6, #4
 8010c74:	4682      	mov	sl, r0
 8010c76:	4690      	mov	r8, r2
 8010c78:	9301      	str	r3, [sp, #4]
 8010c7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010c7e:	46b9      	mov	r9, r7
 8010c80:	463c      	mov	r4, r7
 8010c82:	9502      	str	r5, [sp, #8]
 8010c84:	46ab      	mov	fp, r5
 8010c86:	784a      	ldrb	r2, [r1, #1]
 8010c88:	1c4b      	adds	r3, r1, #1
 8010c8a:	9303      	str	r3, [sp, #12]
 8010c8c:	b342      	cbz	r2, 8010ce0 <__hexnan+0x88>
 8010c8e:	4610      	mov	r0, r2
 8010c90:	9105      	str	r1, [sp, #20]
 8010c92:	9204      	str	r2, [sp, #16]
 8010c94:	f7ff fd94 	bl	80107c0 <__hexdig_fun>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	d151      	bne.n	8010d40 <__hexnan+0xe8>
 8010c9c:	9a04      	ldr	r2, [sp, #16]
 8010c9e:	9905      	ldr	r1, [sp, #20]
 8010ca0:	2a20      	cmp	r2, #32
 8010ca2:	d818      	bhi.n	8010cd6 <__hexnan+0x7e>
 8010ca4:	9b02      	ldr	r3, [sp, #8]
 8010ca6:	459b      	cmp	fp, r3
 8010ca8:	dd13      	ble.n	8010cd2 <__hexnan+0x7a>
 8010caa:	454c      	cmp	r4, r9
 8010cac:	d206      	bcs.n	8010cbc <__hexnan+0x64>
 8010cae:	2d07      	cmp	r5, #7
 8010cb0:	dc04      	bgt.n	8010cbc <__hexnan+0x64>
 8010cb2:	462a      	mov	r2, r5
 8010cb4:	4649      	mov	r1, r9
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	f7ff ffa8 	bl	8010c0c <L_shift>
 8010cbc:	4544      	cmp	r4, r8
 8010cbe:	d952      	bls.n	8010d66 <__hexnan+0x10e>
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	f1a4 0904 	sub.w	r9, r4, #4
 8010cc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010cca:	f8cd b008 	str.w	fp, [sp, #8]
 8010cce:	464c      	mov	r4, r9
 8010cd0:	461d      	mov	r5, r3
 8010cd2:	9903      	ldr	r1, [sp, #12]
 8010cd4:	e7d7      	b.n	8010c86 <__hexnan+0x2e>
 8010cd6:	2a29      	cmp	r2, #41	@ 0x29
 8010cd8:	d157      	bne.n	8010d8a <__hexnan+0x132>
 8010cda:	3102      	adds	r1, #2
 8010cdc:	f8ca 1000 	str.w	r1, [sl]
 8010ce0:	f1bb 0f00 	cmp.w	fp, #0
 8010ce4:	d051      	beq.n	8010d8a <__hexnan+0x132>
 8010ce6:	454c      	cmp	r4, r9
 8010ce8:	d206      	bcs.n	8010cf8 <__hexnan+0xa0>
 8010cea:	2d07      	cmp	r5, #7
 8010cec:	dc04      	bgt.n	8010cf8 <__hexnan+0xa0>
 8010cee:	462a      	mov	r2, r5
 8010cf0:	4649      	mov	r1, r9
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	f7ff ff8a 	bl	8010c0c <L_shift>
 8010cf8:	4544      	cmp	r4, r8
 8010cfa:	d936      	bls.n	8010d6a <__hexnan+0x112>
 8010cfc:	f1a8 0204 	sub.w	r2, r8, #4
 8010d00:	4623      	mov	r3, r4
 8010d02:	f853 1b04 	ldr.w	r1, [r3], #4
 8010d06:	f842 1f04 	str.w	r1, [r2, #4]!
 8010d0a:	429f      	cmp	r7, r3
 8010d0c:	d2f9      	bcs.n	8010d02 <__hexnan+0xaa>
 8010d0e:	1b3b      	subs	r3, r7, r4
 8010d10:	f023 0303 	bic.w	r3, r3, #3
 8010d14:	3304      	adds	r3, #4
 8010d16:	3401      	adds	r4, #1
 8010d18:	3e03      	subs	r6, #3
 8010d1a:	42b4      	cmp	r4, r6
 8010d1c:	bf88      	it	hi
 8010d1e:	2304      	movhi	r3, #4
 8010d20:	4443      	add	r3, r8
 8010d22:	2200      	movs	r2, #0
 8010d24:	f843 2b04 	str.w	r2, [r3], #4
 8010d28:	429f      	cmp	r7, r3
 8010d2a:	d2fb      	bcs.n	8010d24 <__hexnan+0xcc>
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	b91b      	cbnz	r3, 8010d38 <__hexnan+0xe0>
 8010d30:	4547      	cmp	r7, r8
 8010d32:	d128      	bne.n	8010d86 <__hexnan+0x12e>
 8010d34:	2301      	movs	r3, #1
 8010d36:	603b      	str	r3, [r7, #0]
 8010d38:	2005      	movs	r0, #5
 8010d3a:	b007      	add	sp, #28
 8010d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d40:	3501      	adds	r5, #1
 8010d42:	2d08      	cmp	r5, #8
 8010d44:	f10b 0b01 	add.w	fp, fp, #1
 8010d48:	dd06      	ble.n	8010d58 <__hexnan+0x100>
 8010d4a:	4544      	cmp	r4, r8
 8010d4c:	d9c1      	bls.n	8010cd2 <__hexnan+0x7a>
 8010d4e:	2300      	movs	r3, #0
 8010d50:	f844 3c04 	str.w	r3, [r4, #-4]
 8010d54:	2501      	movs	r5, #1
 8010d56:	3c04      	subs	r4, #4
 8010d58:	6822      	ldr	r2, [r4, #0]
 8010d5a:	f000 000f 	and.w	r0, r0, #15
 8010d5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010d62:	6020      	str	r0, [r4, #0]
 8010d64:	e7b5      	b.n	8010cd2 <__hexnan+0x7a>
 8010d66:	2508      	movs	r5, #8
 8010d68:	e7b3      	b.n	8010cd2 <__hexnan+0x7a>
 8010d6a:	9b01      	ldr	r3, [sp, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d0dd      	beq.n	8010d2c <__hexnan+0xd4>
 8010d70:	f1c3 0320 	rsb	r3, r3, #32
 8010d74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010d78:	40da      	lsrs	r2, r3
 8010d7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010d7e:	4013      	ands	r3, r2
 8010d80:	f846 3c04 	str.w	r3, [r6, #-4]
 8010d84:	e7d2      	b.n	8010d2c <__hexnan+0xd4>
 8010d86:	3f04      	subs	r7, #4
 8010d88:	e7d0      	b.n	8010d2c <__hexnan+0xd4>
 8010d8a:	2004      	movs	r0, #4
 8010d8c:	e7d5      	b.n	8010d3a <__hexnan+0xe2>

08010d8e <__ascii_mbtowc>:
 8010d8e:	b082      	sub	sp, #8
 8010d90:	b901      	cbnz	r1, 8010d94 <__ascii_mbtowc+0x6>
 8010d92:	a901      	add	r1, sp, #4
 8010d94:	b142      	cbz	r2, 8010da8 <__ascii_mbtowc+0x1a>
 8010d96:	b14b      	cbz	r3, 8010dac <__ascii_mbtowc+0x1e>
 8010d98:	7813      	ldrb	r3, [r2, #0]
 8010d9a:	600b      	str	r3, [r1, #0]
 8010d9c:	7812      	ldrb	r2, [r2, #0]
 8010d9e:	1e10      	subs	r0, r2, #0
 8010da0:	bf18      	it	ne
 8010da2:	2001      	movne	r0, #1
 8010da4:	b002      	add	sp, #8
 8010da6:	4770      	bx	lr
 8010da8:	4610      	mov	r0, r2
 8010daa:	e7fb      	b.n	8010da4 <__ascii_mbtowc+0x16>
 8010dac:	f06f 0001 	mvn.w	r0, #1
 8010db0:	e7f8      	b.n	8010da4 <__ascii_mbtowc+0x16>

08010db2 <_realloc_r>:
 8010db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db6:	4607      	mov	r7, r0
 8010db8:	4614      	mov	r4, r2
 8010dba:	460d      	mov	r5, r1
 8010dbc:	b921      	cbnz	r1, 8010dc8 <_realloc_r+0x16>
 8010dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc2:	4611      	mov	r1, r2
 8010dc4:	f7fb bbe0 	b.w	800c588 <_malloc_r>
 8010dc8:	b92a      	cbnz	r2, 8010dd6 <_realloc_r+0x24>
 8010dca:	f7fd fb45 	bl	800e458 <_free_r>
 8010dce:	4625      	mov	r5, r4
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd6:	f000 f8b2 	bl	8010f3e <_malloc_usable_size_r>
 8010dda:	4284      	cmp	r4, r0
 8010ddc:	4606      	mov	r6, r0
 8010dde:	d802      	bhi.n	8010de6 <_realloc_r+0x34>
 8010de0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010de4:	d8f4      	bhi.n	8010dd0 <_realloc_r+0x1e>
 8010de6:	4621      	mov	r1, r4
 8010de8:	4638      	mov	r0, r7
 8010dea:	f7fb fbcd 	bl	800c588 <_malloc_r>
 8010dee:	4680      	mov	r8, r0
 8010df0:	b908      	cbnz	r0, 8010df6 <_realloc_r+0x44>
 8010df2:	4645      	mov	r5, r8
 8010df4:	e7ec      	b.n	8010dd0 <_realloc_r+0x1e>
 8010df6:	42b4      	cmp	r4, r6
 8010df8:	4622      	mov	r2, r4
 8010dfa:	4629      	mov	r1, r5
 8010dfc:	bf28      	it	cs
 8010dfe:	4632      	movcs	r2, r6
 8010e00:	f7fc fcbd 	bl	800d77e <memcpy>
 8010e04:	4629      	mov	r1, r5
 8010e06:	4638      	mov	r0, r7
 8010e08:	f7fd fb26 	bl	800e458 <_free_r>
 8010e0c:	e7f1      	b.n	8010df2 <_realloc_r+0x40>
	...

08010e10 <_strtoul_l.isra.0>:
 8010e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e14:	4e34      	ldr	r6, [pc, #208]	@ (8010ee8 <_strtoul_l.isra.0+0xd8>)
 8010e16:	4686      	mov	lr, r0
 8010e18:	460d      	mov	r5, r1
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e20:	5d37      	ldrb	r7, [r6, r4]
 8010e22:	f017 0708 	ands.w	r7, r7, #8
 8010e26:	d1f8      	bne.n	8010e1a <_strtoul_l.isra.0+0xa>
 8010e28:	2c2d      	cmp	r4, #45	@ 0x2d
 8010e2a:	d110      	bne.n	8010e4e <_strtoul_l.isra.0+0x3e>
 8010e2c:	782c      	ldrb	r4, [r5, #0]
 8010e2e:	2701      	movs	r7, #1
 8010e30:	1c85      	adds	r5, r0, #2
 8010e32:	f033 0010 	bics.w	r0, r3, #16
 8010e36:	d115      	bne.n	8010e64 <_strtoul_l.isra.0+0x54>
 8010e38:	2c30      	cmp	r4, #48	@ 0x30
 8010e3a:	d10d      	bne.n	8010e58 <_strtoul_l.isra.0+0x48>
 8010e3c:	7828      	ldrb	r0, [r5, #0]
 8010e3e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010e42:	2858      	cmp	r0, #88	@ 0x58
 8010e44:	d108      	bne.n	8010e58 <_strtoul_l.isra.0+0x48>
 8010e46:	786c      	ldrb	r4, [r5, #1]
 8010e48:	3502      	adds	r5, #2
 8010e4a:	2310      	movs	r3, #16
 8010e4c:	e00a      	b.n	8010e64 <_strtoul_l.isra.0+0x54>
 8010e4e:	2c2b      	cmp	r4, #43	@ 0x2b
 8010e50:	bf04      	itt	eq
 8010e52:	782c      	ldrbeq	r4, [r5, #0]
 8010e54:	1c85      	addeq	r5, r0, #2
 8010e56:	e7ec      	b.n	8010e32 <_strtoul_l.isra.0+0x22>
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1f6      	bne.n	8010e4a <_strtoul_l.isra.0+0x3a>
 8010e5c:	2c30      	cmp	r4, #48	@ 0x30
 8010e5e:	bf14      	ite	ne
 8010e60:	230a      	movne	r3, #10
 8010e62:	2308      	moveq	r3, #8
 8010e64:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010e68:	2600      	movs	r6, #0
 8010e6a:	fbb8 f8f3 	udiv	r8, r8, r3
 8010e6e:	fb03 f908 	mul.w	r9, r3, r8
 8010e72:	ea6f 0909 	mvn.w	r9, r9
 8010e76:	4630      	mov	r0, r6
 8010e78:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010e7c:	f1bc 0f09 	cmp.w	ip, #9
 8010e80:	d810      	bhi.n	8010ea4 <_strtoul_l.isra.0+0x94>
 8010e82:	4664      	mov	r4, ip
 8010e84:	42a3      	cmp	r3, r4
 8010e86:	dd1e      	ble.n	8010ec6 <_strtoul_l.isra.0+0xb6>
 8010e88:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8010e8c:	d007      	beq.n	8010e9e <_strtoul_l.isra.0+0x8e>
 8010e8e:	4580      	cmp	r8, r0
 8010e90:	d316      	bcc.n	8010ec0 <_strtoul_l.isra.0+0xb0>
 8010e92:	d101      	bne.n	8010e98 <_strtoul_l.isra.0+0x88>
 8010e94:	45a1      	cmp	r9, r4
 8010e96:	db13      	blt.n	8010ec0 <_strtoul_l.isra.0+0xb0>
 8010e98:	fb00 4003 	mla	r0, r0, r3, r4
 8010e9c:	2601      	movs	r6, #1
 8010e9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ea2:	e7e9      	b.n	8010e78 <_strtoul_l.isra.0+0x68>
 8010ea4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010ea8:	f1bc 0f19 	cmp.w	ip, #25
 8010eac:	d801      	bhi.n	8010eb2 <_strtoul_l.isra.0+0xa2>
 8010eae:	3c37      	subs	r4, #55	@ 0x37
 8010eb0:	e7e8      	b.n	8010e84 <_strtoul_l.isra.0+0x74>
 8010eb2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010eb6:	f1bc 0f19 	cmp.w	ip, #25
 8010eba:	d804      	bhi.n	8010ec6 <_strtoul_l.isra.0+0xb6>
 8010ebc:	3c57      	subs	r4, #87	@ 0x57
 8010ebe:	e7e1      	b.n	8010e84 <_strtoul_l.isra.0+0x74>
 8010ec0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8010ec4:	e7eb      	b.n	8010e9e <_strtoul_l.isra.0+0x8e>
 8010ec6:	1c73      	adds	r3, r6, #1
 8010ec8:	d106      	bne.n	8010ed8 <_strtoul_l.isra.0+0xc8>
 8010eca:	2322      	movs	r3, #34	@ 0x22
 8010ecc:	f8ce 3000 	str.w	r3, [lr]
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	b932      	cbnz	r2, 8010ee2 <_strtoul_l.isra.0+0xd2>
 8010ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ed8:	b107      	cbz	r7, 8010edc <_strtoul_l.isra.0+0xcc>
 8010eda:	4240      	negs	r0, r0
 8010edc:	2a00      	cmp	r2, #0
 8010ede:	d0f9      	beq.n	8010ed4 <_strtoul_l.isra.0+0xc4>
 8010ee0:	b106      	cbz	r6, 8010ee4 <_strtoul_l.isra.0+0xd4>
 8010ee2:	1e69      	subs	r1, r5, #1
 8010ee4:	6011      	str	r1, [r2, #0]
 8010ee6:	e7f5      	b.n	8010ed4 <_strtoul_l.isra.0+0xc4>
 8010ee8:	08013641 	.word	0x08013641

08010eec <_strtoul_r>:
 8010eec:	f7ff bf90 	b.w	8010e10 <_strtoul_l.isra.0>

08010ef0 <__ascii_wctomb>:
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	4608      	mov	r0, r1
 8010ef4:	b141      	cbz	r1, 8010f08 <__ascii_wctomb+0x18>
 8010ef6:	2aff      	cmp	r2, #255	@ 0xff
 8010ef8:	d904      	bls.n	8010f04 <__ascii_wctomb+0x14>
 8010efa:	228a      	movs	r2, #138	@ 0x8a
 8010efc:	601a      	str	r2, [r3, #0]
 8010efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f02:	4770      	bx	lr
 8010f04:	700a      	strb	r2, [r1, #0]
 8010f06:	2001      	movs	r0, #1
 8010f08:	4770      	bx	lr
	...

08010f0c <fiprintf>:
 8010f0c:	b40e      	push	{r1, r2, r3}
 8010f0e:	b503      	push	{r0, r1, lr}
 8010f10:	4601      	mov	r1, r0
 8010f12:	ab03      	add	r3, sp, #12
 8010f14:	4805      	ldr	r0, [pc, #20]	@ (8010f2c <fiprintf+0x20>)
 8010f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f1a:	6800      	ldr	r0, [r0, #0]
 8010f1c:	9301      	str	r3, [sp, #4]
 8010f1e:	f000 f83f 	bl	8010fa0 <_vfiprintf_r>
 8010f22:	b002      	add	sp, #8
 8010f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f28:	b003      	add	sp, #12
 8010f2a:	4770      	bx	lr
 8010f2c:	20000034 	.word	0x20000034

08010f30 <abort>:
 8010f30:	b508      	push	{r3, lr}
 8010f32:	2006      	movs	r0, #6
 8010f34:	f000 fa08 	bl	8011348 <raise>
 8010f38:	2001      	movs	r0, #1
 8010f3a:	f7f2 fc19 	bl	8003770 <_exit>

08010f3e <_malloc_usable_size_r>:
 8010f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f42:	1f18      	subs	r0, r3, #4
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	bfbc      	itt	lt
 8010f48:	580b      	ldrlt	r3, [r1, r0]
 8010f4a:	18c0      	addlt	r0, r0, r3
 8010f4c:	4770      	bx	lr

08010f4e <__sfputc_r>:
 8010f4e:	6893      	ldr	r3, [r2, #8]
 8010f50:	3b01      	subs	r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	b410      	push	{r4}
 8010f56:	6093      	str	r3, [r2, #8]
 8010f58:	da08      	bge.n	8010f6c <__sfputc_r+0x1e>
 8010f5a:	6994      	ldr	r4, [r2, #24]
 8010f5c:	42a3      	cmp	r3, r4
 8010f5e:	db01      	blt.n	8010f64 <__sfputc_r+0x16>
 8010f60:	290a      	cmp	r1, #10
 8010f62:	d103      	bne.n	8010f6c <__sfputc_r+0x1e>
 8010f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f68:	f000 b932 	b.w	80111d0 <__swbuf_r>
 8010f6c:	6813      	ldr	r3, [r2, #0]
 8010f6e:	1c58      	adds	r0, r3, #1
 8010f70:	6010      	str	r0, [r2, #0]
 8010f72:	7019      	strb	r1, [r3, #0]
 8010f74:	4608      	mov	r0, r1
 8010f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f7a:	4770      	bx	lr

08010f7c <__sfputs_r>:
 8010f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f7e:	4606      	mov	r6, r0
 8010f80:	460f      	mov	r7, r1
 8010f82:	4614      	mov	r4, r2
 8010f84:	18d5      	adds	r5, r2, r3
 8010f86:	42ac      	cmp	r4, r5
 8010f88:	d101      	bne.n	8010f8e <__sfputs_r+0x12>
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	e007      	b.n	8010f9e <__sfputs_r+0x22>
 8010f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f92:	463a      	mov	r2, r7
 8010f94:	4630      	mov	r0, r6
 8010f96:	f7ff ffda 	bl	8010f4e <__sfputc_r>
 8010f9a:	1c43      	adds	r3, r0, #1
 8010f9c:	d1f3      	bne.n	8010f86 <__sfputs_r+0xa>
 8010f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010fa0 <_vfiprintf_r>:
 8010fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa4:	460d      	mov	r5, r1
 8010fa6:	b09d      	sub	sp, #116	@ 0x74
 8010fa8:	4614      	mov	r4, r2
 8010faa:	4698      	mov	r8, r3
 8010fac:	4606      	mov	r6, r0
 8010fae:	b118      	cbz	r0, 8010fb8 <_vfiprintf_r+0x18>
 8010fb0:	6a03      	ldr	r3, [r0, #32]
 8010fb2:	b90b      	cbnz	r3, 8010fb8 <_vfiprintf_r+0x18>
 8010fb4:	f7fc fa64 	bl	800d480 <__sinit>
 8010fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fba:	07d9      	lsls	r1, r3, #31
 8010fbc:	d405      	bmi.n	8010fca <_vfiprintf_r+0x2a>
 8010fbe:	89ab      	ldrh	r3, [r5, #12]
 8010fc0:	059a      	lsls	r2, r3, #22
 8010fc2:	d402      	bmi.n	8010fca <_vfiprintf_r+0x2a>
 8010fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fc6:	f7fc fbd8 	bl	800d77a <__retarget_lock_acquire_recursive>
 8010fca:	89ab      	ldrh	r3, [r5, #12]
 8010fcc:	071b      	lsls	r3, r3, #28
 8010fce:	d501      	bpl.n	8010fd4 <_vfiprintf_r+0x34>
 8010fd0:	692b      	ldr	r3, [r5, #16]
 8010fd2:	b99b      	cbnz	r3, 8010ffc <_vfiprintf_r+0x5c>
 8010fd4:	4629      	mov	r1, r5
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f000 f938 	bl	801124c <__swsetup_r>
 8010fdc:	b170      	cbz	r0, 8010ffc <_vfiprintf_r+0x5c>
 8010fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fe0:	07dc      	lsls	r4, r3, #31
 8010fe2:	d504      	bpl.n	8010fee <_vfiprintf_r+0x4e>
 8010fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fe8:	b01d      	add	sp, #116	@ 0x74
 8010fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fee:	89ab      	ldrh	r3, [r5, #12]
 8010ff0:	0598      	lsls	r0, r3, #22
 8010ff2:	d4f7      	bmi.n	8010fe4 <_vfiprintf_r+0x44>
 8010ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ff6:	f7fc fbc1 	bl	800d77c <__retarget_lock_release_recursive>
 8010ffa:	e7f3      	b.n	8010fe4 <_vfiprintf_r+0x44>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011000:	2320      	movs	r3, #32
 8011002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011006:	f8cd 800c 	str.w	r8, [sp, #12]
 801100a:	2330      	movs	r3, #48	@ 0x30
 801100c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80111bc <_vfiprintf_r+0x21c>
 8011010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011014:	f04f 0901 	mov.w	r9, #1
 8011018:	4623      	mov	r3, r4
 801101a:	469a      	mov	sl, r3
 801101c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011020:	b10a      	cbz	r2, 8011026 <_vfiprintf_r+0x86>
 8011022:	2a25      	cmp	r2, #37	@ 0x25
 8011024:	d1f9      	bne.n	801101a <_vfiprintf_r+0x7a>
 8011026:	ebba 0b04 	subs.w	fp, sl, r4
 801102a:	d00b      	beq.n	8011044 <_vfiprintf_r+0xa4>
 801102c:	465b      	mov	r3, fp
 801102e:	4622      	mov	r2, r4
 8011030:	4629      	mov	r1, r5
 8011032:	4630      	mov	r0, r6
 8011034:	f7ff ffa2 	bl	8010f7c <__sfputs_r>
 8011038:	3001      	adds	r0, #1
 801103a:	f000 80a7 	beq.w	801118c <_vfiprintf_r+0x1ec>
 801103e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011040:	445a      	add	r2, fp
 8011042:	9209      	str	r2, [sp, #36]	@ 0x24
 8011044:	f89a 3000 	ldrb.w	r3, [sl]
 8011048:	2b00      	cmp	r3, #0
 801104a:	f000 809f 	beq.w	801118c <_vfiprintf_r+0x1ec>
 801104e:	2300      	movs	r3, #0
 8011050:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011058:	f10a 0a01 	add.w	sl, sl, #1
 801105c:	9304      	str	r3, [sp, #16]
 801105e:	9307      	str	r3, [sp, #28]
 8011060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011064:	931a      	str	r3, [sp, #104]	@ 0x68
 8011066:	4654      	mov	r4, sl
 8011068:	2205      	movs	r2, #5
 801106a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801106e:	4853      	ldr	r0, [pc, #332]	@ (80111bc <_vfiprintf_r+0x21c>)
 8011070:	f7ef f8ce 	bl	8000210 <memchr>
 8011074:	9a04      	ldr	r2, [sp, #16]
 8011076:	b9d8      	cbnz	r0, 80110b0 <_vfiprintf_r+0x110>
 8011078:	06d1      	lsls	r1, r2, #27
 801107a:	bf44      	itt	mi
 801107c:	2320      	movmi	r3, #32
 801107e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011082:	0713      	lsls	r3, r2, #28
 8011084:	bf44      	itt	mi
 8011086:	232b      	movmi	r3, #43	@ 0x2b
 8011088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801108c:	f89a 3000 	ldrb.w	r3, [sl]
 8011090:	2b2a      	cmp	r3, #42	@ 0x2a
 8011092:	d015      	beq.n	80110c0 <_vfiprintf_r+0x120>
 8011094:	9a07      	ldr	r2, [sp, #28]
 8011096:	4654      	mov	r4, sl
 8011098:	2000      	movs	r0, #0
 801109a:	f04f 0c0a 	mov.w	ip, #10
 801109e:	4621      	mov	r1, r4
 80110a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110a4:	3b30      	subs	r3, #48	@ 0x30
 80110a6:	2b09      	cmp	r3, #9
 80110a8:	d94b      	bls.n	8011142 <_vfiprintf_r+0x1a2>
 80110aa:	b1b0      	cbz	r0, 80110da <_vfiprintf_r+0x13a>
 80110ac:	9207      	str	r2, [sp, #28]
 80110ae:	e014      	b.n	80110da <_vfiprintf_r+0x13a>
 80110b0:	eba0 0308 	sub.w	r3, r0, r8
 80110b4:	fa09 f303 	lsl.w	r3, r9, r3
 80110b8:	4313      	orrs	r3, r2
 80110ba:	9304      	str	r3, [sp, #16]
 80110bc:	46a2      	mov	sl, r4
 80110be:	e7d2      	b.n	8011066 <_vfiprintf_r+0xc6>
 80110c0:	9b03      	ldr	r3, [sp, #12]
 80110c2:	1d19      	adds	r1, r3, #4
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	9103      	str	r1, [sp, #12]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	bfbb      	ittet	lt
 80110cc:	425b      	neglt	r3, r3
 80110ce:	f042 0202 	orrlt.w	r2, r2, #2
 80110d2:	9307      	strge	r3, [sp, #28]
 80110d4:	9307      	strlt	r3, [sp, #28]
 80110d6:	bfb8      	it	lt
 80110d8:	9204      	strlt	r2, [sp, #16]
 80110da:	7823      	ldrb	r3, [r4, #0]
 80110dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80110de:	d10a      	bne.n	80110f6 <_vfiprintf_r+0x156>
 80110e0:	7863      	ldrb	r3, [r4, #1]
 80110e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80110e4:	d132      	bne.n	801114c <_vfiprintf_r+0x1ac>
 80110e6:	9b03      	ldr	r3, [sp, #12]
 80110e8:	1d1a      	adds	r2, r3, #4
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	9203      	str	r2, [sp, #12]
 80110ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110f2:	3402      	adds	r4, #2
 80110f4:	9305      	str	r3, [sp, #20]
 80110f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80111cc <_vfiprintf_r+0x22c>
 80110fa:	7821      	ldrb	r1, [r4, #0]
 80110fc:	2203      	movs	r2, #3
 80110fe:	4650      	mov	r0, sl
 8011100:	f7ef f886 	bl	8000210 <memchr>
 8011104:	b138      	cbz	r0, 8011116 <_vfiprintf_r+0x176>
 8011106:	9b04      	ldr	r3, [sp, #16]
 8011108:	eba0 000a 	sub.w	r0, r0, sl
 801110c:	2240      	movs	r2, #64	@ 0x40
 801110e:	4082      	lsls	r2, r0
 8011110:	4313      	orrs	r3, r2
 8011112:	3401      	adds	r4, #1
 8011114:	9304      	str	r3, [sp, #16]
 8011116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801111a:	4829      	ldr	r0, [pc, #164]	@ (80111c0 <_vfiprintf_r+0x220>)
 801111c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011120:	2206      	movs	r2, #6
 8011122:	f7ef f875 	bl	8000210 <memchr>
 8011126:	2800      	cmp	r0, #0
 8011128:	d03f      	beq.n	80111aa <_vfiprintf_r+0x20a>
 801112a:	4b26      	ldr	r3, [pc, #152]	@ (80111c4 <_vfiprintf_r+0x224>)
 801112c:	bb1b      	cbnz	r3, 8011176 <_vfiprintf_r+0x1d6>
 801112e:	9b03      	ldr	r3, [sp, #12]
 8011130:	3307      	adds	r3, #7
 8011132:	f023 0307 	bic.w	r3, r3, #7
 8011136:	3308      	adds	r3, #8
 8011138:	9303      	str	r3, [sp, #12]
 801113a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801113c:	443b      	add	r3, r7
 801113e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011140:	e76a      	b.n	8011018 <_vfiprintf_r+0x78>
 8011142:	fb0c 3202 	mla	r2, ip, r2, r3
 8011146:	460c      	mov	r4, r1
 8011148:	2001      	movs	r0, #1
 801114a:	e7a8      	b.n	801109e <_vfiprintf_r+0xfe>
 801114c:	2300      	movs	r3, #0
 801114e:	3401      	adds	r4, #1
 8011150:	9305      	str	r3, [sp, #20]
 8011152:	4619      	mov	r1, r3
 8011154:	f04f 0c0a 	mov.w	ip, #10
 8011158:	4620      	mov	r0, r4
 801115a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801115e:	3a30      	subs	r2, #48	@ 0x30
 8011160:	2a09      	cmp	r2, #9
 8011162:	d903      	bls.n	801116c <_vfiprintf_r+0x1cc>
 8011164:	2b00      	cmp	r3, #0
 8011166:	d0c6      	beq.n	80110f6 <_vfiprintf_r+0x156>
 8011168:	9105      	str	r1, [sp, #20]
 801116a:	e7c4      	b.n	80110f6 <_vfiprintf_r+0x156>
 801116c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011170:	4604      	mov	r4, r0
 8011172:	2301      	movs	r3, #1
 8011174:	e7f0      	b.n	8011158 <_vfiprintf_r+0x1b8>
 8011176:	ab03      	add	r3, sp, #12
 8011178:	9300      	str	r3, [sp, #0]
 801117a:	462a      	mov	r2, r5
 801117c:	4b12      	ldr	r3, [pc, #72]	@ (80111c8 <_vfiprintf_r+0x228>)
 801117e:	a904      	add	r1, sp, #16
 8011180:	4630      	mov	r0, r6
 8011182:	f7fb fb2d 	bl	800c7e0 <_printf_float>
 8011186:	4607      	mov	r7, r0
 8011188:	1c78      	adds	r0, r7, #1
 801118a:	d1d6      	bne.n	801113a <_vfiprintf_r+0x19a>
 801118c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801118e:	07d9      	lsls	r1, r3, #31
 8011190:	d405      	bmi.n	801119e <_vfiprintf_r+0x1fe>
 8011192:	89ab      	ldrh	r3, [r5, #12]
 8011194:	059a      	lsls	r2, r3, #22
 8011196:	d402      	bmi.n	801119e <_vfiprintf_r+0x1fe>
 8011198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801119a:	f7fc faef 	bl	800d77c <__retarget_lock_release_recursive>
 801119e:	89ab      	ldrh	r3, [r5, #12]
 80111a0:	065b      	lsls	r3, r3, #25
 80111a2:	f53f af1f 	bmi.w	8010fe4 <_vfiprintf_r+0x44>
 80111a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80111a8:	e71e      	b.n	8010fe8 <_vfiprintf_r+0x48>
 80111aa:	ab03      	add	r3, sp, #12
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	462a      	mov	r2, r5
 80111b0:	4b05      	ldr	r3, [pc, #20]	@ (80111c8 <_vfiprintf_r+0x228>)
 80111b2:	a904      	add	r1, sp, #16
 80111b4:	4630      	mov	r0, r6
 80111b6:	f7fb fdab 	bl	800cd10 <_printf_i>
 80111ba:	e7e4      	b.n	8011186 <_vfiprintf_r+0x1e6>
 80111bc:	0801341f 	.word	0x0801341f
 80111c0:	08013429 	.word	0x08013429
 80111c4:	0800c7e1 	.word	0x0800c7e1
 80111c8:	08010f7d 	.word	0x08010f7d
 80111cc:	08013425 	.word	0x08013425

080111d0 <__swbuf_r>:
 80111d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111d2:	460e      	mov	r6, r1
 80111d4:	4614      	mov	r4, r2
 80111d6:	4605      	mov	r5, r0
 80111d8:	b118      	cbz	r0, 80111e2 <__swbuf_r+0x12>
 80111da:	6a03      	ldr	r3, [r0, #32]
 80111dc:	b90b      	cbnz	r3, 80111e2 <__swbuf_r+0x12>
 80111de:	f7fc f94f 	bl	800d480 <__sinit>
 80111e2:	69a3      	ldr	r3, [r4, #24]
 80111e4:	60a3      	str	r3, [r4, #8]
 80111e6:	89a3      	ldrh	r3, [r4, #12]
 80111e8:	071a      	lsls	r2, r3, #28
 80111ea:	d501      	bpl.n	80111f0 <__swbuf_r+0x20>
 80111ec:	6923      	ldr	r3, [r4, #16]
 80111ee:	b943      	cbnz	r3, 8011202 <__swbuf_r+0x32>
 80111f0:	4621      	mov	r1, r4
 80111f2:	4628      	mov	r0, r5
 80111f4:	f000 f82a 	bl	801124c <__swsetup_r>
 80111f8:	b118      	cbz	r0, 8011202 <__swbuf_r+0x32>
 80111fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80111fe:	4638      	mov	r0, r7
 8011200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011202:	6823      	ldr	r3, [r4, #0]
 8011204:	6922      	ldr	r2, [r4, #16]
 8011206:	1a98      	subs	r0, r3, r2
 8011208:	6963      	ldr	r3, [r4, #20]
 801120a:	b2f6      	uxtb	r6, r6
 801120c:	4283      	cmp	r3, r0
 801120e:	4637      	mov	r7, r6
 8011210:	dc05      	bgt.n	801121e <__swbuf_r+0x4e>
 8011212:	4621      	mov	r1, r4
 8011214:	4628      	mov	r0, r5
 8011216:	f7ff f993 	bl	8010540 <_fflush_r>
 801121a:	2800      	cmp	r0, #0
 801121c:	d1ed      	bne.n	80111fa <__swbuf_r+0x2a>
 801121e:	68a3      	ldr	r3, [r4, #8]
 8011220:	3b01      	subs	r3, #1
 8011222:	60a3      	str	r3, [r4, #8]
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	1c5a      	adds	r2, r3, #1
 8011228:	6022      	str	r2, [r4, #0]
 801122a:	701e      	strb	r6, [r3, #0]
 801122c:	6962      	ldr	r2, [r4, #20]
 801122e:	1c43      	adds	r3, r0, #1
 8011230:	429a      	cmp	r2, r3
 8011232:	d004      	beq.n	801123e <__swbuf_r+0x6e>
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	07db      	lsls	r3, r3, #31
 8011238:	d5e1      	bpl.n	80111fe <__swbuf_r+0x2e>
 801123a:	2e0a      	cmp	r6, #10
 801123c:	d1df      	bne.n	80111fe <__swbuf_r+0x2e>
 801123e:	4621      	mov	r1, r4
 8011240:	4628      	mov	r0, r5
 8011242:	f7ff f97d 	bl	8010540 <_fflush_r>
 8011246:	2800      	cmp	r0, #0
 8011248:	d0d9      	beq.n	80111fe <__swbuf_r+0x2e>
 801124a:	e7d6      	b.n	80111fa <__swbuf_r+0x2a>

0801124c <__swsetup_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4b29      	ldr	r3, [pc, #164]	@ (80112f4 <__swsetup_r+0xa8>)
 8011250:	4605      	mov	r5, r0
 8011252:	6818      	ldr	r0, [r3, #0]
 8011254:	460c      	mov	r4, r1
 8011256:	b118      	cbz	r0, 8011260 <__swsetup_r+0x14>
 8011258:	6a03      	ldr	r3, [r0, #32]
 801125a:	b90b      	cbnz	r3, 8011260 <__swsetup_r+0x14>
 801125c:	f7fc f910 	bl	800d480 <__sinit>
 8011260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011264:	0719      	lsls	r1, r3, #28
 8011266:	d422      	bmi.n	80112ae <__swsetup_r+0x62>
 8011268:	06da      	lsls	r2, r3, #27
 801126a:	d407      	bmi.n	801127c <__swsetup_r+0x30>
 801126c:	2209      	movs	r2, #9
 801126e:	602a      	str	r2, [r5, #0]
 8011270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011274:	81a3      	strh	r3, [r4, #12]
 8011276:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801127a:	e033      	b.n	80112e4 <__swsetup_r+0x98>
 801127c:	0758      	lsls	r0, r3, #29
 801127e:	d512      	bpl.n	80112a6 <__swsetup_r+0x5a>
 8011280:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011282:	b141      	cbz	r1, 8011296 <__swsetup_r+0x4a>
 8011284:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011288:	4299      	cmp	r1, r3
 801128a:	d002      	beq.n	8011292 <__swsetup_r+0x46>
 801128c:	4628      	mov	r0, r5
 801128e:	f7fd f8e3 	bl	800e458 <_free_r>
 8011292:	2300      	movs	r3, #0
 8011294:	6363      	str	r3, [r4, #52]	@ 0x34
 8011296:	89a3      	ldrh	r3, [r4, #12]
 8011298:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801129c:	81a3      	strh	r3, [r4, #12]
 801129e:	2300      	movs	r3, #0
 80112a0:	6063      	str	r3, [r4, #4]
 80112a2:	6923      	ldr	r3, [r4, #16]
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	89a3      	ldrh	r3, [r4, #12]
 80112a8:	f043 0308 	orr.w	r3, r3, #8
 80112ac:	81a3      	strh	r3, [r4, #12]
 80112ae:	6923      	ldr	r3, [r4, #16]
 80112b0:	b94b      	cbnz	r3, 80112c6 <__swsetup_r+0x7a>
 80112b2:	89a3      	ldrh	r3, [r4, #12]
 80112b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80112b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112bc:	d003      	beq.n	80112c6 <__swsetup_r+0x7a>
 80112be:	4621      	mov	r1, r4
 80112c0:	4628      	mov	r0, r5
 80112c2:	f000 f883 	bl	80113cc <__smakebuf_r>
 80112c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112ca:	f013 0201 	ands.w	r2, r3, #1
 80112ce:	d00a      	beq.n	80112e6 <__swsetup_r+0x9a>
 80112d0:	2200      	movs	r2, #0
 80112d2:	60a2      	str	r2, [r4, #8]
 80112d4:	6962      	ldr	r2, [r4, #20]
 80112d6:	4252      	negs	r2, r2
 80112d8:	61a2      	str	r2, [r4, #24]
 80112da:	6922      	ldr	r2, [r4, #16]
 80112dc:	b942      	cbnz	r2, 80112f0 <__swsetup_r+0xa4>
 80112de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80112e2:	d1c5      	bne.n	8011270 <__swsetup_r+0x24>
 80112e4:	bd38      	pop	{r3, r4, r5, pc}
 80112e6:	0799      	lsls	r1, r3, #30
 80112e8:	bf58      	it	pl
 80112ea:	6962      	ldrpl	r2, [r4, #20]
 80112ec:	60a2      	str	r2, [r4, #8]
 80112ee:	e7f4      	b.n	80112da <__swsetup_r+0x8e>
 80112f0:	2000      	movs	r0, #0
 80112f2:	e7f7      	b.n	80112e4 <__swsetup_r+0x98>
 80112f4:	20000034 	.word	0x20000034

080112f8 <_raise_r>:
 80112f8:	291f      	cmp	r1, #31
 80112fa:	b538      	push	{r3, r4, r5, lr}
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	d904      	bls.n	801130c <_raise_r+0x14>
 8011302:	2316      	movs	r3, #22
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801130e:	b112      	cbz	r2, 8011316 <_raise_r+0x1e>
 8011310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011314:	b94b      	cbnz	r3, 801132a <_raise_r+0x32>
 8011316:	4628      	mov	r0, r5
 8011318:	f000 f830 	bl	801137c <_getpid_r>
 801131c:	4622      	mov	r2, r4
 801131e:	4601      	mov	r1, r0
 8011320:	4628      	mov	r0, r5
 8011322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011326:	f000 b817 	b.w	8011358 <_kill_r>
 801132a:	2b01      	cmp	r3, #1
 801132c:	d00a      	beq.n	8011344 <_raise_r+0x4c>
 801132e:	1c59      	adds	r1, r3, #1
 8011330:	d103      	bne.n	801133a <_raise_r+0x42>
 8011332:	2316      	movs	r3, #22
 8011334:	6003      	str	r3, [r0, #0]
 8011336:	2001      	movs	r0, #1
 8011338:	e7e7      	b.n	801130a <_raise_r+0x12>
 801133a:	2100      	movs	r1, #0
 801133c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011340:	4620      	mov	r0, r4
 8011342:	4798      	blx	r3
 8011344:	2000      	movs	r0, #0
 8011346:	e7e0      	b.n	801130a <_raise_r+0x12>

08011348 <raise>:
 8011348:	4b02      	ldr	r3, [pc, #8]	@ (8011354 <raise+0xc>)
 801134a:	4601      	mov	r1, r0
 801134c:	6818      	ldr	r0, [r3, #0]
 801134e:	f7ff bfd3 	b.w	80112f8 <_raise_r>
 8011352:	bf00      	nop
 8011354:	20000034 	.word	0x20000034

08011358 <_kill_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4d07      	ldr	r5, [pc, #28]	@ (8011378 <_kill_r+0x20>)
 801135c:	2300      	movs	r3, #0
 801135e:	4604      	mov	r4, r0
 8011360:	4608      	mov	r0, r1
 8011362:	4611      	mov	r1, r2
 8011364:	602b      	str	r3, [r5, #0]
 8011366:	f7f2 f9f3 	bl	8003750 <_kill>
 801136a:	1c43      	adds	r3, r0, #1
 801136c:	d102      	bne.n	8011374 <_kill_r+0x1c>
 801136e:	682b      	ldr	r3, [r5, #0]
 8011370:	b103      	cbz	r3, 8011374 <_kill_r+0x1c>
 8011372:	6023      	str	r3, [r4, #0]
 8011374:	bd38      	pop	{r3, r4, r5, pc}
 8011376:	bf00      	nop
 8011378:	20001c30 	.word	0x20001c30

0801137c <_getpid_r>:
 801137c:	f7f2 b9e0 	b.w	8003740 <_getpid>

08011380 <__swhatbuf_r>:
 8011380:	b570      	push	{r4, r5, r6, lr}
 8011382:	460c      	mov	r4, r1
 8011384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011388:	2900      	cmp	r1, #0
 801138a:	b096      	sub	sp, #88	@ 0x58
 801138c:	4615      	mov	r5, r2
 801138e:	461e      	mov	r6, r3
 8011390:	da0d      	bge.n	80113ae <__swhatbuf_r+0x2e>
 8011392:	89a3      	ldrh	r3, [r4, #12]
 8011394:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011398:	f04f 0100 	mov.w	r1, #0
 801139c:	bf14      	ite	ne
 801139e:	2340      	movne	r3, #64	@ 0x40
 80113a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80113a4:	2000      	movs	r0, #0
 80113a6:	6031      	str	r1, [r6, #0]
 80113a8:	602b      	str	r3, [r5, #0]
 80113aa:	b016      	add	sp, #88	@ 0x58
 80113ac:	bd70      	pop	{r4, r5, r6, pc}
 80113ae:	466a      	mov	r2, sp
 80113b0:	f000 f848 	bl	8011444 <_fstat_r>
 80113b4:	2800      	cmp	r0, #0
 80113b6:	dbec      	blt.n	8011392 <__swhatbuf_r+0x12>
 80113b8:	9901      	ldr	r1, [sp, #4]
 80113ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80113be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80113c2:	4259      	negs	r1, r3
 80113c4:	4159      	adcs	r1, r3
 80113c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80113ca:	e7eb      	b.n	80113a4 <__swhatbuf_r+0x24>

080113cc <__smakebuf_r>:
 80113cc:	898b      	ldrh	r3, [r1, #12]
 80113ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80113d0:	079d      	lsls	r5, r3, #30
 80113d2:	4606      	mov	r6, r0
 80113d4:	460c      	mov	r4, r1
 80113d6:	d507      	bpl.n	80113e8 <__smakebuf_r+0x1c>
 80113d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80113dc:	6023      	str	r3, [r4, #0]
 80113de:	6123      	str	r3, [r4, #16]
 80113e0:	2301      	movs	r3, #1
 80113e2:	6163      	str	r3, [r4, #20]
 80113e4:	b003      	add	sp, #12
 80113e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113e8:	ab01      	add	r3, sp, #4
 80113ea:	466a      	mov	r2, sp
 80113ec:	f7ff ffc8 	bl	8011380 <__swhatbuf_r>
 80113f0:	9f00      	ldr	r7, [sp, #0]
 80113f2:	4605      	mov	r5, r0
 80113f4:	4639      	mov	r1, r7
 80113f6:	4630      	mov	r0, r6
 80113f8:	f7fb f8c6 	bl	800c588 <_malloc_r>
 80113fc:	b948      	cbnz	r0, 8011412 <__smakebuf_r+0x46>
 80113fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011402:	059a      	lsls	r2, r3, #22
 8011404:	d4ee      	bmi.n	80113e4 <__smakebuf_r+0x18>
 8011406:	f023 0303 	bic.w	r3, r3, #3
 801140a:	f043 0302 	orr.w	r3, r3, #2
 801140e:	81a3      	strh	r3, [r4, #12]
 8011410:	e7e2      	b.n	80113d8 <__smakebuf_r+0xc>
 8011412:	89a3      	ldrh	r3, [r4, #12]
 8011414:	6020      	str	r0, [r4, #0]
 8011416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801141a:	81a3      	strh	r3, [r4, #12]
 801141c:	9b01      	ldr	r3, [sp, #4]
 801141e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011422:	b15b      	cbz	r3, 801143c <__smakebuf_r+0x70>
 8011424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011428:	4630      	mov	r0, r6
 801142a:	f000 f81d 	bl	8011468 <_isatty_r>
 801142e:	b128      	cbz	r0, 801143c <__smakebuf_r+0x70>
 8011430:	89a3      	ldrh	r3, [r4, #12]
 8011432:	f023 0303 	bic.w	r3, r3, #3
 8011436:	f043 0301 	orr.w	r3, r3, #1
 801143a:	81a3      	strh	r3, [r4, #12]
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	431d      	orrs	r5, r3
 8011440:	81a5      	strh	r5, [r4, #12]
 8011442:	e7cf      	b.n	80113e4 <__smakebuf_r+0x18>

08011444 <_fstat_r>:
 8011444:	b538      	push	{r3, r4, r5, lr}
 8011446:	4d07      	ldr	r5, [pc, #28]	@ (8011464 <_fstat_r+0x20>)
 8011448:	2300      	movs	r3, #0
 801144a:	4604      	mov	r4, r0
 801144c:	4608      	mov	r0, r1
 801144e:	4611      	mov	r1, r2
 8011450:	602b      	str	r3, [r5, #0]
 8011452:	f7f2 f9dd 	bl	8003810 <_fstat>
 8011456:	1c43      	adds	r3, r0, #1
 8011458:	d102      	bne.n	8011460 <_fstat_r+0x1c>
 801145a:	682b      	ldr	r3, [r5, #0]
 801145c:	b103      	cbz	r3, 8011460 <_fstat_r+0x1c>
 801145e:	6023      	str	r3, [r4, #0]
 8011460:	bd38      	pop	{r3, r4, r5, pc}
 8011462:	bf00      	nop
 8011464:	20001c30 	.word	0x20001c30

08011468 <_isatty_r>:
 8011468:	b538      	push	{r3, r4, r5, lr}
 801146a:	4d06      	ldr	r5, [pc, #24]	@ (8011484 <_isatty_r+0x1c>)
 801146c:	2300      	movs	r3, #0
 801146e:	4604      	mov	r4, r0
 8011470:	4608      	mov	r0, r1
 8011472:	602b      	str	r3, [r5, #0]
 8011474:	f7f2 f9dc 	bl	8003830 <_isatty>
 8011478:	1c43      	adds	r3, r0, #1
 801147a:	d102      	bne.n	8011482 <_isatty_r+0x1a>
 801147c:	682b      	ldr	r3, [r5, #0]
 801147e:	b103      	cbz	r3, 8011482 <_isatty_r+0x1a>
 8011480:	6023      	str	r3, [r4, #0]
 8011482:	bd38      	pop	{r3, r4, r5, pc}
 8011484:	20001c30 	.word	0x20001c30

08011488 <acos>:
 8011488:	b538      	push	{r3, r4, r5, lr}
 801148a:	ed2d 8b02 	vpush	{d8}
 801148e:	ec55 4b10 	vmov	r4, r5, d0
 8011492:	f000 f9e9 	bl	8011868 <__ieee754_acos>
 8011496:	4622      	mov	r2, r4
 8011498:	462b      	mov	r3, r5
 801149a:	4620      	mov	r0, r4
 801149c:	4629      	mov	r1, r5
 801149e:	eeb0 8a40 	vmov.f32	s16, s0
 80114a2:	eef0 8a60 	vmov.f32	s17, s1
 80114a6:	f7ef fb61 	bl	8000b6c <__aeabi_dcmpun>
 80114aa:	b9a8      	cbnz	r0, 80114d8 <acos+0x50>
 80114ac:	ec45 4b10 	vmov	d0, r4, r5
 80114b0:	f000 f8f0 	bl	8011694 <fabs>
 80114b4:	4b0c      	ldr	r3, [pc, #48]	@ (80114e8 <acos+0x60>)
 80114b6:	ec51 0b10 	vmov	r0, r1, d0
 80114ba:	2200      	movs	r2, #0
 80114bc:	f7ef fb4c 	bl	8000b58 <__aeabi_dcmpgt>
 80114c0:	b150      	cbz	r0, 80114d8 <acos+0x50>
 80114c2:	f7fc f92f 	bl	800d724 <__errno>
 80114c6:	ecbd 8b02 	vpop	{d8}
 80114ca:	2321      	movs	r3, #33	@ 0x21
 80114cc:	6003      	str	r3, [r0, #0]
 80114ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114d2:	4806      	ldr	r0, [pc, #24]	@ (80114ec <acos+0x64>)
 80114d4:	f7ff b8fc 	b.w	80106d0 <nan>
 80114d8:	eeb0 0a48 	vmov.f32	s0, s16
 80114dc:	eef0 0a68 	vmov.f32	s1, s17
 80114e0:	ecbd 8b02 	vpop	{d8}
 80114e4:	bd38      	pop	{r3, r4, r5, pc}
 80114e6:	bf00      	nop
 80114e8:	3ff00000 	.word	0x3ff00000
 80114ec:	0801348e 	.word	0x0801348e

080114f0 <asin>:
 80114f0:	b538      	push	{r3, r4, r5, lr}
 80114f2:	ed2d 8b02 	vpush	{d8}
 80114f6:	ec55 4b10 	vmov	r4, r5, d0
 80114fa:	f000 fc11 	bl	8011d20 <__ieee754_asin>
 80114fe:	4622      	mov	r2, r4
 8011500:	462b      	mov	r3, r5
 8011502:	4620      	mov	r0, r4
 8011504:	4629      	mov	r1, r5
 8011506:	eeb0 8a40 	vmov.f32	s16, s0
 801150a:	eef0 8a60 	vmov.f32	s17, s1
 801150e:	f7ef fb2d 	bl	8000b6c <__aeabi_dcmpun>
 8011512:	b9a8      	cbnz	r0, 8011540 <asin+0x50>
 8011514:	ec45 4b10 	vmov	d0, r4, r5
 8011518:	f000 f8bc 	bl	8011694 <fabs>
 801151c:	4b0c      	ldr	r3, [pc, #48]	@ (8011550 <asin+0x60>)
 801151e:	ec51 0b10 	vmov	r0, r1, d0
 8011522:	2200      	movs	r2, #0
 8011524:	f7ef fb18 	bl	8000b58 <__aeabi_dcmpgt>
 8011528:	b150      	cbz	r0, 8011540 <asin+0x50>
 801152a:	f7fc f8fb 	bl	800d724 <__errno>
 801152e:	ecbd 8b02 	vpop	{d8}
 8011532:	2321      	movs	r3, #33	@ 0x21
 8011534:	6003      	str	r3, [r0, #0]
 8011536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801153a:	4806      	ldr	r0, [pc, #24]	@ (8011554 <asin+0x64>)
 801153c:	f7ff b8c8 	b.w	80106d0 <nan>
 8011540:	eeb0 0a48 	vmov.f32	s0, s16
 8011544:	eef0 0a68 	vmov.f32	s1, s17
 8011548:	ecbd 8b02 	vpop	{d8}
 801154c:	bd38      	pop	{r3, r4, r5, pc}
 801154e:	bf00      	nop
 8011550:	3ff00000 	.word	0x3ff00000
 8011554:	0801348e 	.word	0x0801348e

08011558 <atan2>:
 8011558:	f000 bde6 	b.w	8012128 <__ieee754_atan2>

0801155c <pow>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	ed2d 8b02 	vpush	{d8}
 8011562:	eeb0 8a40 	vmov.f32	s16, s0
 8011566:	eef0 8a60 	vmov.f32	s17, s1
 801156a:	ec55 4b11 	vmov	r4, r5, d1
 801156e:	f000 fea3 	bl	80122b8 <__ieee754_pow>
 8011572:	4622      	mov	r2, r4
 8011574:	462b      	mov	r3, r5
 8011576:	4620      	mov	r0, r4
 8011578:	4629      	mov	r1, r5
 801157a:	ec57 6b10 	vmov	r6, r7, d0
 801157e:	f7ef faf5 	bl	8000b6c <__aeabi_dcmpun>
 8011582:	2800      	cmp	r0, #0
 8011584:	d13b      	bne.n	80115fe <pow+0xa2>
 8011586:	ec51 0b18 	vmov	r0, r1, d8
 801158a:	2200      	movs	r2, #0
 801158c:	2300      	movs	r3, #0
 801158e:	f7ef fabb 	bl	8000b08 <__aeabi_dcmpeq>
 8011592:	b1b8      	cbz	r0, 80115c4 <pow+0x68>
 8011594:	2200      	movs	r2, #0
 8011596:	2300      	movs	r3, #0
 8011598:	4620      	mov	r0, r4
 801159a:	4629      	mov	r1, r5
 801159c:	f7ef fab4 	bl	8000b08 <__aeabi_dcmpeq>
 80115a0:	2800      	cmp	r0, #0
 80115a2:	d146      	bne.n	8011632 <pow+0xd6>
 80115a4:	ec45 4b10 	vmov	d0, r4, r5
 80115a8:	f000 f87c 	bl	80116a4 <finite>
 80115ac:	b338      	cbz	r0, 80115fe <pow+0xa2>
 80115ae:	2200      	movs	r2, #0
 80115b0:	2300      	movs	r3, #0
 80115b2:	4620      	mov	r0, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	f7ef fab1 	bl	8000b1c <__aeabi_dcmplt>
 80115ba:	b300      	cbz	r0, 80115fe <pow+0xa2>
 80115bc:	f7fc f8b2 	bl	800d724 <__errno>
 80115c0:	2322      	movs	r3, #34	@ 0x22
 80115c2:	e01b      	b.n	80115fc <pow+0xa0>
 80115c4:	ec47 6b10 	vmov	d0, r6, r7
 80115c8:	f000 f86c 	bl	80116a4 <finite>
 80115cc:	b9e0      	cbnz	r0, 8011608 <pow+0xac>
 80115ce:	eeb0 0a48 	vmov.f32	s0, s16
 80115d2:	eef0 0a68 	vmov.f32	s1, s17
 80115d6:	f000 f865 	bl	80116a4 <finite>
 80115da:	b1a8      	cbz	r0, 8011608 <pow+0xac>
 80115dc:	ec45 4b10 	vmov	d0, r4, r5
 80115e0:	f000 f860 	bl	80116a4 <finite>
 80115e4:	b180      	cbz	r0, 8011608 <pow+0xac>
 80115e6:	4632      	mov	r2, r6
 80115e8:	463b      	mov	r3, r7
 80115ea:	4630      	mov	r0, r6
 80115ec:	4639      	mov	r1, r7
 80115ee:	f7ef fabd 	bl	8000b6c <__aeabi_dcmpun>
 80115f2:	2800      	cmp	r0, #0
 80115f4:	d0e2      	beq.n	80115bc <pow+0x60>
 80115f6:	f7fc f895 	bl	800d724 <__errno>
 80115fa:	2321      	movs	r3, #33	@ 0x21
 80115fc:	6003      	str	r3, [r0, #0]
 80115fe:	ecbd 8b02 	vpop	{d8}
 8011602:	ec47 6b10 	vmov	d0, r6, r7
 8011606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011608:	2200      	movs	r2, #0
 801160a:	2300      	movs	r3, #0
 801160c:	4630      	mov	r0, r6
 801160e:	4639      	mov	r1, r7
 8011610:	f7ef fa7a 	bl	8000b08 <__aeabi_dcmpeq>
 8011614:	2800      	cmp	r0, #0
 8011616:	d0f2      	beq.n	80115fe <pow+0xa2>
 8011618:	eeb0 0a48 	vmov.f32	s0, s16
 801161c:	eef0 0a68 	vmov.f32	s1, s17
 8011620:	f000 f840 	bl	80116a4 <finite>
 8011624:	2800      	cmp	r0, #0
 8011626:	d0ea      	beq.n	80115fe <pow+0xa2>
 8011628:	ec45 4b10 	vmov	d0, r4, r5
 801162c:	f000 f83a 	bl	80116a4 <finite>
 8011630:	e7c3      	b.n	80115ba <pow+0x5e>
 8011632:	4f01      	ldr	r7, [pc, #4]	@ (8011638 <pow+0xdc>)
 8011634:	2600      	movs	r6, #0
 8011636:	e7e2      	b.n	80115fe <pow+0xa2>
 8011638:	3ff00000 	.word	0x3ff00000

0801163c <sqrt>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	ed2d 8b02 	vpush	{d8}
 8011642:	ec55 4b10 	vmov	r4, r5, d0
 8011646:	f000 f839 	bl	80116bc <__ieee754_sqrt>
 801164a:	4622      	mov	r2, r4
 801164c:	462b      	mov	r3, r5
 801164e:	4620      	mov	r0, r4
 8011650:	4629      	mov	r1, r5
 8011652:	eeb0 8a40 	vmov.f32	s16, s0
 8011656:	eef0 8a60 	vmov.f32	s17, s1
 801165a:	f7ef fa87 	bl	8000b6c <__aeabi_dcmpun>
 801165e:	b990      	cbnz	r0, 8011686 <sqrt+0x4a>
 8011660:	2200      	movs	r2, #0
 8011662:	2300      	movs	r3, #0
 8011664:	4620      	mov	r0, r4
 8011666:	4629      	mov	r1, r5
 8011668:	f7ef fa58 	bl	8000b1c <__aeabi_dcmplt>
 801166c:	b158      	cbz	r0, 8011686 <sqrt+0x4a>
 801166e:	f7fc f859 	bl	800d724 <__errno>
 8011672:	2321      	movs	r3, #33	@ 0x21
 8011674:	6003      	str	r3, [r0, #0]
 8011676:	2200      	movs	r2, #0
 8011678:	2300      	movs	r3, #0
 801167a:	4610      	mov	r0, r2
 801167c:	4619      	mov	r1, r3
 801167e:	f7ef f905 	bl	800088c <__aeabi_ddiv>
 8011682:	ec41 0b18 	vmov	d8, r0, r1
 8011686:	eeb0 0a48 	vmov.f32	s0, s16
 801168a:	eef0 0a68 	vmov.f32	s1, s17
 801168e:	ecbd 8b02 	vpop	{d8}
 8011692:	bd38      	pop	{r3, r4, r5, pc}

08011694 <fabs>:
 8011694:	ec51 0b10 	vmov	r0, r1, d0
 8011698:	4602      	mov	r2, r0
 801169a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801169e:	ec43 2b10 	vmov	d0, r2, r3
 80116a2:	4770      	bx	lr

080116a4 <finite>:
 80116a4:	b082      	sub	sp, #8
 80116a6:	ed8d 0b00 	vstr	d0, [sp]
 80116aa:	9801      	ldr	r0, [sp, #4]
 80116ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80116b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80116b4:	0fc0      	lsrs	r0, r0, #31
 80116b6:	b002      	add	sp, #8
 80116b8:	4770      	bx	lr
	...

080116bc <__ieee754_sqrt>:
 80116bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c0:	4a66      	ldr	r2, [pc, #408]	@ (801185c <__ieee754_sqrt+0x1a0>)
 80116c2:	ec55 4b10 	vmov	r4, r5, d0
 80116c6:	43aa      	bics	r2, r5
 80116c8:	462b      	mov	r3, r5
 80116ca:	4621      	mov	r1, r4
 80116cc:	d110      	bne.n	80116f0 <__ieee754_sqrt+0x34>
 80116ce:	4622      	mov	r2, r4
 80116d0:	4620      	mov	r0, r4
 80116d2:	4629      	mov	r1, r5
 80116d4:	f7ee ffb0 	bl	8000638 <__aeabi_dmul>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4620      	mov	r0, r4
 80116de:	4629      	mov	r1, r5
 80116e0:	f7ee fdf4 	bl	80002cc <__adddf3>
 80116e4:	4604      	mov	r4, r0
 80116e6:	460d      	mov	r5, r1
 80116e8:	ec45 4b10 	vmov	d0, r4, r5
 80116ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f0:	2d00      	cmp	r5, #0
 80116f2:	dc0e      	bgt.n	8011712 <__ieee754_sqrt+0x56>
 80116f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80116f8:	4322      	orrs	r2, r4
 80116fa:	d0f5      	beq.n	80116e8 <__ieee754_sqrt+0x2c>
 80116fc:	b19d      	cbz	r5, 8011726 <__ieee754_sqrt+0x6a>
 80116fe:	4622      	mov	r2, r4
 8011700:	4620      	mov	r0, r4
 8011702:	4629      	mov	r1, r5
 8011704:	f7ee fde0 	bl	80002c8 <__aeabi_dsub>
 8011708:	4602      	mov	r2, r0
 801170a:	460b      	mov	r3, r1
 801170c:	f7ef f8be 	bl	800088c <__aeabi_ddiv>
 8011710:	e7e8      	b.n	80116e4 <__ieee754_sqrt+0x28>
 8011712:	152a      	asrs	r2, r5, #20
 8011714:	d115      	bne.n	8011742 <__ieee754_sqrt+0x86>
 8011716:	2000      	movs	r0, #0
 8011718:	e009      	b.n	801172e <__ieee754_sqrt+0x72>
 801171a:	0acb      	lsrs	r3, r1, #11
 801171c:	3a15      	subs	r2, #21
 801171e:	0549      	lsls	r1, r1, #21
 8011720:	2b00      	cmp	r3, #0
 8011722:	d0fa      	beq.n	801171a <__ieee754_sqrt+0x5e>
 8011724:	e7f7      	b.n	8011716 <__ieee754_sqrt+0x5a>
 8011726:	462a      	mov	r2, r5
 8011728:	e7fa      	b.n	8011720 <__ieee754_sqrt+0x64>
 801172a:	005b      	lsls	r3, r3, #1
 801172c:	3001      	adds	r0, #1
 801172e:	02dc      	lsls	r4, r3, #11
 8011730:	d5fb      	bpl.n	801172a <__ieee754_sqrt+0x6e>
 8011732:	1e44      	subs	r4, r0, #1
 8011734:	1b12      	subs	r2, r2, r4
 8011736:	f1c0 0420 	rsb	r4, r0, #32
 801173a:	fa21 f404 	lsr.w	r4, r1, r4
 801173e:	4323      	orrs	r3, r4
 8011740:	4081      	lsls	r1, r0
 8011742:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011746:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801174a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801174e:	07d2      	lsls	r2, r2, #31
 8011750:	bf5c      	itt	pl
 8011752:	005b      	lslpl	r3, r3, #1
 8011754:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011758:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801175c:	bf58      	it	pl
 801175e:	0049      	lslpl	r1, r1, #1
 8011760:	2600      	movs	r6, #0
 8011762:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011766:	107f      	asrs	r7, r7, #1
 8011768:	0049      	lsls	r1, r1, #1
 801176a:	2016      	movs	r0, #22
 801176c:	4632      	mov	r2, r6
 801176e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011772:	1915      	adds	r5, r2, r4
 8011774:	429d      	cmp	r5, r3
 8011776:	bfde      	ittt	le
 8011778:	192a      	addle	r2, r5, r4
 801177a:	1b5b      	suble	r3, r3, r5
 801177c:	1936      	addle	r6, r6, r4
 801177e:	0fcd      	lsrs	r5, r1, #31
 8011780:	3801      	subs	r0, #1
 8011782:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011786:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801178a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801178e:	d1f0      	bne.n	8011772 <__ieee754_sqrt+0xb6>
 8011790:	4605      	mov	r5, r0
 8011792:	2420      	movs	r4, #32
 8011794:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011798:	4293      	cmp	r3, r2
 801179a:	eb0c 0e00 	add.w	lr, ip, r0
 801179e:	dc02      	bgt.n	80117a6 <__ieee754_sqrt+0xea>
 80117a0:	d113      	bne.n	80117ca <__ieee754_sqrt+0x10e>
 80117a2:	458e      	cmp	lr, r1
 80117a4:	d811      	bhi.n	80117ca <__ieee754_sqrt+0x10e>
 80117a6:	f1be 0f00 	cmp.w	lr, #0
 80117aa:	eb0e 000c 	add.w	r0, lr, ip
 80117ae:	da3f      	bge.n	8011830 <__ieee754_sqrt+0x174>
 80117b0:	2800      	cmp	r0, #0
 80117b2:	db3d      	blt.n	8011830 <__ieee754_sqrt+0x174>
 80117b4:	f102 0801 	add.w	r8, r2, #1
 80117b8:	1a9b      	subs	r3, r3, r2
 80117ba:	458e      	cmp	lr, r1
 80117bc:	bf88      	it	hi
 80117be:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 80117c2:	eba1 010e 	sub.w	r1, r1, lr
 80117c6:	4465      	add	r5, ip
 80117c8:	4642      	mov	r2, r8
 80117ca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80117ce:	3c01      	subs	r4, #1
 80117d0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80117d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80117d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80117dc:	d1dc      	bne.n	8011798 <__ieee754_sqrt+0xdc>
 80117de:	4319      	orrs	r1, r3
 80117e0:	d01b      	beq.n	801181a <__ieee754_sqrt+0x15e>
 80117e2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8011860 <__ieee754_sqrt+0x1a4>
 80117e6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8011864 <__ieee754_sqrt+0x1a8>
 80117ea:	e9da 0100 	ldrd	r0, r1, [sl]
 80117ee:	e9db 2300 	ldrd	r2, r3, [fp]
 80117f2:	f7ee fd69 	bl	80002c8 <__aeabi_dsub>
 80117f6:	e9da 8900 	ldrd	r8, r9, [sl]
 80117fa:	4602      	mov	r2, r0
 80117fc:	460b      	mov	r3, r1
 80117fe:	4640      	mov	r0, r8
 8011800:	4649      	mov	r1, r9
 8011802:	f7ef f995 	bl	8000b30 <__aeabi_dcmple>
 8011806:	b140      	cbz	r0, 801181a <__ieee754_sqrt+0x15e>
 8011808:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 801180c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011810:	e9db 2300 	ldrd	r2, r3, [fp]
 8011814:	d10e      	bne.n	8011834 <__ieee754_sqrt+0x178>
 8011816:	3601      	adds	r6, #1
 8011818:	4625      	mov	r5, r4
 801181a:	1073      	asrs	r3, r6, #1
 801181c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011820:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011824:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8011828:	086b      	lsrs	r3, r5, #1
 801182a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801182e:	e759      	b.n	80116e4 <__ieee754_sqrt+0x28>
 8011830:	4690      	mov	r8, r2
 8011832:	e7c1      	b.n	80117b8 <__ieee754_sqrt+0xfc>
 8011834:	f7ee fd4a 	bl	80002cc <__adddf3>
 8011838:	e9da 8900 	ldrd	r8, r9, [sl]
 801183c:	4602      	mov	r2, r0
 801183e:	460b      	mov	r3, r1
 8011840:	4640      	mov	r0, r8
 8011842:	4649      	mov	r1, r9
 8011844:	f7ef f96a 	bl	8000b1c <__aeabi_dcmplt>
 8011848:	b120      	cbz	r0, 8011854 <__ieee754_sqrt+0x198>
 801184a:	1cab      	adds	r3, r5, #2
 801184c:	bf08      	it	eq
 801184e:	3601      	addeq	r6, #1
 8011850:	3502      	adds	r5, #2
 8011852:	e7e2      	b.n	801181a <__ieee754_sqrt+0x15e>
 8011854:	1c6b      	adds	r3, r5, #1
 8011856:	f023 0501 	bic.w	r5, r3, #1
 801185a:	e7de      	b.n	801181a <__ieee754_sqrt+0x15e>
 801185c:	7ff00000 	.word	0x7ff00000
 8011860:	08013750 	.word	0x08013750
 8011864:	08013748 	.word	0x08013748

08011868 <__ieee754_acos>:
 8011868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801186c:	ec55 4b10 	vmov	r4, r5, d0
 8011870:	49b7      	ldr	r1, [pc, #732]	@ (8011b50 <__ieee754_acos+0x2e8>)
 8011872:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011876:	428b      	cmp	r3, r1
 8011878:	d919      	bls.n	80118ae <__ieee754_acos+0x46>
 801187a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801187e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8011882:	4323      	orrs	r3, r4
 8011884:	d106      	bne.n	8011894 <__ieee754_acos+0x2c>
 8011886:	2d00      	cmp	r5, #0
 8011888:	f340 8210 	ble.w	8011cac <__ieee754_acos+0x444>
 801188c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8011ae0 <__ieee754_acos+0x278>
 8011890:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	4622      	mov	r2, r4
 8011896:	462b      	mov	r3, r5
 8011898:	4620      	mov	r0, r4
 801189a:	4629      	mov	r1, r5
 801189c:	f7ee fd14 	bl	80002c8 <__aeabi_dsub>
 80118a0:	4602      	mov	r2, r0
 80118a2:	460b      	mov	r3, r1
 80118a4:	f7ee fff2 	bl	800088c <__aeabi_ddiv>
 80118a8:	ec41 0b10 	vmov	d0, r0, r1
 80118ac:	e7f0      	b.n	8011890 <__ieee754_acos+0x28>
 80118ae:	49a9      	ldr	r1, [pc, #676]	@ (8011b54 <__ieee754_acos+0x2ec>)
 80118b0:	428b      	cmp	r3, r1
 80118b2:	f200 8085 	bhi.w	80119c0 <__ieee754_acos+0x158>
 80118b6:	4aa8      	ldr	r2, [pc, #672]	@ (8011b58 <__ieee754_acos+0x2f0>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	f240 81fa 	bls.w	8011cb2 <__ieee754_acos+0x44a>
 80118be:	4622      	mov	r2, r4
 80118c0:	462b      	mov	r3, r5
 80118c2:	4620      	mov	r0, r4
 80118c4:	4629      	mov	r1, r5
 80118c6:	f7ee feb7 	bl	8000638 <__aeabi_dmul>
 80118ca:	a387      	add	r3, pc, #540	@ (adr r3, 8011ae8 <__ieee754_acos+0x280>)
 80118cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d0:	4606      	mov	r6, r0
 80118d2:	460f      	mov	r7, r1
 80118d4:	f7ee feb0 	bl	8000638 <__aeabi_dmul>
 80118d8:	a385      	add	r3, pc, #532	@ (adr r3, 8011af0 <__ieee754_acos+0x288>)
 80118da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118de:	f7ee fcf5 	bl	80002cc <__adddf3>
 80118e2:	4632      	mov	r2, r6
 80118e4:	463b      	mov	r3, r7
 80118e6:	f7ee fea7 	bl	8000638 <__aeabi_dmul>
 80118ea:	a383      	add	r3, pc, #524	@ (adr r3, 8011af8 <__ieee754_acos+0x290>)
 80118ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f0:	f7ee fcea 	bl	80002c8 <__aeabi_dsub>
 80118f4:	4632      	mov	r2, r6
 80118f6:	463b      	mov	r3, r7
 80118f8:	f7ee fe9e 	bl	8000638 <__aeabi_dmul>
 80118fc:	a380      	add	r3, pc, #512	@ (adr r3, 8011b00 <__ieee754_acos+0x298>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	f7ee fce3 	bl	80002cc <__adddf3>
 8011906:	4632      	mov	r2, r6
 8011908:	463b      	mov	r3, r7
 801190a:	f7ee fe95 	bl	8000638 <__aeabi_dmul>
 801190e:	a37e      	add	r3, pc, #504	@ (adr r3, 8011b08 <__ieee754_acos+0x2a0>)
 8011910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011914:	f7ee fcd8 	bl	80002c8 <__aeabi_dsub>
 8011918:	4632      	mov	r2, r6
 801191a:	463b      	mov	r3, r7
 801191c:	f7ee fe8c 	bl	8000638 <__aeabi_dmul>
 8011920:	a37b      	add	r3, pc, #492	@ (adr r3, 8011b10 <__ieee754_acos+0x2a8>)
 8011922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011926:	f7ee fcd1 	bl	80002cc <__adddf3>
 801192a:	4632      	mov	r2, r6
 801192c:	463b      	mov	r3, r7
 801192e:	f7ee fe83 	bl	8000638 <__aeabi_dmul>
 8011932:	a379      	add	r3, pc, #484	@ (adr r3, 8011b18 <__ieee754_acos+0x2b0>)
 8011934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011938:	4680      	mov	r8, r0
 801193a:	4689      	mov	r9, r1
 801193c:	4630      	mov	r0, r6
 801193e:	4639      	mov	r1, r7
 8011940:	f7ee fe7a 	bl	8000638 <__aeabi_dmul>
 8011944:	a376      	add	r3, pc, #472	@ (adr r3, 8011b20 <__ieee754_acos+0x2b8>)
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	f7ee fcbd 	bl	80002c8 <__aeabi_dsub>
 801194e:	4632      	mov	r2, r6
 8011950:	463b      	mov	r3, r7
 8011952:	f7ee fe71 	bl	8000638 <__aeabi_dmul>
 8011956:	a374      	add	r3, pc, #464	@ (adr r3, 8011b28 <__ieee754_acos+0x2c0>)
 8011958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801195c:	f7ee fcb6 	bl	80002cc <__adddf3>
 8011960:	4632      	mov	r2, r6
 8011962:	463b      	mov	r3, r7
 8011964:	f7ee fe68 	bl	8000638 <__aeabi_dmul>
 8011968:	a371      	add	r3, pc, #452	@ (adr r3, 8011b30 <__ieee754_acos+0x2c8>)
 801196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196e:	f7ee fcab 	bl	80002c8 <__aeabi_dsub>
 8011972:	4632      	mov	r2, r6
 8011974:	463b      	mov	r3, r7
 8011976:	f7ee fe5f 	bl	8000638 <__aeabi_dmul>
 801197a:	4b78      	ldr	r3, [pc, #480]	@ (8011b5c <__ieee754_acos+0x2f4>)
 801197c:	2200      	movs	r2, #0
 801197e:	f7ee fca5 	bl	80002cc <__adddf3>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4640      	mov	r0, r8
 8011988:	4649      	mov	r1, r9
 801198a:	f7ee ff7f 	bl	800088c <__aeabi_ddiv>
 801198e:	4622      	mov	r2, r4
 8011990:	462b      	mov	r3, r5
 8011992:	f7ee fe51 	bl	8000638 <__aeabi_dmul>
 8011996:	4602      	mov	r2, r0
 8011998:	460b      	mov	r3, r1
 801199a:	a167      	add	r1, pc, #412	@ (adr r1, 8011b38 <__ieee754_acos+0x2d0>)
 801199c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119a0:	f7ee fc92 	bl	80002c8 <__aeabi_dsub>
 80119a4:	4602      	mov	r2, r0
 80119a6:	460b      	mov	r3, r1
 80119a8:	4620      	mov	r0, r4
 80119aa:	4629      	mov	r1, r5
 80119ac:	f7ee fc8c 	bl	80002c8 <__aeabi_dsub>
 80119b0:	4602      	mov	r2, r0
 80119b2:	460b      	mov	r3, r1
 80119b4:	a162      	add	r1, pc, #392	@ (adr r1, 8011b40 <__ieee754_acos+0x2d8>)
 80119b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119ba:	f7ee fc85 	bl	80002c8 <__aeabi_dsub>
 80119be:	e773      	b.n	80118a8 <__ieee754_acos+0x40>
 80119c0:	2d00      	cmp	r5, #0
 80119c2:	f280 80cf 	bge.w	8011b64 <__ieee754_acos+0x2fc>
 80119c6:	4b65      	ldr	r3, [pc, #404]	@ (8011b5c <__ieee754_acos+0x2f4>)
 80119c8:	2200      	movs	r2, #0
 80119ca:	4620      	mov	r0, r4
 80119cc:	4629      	mov	r1, r5
 80119ce:	f7ee fc7d 	bl	80002cc <__adddf3>
 80119d2:	4b63      	ldr	r3, [pc, #396]	@ (8011b60 <__ieee754_acos+0x2f8>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	f7ee fe2f 	bl	8000638 <__aeabi_dmul>
 80119da:	a343      	add	r3, pc, #268	@ (adr r3, 8011ae8 <__ieee754_acos+0x280>)
 80119dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e0:	4604      	mov	r4, r0
 80119e2:	460d      	mov	r5, r1
 80119e4:	f7ee fe28 	bl	8000638 <__aeabi_dmul>
 80119e8:	a341      	add	r3, pc, #260	@ (adr r3, 8011af0 <__ieee754_acos+0x288>)
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	f7ee fc6d 	bl	80002cc <__adddf3>
 80119f2:	4622      	mov	r2, r4
 80119f4:	462b      	mov	r3, r5
 80119f6:	f7ee fe1f 	bl	8000638 <__aeabi_dmul>
 80119fa:	a33f      	add	r3, pc, #252	@ (adr r3, 8011af8 <__ieee754_acos+0x290>)
 80119fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a00:	f7ee fc62 	bl	80002c8 <__aeabi_dsub>
 8011a04:	4622      	mov	r2, r4
 8011a06:	462b      	mov	r3, r5
 8011a08:	f7ee fe16 	bl	8000638 <__aeabi_dmul>
 8011a0c:	a33c      	add	r3, pc, #240	@ (adr r3, 8011b00 <__ieee754_acos+0x298>)
 8011a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a12:	f7ee fc5b 	bl	80002cc <__adddf3>
 8011a16:	4622      	mov	r2, r4
 8011a18:	462b      	mov	r3, r5
 8011a1a:	f7ee fe0d 	bl	8000638 <__aeabi_dmul>
 8011a1e:	a33a      	add	r3, pc, #232	@ (adr r3, 8011b08 <__ieee754_acos+0x2a0>)
 8011a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a24:	f7ee fc50 	bl	80002c8 <__aeabi_dsub>
 8011a28:	4622      	mov	r2, r4
 8011a2a:	462b      	mov	r3, r5
 8011a2c:	f7ee fe04 	bl	8000638 <__aeabi_dmul>
 8011a30:	a337      	add	r3, pc, #220	@ (adr r3, 8011b10 <__ieee754_acos+0x2a8>)
 8011a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a36:	f7ee fc49 	bl	80002cc <__adddf3>
 8011a3a:	4622      	mov	r2, r4
 8011a3c:	462b      	mov	r3, r5
 8011a3e:	f7ee fdfb 	bl	8000638 <__aeabi_dmul>
 8011a42:	a335      	add	r3, pc, #212	@ (adr r3, 8011b18 <__ieee754_acos+0x2b0>)
 8011a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a48:	4606      	mov	r6, r0
 8011a4a:	460f      	mov	r7, r1
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	4629      	mov	r1, r5
 8011a50:	f7ee fdf2 	bl	8000638 <__aeabi_dmul>
 8011a54:	a332      	add	r3, pc, #200	@ (adr r3, 8011b20 <__ieee754_acos+0x2b8>)
 8011a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5a:	f7ee fc35 	bl	80002c8 <__aeabi_dsub>
 8011a5e:	4622      	mov	r2, r4
 8011a60:	462b      	mov	r3, r5
 8011a62:	f7ee fde9 	bl	8000638 <__aeabi_dmul>
 8011a66:	a330      	add	r3, pc, #192	@ (adr r3, 8011b28 <__ieee754_acos+0x2c0>)
 8011a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6c:	f7ee fc2e 	bl	80002cc <__adddf3>
 8011a70:	4622      	mov	r2, r4
 8011a72:	462b      	mov	r3, r5
 8011a74:	f7ee fde0 	bl	8000638 <__aeabi_dmul>
 8011a78:	a32d      	add	r3, pc, #180	@ (adr r3, 8011b30 <__ieee754_acos+0x2c8>)
 8011a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7e:	f7ee fc23 	bl	80002c8 <__aeabi_dsub>
 8011a82:	4622      	mov	r2, r4
 8011a84:	462b      	mov	r3, r5
 8011a86:	f7ee fdd7 	bl	8000638 <__aeabi_dmul>
 8011a8a:	4b34      	ldr	r3, [pc, #208]	@ (8011b5c <__ieee754_acos+0x2f4>)
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f7ee fc1d 	bl	80002cc <__adddf3>
 8011a92:	ec45 4b10 	vmov	d0, r4, r5
 8011a96:	4680      	mov	r8, r0
 8011a98:	4689      	mov	r9, r1
 8011a9a:	f7ff fe0f 	bl	80116bc <__ieee754_sqrt>
 8011a9e:	ec55 4b10 	vmov	r4, r5, d0
 8011aa2:	4642      	mov	r2, r8
 8011aa4:	464b      	mov	r3, r9
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	4639      	mov	r1, r7
 8011aaa:	f7ee feef 	bl	800088c <__aeabi_ddiv>
 8011aae:	4622      	mov	r2, r4
 8011ab0:	462b      	mov	r3, r5
 8011ab2:	f7ee fdc1 	bl	8000638 <__aeabi_dmul>
 8011ab6:	a320      	add	r3, pc, #128	@ (adr r3, 8011b38 <__ieee754_acos+0x2d0>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f7ee fc04 	bl	80002c8 <__aeabi_dsub>
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	f7ee fc02 	bl	80002cc <__adddf3>
 8011ac8:	4602      	mov	r2, r0
 8011aca:	460b      	mov	r3, r1
 8011acc:	f7ee fbfe 	bl	80002cc <__adddf3>
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	460b      	mov	r3, r1
 8011ad4:	a11c      	add	r1, pc, #112	@ (adr r1, 8011b48 <__ieee754_acos+0x2e0>)
 8011ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ada:	e76e      	b.n	80119ba <__ieee754_acos+0x152>
 8011adc:	f3af 8000 	nop.w
	...
 8011ae8:	0dfdf709 	.word	0x0dfdf709
 8011aec:	3f023de1 	.word	0x3f023de1
 8011af0:	7501b288 	.word	0x7501b288
 8011af4:	3f49efe0 	.word	0x3f49efe0
 8011af8:	b5688f3b 	.word	0xb5688f3b
 8011afc:	3fa48228 	.word	0x3fa48228
 8011b00:	0e884455 	.word	0x0e884455
 8011b04:	3fc9c155 	.word	0x3fc9c155
 8011b08:	03eb6f7d 	.word	0x03eb6f7d
 8011b0c:	3fd4d612 	.word	0x3fd4d612
 8011b10:	55555555 	.word	0x55555555
 8011b14:	3fc55555 	.word	0x3fc55555
 8011b18:	b12e9282 	.word	0xb12e9282
 8011b1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011b20:	1b8d0159 	.word	0x1b8d0159
 8011b24:	3fe6066c 	.word	0x3fe6066c
 8011b28:	9c598ac8 	.word	0x9c598ac8
 8011b2c:	40002ae5 	.word	0x40002ae5
 8011b30:	1c8a2d4b 	.word	0x1c8a2d4b
 8011b34:	40033a27 	.word	0x40033a27
 8011b38:	33145c07 	.word	0x33145c07
 8011b3c:	3c91a626 	.word	0x3c91a626
 8011b40:	54442d18 	.word	0x54442d18
 8011b44:	3ff921fb 	.word	0x3ff921fb
 8011b48:	54442d18 	.word	0x54442d18
 8011b4c:	400921fb 	.word	0x400921fb
 8011b50:	3fefffff 	.word	0x3fefffff
 8011b54:	3fdfffff 	.word	0x3fdfffff
 8011b58:	3c600000 	.word	0x3c600000
 8011b5c:	3ff00000 	.word	0x3ff00000
 8011b60:	3fe00000 	.word	0x3fe00000
 8011b64:	4622      	mov	r2, r4
 8011b66:	462b      	mov	r3, r5
 8011b68:	496b      	ldr	r1, [pc, #428]	@ (8011d18 <__ieee754_acos+0x4b0>)
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	f7ee fbac 	bl	80002c8 <__aeabi_dsub>
 8011b70:	4b6a      	ldr	r3, [pc, #424]	@ (8011d1c <__ieee754_acos+0x4b4>)
 8011b72:	2200      	movs	r2, #0
 8011b74:	f7ee fd60 	bl	8000638 <__aeabi_dmul>
 8011b78:	4604      	mov	r4, r0
 8011b7a:	460d      	mov	r5, r1
 8011b7c:	ec45 4b10 	vmov	d0, r4, r5
 8011b80:	f7ff fd9c 	bl	80116bc <__ieee754_sqrt>
 8011b84:	a34c      	add	r3, pc, #304	@ (adr r3, 8011cb8 <__ieee754_acos+0x450>)
 8011b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b8a:	4620      	mov	r0, r4
 8011b8c:	4629      	mov	r1, r5
 8011b8e:	ec59 8b10 	vmov	r8, r9, d0
 8011b92:	f7ee fd51 	bl	8000638 <__aeabi_dmul>
 8011b96:	a34a      	add	r3, pc, #296	@ (adr r3, 8011cc0 <__ieee754_acos+0x458>)
 8011b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9c:	f7ee fb96 	bl	80002cc <__adddf3>
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	462b      	mov	r3, r5
 8011ba4:	f7ee fd48 	bl	8000638 <__aeabi_dmul>
 8011ba8:	a347      	add	r3, pc, #284	@ (adr r3, 8011cc8 <__ieee754_acos+0x460>)
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	f7ee fb8b 	bl	80002c8 <__aeabi_dsub>
 8011bb2:	4622      	mov	r2, r4
 8011bb4:	462b      	mov	r3, r5
 8011bb6:	f7ee fd3f 	bl	8000638 <__aeabi_dmul>
 8011bba:	a345      	add	r3, pc, #276	@ (adr r3, 8011cd0 <__ieee754_acos+0x468>)
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	f7ee fb84 	bl	80002cc <__adddf3>
 8011bc4:	4622      	mov	r2, r4
 8011bc6:	462b      	mov	r3, r5
 8011bc8:	f7ee fd36 	bl	8000638 <__aeabi_dmul>
 8011bcc:	a342      	add	r3, pc, #264	@ (adr r3, 8011cd8 <__ieee754_acos+0x470>)
 8011bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd2:	f7ee fb79 	bl	80002c8 <__aeabi_dsub>
 8011bd6:	4622      	mov	r2, r4
 8011bd8:	462b      	mov	r3, r5
 8011bda:	f7ee fd2d 	bl	8000638 <__aeabi_dmul>
 8011bde:	a340      	add	r3, pc, #256	@ (adr r3, 8011ce0 <__ieee754_acos+0x478>)
 8011be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be4:	f7ee fb72 	bl	80002cc <__adddf3>
 8011be8:	4622      	mov	r2, r4
 8011bea:	462b      	mov	r3, r5
 8011bec:	f7ee fd24 	bl	8000638 <__aeabi_dmul>
 8011bf0:	a33d      	add	r3, pc, #244	@ (adr r3, 8011ce8 <__ieee754_acos+0x480>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	4682      	mov	sl, r0
 8011bf8:	468b      	mov	fp, r1
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	f7ee fd1b 	bl	8000638 <__aeabi_dmul>
 8011c02:	a33b      	add	r3, pc, #236	@ (adr r3, 8011cf0 <__ieee754_acos+0x488>)
 8011c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c08:	f7ee fb5e 	bl	80002c8 <__aeabi_dsub>
 8011c0c:	4622      	mov	r2, r4
 8011c0e:	462b      	mov	r3, r5
 8011c10:	f7ee fd12 	bl	8000638 <__aeabi_dmul>
 8011c14:	a338      	add	r3, pc, #224	@ (adr r3, 8011cf8 <__ieee754_acos+0x490>)
 8011c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1a:	f7ee fb57 	bl	80002cc <__adddf3>
 8011c1e:	4622      	mov	r2, r4
 8011c20:	462b      	mov	r3, r5
 8011c22:	f7ee fd09 	bl	8000638 <__aeabi_dmul>
 8011c26:	a336      	add	r3, pc, #216	@ (adr r3, 8011d00 <__ieee754_acos+0x498>)
 8011c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2c:	f7ee fb4c 	bl	80002c8 <__aeabi_dsub>
 8011c30:	4622      	mov	r2, r4
 8011c32:	462b      	mov	r3, r5
 8011c34:	f7ee fd00 	bl	8000638 <__aeabi_dmul>
 8011c38:	4b37      	ldr	r3, [pc, #220]	@ (8011d18 <__ieee754_acos+0x4b0>)
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f7ee fb46 	bl	80002cc <__adddf3>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4650      	mov	r0, sl
 8011c46:	4659      	mov	r1, fp
 8011c48:	f7ee fe20 	bl	800088c <__aeabi_ddiv>
 8011c4c:	4642      	mov	r2, r8
 8011c4e:	464b      	mov	r3, r9
 8011c50:	f7ee fcf2 	bl	8000638 <__aeabi_dmul>
 8011c54:	2600      	movs	r6, #0
 8011c56:	4682      	mov	sl, r0
 8011c58:	468b      	mov	fp, r1
 8011c5a:	4632      	mov	r2, r6
 8011c5c:	464b      	mov	r3, r9
 8011c5e:	4630      	mov	r0, r6
 8011c60:	4649      	mov	r1, r9
 8011c62:	f7ee fce9 	bl	8000638 <__aeabi_dmul>
 8011c66:	4602      	mov	r2, r0
 8011c68:	460b      	mov	r3, r1
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	4629      	mov	r1, r5
 8011c6e:	f7ee fb2b 	bl	80002c8 <__aeabi_dsub>
 8011c72:	4632      	mov	r2, r6
 8011c74:	4604      	mov	r4, r0
 8011c76:	460d      	mov	r5, r1
 8011c78:	464b      	mov	r3, r9
 8011c7a:	4640      	mov	r0, r8
 8011c7c:	4649      	mov	r1, r9
 8011c7e:	f7ee fb25 	bl	80002cc <__adddf3>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	4620      	mov	r0, r4
 8011c88:	4629      	mov	r1, r5
 8011c8a:	f7ee fdff 	bl	800088c <__aeabi_ddiv>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	460b      	mov	r3, r1
 8011c92:	4650      	mov	r0, sl
 8011c94:	4659      	mov	r1, fp
 8011c96:	f7ee fb19 	bl	80002cc <__adddf3>
 8011c9a:	4632      	mov	r2, r6
 8011c9c:	464b      	mov	r3, r9
 8011c9e:	f7ee fb15 	bl	80002cc <__adddf3>
 8011ca2:	4602      	mov	r2, r0
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	f7ee fb11 	bl	80002cc <__adddf3>
 8011caa:	e5fd      	b.n	80118a8 <__ieee754_acos+0x40>
 8011cac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8011d08 <__ieee754_acos+0x4a0>
 8011cb0:	e5ee      	b.n	8011890 <__ieee754_acos+0x28>
 8011cb2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011d10 <__ieee754_acos+0x4a8>
 8011cb6:	e5eb      	b.n	8011890 <__ieee754_acos+0x28>
 8011cb8:	0dfdf709 	.word	0x0dfdf709
 8011cbc:	3f023de1 	.word	0x3f023de1
 8011cc0:	7501b288 	.word	0x7501b288
 8011cc4:	3f49efe0 	.word	0x3f49efe0
 8011cc8:	b5688f3b 	.word	0xb5688f3b
 8011ccc:	3fa48228 	.word	0x3fa48228
 8011cd0:	0e884455 	.word	0x0e884455
 8011cd4:	3fc9c155 	.word	0x3fc9c155
 8011cd8:	03eb6f7d 	.word	0x03eb6f7d
 8011cdc:	3fd4d612 	.word	0x3fd4d612
 8011ce0:	55555555 	.word	0x55555555
 8011ce4:	3fc55555 	.word	0x3fc55555
 8011ce8:	b12e9282 	.word	0xb12e9282
 8011cec:	3fb3b8c5 	.word	0x3fb3b8c5
 8011cf0:	1b8d0159 	.word	0x1b8d0159
 8011cf4:	3fe6066c 	.word	0x3fe6066c
 8011cf8:	9c598ac8 	.word	0x9c598ac8
 8011cfc:	40002ae5 	.word	0x40002ae5
 8011d00:	1c8a2d4b 	.word	0x1c8a2d4b
 8011d04:	40033a27 	.word	0x40033a27
 8011d08:	54442d18 	.word	0x54442d18
 8011d0c:	400921fb 	.word	0x400921fb
 8011d10:	54442d18 	.word	0x54442d18
 8011d14:	3ff921fb 	.word	0x3ff921fb
 8011d18:	3ff00000 	.word	0x3ff00000
 8011d1c:	3fe00000 	.word	0x3fe00000

08011d20 <__ieee754_asin>:
 8011d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d24:	ec55 4b10 	vmov	r4, r5, d0
 8011d28:	4bc7      	ldr	r3, [pc, #796]	@ (8012048 <__ieee754_asin+0x328>)
 8011d2a:	b087      	sub	sp, #28
 8011d2c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011d30:	429e      	cmp	r6, r3
 8011d32:	9501      	str	r5, [sp, #4]
 8011d34:	d92d      	bls.n	8011d92 <__ieee754_asin+0x72>
 8011d36:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011d3a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011d3e:	4326      	orrs	r6, r4
 8011d40:	d116      	bne.n	8011d70 <__ieee754_asin+0x50>
 8011d42:	a3a7      	add	r3, pc, #668	@ (adr r3, 8011fe0 <__ieee754_asin+0x2c0>)
 8011d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d48:	4620      	mov	r0, r4
 8011d4a:	4629      	mov	r1, r5
 8011d4c:	f7ee fc74 	bl	8000638 <__aeabi_dmul>
 8011d50:	a3a5      	add	r3, pc, #660	@ (adr r3, 8011fe8 <__ieee754_asin+0x2c8>)
 8011d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d56:	4606      	mov	r6, r0
 8011d58:	460f      	mov	r7, r1
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	4629      	mov	r1, r5
 8011d5e:	f7ee fc6b 	bl	8000638 <__aeabi_dmul>
 8011d62:	4602      	mov	r2, r0
 8011d64:	460b      	mov	r3, r1
 8011d66:	4630      	mov	r0, r6
 8011d68:	4639      	mov	r1, r7
 8011d6a:	f7ee faaf 	bl	80002cc <__adddf3>
 8011d6e:	e009      	b.n	8011d84 <__ieee754_asin+0x64>
 8011d70:	4622      	mov	r2, r4
 8011d72:	462b      	mov	r3, r5
 8011d74:	4620      	mov	r0, r4
 8011d76:	4629      	mov	r1, r5
 8011d78:	f7ee faa6 	bl	80002c8 <__aeabi_dsub>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	f7ee fd84 	bl	800088c <__aeabi_ddiv>
 8011d84:	4604      	mov	r4, r0
 8011d86:	460d      	mov	r5, r1
 8011d88:	ec45 4b10 	vmov	d0, r4, r5
 8011d8c:	b007      	add	sp, #28
 8011d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d92:	4bae      	ldr	r3, [pc, #696]	@ (801204c <__ieee754_asin+0x32c>)
 8011d94:	429e      	cmp	r6, r3
 8011d96:	d810      	bhi.n	8011dba <__ieee754_asin+0x9a>
 8011d98:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8011d9c:	f080 80ad 	bcs.w	8011efa <__ieee754_asin+0x1da>
 8011da0:	a393      	add	r3, pc, #588	@ (adr r3, 8011ff0 <__ieee754_asin+0x2d0>)
 8011da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da6:	4620      	mov	r0, r4
 8011da8:	4629      	mov	r1, r5
 8011daa:	f7ee fa8f 	bl	80002cc <__adddf3>
 8011dae:	4ba8      	ldr	r3, [pc, #672]	@ (8012050 <__ieee754_asin+0x330>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	f7ee fed1 	bl	8000b58 <__aeabi_dcmpgt>
 8011db6:	2800      	cmp	r0, #0
 8011db8:	d1e6      	bne.n	8011d88 <__ieee754_asin+0x68>
 8011dba:	ec45 4b10 	vmov	d0, r4, r5
 8011dbe:	f7ff fc69 	bl	8011694 <fabs>
 8011dc2:	49a3      	ldr	r1, [pc, #652]	@ (8012050 <__ieee754_asin+0x330>)
 8011dc4:	ec53 2b10 	vmov	r2, r3, d0
 8011dc8:	2000      	movs	r0, #0
 8011dca:	f7ee fa7d 	bl	80002c8 <__aeabi_dsub>
 8011dce:	4ba1      	ldr	r3, [pc, #644]	@ (8012054 <__ieee754_asin+0x334>)
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f7ee fc31 	bl	8000638 <__aeabi_dmul>
 8011dd6:	a388      	add	r3, pc, #544	@ (adr r3, 8011ff8 <__ieee754_asin+0x2d8>)
 8011dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ddc:	4604      	mov	r4, r0
 8011dde:	460d      	mov	r5, r1
 8011de0:	f7ee fc2a 	bl	8000638 <__aeabi_dmul>
 8011de4:	a386      	add	r3, pc, #536	@ (adr r3, 8012000 <__ieee754_asin+0x2e0>)
 8011de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dea:	f7ee fa6f 	bl	80002cc <__adddf3>
 8011dee:	4622      	mov	r2, r4
 8011df0:	462b      	mov	r3, r5
 8011df2:	f7ee fc21 	bl	8000638 <__aeabi_dmul>
 8011df6:	a384      	add	r3, pc, #528	@ (adr r3, 8012008 <__ieee754_asin+0x2e8>)
 8011df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfc:	f7ee fa64 	bl	80002c8 <__aeabi_dsub>
 8011e00:	4622      	mov	r2, r4
 8011e02:	462b      	mov	r3, r5
 8011e04:	f7ee fc18 	bl	8000638 <__aeabi_dmul>
 8011e08:	a381      	add	r3, pc, #516	@ (adr r3, 8012010 <__ieee754_asin+0x2f0>)
 8011e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0e:	f7ee fa5d 	bl	80002cc <__adddf3>
 8011e12:	4622      	mov	r2, r4
 8011e14:	462b      	mov	r3, r5
 8011e16:	f7ee fc0f 	bl	8000638 <__aeabi_dmul>
 8011e1a:	a37f      	add	r3, pc, #508	@ (adr r3, 8012018 <__ieee754_asin+0x2f8>)
 8011e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e20:	f7ee fa52 	bl	80002c8 <__aeabi_dsub>
 8011e24:	4622      	mov	r2, r4
 8011e26:	462b      	mov	r3, r5
 8011e28:	f7ee fc06 	bl	8000638 <__aeabi_dmul>
 8011e2c:	a37c      	add	r3, pc, #496	@ (adr r3, 8012020 <__ieee754_asin+0x300>)
 8011e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e32:	f7ee fa4b 	bl	80002cc <__adddf3>
 8011e36:	4622      	mov	r2, r4
 8011e38:	462b      	mov	r3, r5
 8011e3a:	f7ee fbfd 	bl	8000638 <__aeabi_dmul>
 8011e3e:	a37a      	add	r3, pc, #488	@ (adr r3, 8012028 <__ieee754_asin+0x308>)
 8011e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e48:	4620      	mov	r0, r4
 8011e4a:	4629      	mov	r1, r5
 8011e4c:	f7ee fbf4 	bl	8000638 <__aeabi_dmul>
 8011e50:	a377      	add	r3, pc, #476	@ (adr r3, 8012030 <__ieee754_asin+0x310>)
 8011e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e56:	f7ee fa37 	bl	80002c8 <__aeabi_dsub>
 8011e5a:	4622      	mov	r2, r4
 8011e5c:	462b      	mov	r3, r5
 8011e5e:	f7ee fbeb 	bl	8000638 <__aeabi_dmul>
 8011e62:	a375      	add	r3, pc, #468	@ (adr r3, 8012038 <__ieee754_asin+0x318>)
 8011e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e68:	f7ee fa30 	bl	80002cc <__adddf3>
 8011e6c:	4622      	mov	r2, r4
 8011e6e:	462b      	mov	r3, r5
 8011e70:	f7ee fbe2 	bl	8000638 <__aeabi_dmul>
 8011e74:	a372      	add	r3, pc, #456	@ (adr r3, 8012040 <__ieee754_asin+0x320>)
 8011e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7a:	f7ee fa25 	bl	80002c8 <__aeabi_dsub>
 8011e7e:	4622      	mov	r2, r4
 8011e80:	462b      	mov	r3, r5
 8011e82:	f7ee fbd9 	bl	8000638 <__aeabi_dmul>
 8011e86:	4b72      	ldr	r3, [pc, #456]	@ (8012050 <__ieee754_asin+0x330>)
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f7ee fa1f 	bl	80002cc <__adddf3>
 8011e8e:	ec45 4b10 	vmov	d0, r4, r5
 8011e92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e96:	f7ff fc11 	bl	80116bc <__ieee754_sqrt>
 8011e9a:	4b6f      	ldr	r3, [pc, #444]	@ (8012058 <__ieee754_asin+0x338>)
 8011e9c:	429e      	cmp	r6, r3
 8011e9e:	ec5b ab10 	vmov	sl, fp, d0
 8011ea2:	f240 80db 	bls.w	801205c <__ieee754_asin+0x33c>
 8011ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eae:	f7ee fced 	bl	800088c <__aeabi_ddiv>
 8011eb2:	4652      	mov	r2, sl
 8011eb4:	465b      	mov	r3, fp
 8011eb6:	f7ee fbbf 	bl	8000638 <__aeabi_dmul>
 8011eba:	4652      	mov	r2, sl
 8011ebc:	465b      	mov	r3, fp
 8011ebe:	f7ee fa05 	bl	80002cc <__adddf3>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	f7ee fa01 	bl	80002cc <__adddf3>
 8011eca:	a347      	add	r3, pc, #284	@ (adr r3, 8011fe8 <__ieee754_asin+0x2c8>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	f7ee f9fa 	bl	80002c8 <__aeabi_dsub>
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	a141      	add	r1, pc, #260	@ (adr r1, 8011fe0 <__ieee754_asin+0x2c0>)
 8011eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ede:	f7ee f9f3 	bl	80002c8 <__aeabi_dsub>
 8011ee2:	9b01      	ldr	r3, [sp, #4]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	bfdc      	itt	le
 8011ee8:	4602      	movle	r2, r0
 8011eea:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 8011eee:	4604      	mov	r4, r0
 8011ef0:	460d      	mov	r5, r1
 8011ef2:	bfdc      	itt	le
 8011ef4:	4614      	movle	r4, r2
 8011ef6:	461d      	movle	r5, r3
 8011ef8:	e746      	b.n	8011d88 <__ieee754_asin+0x68>
 8011efa:	4622      	mov	r2, r4
 8011efc:	462b      	mov	r3, r5
 8011efe:	4620      	mov	r0, r4
 8011f00:	4629      	mov	r1, r5
 8011f02:	f7ee fb99 	bl	8000638 <__aeabi_dmul>
 8011f06:	a33c      	add	r3, pc, #240	@ (adr r3, 8011ff8 <__ieee754_asin+0x2d8>)
 8011f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0c:	4606      	mov	r6, r0
 8011f0e:	460f      	mov	r7, r1
 8011f10:	f7ee fb92 	bl	8000638 <__aeabi_dmul>
 8011f14:	a33a      	add	r3, pc, #232	@ (adr r3, 8012000 <__ieee754_asin+0x2e0>)
 8011f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1a:	f7ee f9d7 	bl	80002cc <__adddf3>
 8011f1e:	4632      	mov	r2, r6
 8011f20:	463b      	mov	r3, r7
 8011f22:	f7ee fb89 	bl	8000638 <__aeabi_dmul>
 8011f26:	a338      	add	r3, pc, #224	@ (adr r3, 8012008 <__ieee754_asin+0x2e8>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	f7ee f9cc 	bl	80002c8 <__aeabi_dsub>
 8011f30:	4632      	mov	r2, r6
 8011f32:	463b      	mov	r3, r7
 8011f34:	f7ee fb80 	bl	8000638 <__aeabi_dmul>
 8011f38:	a335      	add	r3, pc, #212	@ (adr r3, 8012010 <__ieee754_asin+0x2f0>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	f7ee f9c5 	bl	80002cc <__adddf3>
 8011f42:	4632      	mov	r2, r6
 8011f44:	463b      	mov	r3, r7
 8011f46:	f7ee fb77 	bl	8000638 <__aeabi_dmul>
 8011f4a:	a333      	add	r3, pc, #204	@ (adr r3, 8012018 <__ieee754_asin+0x2f8>)
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	f7ee f9ba 	bl	80002c8 <__aeabi_dsub>
 8011f54:	4632      	mov	r2, r6
 8011f56:	463b      	mov	r3, r7
 8011f58:	f7ee fb6e 	bl	8000638 <__aeabi_dmul>
 8011f5c:	a330      	add	r3, pc, #192	@ (adr r3, 8012020 <__ieee754_asin+0x300>)
 8011f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f62:	f7ee f9b3 	bl	80002cc <__adddf3>
 8011f66:	4632      	mov	r2, r6
 8011f68:	463b      	mov	r3, r7
 8011f6a:	f7ee fb65 	bl	8000638 <__aeabi_dmul>
 8011f6e:	a32e      	add	r3, pc, #184	@ (adr r3, 8012028 <__ieee754_asin+0x308>)
 8011f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f74:	4680      	mov	r8, r0
 8011f76:	4689      	mov	r9, r1
 8011f78:	4630      	mov	r0, r6
 8011f7a:	4639      	mov	r1, r7
 8011f7c:	f7ee fb5c 	bl	8000638 <__aeabi_dmul>
 8011f80:	a32b      	add	r3, pc, #172	@ (adr r3, 8012030 <__ieee754_asin+0x310>)
 8011f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f86:	f7ee f99f 	bl	80002c8 <__aeabi_dsub>
 8011f8a:	4632      	mov	r2, r6
 8011f8c:	463b      	mov	r3, r7
 8011f8e:	f7ee fb53 	bl	8000638 <__aeabi_dmul>
 8011f92:	a329      	add	r3, pc, #164	@ (adr r3, 8012038 <__ieee754_asin+0x318>)
 8011f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f98:	f7ee f998 	bl	80002cc <__adddf3>
 8011f9c:	4632      	mov	r2, r6
 8011f9e:	463b      	mov	r3, r7
 8011fa0:	f7ee fb4a 	bl	8000638 <__aeabi_dmul>
 8011fa4:	a326      	add	r3, pc, #152	@ (adr r3, 8012040 <__ieee754_asin+0x320>)
 8011fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011faa:	f7ee f98d 	bl	80002c8 <__aeabi_dsub>
 8011fae:	4632      	mov	r2, r6
 8011fb0:	463b      	mov	r3, r7
 8011fb2:	f7ee fb41 	bl	8000638 <__aeabi_dmul>
 8011fb6:	4b26      	ldr	r3, [pc, #152]	@ (8012050 <__ieee754_asin+0x330>)
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f7ee f987 	bl	80002cc <__adddf3>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4640      	mov	r0, r8
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee fc61 	bl	800088c <__aeabi_ddiv>
 8011fca:	4622      	mov	r2, r4
 8011fcc:	462b      	mov	r3, r5
 8011fce:	f7ee fb33 	bl	8000638 <__aeabi_dmul>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	4620      	mov	r0, r4
 8011fd8:	4629      	mov	r1, r5
 8011fda:	e6c6      	b.n	8011d6a <__ieee754_asin+0x4a>
 8011fdc:	f3af 8000 	nop.w
 8011fe0:	54442d18 	.word	0x54442d18
 8011fe4:	3ff921fb 	.word	0x3ff921fb
 8011fe8:	33145c07 	.word	0x33145c07
 8011fec:	3c91a626 	.word	0x3c91a626
 8011ff0:	8800759c 	.word	0x8800759c
 8011ff4:	7e37e43c 	.word	0x7e37e43c
 8011ff8:	0dfdf709 	.word	0x0dfdf709
 8011ffc:	3f023de1 	.word	0x3f023de1
 8012000:	7501b288 	.word	0x7501b288
 8012004:	3f49efe0 	.word	0x3f49efe0
 8012008:	b5688f3b 	.word	0xb5688f3b
 801200c:	3fa48228 	.word	0x3fa48228
 8012010:	0e884455 	.word	0x0e884455
 8012014:	3fc9c155 	.word	0x3fc9c155
 8012018:	03eb6f7d 	.word	0x03eb6f7d
 801201c:	3fd4d612 	.word	0x3fd4d612
 8012020:	55555555 	.word	0x55555555
 8012024:	3fc55555 	.word	0x3fc55555
 8012028:	b12e9282 	.word	0xb12e9282
 801202c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012030:	1b8d0159 	.word	0x1b8d0159
 8012034:	3fe6066c 	.word	0x3fe6066c
 8012038:	9c598ac8 	.word	0x9c598ac8
 801203c:	40002ae5 	.word	0x40002ae5
 8012040:	1c8a2d4b 	.word	0x1c8a2d4b
 8012044:	40033a27 	.word	0x40033a27
 8012048:	3fefffff 	.word	0x3fefffff
 801204c:	3fdfffff 	.word	0x3fdfffff
 8012050:	3ff00000 	.word	0x3ff00000
 8012054:	3fe00000 	.word	0x3fe00000
 8012058:	3fef3332 	.word	0x3fef3332
 801205c:	4652      	mov	r2, sl
 801205e:	465b      	mov	r3, fp
 8012060:	4650      	mov	r0, sl
 8012062:	4659      	mov	r1, fp
 8012064:	f7ee f932 	bl	80002cc <__adddf3>
 8012068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801206c:	4606      	mov	r6, r0
 801206e:	460f      	mov	r7, r1
 8012070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012074:	f7ee fc0a 	bl	800088c <__aeabi_ddiv>
 8012078:	4602      	mov	r2, r0
 801207a:	460b      	mov	r3, r1
 801207c:	4630      	mov	r0, r6
 801207e:	4639      	mov	r1, r7
 8012080:	f7ee fada 	bl	8000638 <__aeabi_dmul>
 8012084:	f04f 0800 	mov.w	r8, #0
 8012088:	4606      	mov	r6, r0
 801208a:	460f      	mov	r7, r1
 801208c:	4642      	mov	r2, r8
 801208e:	465b      	mov	r3, fp
 8012090:	4640      	mov	r0, r8
 8012092:	4659      	mov	r1, fp
 8012094:	f7ee fad0 	bl	8000638 <__aeabi_dmul>
 8012098:	4602      	mov	r2, r0
 801209a:	460b      	mov	r3, r1
 801209c:	4620      	mov	r0, r4
 801209e:	4629      	mov	r1, r5
 80120a0:	f7ee f912 	bl	80002c8 <__aeabi_dsub>
 80120a4:	4642      	mov	r2, r8
 80120a6:	4604      	mov	r4, r0
 80120a8:	460d      	mov	r5, r1
 80120aa:	465b      	mov	r3, fp
 80120ac:	4650      	mov	r0, sl
 80120ae:	4659      	mov	r1, fp
 80120b0:	f7ee f90c 	bl	80002cc <__adddf3>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	4620      	mov	r0, r4
 80120ba:	4629      	mov	r1, r5
 80120bc:	f7ee fbe6 	bl	800088c <__aeabi_ddiv>
 80120c0:	4602      	mov	r2, r0
 80120c2:	460b      	mov	r3, r1
 80120c4:	f7ee f902 	bl	80002cc <__adddf3>
 80120c8:	4602      	mov	r2, r0
 80120ca:	460b      	mov	r3, r1
 80120cc:	a112      	add	r1, pc, #72	@ (adr r1, 8012118 <__ieee754_asin+0x3f8>)
 80120ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120d2:	f7ee f8f9 	bl	80002c8 <__aeabi_dsub>
 80120d6:	4602      	mov	r2, r0
 80120d8:	460b      	mov	r3, r1
 80120da:	4630      	mov	r0, r6
 80120dc:	4639      	mov	r1, r7
 80120de:	f7ee f8f3 	bl	80002c8 <__aeabi_dsub>
 80120e2:	4642      	mov	r2, r8
 80120e4:	4604      	mov	r4, r0
 80120e6:	460d      	mov	r5, r1
 80120e8:	465b      	mov	r3, fp
 80120ea:	4640      	mov	r0, r8
 80120ec:	4659      	mov	r1, fp
 80120ee:	f7ee f8ed 	bl	80002cc <__adddf3>
 80120f2:	4602      	mov	r2, r0
 80120f4:	460b      	mov	r3, r1
 80120f6:	a10a      	add	r1, pc, #40	@ (adr r1, 8012120 <__ieee754_asin+0x400>)
 80120f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120fc:	f7ee f8e4 	bl	80002c8 <__aeabi_dsub>
 8012100:	4602      	mov	r2, r0
 8012102:	460b      	mov	r3, r1
 8012104:	4620      	mov	r0, r4
 8012106:	4629      	mov	r1, r5
 8012108:	f7ee f8de 	bl	80002c8 <__aeabi_dsub>
 801210c:	4602      	mov	r2, r0
 801210e:	460b      	mov	r3, r1
 8012110:	a103      	add	r1, pc, #12	@ (adr r1, 8012120 <__ieee754_asin+0x400>)
 8012112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012116:	e6e2      	b.n	8011ede <__ieee754_asin+0x1be>
 8012118:	33145c07 	.word	0x33145c07
 801211c:	3c91a626 	.word	0x3c91a626
 8012120:	54442d18 	.word	0x54442d18
 8012124:	3fe921fb 	.word	0x3fe921fb

08012128 <__ieee754_atan2>:
 8012128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801212c:	ec57 6b11 	vmov	r6, r7, d1
 8012130:	4273      	negs	r3, r6
 8012132:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80122b0 <__ieee754_atan2+0x188>
 8012136:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801213a:	4333      	orrs	r3, r6
 801213c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012140:	4543      	cmp	r3, r8
 8012142:	ec51 0b10 	vmov	r0, r1, d0
 8012146:	4635      	mov	r5, r6
 8012148:	d809      	bhi.n	801215e <__ieee754_atan2+0x36>
 801214a:	4244      	negs	r4, r0
 801214c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012150:	4304      	orrs	r4, r0
 8012152:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012156:	4544      	cmp	r4, r8
 8012158:	468e      	mov	lr, r1
 801215a:	4681      	mov	r9, r0
 801215c:	d907      	bls.n	801216e <__ieee754_atan2+0x46>
 801215e:	4632      	mov	r2, r6
 8012160:	463b      	mov	r3, r7
 8012162:	f7ee f8b3 	bl	80002cc <__adddf3>
 8012166:	ec41 0b10 	vmov	d0, r0, r1
 801216a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801216e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8012172:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8012176:	4334      	orrs	r4, r6
 8012178:	d103      	bne.n	8012182 <__ieee754_atan2+0x5a>
 801217a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801217e:	f000 bde7 	b.w	8012d50 <atan>
 8012182:	17bc      	asrs	r4, r7, #30
 8012184:	f004 0402 	and.w	r4, r4, #2
 8012188:	ea53 0909 	orrs.w	r9, r3, r9
 801218c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012190:	d107      	bne.n	80121a2 <__ieee754_atan2+0x7a>
 8012192:	2c02      	cmp	r4, #2
 8012194:	d05f      	beq.n	8012256 <__ieee754_atan2+0x12e>
 8012196:	2c03      	cmp	r4, #3
 8012198:	d1e5      	bne.n	8012166 <__ieee754_atan2+0x3e>
 801219a:	a143      	add	r1, pc, #268	@ (adr r1, 80122a8 <__ieee754_atan2+0x180>)
 801219c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121a0:	e7e1      	b.n	8012166 <__ieee754_atan2+0x3e>
 80121a2:	4315      	orrs	r5, r2
 80121a4:	d106      	bne.n	80121b4 <__ieee754_atan2+0x8c>
 80121a6:	f1be 0f00 	cmp.w	lr, #0
 80121aa:	db5f      	blt.n	801226c <__ieee754_atan2+0x144>
 80121ac:	a136      	add	r1, pc, #216	@ (adr r1, 8012288 <__ieee754_atan2+0x160>)
 80121ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121b2:	e7d8      	b.n	8012166 <__ieee754_atan2+0x3e>
 80121b4:	4542      	cmp	r2, r8
 80121b6:	d10f      	bne.n	80121d8 <__ieee754_atan2+0xb0>
 80121b8:	4293      	cmp	r3, r2
 80121ba:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80121be:	d107      	bne.n	80121d0 <__ieee754_atan2+0xa8>
 80121c0:	2c02      	cmp	r4, #2
 80121c2:	d84c      	bhi.n	801225e <__ieee754_atan2+0x136>
 80121c4:	4b36      	ldr	r3, [pc, #216]	@ (80122a0 <__ieee754_atan2+0x178>)
 80121c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80121ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80121ce:	e7ca      	b.n	8012166 <__ieee754_atan2+0x3e>
 80121d0:	2c02      	cmp	r4, #2
 80121d2:	d848      	bhi.n	8012266 <__ieee754_atan2+0x13e>
 80121d4:	4b33      	ldr	r3, [pc, #204]	@ (80122a4 <__ieee754_atan2+0x17c>)
 80121d6:	e7f6      	b.n	80121c6 <__ieee754_atan2+0x9e>
 80121d8:	4543      	cmp	r3, r8
 80121da:	d0e4      	beq.n	80121a6 <__ieee754_atan2+0x7e>
 80121dc:	1a9b      	subs	r3, r3, r2
 80121de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80121e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80121e6:	da1e      	bge.n	8012226 <__ieee754_atan2+0xfe>
 80121e8:	2f00      	cmp	r7, #0
 80121ea:	da01      	bge.n	80121f0 <__ieee754_atan2+0xc8>
 80121ec:	323c      	adds	r2, #60	@ 0x3c
 80121ee:	db1e      	blt.n	801222e <__ieee754_atan2+0x106>
 80121f0:	4632      	mov	r2, r6
 80121f2:	463b      	mov	r3, r7
 80121f4:	f7ee fb4a 	bl	800088c <__aeabi_ddiv>
 80121f8:	ec41 0b10 	vmov	d0, r0, r1
 80121fc:	f7ff fa4a 	bl	8011694 <fabs>
 8012200:	f000 fda6 	bl	8012d50 <atan>
 8012204:	ec51 0b10 	vmov	r0, r1, d0
 8012208:	2c01      	cmp	r4, #1
 801220a:	d013      	beq.n	8012234 <__ieee754_atan2+0x10c>
 801220c:	2c02      	cmp	r4, #2
 801220e:	d015      	beq.n	801223c <__ieee754_atan2+0x114>
 8012210:	2c00      	cmp	r4, #0
 8012212:	d0a8      	beq.n	8012166 <__ieee754_atan2+0x3e>
 8012214:	a318      	add	r3, pc, #96	@ (adr r3, 8012278 <__ieee754_atan2+0x150>)
 8012216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221a:	f7ee f855 	bl	80002c8 <__aeabi_dsub>
 801221e:	a318      	add	r3, pc, #96	@ (adr r3, 8012280 <__ieee754_atan2+0x158>)
 8012220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012224:	e014      	b.n	8012250 <__ieee754_atan2+0x128>
 8012226:	a118      	add	r1, pc, #96	@ (adr r1, 8012288 <__ieee754_atan2+0x160>)
 8012228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801222c:	e7ec      	b.n	8012208 <__ieee754_atan2+0xe0>
 801222e:	2000      	movs	r0, #0
 8012230:	2100      	movs	r1, #0
 8012232:	e7e9      	b.n	8012208 <__ieee754_atan2+0xe0>
 8012234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012238:	4619      	mov	r1, r3
 801223a:	e794      	b.n	8012166 <__ieee754_atan2+0x3e>
 801223c:	a30e      	add	r3, pc, #56	@ (adr r3, 8012278 <__ieee754_atan2+0x150>)
 801223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012242:	f7ee f841 	bl	80002c8 <__aeabi_dsub>
 8012246:	4602      	mov	r2, r0
 8012248:	460b      	mov	r3, r1
 801224a:	a10d      	add	r1, pc, #52	@ (adr r1, 8012280 <__ieee754_atan2+0x158>)
 801224c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012250:	f7ee f83a 	bl	80002c8 <__aeabi_dsub>
 8012254:	e787      	b.n	8012166 <__ieee754_atan2+0x3e>
 8012256:	a10a      	add	r1, pc, #40	@ (adr r1, 8012280 <__ieee754_atan2+0x158>)
 8012258:	e9d1 0100 	ldrd	r0, r1, [r1]
 801225c:	e783      	b.n	8012166 <__ieee754_atan2+0x3e>
 801225e:	a10c      	add	r1, pc, #48	@ (adr r1, 8012290 <__ieee754_atan2+0x168>)
 8012260:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012264:	e77f      	b.n	8012166 <__ieee754_atan2+0x3e>
 8012266:	2000      	movs	r0, #0
 8012268:	2100      	movs	r1, #0
 801226a:	e77c      	b.n	8012166 <__ieee754_atan2+0x3e>
 801226c:	a10a      	add	r1, pc, #40	@ (adr r1, 8012298 <__ieee754_atan2+0x170>)
 801226e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012272:	e778      	b.n	8012166 <__ieee754_atan2+0x3e>
 8012274:	f3af 8000 	nop.w
 8012278:	33145c07 	.word	0x33145c07
 801227c:	3ca1a626 	.word	0x3ca1a626
 8012280:	54442d18 	.word	0x54442d18
 8012284:	400921fb 	.word	0x400921fb
 8012288:	54442d18 	.word	0x54442d18
 801228c:	3ff921fb 	.word	0x3ff921fb
 8012290:	54442d18 	.word	0x54442d18
 8012294:	3fe921fb 	.word	0x3fe921fb
 8012298:	54442d18 	.word	0x54442d18
 801229c:	bff921fb 	.word	0xbff921fb
 80122a0:	08013770 	.word	0x08013770
 80122a4:	08013758 	.word	0x08013758
 80122a8:	54442d18 	.word	0x54442d18
 80122ac:	c00921fb 	.word	0xc00921fb
 80122b0:	7ff00000 	.word	0x7ff00000
 80122b4:	00000000 	.word	0x00000000

080122b8 <__ieee754_pow>:
 80122b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122bc:	b091      	sub	sp, #68	@ 0x44
 80122be:	ed8d 1b00 	vstr	d1, [sp]
 80122c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80122c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80122ca:	ea5a 0001 	orrs.w	r0, sl, r1
 80122ce:	ec57 6b10 	vmov	r6, r7, d0
 80122d2:	d113      	bne.n	80122fc <__ieee754_pow+0x44>
 80122d4:	19b3      	adds	r3, r6, r6
 80122d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80122da:	4152      	adcs	r2, r2
 80122dc:	4298      	cmp	r0, r3
 80122de:	4b9a      	ldr	r3, [pc, #616]	@ (8012548 <__ieee754_pow+0x290>)
 80122e0:	4193      	sbcs	r3, r2
 80122e2:	f080 84ee 	bcs.w	8012cc2 <__ieee754_pow+0xa0a>
 80122e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122ea:	4630      	mov	r0, r6
 80122ec:	4639      	mov	r1, r7
 80122ee:	f7ed ffed 	bl	80002cc <__adddf3>
 80122f2:	ec41 0b10 	vmov	d0, r0, r1
 80122f6:	b011      	add	sp, #68	@ 0x44
 80122f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fc:	4a93      	ldr	r2, [pc, #588]	@ (801254c <__ieee754_pow+0x294>)
 80122fe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8012302:	4295      	cmp	r5, r2
 8012304:	46b8      	mov	r8, r7
 8012306:	4633      	mov	r3, r6
 8012308:	d80a      	bhi.n	8012320 <__ieee754_pow+0x68>
 801230a:	d104      	bne.n	8012316 <__ieee754_pow+0x5e>
 801230c:	2e00      	cmp	r6, #0
 801230e:	d1ea      	bne.n	80122e6 <__ieee754_pow+0x2e>
 8012310:	45aa      	cmp	sl, r5
 8012312:	d8e8      	bhi.n	80122e6 <__ieee754_pow+0x2e>
 8012314:	e001      	b.n	801231a <__ieee754_pow+0x62>
 8012316:	4592      	cmp	sl, r2
 8012318:	d802      	bhi.n	8012320 <__ieee754_pow+0x68>
 801231a:	4592      	cmp	sl, r2
 801231c:	d10f      	bne.n	801233e <__ieee754_pow+0x86>
 801231e:	b171      	cbz	r1, 801233e <__ieee754_pow+0x86>
 8012320:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012324:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012328:	ea58 0803 	orrs.w	r8, r8, r3
 801232c:	d1db      	bne.n	80122e6 <__ieee754_pow+0x2e>
 801232e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012332:	18db      	adds	r3, r3, r3
 8012334:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012338:	4152      	adcs	r2, r2
 801233a:	4598      	cmp	r8, r3
 801233c:	e7cf      	b.n	80122de <__ieee754_pow+0x26>
 801233e:	f1b8 0f00 	cmp.w	r8, #0
 8012342:	46ab      	mov	fp, r5
 8012344:	da43      	bge.n	80123ce <__ieee754_pow+0x116>
 8012346:	4a82      	ldr	r2, [pc, #520]	@ (8012550 <__ieee754_pow+0x298>)
 8012348:	4592      	cmp	sl, r2
 801234a:	d856      	bhi.n	80123fa <__ieee754_pow+0x142>
 801234c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012350:	4592      	cmp	sl, r2
 8012352:	f240 84c5 	bls.w	8012ce0 <__ieee754_pow+0xa28>
 8012356:	ea4f 522a 	mov.w	r2, sl, asr #20
 801235a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801235e:	2a14      	cmp	r2, #20
 8012360:	dd18      	ble.n	8012394 <__ieee754_pow+0xdc>
 8012362:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012366:	fa21 f402 	lsr.w	r4, r1, r2
 801236a:	fa04 f202 	lsl.w	r2, r4, r2
 801236e:	428a      	cmp	r2, r1
 8012370:	f040 84b6 	bne.w	8012ce0 <__ieee754_pow+0xa28>
 8012374:	f004 0401 	and.w	r4, r4, #1
 8012378:	f1c4 0402 	rsb	r4, r4, #2
 801237c:	2900      	cmp	r1, #0
 801237e:	d159      	bne.n	8012434 <__ieee754_pow+0x17c>
 8012380:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012384:	d148      	bne.n	8012418 <__ieee754_pow+0x160>
 8012386:	4632      	mov	r2, r6
 8012388:	463b      	mov	r3, r7
 801238a:	4630      	mov	r0, r6
 801238c:	4639      	mov	r1, r7
 801238e:	f7ee f953 	bl	8000638 <__aeabi_dmul>
 8012392:	e7ae      	b.n	80122f2 <__ieee754_pow+0x3a>
 8012394:	2900      	cmp	r1, #0
 8012396:	d14c      	bne.n	8012432 <__ieee754_pow+0x17a>
 8012398:	f1c2 0214 	rsb	r2, r2, #20
 801239c:	fa4a f402 	asr.w	r4, sl, r2
 80123a0:	fa04 f202 	lsl.w	r2, r4, r2
 80123a4:	4552      	cmp	r2, sl
 80123a6:	f040 8498 	bne.w	8012cda <__ieee754_pow+0xa22>
 80123aa:	f004 0401 	and.w	r4, r4, #1
 80123ae:	f1c4 0402 	rsb	r4, r4, #2
 80123b2:	4a68      	ldr	r2, [pc, #416]	@ (8012554 <__ieee754_pow+0x29c>)
 80123b4:	4592      	cmp	sl, r2
 80123b6:	d1e3      	bne.n	8012380 <__ieee754_pow+0xc8>
 80123b8:	f1b9 0f00 	cmp.w	r9, #0
 80123bc:	f280 8489 	bge.w	8012cd2 <__ieee754_pow+0xa1a>
 80123c0:	4964      	ldr	r1, [pc, #400]	@ (8012554 <__ieee754_pow+0x29c>)
 80123c2:	4632      	mov	r2, r6
 80123c4:	463b      	mov	r3, r7
 80123c6:	2000      	movs	r0, #0
 80123c8:	f7ee fa60 	bl	800088c <__aeabi_ddiv>
 80123cc:	e791      	b.n	80122f2 <__ieee754_pow+0x3a>
 80123ce:	2400      	movs	r4, #0
 80123d0:	bb81      	cbnz	r1, 8012434 <__ieee754_pow+0x17c>
 80123d2:	4a5e      	ldr	r2, [pc, #376]	@ (801254c <__ieee754_pow+0x294>)
 80123d4:	4592      	cmp	sl, r2
 80123d6:	d1ec      	bne.n	80123b2 <__ieee754_pow+0xfa>
 80123d8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80123dc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80123e0:	431a      	orrs	r2, r3
 80123e2:	f000 846e 	beq.w	8012cc2 <__ieee754_pow+0xa0a>
 80123e6:	4b5c      	ldr	r3, [pc, #368]	@ (8012558 <__ieee754_pow+0x2a0>)
 80123e8:	429d      	cmp	r5, r3
 80123ea:	d908      	bls.n	80123fe <__ieee754_pow+0x146>
 80123ec:	f1b9 0f00 	cmp.w	r9, #0
 80123f0:	f280 846b 	bge.w	8012cca <__ieee754_pow+0xa12>
 80123f4:	2000      	movs	r0, #0
 80123f6:	2100      	movs	r1, #0
 80123f8:	e77b      	b.n	80122f2 <__ieee754_pow+0x3a>
 80123fa:	2402      	movs	r4, #2
 80123fc:	e7e8      	b.n	80123d0 <__ieee754_pow+0x118>
 80123fe:	f1b9 0f00 	cmp.w	r9, #0
 8012402:	f04f 0000 	mov.w	r0, #0
 8012406:	f04f 0100 	mov.w	r1, #0
 801240a:	f6bf af72 	bge.w	80122f2 <__ieee754_pow+0x3a>
 801240e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012412:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012416:	e76c      	b.n	80122f2 <__ieee754_pow+0x3a>
 8012418:	4a50      	ldr	r2, [pc, #320]	@ (801255c <__ieee754_pow+0x2a4>)
 801241a:	4591      	cmp	r9, r2
 801241c:	d10a      	bne.n	8012434 <__ieee754_pow+0x17c>
 801241e:	f1b8 0f00 	cmp.w	r8, #0
 8012422:	db07      	blt.n	8012434 <__ieee754_pow+0x17c>
 8012424:	ec47 6b10 	vmov	d0, r6, r7
 8012428:	b011      	add	sp, #68	@ 0x44
 801242a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801242e:	f7ff b945 	b.w	80116bc <__ieee754_sqrt>
 8012432:	2400      	movs	r4, #0
 8012434:	ec47 6b10 	vmov	d0, r6, r7
 8012438:	9302      	str	r3, [sp, #8]
 801243a:	f7ff f92b 	bl	8011694 <fabs>
 801243e:	9b02      	ldr	r3, [sp, #8]
 8012440:	ec51 0b10 	vmov	r0, r1, d0
 8012444:	bb43      	cbnz	r3, 8012498 <__ieee754_pow+0x1e0>
 8012446:	4b43      	ldr	r3, [pc, #268]	@ (8012554 <__ieee754_pow+0x29c>)
 8012448:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801244c:	429a      	cmp	r2, r3
 801244e:	d000      	beq.n	8012452 <__ieee754_pow+0x19a>
 8012450:	bb15      	cbnz	r5, 8012498 <__ieee754_pow+0x1e0>
 8012452:	f1b9 0f00 	cmp.w	r9, #0
 8012456:	da05      	bge.n	8012464 <__ieee754_pow+0x1ac>
 8012458:	4602      	mov	r2, r0
 801245a:	460b      	mov	r3, r1
 801245c:	2000      	movs	r0, #0
 801245e:	493d      	ldr	r1, [pc, #244]	@ (8012554 <__ieee754_pow+0x29c>)
 8012460:	f7ee fa14 	bl	800088c <__aeabi_ddiv>
 8012464:	f1b8 0f00 	cmp.w	r8, #0
 8012468:	f6bf af43 	bge.w	80122f2 <__ieee754_pow+0x3a>
 801246c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012470:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012474:	4325      	orrs	r5, r4
 8012476:	d108      	bne.n	801248a <__ieee754_pow+0x1d2>
 8012478:	4602      	mov	r2, r0
 801247a:	460b      	mov	r3, r1
 801247c:	4610      	mov	r0, r2
 801247e:	4619      	mov	r1, r3
 8012480:	f7ed ff22 	bl	80002c8 <__aeabi_dsub>
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	e79e      	b.n	80123c8 <__ieee754_pow+0x110>
 801248a:	2c01      	cmp	r4, #1
 801248c:	f47f af31 	bne.w	80122f2 <__ieee754_pow+0x3a>
 8012490:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012494:	4619      	mov	r1, r3
 8012496:	e72c      	b.n	80122f2 <__ieee754_pow+0x3a>
 8012498:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801249c:	3b01      	subs	r3, #1
 801249e:	ea53 0204 	orrs.w	r2, r3, r4
 80124a2:	d102      	bne.n	80124aa <__ieee754_pow+0x1f2>
 80124a4:	4632      	mov	r2, r6
 80124a6:	463b      	mov	r3, r7
 80124a8:	e7e8      	b.n	801247c <__ieee754_pow+0x1c4>
 80124aa:	3c01      	subs	r4, #1
 80124ac:	431c      	orrs	r4, r3
 80124ae:	d016      	beq.n	80124de <__ieee754_pow+0x226>
 80124b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012538 <__ieee754_pow+0x280>
 80124b4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80124b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80124bc:	f240 8110 	bls.w	80126e0 <__ieee754_pow+0x428>
 80124c0:	4b27      	ldr	r3, [pc, #156]	@ (8012560 <__ieee754_pow+0x2a8>)
 80124c2:	459a      	cmp	sl, r3
 80124c4:	4b24      	ldr	r3, [pc, #144]	@ (8012558 <__ieee754_pow+0x2a0>)
 80124c6:	d916      	bls.n	80124f6 <__ieee754_pow+0x23e>
 80124c8:	429d      	cmp	r5, r3
 80124ca:	d80b      	bhi.n	80124e4 <__ieee754_pow+0x22c>
 80124cc:	f1b9 0f00 	cmp.w	r9, #0
 80124d0:	da0b      	bge.n	80124ea <__ieee754_pow+0x232>
 80124d2:	2000      	movs	r0, #0
 80124d4:	b011      	add	sp, #68	@ 0x44
 80124d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124da:	f000 be81 	b.w	80131e0 <__math_oflow>
 80124de:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8012540 <__ieee754_pow+0x288>
 80124e2:	e7e7      	b.n	80124b4 <__ieee754_pow+0x1fc>
 80124e4:	f1b9 0f00 	cmp.w	r9, #0
 80124e8:	dcf3      	bgt.n	80124d2 <__ieee754_pow+0x21a>
 80124ea:	2000      	movs	r0, #0
 80124ec:	b011      	add	sp, #68	@ 0x44
 80124ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f2:	f000 be6d 	b.w	80131d0 <__math_uflow>
 80124f6:	429d      	cmp	r5, r3
 80124f8:	d20c      	bcs.n	8012514 <__ieee754_pow+0x25c>
 80124fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124fe:	2200      	movs	r2, #0
 8012500:	2300      	movs	r3, #0
 8012502:	f7ee fb0b 	bl	8000b1c <__aeabi_dcmplt>
 8012506:	3800      	subs	r0, #0
 8012508:	bf18      	it	ne
 801250a:	2001      	movne	r0, #1
 801250c:	f1b9 0f00 	cmp.w	r9, #0
 8012510:	daec      	bge.n	80124ec <__ieee754_pow+0x234>
 8012512:	e7df      	b.n	80124d4 <__ieee754_pow+0x21c>
 8012514:	4b0f      	ldr	r3, [pc, #60]	@ (8012554 <__ieee754_pow+0x29c>)
 8012516:	429d      	cmp	r5, r3
 8012518:	f04f 0200 	mov.w	r2, #0
 801251c:	d922      	bls.n	8012564 <__ieee754_pow+0x2ac>
 801251e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012522:	2300      	movs	r3, #0
 8012524:	f7ee fafa 	bl	8000b1c <__aeabi_dcmplt>
 8012528:	3800      	subs	r0, #0
 801252a:	bf18      	it	ne
 801252c:	2001      	movne	r0, #1
 801252e:	f1b9 0f00 	cmp.w	r9, #0
 8012532:	dccf      	bgt.n	80124d4 <__ieee754_pow+0x21c>
 8012534:	e7da      	b.n	80124ec <__ieee754_pow+0x234>
 8012536:	bf00      	nop
 8012538:	00000000 	.word	0x00000000
 801253c:	3ff00000 	.word	0x3ff00000
 8012540:	00000000 	.word	0x00000000
 8012544:	bff00000 	.word	0xbff00000
 8012548:	fff00000 	.word	0xfff00000
 801254c:	7ff00000 	.word	0x7ff00000
 8012550:	433fffff 	.word	0x433fffff
 8012554:	3ff00000 	.word	0x3ff00000
 8012558:	3fefffff 	.word	0x3fefffff
 801255c:	3fe00000 	.word	0x3fe00000
 8012560:	43f00000 	.word	0x43f00000
 8012564:	4b5a      	ldr	r3, [pc, #360]	@ (80126d0 <__ieee754_pow+0x418>)
 8012566:	f7ed feaf 	bl	80002c8 <__aeabi_dsub>
 801256a:	a351      	add	r3, pc, #324	@ (adr r3, 80126b0 <__ieee754_pow+0x3f8>)
 801256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012570:	4604      	mov	r4, r0
 8012572:	460d      	mov	r5, r1
 8012574:	f7ee f860 	bl	8000638 <__aeabi_dmul>
 8012578:	a34f      	add	r3, pc, #316	@ (adr r3, 80126b8 <__ieee754_pow+0x400>)
 801257a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257e:	4606      	mov	r6, r0
 8012580:	460f      	mov	r7, r1
 8012582:	4620      	mov	r0, r4
 8012584:	4629      	mov	r1, r5
 8012586:	f7ee f857 	bl	8000638 <__aeabi_dmul>
 801258a:	4b52      	ldr	r3, [pc, #328]	@ (80126d4 <__ieee754_pow+0x41c>)
 801258c:	4682      	mov	sl, r0
 801258e:	468b      	mov	fp, r1
 8012590:	2200      	movs	r2, #0
 8012592:	4620      	mov	r0, r4
 8012594:	4629      	mov	r1, r5
 8012596:	f7ee f84f 	bl	8000638 <__aeabi_dmul>
 801259a:	4602      	mov	r2, r0
 801259c:	460b      	mov	r3, r1
 801259e:	a148      	add	r1, pc, #288	@ (adr r1, 80126c0 <__ieee754_pow+0x408>)
 80125a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125a4:	f7ed fe90 	bl	80002c8 <__aeabi_dsub>
 80125a8:	4622      	mov	r2, r4
 80125aa:	462b      	mov	r3, r5
 80125ac:	f7ee f844 	bl	8000638 <__aeabi_dmul>
 80125b0:	4602      	mov	r2, r0
 80125b2:	460b      	mov	r3, r1
 80125b4:	2000      	movs	r0, #0
 80125b6:	4948      	ldr	r1, [pc, #288]	@ (80126d8 <__ieee754_pow+0x420>)
 80125b8:	f7ed fe86 	bl	80002c8 <__aeabi_dsub>
 80125bc:	4622      	mov	r2, r4
 80125be:	4680      	mov	r8, r0
 80125c0:	4689      	mov	r9, r1
 80125c2:	462b      	mov	r3, r5
 80125c4:	4620      	mov	r0, r4
 80125c6:	4629      	mov	r1, r5
 80125c8:	f7ee f836 	bl	8000638 <__aeabi_dmul>
 80125cc:	4602      	mov	r2, r0
 80125ce:	460b      	mov	r3, r1
 80125d0:	4640      	mov	r0, r8
 80125d2:	4649      	mov	r1, r9
 80125d4:	f7ee f830 	bl	8000638 <__aeabi_dmul>
 80125d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80126c8 <__ieee754_pow+0x410>)
 80125da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125de:	f7ee f82b 	bl	8000638 <__aeabi_dmul>
 80125e2:	4602      	mov	r2, r0
 80125e4:	460b      	mov	r3, r1
 80125e6:	4650      	mov	r0, sl
 80125e8:	4659      	mov	r1, fp
 80125ea:	f7ed fe6d 	bl	80002c8 <__aeabi_dsub>
 80125ee:	4602      	mov	r2, r0
 80125f0:	460b      	mov	r3, r1
 80125f2:	4680      	mov	r8, r0
 80125f4:	4689      	mov	r9, r1
 80125f6:	4630      	mov	r0, r6
 80125f8:	4639      	mov	r1, r7
 80125fa:	f7ed fe67 	bl	80002cc <__adddf3>
 80125fe:	2400      	movs	r4, #0
 8012600:	4632      	mov	r2, r6
 8012602:	463b      	mov	r3, r7
 8012604:	4620      	mov	r0, r4
 8012606:	460d      	mov	r5, r1
 8012608:	f7ed fe5e 	bl	80002c8 <__aeabi_dsub>
 801260c:	4602      	mov	r2, r0
 801260e:	460b      	mov	r3, r1
 8012610:	4640      	mov	r0, r8
 8012612:	4649      	mov	r1, r9
 8012614:	f7ed fe58 	bl	80002c8 <__aeabi_dsub>
 8012618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801261c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012620:	2300      	movs	r3, #0
 8012622:	9304      	str	r3, [sp, #16]
 8012624:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012628:	4606      	mov	r6, r0
 801262a:	460f      	mov	r7, r1
 801262c:	465b      	mov	r3, fp
 801262e:	4652      	mov	r2, sl
 8012630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012634:	f7ed fe48 	bl	80002c8 <__aeabi_dsub>
 8012638:	4622      	mov	r2, r4
 801263a:	462b      	mov	r3, r5
 801263c:	f7ed fffc 	bl	8000638 <__aeabi_dmul>
 8012640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012644:	4680      	mov	r8, r0
 8012646:	4689      	mov	r9, r1
 8012648:	4630      	mov	r0, r6
 801264a:	4639      	mov	r1, r7
 801264c:	f7ed fff4 	bl	8000638 <__aeabi_dmul>
 8012650:	4602      	mov	r2, r0
 8012652:	460b      	mov	r3, r1
 8012654:	4640      	mov	r0, r8
 8012656:	4649      	mov	r1, r9
 8012658:	f7ed fe38 	bl	80002cc <__adddf3>
 801265c:	465b      	mov	r3, fp
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	4652      	mov	r2, sl
 8012664:	4620      	mov	r0, r4
 8012666:	4629      	mov	r1, r5
 8012668:	f7ed ffe6 	bl	8000638 <__aeabi_dmul>
 801266c:	460b      	mov	r3, r1
 801266e:	4602      	mov	r2, r0
 8012670:	4680      	mov	r8, r0
 8012672:	4689      	mov	r9, r1
 8012674:	4630      	mov	r0, r6
 8012676:	4639      	mov	r1, r7
 8012678:	f7ed fe28 	bl	80002cc <__adddf3>
 801267c:	4b17      	ldr	r3, [pc, #92]	@ (80126dc <__ieee754_pow+0x424>)
 801267e:	4299      	cmp	r1, r3
 8012680:	4604      	mov	r4, r0
 8012682:	460d      	mov	r5, r1
 8012684:	468b      	mov	fp, r1
 8012686:	f340 820b 	ble.w	8012aa0 <__ieee754_pow+0x7e8>
 801268a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801268e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012692:	4303      	orrs	r3, r0
 8012694:	f000 81ea 	beq.w	8012a6c <__ieee754_pow+0x7b4>
 8012698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801269c:	2200      	movs	r2, #0
 801269e:	2300      	movs	r3, #0
 80126a0:	f7ee fa3c 	bl	8000b1c <__aeabi_dcmplt>
 80126a4:	3800      	subs	r0, #0
 80126a6:	bf18      	it	ne
 80126a8:	2001      	movne	r0, #1
 80126aa:	e713      	b.n	80124d4 <__ieee754_pow+0x21c>
 80126ac:	f3af 8000 	nop.w
 80126b0:	60000000 	.word	0x60000000
 80126b4:	3ff71547 	.word	0x3ff71547
 80126b8:	f85ddf44 	.word	0xf85ddf44
 80126bc:	3e54ae0b 	.word	0x3e54ae0b
 80126c0:	55555555 	.word	0x55555555
 80126c4:	3fd55555 	.word	0x3fd55555
 80126c8:	652b82fe 	.word	0x652b82fe
 80126cc:	3ff71547 	.word	0x3ff71547
 80126d0:	3ff00000 	.word	0x3ff00000
 80126d4:	3fd00000 	.word	0x3fd00000
 80126d8:	3fe00000 	.word	0x3fe00000
 80126dc:	408fffff 	.word	0x408fffff
 80126e0:	4bd5      	ldr	r3, [pc, #852]	@ (8012a38 <__ieee754_pow+0x780>)
 80126e2:	ea08 0303 	and.w	r3, r8, r3
 80126e6:	2200      	movs	r2, #0
 80126e8:	b92b      	cbnz	r3, 80126f6 <__ieee754_pow+0x43e>
 80126ea:	4bd4      	ldr	r3, [pc, #848]	@ (8012a3c <__ieee754_pow+0x784>)
 80126ec:	f7ed ffa4 	bl	8000638 <__aeabi_dmul>
 80126f0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80126f4:	468b      	mov	fp, r1
 80126f6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80126fa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80126fe:	4413      	add	r3, r2
 8012700:	930a      	str	r3, [sp, #40]	@ 0x28
 8012702:	4bcf      	ldr	r3, [pc, #828]	@ (8012a40 <__ieee754_pow+0x788>)
 8012704:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012708:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801270c:	459b      	cmp	fp, r3
 801270e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012712:	dd08      	ble.n	8012726 <__ieee754_pow+0x46e>
 8012714:	4bcb      	ldr	r3, [pc, #812]	@ (8012a44 <__ieee754_pow+0x78c>)
 8012716:	459b      	cmp	fp, r3
 8012718:	f340 81a5 	ble.w	8012a66 <__ieee754_pow+0x7ae>
 801271c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801271e:	3301      	adds	r3, #1
 8012720:	930a      	str	r3, [sp, #40]	@ 0x28
 8012722:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012726:	f04f 0a00 	mov.w	sl, #0
 801272a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801272e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012730:	4bc5      	ldr	r3, [pc, #788]	@ (8012a48 <__ieee754_pow+0x790>)
 8012732:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012736:	ed93 7b00 	vldr	d7, [r3]
 801273a:	4629      	mov	r1, r5
 801273c:	ec53 2b17 	vmov	r2, r3, d7
 8012740:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012744:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012748:	f7ed fdbe 	bl	80002c8 <__aeabi_dsub>
 801274c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012750:	4606      	mov	r6, r0
 8012752:	460f      	mov	r7, r1
 8012754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012758:	f7ed fdb8 	bl	80002cc <__adddf3>
 801275c:	4602      	mov	r2, r0
 801275e:	460b      	mov	r3, r1
 8012760:	2000      	movs	r0, #0
 8012762:	49ba      	ldr	r1, [pc, #744]	@ (8012a4c <__ieee754_pow+0x794>)
 8012764:	f7ee f892 	bl	800088c <__aeabi_ddiv>
 8012768:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801276c:	4602      	mov	r2, r0
 801276e:	460b      	mov	r3, r1
 8012770:	4630      	mov	r0, r6
 8012772:	4639      	mov	r1, r7
 8012774:	f7ed ff60 	bl	8000638 <__aeabi_dmul>
 8012778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801277c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012780:	106d      	asrs	r5, r5, #1
 8012782:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012786:	f04f 0b00 	mov.w	fp, #0
 801278a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801278e:	4661      	mov	r1, ip
 8012790:	2200      	movs	r2, #0
 8012792:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012796:	4658      	mov	r0, fp
 8012798:	46e1      	mov	r9, ip
 801279a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801279e:	4614      	mov	r4, r2
 80127a0:	461d      	mov	r5, r3
 80127a2:	f7ed ff49 	bl	8000638 <__aeabi_dmul>
 80127a6:	4602      	mov	r2, r0
 80127a8:	460b      	mov	r3, r1
 80127aa:	4630      	mov	r0, r6
 80127ac:	4639      	mov	r1, r7
 80127ae:	f7ed fd8b 	bl	80002c8 <__aeabi_dsub>
 80127b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127b6:	4606      	mov	r6, r0
 80127b8:	460f      	mov	r7, r1
 80127ba:	4620      	mov	r0, r4
 80127bc:	4629      	mov	r1, r5
 80127be:	f7ed fd83 	bl	80002c8 <__aeabi_dsub>
 80127c2:	4602      	mov	r2, r0
 80127c4:	460b      	mov	r3, r1
 80127c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80127ca:	f7ed fd7d 	bl	80002c8 <__aeabi_dsub>
 80127ce:	465a      	mov	r2, fp
 80127d0:	464b      	mov	r3, r9
 80127d2:	f7ed ff31 	bl	8000638 <__aeabi_dmul>
 80127d6:	4602      	mov	r2, r0
 80127d8:	460b      	mov	r3, r1
 80127da:	4630      	mov	r0, r6
 80127dc:	4639      	mov	r1, r7
 80127de:	f7ed fd73 	bl	80002c8 <__aeabi_dsub>
 80127e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80127e6:	f7ed ff27 	bl	8000638 <__aeabi_dmul>
 80127ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80127f2:	4610      	mov	r0, r2
 80127f4:	4619      	mov	r1, r3
 80127f6:	f7ed ff1f 	bl	8000638 <__aeabi_dmul>
 80127fa:	a37d      	add	r3, pc, #500	@ (adr r3, 80129f0 <__ieee754_pow+0x738>)
 80127fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012800:	4604      	mov	r4, r0
 8012802:	460d      	mov	r5, r1
 8012804:	f7ed ff18 	bl	8000638 <__aeabi_dmul>
 8012808:	a37b      	add	r3, pc, #492	@ (adr r3, 80129f8 <__ieee754_pow+0x740>)
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ed fd5d 	bl	80002cc <__adddf3>
 8012812:	4622      	mov	r2, r4
 8012814:	462b      	mov	r3, r5
 8012816:	f7ed ff0f 	bl	8000638 <__aeabi_dmul>
 801281a:	a379      	add	r3, pc, #484	@ (adr r3, 8012a00 <__ieee754_pow+0x748>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	f7ed fd54 	bl	80002cc <__adddf3>
 8012824:	4622      	mov	r2, r4
 8012826:	462b      	mov	r3, r5
 8012828:	f7ed ff06 	bl	8000638 <__aeabi_dmul>
 801282c:	a376      	add	r3, pc, #472	@ (adr r3, 8012a08 <__ieee754_pow+0x750>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	f7ed fd4b 	bl	80002cc <__adddf3>
 8012836:	4622      	mov	r2, r4
 8012838:	462b      	mov	r3, r5
 801283a:	f7ed fefd 	bl	8000638 <__aeabi_dmul>
 801283e:	a374      	add	r3, pc, #464	@ (adr r3, 8012a10 <__ieee754_pow+0x758>)
 8012840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012844:	f7ed fd42 	bl	80002cc <__adddf3>
 8012848:	4622      	mov	r2, r4
 801284a:	462b      	mov	r3, r5
 801284c:	f7ed fef4 	bl	8000638 <__aeabi_dmul>
 8012850:	a371      	add	r3, pc, #452	@ (adr r3, 8012a18 <__ieee754_pow+0x760>)
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	f7ed fd39 	bl	80002cc <__adddf3>
 801285a:	4622      	mov	r2, r4
 801285c:	4606      	mov	r6, r0
 801285e:	460f      	mov	r7, r1
 8012860:	462b      	mov	r3, r5
 8012862:	4620      	mov	r0, r4
 8012864:	4629      	mov	r1, r5
 8012866:	f7ed fee7 	bl	8000638 <__aeabi_dmul>
 801286a:	4602      	mov	r2, r0
 801286c:	460b      	mov	r3, r1
 801286e:	4630      	mov	r0, r6
 8012870:	4639      	mov	r1, r7
 8012872:	f7ed fee1 	bl	8000638 <__aeabi_dmul>
 8012876:	465a      	mov	r2, fp
 8012878:	4604      	mov	r4, r0
 801287a:	460d      	mov	r5, r1
 801287c:	464b      	mov	r3, r9
 801287e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012882:	f7ed fd23 	bl	80002cc <__adddf3>
 8012886:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801288a:	f7ed fed5 	bl	8000638 <__aeabi_dmul>
 801288e:	4622      	mov	r2, r4
 8012890:	462b      	mov	r3, r5
 8012892:	f7ed fd1b 	bl	80002cc <__adddf3>
 8012896:	465a      	mov	r2, fp
 8012898:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801289c:	464b      	mov	r3, r9
 801289e:	4658      	mov	r0, fp
 80128a0:	4649      	mov	r1, r9
 80128a2:	f7ed fec9 	bl	8000638 <__aeabi_dmul>
 80128a6:	4b6a      	ldr	r3, [pc, #424]	@ (8012a50 <__ieee754_pow+0x798>)
 80128a8:	2200      	movs	r2, #0
 80128aa:	4606      	mov	r6, r0
 80128ac:	460f      	mov	r7, r1
 80128ae:	f7ed fd0d 	bl	80002cc <__adddf3>
 80128b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128b6:	f7ed fd09 	bl	80002cc <__adddf3>
 80128ba:	46d8      	mov	r8, fp
 80128bc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80128c0:	460d      	mov	r5, r1
 80128c2:	465a      	mov	r2, fp
 80128c4:	460b      	mov	r3, r1
 80128c6:	4640      	mov	r0, r8
 80128c8:	4649      	mov	r1, r9
 80128ca:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80128ce:	f7ed feb3 	bl	8000638 <__aeabi_dmul>
 80128d2:	465c      	mov	r4, fp
 80128d4:	4680      	mov	r8, r0
 80128d6:	4689      	mov	r9, r1
 80128d8:	4b5d      	ldr	r3, [pc, #372]	@ (8012a50 <__ieee754_pow+0x798>)
 80128da:	2200      	movs	r2, #0
 80128dc:	4620      	mov	r0, r4
 80128de:	4629      	mov	r1, r5
 80128e0:	f7ed fcf2 	bl	80002c8 <__aeabi_dsub>
 80128e4:	4632      	mov	r2, r6
 80128e6:	463b      	mov	r3, r7
 80128e8:	f7ed fcee 	bl	80002c8 <__aeabi_dsub>
 80128ec:	4602      	mov	r2, r0
 80128ee:	460b      	mov	r3, r1
 80128f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80128f4:	f7ed fce8 	bl	80002c8 <__aeabi_dsub>
 80128f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128fc:	f7ed fe9c 	bl	8000638 <__aeabi_dmul>
 8012900:	4622      	mov	r2, r4
 8012902:	4606      	mov	r6, r0
 8012904:	460f      	mov	r7, r1
 8012906:	462b      	mov	r3, r5
 8012908:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801290c:	f7ed fe94 	bl	8000638 <__aeabi_dmul>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4630      	mov	r0, r6
 8012916:	4639      	mov	r1, r7
 8012918:	f7ed fcd8 	bl	80002cc <__adddf3>
 801291c:	4606      	mov	r6, r0
 801291e:	460f      	mov	r7, r1
 8012920:	4602      	mov	r2, r0
 8012922:	460b      	mov	r3, r1
 8012924:	4640      	mov	r0, r8
 8012926:	4649      	mov	r1, r9
 8012928:	f7ed fcd0 	bl	80002cc <__adddf3>
 801292c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012930:	a33b      	add	r3, pc, #236	@ (adr r3, 8012a20 <__ieee754_pow+0x768>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	4658      	mov	r0, fp
 8012938:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801293c:	460d      	mov	r5, r1
 801293e:	f7ed fe7b 	bl	8000638 <__aeabi_dmul>
 8012942:	465c      	mov	r4, fp
 8012944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012948:	4642      	mov	r2, r8
 801294a:	464b      	mov	r3, r9
 801294c:	4620      	mov	r0, r4
 801294e:	4629      	mov	r1, r5
 8012950:	f7ed fcba 	bl	80002c8 <__aeabi_dsub>
 8012954:	4602      	mov	r2, r0
 8012956:	460b      	mov	r3, r1
 8012958:	4630      	mov	r0, r6
 801295a:	4639      	mov	r1, r7
 801295c:	f7ed fcb4 	bl	80002c8 <__aeabi_dsub>
 8012960:	a331      	add	r3, pc, #196	@ (adr r3, 8012a28 <__ieee754_pow+0x770>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	f7ed fe67 	bl	8000638 <__aeabi_dmul>
 801296a:	a331      	add	r3, pc, #196	@ (adr r3, 8012a30 <__ieee754_pow+0x778>)
 801296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012970:	4606      	mov	r6, r0
 8012972:	460f      	mov	r7, r1
 8012974:	4620      	mov	r0, r4
 8012976:	4629      	mov	r1, r5
 8012978:	f7ed fe5e 	bl	8000638 <__aeabi_dmul>
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	4630      	mov	r0, r6
 8012982:	4639      	mov	r1, r7
 8012984:	f7ed fca2 	bl	80002cc <__adddf3>
 8012988:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801298a:	4b32      	ldr	r3, [pc, #200]	@ (8012a54 <__ieee754_pow+0x79c>)
 801298c:	4413      	add	r3, r2
 801298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012992:	f7ed fc9b 	bl	80002cc <__adddf3>
 8012996:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801299a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801299c:	f7ed fde2 	bl	8000564 <__aeabi_i2d>
 80129a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80129a2:	4b2d      	ldr	r3, [pc, #180]	@ (8012a58 <__ieee754_pow+0x7a0>)
 80129a4:	4413      	add	r3, r2
 80129a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80129aa:	4606      	mov	r6, r0
 80129ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129b0:	460f      	mov	r7, r1
 80129b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129b6:	f7ed fc89 	bl	80002cc <__adddf3>
 80129ba:	4642      	mov	r2, r8
 80129bc:	464b      	mov	r3, r9
 80129be:	f7ed fc85 	bl	80002cc <__adddf3>
 80129c2:	4632      	mov	r2, r6
 80129c4:	463b      	mov	r3, r7
 80129c6:	f7ed fc81 	bl	80002cc <__adddf3>
 80129ca:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80129ce:	4632      	mov	r2, r6
 80129d0:	463b      	mov	r3, r7
 80129d2:	4658      	mov	r0, fp
 80129d4:	460d      	mov	r5, r1
 80129d6:	f7ed fc77 	bl	80002c8 <__aeabi_dsub>
 80129da:	4642      	mov	r2, r8
 80129dc:	464b      	mov	r3, r9
 80129de:	f7ed fc73 	bl	80002c8 <__aeabi_dsub>
 80129e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129e6:	f7ed fc6f 	bl	80002c8 <__aeabi_dsub>
 80129ea:	465c      	mov	r4, fp
 80129ec:	e036      	b.n	8012a5c <__ieee754_pow+0x7a4>
 80129ee:	bf00      	nop
 80129f0:	4a454eef 	.word	0x4a454eef
 80129f4:	3fca7e28 	.word	0x3fca7e28
 80129f8:	93c9db65 	.word	0x93c9db65
 80129fc:	3fcd864a 	.word	0x3fcd864a
 8012a00:	a91d4101 	.word	0xa91d4101
 8012a04:	3fd17460 	.word	0x3fd17460
 8012a08:	518f264d 	.word	0x518f264d
 8012a0c:	3fd55555 	.word	0x3fd55555
 8012a10:	db6fabff 	.word	0xdb6fabff
 8012a14:	3fdb6db6 	.word	0x3fdb6db6
 8012a18:	33333303 	.word	0x33333303
 8012a1c:	3fe33333 	.word	0x3fe33333
 8012a20:	e0000000 	.word	0xe0000000
 8012a24:	3feec709 	.word	0x3feec709
 8012a28:	dc3a03fd 	.word	0xdc3a03fd
 8012a2c:	3feec709 	.word	0x3feec709
 8012a30:	145b01f5 	.word	0x145b01f5
 8012a34:	be3e2fe0 	.word	0xbe3e2fe0
 8012a38:	7ff00000 	.word	0x7ff00000
 8012a3c:	43400000 	.word	0x43400000
 8012a40:	0003988e 	.word	0x0003988e
 8012a44:	000bb679 	.word	0x000bb679
 8012a48:	080137a8 	.word	0x080137a8
 8012a4c:	3ff00000 	.word	0x3ff00000
 8012a50:	40080000 	.word	0x40080000
 8012a54:	08013788 	.word	0x08013788
 8012a58:	08013798 	.word	0x08013798
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	460b      	mov	r3, r1
 8012a60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a64:	e5d6      	b.n	8012614 <__ieee754_pow+0x35c>
 8012a66:	f04f 0a01 	mov.w	sl, #1
 8012a6a:	e65e      	b.n	801272a <__ieee754_pow+0x472>
 8012a6c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8012d44 <__ieee754_pow+0xa8c>)
 8012a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a72:	4630      	mov	r0, r6
 8012a74:	4639      	mov	r1, r7
 8012a76:	f7ed fc29 	bl	80002cc <__adddf3>
 8012a7a:	4642      	mov	r2, r8
 8012a7c:	e9cd 0100 	strd	r0, r1, [sp]
 8012a80:	464b      	mov	r3, r9
 8012a82:	4620      	mov	r0, r4
 8012a84:	4629      	mov	r1, r5
 8012a86:	f7ed fc1f 	bl	80002c8 <__aeabi_dsub>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	460b      	mov	r3, r1
 8012a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a92:	f7ee f861 	bl	8000b58 <__aeabi_dcmpgt>
 8012a96:	2800      	cmp	r0, #0
 8012a98:	f47f adfe 	bne.w	8012698 <__ieee754_pow+0x3e0>
 8012a9c:	4ba2      	ldr	r3, [pc, #648]	@ (8012d28 <__ieee754_pow+0xa70>)
 8012a9e:	e022      	b.n	8012ae6 <__ieee754_pow+0x82e>
 8012aa0:	4ca2      	ldr	r4, [pc, #648]	@ (8012d2c <__ieee754_pow+0xa74>)
 8012aa2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012aa6:	42a3      	cmp	r3, r4
 8012aa8:	d919      	bls.n	8012ade <__ieee754_pow+0x826>
 8012aaa:	4ba1      	ldr	r3, [pc, #644]	@ (8012d30 <__ieee754_pow+0xa78>)
 8012aac:	440b      	add	r3, r1
 8012aae:	4303      	orrs	r3, r0
 8012ab0:	d009      	beq.n	8012ac6 <__ieee754_pow+0x80e>
 8012ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	2300      	movs	r3, #0
 8012aba:	f7ee f82f 	bl	8000b1c <__aeabi_dcmplt>
 8012abe:	3800      	subs	r0, #0
 8012ac0:	bf18      	it	ne
 8012ac2:	2001      	movne	r0, #1
 8012ac4:	e512      	b.n	80124ec <__ieee754_pow+0x234>
 8012ac6:	4642      	mov	r2, r8
 8012ac8:	464b      	mov	r3, r9
 8012aca:	f7ed fbfd 	bl	80002c8 <__aeabi_dsub>
 8012ace:	4632      	mov	r2, r6
 8012ad0:	463b      	mov	r3, r7
 8012ad2:	f7ee f837 	bl	8000b44 <__aeabi_dcmpge>
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	d1eb      	bne.n	8012ab2 <__ieee754_pow+0x7fa>
 8012ada:	4b96      	ldr	r3, [pc, #600]	@ (8012d34 <__ieee754_pow+0xa7c>)
 8012adc:	e003      	b.n	8012ae6 <__ieee754_pow+0x82e>
 8012ade:	4a96      	ldr	r2, [pc, #600]	@ (8012d38 <__ieee754_pow+0xa80>)
 8012ae0:	4293      	cmp	r3, r2
 8012ae2:	f240 80e7 	bls.w	8012cb4 <__ieee754_pow+0x9fc>
 8012ae6:	151b      	asrs	r3, r3, #20
 8012ae8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8012aec:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8012af0:	fa4a fa03 	asr.w	sl, sl, r3
 8012af4:	44da      	add	sl, fp
 8012af6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012afa:	4890      	ldr	r0, [pc, #576]	@ (8012d3c <__ieee754_pow+0xa84>)
 8012afc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012b00:	4108      	asrs	r0, r1
 8012b02:	ea00 030a 	and.w	r3, r0, sl
 8012b06:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012b0a:	f1c1 0114 	rsb	r1, r1, #20
 8012b0e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012b12:	fa4a fa01 	asr.w	sl, sl, r1
 8012b16:	f1bb 0f00 	cmp.w	fp, #0
 8012b1a:	4640      	mov	r0, r8
 8012b1c:	4649      	mov	r1, r9
 8012b1e:	f04f 0200 	mov.w	r2, #0
 8012b22:	bfb8      	it	lt
 8012b24:	f1ca 0a00 	rsblt	sl, sl, #0
 8012b28:	f7ed fbce 	bl	80002c8 <__aeabi_dsub>
 8012b2c:	4680      	mov	r8, r0
 8012b2e:	4689      	mov	r9, r1
 8012b30:	4632      	mov	r2, r6
 8012b32:	463b      	mov	r3, r7
 8012b34:	4640      	mov	r0, r8
 8012b36:	4649      	mov	r1, r9
 8012b38:	f7ed fbc8 	bl	80002cc <__adddf3>
 8012b3c:	2400      	movs	r4, #0
 8012b3e:	a36a      	add	r3, pc, #424	@ (adr r3, 8012ce8 <__ieee754_pow+0xa30>)
 8012b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b44:	4620      	mov	r0, r4
 8012b46:	460d      	mov	r5, r1
 8012b48:	f7ed fd76 	bl	8000638 <__aeabi_dmul>
 8012b4c:	4642      	mov	r2, r8
 8012b4e:	e9cd 0100 	strd	r0, r1, [sp]
 8012b52:	464b      	mov	r3, r9
 8012b54:	4620      	mov	r0, r4
 8012b56:	4629      	mov	r1, r5
 8012b58:	f7ed fbb6 	bl	80002c8 <__aeabi_dsub>
 8012b5c:	4602      	mov	r2, r0
 8012b5e:	460b      	mov	r3, r1
 8012b60:	4630      	mov	r0, r6
 8012b62:	4639      	mov	r1, r7
 8012b64:	f7ed fbb0 	bl	80002c8 <__aeabi_dsub>
 8012b68:	a361      	add	r3, pc, #388	@ (adr r3, 8012cf0 <__ieee754_pow+0xa38>)
 8012b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6e:	f7ed fd63 	bl	8000638 <__aeabi_dmul>
 8012b72:	a361      	add	r3, pc, #388	@ (adr r3, 8012cf8 <__ieee754_pow+0xa40>)
 8012b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b78:	4680      	mov	r8, r0
 8012b7a:	4689      	mov	r9, r1
 8012b7c:	4620      	mov	r0, r4
 8012b7e:	4629      	mov	r1, r5
 8012b80:	f7ed fd5a 	bl	8000638 <__aeabi_dmul>
 8012b84:	4602      	mov	r2, r0
 8012b86:	460b      	mov	r3, r1
 8012b88:	4640      	mov	r0, r8
 8012b8a:	4649      	mov	r1, r9
 8012b8c:	f7ed fb9e 	bl	80002cc <__adddf3>
 8012b90:	4604      	mov	r4, r0
 8012b92:	460d      	mov	r5, r1
 8012b94:	4602      	mov	r2, r0
 8012b96:	460b      	mov	r3, r1
 8012b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b9c:	f7ed fb96 	bl	80002cc <__adddf3>
 8012ba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ba4:	4680      	mov	r8, r0
 8012ba6:	4689      	mov	r9, r1
 8012ba8:	f7ed fb8e 	bl	80002c8 <__aeabi_dsub>
 8012bac:	4602      	mov	r2, r0
 8012bae:	460b      	mov	r3, r1
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	4629      	mov	r1, r5
 8012bb4:	f7ed fb88 	bl	80002c8 <__aeabi_dsub>
 8012bb8:	4642      	mov	r2, r8
 8012bba:	4606      	mov	r6, r0
 8012bbc:	460f      	mov	r7, r1
 8012bbe:	464b      	mov	r3, r9
 8012bc0:	4640      	mov	r0, r8
 8012bc2:	4649      	mov	r1, r9
 8012bc4:	f7ed fd38 	bl	8000638 <__aeabi_dmul>
 8012bc8:	a34d      	add	r3, pc, #308	@ (adr r3, 8012d00 <__ieee754_pow+0xa48>)
 8012bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bce:	4604      	mov	r4, r0
 8012bd0:	460d      	mov	r5, r1
 8012bd2:	f7ed fd31 	bl	8000638 <__aeabi_dmul>
 8012bd6:	a34c      	add	r3, pc, #304	@ (adr r3, 8012d08 <__ieee754_pow+0xa50>)
 8012bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bdc:	f7ed fb74 	bl	80002c8 <__aeabi_dsub>
 8012be0:	4622      	mov	r2, r4
 8012be2:	462b      	mov	r3, r5
 8012be4:	f7ed fd28 	bl	8000638 <__aeabi_dmul>
 8012be8:	a349      	add	r3, pc, #292	@ (adr r3, 8012d10 <__ieee754_pow+0xa58>)
 8012bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bee:	f7ed fb6d 	bl	80002cc <__adddf3>
 8012bf2:	4622      	mov	r2, r4
 8012bf4:	462b      	mov	r3, r5
 8012bf6:	f7ed fd1f 	bl	8000638 <__aeabi_dmul>
 8012bfa:	a347      	add	r3, pc, #284	@ (adr r3, 8012d18 <__ieee754_pow+0xa60>)
 8012bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c00:	f7ed fb62 	bl	80002c8 <__aeabi_dsub>
 8012c04:	4622      	mov	r2, r4
 8012c06:	462b      	mov	r3, r5
 8012c08:	f7ed fd16 	bl	8000638 <__aeabi_dmul>
 8012c0c:	a344      	add	r3, pc, #272	@ (adr r3, 8012d20 <__ieee754_pow+0xa68>)
 8012c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c12:	f7ed fb5b 	bl	80002cc <__adddf3>
 8012c16:	4622      	mov	r2, r4
 8012c18:	462b      	mov	r3, r5
 8012c1a:	f7ed fd0d 	bl	8000638 <__aeabi_dmul>
 8012c1e:	4602      	mov	r2, r0
 8012c20:	460b      	mov	r3, r1
 8012c22:	4640      	mov	r0, r8
 8012c24:	4649      	mov	r1, r9
 8012c26:	f7ed fb4f 	bl	80002c8 <__aeabi_dsub>
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	460d      	mov	r5, r1
 8012c2e:	4602      	mov	r2, r0
 8012c30:	460b      	mov	r3, r1
 8012c32:	4640      	mov	r0, r8
 8012c34:	4649      	mov	r1, r9
 8012c36:	f7ed fcff 	bl	8000638 <__aeabi_dmul>
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8012c40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012c44:	4620      	mov	r0, r4
 8012c46:	4629      	mov	r1, r5
 8012c48:	f7ed fb3e 	bl	80002c8 <__aeabi_dsub>
 8012c4c:	4602      	mov	r2, r0
 8012c4e:	460b      	mov	r3, r1
 8012c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c54:	f7ed fe1a 	bl	800088c <__aeabi_ddiv>
 8012c58:	4632      	mov	r2, r6
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	460d      	mov	r5, r1
 8012c5e:	463b      	mov	r3, r7
 8012c60:	4640      	mov	r0, r8
 8012c62:	4649      	mov	r1, r9
 8012c64:	f7ed fce8 	bl	8000638 <__aeabi_dmul>
 8012c68:	4632      	mov	r2, r6
 8012c6a:	463b      	mov	r3, r7
 8012c6c:	f7ed fb2e 	bl	80002cc <__adddf3>
 8012c70:	4602      	mov	r2, r0
 8012c72:	460b      	mov	r3, r1
 8012c74:	4620      	mov	r0, r4
 8012c76:	4629      	mov	r1, r5
 8012c78:	f7ed fb26 	bl	80002c8 <__aeabi_dsub>
 8012c7c:	4642      	mov	r2, r8
 8012c7e:	464b      	mov	r3, r9
 8012c80:	f7ed fb22 	bl	80002c8 <__aeabi_dsub>
 8012c84:	460b      	mov	r3, r1
 8012c86:	4602      	mov	r2, r0
 8012c88:	492d      	ldr	r1, [pc, #180]	@ (8012d40 <__ieee754_pow+0xa88>)
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	f7ed fb1c 	bl	80002c8 <__aeabi_dsub>
 8012c90:	ec41 0b10 	vmov	d0, r0, r1
 8012c94:	ee10 3a90 	vmov	r3, s1
 8012c98:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012ca0:	da0b      	bge.n	8012cba <__ieee754_pow+0xa02>
 8012ca2:	4650      	mov	r0, sl
 8012ca4:	f000 f9ec 	bl	8013080 <scalbn>
 8012ca8:	ec51 0b10 	vmov	r0, r1, d0
 8012cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cb0:	f7ff bb6d 	b.w	801238e <__ieee754_pow+0xd6>
 8012cb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012cb8:	e73a      	b.n	8012b30 <__ieee754_pow+0x878>
 8012cba:	ec51 0b10 	vmov	r0, r1, d0
 8012cbe:	4619      	mov	r1, r3
 8012cc0:	e7f4      	b.n	8012cac <__ieee754_pow+0x9f4>
 8012cc2:	491f      	ldr	r1, [pc, #124]	@ (8012d40 <__ieee754_pow+0xa88>)
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	f7ff bb14 	b.w	80122f2 <__ieee754_pow+0x3a>
 8012cca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cce:	f7ff bb10 	b.w	80122f2 <__ieee754_pow+0x3a>
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	f7ff bb0c 	b.w	80122f2 <__ieee754_pow+0x3a>
 8012cda:	460c      	mov	r4, r1
 8012cdc:	f7ff bb69 	b.w	80123b2 <__ieee754_pow+0xfa>
 8012ce0:	2400      	movs	r4, #0
 8012ce2:	f7ff bb4b 	b.w	801237c <__ieee754_pow+0xc4>
 8012ce6:	bf00      	nop
 8012ce8:	00000000 	.word	0x00000000
 8012cec:	3fe62e43 	.word	0x3fe62e43
 8012cf0:	fefa39ef 	.word	0xfefa39ef
 8012cf4:	3fe62e42 	.word	0x3fe62e42
 8012cf8:	0ca86c39 	.word	0x0ca86c39
 8012cfc:	be205c61 	.word	0xbe205c61
 8012d00:	72bea4d0 	.word	0x72bea4d0
 8012d04:	3e663769 	.word	0x3e663769
 8012d08:	c5d26bf1 	.word	0xc5d26bf1
 8012d0c:	3ebbbd41 	.word	0x3ebbbd41
 8012d10:	af25de2c 	.word	0xaf25de2c
 8012d14:	3f11566a 	.word	0x3f11566a
 8012d18:	16bebd93 	.word	0x16bebd93
 8012d1c:	3f66c16c 	.word	0x3f66c16c
 8012d20:	5555553e 	.word	0x5555553e
 8012d24:	3fc55555 	.word	0x3fc55555
 8012d28:	40900000 	.word	0x40900000
 8012d2c:	4090cbff 	.word	0x4090cbff
 8012d30:	3f6f3400 	.word	0x3f6f3400
 8012d34:	4090cc00 	.word	0x4090cc00
 8012d38:	3fe00000 	.word	0x3fe00000
 8012d3c:	fff00000 	.word	0xfff00000
 8012d40:	3ff00000 	.word	0x3ff00000
 8012d44:	652b82fe 	.word	0x652b82fe
 8012d48:	3c971547 	.word	0x3c971547
 8012d4c:	00000000 	.word	0x00000000

08012d50 <atan>:
 8012d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d54:	ec55 4b10 	vmov	r4, r5, d0
 8012d58:	4bbf      	ldr	r3, [pc, #764]	@ (8013058 <atan+0x308>)
 8012d5a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012d5e:	429e      	cmp	r6, r3
 8012d60:	46ab      	mov	fp, r5
 8012d62:	d918      	bls.n	8012d96 <atan+0x46>
 8012d64:	4bbd      	ldr	r3, [pc, #756]	@ (801305c <atan+0x30c>)
 8012d66:	429e      	cmp	r6, r3
 8012d68:	d801      	bhi.n	8012d6e <atan+0x1e>
 8012d6a:	d109      	bne.n	8012d80 <atan+0x30>
 8012d6c:	b144      	cbz	r4, 8012d80 <atan+0x30>
 8012d6e:	4622      	mov	r2, r4
 8012d70:	462b      	mov	r3, r5
 8012d72:	4620      	mov	r0, r4
 8012d74:	4629      	mov	r1, r5
 8012d76:	f7ed faa9 	bl	80002cc <__adddf3>
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	460d      	mov	r5, r1
 8012d7e:	e006      	b.n	8012d8e <atan+0x3e>
 8012d80:	f1bb 0f00 	cmp.w	fp, #0
 8012d84:	f340 812b 	ble.w	8012fde <atan+0x28e>
 8012d88:	a597      	add	r5, pc, #604	@ (adr r5, 8012fe8 <atan+0x298>)
 8012d8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012d8e:	ec45 4b10 	vmov	d0, r4, r5
 8012d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d96:	4bb2      	ldr	r3, [pc, #712]	@ (8013060 <atan+0x310>)
 8012d98:	429e      	cmp	r6, r3
 8012d9a:	d813      	bhi.n	8012dc4 <atan+0x74>
 8012d9c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8012da0:	429e      	cmp	r6, r3
 8012da2:	d80c      	bhi.n	8012dbe <atan+0x6e>
 8012da4:	a392      	add	r3, pc, #584	@ (adr r3, 8012ff0 <atan+0x2a0>)
 8012da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012daa:	4620      	mov	r0, r4
 8012dac:	4629      	mov	r1, r5
 8012dae:	f7ed fa8d 	bl	80002cc <__adddf3>
 8012db2:	4bac      	ldr	r3, [pc, #688]	@ (8013064 <atan+0x314>)
 8012db4:	2200      	movs	r2, #0
 8012db6:	f7ed fecf 	bl	8000b58 <__aeabi_dcmpgt>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	d1e7      	bne.n	8012d8e <atan+0x3e>
 8012dbe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8012dc2:	e029      	b.n	8012e18 <atan+0xc8>
 8012dc4:	f7fe fc66 	bl	8011694 <fabs>
 8012dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8013068 <atan+0x318>)
 8012dca:	429e      	cmp	r6, r3
 8012dcc:	ec55 4b10 	vmov	r4, r5, d0
 8012dd0:	f200 80bc 	bhi.w	8012f4c <atan+0x1fc>
 8012dd4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8012dd8:	429e      	cmp	r6, r3
 8012dda:	f200 809e 	bhi.w	8012f1a <atan+0x1ca>
 8012dde:	4622      	mov	r2, r4
 8012de0:	462b      	mov	r3, r5
 8012de2:	4620      	mov	r0, r4
 8012de4:	4629      	mov	r1, r5
 8012de6:	f7ed fa71 	bl	80002cc <__adddf3>
 8012dea:	4b9e      	ldr	r3, [pc, #632]	@ (8013064 <atan+0x314>)
 8012dec:	2200      	movs	r2, #0
 8012dee:	f7ed fa6b 	bl	80002c8 <__aeabi_dsub>
 8012df2:	2200      	movs	r2, #0
 8012df4:	4606      	mov	r6, r0
 8012df6:	460f      	mov	r7, r1
 8012df8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	4629      	mov	r1, r5
 8012e00:	f7ed fa64 	bl	80002cc <__adddf3>
 8012e04:	4602      	mov	r2, r0
 8012e06:	460b      	mov	r3, r1
 8012e08:	4630      	mov	r0, r6
 8012e0a:	4639      	mov	r1, r7
 8012e0c:	f7ed fd3e 	bl	800088c <__aeabi_ddiv>
 8012e10:	f04f 0a00 	mov.w	sl, #0
 8012e14:	4604      	mov	r4, r0
 8012e16:	460d      	mov	r5, r1
 8012e18:	4622      	mov	r2, r4
 8012e1a:	462b      	mov	r3, r5
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	4629      	mov	r1, r5
 8012e20:	f7ed fc0a 	bl	8000638 <__aeabi_dmul>
 8012e24:	4602      	mov	r2, r0
 8012e26:	460b      	mov	r3, r1
 8012e28:	4680      	mov	r8, r0
 8012e2a:	4689      	mov	r9, r1
 8012e2c:	f7ed fc04 	bl	8000638 <__aeabi_dmul>
 8012e30:	a371      	add	r3, pc, #452	@ (adr r3, 8012ff8 <atan+0x2a8>)
 8012e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e36:	4606      	mov	r6, r0
 8012e38:	460f      	mov	r7, r1
 8012e3a:	f7ed fbfd 	bl	8000638 <__aeabi_dmul>
 8012e3e:	a370      	add	r3, pc, #448	@ (adr r3, 8013000 <atan+0x2b0>)
 8012e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e44:	f7ed fa42 	bl	80002cc <__adddf3>
 8012e48:	4632      	mov	r2, r6
 8012e4a:	463b      	mov	r3, r7
 8012e4c:	f7ed fbf4 	bl	8000638 <__aeabi_dmul>
 8012e50:	a36d      	add	r3, pc, #436	@ (adr r3, 8013008 <atan+0x2b8>)
 8012e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e56:	f7ed fa39 	bl	80002cc <__adddf3>
 8012e5a:	4632      	mov	r2, r6
 8012e5c:	463b      	mov	r3, r7
 8012e5e:	f7ed fbeb 	bl	8000638 <__aeabi_dmul>
 8012e62:	a36b      	add	r3, pc, #428	@ (adr r3, 8013010 <atan+0x2c0>)
 8012e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e68:	f7ed fa30 	bl	80002cc <__adddf3>
 8012e6c:	4632      	mov	r2, r6
 8012e6e:	463b      	mov	r3, r7
 8012e70:	f7ed fbe2 	bl	8000638 <__aeabi_dmul>
 8012e74:	a368      	add	r3, pc, #416	@ (adr r3, 8013018 <atan+0x2c8>)
 8012e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7a:	f7ed fa27 	bl	80002cc <__adddf3>
 8012e7e:	4632      	mov	r2, r6
 8012e80:	463b      	mov	r3, r7
 8012e82:	f7ed fbd9 	bl	8000638 <__aeabi_dmul>
 8012e86:	a366      	add	r3, pc, #408	@ (adr r3, 8013020 <atan+0x2d0>)
 8012e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8c:	f7ed fa1e 	bl	80002cc <__adddf3>
 8012e90:	4642      	mov	r2, r8
 8012e92:	464b      	mov	r3, r9
 8012e94:	f7ed fbd0 	bl	8000638 <__aeabi_dmul>
 8012e98:	a363      	add	r3, pc, #396	@ (adr r3, 8013028 <atan+0x2d8>)
 8012e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9e:	4680      	mov	r8, r0
 8012ea0:	4689      	mov	r9, r1
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	4639      	mov	r1, r7
 8012ea6:	f7ed fbc7 	bl	8000638 <__aeabi_dmul>
 8012eaa:	a361      	add	r3, pc, #388	@ (adr r3, 8013030 <atan+0x2e0>)
 8012eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb0:	f7ed fa0a 	bl	80002c8 <__aeabi_dsub>
 8012eb4:	4632      	mov	r2, r6
 8012eb6:	463b      	mov	r3, r7
 8012eb8:	f7ed fbbe 	bl	8000638 <__aeabi_dmul>
 8012ebc:	a35e      	add	r3, pc, #376	@ (adr r3, 8013038 <atan+0x2e8>)
 8012ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec2:	f7ed fa01 	bl	80002c8 <__aeabi_dsub>
 8012ec6:	4632      	mov	r2, r6
 8012ec8:	463b      	mov	r3, r7
 8012eca:	f7ed fbb5 	bl	8000638 <__aeabi_dmul>
 8012ece:	a35c      	add	r3, pc, #368	@ (adr r3, 8013040 <atan+0x2f0>)
 8012ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed4:	f7ed f9f8 	bl	80002c8 <__aeabi_dsub>
 8012ed8:	4632      	mov	r2, r6
 8012eda:	463b      	mov	r3, r7
 8012edc:	f7ed fbac 	bl	8000638 <__aeabi_dmul>
 8012ee0:	a359      	add	r3, pc, #356	@ (adr r3, 8013048 <atan+0x2f8>)
 8012ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee6:	f7ed f9ef 	bl	80002c8 <__aeabi_dsub>
 8012eea:	4632      	mov	r2, r6
 8012eec:	463b      	mov	r3, r7
 8012eee:	f7ed fba3 	bl	8000638 <__aeabi_dmul>
 8012ef2:	4602      	mov	r2, r0
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	4640      	mov	r0, r8
 8012ef8:	4649      	mov	r1, r9
 8012efa:	f7ed f9e7 	bl	80002cc <__adddf3>
 8012efe:	4622      	mov	r2, r4
 8012f00:	462b      	mov	r3, r5
 8012f02:	f7ed fb99 	bl	8000638 <__aeabi_dmul>
 8012f06:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	460b      	mov	r3, r1
 8012f0e:	d148      	bne.n	8012fa2 <atan+0x252>
 8012f10:	4620      	mov	r0, r4
 8012f12:	4629      	mov	r1, r5
 8012f14:	f7ed f9d8 	bl	80002c8 <__aeabi_dsub>
 8012f18:	e72f      	b.n	8012d7a <atan+0x2a>
 8012f1a:	4b52      	ldr	r3, [pc, #328]	@ (8013064 <atan+0x314>)
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	4620      	mov	r0, r4
 8012f20:	4629      	mov	r1, r5
 8012f22:	f7ed f9d1 	bl	80002c8 <__aeabi_dsub>
 8012f26:	4b4f      	ldr	r3, [pc, #316]	@ (8013064 <atan+0x314>)
 8012f28:	4606      	mov	r6, r0
 8012f2a:	460f      	mov	r7, r1
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	4620      	mov	r0, r4
 8012f30:	4629      	mov	r1, r5
 8012f32:	f7ed f9cb 	bl	80002cc <__adddf3>
 8012f36:	4602      	mov	r2, r0
 8012f38:	460b      	mov	r3, r1
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	4639      	mov	r1, r7
 8012f3e:	f7ed fca5 	bl	800088c <__aeabi_ddiv>
 8012f42:	f04f 0a01 	mov.w	sl, #1
 8012f46:	4604      	mov	r4, r0
 8012f48:	460d      	mov	r5, r1
 8012f4a:	e765      	b.n	8012e18 <atan+0xc8>
 8012f4c:	4b47      	ldr	r3, [pc, #284]	@ (801306c <atan+0x31c>)
 8012f4e:	429e      	cmp	r6, r3
 8012f50:	d21c      	bcs.n	8012f8c <atan+0x23c>
 8012f52:	4b47      	ldr	r3, [pc, #284]	@ (8013070 <atan+0x320>)
 8012f54:	2200      	movs	r2, #0
 8012f56:	4620      	mov	r0, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	f7ed f9b5 	bl	80002c8 <__aeabi_dsub>
 8012f5e:	4b44      	ldr	r3, [pc, #272]	@ (8013070 <atan+0x320>)
 8012f60:	4606      	mov	r6, r0
 8012f62:	460f      	mov	r7, r1
 8012f64:	2200      	movs	r2, #0
 8012f66:	4620      	mov	r0, r4
 8012f68:	4629      	mov	r1, r5
 8012f6a:	f7ed fb65 	bl	8000638 <__aeabi_dmul>
 8012f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8013064 <atan+0x314>)
 8012f70:	2200      	movs	r2, #0
 8012f72:	f7ed f9ab 	bl	80002cc <__adddf3>
 8012f76:	4602      	mov	r2, r0
 8012f78:	460b      	mov	r3, r1
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	4639      	mov	r1, r7
 8012f7e:	f7ed fc85 	bl	800088c <__aeabi_ddiv>
 8012f82:	f04f 0a02 	mov.w	sl, #2
 8012f86:	4604      	mov	r4, r0
 8012f88:	460d      	mov	r5, r1
 8012f8a:	e745      	b.n	8012e18 <atan+0xc8>
 8012f8c:	4622      	mov	r2, r4
 8012f8e:	462b      	mov	r3, r5
 8012f90:	4938      	ldr	r1, [pc, #224]	@ (8013074 <atan+0x324>)
 8012f92:	2000      	movs	r0, #0
 8012f94:	f7ed fc7a 	bl	800088c <__aeabi_ddiv>
 8012f98:	f04f 0a03 	mov.w	sl, #3
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	460d      	mov	r5, r1
 8012fa0:	e73a      	b.n	8012e18 <atan+0xc8>
 8012fa2:	4b35      	ldr	r3, [pc, #212]	@ (8013078 <atan+0x328>)
 8012fa4:	4e35      	ldr	r6, [pc, #212]	@ (801307c <atan+0x32c>)
 8012fa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fae:	f7ed f98b 	bl	80002c8 <__aeabi_dsub>
 8012fb2:	4622      	mov	r2, r4
 8012fb4:	462b      	mov	r3, r5
 8012fb6:	f7ed f987 	bl	80002c8 <__aeabi_dsub>
 8012fba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012fc6:	f7ed f97f 	bl	80002c8 <__aeabi_dsub>
 8012fca:	f1bb 0f00 	cmp.w	fp, #0
 8012fce:	4604      	mov	r4, r0
 8012fd0:	460d      	mov	r5, r1
 8012fd2:	f6bf aedc 	bge.w	8012d8e <atan+0x3e>
 8012fd6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012fda:	461d      	mov	r5, r3
 8012fdc:	e6d7      	b.n	8012d8e <atan+0x3e>
 8012fde:	a51c      	add	r5, pc, #112	@ (adr r5, 8013050 <atan+0x300>)
 8012fe0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012fe4:	e6d3      	b.n	8012d8e <atan+0x3e>
 8012fe6:	bf00      	nop
 8012fe8:	54442d18 	.word	0x54442d18
 8012fec:	3ff921fb 	.word	0x3ff921fb
 8012ff0:	8800759c 	.word	0x8800759c
 8012ff4:	7e37e43c 	.word	0x7e37e43c
 8012ff8:	e322da11 	.word	0xe322da11
 8012ffc:	3f90ad3a 	.word	0x3f90ad3a
 8013000:	24760deb 	.word	0x24760deb
 8013004:	3fa97b4b 	.word	0x3fa97b4b
 8013008:	a0d03d51 	.word	0xa0d03d51
 801300c:	3fb10d66 	.word	0x3fb10d66
 8013010:	c54c206e 	.word	0xc54c206e
 8013014:	3fb745cd 	.word	0x3fb745cd
 8013018:	920083ff 	.word	0x920083ff
 801301c:	3fc24924 	.word	0x3fc24924
 8013020:	5555550d 	.word	0x5555550d
 8013024:	3fd55555 	.word	0x3fd55555
 8013028:	2c6a6c2f 	.word	0x2c6a6c2f
 801302c:	bfa2b444 	.word	0xbfa2b444
 8013030:	52defd9a 	.word	0x52defd9a
 8013034:	3fadde2d 	.word	0x3fadde2d
 8013038:	af749a6d 	.word	0xaf749a6d
 801303c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013040:	fe231671 	.word	0xfe231671
 8013044:	3fbc71c6 	.word	0x3fbc71c6
 8013048:	9998ebc4 	.word	0x9998ebc4
 801304c:	3fc99999 	.word	0x3fc99999
 8013050:	54442d18 	.word	0x54442d18
 8013054:	bff921fb 	.word	0xbff921fb
 8013058:	440fffff 	.word	0x440fffff
 801305c:	7ff00000 	.word	0x7ff00000
 8013060:	3fdbffff 	.word	0x3fdbffff
 8013064:	3ff00000 	.word	0x3ff00000
 8013068:	3ff2ffff 	.word	0x3ff2ffff
 801306c:	40038000 	.word	0x40038000
 8013070:	3ff80000 	.word	0x3ff80000
 8013074:	bff00000 	.word	0xbff00000
 8013078:	080137b8 	.word	0x080137b8
 801307c:	080137d8 	.word	0x080137d8

08013080 <scalbn>:
 8013080:	b570      	push	{r4, r5, r6, lr}
 8013082:	ec55 4b10 	vmov	r4, r5, d0
 8013086:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801308a:	4606      	mov	r6, r0
 801308c:	462b      	mov	r3, r5
 801308e:	b991      	cbnz	r1, 80130b6 <scalbn+0x36>
 8013090:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013094:	4323      	orrs	r3, r4
 8013096:	d03b      	beq.n	8013110 <scalbn+0x90>
 8013098:	4b33      	ldr	r3, [pc, #204]	@ (8013168 <scalbn+0xe8>)
 801309a:	4620      	mov	r0, r4
 801309c:	4629      	mov	r1, r5
 801309e:	2200      	movs	r2, #0
 80130a0:	f7ed faca 	bl	8000638 <__aeabi_dmul>
 80130a4:	4b31      	ldr	r3, [pc, #196]	@ (801316c <scalbn+0xec>)
 80130a6:	429e      	cmp	r6, r3
 80130a8:	4604      	mov	r4, r0
 80130aa:	460d      	mov	r5, r1
 80130ac:	da0f      	bge.n	80130ce <scalbn+0x4e>
 80130ae:	a326      	add	r3, pc, #152	@ (adr r3, 8013148 <scalbn+0xc8>)
 80130b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b4:	e01e      	b.n	80130f4 <scalbn+0x74>
 80130b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80130ba:	4291      	cmp	r1, r2
 80130bc:	d10b      	bne.n	80130d6 <scalbn+0x56>
 80130be:	4622      	mov	r2, r4
 80130c0:	4620      	mov	r0, r4
 80130c2:	4629      	mov	r1, r5
 80130c4:	f7ed f902 	bl	80002cc <__adddf3>
 80130c8:	4604      	mov	r4, r0
 80130ca:	460d      	mov	r5, r1
 80130cc:	e020      	b.n	8013110 <scalbn+0x90>
 80130ce:	460b      	mov	r3, r1
 80130d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80130d4:	3936      	subs	r1, #54	@ 0x36
 80130d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80130da:	4296      	cmp	r6, r2
 80130dc:	dd0d      	ble.n	80130fa <scalbn+0x7a>
 80130de:	2d00      	cmp	r5, #0
 80130e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8013150 <scalbn+0xd0>)
 80130e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130e6:	da02      	bge.n	80130ee <scalbn+0x6e>
 80130e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8013158 <scalbn+0xd8>)
 80130ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130ee:	a318      	add	r3, pc, #96	@ (adr r3, 8013150 <scalbn+0xd0>)
 80130f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f4:	f7ed faa0 	bl	8000638 <__aeabi_dmul>
 80130f8:	e7e6      	b.n	80130c8 <scalbn+0x48>
 80130fa:	1872      	adds	r2, r6, r1
 80130fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013100:	428a      	cmp	r2, r1
 8013102:	dcec      	bgt.n	80130de <scalbn+0x5e>
 8013104:	2a00      	cmp	r2, #0
 8013106:	dd06      	ble.n	8013116 <scalbn+0x96>
 8013108:	f36f 531e 	bfc	r3, #20, #11
 801310c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013110:	ec45 4b10 	vmov	d0, r4, r5
 8013114:	bd70      	pop	{r4, r5, r6, pc}
 8013116:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801311a:	da08      	bge.n	801312e <scalbn+0xae>
 801311c:	2d00      	cmp	r5, #0
 801311e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013148 <scalbn+0xc8>)
 8013120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013124:	dac3      	bge.n	80130ae <scalbn+0x2e>
 8013126:	a10e      	add	r1, pc, #56	@ (adr r1, 8013160 <scalbn+0xe0>)
 8013128:	e9d1 0100 	ldrd	r0, r1, [r1]
 801312c:	e7bf      	b.n	80130ae <scalbn+0x2e>
 801312e:	3236      	adds	r2, #54	@ 0x36
 8013130:	f36f 531e 	bfc	r3, #20, #11
 8013134:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013138:	4620      	mov	r0, r4
 801313a:	4b0d      	ldr	r3, [pc, #52]	@ (8013170 <scalbn+0xf0>)
 801313c:	4629      	mov	r1, r5
 801313e:	2200      	movs	r2, #0
 8013140:	e7d8      	b.n	80130f4 <scalbn+0x74>
 8013142:	bf00      	nop
 8013144:	f3af 8000 	nop.w
 8013148:	c2f8f359 	.word	0xc2f8f359
 801314c:	01a56e1f 	.word	0x01a56e1f
 8013150:	8800759c 	.word	0x8800759c
 8013154:	7e37e43c 	.word	0x7e37e43c
 8013158:	8800759c 	.word	0x8800759c
 801315c:	fe37e43c 	.word	0xfe37e43c
 8013160:	c2f8f359 	.word	0xc2f8f359
 8013164:	81a56e1f 	.word	0x81a56e1f
 8013168:	43500000 	.word	0x43500000
 801316c:	ffff3cb0 	.word	0xffff3cb0
 8013170:	3c900000 	.word	0x3c900000

08013174 <with_errno>:
 8013174:	b510      	push	{r4, lr}
 8013176:	ed2d 8b02 	vpush	{d8}
 801317a:	eeb0 8a40 	vmov.f32	s16, s0
 801317e:	eef0 8a60 	vmov.f32	s17, s1
 8013182:	4604      	mov	r4, r0
 8013184:	f7fa face 	bl	800d724 <__errno>
 8013188:	eeb0 0a48 	vmov.f32	s0, s16
 801318c:	eef0 0a68 	vmov.f32	s1, s17
 8013190:	ecbd 8b02 	vpop	{d8}
 8013194:	6004      	str	r4, [r0, #0]
 8013196:	bd10      	pop	{r4, pc}

08013198 <xflow>:
 8013198:	4603      	mov	r3, r0
 801319a:	b507      	push	{r0, r1, r2, lr}
 801319c:	ec51 0b10 	vmov	r0, r1, d0
 80131a0:	b183      	cbz	r3, 80131c4 <xflow+0x2c>
 80131a2:	4602      	mov	r2, r0
 80131a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80131a8:	e9cd 2300 	strd	r2, r3, [sp]
 80131ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131b0:	f7ed fa42 	bl	8000638 <__aeabi_dmul>
 80131b4:	ec41 0b10 	vmov	d0, r0, r1
 80131b8:	2022      	movs	r0, #34	@ 0x22
 80131ba:	b003      	add	sp, #12
 80131bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80131c0:	f7ff bfd8 	b.w	8013174 <with_errno>
 80131c4:	4602      	mov	r2, r0
 80131c6:	460b      	mov	r3, r1
 80131c8:	e7ee      	b.n	80131a8 <xflow+0x10>
 80131ca:	0000      	movs	r0, r0
 80131cc:	0000      	movs	r0, r0
	...

080131d0 <__math_uflow>:
 80131d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80131d8 <__math_uflow+0x8>
 80131d4:	f7ff bfe0 	b.w	8013198 <xflow>
 80131d8:	00000000 	.word	0x00000000
 80131dc:	10000000 	.word	0x10000000

080131e0 <__math_oflow>:
 80131e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80131e8 <__math_oflow+0x8>
 80131e4:	f7ff bfd8 	b.w	8013198 <xflow>
 80131e8:	00000000 	.word	0x00000000
 80131ec:	70000000 	.word	0x70000000

080131f0 <_init>:
 80131f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131f2:	bf00      	nop
 80131f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131f6:	bc08      	pop	{r3}
 80131f8:	469e      	mov	lr, r3
 80131fa:	4770      	bx	lr

080131fc <_fini>:
 80131fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131fe:	bf00      	nop
 8013200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013202:	bc08      	pop	{r3}
 8013204:	469e      	mov	lr, r3
 8013206:	4770      	bx	lr
