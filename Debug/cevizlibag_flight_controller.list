
cevizlibag_flight_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013338  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08013508  08013508  00014508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bd8  08013bd8  000151ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013bd8  08013bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013be0  08013be0  000151ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013be0  08013be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013be4  08013be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08013be8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001abc  200001ec  08013dd4  000151ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca8  08013dd4  00015ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f03e  00000000  00000000  0001521c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dbe  00000000  00000000  0003425a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00039018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001345  00000000  00000000  0003a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a96d  00000000  00000000  0003bc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025bf6  00000000  00000000  0006659a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed357  00000000  00000000  0008c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001794e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008248  00000000  00000000  0017952c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00181774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080134f0 	.word	0x080134f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	080134f0 	.word	0x080134f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f02:	f000 ba09 	b.w	8001318 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f98:	f000 b9be 	b.w	8001318 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	468e      	mov	lr, r1
 8001028:	4604      	mov	r4, r0
 800102a:	4688      	mov	r8, r1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d14a      	bne.n	80010c6 <__udivmoddi4+0xa6>
 8001030:	428a      	cmp	r2, r1
 8001032:	4617      	mov	r7, r2
 8001034:	d962      	bls.n	80010fc <__udivmoddi4+0xdc>
 8001036:	fab2 f682 	clz	r6, r2
 800103a:	b14e      	cbz	r6, 8001050 <__udivmoddi4+0x30>
 800103c:	f1c6 0320 	rsb	r3, r6, #32
 8001040:	fa01 f806 	lsl.w	r8, r1, r6
 8001044:	fa20 f303 	lsr.w	r3, r0, r3
 8001048:	40b7      	lsls	r7, r6
 800104a:	ea43 0808 	orr.w	r8, r3, r8
 800104e:	40b4      	lsls	r4, r6
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	fa1f fc87 	uxth.w	ip, r7
 8001058:	fbb8 f1fe 	udiv	r1, r8, lr
 800105c:	0c23      	lsrs	r3, r4, #16
 800105e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001062:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001066:	fb01 f20c 	mul.w	r2, r1, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x62>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001074:	f080 80ea 	bcs.w	800124c <__udivmoddi4+0x22c>
 8001078:	429a      	cmp	r2, r3
 800107a:	f240 80e7 	bls.w	800124c <__udivmoddi4+0x22c>
 800107e:	3902      	subs	r1, #2
 8001080:	443b      	add	r3, r7
 8001082:	1a9a      	subs	r2, r3, r2
 8001084:	b2a3      	uxth	r3, r4
 8001086:	fbb2 f0fe 	udiv	r0, r2, lr
 800108a:	fb0e 2210 	mls	r2, lr, r0, r2
 800108e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001092:	fb00 fc0c 	mul.w	ip, r0, ip
 8001096:	459c      	cmp	ip, r3
 8001098:	d909      	bls.n	80010ae <__udivmoddi4+0x8e>
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80010a0:	f080 80d6 	bcs.w	8001250 <__udivmoddi4+0x230>
 80010a4:	459c      	cmp	ip, r3
 80010a6:	f240 80d3 	bls.w	8001250 <__udivmoddi4+0x230>
 80010aa:	443b      	add	r3, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010b2:	eba3 030c 	sub.w	r3, r3, ip
 80010b6:	2100      	movs	r1, #0
 80010b8:	b11d      	cbz	r5, 80010c2 <__udivmoddi4+0xa2>
 80010ba:	40f3      	lsrs	r3, r6
 80010bc:	2200      	movs	r2, #0
 80010be:	e9c5 3200 	strd	r3, r2, [r5]
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d905      	bls.n	80010d6 <__udivmoddi4+0xb6>
 80010ca:	b10d      	cbz	r5, 80010d0 <__udivmoddi4+0xb0>
 80010cc:	e9c5 0100 	strd	r0, r1, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4608      	mov	r0, r1
 80010d4:	e7f5      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d146      	bne.n	800116c <__udivmoddi4+0x14c>
 80010de:	4573      	cmp	r3, lr
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0xc8>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 8105 	bhi.w	80012f2 <__udivmoddi4+0x2d2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	4690      	mov	r8, r2
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d0e5      	beq.n	80010c2 <__udivmoddi4+0xa2>
 80010f6:	e9c5 4800 	strd	r4, r8, [r5]
 80010fa:	e7e2      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	f000 8090 	beq.w	8001222 <__udivmoddi4+0x202>
 8001102:	fab2 f682 	clz	r6, r2
 8001106:	2e00      	cmp	r6, #0
 8001108:	f040 80a4 	bne.w	8001254 <__udivmoddi4+0x234>
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	0c03      	lsrs	r3, r0, #16
 8001110:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001114:	b280      	uxth	r0, r0
 8001116:	b2bc      	uxth	r4, r7
 8001118:	2101      	movs	r1, #1
 800111a:	fbb2 fcfe 	udiv	ip, r2, lr
 800111e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001126:	fb04 f20c 	mul.w	r2, r4, ip
 800112a:	429a      	cmp	r2, r3
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x11e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001134:	d202      	bcs.n	800113c <__udivmoddi4+0x11c>
 8001136:	429a      	cmp	r2, r3
 8001138:	f200 80e0 	bhi.w	80012fc <__udivmoddi4+0x2dc>
 800113c:	46c4      	mov	ip, r8
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	fbb3 f2fe 	udiv	r2, r3, lr
 8001144:	fb0e 3312 	mls	r3, lr, r2, r3
 8001148:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800114c:	fb02 f404 	mul.w	r4, r2, r4
 8001150:	429c      	cmp	r4, r3
 8001152:	d907      	bls.n	8001164 <__udivmoddi4+0x144>
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800115a:	d202      	bcs.n	8001162 <__udivmoddi4+0x142>
 800115c:	429c      	cmp	r4, r3
 800115e:	f200 80ca 	bhi.w	80012f6 <__udivmoddi4+0x2d6>
 8001162:	4602      	mov	r2, r0
 8001164:	1b1b      	subs	r3, r3, r4
 8001166:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800116a:	e7a5      	b.n	80010b8 <__udivmoddi4+0x98>
 800116c:	f1c1 0620 	rsb	r6, r1, #32
 8001170:	408b      	lsls	r3, r1
 8001172:	fa22 f706 	lsr.w	r7, r2, r6
 8001176:	431f      	orrs	r7, r3
 8001178:	fa0e f401 	lsl.w	r4, lr, r1
 800117c:	fa20 f306 	lsr.w	r3, r0, r6
 8001180:	fa2e fe06 	lsr.w	lr, lr, r6
 8001184:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001188:	4323      	orrs	r3, r4
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	fa1f fc87 	uxth.w	ip, r7
 8001192:	fbbe f0f9 	udiv	r0, lr, r9
 8001196:	0c1c      	lsrs	r4, r3, #16
 8001198:	fb09 ee10 	mls	lr, r9, r0, lr
 800119c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80011a4:	45a6      	cmp	lr, r4
 80011a6:	fa02 f201 	lsl.w	r2, r2, r1
 80011aa:	d909      	bls.n	80011c0 <__udivmoddi4+0x1a0>
 80011ac:	193c      	adds	r4, r7, r4
 80011ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80011b2:	f080 809c 	bcs.w	80012ee <__udivmoddi4+0x2ce>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8099 	bls.w	80012ee <__udivmoddi4+0x2ce>
 80011bc:	3802      	subs	r0, #2
 80011be:	443c      	add	r4, r7
 80011c0:	eba4 040e 	sub.w	r4, r4, lr
 80011c4:	fa1f fe83 	uxth.w	lr, r3
 80011c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80011cc:	fb09 4413 	mls	r4, r9, r3, r4
 80011d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011d8:	45a4      	cmp	ip, r4
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x1ce>
 80011dc:	193c      	adds	r4, r7, r4
 80011de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80011e2:	f080 8082 	bcs.w	80012ea <__udivmoddi4+0x2ca>
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d97f      	bls.n	80012ea <__udivmoddi4+0x2ca>
 80011ea:	3b02      	subs	r3, #2
 80011ec:	443c      	add	r4, r7
 80011ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011f2:	eba4 040c 	sub.w	r4, r4, ip
 80011f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80011fa:	4564      	cmp	r4, ip
 80011fc:	4673      	mov	r3, lr
 80011fe:	46e1      	mov	r9, ip
 8001200:	d362      	bcc.n	80012c8 <__udivmoddi4+0x2a8>
 8001202:	d05f      	beq.n	80012c4 <__udivmoddi4+0x2a4>
 8001204:	b15d      	cbz	r5, 800121e <__udivmoddi4+0x1fe>
 8001206:	ebb8 0203 	subs.w	r2, r8, r3
 800120a:	eb64 0409 	sbc.w	r4, r4, r9
 800120e:	fa04 f606 	lsl.w	r6, r4, r6
 8001212:	fa22 f301 	lsr.w	r3, r2, r1
 8001216:	431e      	orrs	r6, r3
 8001218:	40cc      	lsrs	r4, r1
 800121a:	e9c5 6400 	strd	r6, r4, [r5]
 800121e:	2100      	movs	r1, #0
 8001220:	e74f      	b.n	80010c2 <__udivmoddi4+0xa2>
 8001222:	fbb1 fcf2 	udiv	ip, r1, r2
 8001226:	0c01      	lsrs	r1, r0, #16
 8001228:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800122c:	b280      	uxth	r0, r0
 800122e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001232:	463b      	mov	r3, r7
 8001234:	4638      	mov	r0, r7
 8001236:	463c      	mov	r4, r7
 8001238:	46b8      	mov	r8, r7
 800123a:	46be      	mov	lr, r7
 800123c:	2620      	movs	r6, #32
 800123e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001242:	eba2 0208 	sub.w	r2, r2, r8
 8001246:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124a:	e766      	b.n	800111a <__udivmoddi4+0xfa>
 800124c:	4601      	mov	r1, r0
 800124e:	e718      	b.n	8001082 <__udivmoddi4+0x62>
 8001250:	4610      	mov	r0, r2
 8001252:	e72c      	b.n	80010ae <__udivmoddi4+0x8e>
 8001254:	f1c6 0220 	rsb	r2, r6, #32
 8001258:	fa2e f302 	lsr.w	r3, lr, r2
 800125c:	40b7      	lsls	r7, r6
 800125e:	40b1      	lsls	r1, r6
 8001260:	fa20 f202 	lsr.w	r2, r0, r2
 8001264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001268:	430a      	orrs	r2, r1
 800126a:	fbb3 f8fe 	udiv	r8, r3, lr
 800126e:	b2bc      	uxth	r4, r7
 8001270:	fb0e 3318 	mls	r3, lr, r8, r3
 8001274:	0c11      	lsrs	r1, r2, #16
 8001276:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800127a:	fb08 f904 	mul.w	r9, r8, r4
 800127e:	40b0      	lsls	r0, r6
 8001280:	4589      	cmp	r9, r1
 8001282:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001286:	b280      	uxth	r0, r0
 8001288:	d93e      	bls.n	8001308 <__udivmoddi4+0x2e8>
 800128a:	1879      	adds	r1, r7, r1
 800128c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001290:	d201      	bcs.n	8001296 <__udivmoddi4+0x276>
 8001292:	4589      	cmp	r9, r1
 8001294:	d81f      	bhi.n	80012d6 <__udivmoddi4+0x2b6>
 8001296:	eba1 0109 	sub.w	r1, r1, r9
 800129a:	fbb1 f9fe 	udiv	r9, r1, lr
 800129e:	fb09 f804 	mul.w	r8, r9, r4
 80012a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80012a6:	b292      	uxth	r2, r2
 80012a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012ac:	4542      	cmp	r2, r8
 80012ae:	d229      	bcs.n	8001304 <__udivmoddi4+0x2e4>
 80012b0:	18ba      	adds	r2, r7, r2
 80012b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80012b6:	d2c4      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012b8:	4542      	cmp	r2, r8
 80012ba:	d2c2      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012bc:	f1a9 0102 	sub.w	r1, r9, #2
 80012c0:	443a      	add	r2, r7
 80012c2:	e7be      	b.n	8001242 <__udivmoddi4+0x222>
 80012c4:	45f0      	cmp	r8, lr
 80012c6:	d29d      	bcs.n	8001204 <__udivmoddi4+0x1e4>
 80012c8:	ebbe 0302 	subs.w	r3, lr, r2
 80012cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012d0:	3801      	subs	r0, #1
 80012d2:	46e1      	mov	r9, ip
 80012d4:	e796      	b.n	8001204 <__udivmoddi4+0x1e4>
 80012d6:	eba7 0909 	sub.w	r9, r7, r9
 80012da:	4449      	add	r1, r9
 80012dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80012e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80012e4:	fb09 f804 	mul.w	r8, r9, r4
 80012e8:	e7db      	b.n	80012a2 <__udivmoddi4+0x282>
 80012ea:	4673      	mov	r3, lr
 80012ec:	e77f      	b.n	80011ee <__udivmoddi4+0x1ce>
 80012ee:	4650      	mov	r0, sl
 80012f0:	e766      	b.n	80011c0 <__udivmoddi4+0x1a0>
 80012f2:	4608      	mov	r0, r1
 80012f4:	e6fd      	b.n	80010f2 <__udivmoddi4+0xd2>
 80012f6:	443b      	add	r3, r7
 80012f8:	3a02      	subs	r2, #2
 80012fa:	e733      	b.n	8001164 <__udivmoddi4+0x144>
 80012fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8001300:	443b      	add	r3, r7
 8001302:	e71c      	b.n	800113e <__udivmoddi4+0x11e>
 8001304:	4649      	mov	r1, r9
 8001306:	e79c      	b.n	8001242 <__udivmoddi4+0x222>
 8001308:	eba1 0109 	sub.w	r1, r1, r9
 800130c:	46c4      	mov	ip, r8
 800130e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001312:	fb09 f804 	mul.w	r8, r9, r4
 8001316:	e7c4      	b.n	80012a2 <__udivmoddi4+0x282>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001330:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <MX_ADC1_Init+0x9c>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001336:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800133a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <MX_ADC1_Init+0xa0>)
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800136a:	2201      	movs	r2, #1
 800136c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001378:	2201      	movs	r2, #1
 800137a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800137e:	f003 fe11 	bl	8004fa4 <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001388:	f001 fcba 	bl	8002d00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800138c:	230b      	movs	r3, #11
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800139e:	f003 ffaf 	bl	8005300 <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013a8:	f001 fcaa 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000208 	.word	0x20000208
 80013b8:	40012000 	.word	0x40012000
 80013bc:	0f000001 	.word	0x0f000001

080013c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	@ (800145c <MX_ADC2_Init+0x9c>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <MX_ADC2_Init+0xa0>)
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_ADC2_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_ADC2_Init+0x98>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001422:	f003 fdbf 	bl	8004fa4 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800142c:	f001 fc68 	bl	8002d00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001430:	230c      	movs	r3, #12
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001442:	f003 ff5d 	bl	8005300 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800144c:	f001 fc58 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000250 	.word	0x20000250
 800145c:	40012100 	.word	0x40012100
 8001460:	0f000001 	.word	0x0f000001

08001464 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	@ 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2e      	ldr	r2, [pc, #184]	@ (800153c <HAL_ADC_MspInit+0xd8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a2c      	ldr	r2, [pc, #176]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_V_Pin;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_V_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	481c      	ldr	r0, [pc, #112]	@ (8001544 <HAL_ADC_MspInit+0xe0>)
 80014d2:	f004 fee7 	bl	80062a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80014d6:	e02c      	b.n	8001532 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_ADC_MspInit+0xe4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d127      	bne.n	8001532 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_C_Pin;
 800151a:	2304      	movs	r3, #4
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_C_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_ADC_MspInit+0xe0>)
 800152e:	f004 feb9 	bl	80062a4 <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	@ 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012000 	.word	0x40012000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020800 	.word	0x40020800
 8001548:	40012100 	.word	0x40012100

0800154c <resultant_accel>:
	return pow(nmbr, 2);
}
*/

static float resultant_accel(float accel_x, float accel_y, float accel_z)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	ed87 0a03 	vstr	s0, [r7, #12]
 8001556:	edc7 0a02 	vstr	s1, [r7, #8]
 800155a:	ed87 1a01 	vstr	s2, [r7, #4]
	return (fabs(accel_z) / (accel_z)) * sqrt(accel_x * accel_x + accel_y * accel_y + accel_z * accel_z);
 800155e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001562:	eef0 7ae7 	vabs.f32	s15, s15
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7ff f80d 	bl	8000588 <__aeabi_f2d>
 800156e:	4604      	mov	r4, r0
 8001570:	460d      	mov	r5, r1
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff f808 	bl	8000588 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7ff f984 	bl	800088c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001590:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001594:	edd7 7a02 	vldr	s15, [r7, #8]
 8001598:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80015a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ffea 	bl	8000588 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	ec43 2b10 	vmov	d0, r2, r3
 80015bc:	f010 f9be 	bl	801193c <sqrt>
 80015c0:	ec53 2b10 	vmov	r2, r3, d0
 80015c4:	4620      	mov	r0, r4
 80015c6:	4629      	mov	r1, r5
 80015c8:	f7ff f836 	bl	8000638 <__aeabi_dmul>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff fb28 	bl	8000c28 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	ee07 3a90 	vmov	s15, r3
}
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bdb0      	pop	{r4, r5, r7, pc}

080015e8 <reset_algorithm_status>:

void reset_algorithm_status()
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
	rocket_status = STAT_ROCKET_READY;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <reset_algorithm_status+0x14>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	200002a4 	.word	0x200002a4

08001600 <algorithm_update>:
 * 			(working_mode_e) mode: Rocket's working mode. SIT_TEST, SUT_TEST or NORMAL.
 *
 * @retval none
 */
flight_states_e algorithm_update(flight_data_t *rocket, uint32_t mode)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0b6      	sub	sp, #216	@ 0xd8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]

	currentTime_1 = HAL_GetTick();
 800160a:	f003 fc9b 	bl	8004f44 <HAL_GetTick>
 800160e:	4603      	mov	r3, r0
 8001610:	4aa2      	ldr	r2, [pc, #648]	@ (800189c <algorithm_update+0x29c>)
 8001612:	6013      	str	r3, [r2, #0]
	uint32_t delta_time = currentTime_1 - lastTime_1;
 8001614:	4ba1      	ldr	r3, [pc, #644]	@ (800189c <algorithm_update+0x29c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4ba1      	ldr	r3, [pc, #644]	@ (80018a0 <algorithm_update+0x2a0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	float resultanted_accel = resultant_accel(rocket->accel_x, rocket->accel_y, rocket->accel_z);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 7a04 	vldr	s15, [r3, #16]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	ed93 7a05 	vldr	s14, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 6a06 	vldr	s13, [r3, #24]
 8001634:	eeb0 1a66 	vmov.f32	s2, s13
 8001638:	eef0 0a47 	vmov.f32	s1, s14
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	f7ff ff84 	bl	800154c <resultant_accel>
 8001644:	ed87 0a34 	vstr	s0, [r7, #208]	@ 0xd0
	  lastTime_1 = currentTime_1;
	  is_updated = 1;
  }

*/
	if(mode == MODE_SUT_TEST)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d13a      	bne.n	80016c4 <algorithm_update+0xc4>
	{
		if(!is_new_test_data)
 800164e:	4b95      	ldr	r3, [pc, #596]	@ (80018a4 <algorithm_update+0x2a4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <algorithm_update+0x5c>
		{
			return rocket_status;
 8001656:	4b94      	ldr	r3, [pc, #592]	@ (80018a8 <algorithm_update+0x2a8>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	e17a      	b.n	8001952 <algorithm_update+0x352>
		}
		is_new_test_data = 0;
 800165c:	4b91      	ldr	r3, [pc, #580]	@ (80018a4 <algorithm_update+0x2a4>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
		rocket->abs_angle = (rocket->angle_x > rocket->angle_y) ? rocket->angle_x : rocket->angle_y;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	ed93 7a07 	vldr	s14, [r3, #28]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a08 	vldr	s15, [r3, #32]
 800166e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	dd02      	ble.n	800167e <algorithm_update+0x7e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	e001      	b.n	8001682 <algorithm_update+0x82>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6293      	str	r3, [r2, #40]	@ 0x28
		rocket->velocity = (rocket->altitude - last_altitude) / (float)delta_time * 1000.0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	4b87      	ldr	r3, [pc, #540]	@ (80018ac <algorithm_update+0x2ac>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a6:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80018b0 <algorithm_update+0x2b0>
 80016aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edc3 7a02 	vstr	s15, [r3, #8]
		last_altitude = rocket->altitude;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a7c      	ldr	r2, [pc, #496]	@ (80018ac <algorithm_update+0x2ac>)
 80016ba:	6013      	str	r3, [r2, #0]
		lastTime_1 = currentTime_1;
 80016bc:	4b77      	ldr	r3, [pc, #476]	@ (800189c <algorithm_update+0x29c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a77      	ldr	r2, [pc, #476]	@ (80018a0 <algorithm_update+0x2a0>)
 80016c2:	6013      	str	r3, [r2, #0]
		//sprintf((char*)str,"velocity= %f  test:alt = %f, acx=%f  acy=%f  acz=%f angx=%f angy=%f angz=%f", rocket->velocity, rocket->altitude,rocket->accel_x,  rocket->accel_y, rocket->accel_z, rocket->angle_x, rocket->angle_y, rocket->angle_z);
		//sprintf(str, "resultanted accel = %f", resultanted_accel);
		//serial_println((char*)str, &TTL_HNDLR);
	}

	switch(rocket_status)
 80016c4:	4b78      	ldr	r3, [pc, #480]	@ (80018a8 <algorithm_update+0x2a8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	f200 8135 	bhi.w	8001938 <algorithm_update+0x338>
 80016ce:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <algorithm_update+0xd4>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	080016fd 	.word	0x080016fd
 80016d8:	08001755 	.word	0x08001755
 80016dc:	08001799 	.word	0x08001799
 80016e0:	080017df 	.word	0x080017df
 80016e4:	08001867 	.word	0x08001867
 80016e8:	08001867 	.word	0x08001867
 80016ec:	0800187b 	.word	0x0800187b
 80016f0:	08001911 	.word	0x08001911
 80016f4:	08001925 	.word	0x08001925
 80016f8:	0800192f 	.word	0x0800192f
	{
		case STAT_ROCKET_READY:						//rising detection
			if(rocket->velocity > RISING_VELOCITY_TRESHOLD || resultanted_accel > RISING_G_TRESHOLD)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001702:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170e:	dc08      	bgt.n	8001722 <algorithm_update+0x122>
 8001710:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8001714:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80018b4 <algorithm_update+0x2b4>
 8001718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	dd05      	ble.n	800172e <algorithm_update+0x12e>
			{
				counter++;
 8001722:	4b65      	ldr	r3, [pc, #404]	@ (80018b8 <algorithm_update+0x2b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	4a63      	ldr	r2, [pc, #396]	@ (80018b8 <algorithm_update+0x2b8>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e002      	b.n	8001734 <algorithm_update+0x134>
			}
			else
			{
				counter = 0;
 800172e:	4b62      	ldr	r3, [pc, #392]	@ (80018b8 <algorithm_update+0x2b8>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 8001734:	4b60      	ldr	r3, [pc, #384]	@ (80018b8 <algorithm_update+0x2b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b03      	cmp	r3, #3
 800173a:	f040 80ff 	bne.w	800193c <algorithm_update+0x33c>
			{
				rocket_status = STAT_FLIGHT_STARTED;
 800173e:	4b5a      	ldr	r3, [pc, #360]	@ (80018a8 <algorithm_update+0x2a8>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001744:	4b5c      	ldr	r3, [pc, #368]	@ (80018b8 <algorithm_update+0x2b8>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
			#ifdef DEBUG_ALGORITHM
				serial_println("Fligth started", &TTL_HNDLR);
 800174a:	495c      	ldr	r1, [pc, #368]	@ (80018bc <algorithm_update+0x2bc>)
 800174c:	485c      	ldr	r0, [pc, #368]	@ (80018c0 <algorithm_update+0x2c0>)
 800174e:	f001 f90f 	bl	8002970 <serial_println>
			#endif
			}
			break;
 8001752:	e0f3      	b.n	800193c <algorithm_update+0x33c>

		case STAT_FLIGHT_STARTED:					//Burnout detect
			if(resultanted_accel < BURNOUT_THRESHOLD)
 8001754:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8001758:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80018c4 <algorithm_update+0x2c4>
 800175c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	d505      	bpl.n	8001772 <algorithm_update+0x172>
			{
				counter++;
 8001766:	4b54      	ldr	r3, [pc, #336]	@ (80018b8 <algorithm_update+0x2b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <algorithm_update+0x2b8>)
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e002      	b.n	8001778 <algorithm_update+0x178>
			}
			else
			{
				counter = 0;
 8001772:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <algorithm_update+0x2b8>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <algorithm_update+0x2b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b03      	cmp	r3, #3
 800177e:	f040 80df 	bne.w	8001940 <algorithm_update+0x340>
			{
				rocket_status = STAT_MOTOR_BURNOUT;
 8001782:	4b49      	ldr	r3, [pc, #292]	@ (80018a8 <algorithm_update+0x2a8>)
 8001784:	2202      	movs	r2, #2
 8001786:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001788:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <algorithm_update+0x2b8>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
			#ifdef DEBUG_ALGORITHM
				serial_println("Burnout detected", &TTL_HNDLR);
 800178e:	494b      	ldr	r1, [pc, #300]	@ (80018bc <algorithm_update+0x2bc>)
 8001790:	484d      	ldr	r0, [pc, #308]	@ (80018c8 <algorithm_update+0x2c8>)
 8001792:	f001 f8ed 	bl	8002970 <serial_println>
			#endif
			}
			break;
 8001796:	e0d3      	b.n	8001940 <algorithm_update+0x340>

		case STAT_MOTOR_BURNOUT:
			if(rocket->altitude > ARMING_ALTITUDE)	//Arming altitude reached
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80018cc <algorithm_update+0x2cc>
 80017a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	dd05      	ble.n	80017b8 <algorithm_update+0x1b8>
			{
				counter++;
 80017ac:	4b42      	ldr	r3, [pc, #264]	@ (80018b8 <algorithm_update+0x2b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a41      	ldr	r2, [pc, #260]	@ (80018b8 <algorithm_update+0x2b8>)
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e002      	b.n	80017be <algorithm_update+0x1be>
			}
			else
			{
				counter = 0;
 80017b8:	4b3f      	ldr	r3, [pc, #252]	@ (80018b8 <algorithm_update+0x2b8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 80017be:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <algorithm_update+0x2b8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	f040 80be 	bne.w	8001944 <algorithm_update+0x344>
			{
				rocket_status = STAT_ARMING_PASSED;
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <algorithm_update+0x2a8>)
 80017ca:	2203      	movs	r2, #3
 80017cc:	701a      	strb	r2, [r3, #0]
				counter = 0;
 80017ce:	4b3a      	ldr	r3, [pc, #232]	@ (80018b8 <algorithm_update+0x2b8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
			#ifdef DEBUG_ALGORITHM
				serial_println("Arming altitude reached", &TTL_HNDLR);
 80017d4:	4939      	ldr	r1, [pc, #228]	@ (80018bc <algorithm_update+0x2bc>)
 80017d6:	483e      	ldr	r0, [pc, #248]	@ (80018d0 <algorithm_update+0x2d0>)
 80017d8:	f001 f8ca 	bl	8002970 <serial_println>
			#endif
			}
			break;
 80017dc:	e0b2      	b.n	8001944 <algorithm_update+0x344>

		case STAT_ARMING_PASSED:
			if(rocket->velocity < FALLING_VELOCITY_TRESHOLD) //Falling detection via pressure sensor.
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017e4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80017e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d505      	bpl.n	80017fe <algorithm_update+0x1fe>
			{
				counter++;
 80017f2:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <algorithm_update+0x2b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3301      	adds	r3, #1
 80017f8:	4a2f      	ldr	r2, [pc, #188]	@ (80018b8 <algorithm_update+0x2b8>)
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	e015      	b.n	800182a <algorithm_update+0x22a>
			}
			else if(rocket->abs_angle > ANGLE_THRESHOLD)	//Falling detection via IMU sensor.
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001804:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80018d4 <algorithm_update+0x2d4>
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	dd05      	ble.n	800181e <algorithm_update+0x21e>
			{
				counter_2++;
 8001812:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <algorithm_update+0x2d8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	3301      	adds	r3, #1
 8001818:	4a2f      	ldr	r2, [pc, #188]	@ (80018d8 <algorithm_update+0x2d8>)
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e005      	b.n	800182a <algorithm_update+0x22a>
			}
			else
			{
				counter = 0;
 800181e:	4b26      	ldr	r3, [pc, #152]	@ (80018b8 <algorithm_update+0x2b8>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
				counter_2 = 0;
 8001824:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <algorithm_update+0x2d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <algorithm_update+0x2b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b03      	cmp	r3, #3
 8001830:	d10a      	bne.n	8001848 <algorithm_update+0x248>
			{
				rocket_status = STAT_ALT_DECREASE;
 8001832:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <algorithm_update+0x2a8>)
 8001834:	2205      	movs	r2, #5
 8001836:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <algorithm_update+0x2b8>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
			#ifdef DEBUG_ALGORITHM
				serial_println("Altitude decreasing", &TTL_HNDLR);
 800183e:	491f      	ldr	r1, [pc, #124]	@ (80018bc <algorithm_update+0x2bc>)
 8001840:	4826      	ldr	r0, [pc, #152]	@ (80018dc <algorithm_update+0x2dc>)
 8001842:	f001 f895 	bl	8002970 <serial_println>
				counter_2 = 0;
			#ifdef DEBUG_ALGORITHM
				serial_println("Angle reached the threshold", &TTL_HNDLR);
			#endif
			}
			break;
 8001846:	e07f      	b.n	8001948 <algorithm_update+0x348>
			else if(counter_2 == 3)
 8001848:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <algorithm_update+0x2d8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d17b      	bne.n	8001948 <algorithm_update+0x348>
				rocket_status = STAT_ANGLE_HORIZ;
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <algorithm_update+0x2a8>)
 8001852:	2204      	movs	r2, #4
 8001854:	701a      	strb	r2, [r3, #0]
				counter_2 = 0;
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <algorithm_update+0x2d8>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
				serial_println("Angle reached the threshold", &TTL_HNDLR);
 800185c:	4917      	ldr	r1, [pc, #92]	@ (80018bc <algorithm_update+0x2bc>)
 800185e:	4820      	ldr	r0, [pc, #128]	@ (80018e0 <algorithm_update+0x2e0>)
 8001860:	f001 f886 	bl	8002970 <serial_println>
			break;
 8001864:	e070      	b.n	8001948 <algorithm_update+0x348>

		case STAT_ANGLE_HORIZ:
		case STAT_ALT_DECREASE:
			apoge_deploy();
 8001866:	f001 f95d 	bl	8002b24 <apoge_deploy>
			rocket_status = STAT_P1_OK_P2_NO;
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <algorithm_update+0x2a8>)
 800186c:	2206      	movs	r2, #6
 800186e:	701a      	strb	r2, [r3, #0]
			#ifdef DEBUG_ALGORITHM
				serial_println("Apogee parachute deploy", &TTL_HNDLR);
 8001870:	4912      	ldr	r1, [pc, #72]	@ (80018bc <algorithm_update+0x2bc>)
 8001872:	481c      	ldr	r0, [pc, #112]	@ (80018e4 <algorithm_update+0x2e4>)
 8001874:	f001 f87c 	bl	8002970 <serial_println>
			#endif
			break;
 8001878:	e069      	b.n	800194e <algorithm_update+0x34e>

		case STAT_P1_OK_P2_NO:							//Second parachute deploy
			if(rocket->altitude < SECOND_DEPLOY_ALTITUDE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80018e8 <algorithm_update+0x2e8>
 8001884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188c:	d52e      	bpl.n	80018ec <algorithm_update+0x2ec>
			{
				counter++;
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <algorithm_update+0x2b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3301      	adds	r3, #1
 8001894:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <algorithm_update+0x2b8>)
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e02b      	b.n	80018f2 <algorithm_update+0x2f2>
 800189a:	bf00      	nop
 800189c:	20000298 	.word	0x20000298
 80018a0:	2000029c 	.word	0x2000029c
 80018a4:	200005bc 	.word	0x200005bc
 80018a8:	200002a4 	.word	0x200002a4
 80018ac:	200002a0 	.word	0x200002a0
 80018b0:	447a0000 	.word	0x447a0000
 80018b4:	44bb8000 	.word	0x44bb8000
 80018b8:	200002a8 	.word	0x200002a8
 80018bc:	20000904 	.word	0x20000904
 80018c0:	08013508 	.word	0x08013508
 80018c4:	c3fa0000 	.word	0xc3fa0000
 80018c8:	08013518 	.word	0x08013518
 80018cc:	44fa0000 	.word	0x44fa0000
 80018d0:	0801352c 	.word	0x0801352c
 80018d4:	42820000 	.word	0x42820000
 80018d8:	200002ac 	.word	0x200002ac
 80018dc:	08013544 	.word	0x08013544
 80018e0:	08013558 	.word	0x08013558
 80018e4:	08013574 	.word	0x08013574
 80018e8:	45034000 	.word	0x45034000
			}
			else
			{
				counter = 0;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <algorithm_update+0x35c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <algorithm_update+0x35c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d128      	bne.n	800194c <algorithm_update+0x34c>
			{
				rocket_status = STAT_SECOND_ALT;
 80018fa:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <algorithm_update+0x360>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001900:	4b16      	ldr	r3, [pc, #88]	@ (800195c <algorithm_update+0x35c>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
				#ifdef DEBUG_ALGORITHM
					serial_println("Second altitude reached", &TTL_HNDLR);
 8001906:	4917      	ldr	r1, [pc, #92]	@ (8001964 <algorithm_update+0x364>)
 8001908:	4817      	ldr	r0, [pc, #92]	@ (8001968 <algorithm_update+0x368>)
 800190a:	f001 f831 	bl	8002970 <serial_println>
				#endif
			}
			break;
 800190e:	e01d      	b.n	800194c <algorithm_update+0x34c>

		case STAT_SECOND_ALT:
			main_deploy();
 8001910:	f001 f8ea 	bl	8002ae8 <main_deploy>
			rocket_status = STAT_P1_OK_P2_OK;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <algorithm_update+0x360>)
 8001916:	2208      	movs	r2, #8
 8001918:	701a      	strb	r2, [r3, #0]
			#ifdef DEBUG_ALGORITHM
				serial_println("Second parachute deployed", &TTL_HNDLR);
 800191a:	4912      	ldr	r1, [pc, #72]	@ (8001964 <algorithm_update+0x364>)
 800191c:	4813      	ldr	r0, [pc, #76]	@ (800196c <algorithm_update+0x36c>)
 800191e:	f001 f827 	bl	8002970 <serial_println>
			#endif
			break;
 8001922:	e014      	b.n	800194e <algorithm_update+0x34e>

		case STAT_P1_OK_P2_OK:
			#ifdef DEBUG_ALGORITHM
				serial_println("Everything is fine", &TTL_HNDLR);
 8001924:	490f      	ldr	r1, [pc, #60]	@ (8001964 <algorithm_update+0x364>)
 8001926:	4812      	ldr	r0, [pc, #72]	@ (8001970 <algorithm_update+0x370>)
 8001928:	f001 f822 	bl	8002970 <serial_println>
			#endif
			break;
 800192c:	e00f      	b.n	800194e <algorithm_update+0x34e>

		case STAT_TOUCH_DOWN:
			#ifdef DEBUG_ALGORITHM
				serial_println("Touchdown confirmed", &TTL_HNDLR);
 800192e:	490d      	ldr	r1, [pc, #52]	@ (8001964 <algorithm_update+0x364>)
 8001930:	4810      	ldr	r0, [pc, #64]	@ (8001974 <algorithm_update+0x374>)
 8001932:	f001 f81d 	bl	8002970 <serial_println>
			#endif
			break;
 8001936:	e00a      	b.n	800194e <algorithm_update+0x34e>

		default:
			break;
 8001938:	bf00      	nop
 800193a:	e008      	b.n	800194e <algorithm_update+0x34e>
			break;
 800193c:	bf00      	nop
 800193e:	e006      	b.n	800194e <algorithm_update+0x34e>
			break;
 8001940:	bf00      	nop
 8001942:	e004      	b.n	800194e <algorithm_update+0x34e>
			break;
 8001944:	bf00      	nop
 8001946:	e002      	b.n	800194e <algorithm_update+0x34e>
			break;
 8001948:	bf00      	nop
 800194a:	e000      	b.n	800194e <algorithm_update+0x34e>
			break;
 800194c:	bf00      	nop

	}
	return rocket_status;
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <algorithm_update+0x360>)
 8001950:	781b      	ldrb	r3, [r3, #0]
}
 8001952:	4618      	mov	r0, r3
 8001954:	37d8      	adds	r7, #216	@ 0xd8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002a8 	.word	0x200002a8
 8001960:	200002a4 	.word	0x200002a4
 8001964:	20000904 	.word	0x20000904
 8001968:	0801358c 	.word	0x0801358c
 800196c:	080135a4 	.word	0x080135a4
 8001970:	080135c0 	.word	0x080135c0
 8001974:	080135d4 	.word	0x080135d4

08001978 <calculateCRC>:
union DataPack veriler;
uint8_t bufferPrint[400];


static uint8_t calculateCRC()
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
	int check_sum = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8001982:	2301      	movs	r3, #1
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	e00a      	b.n	800199e <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 8001988:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <calculateCRC+0x48>)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b3c      	cmp	r3, #60	@ 0x3c
 80019a2:	d9f1      	bls.n	8001988 <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	425a      	negs	r2, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	bf58      	it	pl
 80019ae:	4253      	negpl	r3, r2
 80019b0:	b2db      	uxtb	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	200002b0 	.word	0x200002b0

080019c4 <send_datas>:
  * @param  data: Pointer to the data string.
  * @param  huart: Pointer to the uart handler typedef.
  * @retval None
  */
void send_datas(UART_HandleTypeDef* huart, uint8_t* data, uint16_t len)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart, data, len, 50);
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	2332      	movs	r3, #50	@ 0x32
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f007 ff8b 	bl	80098f4 <HAL_UART_Transmit>
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <packDatas>:


uint8_t* packDatas(bmi088_struct_t *bmi, bme280_struct_t *bme, S_GPS_L86_DATA* gps , power_t *power_s, uint16_t status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6178      	str	r0, [r7, #20]
 80019f0:	6139      	str	r1, [r7, #16]
 80019f2:	60fa      	str	r2, [r7, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 80019f6:	4bb1      	ldr	r3, [pc, #708]	@ (8001cbc <packDatas+0x2d4>)
 80019f8:	22ff      	movs	r2, #255	@ 0xff
 80019fa:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0e:	ee17 3a90 	vmov	r3, s15
 8001a12:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	4aaa      	ldr	r2, [pc, #680]	@ (8001cc0 <packDatas+0x2d8>)
 8001a18:	fb82 1203 	smull	r1, r2, r2, r3
 8001a1c:	1151      	asrs	r1, r2, #5
 8001a1e:	17da      	asrs	r2, r3, #31
 8001a20:	1a8a      	subs	r2, r1, r2
 8001a22:	2164      	movs	r1, #100	@ 0x64
 8001a24:	fb01 f202 	mul.w	r2, r1, r2
 8001a28:	1a9a      	subs	r2, r3, r2
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4aa3      	ldr	r2, [pc, #652]	@ (8001cc0 <packDatas+0x2d8>)
 8001a32:	fb82 1203 	smull	r1, r2, r2, r3
 8001a36:	1152      	asrs	r2, r2, #5
 8001a38:	17db      	asrs	r3, r3, #31
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4a9f      	ldr	r2, [pc, #636]	@ (8001cc0 <packDatas+0x2d8>)
 8001a42:	fb82 1203 	smull	r1, r2, r2, r3
 8001a46:	1151      	asrs	r1, r2, #5
 8001a48:	17da      	asrs	r2, r3, #31
 8001a4a:	1a8a      	subs	r2, r1, r2
 8001a4c:	2164      	movs	r1, #100	@ 0x64
 8001a4e:	fb01 f202 	mul.w	r2, r1, r2
 8001a52:	1a9a      	subs	r2, r3, r2
 8001a54:	4613      	mov	r3, r2
 8001a56:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 8001a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	b25a      	sxtb	r2, r3
 8001a60:	7fbb      	ldrb	r3, [r7, #30]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b25b      	sxtb	r3, r3
 8001a6c:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (status);
 8001a6e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	b25a      	sxtb	r2, r3
 8001a76:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	b25b      	sxtb	r3, r3
 8001a7e:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 8001a80:	4a8e      	ldr	r2, [pc, #568]	@ (8001cbc <packDatas+0x2d4>)
 8001a82:	7ffb      	ldrb	r3, [r7, #31]
 8001a84:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 8001a86:	4a8d      	ldr	r2, [pc, #564]	@ (8001cbc <packDatas+0x2d4>)
 8001a88:	7fbb      	ldrb	r3, [r7, #30]
 8001a8a:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(power_s->voltage * 100);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001cc4 <packDatas+0x2dc>
 8001a96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b85      	ldr	r3, [pc, #532]	@ (8001cbc <packDatas+0x2d4>)
 8001aa6:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(power_s->wattage_calced);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab2:	ee17 3a90 	vmov	r3, s15
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b80      	ldr	r3, [pc, #512]	@ (8001cbc <packDatas+0x2d4>)
 8001aba:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->datas.temperature * 2);
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ac2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aca:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ace:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001ad2:	4b7a      	ldr	r3, [pc, #488]	@ (8001cbc <packDatas+0x2d4>)
 8001ad4:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->datas.humidity);
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	edd3 7a05 	vldr	s15, [r3, #20]
 8001adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ae4:	793a      	ldrb	r2, [r7, #4]
 8001ae6:	4b75      	ldr	r3, [pc, #468]	@ (8001cbc <packDatas+0x2d4>)
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	veriler.dataYapi.yukseklik_p = bme->datas.altitude;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	4a72      	ldr	r2, [pc, #456]	@ (8001cbc <packDatas+0x2d4>)
 8001af2:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)bme->parameters->max_alt;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b00:	ee17 3a90 	vmov	r3, s15
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	4b6d      	ldr	r3, [pc, #436]	@ (8001cbc <packDatas+0x2d4>)
 8001b08:	875a      	strh	r2, [r3, #58]	@ 0x3a
#else
	veriler.dataYapi.maxAltitude = 0;
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	4a6b      	ldr	r2, [pc, #428]	@ (8001cbc <packDatas+0x2d4>)
 8001b10:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a69      	ldr	r2, [pc, #420]	@ (8001cbc <packDatas+0x2d4>)
 8001b18:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	@ (8001cbc <packDatas+0x2d4>)
 8001b20:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->datas.gyro_x;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b28:	eef1 7a67 	vneg.f32	s15, s15
 8001b2c:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <packDatas+0x2d4>)
 8001b2e:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->datas.gyro_z;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b38:	eef1 7a67 	vneg.f32	s15, s15
 8001b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cbc <packDatas+0x2d4>)
 8001b3e:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->datas.gyro_y;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b48:	eef1 7a67 	vneg.f32	s15, s15
 8001b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <packDatas+0x2d4>)
 8001b4e:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->datas.acc_x / 1000;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001b58:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001cc8 <packDatas+0x2e0>
 8001b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b60:	4b56      	ldr	r3, [pc, #344]	@ (8001cbc <packDatas+0x2d4>)
 8001b62:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	veriler.dataYapi.accY = bmi->datas.acc_z / 1000;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001b6c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001cc8 <packDatas+0x2e0>
 8001b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b74:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <packDatas+0x2d4>)
 8001b76:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	veriler.dataYapi.accZ = (status > STAT_ROCKET_READY) ? (-bmi->datas.acc_y / 1000) - 1.0 : bmi->datas.acc_y / 1000;
 8001b7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d00d      	beq.n	8001b9c <packDatas+0x1b4>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001b86:	eeb1 7a67 	vneg.f32	s14, s15
 8001b8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001cc8 <packDatas+0x2e0>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b9a:	e006      	b.n	8001baa <packDatas+0x1c2>
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001ba2:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001cc8 <packDatas+0x2e0>
 8001ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001baa:	4b44      	ldr	r3, [pc, #272]	@ (8001cbc <packDatas+0x2d4>)
 8001bac:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	b25a      	sxtb	r2, r3
 8001bba:	4b44      	ldr	r3, [pc, #272]	@ (8001ccc <packDatas+0x2e4>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc4:	ee17 3a90 	vmov	r3, s15
 8001bc8:	135b      	asrs	r3, r3, #13
 8001bca:	b25b      	sxtb	r3, r3
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <packDatas+0x2e4>)
 8001bd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	ee17 3a90 	vmov	r3, s15
 8001be4:	139b      	asrs	r3, r3, #14
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	4b36      	ldr	r3, [pc, #216]	@ (8001ccc <packDatas+0x2e4>)
 8001bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfc:	ee17 3a90 	vmov	r3, s15
 8001c00:	13db      	asrs	r3, r3, #15
 8001c02:	b25b      	sxtb	r3, r3
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b2a      	ldr	r3, [pc, #168]	@ (8001cbc <packDatas+0x2d4>)
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->datas.velocity * 10);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c1c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c28:	ee17 3a90 	vmov	r3, s15
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <packDatas+0x2d4>)
 8001c30:	871a      	strh	r2, [r3, #56]	@ 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 8001c32:	f001 fadd 	bl	80031f0 <quaternionToTheta>
 8001c36:	eef0 7a40 	vmov.f32	s15, s0
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <packDatas+0x2d4>)
 8001c3c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 8001c40:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <packDatas+0x2e4>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c4a:	ee17 3a90 	vmov	r3, s15
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bfb8      	it	lt
 8001c52:	425b      	neglt	r3, r3
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <packDatas+0x2d4>)
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <packDatas+0x2e4>)
 8001c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c66:	ee17 3a90 	vmov	r3, s15
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bfb8      	it	lt
 8001c6e:	425b      	neglt	r3, r3
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <packDatas+0x2d4>)
 8001c74:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 8001c78:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <packDatas+0x2e4>)
 8001c7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c82:	ee17 3a90 	vmov	r3, s15
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bfb8      	it	lt
 8001c8a:	425b      	neglt	r3, r3
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <packDatas+0x2d4>)
 8001c90:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8001c94:	f7ff fe70 	bl	8001978 <calculateCRC>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <packDatas+0x2d4>)
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	veriler.dataYapi.CR	= '\r';
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <packDatas+0x2d4>)
 8001ca4:	220d      	movs	r2, #13
 8001ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	veriler.dataYapi.LF	= '\n';
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <packDatas+0x2d4>)
 8001cac:	220a      	movs	r2, #10
 8001cae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	return veriler.arr;
 8001cb2:	4b02      	ldr	r3, [pc, #8]	@ (8001cbc <packDatas+0x2d4>)
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200002b0 	.word	0x200002b0
 8001cc0:	51eb851f 	.word	0x51eb851f
 8001cc4:	42c80000 	.word	0x42c80000
 8001cc8:	447a0000 	.word	0x447a0000
 8001ccc:	200005c4 	.word	0x200005c4

08001cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <MX_DMA_Init+0x68>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a16      	ldr	r2, [pc, #88]	@ (8001d38 <MX_DMA_Init+0x68>)
 8001ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b14      	ldr	r3, [pc, #80]	@ (8001d38 <MX_DMA_Init+0x68>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <MX_DMA_Init+0x68>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001d38 <MX_DMA_Init+0x68>)
 8001cfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <MX_DMA_Init+0x68>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2100      	movs	r1, #0
 8001d12:	200c      	movs	r0, #12
 8001d14:	f003 fe21 	bl	800595a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d18:	200c      	movs	r0, #12
 8001d1a:	f003 fe3a 	bl	8005992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2039      	movs	r0, #57	@ 0x39
 8001d24:	f003 fe19 	bl	800595a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d28:	2039      	movs	r0, #57	@ 0x39
 8001d2a:	f003 fe32 	bl	8005992 <HAL_NVIC_EnableIRQ>

}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	@ 0x28
 8001d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	605a      	str	r2, [r3, #4]
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b75      	ldr	r3, [pc, #468]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a74      	ldr	r2, [pc, #464]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b72      	ldr	r3, [pc, #456]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b6e      	ldr	r3, [pc, #440]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a6d      	ldr	r2, [pc, #436]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b6b      	ldr	r3, [pc, #428]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b67      	ldr	r3, [pc, #412]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a66      	ldr	r2, [pc, #408]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b64      	ldr	r3, [pc, #400]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b60      	ldr	r3, [pc, #384]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a5f      	ldr	r2, [pc, #380]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	4b59      	ldr	r3, [pc, #356]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a58      	ldr	r2, [pc, #352]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b56      	ldr	r3, [pc, #344]	@ (8001f2c <MX_GPIO_Init+0x1f0>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|APOGE_STAT_DIS_Pin|APOGE_MOS_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f241 0109 	movw	r1, #4105	@ 0x1009
 8001de4:	4852      	ldr	r0, [pc, #328]	@ (8001f30 <MX_GPIO_Init+0x1f4>)
 8001de6:	f004 fce5 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, APOGEE_LED_Pin|MAIN_LED_Pin|RF_M0_Pin|RF_M1_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f641 0109 	movw	r1, #6153	@ 0x1809
 8001df0:	4850      	ldr	r0, [pc, #320]	@ (8001f34 <MX_GPIO_Init+0x1f8>)
 8001df2:	f004 fcdf 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENS_RES_Pin|USER_LED_Pin|SD_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f248 0116 	movw	r1, #32790	@ 0x8016
 8001dfc:	484d      	ldr	r0, [pc, #308]	@ (8001f34 <MX_GPIO_Init+0x1f8>)
 8001dfe:	f004 fcd9 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAIN_MOS_Pin|MAIN_STAT_DIS_Pin|IO_1_Pin|IO_0_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	f246 0105 	movw	r1, #24581	@ 0x6005
 8001e08:	484b      	ldr	r0, [pc, #300]	@ (8001f38 <MX_GPIO_Init+0x1fc>)
 8001e0a:	f004 fcd3 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RES_GPIO_Port, FLASH_RES_Pin, GPIO_PIN_RESET);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2104      	movs	r1, #4
 8001e12:	484a      	ldr	r0, [pc, #296]	@ (8001f3c <MX_GPIO_Init+0x200>)
 8001e14:	f004 fcce 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : APOGE_STAT_Pin SD_CD_Pin */
  GPIO_InitStruct.Pin = APOGE_STAT_Pin|SD_CD_Pin;
 8001e18:	f242 0310 	movw	r3, #8208	@ 0x2010
 8001e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4840      	ldr	r0, [pc, #256]	@ (8001f30 <MX_GPIO_Init+0x1f4>)
 8001e2e:	f004 fa39 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin APOGE_STAT_DIS_Pin APOGE_MOS_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|APOGE_STAT_DIS_Pin|APOGE_MOS_Pin;
 8001e32:	f241 0309 	movw	r3, #4105	@ 0x1009
 8001e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4839      	ldr	r0, [pc, #228]	@ (8001f30 <MX_GPIO_Init+0x1f4>)
 8001e4c:	f004 fa2a 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : APOGEE_LED_Pin SENS_RES_Pin USER_LED_Pin MAIN_LED_Pin
                           SD_CS_Pin RF_M0_Pin RF_M1_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = APOGEE_LED_Pin|SENS_RES_Pin|USER_LED_Pin|MAIN_LED_Pin
 8001e50:	f649 031f 	movw	r3, #38943	@ 0x981f
 8001e54:	617b      	str	r3, [r7, #20]
                          |SD_CS_Pin|RF_M0_Pin|RF_M1_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4832      	ldr	r0, [pc, #200]	@ (8001f34 <MX_GPIO_Init+0x1f8>)
 8001e6a:	f004 fa1b 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_MOS_Pin MAIN_STAT_DIS_Pin IO_1_Pin IO_0_Pin */
  GPIO_InitStruct.Pin = MAIN_MOS_Pin|MAIN_STAT_DIS_Pin|IO_1_Pin|IO_0_Pin;
 8001e6e:	f246 0305 	movw	r3, #24581	@ 0x6005
 8001e72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	482c      	ldr	r0, [pc, #176]	@ (8001f38 <MX_GPIO_Init+0x1fc>)
 8001e88:	f004 fa0c 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_STAT_Pin GPS_LED_Pin FLASH_WP_Pin */
  GPIO_InitStruct.Pin = MAIN_STAT_Pin|GPS_LED_Pin|FLASH_WP_Pin;
 8001e8c:	f249 0302 	movw	r3, #36866	@ 0x9002
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4825      	ldr	r0, [pc, #148]	@ (8001f38 <MX_GPIO_Init+0x1fc>)
 8001ea2:	f004 f9ff 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8001ea6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481c      	ldr	r0, [pc, #112]	@ (8001f30 <MX_GPIO_Init+0x1f4>)
 8001ebe:	f004 f9f1 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ACC_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin;
 8001ec2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_ACC_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4816      	ldr	r0, [pc, #88]	@ (8001f34 <MX_GPIO_Init+0x1f8>)
 8001eda:	f004 f9e3 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_AUX_Pin */
  GPIO_InitStruct.Pin = RF_AUX_Pin;
 8001ede:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_AUX_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4810      	ldr	r0, [pc, #64]	@ (8001f34 <MX_GPIO_Init+0x1f8>)
 8001ef4:	f004 f9d6 	bl	80062a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RES_Pin */
  GPIO_InitStruct.Pin = FLASH_RES_Pin;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efc:	2301      	movs	r3, #1
 8001efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_RES_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <MX_GPIO_Init+0x200>)
 8001f10:	f004 f9c8 	bl	80062a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	2017      	movs	r0, #23
 8001f1a:	f003 fd1e 	bl	800595a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f1e:	2017      	movs	r0, #23
 8001f20:	f003 fd37 	bl	8005992 <HAL_NVIC_EnableIRQ>

}
 8001f24:	bf00      	nop
 8001f26:	3728      	adds	r7, #40	@ 0x28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020c00 	.word	0x40020c00

08001f40 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f46:	4a13      	ldr	r2, [pc, #76]	@ (8001f94 <MX_I2C1_Init+0x54>)
 8001f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <MX_I2C1_Init+0x58>)
 8001f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f7c:	4804      	ldr	r0, [pc, #16]	@ (8001f90 <MX_I2C1_Init+0x50>)
 8001f7e:	f004 fc4b 	bl	8006818 <HAL_I2C_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f88:	f000 feba 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	200002f0 	.word	0x200002f0
 8001f94:	40005400 	.word	0x40005400
 8001f98:	000186a0 	.word	0x000186a0

08001f9c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fa2:	4a13      	ldr	r2, [pc, #76]	@ (8001ff0 <MX_I2C3_Init+0x54>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fa8:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <MX_I2C3_Init+0x58>)
 8001faa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fbe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	@ (8001fec <MX_I2C3_Init+0x50>)
 8001fda:	f004 fc1d 	bl	8006818 <HAL_I2C_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001fe4:	f000 fe8c 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20000344 	.word	0x20000344
 8001ff0:	40005c00 	.word	0x40005c00
 8001ff4:	000186a0 	.word	0x000186a0

08001ff8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	@ 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a42      	ldr	r2, [pc, #264]	@ (8002120 <HAL_I2C_MspInit+0x128>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12d      	bne.n	8002076 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002022:	4a40      	ldr	r2, [pc, #256]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	@ 0x30
 800202a:	4b3e      	ldr	r3, [pc, #248]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002036:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203c:	2312      	movs	r3, #18
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002048:	2304      	movs	r3, #4
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4835      	ldr	r0, [pc, #212]	@ (8002128 <HAL_I2C_MspInit+0x130>)
 8002054:	f004 f926 	bl	80062a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	4a30      	ldr	r2, [pc, #192]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002066:	6413      	str	r3, [r2, #64]	@ 0x40
 8002068:	4b2e      	ldr	r3, [pc, #184]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002074:	e050      	b.n	8002118 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <HAL_I2C_MspInit+0x134>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d14b      	bne.n	8002118 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002080:	2300      	movs	r3, #0
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	4a26      	ldr	r2, [pc, #152]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020be:	2312      	movs	r3, #18
 80020c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020ca:	2304      	movs	r3, #4
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	4619      	mov	r1, r3
 80020d4:	4816      	ldr	r0, [pc, #88]	@ (8002130 <HAL_I2C_MspInit+0x138>)
 80020d6:	f004 f8e5 	bl	80062a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e0:	2312      	movs	r3, #18
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020ec:	2304      	movs	r3, #4
 80020ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	480f      	ldr	r0, [pc, #60]	@ (8002134 <HAL_I2C_MspInit+0x13c>)
 80020f8:	f004 f8d4 	bl	80062a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80020fc:	2300      	movs	r3, #0
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 8002106:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800210a:	6413      	str	r3, [r2, #64]	@ 0x40
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <HAL_I2C_MspInit+0x12c>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002110:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
}
 8002118:	bf00      	nop
 800211a:	3730      	adds	r7, #48	@ 0x30
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40005400 	.word	0x40005400
 8002124:	40023800 	.word	0x40023800
 8002128:	40020400 	.word	0x40020400
 800212c:	40005c00 	.word	0x40005c00
 8002130:	40020800 	.word	0x40020800
 8002134:	40020000 	.word	0x40020000

08002138 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a16      	ldr	r2, [pc, #88]	@ (80021a0 <HAL_I2C_MspDeInit+0x68>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d110      	bne.n	800216c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800214a:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <HAL_I2C_MspDeInit+0x6c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	4a15      	ldr	r2, [pc, #84]	@ (80021a4 <HAL_I2C_MspDeInit+0x6c>)
 8002150:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002154:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002156:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800215a:	4813      	ldr	r0, [pc, #76]	@ (80021a8 <HAL_I2C_MspDeInit+0x70>)
 800215c:	f004 fa36 	bl	80065cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002164:	4810      	ldr	r0, [pc, #64]	@ (80021a8 <HAL_I2C_MspDeInit+0x70>)
 8002166:	f004 fa31 	bl	80065cc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800216a:	e014      	b.n	8002196 <HAL_I2C_MspDeInit+0x5e>
  else if(i2cHandle->Instance==I2C3)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0e      	ldr	r2, [pc, #56]	@ (80021ac <HAL_I2C_MspDeInit+0x74>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d10f      	bne.n	8002196 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002176:	4b0b      	ldr	r3, [pc, #44]	@ (80021a4 <HAL_I2C_MspDeInit+0x6c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	4a0a      	ldr	r2, [pc, #40]	@ (80021a4 <HAL_I2C_MspDeInit+0x6c>)
 800217c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002180:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002182:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002186:	480a      	ldr	r0, [pc, #40]	@ (80021b0 <HAL_I2C_MspDeInit+0x78>)
 8002188:	f004 fa20 	bl	80065cc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800218c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002190:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <HAL_I2C_MspDeInit+0x7c>)
 8002192:	f004 fa1b 	bl	80065cc <HAL_GPIO_DeInit>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40005400 	.word	0x40005400
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40005c00 	.word	0x40005c00
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020000 	.word	0x40020000

080021b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	@ 0x30
 80021bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021be:	f002 fe5b 	bl	8004e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021c2:	f000 fa93 	bl	80026ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c6:	f7ff fdb9 	bl	8001d3c <MX_GPIO_Init>
  MX_DMA_Init();
 80021ca:	f7ff fd81 	bl	8001cd0 <MX_DMA_Init>
  MX_I2C1_Init();
 80021ce:	f7ff feb7 	bl	8001f40 <MX_I2C1_Init>
  MX_I2C3_Init();
 80021d2:	f7ff fee3 	bl	8001f9c <MX_I2C3_Init>
  MX_SPI1_Init();
 80021d6:	f001 fa37 	bl	8003648 <MX_SPI1_Init>
  MX_SPI3_Init();
 80021da:	f001 fa6b 	bl	80036b4 <MX_SPI3_Init>
  MX_UART4_Init();
 80021de:	f002 f989 	bl	80044f4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021e2:	f002 f9b1 	bl	8004548 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80021e6:	f002 f9d9 	bl	800459c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80021ea:	f002 fa01 	bl	80045f0 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80021ee:	f001 f9db 	bl	80035a8 <MX_RTC_Init>
  MX_TIM3_Init();
 80021f2:	f001 fcd9 	bl	8003ba8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80021f6:	f001 fd25 	bl	8003c44 <MX_TIM4_Init>
  MX_TIM5_Init();
 80021fa:	f001 fd71 	bl	8003ce0 <MX_TIM5_Init>
  MX_TIM6_Init();
 80021fe:	f001 fdbd 	bl	8003d7c <MX_TIM6_Init>
  MX_TIM9_Init();
 8002202:	f001 fe27 	bl	8003e54 <MX_TIM9_Init>
  MX_ADC1_Init();
 8002206:	f7ff f889 	bl	800131c <MX_ADC1_Init>
  MX_ADC2_Init();
 800220a:	f7ff f8d9 	bl	80013c0 <MX_ADC2_Init>
  MX_TIM7_Init();
 800220e:	f001 fdeb 	bl	8003de8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 8002212:	f005 fb55 	bl	80078c0 <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 8002216:	4bb1      	ldr	r3, [pc, #708]	@ (80024dc <main+0x324>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	4ab0      	ldr	r2, [pc, #704]	@ (80024dc <main+0x324>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002220:	6313      	str	r3, [r2, #48]	@ 0x30
  HAL_PWR_EnableBkUpReg();
 8002222:	f005 fb61 	bl	80078e8 <HAL_PWREx_EnableBkUpReg>

  HAL_GPIO_WritePin(SENS_RES_GPIO_Port, SENS_RES_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2102      	movs	r1, #2
 800222a:	48ad      	ldr	r0, [pc, #692]	@ (80024e0 <main+0x328>)
 800222c:	f004 fac2 	bl	80067b4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002230:	2032      	movs	r0, #50	@ 0x32
 8002232:	f002 fe93 	bl	8004f5c <HAL_Delay>
  HAL_GPIO_WritePin(SENS_RES_GPIO_Port, SENS_RES_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	2102      	movs	r1, #2
 800223a:	48a9      	ldr	r0, [pc, #676]	@ (80024e0 <main+0x328>)
 800223c:	f004 faba 	bl	80067b4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002240:	2032      	movs	r0, #50	@ 0x32
 8002242:	f002 fe8b 	bl	8004f5c <HAL_Delay>

  uint8_t bme_ret = bme280_begin();
 8002246:	f000 fac5 	bl	80027d4 <bme280_begin>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(bme_ret)
 8002250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <main+0xa8>
  {
	  serial_println("bme sensor fail", &TTL_HNDLR);
 8002258:	49a2      	ldr	r1, [pc, #648]	@ (80024e4 <main+0x32c>)
 800225a:	48a3      	ldr	r0, [pc, #652]	@ (80024e8 <main+0x330>)
 800225c:	f000 fb88 	bl	8002970 <serial_println>
  else
  {
	  //serial_println("bme sensor success", &TTL_HNDLR);
  }

  bme280_config(&bme_sensor_s);
 8002260:	48a2      	ldr	r0, [pc, #648]	@ (80024ec <main+0x334>)
 8002262:	f008 ff29 	bl	800b0b8 <bme280_config>

  uint8_t bmi_ret = bmi088_begin();
 8002266:	f000 fb4d 	bl	8002904 <bmi088_begin>
 800226a:	4603      	mov	r3, r0
 800226c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if(bmi_ret)
 8002270:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01f      	beq.n	80022b8 <main+0x100>
  {
	  serial_println("bmi fail", &TTL_HNDLR);
 8002278:	499a      	ldr	r1, [pc, #616]	@ (80024e4 <main+0x32c>)
 800227a:	489d      	ldr	r0, [pc, #628]	@ (80024f0 <main+0x338>)
 800227c:	f000 fb78 	bl	8002970 <serial_println>
      if((bmi_ret & 0x01) == 0x01)
 8002280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <main+0xe4>
      {
        sprintf((char*)str, "error in accel");
 800228c:	4999      	ldr	r1, [pc, #612]	@ (80024f4 <main+0x33c>)
 800228e:	489a      	ldr	r0, [pc, #616]	@ (80024f8 <main+0x340>)
 8002290:	f00b faaa 	bl	800d7e8 <siprintf>
        serial_println((char*) str, &TTL_HNDLR);
 8002294:	4993      	ldr	r1, [pc, #588]	@ (80024e4 <main+0x32c>)
 8002296:	4898      	ldr	r0, [pc, #608]	@ (80024f8 <main+0x340>)
 8002298:	f000 fb6a 	bl	8002970 <serial_println>
      }
      if((bmi_ret & 0x02) == 0x02)
 800229c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <main+0x100>
      {
        sprintf((char*)str, "error in gyro");
 80022a8:	4994      	ldr	r1, [pc, #592]	@ (80024fc <main+0x344>)
 80022aa:	4893      	ldr	r0, [pc, #588]	@ (80024f8 <main+0x340>)
 80022ac:	f00b fa9c 	bl	800d7e8 <siprintf>
        serial_println((char*) str, &TTL_HNDLR);
 80022b0:	498c      	ldr	r1, [pc, #560]	@ (80024e4 <main+0x32c>)
 80022b2:	4891      	ldr	r0, [pc, #580]	@ (80024f8 <main+0x340>)
 80022b4:	f000 fb5c 	bl	8002970 <serial_println>
  else
  {
	  //serial_println("bmi success", &TTL_HNDLR);
  }

    bmi088_config(&bmi_imu_s);
 80022b8:	4891      	ldr	r0, [pc, #580]	@ (8002500 <main+0x348>)
 80022ba:	f009 fce3 	bl	800bc84 <bmi088_config>
    get_offset(&bmi_imu_s);
 80022be:	4890      	ldr	r0, [pc, #576]	@ (8002500 <main+0x348>)
 80022c0:	f00a fa2e 	bl	800c720 <get_offset>

    ukb_test_init(&test_datas);
 80022c4:	488f      	ldr	r0, [pc, #572]	@ (8002504 <main+0x34c>)
 80022c6:	f001 febd 	bl	8004044 <ukb_test_init>
    quaternon_init(backup_datas->q);
 80022ca:	4b8f      	ldr	r3, [pc, #572]	@ (8002508 <main+0x350>)
 80022cc:	3344      	adds	r3, #68	@ 0x44
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 fd1c 	bl	8002d0c <quaternon_init>
    bmi088_update(&bmi_imu_s);
 80022d4:	488a      	ldr	r0, [pc, #552]	@ (8002500 <main+0x348>)
 80022d6:	f009 fed7 	bl	800c088 <bmi088_update>
    getInitialQuaternion(bmi_imu_s.datas.acc_x, bmi_imu_s.datas.acc_y, bmi_imu_s.datas.acc_z);
 80022da:	4b89      	ldr	r3, [pc, #548]	@ (8002500 <main+0x348>)
 80022dc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80022e0:	4b87      	ldr	r3, [pc, #540]	@ (8002500 <main+0x348>)
 80022e2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80022e6:	4b86      	ldr	r3, [pc, #536]	@ (8002500 <main+0x348>)
 80022e8:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 80022ec:	eeb0 1a66 	vmov.f32	s2, s13
 80022f0:	eef0 0a47 	vmov.f32	s1, s14
 80022f4:	eeb0 0a67 	vmov.f32	s0, s15
 80022f8:	f001 f846 	bl	8003388 <getInitialQuaternion>


    // GNSS config baud rate 57600 with PMTK command.
    serial_println("$PMTK251,57600*2C", &GPS_UART_HNDLR);	// GNSS baud set 57600
 80022fc:	4983      	ldr	r1, [pc, #524]	@ (800250c <main+0x354>)
 80022fe:	4884      	ldr	r0, [pc, #528]	@ (8002510 <main+0x358>)
 8002300:	f000 fb36 	bl	8002970 <serial_println>
    HAL_UART_DeInit(&GPS_UART_HNDLR);
 8002304:	4881      	ldr	r0, [pc, #516]	@ (800250c <main+0x354>)
 8002306:	f007 fac3 	bl	8009890 <HAL_UART_DeInit>
    GPS_UART_HNDLR.Init.BaudRate = 57600;
 800230a:	4b80      	ldr	r3, [pc, #512]	@ (800250c <main+0x354>)
 800230c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002310:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&GPS_UART_HNDLR);
 8002312:	487e      	ldr	r0, [pc, #504]	@ (800250c <main+0x354>)
 8002314:	f007 fa6c 	bl	80097f0 <HAL_UART_Init>
    UsrGpsL86Init(&GPS_UART_HNDLR);
 8002318:	487c      	ldr	r0, [pc, #496]	@ (800250c <main+0x354>)
 800231a:	f002 fb89 	bl	8004a30 <UsrGpsL86Init>
    //VIEW_GPS()											// Read and write to TTL raw GNSS raw value.

    // Lora module config.
    lora_init();
 800231e:	f000 fca1 	bl	8002c64 <lora_init>

    // Config phase finished beep.
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	2101      	movs	r1, #1
 8002326:	487b      	ldr	r0, [pc, #492]	@ (8002514 <main+0x35c>)
 8002328:	f004 fa44 	bl	80067b4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800232c:	2064      	movs	r0, #100	@ 0x64
 800232e:	f002 fe15 	bl	8004f5c <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2101      	movs	r1, #1
 8002336:	4877      	ldr	r0, [pc, #476]	@ (8002514 <main+0x35c>)
 8002338:	f004 fa3c 	bl	80067b4 <HAL_GPIO_WritePin>

    // Start timer interrupts.
    HAL_TIM_Base_Start_IT(&htim3);
 800233c:	4876      	ldr	r0, [pc, #472]	@ (8002518 <main+0x360>)
 800233e:	f006 fe37 	bl	8008fb0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8002342:	4876      	ldr	r0, [pc, #472]	@ (800251c <main+0x364>)
 8002344:	f006 fe34 	bl	8008fb0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 8002348:	4875      	ldr	r0, [pc, #468]	@ (8002520 <main+0x368>)
 800234a:	f006 fe31 	bl	8008fb0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 800234e:	4875      	ldr	r0, [pc, #468]	@ (8002524 <main+0x36c>)
 8002350:	f006 fe2e 	bl	8008fb0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8002354:	4874      	ldr	r0, [pc, #464]	@ (8002528 <main+0x370>)
 8002356:	f006 fe2b 	bl	8008fb0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim9);
 800235a:	4874      	ldr	r0, [pc, #464]	@ (800252c <main+0x374>)
 800235c:	f006 fe28 	bl	8008fb0 <HAL_TIM_Base_Start_IT>

    // Start receiving DMA form RS232 UART.
    __HAL_UART_ENABLE_IT(&RS232_HNDLR, UART_IT_IDLE);
 8002360:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <main+0x378>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b72      	ldr	r3, [pc, #456]	@ (8002530 <main+0x378>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0210 	orr.w	r2, r2, #16
 800236e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(&RS232_HNDLR, dma_rx_buf, RX_BUFFER_LEN + 6);
 8002370:	222a      	movs	r2, #42	@ 0x2a
 8002372:	4970      	ldr	r1, [pc, #448]	@ (8002534 <main+0x37c>)
 8002374:	486e      	ldr	r0, [pc, #440]	@ (8002530 <main+0x378>)
 8002376:	f007 fb48 	bl	8009a0a <HAL_UART_Receive_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(is_dma_idle)
 800237a:	4b6f      	ldr	r3, [pc, #444]	@ (8002538 <main+0x380>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <main+0x1e0>
	  {
		  process_received_datas(dma_rx_buf);
 8002382:	486c      	ldr	r0, [pc, #432]	@ (8002534 <main+0x37c>)
 8002384:	f001 fe72 	bl	800406c <process_received_datas>
		  HAL_UART_Receive_DMA(&RS232_HNDLR, dma_rx_buf, RX_BUFFER_LEN + 6);
 8002388:	222a      	movs	r2, #42	@ 0x2a
 800238a:	496a      	ldr	r1, [pc, #424]	@ (8002534 <main+0x37c>)
 800238c:	4868      	ldr	r0, [pc, #416]	@ (8002530 <main+0x378>)
 800238e:	f007 fb3c 	bl	8009a0a <HAL_UART_Receive_DMA>
		  is_dma_idle = 0;
 8002392:	4b69      	ldr	r3, [pc, #420]	@ (8002538 <main+0x380>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
	  }
	  if(get_test_mode() != last_mode)
 8002398:	f002 f846 	bl	8004428 <get_test_mode>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	4b66      	ldr	r3, [pc, #408]	@ (800253c <main+0x384>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d00d      	beq.n	80023c4 <main+0x20c>
	  {
		  working_mode = get_test_mode();
 80023a8:	f002 f83e 	bl	8004428 <get_test_mode>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <main+0x388>)
 80023b2:	701a      	strb	r2, [r3, #0]
		  last_mode = get_test_mode();
 80023b4:	f002 f838 	bl	8004428 <get_test_mode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b5f      	ldr	r3, [pc, #380]	@ (800253c <main+0x384>)
 80023be:	701a      	strb	r2, [r3, #0]
		  reset_algorithm_status();
 80023c0:	f7ff f912 	bl	80015e8 <reset_algorithm_status>
	  }

	  if(is_1000ms)	// This condition works at 1Hz.
 80023c4:	4b5f      	ldr	r3, [pc, #380]	@ (8002544 <main+0x38c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <main+0x228>
	  {
		  Usr_GpsL86GetValues(&gps_s, &GPS_UART_HNDLR);
 80023cc:	494f      	ldr	r1, [pc, #316]	@ (800250c <main+0x354>)
 80023ce:	485e      	ldr	r0, [pc, #376]	@ (8002548 <main+0x390>)
 80023d0:	f002 fb54 	bl	8004a7c <Usr_GpsL86GetValues>
		  is_power_1s = 1;
 80023d4:	4b5d      	ldr	r3, [pc, #372]	@ (800254c <main+0x394>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
		  is_1000ms = 0;
 80023da:	4b5a      	ldr	r3, [pc, #360]	@ (8002544 <main+0x38c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
	  }
	  if(is_200ms)	// This condition works at 5Hz.
 80023e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <main+0x398>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80ec 	beq.w	80025c2 <main+0x40a>
	  {
		  packed_datas_p = packDatas(&bmi_imu_s, &bme_sensor_s, &gps_s, &power_s, rocket_status + 1);
 80023ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002554 <main+0x39c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	3301      	adds	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <main+0x3a0>)
 80023f6:	4a54      	ldr	r2, [pc, #336]	@ (8002548 <main+0x390>)
 80023f8:	493c      	ldr	r1, [pc, #240]	@ (80024ec <main+0x334>)
 80023fa:	4841      	ldr	r0, [pc, #260]	@ (8002500 <main+0x348>)
 80023fc:	f7ff faf4 	bl	80019e8 <packDatas>
 8002400:	4603      	mov	r3, r0
 8002402:	4a56      	ldr	r2, [pc, #344]	@ (800255c <main+0x3a4>)
 8002404:	6013      	str	r3, [r2, #0]
		  //send_datas(&TTL_HNDLR, packed_datas_p, 64);	// Sends the packets via uart bridge to GCS.
		  bme_sensor_s.datas.velocity = (bme_sensor_s.datas.altitude - last_altitude) / (bme_sensor_s.datas.time_of_update - last_vel_measure_time);
 8002406:	4b39      	ldr	r3, [pc, #228]	@ (80024ec <main+0x334>)
 8002408:	ed93 7a07 	vldr	s14, [r3, #28]
 800240c:	4b54      	ldr	r3, [pc, #336]	@ (8002560 <main+0x3a8>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002416:	4b35      	ldr	r3, [pc, #212]	@ (80024ec <main+0x334>)
 8002418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800241a:	4b52      	ldr	r3, [pc, #328]	@ (8002564 <main+0x3ac>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800242c:	4b2f      	ldr	r3, [pc, #188]	@ (80024ec <main+0x334>)
 800242e:	edc3 7a08 	vstr	s15, [r3, #32]
		  last_altitude = bme_sensor_s.datas.altitude;
 8002432:	4b2e      	ldr	r3, [pc, #184]	@ (80024ec <main+0x334>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4a4a      	ldr	r2, [pc, #296]	@ (8002560 <main+0x3a8>)
 8002438:	6013      	str	r3, [r2, #0]
		  last_vel_measure_time = bme_sensor_s.datas.time_of_update;
 800243a:	4b2c      	ldr	r3, [pc, #176]	@ (80024ec <main+0x334>)
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	4a49      	ldr	r2, [pc, #292]	@ (8002564 <main+0x3ac>)
 8002440:	6013      	str	r3, [r2, #0]

		  switch(get_test_mode())
 8002442:	f001 fff1 	bl	8004428 <get_test_mode>
 8002446:	4603      	mov	r3, r0
 8002448:	2b02      	cmp	r3, #2
 800244a:	f000 8091 	beq.w	8002570 <main+0x3b8>
 800244e:	2b02      	cmp	r3, #2
 8002450:	f300 80b4 	bgt.w	80025bc <main+0x404>
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80b0 	beq.w	80025ba <main+0x402>
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 80ae 	bne.w	80025bc <main+0x404>
		  case MODE_NORMAL:

			  break;

		  case MODE_SIT_TEST:
			  test_datas.altitude	= rocket_flight_datas.alt_sea_level;
 8002460:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <main+0x3b0>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a27      	ldr	r2, [pc, #156]	@ (8002504 <main+0x34c>)
 8002466:	6013      	str	r3, [r2, #0]
			  test_datas.pressure 	= bme_sensor_s.datas.pressure;
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <main+0x334>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <main+0x34c>)
 800246e:	6053      	str	r3, [r2, #4]
			  test_datas.accel_x 	= rocket_flight_datas.accel_x * TO_SI;
 8002470:	4b3d      	ldr	r3, [pc, #244]	@ (8002568 <main+0x3b0>)
 8002472:	edd3 7a04 	vldr	s15, [r3, #16]
 8002476:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800256c <main+0x3b4>
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	4b21      	ldr	r3, [pc, #132]	@ (8002504 <main+0x34c>)
 8002480:	edc3 7a02 	vstr	s15, [r3, #8]
			  test_datas.accel_y 	= rocket_flight_datas.accel_z * TO_SI;
 8002484:	4b38      	ldr	r3, [pc, #224]	@ (8002568 <main+0x3b0>)
 8002486:	edd3 7a06 	vldr	s15, [r3, #24]
 800248a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800256c <main+0x3b4>
 800248e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002492:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <main+0x34c>)
 8002494:	edc3 7a03 	vstr	s15, [r3, #12]
			  test_datas.accel_z 	= rocket_flight_datas.accel_y * TO_SI;
 8002498:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <main+0x3b0>)
 800249a:	edd3 7a05 	vldr	s15, [r3, #20]
 800249e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800256c <main+0x3b4>
 80024a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a6:	4b17      	ldr	r3, [pc, #92]	@ (8002504 <main+0x34c>)
 80024a8:	edc3 7a04 	vstr	s15, [r3, #16]
			  test_datas.angle_x 	= rocket_flight_datas.angle_x;	//bmi_imu_s.datas.gyro_x_angle;
 80024ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002568 <main+0x3b0>)
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <main+0x34c>)
 80024b2:	6153      	str	r3, [r2, #20]
			  test_datas.angle_y 	= rocket_flight_datas.angle_y;
 80024b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002568 <main+0x3b0>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <main+0x34c>)
 80024ba:	6193      	str	r3, [r2, #24]
			  test_datas.angle_z 	= rocket_flight_datas.angle_z; //bmi_imu_s.datas.gyro_z_angle;
 80024bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <main+0x3b0>)
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <main+0x34c>)
 80024c2:	61d3      	str	r3, [r2, #28]
			  uint8_t datas_packed[36];
			  pack_datas_for_test(datas_packed, &test_datas);
 80024c4:	463b      	mov	r3, r7
 80024c6:	490f      	ldr	r1, [pc, #60]	@ (8002504 <main+0x34c>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 fef7 	bl	80042bc <pack_datas_for_test>
			  HAL_UART_Transmit(&RS232_HNDLR, datas_packed, 36, 50);
 80024ce:	4639      	mov	r1, r7
 80024d0:	2332      	movs	r3, #50	@ 0x32
 80024d2:	2224      	movs	r2, #36	@ 0x24
 80024d4:	4816      	ldr	r0, [pc, #88]	@ (8002530 <main+0x378>)
 80024d6:	f007 fa0d 	bl	80098f4 <HAL_UART_Transmit>
			  break;
 80024da:	e06f      	b.n	80025bc <main+0x404>
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	20000904 	.word	0x20000904
 80024e8:	080135e8 	.word	0x080135e8
 80024ec:	20000398 	.word	0x20000398
 80024f0:	080135f8 	.word	0x080135f8
 80024f4:	08013604 	.word	0x08013604
 80024f8:	200004ec 	.word	0x200004ec
 80024fc:	08013614 	.word	0x08013614
 8002500:	200003c4 	.word	0x200003c4
 8002504:	20000460 	.word	0x20000460
 8002508:	40024000 	.word	0x40024000
 800250c:	20000994 	.word	0x20000994
 8002510:	08013624 	.word	0x08013624
 8002514:	40020800 	.word	0x40020800
 8002518:	200006d8 	.word	0x200006d8
 800251c:	20000720 	.word	0x20000720
 8002520:	20000768 	.word	0x20000768
 8002524:	200007b0 	.word	0x200007b0
 8002528:	200007f8 	.word	0x200007f8
 800252c:	20000840 	.word	0x20000840
 8002530:	2000094c 	.word	0x2000094c
 8002534:	200006a4 	.word	0x200006a4
 8002538:	200005bb 	.word	0x200005bb
 800253c:	200005ba 	.word	0x200005ba
 8002540:	2000044d 	.word	0x2000044d
 8002544:	200005b4 	.word	0x200005b4
 8002548:	200004ac 	.word	0x200004ac
 800254c:	200005b9 	.word	0x200005b9
 8002550:	200005b5 	.word	0x200005b5
 8002554:	2000044c 	.word	0x2000044c
 8002558:	20000450 	.word	0x20000450
 800255c:	200004e8 	.word	0x200004e8
 8002560:	200005c0 	.word	0x200005c0
 8002564:	200004e4 	.word	0x200004e4
 8002568:	20000480 	.word	0x20000480
 800256c:	3c20ba1f 	.word	0x3c20ba1f

		  case MODE_SUT_TEST:
			  rocket_flight_datas.altitude	= test_datas.altitude;
 8002570:	4b4e      	ldr	r3, [pc, #312]	@ (80026ac <main+0x4f4>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a4e      	ldr	r2, [pc, #312]	@ (80026b0 <main+0x4f8>)
 8002576:	6013      	str	r3, [r2, #0]
			  rocket_flight_datas.accel_x 	= test_datas.accel_x;
 8002578:	4b4c      	ldr	r3, [pc, #304]	@ (80026ac <main+0x4f4>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a4c      	ldr	r2, [pc, #304]	@ (80026b0 <main+0x4f8>)
 800257e:	6113      	str	r3, [r2, #16]
			  rocket_flight_datas.accel_y 	= test_datas.accel_y;
 8002580:	4b4a      	ldr	r3, [pc, #296]	@ (80026ac <main+0x4f4>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a4a      	ldr	r2, [pc, #296]	@ (80026b0 <main+0x4f8>)
 8002586:	6153      	str	r3, [r2, #20]
			  rocket_flight_datas.accel_z 	= test_datas.accel_z;
 8002588:	4b48      	ldr	r3, [pc, #288]	@ (80026ac <main+0x4f4>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	4a48      	ldr	r2, [pc, #288]	@ (80026b0 <main+0x4f8>)
 800258e:	6193      	str	r3, [r2, #24]
			  rocket_flight_datas.angle_x 	= test_datas.angle_x;
 8002590:	4b46      	ldr	r3, [pc, #280]	@ (80026ac <main+0x4f4>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	4a46      	ldr	r2, [pc, #280]	@ (80026b0 <main+0x4f8>)
 8002596:	61d3      	str	r3, [r2, #28]
			  rocket_flight_datas.angle_y 	= test_datas.angle_y;
 8002598:	4b44      	ldr	r3, [pc, #272]	@ (80026ac <main+0x4f4>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	4a44      	ldr	r2, [pc, #272]	@ (80026b0 <main+0x4f8>)
 800259e:	6213      	str	r3, [r2, #32]
			  rocket_flight_datas.angle_z 	= test_datas.angle_z;
 80025a0:	4b42      	ldr	r3, [pc, #264]	@ (80026ac <main+0x4f4>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a42      	ldr	r2, [pc, #264]	@ (80026b0 <main+0x4f8>)
 80025a6:	6253      	str	r3, [r2, #36]	@ 0x24
			  is_new_test_data = 1;
 80025a8:	4b42      	ldr	r3, [pc, #264]	@ (80026b4 <main+0x4fc>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
			  //sprintf((char*)str,"test:alt = %f, acx=%f  acy=%f  acz=%f angx=%f angy=%f angz=%f", test_datas.altitude, test_datas.accel_x,  test_datas.accel_y, test_datas.accel_z, test_datas.angle_x, test_datas.angle_y, test_datas.angle_z);
			  //serial_println((char*)str, &TTL_HNDLR);
			  ukb_test_stat_update(rocket_status );
 80025ae:	4b42      	ldr	r3, [pc, #264]	@ (80026b8 <main+0x500>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 ff44 	bl	8004440 <ukb_test_stat_update>
			  break;
 80025b8:	e000      	b.n	80025bc <main+0x404>
			  break;
 80025ba:	bf00      	nop
		  }
		  is_200ms = 0;
 80025bc:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <main+0x504>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
	  }
	  if(is_10ms)// This condition works at 100Hz.
 80025c2:	4b3f      	ldr	r3, [pc, #252]	@ (80026c0 <main+0x508>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d031      	beq.n	800262e <main+0x476>
	  {
		  bme280_update(&bme_sensor_s);	// 100Hz call is enough for baro sensor.
 80025ca:	483e      	ldr	r0, [pc, #248]	@ (80026c4 <main+0x50c>)
 80025cc:	f008 ff28 	bl	800b420 <bme280_update>
		  if(working_mode == MODE_NORMAL || working_mode == MODE_SIT_TEST)
 80025d0:	4b3d      	ldr	r3, [pc, #244]	@ (80026c8 <main+0x510>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <main+0x428>
 80025d8:	4b3b      	ldr	r3, [pc, #236]	@ (80026c8 <main+0x510>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d123      	bne.n	8002628 <main+0x470>
		  {
			  rocket_flight_datas.velocity		= bme_sensor_s.datas.velocity;
 80025e0:	4b38      	ldr	r3, [pc, #224]	@ (80026c4 <main+0x50c>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a32      	ldr	r2, [pc, #200]	@ (80026b0 <main+0x4f8>)
 80025e6:	6093      	str	r3, [r2, #8]
			  rocket_flight_datas.alt_sea_level = bme_sensor_s.datas.height;
 80025e8:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <main+0x50c>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	4a30      	ldr	r2, [pc, #192]	@ (80026b0 <main+0x4f8>)
 80025ee:	6053      	str	r3, [r2, #4]
			  rocket_flight_datas.altitude 		= bme_sensor_s.datas.altitude;
 80025f0:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <main+0x50c>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	4a2e      	ldr	r2, [pc, #184]	@ (80026b0 <main+0x4f8>)
 80025f6:	6013      	str	r3, [r2, #0]
			  rocket_flight_datas.accel_x 		= bmi_imu_s.datas.acc_x;
 80025f8:	4b34      	ldr	r3, [pc, #208]	@ (80026cc <main+0x514>)
 80025fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025fc:	4a2c      	ldr	r2, [pc, #176]	@ (80026b0 <main+0x4f8>)
 80025fe:	6113      	str	r3, [r2, #16]
			  rocket_flight_datas.accel_y 		= bmi_imu_s.datas.acc_y;
 8002600:	4b32      	ldr	r3, [pc, #200]	@ (80026cc <main+0x514>)
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	4a2a      	ldr	r2, [pc, #168]	@ (80026b0 <main+0x4f8>)
 8002606:	6153      	str	r3, [r2, #20]
			  rocket_flight_datas.accel_z 		= bmi_imu_s.datas.acc_z;
 8002608:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <main+0x514>)
 800260a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260c:	4a28      	ldr	r2, [pc, #160]	@ (80026b0 <main+0x4f8>)
 800260e:	6193      	str	r3, [r2, #24]
			  rocket_flight_datas.angle_x 		= euler[0];	//bmi_imu_s.datas.gyro_x_angle;
 8002610:	4b2f      	ldr	r3, [pc, #188]	@ (80026d0 <main+0x518>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a26      	ldr	r2, [pc, #152]	@ (80026b0 <main+0x4f8>)
 8002616:	61d3      	str	r3, [r2, #28]
			  rocket_flight_datas.angle_y 		= euler[1];	//bmi_imu_s.datas.gyro_y_angle;
 8002618:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <main+0x518>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a24      	ldr	r2, [pc, #144]	@ (80026b0 <main+0x4f8>)
 800261e:	6213      	str	r3, [r2, #32]
			  rocket_flight_datas.angle_z 		= euler[2];	//bmi_imu_s.datas.gyro_z_angle;
 8002620:	4b2b      	ldr	r3, [pc, #172]	@ (80026d0 <main+0x518>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a22      	ldr	r2, [pc, #136]	@ (80026b0 <main+0x4f8>)
 8002626:	6253      	str	r3, [r2, #36]	@ 0x24
		  }
		  is_10ms = 0;
 8002628:	4b25      	ldr	r3, [pc, #148]	@ (80026c0 <main+0x508>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
	  }
	  if(is_1ms)	// This condition works at 1kHz.
 800262e:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <main+0x51c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d017      	beq.n	8002666 <main+0x4ae>
	  {
		  is_1ms = 0;
 8002636:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <main+0x51c>)
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
		  calc_power(&power_s);
 800263c:	4826      	ldr	r0, [pc, #152]	@ (80026d8 <main+0x520>)
 800263e:	f000 fa8f 	bl	8002b60 <calc_power>
		  if(working_mode == MODE_NORMAL || working_mode == MODE_SUT_TEST)
 8002642:	4b21      	ldr	r3, [pc, #132]	@ (80026c8 <main+0x510>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <main+0x49a>
 800264a:	4b1f      	ldr	r3, [pc, #124]	@ (80026c8 <main+0x510>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d109      	bne.n	8002666 <main+0x4ae>
		  {
			  rocket_status = algorithm_update(&rocket_flight_datas, working_mode);
 8002652:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <main+0x510>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	4815      	ldr	r0, [pc, #84]	@ (80026b0 <main+0x4f8>)
 800265a:	f7fe ffd1 	bl	8001600 <algorithm_update>
 800265e:	4603      	mov	r3, r0
 8002660:	461a      	mov	r2, r3
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <main+0x500>)
 8002664:	701a      	strb	r2, [r3, #0]
		  }

	  }
	  if(is_telem_timer_ok)
 8002666:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <main+0x524>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d01a      	beq.n	80026a4 <main+0x4ec>
	  {
		if(power_s.voltage > LOW_BAT)
 800266e:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <main+0x520>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8002678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	dd0a      	ble.n	8002698 <main+0x4e0>
		{
		  e22_chMode_transmit(&lora_1);
 8002682:	4817      	ldr	r0, [pc, #92]	@ (80026e0 <main+0x528>)
 8002684:	f008 fc30 	bl	800aee8 <e22_chMode_transmit>
		  send_datas(&TELEM_UART_HNDLR, packed_datas_p, 64);
 8002688:	4b16      	ldr	r3, [pc, #88]	@ (80026e4 <main+0x52c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2240      	movs	r2, #64	@ 0x40
 800268e:	4619      	mov	r1, r3
 8002690:	4815      	ldr	r0, [pc, #84]	@ (80026e8 <main+0x530>)
 8002692:	f7ff f997 	bl	80019c4 <send_datas>
 8002696:	e002      	b.n	800269e <main+0x4e6>
		}
		else
		{
		  e22_chMode_sleep(&lora_1);
 8002698:	4811      	ldr	r0, [pc, #68]	@ (80026e0 <main+0x528>)
 800269a:	f008 fbf5 	bl	800ae88 <e22_chMode_sleep>
		}
		is_telem_timer_ok = 0;
 800269e:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <main+0x524>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
	  }

	  bmi088_update(&bmi_imu_s);	// IMU sensor uses interrupts so it can be called always.
 80026a4:	4809      	ldr	r0, [pc, #36]	@ (80026cc <main+0x514>)
 80026a6:	f009 fcef 	bl	800c088 <bmi088_update>
	  if(is_dma_idle)
 80026aa:	e666      	b.n	800237a <main+0x1c2>
 80026ac:	20000460 	.word	0x20000460
 80026b0:	20000480 	.word	0x20000480
 80026b4:	200005bc 	.word	0x200005bc
 80026b8:	2000044c 	.word	0x2000044c
 80026bc:	200005b5 	.word	0x200005b5
 80026c0:	200005b6 	.word	0x200005b6
 80026c4:	20000398 	.word	0x20000398
 80026c8:	2000044d 	.word	0x2000044d
 80026cc:	200003c4 	.word	0x200003c4
 80026d0:	200005c4 	.word	0x200005c4
 80026d4:	200005b7 	.word	0x200005b7
 80026d8:	20000450 	.word	0x20000450
 80026dc:	200005b8 	.word	0x200005b8
 80026e0:	2000042c 	.word	0x2000042c
 80026e4:	200004e8 	.word	0x200004e8
 80026e8:	200008bc 	.word	0x200008bc

080026ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b094      	sub	sp, #80	@ 0x50
 80026f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026f2:	f107 031c 	add.w	r3, r7, #28
 80026f6:	2234      	movs	r2, #52	@ 0x34
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f00b f917 	bl	800d92e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002710:	2300      	movs	r3, #0
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <SystemClock_Config+0xe0>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	4a2c      	ldr	r2, [pc, #176]	@ (80027cc <SystemClock_Config+0xe0>)
 800271a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002720:	4b2a      	ldr	r3, [pc, #168]	@ (80027cc <SystemClock_Config+0xe0>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800272c:	2300      	movs	r3, #0
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <SystemClock_Config+0xe4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a26      	ldr	r2, [pc, #152]	@ (80027d0 <SystemClock_Config+0xe4>)
 8002736:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b24      	ldr	r3, [pc, #144]	@ (80027d0 <SystemClock_Config+0xe4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002748:	2306      	movs	r3, #6
 800274a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800274c:	2301      	movs	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002750:	2301      	movs	r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002754:	2310      	movs	r3, #16
 8002756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002758:	2302      	movs	r3, #2
 800275a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800275c:	2300      	movs	r3, #0
 800275e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002760:	2308      	movs	r3, #8
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002764:	23b4      	movs	r3, #180	@ 0xb4
 8002766:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002768:	2302      	movs	r3, #2
 800276a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800276c:	2302      	movs	r3, #2
 800276e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002770:	2302      	movs	r3, #2
 8002772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002774:	f107 031c 	add.w	r3, r7, #28
 8002778:	4618      	mov	r0, r3
 800277a:	f005 ff9f 	bl	80086bc <HAL_RCC_OscConfig>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002784:	f000 fabc 	bl	8002d00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002788:	f005 f8d4 	bl	8007934 <HAL_PWREx_EnableOverDrive>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002792:	f000 fab5 	bl	8002d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002796:	230f      	movs	r3, #15
 8002798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279a:	2302      	movs	r3, #2
 800279c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80027a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2105      	movs	r1, #5
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 f90d 	bl	80079d4 <HAL_RCC_ClockConfig>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80027c0:	f000 fa9e 	bl	8002d00 <Error_Handler>
  }
}
 80027c4:	bf00      	nop
 80027c6:	3750      	adds	r7, #80	@ 0x50
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000

080027d4 <bme280_begin>:

/* USER CODE BEGIN 4 */
uint8_t bme280_begin()
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	bme_sensor_s.device_config.filter = BME280_FILTER_OFF;
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <bme280_begin+0x38>)
 80027da:	2200      	movs	r2, #0
 80027dc:	719a      	strb	r2, [r3, #6]
	bme_sensor_s.device_config.mode = BME280_MODE_NORMAL;
 80027de:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <bme280_begin+0x38>)
 80027e0:	2203      	movs	r2, #3
 80027e2:	711a      	strb	r2, [r3, #4]
	bme_sensor_s.device_config.over_sampling = BME280_OS_8;
 80027e4:	4b09      	ldr	r3, [pc, #36]	@ (800280c <bme280_begin+0x38>)
 80027e6:	2204      	movs	r2, #4
 80027e8:	715a      	strb	r2, [r3, #5]
	bme_sensor_s.device_config.period = BME280_PERIOD_05;
 80027ea:	4b08      	ldr	r3, [pc, #32]	@ (800280c <bme280_begin+0x38>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	71da      	strb	r2, [r3, #7]
	bme_sensor_s.device_config.BME_I2C = &BAR_I2C_HNDLR;
 80027f0:	4b06      	ldr	r3, [pc, #24]	@ (800280c <bme280_begin+0x38>)
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <bme280_begin+0x3c>)
 80027f4:	609a      	str	r2, [r3, #8]
	bme_sensor_s.parameters = &backup_datas->bme_params; //if no backup data, write NULL
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <bme280_begin+0x40>)
 80027f8:	461a      	mov	r2, r3
 80027fa:	4b04      	ldr	r3, [pc, #16]	@ (800280c <bme280_begin+0x38>)
 80027fc:	601a      	str	r2, [r3, #0]
	return bme280_init(&bme_sensor_s);
 80027fe:	4803      	ldr	r0, [pc, #12]	@ (800280c <bme280_begin+0x38>)
 8002800:	f008 fde7 	bl	800b3d2 <bme280_init>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000398 	.word	0x20000398
 8002810:	200002f0 	.word	0x200002f0
 8002814:	40024000 	.word	0x40024000

08002818 <bmi_callback>:

void bmi_callback(bmi088_struct_t *BMI)
{
 8002818:	b5b0      	push	{r4, r5, r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	updateQuaternion(-BMI->datas.gyro_z * M_PI / 180.0, BMI->datas.gyro_x * M_PI / 180.0, -BMI->datas.gyro_y * M_PI / 180.0, BMI->datas.delta_time);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	edd3 7a08 	vldr	s15, [r3, #32]
 8002826:	eef1 7a67 	vneg.f32	s15, s15
 800282a:	ee17 3a90 	vmov	r3, s15
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd feaa 	bl	8000588 <__aeabi_f2d>
 8002834:	a330      	add	r3, pc, #192	@ (adr r3, 80028f8 <bmi_callback+0xe0>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	f7fd fefd 	bl	8000638 <__aeabi_dmul>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <bmi_callback+0xe8>)
 800284c:	f7fe f81e 	bl	800088c <__aeabi_ddiv>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	f7fe f9e6 	bl	8000c28 <__aeabi_d2f>
 800285c:	4604      	mov	r4, r0
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fe90 	bl	8000588 <__aeabi_f2d>
 8002868:	a323      	add	r3, pc, #140	@ (adr r3, 80028f8 <bmi_callback+0xe0>)
 800286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286e:	f7fd fee3 	bl	8000638 <__aeabi_dmul>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <bmi_callback+0xe8>)
 8002880:	f7fe f804 	bl	800088c <__aeabi_ddiv>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f7fe f9cc 	bl	8000c28 <__aeabi_d2f>
 8002890:	4605      	mov	r5, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	edd3 7a07 	vldr	s15, [r3, #28]
 8002898:	eef1 7a67 	vneg.f32	s15, s15
 800289c:	ee17 3a90 	vmov	r3, s15
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe71 	bl	8000588 <__aeabi_f2d>
 80028a6:	a314      	add	r3, pc, #80	@ (adr r3, 80028f8 <bmi_callback+0xe0>)
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f7fd fec4 	bl	8000638 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <bmi_callback+0xe8>)
 80028be:	f7fd ffe5 	bl	800088c <__aeabi_ddiv>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fe f9ad 	bl	8000c28 <__aeabi_d2f>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80028d6:	eef0 1a67 	vmov.f32	s3, s15
 80028da:	ee01 2a10 	vmov	s2, r2
 80028de:	ee00 5a90 	vmov	s1, r5
 80028e2:	ee00 4a10 	vmov	s0, r4
 80028e6:	f000 fa21 	bl	8002d2c <updateQuaternion>
	quaternionToEuler();
 80028ea:	f000 fb85 	bl	8002ff8 <quaternionToEuler>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	54442d18 	.word	0x54442d18
 80028fc:	400921fb 	.word	0x400921fb
 8002900:	40668000 	.word	0x40668000

08002904 <bmi088_begin>:

uint8_t bmi088_begin(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	//Acc config
	bmi_imu_s.device_config.acc_bandwith = ACC_BWP_OSR4;
 8002908:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <bmi088_begin+0x5c>)
 800290a:	2208      	movs	r2, #8
 800290c:	719a      	strb	r2, [r3, #6]
	bmi_imu_s.device_config.acc_outputDateRate = ACC_ODR_200;
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <bmi088_begin+0x5c>)
 8002910:	2209      	movs	r2, #9
 8002912:	71da      	strb	r2, [r3, #7]
	bmi_imu_s.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8002914:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <bmi088_begin+0x5c>)
 8002916:	2200      	movs	r2, #0
 8002918:	711a      	strb	r2, [r3, #4]
	bmi_imu_s.device_config.acc_range = ACC_RANGE_24G;
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <bmi088_begin+0x5c>)
 800291c:	2203      	movs	r2, #3
 800291e:	715a      	strb	r2, [r3, #5]

	// Gyro config
	bmi_imu_s.device_config.gyro_bandWidth = GYRO_BW_116;
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <bmi088_begin+0x5c>)
 8002922:	2202      	movs	r2, #2
 8002924:	725a      	strb	r2, [r3, #9]
	bmi_imu_s.device_config.gyro_range = GYRO_RANGE_2000;
 8002926:	4b0e      	ldr	r3, [pc, #56]	@ (8002960 <bmi088_begin+0x5c>)
 8002928:	2200      	movs	r2, #0
 800292a:	729a      	strb	r2, [r3, #10]
	bmi_imu_s.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <bmi088_begin+0x5c>)
 800292e:	2200      	movs	r2, #0
 8002930:	721a      	strb	r2, [r3, #8]

	//Device config
	bmi_imu_s.device_config.acc_IRQ = ACC_IRQ;
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <bmi088_begin+0x5c>)
 8002934:	2217      	movs	r2, #23
 8002936:	741a      	strb	r2, [r3, #16]
	bmi_imu_s.device_config.gyro_IRQ = GYRO_IRQ;
 8002938:	4b09      	ldr	r3, [pc, #36]	@ (8002960 <bmi088_begin+0x5c>)
 800293a:	2217      	movs	r2, #23
 800293c:	745a      	strb	r2, [r3, #17]
	bmi_imu_s.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 800293e:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <bmi088_begin+0x5c>)
 8002940:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <bmi088_begin+0x60>)
 8002942:	60da      	str	r2, [r3, #12]
	bmi_imu_s.device_config.offsets = &backup_datas->bmi_offsets;	//Offset datas stored in backup sram for saving them unwanted reset.
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <bmi088_begin+0x64>)
 8002946:	332c      	adds	r3, #44	@ 0x2c
 8002948:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <bmi088_begin+0x5c>)
 800294a:	6153      	str	r3, [r2, #20]
	bmi_imu_s.IMU_callback = bmi_callback;
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <bmi088_begin+0x5c>)
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <bmi088_begin+0x68>)
 8002950:	665a      	str	r2, [r3, #100]	@ 0x64
	return	bmi088_init(&bmi_imu_s);
 8002952:	4803      	ldr	r0, [pc, #12]	@ (8002960 <bmi088_begin+0x5c>)
 8002954:	f009 f93e 	bl	800bbd4 <bmi088_init>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	200003c4 	.word	0x200003c4
 8002964:	20000344 	.word	0x20000344
 8002968:	40024000 	.word	0x40024000
 800296c:	08002819 	.word	0x08002819

08002970 <serial_println>:

void serial_println(char* str, UART_HandleTypeDef *huart_disp)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart_disp, (uint8_t*)str, strlen(str), 50);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fd fc98 	bl	80002b0 <strlen>
 8002980:	4603      	mov	r3, r0
 8002982:	b29a      	uxth	r2, r3
 8002984:	2332      	movs	r3, #50	@ 0x32
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	6838      	ldr	r0, [r7, #0]
 800298a:	f006 ffb3 	bl	80098f4 <HAL_UART_Transmit>
	HAL_UART_Transmit(huart_disp, (uint8_t*)"\r\n", 2, 50);
 800298e:	2332      	movs	r3, #50	@ 0x32
 8002990:	2202      	movs	r2, #2
 8002992:	4904      	ldr	r1, [pc, #16]	@ (80029a4 <serial_println+0x34>)
 8002994:	6838      	ldr	r0, [r7, #0]
 8002996:	f006 ffad 	bl	80098f4 <HAL_UART_Transmit>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08013638 	.word	0x08013638

080029a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80029b2:	88fb      	ldrh	r3, [r7, #6]
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029b8:	d102      	bne.n	80029c0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&bmi_imu_s);
 80029ba:	4807      	ldr	r0, [pc, #28]	@ (80029d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80029bc:	f009 fe96 	bl	800c6ec <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == INT_GYRO_Pin)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c6:	d102      	bne.n	80029ce <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&bmi_imu_s);
 80029c8:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80029ca:	f009 fe9c 	bl	800c706 <bmi088_set_gyro_INT>
	}
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200003c4 	.word	0x200003c4

080029dc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)	// This repeats in every 1000ms
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d102      	bne.n	80029f4 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
		is_1000ms = 1;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
    }

    if (htim->Instance == TIM4)	// This repeats in every 100ms
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d102      	bne.n	8002a04 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
    	is_200ms = 1;
 80029fe:	4b2d      	ldr	r3, [pc, #180]	@ (8002ab4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
    }

    if(htim->Instance == TIM5)	// This repeats in every 10ms
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d102      	bne.n	8002a14 <HAL_TIM_PeriodElapsedCallback+0x38>
    {
		is_10ms = 1;
 8002a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    }

    if(htim->Instance == TIM6)	// This repeats in every 1ms
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a29      	ldr	r2, [pc, #164]	@ (8002ac0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d102      	bne.n	8002a24 <HAL_TIM_PeriodElapsedCallback+0x48>
    {
    	is_1ms = 1;
 8002a1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ac4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
    }

    if(htim->Instance == TIM9)	// This timer's frequency is changed by software for some purposes. Default 1Hz.
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a27      	ldr	r2, [pc, #156]	@ (8002ac8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d102      	bne.n	8002a34 <HAL_TIM_PeriodElapsedCallback+0x58>
    {
    	is_telem_timer_ok = 1;
 8002a2e:	4b27      	ldr	r3, [pc, #156]	@ (8002acc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	701a      	strb	r2, [r3, #0]
    }


	if(htim->Instance == TIM7)	// This block is for external pins lie buzzers leds.
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d130      	bne.n	8002aa0 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		if(!(--main_mos_counter))
 8002a3e:	4b25      	ldr	r3, [pc, #148]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	4a23      	ldr	r2, [pc, #140]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10e      	bne.n	8002a6e <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			HAL_GPIO_WritePin(MAIN_MOS_GPIO_Port, MAIN_MOS_Pin, GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2101      	movs	r1, #1
 8002a54:	4820      	ldr	r0, [pc, #128]	@ (8002ad8 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002a56:	f003 fead 	bl	80067b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	481f      	ldr	r0, [pc, #124]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002a60:	f003 fea8 	bl	80067b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(MAIN_LED_GPIO_Port, MAIN_LED_Pin, GPIO_PIN_SET);
 8002a64:	2201      	movs	r2, #1
 8002a66:	2108      	movs	r1, #8
 8002a68:	481d      	ldr	r0, [pc, #116]	@ (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002a6a:	f003 fea3 	bl	80067b4 <HAL_GPIO_WritePin>
		}
		if(!(--apoge_mos_counter))
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			HAL_GPIO_WritePin(APOGE_MOS_GPIO_Port, APOGE_MOS_Pin, GPIO_PIN_RESET);
 8002a80:	2200      	movs	r2, #0
 8002a82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a86:	4815      	ldr	r0, [pc, #84]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002a88:	f003 fe94 	bl	80067b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4812      	ldr	r0, [pc, #72]	@ (8002adc <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002a92:	f003 fe8f 	bl	80067b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(APOGEE_LED_GPIO_Port, APOGEE_LED_Pin, GPIO_PIN_SET);
 8002a96:	2201      	movs	r2, #1
 8002a98:	2101      	movs	r1, #1
 8002a9a:	4811      	ldr	r0, [pc, #68]	@ (8002ae0 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002a9c:	f003 fe8a 	bl	80067b4 <HAL_GPIO_WritePin>
		}
	}
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40000400 	.word	0x40000400
 8002aac:	200005b4 	.word	0x200005b4
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	200005b5 	.word	0x200005b5
 8002ab8:	40000c00 	.word	0x40000c00
 8002abc:	200005b6 	.word	0x200005b6
 8002ac0:	40001000 	.word	0x40001000
 8002ac4:	200005b7 	.word	0x200005b7
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	200005b8 	.word	0x200005b8
 8002ad0:	40001400 	.word	0x40001400
 8002ad4:	200004dc 	.word	0x200004dc
 8002ad8:	40020400 	.word	0x40020400
 8002adc:	40020800 	.word	0x40020800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	200004e0 	.word	0x200004e0

08002ae8 <main_deploy>:

void main_deploy()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOS_GPIO_Port, MAIN_MOS_Pin, GPIO_PIN_SET);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2101      	movs	r1, #1
 8002af0:	4808      	ldr	r0, [pc, #32]	@ (8002b14 <main_deploy+0x2c>)
 8002af2:	f003 fe5f 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002af6:	2201      	movs	r2, #1
 8002af8:	2101      	movs	r1, #1
 8002afa:	4807      	ldr	r0, [pc, #28]	@ (8002b18 <main_deploy+0x30>)
 8002afc:	f003 fe5a 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MAIN_LED_GPIO_Port, MAIN_LED_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2108      	movs	r1, #8
 8002b04:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <main_deploy+0x34>)
 8002b06:	f003 fe55 	bl	80067b4 <HAL_GPIO_WritePin>
	main_mos_counter = 50;
 8002b0a:	4b05      	ldr	r3, [pc, #20]	@ (8002b20 <main_deploy+0x38>)
 8002b0c:	2232      	movs	r2, #50	@ 0x32
 8002b0e:	601a      	str	r2, [r3, #0]

}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40020400 	.word	0x40020400
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	200004dc 	.word	0x200004dc

08002b24 <apoge_deploy>:
void apoge_deploy()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(APOGE_MOS_GPIO_Port, APOGE_MOS_Pin, GPIO_PIN_SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002b2e:	4809      	ldr	r0, [pc, #36]	@ (8002b54 <apoge_deploy+0x30>)
 8002b30:	f003 fe40 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002b34:	2201      	movs	r2, #1
 8002b36:	2101      	movs	r1, #1
 8002b38:	4806      	ldr	r0, [pc, #24]	@ (8002b54 <apoge_deploy+0x30>)
 8002b3a:	f003 fe3b 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(APOGEE_LED_GPIO_Port, APOGEE_LED_Pin, GPIO_PIN_RESET);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2101      	movs	r1, #1
 8002b42:	4805      	ldr	r0, [pc, #20]	@ (8002b58 <apoge_deploy+0x34>)
 8002b44:	f003 fe36 	bl	80067b4 <HAL_GPIO_WritePin>
	apoge_mos_counter = 50;
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <apoge_deploy+0x38>)
 8002b4a:	2232      	movs	r2, #50	@ 0x32
 8002b4c:	601a      	str	r2, [r3, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	200004e0 	.word	0x200004e0

08002b60 <calc_power>:

void calc_power(power_t* pow)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	ed2d 8b02 	vpush	{d8}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	if(is_power_1s == 1)
 8002b6c:	4b38      	ldr	r3, [pc, #224]	@ (8002c50 <calc_power+0xf0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d10a      	bne.n	8002b8a <calc_power+0x2a>
	{
		pow->wattage_calced= pow->wattage;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
		pow->wattage = 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	605a      	str	r2, [r3, #4]
		is_power_1s = 0;
 8002b84:	4b32      	ldr	r3, [pc, #200]	@ (8002c50 <calc_power+0xf0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
	}
		  HAL_ADC_Start(&hadc1);
 8002b8a:	4832      	ldr	r0, [pc, #200]	@ (8002c54 <calc_power+0xf4>)
 8002b8c:	f002 fa4e 	bl	800502c <HAL_ADC_Start>
		  HAL_ADC_Start(&hadc2);
 8002b90:	4831      	ldr	r0, [pc, #196]	@ (8002c58 <calc_power+0xf8>)
 8002b92:	f002 fa4b 	bl	800502c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 2);
 8002b96:	2102      	movs	r1, #2
 8002b98:	482e      	ldr	r0, [pc, #184]	@ (8002c54 <calc_power+0xf4>)
 8002b9a:	f002 fb19 	bl	80051d0 <HAL_ADC_PollForConversion>
		  HAL_ADC_PollForConversion(&hadc2, 2);
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	482d      	ldr	r0, [pc, #180]	@ (8002c58 <calc_power+0xf8>)
 8002ba2:	f002 fb15 	bl	80051d0 <HAL_ADC_PollForConversion>
		  float volt = (float)HAL_ADC_GetValue(&hadc1) * VOLT_COEF;
 8002ba6:	482b      	ldr	r0, [pc, #172]	@ (8002c54 <calc_power+0xf4>)
 8002ba8:	f002 fb9d 	bl	80052e6 <HAL_ADC_GetValue>
 8002bac:	ee07 0a90 	vmov	s15, r0
 8002bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002c5c <calc_power+0xfc>
 8002bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bbc:	edc7 7a03 	vstr	s15, [r7, #12]
		  float current = (float)HAL_ADC_GetValue(&hadc2) * CRNT_COEF;
 8002bc0:	4825      	ldr	r0, [pc, #148]	@ (8002c58 <calc_power+0xf8>)
 8002bc2:	f002 fb90 	bl	80052e6 <HAL_ADC_GetValue>
 8002bc6:	ee07 0a90 	vmov	s15, r0
 8002bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bce:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002c60 <calc_power+0x100>
 8002bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd6:	edc7 7a02 	vstr	s15, [r7, #8]
		  pow->voltage = volt + 0.05; // Offset val added.
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7fd fcd4 	bl	8000588 <__aeabi_f2d>
 8002be0:	a319      	add	r3, pc, #100	@ (adr r3, 8002c48 <calc_power+0xe8>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fb71 	bl	80002cc <__adddf3>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fe f819 	bl	8000c28 <__aeabi_d2f>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	601a      	str	r2, [r3, #0]
		  pow->wattage += pow->voltage * current * (HAL_GetTick() - pow->last_time);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c06:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002c0a:	f002 f99b 	bl	8004f44 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	edc3 7a01 	vstr	s15, [r3, #4]
		  pow->last_time = HAL_GetTick();
 8002c32:	f002 f987 	bl	8004f44 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	ecbd 8b02 	vpop	{d8}
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	9999999a 	.word	0x9999999a
 8002c4c:	3fa99999 	.word	0x3fa99999
 8002c50:	200005b9 	.word	0x200005b9
 8002c54:	20000208 	.word	0x20000208
 8002c58:	20000250 	.word	0x20000250
 8002c5c:	3b533333 	.word	0x3b533333
 8002c60:	3a533334 	.word	0x3a533334

08002c64 <lora_init>:

void lora_init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 8002c68:	4b22      	ldr	r3, [pc, #136]	@ (8002cf4 <lora_init+0x90>)
 8002c6a:	2207      	movs	r2, #7
 8002c6c:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 8002c6e:	4b21      	ldr	r3, [pc, #132]	@ (8002cf4 <lora_init+0x90>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 8002c74:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf4 <lora_init+0x90>)
 8002c76:	2206      	movs	r2, #6
 8002c78:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf4 <lora_init+0x90>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 8002c80:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <lora_init+0x90>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 8002c86:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf4 <lora_init+0x90>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <lora_init+0x90>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 8002c92:	4b18      	ldr	r3, [pc, #96]	@ (8002cf4 <lora_init+0x90>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 8002c98:	4b16      	ldr	r3, [pc, #88]	@ (8002cf4 <lora_init+0x90>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 8002c9e:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <lora_init+0x90>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 8002ca4:	4b13      	ldr	r3, [pc, #76]	@ (8002cf4 <lora_init+0x90>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 8002caa:	4b12      	ldr	r3, [pc, #72]	@ (8002cf4 <lora_init+0x90>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	35;
 8002cb0:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <lora_init+0x90>)
 8002cb2:	2223      	movs	r2, #35	@ 0x23
 8002cb4:	755a      	strb	r2, [r3, #21]

	lora_1.pins.m0_pin = RF_M0_Pin;
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf4 <lora_init+0x90>)
 8002cb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cbc:	811a      	strh	r2, [r3, #8]
	lora_1.pins.m0_pin_port = RF_M0_GPIO_Port;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf4 <lora_init+0x90>)
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf8 <lora_init+0x94>)
 8002cc2:	601a      	str	r2, [r3, #0]
	lora_1.pins.m1_pin = RF_M1_Pin;
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <lora_init+0x90>)
 8002cc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cca:	815a      	strh	r2, [r3, #10]
	lora_1.pins.m1_pin_port = RF_M1_GPIO_Port;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <lora_init+0x90>)
 8002cce:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <lora_init+0x94>)
 8002cd0:	605a      	str	r2, [r3, #4]

	e22_init(&lora_1, &TELEM_UART_HNDLR);
 8002cd2:	490a      	ldr	r1, [pc, #40]	@ (8002cfc <lora_init+0x98>)
 8002cd4:	4807      	ldr	r0, [pc, #28]	@ (8002cf4 <lora_init+0x90>)
 8002cd6:	f008 f845 	bl	800ad64 <e22_init>

	HAL_UART_DeInit(&TELEM_UART_HNDLR);
 8002cda:	4808      	ldr	r0, [pc, #32]	@ (8002cfc <lora_init+0x98>)
 8002cdc:	f006 fdd8 	bl	8009890 <HAL_UART_DeInit>
	TELEM_UART_HNDLR.Init.BaudRate = 115200;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <lora_init+0x98>)
 8002ce2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ce6:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(&TELEM_UART_HNDLR);
 8002ce8:	4804      	ldr	r0, [pc, #16]	@ (8002cfc <lora_init+0x98>)
 8002cea:	f006 fd81 	bl	80097f0 <HAL_UART_Init>
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000042c 	.word	0x2000042c
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	200008bc 	.word	0x200008bc

08002d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d04:	b672      	cpsid	i
}
 8002d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <Error_Handler+0x8>

08002d0c <quaternon_init>:

float euler[3];		//pitch roll yaw
float *saved_q;

void quaternon_init(float *backup_datas)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	saved_q = backup_datas;
 8002d14:	4a04      	ldr	r2, [pc, #16]	@ (8002d28 <quaternon_init+0x1c>)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6013      	str	r3, [r2, #0]
	quaternionSet_zero();
 8002d1a:	f000 fc25 	bl	8003568 <quaternionSet_zero>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200005d0 	.word	0x200005d0

08002d2c <updateQuaternion>:
void updateQuaternion(float gx, float gy, float gz, float dt) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d36:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d3a:	ed87 1a01 	vstr	s2, [r7, #4]
 8002d3e:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_q[1] * gx - saved_q[2] * gy - saved_q[3] * gz);
 8002d42:	4bac      	ldr	r3, [pc, #688]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3304      	adds	r3, #4
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	eeb1 7a67 	vneg.f32	s14, s15
 8002d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d58:	4ba6      	ldr	r3, [pc, #664]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3308      	adds	r3, #8
 8002d5e:	edd3 6a00 	vldr	s13, [r3]
 8002d62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	edd3 6a00 	vldr	s13, [r3]
 8002d78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float qDot2 = 0.5f * (saved_q[0] * gx + saved_q[2] * gz - saved_q[3] * gy);
 8002d90:	4b98      	ldr	r3, [pc, #608]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	ed93 7a00 	vldr	s14, [r3]
 8002d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da0:	4b94      	ldr	r3, [pc, #592]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3308      	adds	r3, #8
 8002da6:	edd3 6a00 	vldr	s13, [r3]
 8002daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db6:	4b8f      	ldr	r3, [pc, #572]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	330c      	adds	r3, #12
 8002dbc:	edd3 6a00 	vldr	s13, [r3]
 8002dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dd4:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_q[0] * gy - saved_q[1] * gz + saved_q[3] * gx);
 8002dd8:	4b86      	ldr	r3, [pc, #536]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	ed93 7a00 	vldr	s14, [r3]
 8002de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002de8:	4b82      	ldr	r3, [pc, #520]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3304      	adds	r3, #4
 8002dee:	edd3 6a00 	vldr	s13, [r3]
 8002df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dfe:	4b7d      	ldr	r3, [pc, #500]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	edd3 6a00 	vldr	s13, [r3]
 8002e08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e14:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e1c:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_q[0] * gz + saved_q[1] * gy - saved_q[2] * gx);
 8002e20:	4b74      	ldr	r3, [pc, #464]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e30:	4b70      	ldr	r3, [pc, #448]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3304      	adds	r3, #4
 8002e36:	edd3 6a00 	vldr	s13, [r3]
 8002e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e46:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	edd3 6a00 	vldr	s13, [r3]
 8002e50:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e64:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_q[0] += qDot1 * dt;
 8002e68:	4b62      	ldr	r3, [pc, #392]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	ed93 7a00 	vldr	s14, [r3]
 8002e70:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002e74:	edd7 7a00 	vldr	s15, [r7]
 8002e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e7c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e84:	edc3 7a00 	vstr	s15, [r3]
  saved_q[1] += qDot2 * dt;
 8002e88:	4b5a      	ldr	r3, [pc, #360]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	edd7 6a08 	vldr	s13, [r7, #32]
 8002e96:	edd7 7a00 	vldr	s15, [r7]
 8002e9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9e:	4b55      	ldr	r3, [pc, #340]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea8:	edc3 7a00 	vstr	s15, [r3]
  saved_q[2] += qDot3 * dt;
 8002eac:	4b51      	ldr	r3, [pc, #324]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	ed93 7a00 	vldr	s14, [r3]
 8002eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eba:	edd7 7a00 	vldr	s15, [r7]
 8002ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ecc:	edc3 7a00 	vstr	s15, [r3]
  saved_q[3] += qDot4 * dt;
 8002ed0:	4b48      	ldr	r3, [pc, #288]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	edd7 6a06 	vldr	s13, [r7, #24]
 8002ede:	edd7 7a00 	vldr	s15, [r7]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	4b43      	ldr	r3, [pc, #268]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef0:	edc3 7a00 	vstr	s15, [r3]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_q[0] * saved_q[0] + saved_q[1] * saved_q[1] + saved_q[2] * saved_q[2] + saved_q[3] * saved_q[3]);
 8002ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	ed93 7a00 	vldr	s14, [r3]
 8002efc:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	edd3 7a00 	vldr	s15, [r3]
 8002f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f08:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	edd3 6a00 	vldr	s13, [r3]
 8002f12:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3304      	adds	r3, #4
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f24:	4b33      	ldr	r3, [pc, #204]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	edd3 6a00 	vldr	s13, [r3]
 8002f2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3308      	adds	r3, #8
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f40:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	330c      	adds	r3, #12
 8002f46:	edd3 6a00 	vldr	s13, [r3]
 8002f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	330c      	adds	r3, #12
 8002f50:	edd3 7a00 	vldr	s15, [r3]
 8002f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5c:	ee17 0a90 	vmov	r0, s15
 8002f60:	f7fd fb12 	bl	8000588 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	ec43 2b10 	vmov	d0, r2, r3
 8002f6c:	f00e fce6 	bl	801193c <sqrt>
 8002f70:	ec53 2b10 	vmov	r2, r3, d0
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	f7fd fe56 	bl	8000c28 <__aeabi_d2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	617b      	str	r3, [r7, #20]
  saved_q[0] /= norm;
 8002f80:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	edd3 6a00 	vldr	s13, [r3]
 8002f88:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f94:	edc3 7a00 	vstr	s15, [r3]
  saved_q[1] /= norm;
 8002f98:	4b16      	ldr	r3, [pc, #88]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	edd3 6a00 	vldr	s13, [r3]
 8002fa2:	4b14      	ldr	r3, [pc, #80]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb0:	edc3 7a00 	vstr	s15, [r3]
  saved_q[2] /= norm;
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	edd3 6a00 	vldr	s13, [r3]
 8002fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fcc:	edc3 7a00 	vstr	s15, [r3]
  saved_q[3] /= norm;
 8002fd0:	4b08      	ldr	r3, [pc, #32]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	edd3 6a00 	vldr	s13, [r3]
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <updateQuaternion+0x2c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	330c      	adds	r3, #12
 8002fe0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe8:	edc3 7a00 	vstr	s15, [r3]
}
 8002fec:	bf00      	nop
 8002fee:	3728      	adds	r7, #40	@ 0x28
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200005d0 	.word	0x200005d0

08002ff8 <quaternionToEuler>:

void quaternionToEuler(void) {
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_q[0] * saved_q[1] + saved_q[2] * saved_q[3]), 1.0f - 2.0f * (saved_q[1] * saved_q[1] + saved_q[2] * saved_q[2])) * (180.0 / M_PI);
 8002ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	ed93 7a00 	vldr	s14, [r3]
 8003004:	4b78      	ldr	r3, [pc, #480]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3304      	adds	r3, #4
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003012:	4b75      	ldr	r3, [pc, #468]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3308      	adds	r3, #8
 8003018:	edd3 6a00 	vldr	s13, [r3]
 800301c:	4b72      	ldr	r3, [pc, #456]	@ (80031e8 <quaternionToEuler+0x1f0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	edd3 7a00 	vldr	s15, [r3]
 8003026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003032:	ee17 0a90 	vmov	r0, s15
 8003036:	f7fd faa7 	bl	8000588 <__aeabi_f2d>
 800303a:	4604      	mov	r4, r0
 800303c:	460d      	mov	r5, r1
 800303e:	4b6a      	ldr	r3, [pc, #424]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3304      	adds	r3, #4
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	4b67      	ldr	r3, [pc, #412]	@ (80031e8 <quaternionToEuler+0x1f0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3304      	adds	r3, #4
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003056:	4b64      	ldr	r3, [pc, #400]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3308      	adds	r3, #8
 800305c:	edd3 6a00 	vldr	s13, [r3]
 8003060:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3308      	adds	r3, #8
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003072:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800307a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307e:	ee17 0a90 	vmov	r0, s15
 8003082:	f7fd fa81 	bl	8000588 <__aeabi_f2d>
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	ec43 2b11 	vmov	d1, r2, r3
 800308e:	ec45 4b10 	vmov	d0, r4, r5
 8003092:	f00e fbe1 	bl	8011858 <atan2>
 8003096:	ec51 0b10 	vmov	r0, r1, d0
 800309a:	a351      	add	r3, pc, #324	@ (adr r3, 80031e0 <quaternionToEuler+0x1e8>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd faca 	bl	8000638 <__aeabi_dmul>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4610      	mov	r0, r2
 80030aa:	4619      	mov	r1, r3
 80030ac:	f7fd fdbc 	bl	8000c28 <__aeabi_d2f>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4a4e      	ldr	r2, [pc, #312]	@ (80031ec <quaternionToEuler+0x1f4>)
 80030b4:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_q[0] * saved_q[2] - saved_q[3] * saved_q[1])) * (180.0 / M_PI);
 80030b6:	4b4c      	ldr	r3, [pc, #304]	@ (80031e8 <quaternionToEuler+0x1f0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	ed93 7a00 	vldr	s14, [r3]
 80030be:	4b4a      	ldr	r3, [pc, #296]	@ (80031e8 <quaternionToEuler+0x1f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3308      	adds	r3, #8
 80030c4:	edd3 7a00 	vldr	s15, [r3]
 80030c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030cc:	4b46      	ldr	r3, [pc, #280]	@ (80031e8 <quaternionToEuler+0x1f0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	edd3 6a00 	vldr	s13, [r3]
 80030d6:	4b44      	ldr	r3, [pc, #272]	@ (80031e8 <quaternionToEuler+0x1f0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	3304      	adds	r3, #4
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030ec:	ee17 0a90 	vmov	r0, s15
 80030f0:	f7fd fa4a 	bl	8000588 <__aeabi_f2d>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	ec43 2b10 	vmov	d0, r2, r3
 80030fc:	f00e fb78 	bl	80117f0 <asin>
 8003100:	ec51 0b10 	vmov	r0, r1, d0
 8003104:	a336      	add	r3, pc, #216	@ (adr r3, 80031e0 <quaternionToEuler+0x1e8>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f7fd fa95 	bl	8000638 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f7fd fd87 	bl	8000c28 <__aeabi_d2f>
 800311a:	4603      	mov	r3, r0
 800311c:	4a33      	ldr	r2, [pc, #204]	@ (80031ec <quaternionToEuler+0x1f4>)
 800311e:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_q[0] * saved_q[3] + saved_q[1] * saved_q[2]), 1.0f - 2.0f * (saved_q[2] * saved_q[2] + saved_q[3] * saved_q[3])) * (180.0 / M_PI);
 8003120:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	ed93 7a00 	vldr	s14, [r3]
 8003128:	4b2f      	ldr	r3, [pc, #188]	@ (80031e8 <quaternionToEuler+0x1f0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003136:	4b2c      	ldr	r3, [pc, #176]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3304      	adds	r3, #4
 800313c:	edd3 6a00 	vldr	s13, [r3]
 8003140:	4b29      	ldr	r3, [pc, #164]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3308      	adds	r3, #8
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800314e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003152:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003156:	ee17 0a90 	vmov	r0, s15
 800315a:	f7fd fa15 	bl	8000588 <__aeabi_f2d>
 800315e:	4604      	mov	r4, r0
 8003160:	460d      	mov	r5, r1
 8003162:	4b21      	ldr	r3, [pc, #132]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3308      	adds	r3, #8
 8003168:	ed93 7a00 	vldr	s14, [r3]
 800316c:	4b1e      	ldr	r3, [pc, #120]	@ (80031e8 <quaternionToEuler+0x1f0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3308      	adds	r3, #8
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317a:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <quaternionToEuler+0x1f0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	edd3 6a00 	vldr	s13, [r3]
 8003184:	4b18      	ldr	r3, [pc, #96]	@ (80031e8 <quaternionToEuler+0x1f0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	330c      	adds	r3, #12
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800319a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	ee17 0a90 	vmov	r0, s15
 80031a6:	f7fd f9ef 	bl	8000588 <__aeabi_f2d>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	ec43 2b11 	vmov	d1, r2, r3
 80031b2:	ec45 4b10 	vmov	d0, r4, r5
 80031b6:	f00e fb4f 	bl	8011858 <atan2>
 80031ba:	ec51 0b10 	vmov	r0, r1, d0
 80031be:	a308      	add	r3, pc, #32	@ (adr r3, 80031e0 <quaternionToEuler+0x1e8>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd fa38 	bl	8000638 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4610      	mov	r0, r2
 80031ce:	4619      	mov	r1, r3
 80031d0:	f7fd fd2a 	bl	8000c28 <__aeabi_d2f>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <quaternionToEuler+0x1f4>)
 80031d8:	6093      	str	r3, [r2, #8]
}
 80031da:	bf00      	nop
 80031dc:	bdb0      	pop	{r4, r5, r7, pc}
 80031de:	bf00      	nop
 80031e0:	1a63c1f8 	.word	0x1a63c1f8
 80031e4:	404ca5dc 	.word	0x404ca5dc
 80031e8:	200005d0 	.word	0x200005d0
 80031ec:	200005c4 	.word	0x200005c4

080031f0 <quaternionToTheta>:


float quaternionToTheta(){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af00      	add	r7, sp, #0

	float theta = 0.0;
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24

	float r13 = 2 * saved_q[1] * saved_q[3] + 2 * saved_q[2] * saved_q[0];
 80031fc:	4b60      	ldr	r3, [pc, #384]	@ (8003380 <quaternionToTheta+0x190>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3304      	adds	r3, #4
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800320a:	4b5d      	ldr	r3, [pc, #372]	@ (8003380 <quaternionToTheta+0x190>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003218:	4b59      	ldr	r3, [pc, #356]	@ (8003380 <quaternionToTheta+0x190>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3308      	adds	r3, #8
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003226:	4b56      	ldr	r3, [pc, #344]	@ (8003380 <quaternionToTheta+0x190>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003236:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_q[2] * saved_q[3] - 2 * saved_q[1] * saved_q[0];
 800323a:	4b51      	ldr	r3, [pc, #324]	@ (8003380 <quaternionToTheta+0x190>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3308      	adds	r3, #8
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003248:	4b4d      	ldr	r3, [pc, #308]	@ (8003380 <quaternionToTheta+0x190>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	edd3 7a00 	vldr	s15, [r3]
 8003252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003256:	4b4a      	ldr	r3, [pc, #296]	@ (8003380 <quaternionToTheta+0x190>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3304      	adds	r3, #4
 800325c:	edd3 7a00 	vldr	s15, [r3]
 8003260:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003264:	4b46      	ldr	r3, [pc, #280]	@ (8003380 <quaternionToTheta+0x190>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003274:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_q[1] * saved_q[1] - 2 * saved_q[2] * saved_q[2];
 8003278:	4b41      	ldr	r3, [pc, #260]	@ (8003380 <quaternionToTheta+0x190>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3304      	adds	r3, #4
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003286:	4b3e      	ldr	r3, [pc, #248]	@ (8003380 <quaternionToTheta+0x190>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3304      	adds	r3, #4
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003298:	ee37 7a67 	vsub.f32	s14, s14, s15
 800329c:	4b38      	ldr	r3, [pc, #224]	@ (8003380 <quaternionToTheta+0x190>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3308      	adds	r3, #8
 80032a2:	edd3 7a00 	vldr	s15, [r3]
 80032a6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80032aa:	4b35      	ldr	r3, [pc, #212]	@ (8003380 <quaternionToTheta+0x190>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3308      	adds	r3, #8
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032bc:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 80032d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80032d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80032dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f0:	ee17 0a90 	vmov	r0, s15
 80032f4:	f7fd f948 	bl	8000588 <__aeabi_f2d>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	ec43 2b10 	vmov	d0, r2, r3
 8003300:	f00e fb1c 	bl	801193c <sqrt>
 8003304:	ec53 2b10 	vmov	r2, r3, d0
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f7fd fc8c 	bl	8000c28 <__aeabi_d2f>
 8003310:	4603      	mov	r3, r0
 8003312:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 8003314:	ed97 7a02 	vldr	s14, [r7, #8]
 8003318:	edd7 7a01 	vldr	s15, [r7, #4]
 800331c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003320:	ee16 0a90 	vmov	r0, s13
 8003324:	f7fd f930 	bl	8000588 <__aeabi_f2d>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	ec43 2b10 	vmov	d0, r2, r3
 8003330:	f00e fa2a 	bl	8011788 <acos>
 8003334:	ec51 0b10 	vmov	r0, r1, d0
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <quaternionToTheta+0x194>)
 800333e:	f7fd f97b 	bl	8000638 <__aeabi_dmul>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4610      	mov	r0, r2
 8003348:	4619      	mov	r1, r3
 800334a:	a30b      	add	r3, pc, #44	@ (adr r3, 8003378 <quaternionToTheta+0x188>)
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f7fd fa9c 	bl	800088c <__aeabi_ddiv>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	f7fd fc64 	bl	8000c28 <__aeabi_d2f>
 8003360:	4603      	mov	r3, r0
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
	return theta;
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	ee07 3a90 	vmov	s15, r3
}
 800336a:	eeb0 0a67 	vmov.f32	s0, s15
 800336e:	3728      	adds	r7, #40	@ 0x28
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	f3af 8000 	nop.w
 8003378:	51eb851f 	.word	0x51eb851f
 800337c:	40091eb8 	.word	0x40091eb8
 8003380:	200005d0 	.word	0x200005d0
 8003384:	40668000 	.word	0x40668000

08003388 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion(float acc_x, float acc_y, float acc_z) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b08e      	sub	sp, #56	@ 0x38
 800338c:	af00      	add	r7, sp, #0
 800338e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003392:	edc7 0a02 	vstr	s1, [r7, #8]
 8003396:	ed87 1a01 	vstr	s2, [r7, #4]

    float norm = sqrt(acc_z * acc_z + acc_x * acc_x + acc_y * acc_y);
 800339a:	edd7 7a01 	vldr	s15, [r7, #4]
 800339e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80033a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80033a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80033b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ba:	ee17 0a90 	vmov	r0, s15
 80033be:	f7fd f8e3 	bl	8000588 <__aeabi_f2d>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	ec43 2b10 	vmov	d0, r2, r3
 80033ca:	f00e fab7 	bl	801193c <sqrt>
 80033ce:	ec53 2b10 	vmov	r2, r3, d0
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7fd fc27 	bl	8000c28 <__aeabi_d2f>
 80033da:	4603      	mov	r3, r0
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
    float accel_temp[3];

    accel_temp[0] = acc_x;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	627b      	str	r3, [r7, #36]	@ 0x24
    accel_temp[1] = acc_y;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    accel_temp[2] = acc_z;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    accel_temp[0] /= norm;
 80033ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80033ee:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80033f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    accel_temp[1] /= norm;
 80033fa:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80033fe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003406:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 800340a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 800340e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003416:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f8b3 	bl	8000588 <__aeabi_f2d>
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	f04f 0000 	mov.w	r0, #0
 800342a:	494c      	ldr	r1, [pc, #304]	@ (800355c <getInitialQuaternion+0x1d4>)
 800342c:	f7fc ff4c 	bl	80002c8 <__aeabi_dsub>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	ec43 2b17 	vmov	d7, r2, r3
 8003438:	eeb0 0a47 	vmov.f32	s0, s14
 800343c:	eef0 0a67 	vmov.f32	s1, s15
 8003440:	f00e fa7c 	bl	801193c <sqrt>
 8003444:	ec51 0b10 	vmov	r0, r1, d0
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	4b44      	ldr	r3, [pc, #272]	@ (8003560 <getInitialQuaternion+0x1d8>)
 800344e:	f7fd f8f3 	bl	8000638 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4610      	mov	r0, r2
 8003458:	4619      	mov	r1, r3
 800345a:	f7fd fbe5 	bl	8000c28 <__aeabi_d2f>
 800345e:	4603      	mov	r3, r0
 8003460:	617b      	str	r3, [r7, #20]
    float k = 0.5 / q_temp[0];
 8003462:	ed97 7a05 	vldr	s14, [r7, #20]
 8003466:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800346a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_temp[1] = accel_temp[0] * k * 0.5;
 8003472:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003476:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003486:	edc7 7a06 	vstr	s15, [r7, #24]
    q_temp[2] = accel_temp[2] * k * 0.5;
 800348a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800348e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800349a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
    q_temp[3] = 0.0;
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	623b      	str	r3, [r7, #32]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80034a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80034ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80034b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80034b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80034bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80034cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d4:	edd7 6a08 	vldr	s13, [r7, #32]
 80034d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80034dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e4:	ee17 0a90 	vmov	r0, s15
 80034e8:	f7fd f84e 	bl	8000588 <__aeabi_f2d>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	ec43 2b10 	vmov	d0, r2, r3
 80034f4:	f00e fa22 	bl	801193c <sqrt>
 80034f8:	ec53 2b10 	vmov	r2, r3, d0
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	f7fd fb92 	bl	8000c28 <__aeabi_d2f>
 8003504:	4603      	mov	r3, r0
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34

    saved_q[0] = q_temp[0] / norm;
 8003508:	edd7 6a05 	vldr	s13, [r7, #20]
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <getInitialQuaternion+0x1dc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003518:	edc3 7a00 	vstr	s15, [r3]
    saved_q[1] = q_temp[1] / norm;
 800351c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003520:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <getInitialQuaternion+0x1dc>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3304      	adds	r3, #4
 8003526:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800352a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800352e:	edc3 7a00 	vstr	s15, [r3]
    saved_q[2] = q_temp[2] / norm;
 8003532:	edd7 6a07 	vldr	s13, [r7, #28]
 8003536:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <getInitialQuaternion+0x1dc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003544:	edc3 7a00 	vstr	s15, [r3]
    saved_q[3] = 0.0f;
 8003548:	4b06      	ldr	r3, [pc, #24]	@ (8003564 <getInitialQuaternion+0x1dc>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	3738      	adds	r7, #56	@ 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	3ff00000 	.word	0x3ff00000
 8003560:	3fe00000 	.word	0x3fe00000
 8003564:	200005d0 	.word	0x200005d0

08003568 <quaternionSet_zero>:

void quaternionSet_zero(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
	saved_q[0] = 1.0;
 800356c:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <quaternionSet_zero+0x3c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003574:	601a      	str	r2, [r3, #0]
	saved_q[1] = 0.0;
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <quaternionSet_zero+0x3c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3304      	adds	r3, #4
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
	saved_q[2] = 0.0;
 8003582:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <quaternionSet_zero+0x3c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3308      	adds	r3, #8
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
	saved_q[3] = 0.0;
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <quaternionSet_zero+0x3c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	200005d0 	.word	0x200005d0

080035a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	@ (80035ec <MX_RTC_Init+0x44>)
 80035ae:	4a10      	ldr	r2, [pc, #64]	@ (80035f0 <MX_RTC_Init+0x48>)
 80035b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <MX_RTC_Init+0x44>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	@ (80035ec <MX_RTC_Init+0x44>)
 80035ba:	227f      	movs	r2, #127	@ 0x7f
 80035bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80035be:	4b0b      	ldr	r3, [pc, #44]	@ (80035ec <MX_RTC_Init+0x44>)
 80035c0:	22ff      	movs	r2, #255	@ 0xff
 80035c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035c4:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <MX_RTC_Init+0x44>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035ca:	4b08      	ldr	r3, [pc, #32]	@ (80035ec <MX_RTC_Init+0x44>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035d0:	4b06      	ldr	r3, [pc, #24]	@ (80035ec <MX_RTC_Init+0x44>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035d6:	4805      	ldr	r0, [pc, #20]	@ (80035ec <MX_RTC_Init+0x44>)
 80035d8:	f005 fb0e 	bl	8008bf8 <HAL_RTC_Init>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80035e2:	f7ff fb8d 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200005d4 	.word	0x200005d4
 80035f0:	40002800 	.word	0x40002800

080035f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b09a      	sub	sp, #104	@ 0x68
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	225c      	movs	r2, #92	@ 0x5c
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f00a f992 	bl	800d92e <memset>
  if(rtcHandle->Instance==RTC)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a0c      	ldr	r2, [pc, #48]	@ (8003640 <HAL_RTC_MspInit+0x4c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d111      	bne.n	8003638 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003614:	2320      	movs	r3, #32
 8003616:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800361c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4618      	mov	r0, r3
 8003624:	f004 faf0 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800362e:	f7ff fb67 	bl	8002d00 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003632:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <HAL_RTC_MspInit+0x50>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003638:	bf00      	nop
 800363a:	3768      	adds	r7, #104	@ 0x68
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40002800 	.word	0x40002800
 8003644:	42470e3c 	.word	0x42470e3c

08003648 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <MX_SPI1_Init+0x64>)
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <MX_SPI1_Init+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003658:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_SPI1_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <MX_SPI1_Init+0x64>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003678:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <MX_SPI1_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <MX_SPI1_Init+0x64>)
 800368e:	2200      	movs	r2, #0
 8003690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <MX_SPI1_Init+0x64>)
 8003694:	220a      	movs	r2, #10
 8003696:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003698:	4804      	ldr	r0, [pc, #16]	@ (80036ac <MX_SPI1_Init+0x64>)
 800369a:	f005 fbb1 	bl	8008e00 <HAL_SPI_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036a4:	f7ff fb2c 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	200005f4 	.word	0x200005f4
 80036b0:	40013000 	.word	0x40013000

080036b4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80036b8:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036ba:	4a18      	ldr	r2, [pc, #96]	@ (800371c <MX_SPI3_Init+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80036be:	4b16      	ldr	r3, [pc, #88]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80036c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80036c6:	4b14      	ldr	r3, [pc, #80]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036d2:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f8:	4b07      	ldr	r3, [pc, #28]	@ (8003718 <MX_SPI3_Init+0x64>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80036fe:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <MX_SPI3_Init+0x64>)
 8003700:	220a      	movs	r2, #10
 8003702:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003704:	4804      	ldr	r0, [pc, #16]	@ (8003718 <MX_SPI3_Init+0x64>)
 8003706:	f005 fb7b 	bl	8008e00 <HAL_SPI_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003710:	f7ff faf6 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003714:	bf00      	nop
 8003716:	bd80      	pop	{r7, pc}
 8003718:	2000064c 	.word	0x2000064c
 800371c:	40003c00 	.word	0x40003c00

08003720 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08c      	sub	sp, #48	@ 0x30
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a32      	ldr	r2, [pc, #200]	@ (8003808 <HAL_SPI_MspInit+0xe8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d12c      	bne.n	800379c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	4b31      	ldr	r3, [pc, #196]	@ (800380c <HAL_SPI_MspInit+0xec>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a30      	ldr	r2, [pc, #192]	@ (800380c <HAL_SPI_MspInit+0xec>)
 800374c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b2e      	ldr	r3, [pc, #184]	@ (800380c <HAL_SPI_MspInit+0xec>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	4b2a      	ldr	r3, [pc, #168]	@ (800380c <HAL_SPI_MspInit+0xec>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a29      	ldr	r2, [pc, #164]	@ (800380c <HAL_SPI_MspInit+0xec>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b27      	ldr	r3, [pc, #156]	@ (800380c <HAL_SPI_MspInit+0xec>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800377a:	23e0      	movs	r3, #224	@ 0xe0
 800377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377e:	2302      	movs	r3, #2
 8003780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003786:	2303      	movs	r3, #3
 8003788:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800378a:	2305      	movs	r3, #5
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378e:	f107 031c 	add.w	r3, r7, #28
 8003792:	4619      	mov	r1, r3
 8003794:	481e      	ldr	r0, [pc, #120]	@ (8003810 <HAL_SPI_MspInit+0xf0>)
 8003796:	f002 fd85 	bl	80062a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800379a:	e030      	b.n	80037fe <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003814 <HAL_SPI_MspInit+0xf4>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d12b      	bne.n	80037fe <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	4b18      	ldr	r3, [pc, #96]	@ (800380c <HAL_SPI_MspInit+0xec>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	4a17      	ldr	r2, [pc, #92]	@ (800380c <HAL_SPI_MspInit+0xec>)
 80037b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b6:	4b15      	ldr	r3, [pc, #84]	@ (800380c <HAL_SPI_MspInit+0xec>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	4b11      	ldr	r3, [pc, #68]	@ (800380c <HAL_SPI_MspInit+0xec>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	4a10      	ldr	r2, [pc, #64]	@ (800380c <HAL_SPI_MspInit+0xec>)
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037d2:	4b0e      	ldr	r3, [pc, #56]	@ (800380c <HAL_SPI_MspInit+0xec>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80037de:	2338      	movs	r3, #56	@ 0x38
 80037e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ea:	2303      	movs	r3, #3
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037ee:	2306      	movs	r3, #6
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f2:	f107 031c 	add.w	r3, r7, #28
 80037f6:	4619      	mov	r1, r3
 80037f8:	4807      	ldr	r0, [pc, #28]	@ (8003818 <HAL_SPI_MspInit+0xf8>)
 80037fa:	f002 fd53 	bl	80062a4 <HAL_GPIO_Init>
}
 80037fe:	bf00      	nop
 8003800:	3730      	adds	r7, #48	@ 0x30
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40013000 	.word	0x40013000
 800380c:	40023800 	.word	0x40023800
 8003810:	40020000 	.word	0x40020000
 8003814:	40003c00 	.word	0x40003c00
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <HAL_MspInit+0x4c>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	4a0f      	ldr	r2, [pc, #60]	@ (8003868 <HAL_MspInit+0x4c>)
 800382c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003830:	6453      	str	r3, [r2, #68]	@ 0x44
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <HAL_MspInit+0x4c>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_MspInit+0x4c>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	4a08      	ldr	r2, [pc, #32]	@ (8003868 <HAL_MspInit+0x4c>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384c:	6413      	str	r3, [r2, #64]	@ 0x40
 800384e:	4b06      	ldr	r3, [pc, #24]	@ (8003868 <HAL_MspInit+0x4c>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003870:	bf00      	nop
 8003872:	e7fd      	b.n	8003870 <NMI_Handler+0x4>

08003874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003878:	bf00      	nop
 800387a:	e7fd      	b.n	8003878 <HardFault_Handler+0x4>

0800387c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <MemManage_Handler+0x4>

08003884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003888:	bf00      	nop
 800388a:	e7fd      	b.n	8003888 <BusFault_Handler+0x4>

0800388c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003890:	bf00      	nop
 8003892:	e7fd      	b.n	8003890 <UsageFault_Handler+0x4>

08003894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80038a6:	bf00      	nop
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038c2:	f001 fb2b 	bl	8004f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80038d0:	4802      	ldr	r0, [pc, #8]	@ (80038dc <DMA1_Stream1_IRQHandler+0x10>)
 80038d2:	f002 fa7d 	bl	8005dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	200009dc 	.word	0x200009dc

080038e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 80038e4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038e8:	f002 ff7e 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 80038ec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80038f0:	f002 ff7a 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80038fc:	4802      	ldr	r0, [pc, #8]	@ (8003908 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80038fe:	f005 fbc7 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003902:	bf00      	nop
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000840 	.word	0x20000840

0800390c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003910:	4802      	ldr	r0, [pc, #8]	@ (800391c <TIM3_IRQHandler+0x10>)
 8003912:	f005 fbbd 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200006d8 	.word	0x200006d8

08003920 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003924:	4802      	ldr	r0, [pc, #8]	@ (8003930 <TIM4_IRQHandler+0x10>)
 8003926:	f005 fbb3 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000720 	.word	0x20000720

08003934 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&RS232_HNDLR, UART_FLAG_IDLE))
 800393a:	4b0f      	ldr	r3, [pc, #60]	@ (8003978 <USART3_IRQHandler+0x44>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b10      	cmp	r3, #16
 8003946:	d110      	bne.n	800396a <USART3_IRQHandler+0x36>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&RS232_HNDLR);
 8003948:	2300      	movs	r3, #0
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <USART3_IRQHandler+0x44>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <USART3_IRQHandler+0x44>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
		HAL_UART_DMAStop(&RS232_HNDLR);
 800395e:	4806      	ldr	r0, [pc, #24]	@ (8003978 <USART3_IRQHandler+0x44>)
 8003960:	f006 f878 	bl	8009a54 <HAL_UART_DMAStop>
		is_dma_idle = 1;
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <USART3_IRQHandler+0x48>)
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800396a:	4803      	ldr	r0, [pc, #12]	@ (8003978 <USART3_IRQHandler+0x44>)
 800396c:	f006 f8f2 	bl	8009b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	2000094c 	.word	0x2000094c
 800397c:	200005bb 	.word	0x200005bb

08003980 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <TIM5_IRQHandler+0x10>)
 8003986:	f005 fb83 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000768 	.word	0x20000768

08003994 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003998:	4802      	ldr	r0, [pc, #8]	@ (80039a4 <UART4_IRQHandler+0x10>)
 800399a:	f006 f8db 	bl	8009b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200008bc 	.word	0x200008bc

080039a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <TIM6_DAC_IRQHandler+0x10>)
 80039ae:	f005 fb6f 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200007b0 	.word	0x200007b0

080039bc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <TIM7_IRQHandler+0x10>)
 80039c2:	f005 fb65 	bl	8009090 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200007f8 	.word	0x200007f8

080039d0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <DMA2_Stream1_IRQHandler+0x10>)
 80039d6:	f002 f9fb 	bl	8005dd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000a3c 	.word	0x20000a3c

080039e4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80039e8:	4802      	ldr	r0, [pc, #8]	@ (80039f4 <USART6_IRQHandler+0x10>)
 80039ea:	f006 f8b3 	bl	8009b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000994 	.word	0x20000994

080039f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return 1;
 80039fc:	2301      	movs	r3, #1
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <_kill>:

int _kill(int pid, int sig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a12:	f00a f805 	bl	800da20 <__errno>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2216      	movs	r2, #22
 8003a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_exit>:

void _exit (int status)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff ffe7 	bl	8003a08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a3a:	bf00      	nop
 8003a3c:	e7fd      	b.n	8003a3a <_exit+0x12>

08003a3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e00a      	b.n	8003a66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a50:	f3af 8000 	nop.w
 8003a54:	4601      	mov	r1, r0
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	60ba      	str	r2, [r7, #8]
 8003a5c:	b2ca      	uxtb	r2, r1
 8003a5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	3301      	adds	r3, #1
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	dbf0      	blt.n	8003a50 <_read+0x12>
  }

  return len;
 8003a6e:	687b      	ldr	r3, [r7, #4]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e009      	b.n	8003a9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	60ba      	str	r2, [r7, #8]
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	dbf1      	blt.n	8003a8a <_write+0x12>
  }
  return len;
 8003aa6:	687b      	ldr	r3, [r7, #4]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <_close>:

int _close(int file)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ad8:	605a      	str	r2, [r3, #4]
  return 0;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_isatty>:

int _isatty(int file)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003af0:	2301      	movs	r3, #1
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	60f8      	str	r0, [r7, #12]
 8003b06:	60b9      	str	r1, [r7, #8]
 8003b08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b20:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <_sbrk+0x5c>)
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <_sbrk+0x60>)
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b2c:	4b13      	ldr	r3, [pc, #76]	@ (8003b7c <_sbrk+0x64>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <_sbrk+0x64>)
 8003b36:	4a12      	ldr	r2, [pc, #72]	@ (8003b80 <_sbrk+0x68>)
 8003b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b3a:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <_sbrk+0x64>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d207      	bcs.n	8003b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b48:	f009 ff6a 	bl	800da20 <__errno>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	220c      	movs	r2, #12
 8003b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b56:	e009      	b.n	8003b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b58:	4b08      	ldr	r3, [pc, #32]	@ (8003b7c <_sbrk+0x64>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <_sbrk+0x64>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <_sbrk+0x64>)
 8003b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20020000 	.word	0x20020000
 8003b78:	00000400 	.word	0x00000400
 8003b7c:	200006d4 	.word	0x200006d4
 8003b80:	20001ca8 	.word	0x20001ca8

08003b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b88:	4b06      	ldr	r3, [pc, #24]	@ (8003ba4 <SystemInit+0x20>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ba4 <SystemInit+0x20>)
 8003b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	e000ed00 	.word	0xe000ed00

08003ba8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bae:	f107 0308 	add.w	r3, r7, #8
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c40 <MX_TIM3_Init+0x98>)
 8003bc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 8003bca:	4b1c      	ldr	r3, [pc, #112]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003bcc:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003bd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003bd8:	4b18      	ldr	r3, [pc, #96]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003bda:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003bde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003be0:	4b16      	ldr	r3, [pc, #88]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be6:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003bec:	4813      	ldr	r0, [pc, #76]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003bee:	f005 f990 	bl	8008f12 <HAL_TIM_Base_Init>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003bf8:	f7ff f882 	bl	8002d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c02:	f107 0308 	add.w	r3, r7, #8
 8003c06:	4619      	mov	r1, r3
 8003c08:	480c      	ldr	r0, [pc, #48]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003c0a:	f005 fb31 	bl	8009270 <HAL_TIM_ConfigClockSource>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003c14:	f7ff f874 	bl	8002d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c20:	463b      	mov	r3, r7
 8003c22:	4619      	mov	r1, r3
 8003c24:	4805      	ldr	r0, [pc, #20]	@ (8003c3c <MX_TIM3_Init+0x94>)
 8003c26:	f005 fd53 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c30:	f7ff f866 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200006d8 	.word	0x200006d8
 8003c40:	40000400 	.word	0x40000400

08003c44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c4a:	f107 0308 	add.w	r3, r7, #8
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c58:	463b      	mov	r3, r7
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c60:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c62:	4a1e      	ldr	r2, [pc, #120]	@ (8003cdc <MX_TIM4_Init+0x98>)
 8003c64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8999;
 8003c66:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c68:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003c6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8003c74:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c76:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003c7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7c:	4b16      	ldr	r3, [pc, #88]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c88:	4813      	ldr	r0, [pc, #76]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003c8a:	f005 f942 	bl	8008f12 <HAL_TIM_Base_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003c94:	f7ff f834 	bl	8002d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c9e:	f107 0308 	add.w	r3, r7, #8
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	480c      	ldr	r0, [pc, #48]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003ca6:	f005 fae3 	bl	8009270 <HAL_TIM_ConfigClockSource>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003cb0:	f7ff f826 	bl	8002d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cbc:	463b      	mov	r3, r7
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4805      	ldr	r0, [pc, #20]	@ (8003cd8 <MX_TIM4_Init+0x94>)
 8003cc2:	f005 fd05 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003ccc:	f7ff f818 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003cd0:	bf00      	nop
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000720 	.word	0x20000720
 8003cdc:	40000800 	.word	0x40000800

08003ce0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003d78 <MX_TIM5_Init+0x98>)
 8003d00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8999;
 8003d02:	4b1c      	ldr	r3, [pc, #112]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d04:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003d08:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 99;
 8003d10:	4b18      	ldr	r3, [pc, #96]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d12:	2263      	movs	r2, #99	@ 0x63
 8003d14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d16:	4b17      	ldr	r3, [pc, #92]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d1c:	4b15      	ldr	r3, [pc, #84]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003d22:	4814      	ldr	r0, [pc, #80]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d24:	f005 f8f5 	bl	8008f12 <HAL_TIM_Base_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003d2e:	f7fe ffe7 	bl	8002d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003d38:	f107 0308 	add.w	r3, r7, #8
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	480d      	ldr	r0, [pc, #52]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d40:	f005 fa96 	bl	8009270 <HAL_TIM_ConfigClockSource>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003d4a:	f7fe ffd9 	bl	8002d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d56:	463b      	mov	r3, r7
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4806      	ldr	r0, [pc, #24]	@ (8003d74 <MX_TIM5_Init+0x94>)
 8003d5c:	f005 fcb8 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003d66:	f7fe ffcb 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000768 	.word	0x20000768
 8003d78:	40000c00 	.word	0x40000c00

08003d7c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d82:	463b      	mov	r3, r7
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003d8c:	4a15      	ldr	r2, [pc, #84]	@ (8003de4 <MX_TIM6_Init+0x68>)
 8003d8e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003d92:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003d96:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003da0:	2209      	movs	r2, #9
 8003da2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003daa:	480d      	ldr	r0, [pc, #52]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003dac:	f005 f8b1 	bl	8008f12 <HAL_TIM_Base_Init>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003db6:	f7fe ffa3 	bl	8002d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4806      	ldr	r0, [pc, #24]	@ (8003de0 <MX_TIM6_Init+0x64>)
 8003dc8:	f005 fc82 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003dd2:	f7fe ff95 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200007b0 	.word	0x200007b0
 8003de4:	40001000 	.word	0x40001000

08003de8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dee:	463b      	mov	r3, r7
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003df6:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003df8:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <MX_TIM7_Init+0x68>)
 8003dfa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8003dfc:	4b13      	ldr	r3, [pc, #76]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003dfe:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003e02:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e04:	4b11      	ldr	r3, [pc, #68]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003e0a:	4b10      	ldr	r3, [pc, #64]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003e0c:	2263      	movs	r2, #99	@ 0x63
 8003e0e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e10:	4b0e      	ldr	r3, [pc, #56]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003e16:	480d      	ldr	r0, [pc, #52]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003e18:	f005 f87b 	bl	8008f12 <HAL_TIM_Base_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003e22:	f7fe ff6d 	bl	8002d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e26:	2300      	movs	r3, #0
 8003e28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003e2e:	463b      	mov	r3, r7
 8003e30:	4619      	mov	r1, r3
 8003e32:	4806      	ldr	r0, [pc, #24]	@ (8003e4c <MX_TIM7_Init+0x64>)
 8003e34:	f005 fc4c 	bl	80096d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003e3e:	f7fe ff5f 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200007f8 	.word	0x200007f8
 8003e50:	40001400 	.word	0x40001400

08003e54 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e68:	4a16      	ldr	r2, [pc, #88]	@ (8003ec4 <MX_TIM9_Init+0x70>)
 8003e6a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 17999;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e6e:	f244 624f 	movw	r2, #17999	@ 0x464f
 8003e72:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e74:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003e7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003e80:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e88:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e8a:	2280      	movs	r2, #128	@ 0x80
 8003e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003e8e:	480c      	ldr	r0, [pc, #48]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003e90:	f005 f83f 	bl	8008f12 <HAL_TIM_Base_Init>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8003e9a:	f7fe ff31 	bl	8002d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4805      	ldr	r0, [pc, #20]	@ (8003ec0 <MX_TIM9_Init+0x6c>)
 8003eaa:	f005 f9e1 	bl	8009270 <HAL_TIM_ConfigClockSource>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003eb4:	f7fe ff24 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000840 	.word	0x20000840
 8003ec4:	40014000 	.word	0x40014000

08003ec8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a54      	ldr	r2, [pc, #336]	@ (8004028 <HAL_TIM_Base_MspInit+0x160>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d116      	bne.n	8003f08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	4b53      	ldr	r3, [pc, #332]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	4a52      	ldr	r2, [pc, #328]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003ee4:	f043 0302 	orr.w	r3, r3, #2
 8003ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eea:	4b50      	ldr	r3, [pc, #320]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	69fb      	ldr	r3, [r7, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2100      	movs	r1, #0
 8003efa:	201d      	movs	r0, #29
 8003efc:	f001 fd2d 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f00:	201d      	movs	r0, #29
 8003f02:	f001 fd46 	bl	8005992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003f06:	e08a      	b.n	800401e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a48      	ldr	r2, [pc, #288]	@ (8004030 <HAL_TIM_Base_MspInit+0x168>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d116      	bne.n	8003f40 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	4b45      	ldr	r3, [pc, #276]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	4a44      	ldr	r2, [pc, #272]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f22:	4b42      	ldr	r3, [pc, #264]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	201e      	movs	r0, #30
 8003f34:	f001 fd11 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f38:	201e      	movs	r0, #30
 8003f3a:	f001 fd2a 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 8003f3e:	e06e      	b.n	800401e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a3b      	ldr	r2, [pc, #236]	@ (8004034 <HAL_TIM_Base_MspInit+0x16c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d116      	bne.n	8003f78 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	4b37      	ldr	r3, [pc, #220]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	4a36      	ldr	r2, [pc, #216]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5a:	4b34      	ldr	r3, [pc, #208]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	2032      	movs	r0, #50	@ 0x32
 8003f6c:	f001 fcf5 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003f70:	2032      	movs	r0, #50	@ 0x32
 8003f72:	f001 fd0e 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 8003f76:	e052      	b.n	800401e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM6)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8004038 <HAL_TIM_Base_MspInit+0x170>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d116      	bne.n	8003fb0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	4b29      	ldr	r3, [pc, #164]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	4a28      	ldr	r2, [pc, #160]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f8c:	f043 0310 	orr.w	r3, r3, #16
 8003f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f92:	4b26      	ldr	r3, [pc, #152]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2036      	movs	r0, #54	@ 0x36
 8003fa4:	f001 fcd9 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fa8:	2036      	movs	r0, #54	@ 0x36
 8003faa:	f001 fcf2 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 8003fae:	e036      	b.n	800401e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM7)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a21      	ldr	r2, [pc, #132]	@ (800403c <HAL_TIM_Base_MspInit+0x174>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d116      	bne.n	8003fe8 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003fc4:	f043 0320 	orr.w	r3, r3, #32
 8003fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fca:	4b18      	ldr	r3, [pc, #96]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2100      	movs	r1, #0
 8003fda:	2037      	movs	r0, #55	@ 0x37
 8003fdc:	f001 fcbd 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003fe0:	2037      	movs	r0, #55	@ 0x37
 8003fe2:	f001 fcd6 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 8003fe6:	e01a      	b.n	800401e <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <HAL_TIM_Base_MspInit+0x178>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d115      	bne.n	800401e <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	4a0c      	ldr	r2, [pc, #48]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004000:	6453      	str	r3, [r2, #68]	@ 0x44
 8004002:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <HAL_TIM_Base_MspInit+0x164>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2100      	movs	r1, #0
 8004012:	2018      	movs	r0, #24
 8004014:	f001 fca1 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004018:	2018      	movs	r0, #24
 800401a:	f001 fcba 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 800401e:	bf00      	nop
 8004020:	3720      	adds	r7, #32
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40000400 	.word	0x40000400
 800402c:	40023800 	.word	0x40023800
 8004030:	40000800 	.word	0x40000800
 8004034:	40000c00 	.word	0x40000c00
 8004038:	40001000 	.word	0x40001000
 800403c:	40001400 	.word	0x40001400
 8004040:	40014000 	.word	0x40014000

08004044 <ukb_test_init>:
  ukb_test_s.angle_X  =
  ukb_test_s.angle_Y  =
  ukb_test_s.angle_Z  =
 */
void ukb_test_init(UKB_test_t *UKB_datas)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	ukb_s = UKB_datas;
 800404c:	4a05      	ldr	r2, [pc, #20]	@ (8004064 <ukb_test_init+0x20>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
	status_data.data16 = 0;
 8004052:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <ukb_test_init+0x24>)
 8004054:	2200      	movs	r2, #0
 8004056:	801a      	strh	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	2000088c 	.word	0x2000088c
 8004068:	20000890 	.word	0x20000890

0800406c <process_received_datas>:

void process_received_datas(uint8_t *data)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]

	memcpy(packet, data, 36);
 8004074:	2224      	movs	r2, #36	@ 0x24
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4824      	ldr	r0, [pc, #144]	@ (800410c <process_received_datas+0xa0>)
 800407a:	f009 fcfe 	bl	800da7a <memcpy>
	packet[36] = '\0';
 800407e:	4b23      	ldr	r3, [pc, #140]	@ (800410c <process_received_datas+0xa0>)
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if(mode == MODE_NORMAL)
 8004086:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <process_received_datas+0xa4>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11f      	bne.n	80040ce <process_received_datas+0x62>
	{
		if(!memcmp(packet, sut_start, 5))
 800408e:	2205      	movs	r2, #5
 8004090:	4920      	ldr	r1, [pc, #128]	@ (8004114 <process_received_datas+0xa8>)
 8004092:	481e      	ldr	r0, [pc, #120]	@ (800410c <process_received_datas+0xa0>)
 8004094:	f009 fc3b 	bl	800d90e <memcmp>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <process_received_datas+0x42>
		{
			serial_println("sut start", &TTL_HNDLR);
 800409e:	491e      	ldr	r1, [pc, #120]	@ (8004118 <process_received_datas+0xac>)
 80040a0:	481e      	ldr	r0, [pc, #120]	@ (800411c <process_received_datas+0xb0>)
 80040a2:	f7fe fc65 	bl	8002970 <serial_println>
			mode = MODE_SUT_TEST;
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <process_received_datas+0xa4>)
 80040a8:	2202      	movs	r2, #2
 80040aa:	701a      	strb	r2, [r3, #0]

			}

		}
	}
}
 80040ac:	e02a      	b.n	8004104 <process_received_datas+0x98>
		else if(!memcmp(packet, sit_start, 5))
 80040ae:	2205      	movs	r2, #5
 80040b0:	491b      	ldr	r1, [pc, #108]	@ (8004120 <process_received_datas+0xb4>)
 80040b2:	4816      	ldr	r0, [pc, #88]	@ (800410c <process_received_datas+0xa0>)
 80040b4:	f009 fc2b 	bl	800d90e <memcmp>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d122      	bne.n	8004104 <process_received_datas+0x98>
			serial_println("sit start", &TTL_HNDLR);
 80040be:	4916      	ldr	r1, [pc, #88]	@ (8004118 <process_received_datas+0xac>)
 80040c0:	4818      	ldr	r0, [pc, #96]	@ (8004124 <process_received_datas+0xb8>)
 80040c2:	f7fe fc55 	bl	8002970 <serial_println>
			mode = MODE_SIT_TEST;
 80040c6:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <process_received_datas+0xa4>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
}
 80040cc:	e01a      	b.n	8004104 <process_received_datas+0x98>
		if(!memcmp(packet, test_stop, 5))
 80040ce:	2205      	movs	r2, #5
 80040d0:	4915      	ldr	r1, [pc, #84]	@ (8004128 <process_received_datas+0xbc>)
 80040d2:	480e      	ldr	r0, [pc, #56]	@ (800410c <process_received_datas+0xa0>)
 80040d4:	f009 fc1b 	bl	800d90e <memcmp>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10c      	bne.n	80040f8 <process_received_datas+0x8c>
			serial_println("test stop", &TTL_HNDLR);
 80040de:	490e      	ldr	r1, [pc, #56]	@ (8004118 <process_received_datas+0xac>)
 80040e0:	4812      	ldr	r0, [pc, #72]	@ (800412c <process_received_datas+0xc0>)
 80040e2:	f7fe fc45 	bl	8002970 <serial_println>
			mode = MODE_NORMAL;
 80040e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <process_received_datas+0xa4>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
			reset_algorithm_status();
 80040ec:	f7fd fa7c 	bl	80015e8 <reset_algorithm_status>
			status_data.data16 = 0;
 80040f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004130 <process_received_datas+0xc4>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	801a      	strh	r2, [r3, #0]
}
 80040f6:	e005      	b.n	8004104 <process_received_datas+0x98>
			if(!unpack_datas_for_test(packet, ukb_s))
 80040f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004134 <process_received_datas+0xc8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4619      	mov	r1, r3
 80040fe:	4803      	ldr	r0, [pc, #12]	@ (800410c <process_received_datas+0xa0>)
 8004100:	f000 f81a 	bl	8004138 <unpack_datas_for_test>
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000894 	.word	0x20000894
 8004110:	20000888 	.word	0x20000888
 8004114:	2000000c 	.word	0x2000000c
 8004118:	20000904 	.word	0x20000904
 800411c:	0801363c 	.word	0x0801363c
 8004120:	20000004 	.word	0x20000004
 8004124:	08013648 	.word	0x08013648
 8004128:	20000014 	.word	0x20000014
 800412c:	08013654 	.word	0x08013654
 8004130:	20000890 	.word	0x20000890
 8004134:	2000088c 	.word	0x2000088c

08004138 <unpack_datas_for_test>:

int unpack_datas_for_test(uint8_t *packed_datas, UKB_test_t *ukb_s)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  union float_to_UINT8_converter var;
  if(packed_datas[0] == 0xAB && packed_datas[34] == 0x0D && packed_datas[35] == 0x0A && calc_checksum(packed_datas, 33) == packed_datas[33])
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2bab      	cmp	r3, #171	@ 0xab
 8004148:	f040 80b1 	bne.w	80042ae <unpack_datas_for_test+0x176>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3322      	adds	r3, #34	@ 0x22
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b0d      	cmp	r3, #13
 8004154:	f040 80ab 	bne.w	80042ae <unpack_datas_for_test+0x176>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	3323      	adds	r3, #35	@ 0x23
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b0a      	cmp	r3, #10
 8004160:	f040 80a5 	bne.w	80042ae <unpack_datas_for_test+0x176>
 8004164:	2121      	movs	r1, #33	@ 0x21
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f9a2 	bl	80044b0 <calc_checksum>
 800416c:	4603      	mov	r3, r0
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3321      	adds	r3, #33	@ 0x21
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	f040 8099 	bne.w	80042ae <unpack_datas_for_test+0x176>
  {
    var.array[arr_0] = packed_datas[1];
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[2];
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	789b      	ldrb	r3, [r3, #2]
 8004186:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[3];
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	78db      	ldrb	r3, [r3, #3]
 800418c:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[4];
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	791b      	ldrb	r3, [r3, #4]
 8004192:	733b      	strb	r3, [r7, #12]
    ukb_s->altitude = var.num;
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	601a      	str	r2, [r3, #0]

    var.array[arr_0] = packed_datas[5];
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	795b      	ldrb	r3, [r3, #5]
 800419e:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[6];
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	799b      	ldrb	r3, [r3, #6]
 80041a4:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[7];
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	79db      	ldrb	r3, [r3, #7]
 80041aa:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[8];
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7a1b      	ldrb	r3, [r3, #8]
 80041b0:	733b      	strb	r3, [r7, #12]
    ukb_s->pressure = var.num;
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	605a      	str	r2, [r3, #4]

    var.array[arr_0] = packed_datas[9];
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7a5b      	ldrb	r3, [r3, #9]
 80041bc:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[10];
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	7a9b      	ldrb	r3, [r3, #10]
 80041c2:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[11];
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7adb      	ldrb	r3, [r3, #11]
 80041c8:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[12];
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7b1b      	ldrb	r3, [r3, #12]
 80041ce:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_x = var.num;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	609a      	str	r2, [r3, #8]
    ukb_s->accel_x *= TO_MG;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80041dc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80042b8 <unpack_datas_for_test+0x180>
 80041e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	edc3 7a02 	vstr	s15, [r3, #8]

    var.array[arr_0] = packed_datas[13];
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7b5b      	ldrb	r3, [r3, #13]
 80041ee:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[14];
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7b9b      	ldrb	r3, [r3, #14]
 80041f4:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[15];
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	7bdb      	ldrb	r3, [r3, #15]
 80041fa:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[16];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7c1b      	ldrb	r3, [r3, #16]
 8004200:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_y = var.num;
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	60da      	str	r2, [r3, #12]
    ukb_s->accel_y *= TO_MG;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	edd3 7a03 	vldr	s15, [r3, #12]
 800420e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80042b8 <unpack_datas_for_test+0x180>
 8004212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	edc3 7a03 	vstr	s15, [r3, #12]

    var.array[arr_0] = packed_datas[17];
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	7c5b      	ldrb	r3, [r3, #17]
 8004220:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[18];
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	7c9b      	ldrb	r3, [r3, #18]
 8004226:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[19];
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7cdb      	ldrb	r3, [r3, #19]
 800422c:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[20];
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7d1b      	ldrb	r3, [r3, #20]
 8004232:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_z = var.num;
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	611a      	str	r2, [r3, #16]
    ukb_s->accel_z *= TO_MG;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004240:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80042b8 <unpack_datas_for_test+0x180>
 8004244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	edc3 7a04 	vstr	s15, [r3, #16]

    var.array[arr_0] = packed_datas[21];
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7d5b      	ldrb	r3, [r3, #21]
 8004252:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[22];
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	7d9b      	ldrb	r3, [r3, #22]
 8004258:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[23];
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7ddb      	ldrb	r3, [r3, #23]
 800425e:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[24];
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7e1b      	ldrb	r3, [r3, #24]
 8004264:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_x = var.num;
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	615a      	str	r2, [r3, #20]

    var.array[arr_0] = packed_datas[25];
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	7e5b      	ldrb	r3, [r3, #25]
 8004270:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[26];
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7e9b      	ldrb	r3, [r3, #26]
 8004276:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[27];
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7edb      	ldrb	r3, [r3, #27]
 800427c:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[28];
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	7f1b      	ldrb	r3, [r3, #28]
 8004282:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_y = var.num;
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	619a      	str	r2, [r3, #24]

    var.array[arr_0] = packed_datas[29];
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7f5b      	ldrb	r3, [r3, #29]
 800428e:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[30];
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7f9b      	ldrb	r3, [r3, #30]
 8004294:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[31];
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	7fdb      	ldrb	r3, [r3, #31]
 800429a:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[32];
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a2:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_z = var.num;
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	61da      	str	r2, [r3, #28]

    return 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <unpack_datas_for_test+0x178>
  }
  return 1;
 80042ae:	2301      	movs	r3, #1
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	42cbe148 	.word	0x42cbe148

080042bc <pack_datas_for_test>:

void pack_datas_for_test(uint8_t *packed_datas, UKB_test_t *ukb_s)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  union float_to_UINT8_converter var;
  packed_datas[0] = 0xAB;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	22ab      	movs	r2, #171	@ 0xab
 80042ca:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->altitude;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
  packed_datas[1] = var.array[arr_0];
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3301      	adds	r3, #1
 80042d6:	7bfa      	ldrb	r2, [r7, #15]
 80042d8:	701a      	strb	r2, [r3, #0]
  packed_datas[2] = var.array[arr_1];
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3302      	adds	r3, #2
 80042de:	7bba      	ldrb	r2, [r7, #14]
 80042e0:	701a      	strb	r2, [r3, #0]
  packed_datas[3] = var.array[arr_2];
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3303      	adds	r3, #3
 80042e6:	7b7a      	ldrb	r2, [r7, #13]
 80042e8:	701a      	strb	r2, [r3, #0]
  packed_datas[4] = var.array[arr_3];
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3304      	adds	r3, #4
 80042ee:	7b3a      	ldrb	r2, [r7, #12]
 80042f0:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->pressure;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]
  packed_datas[5] = var.array[arr_0];
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3305      	adds	r3, #5
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	701a      	strb	r2, [r3, #0]
  packed_datas[6] = var.array[arr_1];
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3306      	adds	r3, #6
 8004304:	7bba      	ldrb	r2, [r7, #14]
 8004306:	701a      	strb	r2, [r3, #0]
  packed_datas[7] = var.array[arr_2];
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3307      	adds	r3, #7
 800430c:	7b7a      	ldrb	r2, [r7, #13]
 800430e:	701a      	strb	r2, [r3, #0]
  packed_datas[8] = var.array[arr_3];
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3308      	adds	r3, #8
 8004314:	7b3a      	ldrb	r2, [r7, #12]
 8004316:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_x;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	60fb      	str	r3, [r7, #12]
  packed_datas[9] = var.array[arr_0];
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3309      	adds	r3, #9
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	701a      	strb	r2, [r3, #0]
  packed_datas[10] = var.array[arr_1];
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	330a      	adds	r3, #10
 800432a:	7bba      	ldrb	r2, [r7, #14]
 800432c:	701a      	strb	r2, [r3, #0]
  packed_datas[11] = var.array[arr_2];
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	330b      	adds	r3, #11
 8004332:	7b7a      	ldrb	r2, [r7, #13]
 8004334:	701a      	strb	r2, [r3, #0]
  packed_datas[12] = var.array[arr_3];
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	330c      	adds	r3, #12
 800433a:	7b3a      	ldrb	r2, [r7, #12]
 800433c:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_y;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	60fb      	str	r3, [r7, #12]
  packed_datas[13] = var.array[arr_0];
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	330d      	adds	r3, #13
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	701a      	strb	r2, [r3, #0]
  packed_datas[14] = var.array[arr_1];
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	330e      	adds	r3, #14
 8004350:	7bba      	ldrb	r2, [r7, #14]
 8004352:	701a      	strb	r2, [r3, #0]
  packed_datas[15] = var.array[arr_2];
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	330f      	adds	r3, #15
 8004358:	7b7a      	ldrb	r2, [r7, #13]
 800435a:	701a      	strb	r2, [r3, #0]
  packed_datas[16] = var.array[arr_3];
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	7b3a      	ldrb	r2, [r7, #12]
 8004362:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_z;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	60fb      	str	r3, [r7, #12]
  packed_datas[17] = var.array[arr_0];
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3311      	adds	r3, #17
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	701a      	strb	r2, [r3, #0]
  packed_datas[18] = var.array[arr_1];
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3312      	adds	r3, #18
 8004376:	7bba      	ldrb	r2, [r7, #14]
 8004378:	701a      	strb	r2, [r3, #0]
  packed_datas[19] = var.array[arr_2];
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3313      	adds	r3, #19
 800437e:	7b7a      	ldrb	r2, [r7, #13]
 8004380:	701a      	strb	r2, [r3, #0]
  packed_datas[20] = var.array[arr_3];
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3314      	adds	r3, #20
 8004386:	7b3a      	ldrb	r2, [r7, #12]
 8004388:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_x;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	60fb      	str	r3, [r7, #12]
  packed_datas[21] = var.array[arr_0];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3315      	adds	r3, #21
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	701a      	strb	r2, [r3, #0]
  packed_datas[22] = var.array[arr_1];
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3316      	adds	r3, #22
 800439c:	7bba      	ldrb	r2, [r7, #14]
 800439e:	701a      	strb	r2, [r3, #0]
  packed_datas[23] = var.array[arr_2];
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3317      	adds	r3, #23
 80043a4:	7b7a      	ldrb	r2, [r7, #13]
 80043a6:	701a      	strb	r2, [r3, #0]
  packed_datas[24] = var.array[arr_3];
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3318      	adds	r3, #24
 80043ac:	7b3a      	ldrb	r2, [r7, #12]
 80043ae:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_y;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	60fb      	str	r3, [r7, #12]
  packed_datas[25] = var.array[arr_0];
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3319      	adds	r3, #25
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	701a      	strb	r2, [r3, #0]
  packed_datas[26] = var.array[arr_1];
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	331a      	adds	r3, #26
 80043c2:	7bba      	ldrb	r2, [r7, #14]
 80043c4:	701a      	strb	r2, [r3, #0]
  packed_datas[27] = var.array[arr_2];
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	331b      	adds	r3, #27
 80043ca:	7b7a      	ldrb	r2, [r7, #13]
 80043cc:	701a      	strb	r2, [r3, #0]
  packed_datas[28] = var.array[arr_3];
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	331c      	adds	r3, #28
 80043d2:	7b3a      	ldrb	r2, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_z;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]
  packed_datas[29] = var.array[arr_0];
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	331d      	adds	r3, #29
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	701a      	strb	r2, [r3, #0]
  packed_datas[30] = var.array[arr_1];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	331e      	adds	r3, #30
 80043e8:	7bba      	ldrb	r2, [r7, #14]
 80043ea:	701a      	strb	r2, [r3, #0]
  packed_datas[31] = var.array[arr_2];
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	331f      	adds	r3, #31
 80043f0:	7b7a      	ldrb	r2, [r7, #13]
 80043f2:	701a      	strb	r2, [r3, #0]
  packed_datas[32] = var.array[arr_3];
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3320      	adds	r3, #32
 80043f8:	7b3a      	ldrb	r2, [r7, #12]
 80043fa:	701a      	strb	r2, [r3, #0]

  packed_datas[33] = calc_checksum(packed_datas, 33);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f103 0421 	add.w	r4, r3, #33	@ 0x21
 8004402:	2121      	movs	r1, #33	@ 0x21
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f853 	bl	80044b0 <calc_checksum>
 800440a:	4603      	mov	r3, r0
 800440c:	7023      	strb	r3, [r4, #0]

  packed_datas[34] = 0x0D;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3322      	adds	r3, #34	@ 0x22
 8004412:	220d      	movs	r2, #13
 8004414:	701a      	strb	r2, [r3, #0]
  packed_datas[35] = 0x0A;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3323      	adds	r3, #35	@ 0x23
 800441a:	220a      	movs	r2, #10
 800441c:	701a      	strb	r2, [r3, #0]
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bd90      	pop	{r4, r7, pc}
	...

08004428 <get_test_mode>:

working_mode_e get_test_mode()
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	return mode;
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <get_test_mode+0x14>)
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000888 	.word	0x20000888

08004440 <ukb_test_stat_update>:
	STAT_TOUCH_DOWN		=	(uint8_t)0x08,
	STAT_P1_NO_P2_OK	=	(uint8_t)0x09,
 */

void ukb_test_stat_update(flight_states_e status)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	71fb      	strb	r3, [r7, #7]

	status_data.data16 = ((1 << (status)) - 1) | status;
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	2201      	movs	r2, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	b21a      	sxth	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	b21b      	sxth	r3, r3
 800445e:	4313      	orrs	r3, r2
 8004460:	b21b      	sxth	r3, r3
 8004462:	b29a      	uxth	r2, r3
 8004464:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <ukb_test_stat_update+0x68>)
 8004466:	801a      	strh	r2, [r3, #0]
	uint8_t data[7];

	data[0] = 0xaa;
 8004468:	23aa      	movs	r3, #170	@ 0xaa
 800446a:	723b      	strb	r3, [r7, #8]
	data[1] = status_data.data8[0];
 800446c:	4b0e      	ldr	r3, [pc, #56]	@ (80044a8 <ukb_test_stat_update+0x68>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	727b      	strb	r3, [r7, #9]
	data[2] = status_data.data8[1];
 8004472:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <ukb_test_stat_update+0x68>)
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	72bb      	strb	r3, [r7, #10]
	data[3] = calc_checksum(data, 3);
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	2103      	movs	r1, #3
 800447e:	4618      	mov	r0, r3
 8004480:	f000 f816 	bl	80044b0 <calc_checksum>
 8004484:	4603      	mov	r3, r0
 8004486:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x0d;
 8004488:	230d      	movs	r3, #13
 800448a:	733b      	strb	r3, [r7, #12]
	data[5] = 0x0a;
 800448c:	230a      	movs	r3, #10
 800448e:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&RS232_HNDLR, data, 6, 30);
 8004490:	f107 0108 	add.w	r1, r7, #8
 8004494:	231e      	movs	r3, #30
 8004496:	2206      	movs	r2, #6
 8004498:	4804      	ldr	r0, [pc, #16]	@ (80044ac <ukb_test_stat_update+0x6c>)
 800449a:	f005 fa2b 	bl	80098f4 <HAL_UART_Transmit>
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000890 	.word	0x20000890
 80044ac:	2000094c 	.word	0x2000094c

080044b0 <calc_checksum>:
uint8_t calc_checksum(uint8_t *packed_datas, uint16_t len)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
  uint32_t sum = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < len; i++)
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
 80044c4:	e00a      	b.n	80044dc <calc_checksum+0x2c>
  {
    sum += packed_datas[i];
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < len; i++)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	3301      	adds	r3, #1
 80044da:	60bb      	str	r3, [r7, #8]
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	dbf0      	blt.n	80044c6 <calc_checksum+0x16>
  }
  return (uint8_t)(sum % 256);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	b2db      	uxtb	r3, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80044f8:	4b11      	ldr	r3, [pc, #68]	@ (8004540 <MX_UART4_Init+0x4c>)
 80044fa:	4a12      	ldr	r2, [pc, #72]	@ (8004544 <MX_UART4_Init+0x50>)
 80044fc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80044fe:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <MX_UART4_Init+0x4c>)
 8004500:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004504:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004506:	4b0e      	ldr	r3, [pc, #56]	@ (8004540 <MX_UART4_Init+0x4c>)
 8004508:	2200      	movs	r2, #0
 800450a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800450c:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <MX_UART4_Init+0x4c>)
 800450e:	2200      	movs	r2, #0
 8004510:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <MX_UART4_Init+0x4c>)
 8004514:	2200      	movs	r2, #0
 8004516:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004518:	4b09      	ldr	r3, [pc, #36]	@ (8004540 <MX_UART4_Init+0x4c>)
 800451a:	220c      	movs	r2, #12
 800451c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800451e:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <MX_UART4_Init+0x4c>)
 8004520:	2200      	movs	r2, #0
 8004522:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004524:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <MX_UART4_Init+0x4c>)
 8004526:	2200      	movs	r2, #0
 8004528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800452a:	4805      	ldr	r0, [pc, #20]	@ (8004540 <MX_UART4_Init+0x4c>)
 800452c:	f005 f960 	bl	80097f0 <HAL_UART_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8004536:	f7fe fbe3 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200008bc 	.word	0x200008bc
 8004544:	40004c00 	.word	0x40004c00

08004548 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <MX_USART1_UART_Init+0x50>)
 8004550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 8004554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800455a:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 800455c:	2200      	movs	r2, #0
 800455e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004560:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 8004562:	2200      	movs	r2, #0
 8004564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800456c:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 800456e:	220c      	movs	r2, #12
 8004570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 8004574:	2200      	movs	r2, #0
 8004576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004578:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 800457a:	2200      	movs	r2, #0
 800457c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800457e:	4805      	ldr	r0, [pc, #20]	@ (8004594 <MX_USART1_UART_Init+0x4c>)
 8004580:	f005 f936 	bl	80097f0 <HAL_UART_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800458a:	f7fe fbb9 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000904 	.word	0x20000904
 8004598:	40011000 	.word	0x40011000

0800459c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045a0:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045a2:	4a12      	ldr	r2, [pc, #72]	@ (80045ec <MX_USART3_UART_Init+0x50>)
 80045a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80045a6:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80045ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045ae:	4b0e      	ldr	r3, [pc, #56]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045c0:	4b09      	ldr	r3, [pc, #36]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045c2:	220c      	movs	r2, #12
 80045c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045c6:	4b08      	ldr	r3, [pc, #32]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045d2:	4805      	ldr	r0, [pc, #20]	@ (80045e8 <MX_USART3_UART_Init+0x4c>)
 80045d4:	f005 f90c 	bl	80097f0 <HAL_UART_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80045de:	f7fe fb8f 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	2000094c 	.word	0x2000094c
 80045ec:	40004800 	.word	0x40004800

080045f0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80045f4:	4b11      	ldr	r3, [pc, #68]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 80045f6:	4a12      	ldr	r2, [pc, #72]	@ (8004640 <MX_USART6_UART_Init+0x50>)
 80045f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80045fa:	4b10      	ldr	r3, [pc, #64]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 80045fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004600:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004602:	4b0e      	ldr	r3, [pc, #56]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 8004604:	2200      	movs	r2, #0
 8004606:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004608:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 8004610:	2200      	movs	r2, #0
 8004612:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004614:	4b09      	ldr	r3, [pc, #36]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 8004616:	220c      	movs	r2, #12
 8004618:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 800461c:	2200      	movs	r2, #0
 800461e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004620:	4b06      	ldr	r3, [pc, #24]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 8004622:	2200      	movs	r2, #0
 8004624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004626:	4805      	ldr	r0, [pc, #20]	@ (800463c <MX_USART6_UART_Init+0x4c>)
 8004628:	f005 f8e2 	bl	80097f0 <HAL_UART_Init>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004632:	f7fe fb65 	bl	8002d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	20000994 	.word	0x20000994
 8004640:	40011400 	.word	0x40011400

08004644 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	@ 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800464c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a79      	ldr	r2, [pc, #484]	@ (8004848 <HAL_UART_MspInit+0x204>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d135      	bne.n	80046d2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800466a:	4b78      	ldr	r3, [pc, #480]	@ (800484c <HAL_UART_MspInit+0x208>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	4a77      	ldr	r2, [pc, #476]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004670:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004674:	6413      	str	r3, [r2, #64]	@ 0x40
 8004676:	4b75      	ldr	r3, [pc, #468]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	@ 0x24
 8004686:	4b71      	ldr	r3, [pc, #452]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	4a70      	ldr	r2, [pc, #448]	@ (800484c <HAL_UART_MspInit+0x208>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6313      	str	r3, [r2, #48]	@ 0x30
 8004692:	4b6e      	ldr	r3, [pc, #440]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800469e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80046a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a4:	2302      	movs	r3, #2
 80046a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ac:	2303      	movs	r3, #3
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80046b0:	2308      	movs	r3, #8
 80046b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046b8:	4619      	mov	r1, r3
 80046ba:	4865      	ldr	r0, [pc, #404]	@ (8004850 <HAL_UART_MspInit+0x20c>)
 80046bc:	f001 fdf2 	bl	80062a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2100      	movs	r1, #0
 80046c4:	2034      	movs	r0, #52	@ 0x34
 80046c6:	f001 f948 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80046ca:	2034      	movs	r0, #52	@ 0x34
 80046cc:	f001 f961 	bl	8005992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80046d0:	e131      	b.n	8004936 <HAL_UART_MspInit+0x2f2>
  else if(uartHandle->Instance==USART1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a5f      	ldr	r2, [pc, #380]	@ (8004854 <HAL_UART_MspInit+0x210>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d12c      	bne.n	8004736 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80046dc:	2300      	movs	r3, #0
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	4b5a      	ldr	r3, [pc, #360]	@ (800484c <HAL_UART_MspInit+0x208>)
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	4a59      	ldr	r2, [pc, #356]	@ (800484c <HAL_UART_MspInit+0x208>)
 80046e6:	f043 0310 	orr.w	r3, r3, #16
 80046ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80046ec:	4b57      	ldr	r3, [pc, #348]	@ (800484c <HAL_UART_MspInit+0x208>)
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	f003 0310 	and.w	r3, r3, #16
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	4b53      	ldr	r3, [pc, #332]	@ (800484c <HAL_UART_MspInit+0x208>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	4a52      	ldr	r2, [pc, #328]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004702:	f043 0302 	orr.w	r3, r3, #2
 8004706:	6313      	str	r3, [r2, #48]	@ 0x30
 8004708:	4b50      	ldr	r3, [pc, #320]	@ (800484c <HAL_UART_MspInit+0x208>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004714:	23c0      	movs	r3, #192	@ 0xc0
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004718:	2302      	movs	r3, #2
 800471a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004720:	2303      	movs	r3, #3
 8004722:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004724:	2307      	movs	r3, #7
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800472c:	4619      	mov	r1, r3
 800472e:	484a      	ldr	r0, [pc, #296]	@ (8004858 <HAL_UART_MspInit+0x214>)
 8004730:	f001 fdb8 	bl	80062a4 <HAL_GPIO_Init>
}
 8004734:	e0ff      	b.n	8004936 <HAL_UART_MspInit+0x2f2>
  else if(uartHandle->Instance==USART3)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a48      	ldr	r2, [pc, #288]	@ (800485c <HAL_UART_MspInit+0x218>)
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 8093 	bne.w	8004868 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	4a40      	ldr	r2, [pc, #256]	@ (800484c <HAL_UART_MspInit+0x208>)
 800474c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004750:	6413      	str	r3, [r2, #64]	@ 0x40
 8004752:	4b3e      	ldr	r3, [pc, #248]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800475a:	61bb      	str	r3, [r7, #24]
 800475c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	4b3a      	ldr	r3, [pc, #232]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004766:	4a39      	ldr	r2, [pc, #228]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	6313      	str	r3, [r2, #48]	@ 0x30
 800476e:	4b37      	ldr	r3, [pc, #220]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	4b33      	ldr	r3, [pc, #204]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	4a32      	ldr	r2, [pc, #200]	@ (800484c <HAL_UART_MspInit+0x208>)
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	6313      	str	r3, [r2, #48]	@ 0x30
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <HAL_UART_MspInit+0x208>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004796:	2320      	movs	r3, #32
 8004798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047a6:	2307      	movs	r3, #7
 80047a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047ae:	4619      	mov	r1, r3
 80047b0:	4827      	ldr	r0, [pc, #156]	@ (8004850 <HAL_UART_MspInit+0x20c>)
 80047b2:	f001 fd77 	bl	80062a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c4:	2303      	movs	r3, #3
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80047c8:	2307      	movs	r3, #7
 80047ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80047d0:	4619      	mov	r1, r3
 80047d2:	4821      	ldr	r0, [pc, #132]	@ (8004858 <HAL_UART_MspInit+0x214>)
 80047d4:	f001 fd66 	bl	80062a4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80047d8:	4b21      	ldr	r3, [pc, #132]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 80047da:	4a22      	ldr	r2, [pc, #136]	@ (8004864 <HAL_UART_MspInit+0x220>)
 80047dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80047de:	4b20      	ldr	r3, [pc, #128]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 80047e0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047e4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 80047f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047f8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047fa:	4b19      	ldr	r3, [pc, #100]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004800:	4b17      	ldr	r3, [pc, #92]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 8004802:	2200      	movs	r2, #0
 8004804:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004806:	4b16      	ldr	r3, [pc, #88]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 8004808:	2200      	movs	r2, #0
 800480a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800480c:	4b14      	ldr	r3, [pc, #80]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 800480e:	2200      	movs	r2, #0
 8004810:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004812:	4b13      	ldr	r3, [pc, #76]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 8004814:	2200      	movs	r2, #0
 8004816:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004818:	4811      	ldr	r0, [pc, #68]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 800481a:	f001 f8e3 	bl	80059e4 <HAL_DMA_Init>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8004824:	f7fe fa6c 	bl	8002d00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 800482c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800482e:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <HAL_UART_MspInit+0x21c>)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004834:	2200      	movs	r2, #0
 8004836:	2100      	movs	r1, #0
 8004838:	2027      	movs	r0, #39	@ 0x27
 800483a:	f001 f88e 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800483e:	2027      	movs	r0, #39	@ 0x27
 8004840:	f001 f8a7 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 8004844:	e077      	b.n	8004936 <HAL_UART_MspInit+0x2f2>
 8004846:	bf00      	nop
 8004848:	40004c00 	.word	0x40004c00
 800484c:	40023800 	.word	0x40023800
 8004850:	40020800 	.word	0x40020800
 8004854:	40011000 	.word	0x40011000
 8004858:	40020400 	.word	0x40020400
 800485c:	40004800 	.word	0x40004800
 8004860:	200009dc 	.word	0x200009dc
 8004864:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a34      	ldr	r2, [pc, #208]	@ (8004940 <HAL_UART_MspInit+0x2fc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d161      	bne.n	8004936 <HAL_UART_MspInit+0x2f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	4b33      	ldr	r3, [pc, #204]	@ (8004944 <HAL_UART_MspInit+0x300>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487a:	4a32      	ldr	r2, [pc, #200]	@ (8004944 <HAL_UART_MspInit+0x300>)
 800487c:	f043 0320 	orr.w	r3, r3, #32
 8004880:	6453      	str	r3, [r2, #68]	@ 0x44
 8004882:	4b30      	ldr	r3, [pc, #192]	@ (8004944 <HAL_UART_MspInit+0x300>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800488e:	2300      	movs	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <HAL_UART_MspInit+0x300>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004896:	4a2b      	ldr	r2, [pc, #172]	@ (8004944 <HAL_UART_MspInit+0x300>)
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	6313      	str	r3, [r2, #48]	@ 0x30
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <HAL_UART_MspInit+0x300>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	60bb      	str	r3, [r7, #8]
 80048a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80048aa:	23c0      	movs	r3, #192	@ 0xc0
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ae:	2302      	movs	r3, #2
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b6:	2303      	movs	r3, #3
 80048b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80048ba:	2308      	movs	r3, #8
 80048bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80048c2:	4619      	mov	r1, r3
 80048c4:	4820      	ldr	r0, [pc, #128]	@ (8004948 <HAL_UART_MspInit+0x304>)
 80048c6:	f001 fced 	bl	80062a4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80048ca:	4b20      	ldr	r3, [pc, #128]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048cc:	4a20      	ldr	r2, [pc, #128]	@ (8004950 <HAL_UART_MspInit+0x30c>)
 80048ce:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80048d0:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048d2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80048d6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d8:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048e4:	4b19      	ldr	r3, [pc, #100]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048ea:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048ec:	4b17      	ldr	r3, [pc, #92]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048f2:	4b16      	ldr	r3, [pc, #88]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80048f8:	4b14      	ldr	r3, [pc, #80]	@ (800494c <HAL_UART_MspInit+0x308>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <HAL_UART_MspInit+0x308>)
 8004900:	2200      	movs	r2, #0
 8004902:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004904:	4b11      	ldr	r3, [pc, #68]	@ (800494c <HAL_UART_MspInit+0x308>)
 8004906:	2200      	movs	r2, #0
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800490a:	4810      	ldr	r0, [pc, #64]	@ (800494c <HAL_UART_MspInit+0x308>)
 800490c:	f001 f86a 	bl	80059e4 <HAL_DMA_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 8004916:	f7fe f9f3 	bl	8002d00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a0b      	ldr	r2, [pc, #44]	@ (800494c <HAL_UART_MspInit+0x308>)
 800491e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004920:	4a0a      	ldr	r2, [pc, #40]	@ (800494c <HAL_UART_MspInit+0x308>)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004926:	2200      	movs	r2, #0
 8004928:	2100      	movs	r1, #0
 800492a:	2047      	movs	r0, #71	@ 0x47
 800492c:	f001 f815 	bl	800595a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004930:	2047      	movs	r0, #71	@ 0x47
 8004932:	f001 f82e 	bl	8005992 <HAL_NVIC_EnableIRQ>
}
 8004936:	bf00      	nop
 8004938:	3740      	adds	r7, #64	@ 0x40
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40011400 	.word	0x40011400
 8004944:	40023800 	.word	0x40023800
 8004948:	40020800 	.word	0x40020800
 800494c:	20000a3c 	.word	0x20000a3c
 8004950:	40026428 	.word	0x40026428

08004954 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <HAL_UART_MspDeInit+0xc0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10e      	bne.n	8004984 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8004966:	4b2c      	ldr	r3, [pc, #176]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 800496c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004970:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8004972:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8004976:	4829      	ldr	r0, [pc, #164]	@ (8004a1c <HAL_UART_MspDeInit+0xc8>)
 8004978:	f001 fe28 	bl	80065cc <HAL_GPIO_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800497c:	2034      	movs	r0, #52	@ 0x34
 800497e:	f001 f816 	bl	80059ae <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 8004982:	e043      	b.n	8004a0c <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a25      	ldr	r2, [pc, #148]	@ (8004a20 <HAL_UART_MspDeInit+0xcc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d10a      	bne.n	80049a4 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART1_CLK_DISABLE();
 800498e:	4b22      	ldr	r3, [pc, #136]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 8004994:	f023 0310 	bic.w	r3, r3, #16
 8004998:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800499a:	21c0      	movs	r1, #192	@ 0xc0
 800499c:	4821      	ldr	r0, [pc, #132]	@ (8004a24 <HAL_UART_MspDeInit+0xd0>)
 800499e:	f001 fe15 	bl	80065cc <HAL_GPIO_DeInit>
}
 80049a2:	e033      	b.n	8004a0c <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART3)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_UART_MspDeInit+0xd4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d117      	bne.n	80049de <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	4a19      	ldr	r2, [pc, #100]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 80049b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b8:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 80049ba:	2120      	movs	r1, #32
 80049bc:	4817      	ldr	r0, [pc, #92]	@ (8004a1c <HAL_UART_MspDeInit+0xc8>)
 80049be:	f001 fe05 	bl	80065cc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80049c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049c6:	4817      	ldr	r0, [pc, #92]	@ (8004a24 <HAL_UART_MspDeInit+0xd0>)
 80049c8:	f001 fe00 	bl	80065cc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f8b5 	bl	8005b40 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 80049d6:	2027      	movs	r0, #39	@ 0x27
 80049d8:	f000 ffe9 	bl	80059ae <HAL_NVIC_DisableIRQ>
}
 80049dc:	e016      	b.n	8004a0c <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART6)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a12      	ldr	r2, [pc, #72]	@ (8004a2c <HAL_UART_MspDeInit+0xd8>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d111      	bne.n	8004a0c <HAL_UART_MspDeInit+0xb8>
    __HAL_RCC_USART6_CLK_DISABLE();
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 80049ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004a18 <HAL_UART_MspDeInit+0xc4>)
 80049ee:	f023 0320 	bic.w	r3, r3, #32
 80049f2:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 80049f4:	21c0      	movs	r1, #192	@ 0xc0
 80049f6:	4809      	ldr	r0, [pc, #36]	@ (8004a1c <HAL_UART_MspDeInit+0xc8>)
 80049f8:	f001 fde8 	bl	80065cc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f89d 	bl	8005b40 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004a06:	2047      	movs	r0, #71	@ 0x47
 8004a08:	f000 ffd1 	bl	80059ae <HAL_NVIC_DisableIRQ>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40004c00 	.word	0x40004c00
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	40020800 	.word	0x40020800
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40020400 	.word	0x40020400
 8004a28:	40004800 	.word	0x40004800
 8004a2c:	40011400 	.word	0x40011400

08004a30 <UsrGpsL86Init>:



//============================= Initial section
void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8004a38:	f240 228a 	movw	r2, #650	@ 0x28a
 8004a3c:	4903      	ldr	r1, [pc, #12]	@ (8004a4c <UsrGpsL86Init+0x1c>)
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f004 ffe3 	bl	8009a0a <HAL_UART_Receive_DMA>
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	20000b70 	.word	0x20000b70

08004a50 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	if(huart == &GPS_UART_HNDLR)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a06      	ldr	r2, [pc, #24]	@ (8004a74 <HAL_UART_RxCpltCallback+0x24>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d102      	bne.n	8004a66 <HAL_UART_RxCpltCallback+0x16>
	{
		g_openFixedDataTransmition = true;
 8004a60:	4b05      	ldr	r3, [pc, #20]	@ (8004a78 <HAL_UART_RxCpltCallback+0x28>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	701a      	strb	r2, [r3, #0]
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	20000994 	.word	0x20000994
 8004a78:	20000a9c 	.word	0x20000a9c

08004a7c <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_, UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
    getRmc();
 8004a86:	f000 f839 	bl	8004afc <getRmc>
    getGGA();
 8004a8a:	f000 f945 	bl	8004d18 <getGGA>
    if (rmcValidFlag)
 8004a8e:	4b18      	ldr	r3, [pc, #96]	@ (8004af0 <Usr_GpsL86GetValues+0x74>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d002      	beq.n	8004a9e <Usr_GpsL86GetValues+0x22>
    {
        rmcValidFlag = false;
 8004a98:	4b15      	ldr	r3, [pc, #84]	@ (8004af0 <Usr_GpsL86GetValues+0x74>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 8004a9e:	f000 f8cd 	bl	8004c3c <formatLatLong>

    gpsData_->lat = gpsData.lat;
 8004aa2:	4b14      	ldr	r3, [pc, #80]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8004aaa:	4b12      	ldr	r3, [pc, #72]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8004aba:	4b0e      	ldr	r3, [pc, #56]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004ac4:	6a1a      	ldr	r2, [r3, #32]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8004aca:	4b0a      	ldr	r3, [pc, #40]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 8004ad2:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004ad4:	69da      	ldr	r2, [r3, #28]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8004ada:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <Usr_GpsL86GetValues+0x78>)
 8004adc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	629a      	str	r2, [r3, #40]	@ 0x28
    UsrGpsL86Init(&GPS_UART_HNDLR);
 8004ae2:	4805      	ldr	r0, [pc, #20]	@ (8004af8 <Usr_GpsL86GetValues+0x7c>)
 8004ae4:	f7ff ffa4 	bl	8004a30 <UsrGpsL86Init>
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000a9d 	.word	0x20000a9d
 8004af4:	20001b18 	.word	0x20001b18
 8004af8:	20000994 	.word	0x20000994

08004afc <getRmc>:

//============================= Statics

_io void getRmc()
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af02      	add	r7, sp, #8

	        MsgIndex = 0;
 8004b02:	4b40      	ldr	r3, [pc, #256]	@ (8004c04 <getRmc+0x108>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
	        memcpy(m_gpsTransmitBuf, (char *)(m_rxData), 1000);
 8004b08:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b0c:	493e      	ldr	r1, [pc, #248]	@ (8004c08 <getRmc+0x10c>)
 8004b0e:	483f      	ldr	r0, [pc, #252]	@ (8004c0c <getRmc+0x110>)
 8004b10:	f008 ffb3 	bl	800da7a <memcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 8004b14:	493e      	ldr	r1, [pc, #248]	@ (8004c10 <getRmc+0x114>)
 8004b16:	483d      	ldr	r0, [pc, #244]	@ (8004c0c <getRmc+0x110>)
 8004b18:	f008 ff11 	bl	800d93e <strstr>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c14 <getRmc+0x118>)
 8004b20:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 8004b22:	4b3c      	ldr	r3, [pc, #240]	@ (8004c14 <getRmc+0x118>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b47      	cmp	r3, #71	@ 0x47
 8004b2a:	d167      	bne.n	8004bfc <getRmc+0x100>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 8004b2c:	4b39      	ldr	r3, [pc, #228]	@ (8004c14 <getRmc+0x118>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b34      	ldr	r3, [pc, #208]	@ (8004c04 <getRmc+0x108>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	7811      	ldrb	r1, [r2, #0]
 8004b36:	4a38      	ldr	r2, [pc, #224]	@ (8004c18 <getRmc+0x11c>)
 8004b38:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 8004b3a:	4b32      	ldr	r3, [pc, #200]	@ (8004c04 <getRmc+0x108>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4a30      	ldr	r2, [pc, #192]	@ (8004c04 <getRmc+0x108>)
 8004b42:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 8004b44:	4b33      	ldr	r3, [pc, #204]	@ (8004c14 <getRmc+0x118>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2e      	ldr	r2, [pc, #184]	@ (8004c04 <getRmc+0x108>)
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	441a      	add	r2, r3
 8004b4e:	4b31      	ldr	r3, [pc, #196]	@ (8004c14 <getRmc+0x118>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8004b56:	4b2f      	ldr	r3, [pc, #188]	@ (8004c14 <getRmc+0x118>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b0a      	cmp	r3, #10
 8004b5e:	d003      	beq.n	8004b68 <getRmc+0x6c>
 8004b60:	4b28      	ldr	r3, [pc, #160]	@ (8004c04 <getRmc+0x108>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b5a      	cmp	r3, #90	@ 0x5a
 8004b66:	dde1      	ble.n	8004b2c <getRmc+0x30>
	                {
	                    MsgIndex = 0;
 8004b68:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <getRmc+0x108>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]

	                    for (int i = 0; i < 100; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	607b      	str	r3, [r7, #4]
 8004b72:	e014      	b.n	8004b9e <getRmc+0xa2>
	                    {
	                        if (gpsPayload[i] == 'N')
 8004b74:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <getRmc+0x11c>)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b4e      	cmp	r3, #78	@ 0x4e
 8004b7e:	d102      	bne.n	8004b86 <getRmc+0x8a>
	                            f_northFlag = true;
 8004b80:	4b26      	ldr	r3, [pc, #152]	@ (8004c1c <getRmc+0x120>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 8004b86:	4a24      	ldr	r2, [pc, #144]	@ (8004c18 <getRmc+0x11c>)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b45      	cmp	r3, #69	@ 0x45
 8004b90:	d102      	bne.n	8004b98 <getRmc+0x9c>
	                            f_eastFlag = true;
 8004b92:	4b23      	ldr	r3, [pc, #140]	@ (8004c20 <getRmc+0x124>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b63      	cmp	r3, #99	@ 0x63
 8004ba2:	dde7      	ble.n	8004b74 <getRmc+0x78>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8004ba4:	481c      	ldr	r0, [pc, #112]	@ (8004c18 <getRmc+0x11c>)
 8004ba6:	f7fb fb83 	bl	80002b0 <strlen>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b0a      	cmp	r3, #10
 8004bae:	d91f      	bls.n	8004bf0 <getRmc+0xf4>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <getRmc+0x124>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01f      	beq.n	8004bfa <getRmc+0xfe>
 8004bba:	4b18      	ldr	r3, [pc, #96]	@ (8004c1c <getRmc+0x120>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <getRmc+0xfe>
	                        {
	                            f_northFlag = false;
 8004bc4:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <getRmc+0x120>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8004bca:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <getRmc+0x124>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8004bd0:	4b14      	ldr	r3, [pc, #80]	@ (8004c24 <getRmc+0x128>)
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <getRmc+0x12c>)
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4b14      	ldr	r3, [pc, #80]	@ (8004c2c <getRmc+0x130>)
 8004bda:	4a15      	ldr	r2, [pc, #84]	@ (8004c30 <getRmc+0x134>)
 8004bdc:	4915      	ldr	r1, [pc, #84]	@ (8004c34 <getRmc+0x138>)
 8004bde:	480e      	ldr	r0, [pc, #56]	@ (8004c18 <getRmc+0x11c>)
 8004be0:	f008 fe24 	bl	800d82c <siscanf>
	                            rmcValidFlag = true;
 8004be4:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <getRmc+0x13c>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8004bea:	f000 f827 	bl	8004c3c <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8004bee:	e004      	b.n	8004bfa <getRmc+0xfe>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8004bf0:	2264      	movs	r2, #100	@ 0x64
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4808      	ldr	r0, [pc, #32]	@ (8004c18 <getRmc+0x11c>)
 8004bf6:	f008 fe9a 	bl	800d92e <memset>
	                    break;
 8004bfa:	bf00      	nop
	                }
	            }
	        }

}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000aa0 	.word	0x20000aa0
 8004c08:	20000b70 	.word	0x20000b70
 8004c0c:	20001340 	.word	0x20001340
 8004c10:	08013660 	.word	0x08013660
 8004c14:	20000aa4 	.word	0x20000aa4
 8004c18:	20000aa8 	.word	0x20000aa8
 8004c1c:	20000a9e 	.word	0x20000a9e
 8004c20:	20000a9f 	.word	0x20000a9f
 8004c24:	20001b20 	.word	0x20001b20
 8004c28:	20001b14 	.word	0x20001b14
 8004c2c:	20001b10 	.word	0x20001b10
 8004c30:	20001b24 	.word	0x20001b24
 8004c34:	08013668 	.word	0x08013668
 8004c38:	20000a9d 	.word	0x20000a9d

08004c3c <formatLatLong>:

_io void formatLatLong(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8004c42:	4b30      	ldr	r3, [pc, #192]	@ (8004d04 <formatLatLong+0xc8>)
 8004c44:	edd3 7a00 	vldr	s15, [r3]
 8004c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c4c:	ee17 1a90 	vmov	r1, s15
 8004c50:	4b2d      	ldr	r3, [pc, #180]	@ (8004d08 <formatLatLong+0xcc>)
 8004c52:	fb83 2301 	smull	r2, r3, r3, r1
 8004c56:	115a      	asrs	r2, r3, #5
 8004c58:	17cb      	asrs	r3, r1, #31
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8004c5e:	4b29      	ldr	r3, [pc, #164]	@ (8004d04 <formatLatLong+0xc8>)
 8004c60:	ed93 7a00 	vldr	s14, [r3]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2264      	movs	r2, #100	@ 0x64
 8004c68:	fb02 f303 	mul.w	r3, r2, r3
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c78:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c86:	edd7 6a00 	vldr	s13, [r7]
 8004c8a:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8004d0c <formatLatLong+0xd0>
 8004c8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c96:	4b1e      	ldr	r3, [pc, #120]	@ (8004d10 <formatLatLong+0xd4>)
 8004c98:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d14 <formatLatLong+0xd8>)
 8004c9e:	edd3 7a00 	vldr	s15, [r3]
 8004ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ca6:	ee17 1a90 	vmov	r1, s15
 8004caa:	4b17      	ldr	r3, [pc, #92]	@ (8004d08 <formatLatLong+0xcc>)
 8004cac:	fb83 2301 	smull	r2, r3, r3, r1
 8004cb0:	115a      	asrs	r2, r3, #5
 8004cb2:	17cb      	asrs	r3, r1, #31
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8004cb8:	4b16      	ldr	r3, [pc, #88]	@ (8004d14 <formatLatLong+0xd8>)
 8004cba:	ed93 7a00 	vldr	s14, [r3]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2264      	movs	r2, #100	@ 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	ee07 3a90 	vmov	s15, r3
 8004cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd2:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ce0:	edd7 6a00 	vldr	s13, [r7]
 8004ce4:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8004d0c <formatLatLong+0xd0>
 8004ce8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf0:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <formatLatLong+0xd4>)
 8004cf2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20001b10 	.word	0x20001b10
 8004d08:	51eb851f 	.word	0x51eb851f
 8004d0c:	42700000 	.word	0x42700000
 8004d10:	20001b18 	.word	0x20001b18
 8004d14:	20001b14 	.word	0x20001b14

08004d18 <getGGA>:

_io void getGGA(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af06      	add	r7, sp, #24

        MsgIndex = 0;
 8004d1e:	4b30      	ldr	r3, [pc, #192]	@ (8004de0 <getGGA+0xc8>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8004d24:	492f      	ldr	r1, [pc, #188]	@ (8004de4 <getGGA+0xcc>)
 8004d26:	4830      	ldr	r0, [pc, #192]	@ (8004de8 <getGGA+0xd0>)
 8004d28:	f008 fe09 	bl	800d93e <strstr>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004dec <getGGA+0xd4>)
 8004d30:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8004d32:	4b2e      	ldr	r3, [pc, #184]	@ (8004dec <getGGA+0xd4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b47      	cmp	r3, #71	@ 0x47
 8004d3a:	d14a      	bne.n	8004dd2 <getGGA+0xba>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8004d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dec <getGGA+0xd4>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b27      	ldr	r3, [pc, #156]	@ (8004de0 <getGGA+0xc8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	7811      	ldrb	r1, [r2, #0]
 8004d46:	4a2a      	ldr	r2, [pc, #168]	@ (8004df0 <getGGA+0xd8>)
 8004d48:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8004d4a:	4b25      	ldr	r3, [pc, #148]	@ (8004de0 <getGGA+0xc8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a23      	ldr	r2, [pc, #140]	@ (8004de0 <getGGA+0xc8>)
 8004d52:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8004d54:	4b25      	ldr	r3, [pc, #148]	@ (8004dec <getGGA+0xd4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a21      	ldr	r2, [pc, #132]	@ (8004de0 <getGGA+0xc8>)
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	4b23      	ldr	r3, [pc, #140]	@ (8004dec <getGGA+0xd4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8004d66:	4b21      	ldr	r3, [pc, #132]	@ (8004dec <getGGA+0xd4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d003      	beq.n	8004d78 <getGGA+0x60>
 8004d70:	4b1b      	ldr	r3, [pc, #108]	@ (8004de0 <getGGA+0xc8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b5a      	cmp	r3, #90	@ 0x5a
 8004d76:	dde1      	ble.n	8004d3c <getGGA+0x24>
                {
                    MsgIndex = 0;
 8004d78:	4b19      	ldr	r3, [pc, #100]	@ (8004de0 <getGGA+0xc8>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8004d7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d82:	2100      	movs	r1, #0
 8004d84:	4818      	ldr	r0, [pc, #96]	@ (8004de8 <getGGA+0xd0>)
 8004d86:	f008 fdd2 	bl	800d92e <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8004d8a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4818      	ldr	r0, [pc, #96]	@ (8004df4 <getGGA+0xdc>)
 8004d92:	f008 fdcc 	bl	800d92e <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8004d96:	4816      	ldr	r0, [pc, #88]	@ (8004df0 <getGGA+0xd8>)
 8004d98:	f7fb fa8a 	bl	80002b0 <strlen>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b0a      	cmp	r3, #10
 8004da0:	d912      	bls.n	8004dc8 <getGGA+0xb0>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8004da2:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <getGGA+0xe0>)
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <getGGA+0xe4>)
 8004da8:	9304      	str	r3, [sp, #16]
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <getGGA+0xe8>)
 8004dac:	9303      	str	r3, [sp, #12]
 8004dae:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <getGGA+0xec>)
 8004db0:	9302      	str	r3, [sp, #8]
 8004db2:	4b15      	ldr	r3, [pc, #84]	@ (8004e08 <getGGA+0xf0>)
 8004db4:	9301      	str	r3, [sp, #4]
 8004db6:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <getGGA+0xf4>)
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <getGGA+0xf8>)
 8004dbc:	4a15      	ldr	r2, [pc, #84]	@ (8004e14 <getGGA+0xfc>)
 8004dbe:	4916      	ldr	r1, [pc, #88]	@ (8004e18 <getGGA+0x100>)
 8004dc0:	480b      	ldr	r0, [pc, #44]	@ (8004df0 <getGGA+0xd8>)
 8004dc2:	f008 fd33 	bl	800d82c <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8004dc6:	e004      	b.n	8004dd2 <getGGA+0xba>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8004dc8:	2264      	movs	r2, #100	@ 0x64
 8004dca:	2100      	movs	r1, #0
 8004dcc:	4813      	ldr	r0, [pc, #76]	@ (8004e1c <getGGA+0x104>)
 8004dce:	f008 fdae 	bl	800d92e <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8004dd2:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <getGGA+0x108>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);

}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000aa0 	.word	0x20000aa0
 8004de4:	08013684 	.word	0x08013684
 8004de8:	20001340 	.word	0x20001340
 8004dec:	20000aa4 	.word	0x20000aa4
 8004df0:	20000b0c 	.word	0x20000b0c
 8004df4:	20000b70 	.word	0x20000b70
 8004df8:	20001b44 	.word	0x20001b44
 8004dfc:	20001b40 	.word	0x20001b40
 8004e00:	20001b3c 	.word	0x20001b3c
 8004e04:	20001b38 	.word	0x20001b38
 8004e08:	20001b34 	.word	0x20001b34
 8004e0c:	20001b30 	.word	0x20001b30
 8004e10:	20001b2c 	.word	0x20001b2c
 8004e14:	20001b28 	.word	0x20001b28
 8004e18:	0801368c 	.word	0x0801368c
 8004e1c:	20000aa8 	.word	0x20000aa8
 8004e20:	20000a9c 	.word	0x20000a9c

08004e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004e28:	f7fe feac 	bl	8003b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e2c:	480c      	ldr	r0, [pc, #48]	@ (8004e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e2e:	490d      	ldr	r1, [pc, #52]	@ (8004e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e30:	4a0d      	ldr	r2, [pc, #52]	@ (8004e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e34:	e002      	b.n	8004e3c <LoopCopyDataInit>

08004e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e3a:	3304      	adds	r3, #4

08004e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e40:	d3f9      	bcc.n	8004e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e42:	4a0a      	ldr	r2, [pc, #40]	@ (8004e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e44:	4c0a      	ldr	r4, [pc, #40]	@ (8004e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e48:	e001      	b.n	8004e4e <LoopFillZerobss>

08004e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e4c:	3204      	adds	r2, #4

08004e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e50:	d3fb      	bcc.n	8004e4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004e52:	f008 fdeb 	bl	800da2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e56:	f7fd f9af 	bl	80021b8 <main>
  bx  lr    
 8004e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e64:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004e68:	08013be8 	.word	0x08013be8
  ldr r2, =_sbss
 8004e6c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004e70:	20001ca8 	.word	0x20001ca8

08004e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e74:	e7fe      	b.n	8004e74 <ADC_IRQHandler>
	...

08004e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <HAL_Init+0x40>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0d      	ldr	r2, [pc, #52]	@ (8004eb8 <HAL_Init+0x40>)
 8004e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_Init+0x40>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb8 <HAL_Init+0x40>)
 8004e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e94:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <HAL_Init+0x40>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a07      	ldr	r2, [pc, #28]	@ (8004eb8 <HAL_Init+0x40>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea0:	2003      	movs	r0, #3
 8004ea2:	f000 fd4f 	bl	8005944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ea6:	200f      	movs	r0, #15
 8004ea8:	f000 f808 	bl	8004ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004eac:	f7fe fcb6 	bl	800381c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023c00 	.word	0x40023c00

08004ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ec4:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <HAL_InitTick+0x54>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <HAL_InitTick+0x58>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fd75 	bl	80059ca <HAL_SYSTICK_Config>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e00e      	b.n	8004f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b0f      	cmp	r3, #15
 8004eee:	d80a      	bhi.n	8004f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	6879      	ldr	r1, [r7, #4]
 8004ef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ef8:	f000 fd2f 	bl	800595a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004efc:	4a06      	ldr	r2, [pc, #24]	@ (8004f18 <HAL_InitTick+0x5c>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e000      	b.n	8004f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20000000 	.word	0x20000000
 8004f14:	20000020 	.word	0x20000020
 8004f18:	2000001c 	.word	0x2000001c

08004f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f20:	4b06      	ldr	r3, [pc, #24]	@ (8004f3c <HAL_IncTick+0x20>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <HAL_IncTick+0x24>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a04      	ldr	r2, [pc, #16]	@ (8004f40 <HAL_IncTick+0x24>)
 8004f2e:	6013      	str	r3, [r2, #0]
}
 8004f30:	bf00      	nop
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000020 	.word	0x20000020
 8004f40:	20001b48 	.word	0x20001b48

08004f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  return uwTick;
 8004f48:	4b03      	ldr	r3, [pc, #12]	@ (8004f58 <HAL_GetTick+0x14>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	20001b48 	.word	0x20001b48

08004f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f64:	f7ff ffee 	bl	8004f44 <HAL_GetTick>
 8004f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f74:	d005      	beq.n	8004f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f76:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa0 <HAL_Delay+0x44>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f82:	bf00      	nop
 8004f84:	f7ff ffde 	bl	8004f44 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d8f7      	bhi.n	8004f84 <HAL_Delay+0x28>
  {
  }
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000020 	.word	0x20000020

08004fa4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e033      	b.n	8005022 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fc fa4e 	bl	8001464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d118      	bne.n	8005014 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004fea:	f023 0302 	bic.w	r3, r3, #2
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fab4 	bl	8005564 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	@ 0x40
 8005012:	e001      	b.n	8005018 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_ADC_Start+0x1a>
 8005042:	2302      	movs	r3, #2
 8005044:	e0b2      	b.n	80051ac <HAL_ADC_Start+0x180>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d018      	beq.n	800508e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800506c:	4b52      	ldr	r3, [pc, #328]	@ (80051b8 <HAL_ADC_Start+0x18c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a52      	ldr	r2, [pc, #328]	@ (80051bc <HAL_ADC_Start+0x190>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	0c9a      	lsrs	r2, r3, #18
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005080:	e002      	b.n	8005088 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3b01      	subs	r3, #1
 8005086:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f9      	bne.n	8005082 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	d17a      	bne.n	8005192 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80050c6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050da:	d106      	bne.n	80050ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e0:	f023 0206 	bic.w	r2, r3, #6
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80050e8:	e002      	b.n	80050f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050f8:	4b31      	ldr	r3, [pc, #196]	@ (80051c0 <HAL_ADC_Start+0x194>)
 80050fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005104:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	2b00      	cmp	r3, #0
 8005110:	d12a      	bne.n	8005168 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2b      	ldr	r2, [pc, #172]	@ (80051c4 <HAL_ADC_Start+0x198>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d015      	beq.n	8005148 <HAL_ADC_Start+0x11c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a29      	ldr	r2, [pc, #164]	@ (80051c8 <HAL_ADC_Start+0x19c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d105      	bne.n	8005132 <HAL_ADC_Start+0x106>
 8005126:	4b26      	ldr	r3, [pc, #152]	@ (80051c0 <HAL_ADC_Start+0x194>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a25      	ldr	r2, [pc, #148]	@ (80051cc <HAL_ADC_Start+0x1a0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d136      	bne.n	80051aa <HAL_ADC_Start+0x17e>
 800513c:	4b20      	ldr	r3, [pc, #128]	@ (80051c0 <HAL_ADC_Start+0x194>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b00      	cmp	r3, #0
 8005146:	d130      	bne.n	80051aa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d129      	bne.n	80051aa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005164:	609a      	str	r2, [r3, #8]
 8005166:	e020      	b.n	80051aa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a15      	ldr	r2, [pc, #84]	@ (80051c4 <HAL_ADC_Start+0x198>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d11b      	bne.n	80051aa <HAL_ADC_Start+0x17e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d114      	bne.n	80051aa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689a      	ldr	r2, [r3, #8]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	e00b      	b.n	80051aa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	f043 0210 	orr.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a2:	f043 0201 	orr.w	r2, r3, #1
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	20000000 	.word	0x20000000
 80051bc:	431bde83 	.word	0x431bde83
 80051c0:	40012300 	.word	0x40012300
 80051c4:	40012000 	.word	0x40012000
 80051c8:	40012100 	.word	0x40012100
 80051cc:	40012200 	.word	0x40012200

080051d0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ec:	d113      	bne.n	8005216 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80051f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051fc:	d10b      	bne.n	8005216 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e063      	b.n	80052de <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8005216:	f7ff fe95 	bl	8004f44 <HAL_GetTick>
 800521a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800521c:	e021      	b.n	8005262 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005224:	d01d      	beq.n	8005262 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <HAL_ADC_PollForConversion+0x6c>
 800522c:	f7ff fe8a 	bl	8004f44 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d212      	bcs.n	8005262 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d00b      	beq.n	8005262 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	f043 0204 	orr.w	r2, r3, #4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e03d      	b.n	80052de <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b02      	cmp	r3, #2
 800526e:	d1d6      	bne.n	800521e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0212 	mvn.w	r2, #18
 8005278:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d123      	bne.n	80052dc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11f      	bne.n	80052dc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d006      	beq.n	80052b8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d111      	bne.n	80052dc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d105      	bne.n	80052dc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d4:	f043 0201 	orr.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_ADC_ConfigChannel+0x1c>
 8005318:	2302      	movs	r3, #2
 800531a:	e113      	b.n	8005544 <HAL_ADC_ConfigChannel+0x244>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b09      	cmp	r3, #9
 800532a:	d925      	bls.n	8005378 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	b29b      	uxth	r3, r3
 8005338:	461a      	mov	r2, r3
 800533a:	4613      	mov	r3, r2
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4413      	add	r3, r2
 8005340:	3b1e      	subs	r3, #30
 8005342:	2207      	movs	r2, #7
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43da      	mvns	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	400a      	ands	r2, r1
 8005350:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68d9      	ldr	r1, [r3, #12]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	4618      	mov	r0, r3
 8005364:	4603      	mov	r3, r0
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4403      	add	r3, r0
 800536a:	3b1e      	subs	r3, #30
 800536c:	409a      	lsls	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	60da      	str	r2, [r3, #12]
 8005376:	e022      	b.n	80053be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6919      	ldr	r1, [r3, #16]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	4613      	mov	r3, r2
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	4413      	add	r3, r2
 800538c:	2207      	movs	r2, #7
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43da      	mvns	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	400a      	ands	r2, r1
 800539a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6919      	ldr	r1, [r3, #16]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	4618      	mov	r0, r3
 80053ae:	4603      	mov	r3, r0
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4403      	add	r3, r0
 80053b4:	409a      	lsls	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d824      	bhi.n	8005410 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	3b05      	subs	r3, #5
 80053d8:	221f      	movs	r2, #31
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43da      	mvns	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	400a      	ands	r2, r1
 80053e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4618      	mov	r0, r3
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	3b05      	subs	r3, #5
 8005402:	fa00 f203 	lsl.w	r2, r0, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34
 800540e:	e04c      	b.n	80054aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	d824      	bhi.n	8005462 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	4613      	mov	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	3b23      	subs	r3, #35	@ 0x23
 800542a:	221f      	movs	r2, #31
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	43da      	mvns	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	400a      	ands	r2, r1
 8005438:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	4618      	mov	r0, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	3b23      	subs	r3, #35	@ 0x23
 8005454:	fa00 f203 	lsl.w	r2, r0, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005460:	e023      	b.n	80054aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	3b41      	subs	r3, #65	@ 0x41
 8005474:	221f      	movs	r2, #31
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43da      	mvns	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	400a      	ands	r2, r1
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	4618      	mov	r0, r3
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	3b41      	subs	r3, #65	@ 0x41
 800549e:	fa00 f203 	lsl.w	r2, r0, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054aa:	4b29      	ldr	r3, [pc, #164]	@ (8005550 <HAL_ADC_ConfigChannel+0x250>)
 80054ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a28      	ldr	r2, [pc, #160]	@ (8005554 <HAL_ADC_ConfigChannel+0x254>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d10f      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x1d8>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b12      	cmp	r3, #18
 80054be:	d10b      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005554 <HAL_ADC_ConfigChannel+0x254>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d12b      	bne.n	800553a <HAL_ADC_ConfigChannel+0x23a>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005558 <HAL_ADC_ConfigChannel+0x258>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <HAL_ADC_ConfigChannel+0x1f4>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b11      	cmp	r3, #17
 80054f2:	d122      	bne.n	800553a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a11      	ldr	r2, [pc, #68]	@ (8005558 <HAL_ADC_ConfigChannel+0x258>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d111      	bne.n	800553a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005516:	4b11      	ldr	r3, [pc, #68]	@ (800555c <HAL_ADC_ConfigChannel+0x25c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a11      	ldr	r2, [pc, #68]	@ (8005560 <HAL_ADC_ConfigChannel+0x260>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	0c9a      	lsrs	r2, r3, #18
 8005522:	4613      	mov	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4413      	add	r3, r2
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800552c:	e002      	b.n	8005534 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	3b01      	subs	r3, #1
 8005532:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f9      	bne.n	800552e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	40012300 	.word	0x40012300
 8005554:	40012000 	.word	0x40012000
 8005558:	10000012 	.word	0x10000012
 800555c:	20000000 	.word	0x20000000
 8005560:	431bde83 	.word	0x431bde83

08005564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800556c:	4b79      	ldr	r3, [pc, #484]	@ (8005754 <ADC_Init+0x1f0>)
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6859      	ldr	r1, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	021a      	lsls	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80055bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6899      	ldr	r1, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	4a58      	ldr	r2, [pc, #352]	@ (8005758 <ADC_Init+0x1f4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d022      	beq.n	8005642 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689a      	ldr	r2, [r3, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800560a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800562c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	e00f      	b.n	8005662 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005660:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0202 	bic.w	r2, r2, #2
 8005670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	7e1b      	ldrb	r3, [r3, #24]
 800567c:	005a      	lsls	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01b      	beq.n	80056c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800569e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80056ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6859      	ldr	r1, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ba:	3b01      	subs	r3, #1
 80056bc:	035a      	lsls	r2, r3, #13
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	e007      	b.n	80056d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80056e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	051a      	lsls	r2, r3, #20
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800570c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6899      	ldr	r1, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800571a:	025a      	lsls	r2, r3, #9
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6899      	ldr	r1, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	029a      	lsls	r2, r3, #10
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40012300 	.word	0x40012300
 8005758:	0f000001 	.word	0x0f000001

0800575c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800576c:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <__NVIC_SetPriorityGrouping+0x44>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005778:	4013      	ands	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800578c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800578e:	4a04      	ldr	r2, [pc, #16]	@ (80057a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	60d3      	str	r3, [r2, #12]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	e000ed00 	.word	0xe000ed00

080057a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057a8:	4b04      	ldr	r3, [pc, #16]	@ (80057bc <__NVIC_GetPriorityGrouping+0x18>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	0a1b      	lsrs	r3, r3, #8
 80057ae:	f003 0307 	and.w	r3, r3, #7
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	db0b      	blt.n	80057ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	4907      	ldr	r1, [pc, #28]	@ (80057f8 <__NVIC_EnableIRQ+0x38>)
 80057da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057de:	095b      	lsrs	r3, r3, #5
 80057e0:	2001      	movs	r0, #1
 80057e2:	fa00 f202 	lsl.w	r2, r0, r2
 80057e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e100 	.word	0xe000e100

080057fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800580a:	2b00      	cmp	r3, #0
 800580c:	db12      	blt.n	8005834 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	f003 021f 	and.w	r2, r3, #31
 8005814:	490a      	ldr	r1, [pc, #40]	@ (8005840 <__NVIC_DisableIRQ+0x44>)
 8005816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2001      	movs	r0, #1
 800581e:	fa00 f202 	lsl.w	r2, r0, r2
 8005822:	3320      	adds	r3, #32
 8005824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005828:	f3bf 8f4f 	dsb	sy
}
 800582c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800582e:	f3bf 8f6f 	isb	sy
}
 8005832:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000e100 	.word	0xe000e100

08005844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005854:	2b00      	cmp	r3, #0
 8005856:	db0a      	blt.n	800586e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	490c      	ldr	r1, [pc, #48]	@ (8005890 <__NVIC_SetPriority+0x4c>)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	0112      	lsls	r2, r2, #4
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	440b      	add	r3, r1
 8005868:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800586c:	e00a      	b.n	8005884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	b2da      	uxtb	r2, r3
 8005872:	4908      	ldr	r1, [pc, #32]	@ (8005894 <__NVIC_SetPriority+0x50>)
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	3b04      	subs	r3, #4
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	440b      	add	r3, r1
 8005882:	761a      	strb	r2, [r3, #24]
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000e100 	.word	0xe000e100
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	@ 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f1c3 0307 	rsb	r3, r3, #7
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	bf28      	it	cs
 80058b6:	2304      	movcs	r3, #4
 80058b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3304      	adds	r3, #4
 80058be:	2b06      	cmp	r3, #6
 80058c0:	d902      	bls.n	80058c8 <NVIC_EncodePriority+0x30>
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	3b03      	subs	r3, #3
 80058c6:	e000      	b.n	80058ca <NVIC_EncodePriority+0x32>
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43da      	mvns	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	401a      	ands	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ea:	43d9      	mvns	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058f0:	4313      	orrs	r3, r2
         );
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3724      	adds	r7, #36	@ 0x24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3b01      	subs	r3, #1
 800590c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005910:	d301      	bcc.n	8005916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005912:	2301      	movs	r3, #1
 8005914:	e00f      	b.n	8005936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005916:	4a0a      	ldr	r2, [pc, #40]	@ (8005940 <SysTick_Config+0x40>)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3b01      	subs	r3, #1
 800591c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800591e:	210f      	movs	r1, #15
 8005920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005924:	f7ff ff8e 	bl	8005844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005928:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <SysTick_Config+0x40>)
 800592a:	2200      	movs	r2, #0
 800592c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800592e:	4b04      	ldr	r3, [pc, #16]	@ (8005940 <SysTick_Config+0x40>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	e000e010 	.word	0xe000e010

08005944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff05 	bl	800575c <__NVIC_SetPriorityGrouping>
}
 8005952:	bf00      	nop
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800595a:	b580      	push	{r7, lr}
 800595c:	b086      	sub	sp, #24
 800595e:	af00      	add	r7, sp, #0
 8005960:	4603      	mov	r3, r0
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800596c:	f7ff ff1a 	bl	80057a4 <__NVIC_GetPriorityGrouping>
 8005970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	6978      	ldr	r0, [r7, #20]
 8005978:	f7ff ff8e 	bl	8005898 <NVIC_EncodePriority>
 800597c:	4602      	mov	r2, r0
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005982:	4611      	mov	r1, r2
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff5d 	bl	8005844 <__NVIC_SetPriority>
}
 800598a:	bf00      	nop
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	4603      	mov	r3, r0
 800599a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800599c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff ff0d 	bl	80057c0 <__NVIC_EnableIRQ>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	4603      	mov	r3, r0
 80059b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80059b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff ff1d 	bl	80057fc <__NVIC_DisableIRQ>
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b082      	sub	sp, #8
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff ff94 	bl	8005900 <SysTick_Config>
 80059d8:	4603      	mov	r3, r0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059f0:	f7ff faa8 	bl	8004f44 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e099      	b.n	8005b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a20:	e00f      	b.n	8005a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a22:	f7ff fa8f 	bl	8004f44 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d908      	bls.n	8005a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2203      	movs	r2, #3
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e078      	b.n	8005b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e8      	bne.n	8005a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4b38      	ldr	r3, [pc, #224]	@ (8005b3c <HAL_DMA_Init+0x158>)
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d107      	bne.n	8005aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0307 	bic.w	r3, r3, #7
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d117      	bne.n	8005b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00e      	beq.n	8005b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb5f 	bl	80061ac <DMA_CheckFifoParam>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2240      	movs	r2, #64	@ 0x40
 8005af8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005b02:	2301      	movs	r3, #1
 8005b04:	e016      	b.n	8005b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fb16 	bl	8006140 <DMA_CalcBaseAndBitshift>
 8005b14:	4603      	mov	r3, r0
 8005b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b1c:	223f      	movs	r2, #63	@ 0x3f
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3718      	adds	r7, #24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	f010803f 	.word	0xf010803f

08005b40 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e050      	b.n	8005bf4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d101      	bne.n	8005b62 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e048      	b.n	8005bf4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2200      	movs	r2, #0
 8005b98:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2221      	movs	r2, #33	@ 0x21
 8005ba0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 facc 	bl	8006140 <DMA_CalcBaseAndBitshift>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd4:	223f      	movs	r2, #63	@ 0x3f
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d101      	bne.n	8005c22 <HAL_DMA_Start_IT+0x26>
 8005c1e:	2302      	movs	r3, #2
 8005c20:	e040      	b.n	8005ca4 <HAL_DMA_Start_IT+0xa8>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d12f      	bne.n	8005c96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2202      	movs	r2, #2
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 fa4a 	bl	80060e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c54:	223f      	movs	r2, #63	@ 0x3f
 8005c56:	409a      	lsls	r2, r3
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0216 	orr.w	r2, r2, #22
 8005c6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0208 	orr.w	r2, r2, #8
 8005c82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e005      	b.n	8005ca2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005cba:	f7ff f943 	bl	8004f44 <HAL_GetTick>
 8005cbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d008      	beq.n	8005cde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2280      	movs	r2, #128	@ 0x80
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e052      	b.n	8005d84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0216 	bic.w	r2, r2, #22
 8005cec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	695a      	ldr	r2, [r3, #20]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <HAL_DMA_Abort+0x62>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d007      	beq.n	8005d1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0208 	bic.w	r2, r2, #8
 8005d1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d2e:	e013      	b.n	8005d58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d30:	f7ff f908 	bl	8004f44 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b05      	cmp	r3, #5
 8005d3c:	d90c      	bls.n	8005d58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2203      	movs	r2, #3
 8005d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e015      	b.n	8005d84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1e4      	bne.n	8005d30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6a:	223f      	movs	r2, #63	@ 0x3f
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d004      	beq.n	8005daa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2280      	movs	r2, #128	@ 0x80
 8005da4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e00c      	b.n	8005dc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2205      	movs	r2, #5
 8005dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ddc:	4b8e      	ldr	r3, [pc, #568]	@ (8006018 <HAL_DMA_IRQHandler+0x248>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a8e      	ldr	r2, [pc, #568]	@ (800601c <HAL_DMA_IRQHandler+0x24c>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0a9b      	lsrs	r3, r3, #10
 8005de8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	409a      	lsls	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01a      	beq.n	8005e3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0204 	bic.w	r2, r2, #4
 8005e22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e28:	2208      	movs	r2, #8
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	f043 0201 	orr.w	r2, r3, #1
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	2201      	movs	r2, #1
 8005e42:	409a      	lsls	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d012      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5e:	2201      	movs	r2, #1
 8005e60:	409a      	lsls	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6a:	f043 0202 	orr.w	r2, r3, #2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e76:	2204      	movs	r2, #4
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d012      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00b      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e94:	2204      	movs	r2, #4
 8005e96:	409a      	lsls	r2, r3
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea0:	f043 0204 	orr.w	r2, r3, #4
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eac:	2210      	movs	r2, #16
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d043      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d03c      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eca:	2210      	movs	r2, #16
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d018      	beq.n	8005f12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d108      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d024      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	4798      	blx	r3
 8005efe:	e01f      	b.n	8005f40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
 8005f10:	e016      	b.n	8005f40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d107      	bne.n	8005f30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0208 	bic.w	r2, r2, #8
 8005f2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f44:	2220      	movs	r2, #32
 8005f46:	409a      	lsls	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 808f 	beq.w	8006070 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8087 	beq.w	8006070 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f66:	2220      	movs	r2, #32
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b05      	cmp	r3, #5
 8005f78:	d136      	bne.n	8005fe8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0216 	bic.w	r2, r2, #22
 8005f88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <HAL_DMA_IRQHandler+0x1da>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d007      	beq.n	8005fba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0208 	bic.w	r2, r2, #8
 8005fb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbe:	223f      	movs	r2, #63	@ 0x3f
 8005fc0:	409a      	lsls	r2, r3
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d07e      	beq.n	80060dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
        }
        return;
 8005fe6:	e079      	b.n	80060dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01d      	beq.n	8006032 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10d      	bne.n	8006020 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006008:	2b00      	cmp	r3, #0
 800600a:	d031      	beq.n	8006070 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	4798      	blx	r3
 8006014:	e02c      	b.n	8006070 <HAL_DMA_IRQHandler+0x2a0>
 8006016:	bf00      	nop
 8006018:	20000000 	.word	0x20000000
 800601c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d023      	beq.n	8006070 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
 8006030:	e01e      	b.n	8006070 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10f      	bne.n	8006060 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f022 0210 	bic.w	r2, r2, #16
 800604e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006074:	2b00      	cmp	r3, #0
 8006076:	d032      	beq.n	80060de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d022      	beq.n	80060ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2205      	movs	r2, #5
 8006088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	3301      	adds	r3, #1
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d307      	bcc.n	80060b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f2      	bne.n	800609c <HAL_DMA_IRQHandler+0x2cc>
 80060b6:	e000      	b.n	80060ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80060b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d005      	beq.n	80060de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
 80060da:	e000      	b.n	80060de <HAL_DMA_IRQHandler+0x30e>
        return;
 80060dc:	bf00      	nop
    }
  }
}
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006100:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d108      	bne.n	8006124 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006122:	e007      	b.n	8006134 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	60da      	str	r2, [r3, #12]
}
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	3b10      	subs	r3, #16
 8006150:	4a14      	ldr	r2, [pc, #80]	@ (80061a4 <DMA_CalcBaseAndBitshift+0x64>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	091b      	lsrs	r3, r3, #4
 8006158:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800615a:	4a13      	ldr	r2, [pc, #76]	@ (80061a8 <DMA_CalcBaseAndBitshift+0x68>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d909      	bls.n	8006182 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006176:	f023 0303 	bic.w	r3, r3, #3
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006180:	e007      	b.n	8006192 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	aaaaaaab 	.word	0xaaaaaaab
 80061a8:	080136d8 	.word	0x080136d8

080061ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d11f      	bne.n	8006206 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d856      	bhi.n	800627a <DMA_CheckFifoParam+0xce>
 80061cc:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <DMA_CheckFifoParam+0x28>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f7 	.word	0x080061f7
 80061dc:	080061e5 	.word	0x080061e5
 80061e0:	0800627b 	.word	0x0800627b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d046      	beq.n	800627e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061f4:	e043      	b.n	800627e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061fe:	d140      	bne.n	8006282 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006204:	e03d      	b.n	8006282 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800620e:	d121      	bne.n	8006254 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d837      	bhi.n	8006286 <DMA_CheckFifoParam+0xda>
 8006216:	a201      	add	r2, pc, #4	@ (adr r2, 800621c <DMA_CheckFifoParam+0x70>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	0800622d 	.word	0x0800622d
 8006220:	08006233 	.word	0x08006233
 8006224:	0800622d 	.word	0x0800622d
 8006228:	08006245 	.word	0x08006245
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	e030      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d025      	beq.n	800628a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006242:	e022      	b.n	800628a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006248:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800624c:	d11f      	bne.n	800628e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006252:	e01c      	b.n	800628e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b02      	cmp	r3, #2
 8006258:	d903      	bls.n	8006262 <DMA_CheckFifoParam+0xb6>
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b03      	cmp	r3, #3
 800625e:	d003      	beq.n	8006268 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006260:	e018      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
      break;
 8006266:	e015      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00e      	beq.n	8006292 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e00b      	b.n	8006292 <DMA_CheckFifoParam+0xe6>
      break;
 800627a:	bf00      	nop
 800627c:	e00a      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      break;
 800627e:	bf00      	nop
 8006280:	e008      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      break;
 8006282:	bf00      	nop
 8006284:	e006      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      break;
 8006286:	bf00      	nop
 8006288:	e004      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      break;
 800628a:	bf00      	nop
 800628c:	e002      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      break;   
 800628e:	bf00      	nop
 8006290:	e000      	b.n	8006294 <DMA_CheckFifoParam+0xe8>
      break;
 8006292:	bf00      	nop
    }
  } 
  
  return status; 
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop

080062a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b089      	sub	sp, #36	@ 0x24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	e165      	b.n	800658c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062c0:	2201      	movs	r2, #1
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	429a      	cmp	r2, r3
 80062da:	f040 8154 	bne.w	8006586 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d005      	beq.n	80062f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d130      	bne.n	8006358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	2203      	movs	r2, #3
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4313      	orrs	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800632c:	2201      	movs	r2, #1
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f003 0201 	and.w	r2, r3, #1
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	2b03      	cmp	r3, #3
 8006362:	d017      	beq.n	8006394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	2203      	movs	r2, #3
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	43db      	mvns	r3, r3
 8006376:	69ba      	ldr	r2, [r7, #24]
 8006378:	4013      	ands	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d123      	bne.n	80063e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	08da      	lsrs	r2, r3, #3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3208      	adds	r2, #8
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	220f      	movs	r2, #15
 80063b8:	fa02 f303 	lsl.w	r3, r2, r3
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	f003 0307 	and.w	r3, r3, #7
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	69ba      	ldr	r2, [r7, #24]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	08da      	lsrs	r2, r3, #3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3208      	adds	r2, #8
 80063e2:	69b9      	ldr	r1, [r7, #24]
 80063e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	2203      	movs	r2, #3
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	43db      	mvns	r3, r3
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	4013      	ands	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 0203 	and.w	r2, r3, #3
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4313      	orrs	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80ae 	beq.w	8006586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	4b5d      	ldr	r3, [pc, #372]	@ (80065a4 <HAL_GPIO_Init+0x300>)
 8006430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006432:	4a5c      	ldr	r2, [pc, #368]	@ (80065a4 <HAL_GPIO_Init+0x300>)
 8006434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006438:	6453      	str	r3, [r2, #68]	@ 0x44
 800643a:	4b5a      	ldr	r3, [pc, #360]	@ (80065a4 <HAL_GPIO_Init+0x300>)
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006446:	4a58      	ldr	r2, [pc, #352]	@ (80065a8 <HAL_GPIO_Init+0x304>)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	3302      	adds	r3, #2
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	220f      	movs	r2, #15
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	43db      	mvns	r3, r3
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	4013      	ands	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a4f      	ldr	r2, [pc, #316]	@ (80065ac <HAL_GPIO_Init+0x308>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d025      	beq.n	80064be <HAL_GPIO_Init+0x21a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a4e      	ldr	r2, [pc, #312]	@ (80065b0 <HAL_GPIO_Init+0x30c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01f      	beq.n	80064ba <HAL_GPIO_Init+0x216>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4d      	ldr	r2, [pc, #308]	@ (80065b4 <HAL_GPIO_Init+0x310>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d019      	beq.n	80064b6 <HAL_GPIO_Init+0x212>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a4c      	ldr	r2, [pc, #304]	@ (80065b8 <HAL_GPIO_Init+0x314>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d013      	beq.n	80064b2 <HAL_GPIO_Init+0x20e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a4b      	ldr	r2, [pc, #300]	@ (80065bc <HAL_GPIO_Init+0x318>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d00d      	beq.n	80064ae <HAL_GPIO_Init+0x20a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a4a      	ldr	r2, [pc, #296]	@ (80065c0 <HAL_GPIO_Init+0x31c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d007      	beq.n	80064aa <HAL_GPIO_Init+0x206>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a49      	ldr	r2, [pc, #292]	@ (80065c4 <HAL_GPIO_Init+0x320>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_GPIO_Init+0x202>
 80064a2:	2306      	movs	r3, #6
 80064a4:	e00c      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064a6:	2307      	movs	r3, #7
 80064a8:	e00a      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064aa:	2305      	movs	r3, #5
 80064ac:	e008      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064ae:	2304      	movs	r3, #4
 80064b0:	e006      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064b2:	2303      	movs	r3, #3
 80064b4:	e004      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e002      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <HAL_GPIO_Init+0x21c>
 80064be:	2300      	movs	r3, #0
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	f002 0203 	and.w	r2, r2, #3
 80064c6:	0092      	lsls	r2, r2, #2
 80064c8:	4093      	lsls	r3, r2
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064d0:	4935      	ldr	r1, [pc, #212]	@ (80065a8 <HAL_GPIO_Init+0x304>)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	089b      	lsrs	r3, r3, #2
 80064d6:	3302      	adds	r3, #2
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064de:	4b3a      	ldr	r3, [pc, #232]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	43db      	mvns	r3, r3
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	4013      	ands	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006502:	4a31      	ldr	r2, [pc, #196]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006508:	4b2f      	ldr	r3, [pc, #188]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	43db      	mvns	r3, r3
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4013      	ands	r3, r2
 8006516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800652c:	4a26      	ldr	r2, [pc, #152]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006532:	4b25      	ldr	r3, [pc, #148]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	43db      	mvns	r3, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	4013      	ands	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006556:	4a1c      	ldr	r2, [pc, #112]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800655c:	4b1a      	ldr	r3, [pc, #104]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	43db      	mvns	r3, r3
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	4013      	ands	r3, r2
 800656a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006580:	4a11      	ldr	r2, [pc, #68]	@ (80065c8 <HAL_GPIO_Init+0x324>)
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	3301      	adds	r3, #1
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	2b0f      	cmp	r3, #15
 8006590:	f67f ae96 	bls.w	80062c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop
 8006598:	3724      	adds	r7, #36	@ 0x24
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40013800 	.word	0x40013800
 80065ac:	40020000 	.word	0x40020000
 80065b0:	40020400 	.word	0x40020400
 80065b4:	40020800 	.word	0x40020800
 80065b8:	40020c00 	.word	0x40020c00
 80065bc:	40021000 	.word	0x40021000
 80065c0:	40021400 	.word	0x40021400
 80065c4:	40021800 	.word	0x40021800
 80065c8:	40013c00 	.word	0x40013c00

080065cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	e0c7      	b.n	8006778 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065e8:	2201      	movs	r2, #1
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4013      	ands	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	429a      	cmp	r2, r3
 8006600:	f040 80b7 	bne.w	8006772 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006604:	4a62      	ldr	r2, [pc, #392]	@ (8006790 <HAL_GPIO_DeInit+0x1c4>)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	089b      	lsrs	r3, r3, #2
 800660a:	3302      	adds	r3, #2
 800660c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006610:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0303 	and.w	r3, r3, #3
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	220f      	movs	r2, #15
 800661c:	fa02 f303 	lsl.w	r3, r2, r3
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a5a      	ldr	r2, [pc, #360]	@ (8006794 <HAL_GPIO_DeInit+0x1c8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d025      	beq.n	800667a <HAL_GPIO_DeInit+0xae>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a59      	ldr	r2, [pc, #356]	@ (8006798 <HAL_GPIO_DeInit+0x1cc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01f      	beq.n	8006676 <HAL_GPIO_DeInit+0xaa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a58      	ldr	r2, [pc, #352]	@ (800679c <HAL_GPIO_DeInit+0x1d0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d019      	beq.n	8006672 <HAL_GPIO_DeInit+0xa6>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a57      	ldr	r2, [pc, #348]	@ (80067a0 <HAL_GPIO_DeInit+0x1d4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d013      	beq.n	800666e <HAL_GPIO_DeInit+0xa2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a56      	ldr	r2, [pc, #344]	@ (80067a4 <HAL_GPIO_DeInit+0x1d8>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00d      	beq.n	800666a <HAL_GPIO_DeInit+0x9e>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a55      	ldr	r2, [pc, #340]	@ (80067a8 <HAL_GPIO_DeInit+0x1dc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <HAL_GPIO_DeInit+0x9a>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a54      	ldr	r2, [pc, #336]	@ (80067ac <HAL_GPIO_DeInit+0x1e0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d101      	bne.n	8006662 <HAL_GPIO_DeInit+0x96>
 800665e:	2306      	movs	r3, #6
 8006660:	e00c      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 8006662:	2307      	movs	r3, #7
 8006664:	e00a      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 8006666:	2305      	movs	r3, #5
 8006668:	e008      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 800666a:	2304      	movs	r3, #4
 800666c:	e006      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 800666e:	2303      	movs	r3, #3
 8006670:	e004      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 8006672:	2302      	movs	r3, #2
 8006674:	e002      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <HAL_GPIO_DeInit+0xb0>
 800667a:	2300      	movs	r3, #0
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	f002 0203 	and.w	r2, r2, #3
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	4093      	lsls	r3, r2
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	d132      	bne.n	80066f2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800668c:	4b48      	ldr	r3, [pc, #288]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	43db      	mvns	r3, r3
 8006694:	4946      	ldr	r1, [pc, #280]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 8006696:	4013      	ands	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800669a:	4b45      	ldr	r3, [pc, #276]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	43db      	mvns	r3, r3
 80066a2:	4943      	ldr	r1, [pc, #268]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80066a8:	4b41      	ldr	r3, [pc, #260]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	43db      	mvns	r3, r3
 80066b0:	493f      	ldr	r1, [pc, #252]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80066b6:	4b3e      	ldr	r3, [pc, #248]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	43db      	mvns	r3, r3
 80066be:	493c      	ldr	r1, [pc, #240]	@ (80067b0 <HAL_GPIO_DeInit+0x1e4>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	220f      	movs	r2, #15
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80066d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006790 <HAL_GPIO_DeInit+0x1c4>)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	089b      	lsrs	r3, r3, #2
 80066da:	3302      	adds	r3, #2
 80066dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	43da      	mvns	r2, r3
 80066e4:	482a      	ldr	r0, [pc, #168]	@ (8006790 <HAL_GPIO_DeInit+0x1c4>)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	400a      	ands	r2, r1
 80066ec:	3302      	adds	r3, #2
 80066ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	2103      	movs	r1, #3
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	43db      	mvns	r3, r3
 8006702:	401a      	ands	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	08da      	lsrs	r2, r3, #3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3208      	adds	r2, #8
 8006710:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	220f      	movs	r2, #15
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43db      	mvns	r3, r3
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	08d2      	lsrs	r2, r2, #3
 8006728:	4019      	ands	r1, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3208      	adds	r2, #8
 800672e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	2103      	movs	r1, #3
 800673c:	fa01 f303 	lsl.w	r3, r1, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	401a      	ands	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	2101      	movs	r1, #1
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	fa01 f303 	lsl.w	r3, r1, r3
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689a      	ldr	r2, [r3, #8]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	2103      	movs	r1, #3
 8006766:	fa01 f303 	lsl.w	r3, r1, r3
 800676a:	43db      	mvns	r3, r3
 800676c:	401a      	ands	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3301      	adds	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2b0f      	cmp	r3, #15
 800677c:	f67f af34 	bls.w	80065e8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	40013800 	.word	0x40013800
 8006794:	40020000 	.word	0x40020000
 8006798:	40020400 	.word	0x40020400
 800679c:	40020800 	.word	0x40020800
 80067a0:	40020c00 	.word	0x40020c00
 80067a4:	40021000 	.word	0x40021000
 80067a8:	40021400 	.word	0x40021400
 80067ac:	40021800 	.word	0x40021800
 80067b0:	40013c00 	.word	0x40013c00

080067b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
 80067c0:	4613      	mov	r3, r2
 80067c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067c4:	787b      	ldrb	r3, [r7, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067d0:	e003      	b.n	80067da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067d2:	887b      	ldrh	r3, [r7, #2]
 80067d4:	041a      	lsls	r2, r3, #16
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	619a      	str	r2, [r3, #24]
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067f2:	4b08      	ldr	r3, [pc, #32]	@ (8006814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d006      	beq.n	800680c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067fe:	4a05      	ldr	r2, [pc, #20]	@ (8006814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fc f8ce 	bl	80029a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40013c00 	.word	0x40013c00

08006818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e12b      	b.n	8006a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fb fbda 	bl	8001ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	@ 0x24
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800686a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800687a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800687c:	f001 f99c 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 8006880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a81      	ldr	r2, [pc, #516]	@ (8006a8c <HAL_I2C_Init+0x274>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d807      	bhi.n	800689c <HAL_I2C_Init+0x84>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a80      	ldr	r2, [pc, #512]	@ (8006a90 <HAL_I2C_Init+0x278>)
 8006890:	4293      	cmp	r3, r2
 8006892:	bf94      	ite	ls
 8006894:	2301      	movls	r3, #1
 8006896:	2300      	movhi	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e006      	b.n	80068aa <HAL_I2C_Init+0x92>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a7d      	ldr	r2, [pc, #500]	@ (8006a94 <HAL_I2C_Init+0x27c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	bf94      	ite	ls
 80068a4:	2301      	movls	r3, #1
 80068a6:	2300      	movhi	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0e7      	b.n	8006a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a78      	ldr	r2, [pc, #480]	@ (8006a98 <HAL_I2C_Init+0x280>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0c9b      	lsrs	r3, r3, #18
 80068bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a6a      	ldr	r2, [pc, #424]	@ (8006a8c <HAL_I2C_Init+0x274>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d802      	bhi.n	80068ec <HAL_I2C_Init+0xd4>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3301      	adds	r3, #1
 80068ea:	e009      	b.n	8006900 <HAL_I2C_Init+0xe8>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
 80068f6:	4a69      	ldr	r2, [pc, #420]	@ (8006a9c <HAL_I2C_Init+0x284>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	099b      	lsrs	r3, r3, #6
 80068fe:	3301      	adds	r3, #1
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	430b      	orrs	r3, r1
 8006906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006912:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	495c      	ldr	r1, [pc, #368]	@ (8006a8c <HAL_I2C_Init+0x274>)
 800691c:	428b      	cmp	r3, r1
 800691e:	d819      	bhi.n	8006954 <HAL_I2C_Init+0x13c>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1e59      	subs	r1, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	fbb1 f3f3 	udiv	r3, r1, r3
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006934:	400b      	ands	r3, r1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_I2C_Init+0x138>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1e59      	subs	r1, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	fbb1 f3f3 	udiv	r3, r1, r3
 8006948:	3301      	adds	r3, #1
 800694a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800694e:	e051      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 8006950:	2304      	movs	r3, #4
 8006952:	e04f      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d111      	bne.n	8006980 <HAL_I2C_Init+0x168>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1e58      	subs	r0, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6859      	ldr	r1, [r3, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	440b      	add	r3, r1
 800696a:	fbb0 f3f3 	udiv	r3, r0, r3
 800696e:	3301      	adds	r3, #1
 8006970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006974:	2b00      	cmp	r3, #0
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e012      	b.n	80069a6 <HAL_I2C_Init+0x18e>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1e58      	subs	r0, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6859      	ldr	r1, [r3, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	0099      	lsls	r1, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	fbb0 f3f3 	udiv	r3, r0, r3
 8006996:	3301      	adds	r3, #1
 8006998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Init+0x196>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10e      	bne.n	80069d4 <HAL_I2C_Init+0x1bc>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1e58      	subs	r0, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	440b      	add	r3, r1
 80069c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069c8:	3301      	adds	r3, #1
 80069ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069d2:	e00f      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1e58      	subs	r0, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6859      	ldr	r1, [r3, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	0099      	lsls	r1, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ea:	3301      	adds	r3, #1
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006a22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6911      	ldr	r1, [r2, #16]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68d2      	ldr	r2, [r2, #12]
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	000186a0 	.word	0x000186a0
 8006a90:	001e847f 	.word	0x001e847f
 8006a94:	003d08ff 	.word	0x003d08ff
 8006a98:	431bde83 	.word	0x431bde83
 8006a9c:	10624dd3 	.word	0x10624dd3

08006aa0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e021      	b.n	8006af6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2224      	movs	r2, #36	@ 0x24
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0201 	bic.w	r2, r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fb fb34 	bl	8002138 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
	...

08006b00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b088      	sub	sp, #32
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4603      	mov	r3, r0
 8006b10:	817b      	strh	r3, [r7, #10]
 8006b12:	460b      	mov	r3, r1
 8006b14:	813b      	strh	r3, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b1a:	f7fe fa13 	bl	8004f44 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b20      	cmp	r3, #32
 8006b2a:	f040 80d9 	bne.w	8006ce0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	2319      	movs	r3, #25
 8006b34:	2201      	movs	r2, #1
 8006b36:	496d      	ldr	r1, [pc, #436]	@ (8006cec <HAL_I2C_Mem_Write+0x1ec>)
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fc8b 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
 8006b46:	e0cc      	b.n	8006ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_I2C_Mem_Write+0x56>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e0c5      	b.n	8006ce2 <HAL_I2C_Mem_Write+0x1e2>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d007      	beq.n	8006b7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0201 	orr.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2221      	movs	r2, #33	@ 0x21
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2240      	movs	r2, #64	@ 0x40
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a4d      	ldr	r2, [pc, #308]	@ (8006cf0 <HAL_I2C_Mem_Write+0x1f0>)
 8006bbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bbe:	88f8      	ldrh	r0, [r7, #6]
 8006bc0:	893a      	ldrh	r2, [r7, #8]
 8006bc2:	8979      	ldrh	r1, [r7, #10]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	4603      	mov	r3, r0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fac2 	bl	8007158 <I2C_RequestMemoryWrite>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d052      	beq.n	8006c80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e081      	b.n	8006ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fd50 	bl	8007688 <I2C_WaitOnTXEFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00d      	beq.n	8006c0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d107      	bne.n	8006c06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e06b      	b.n	8006ce2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c24:	3b01      	subs	r3, #1
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d11b      	bne.n	8006c80 <HAL_I2C_Mem_Write+0x180>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d017      	beq.n	8006c80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	781a      	ldrb	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1aa      	bne.n	8006bde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 fd43 	bl	8007718 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00d      	beq.n	8006cb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d107      	bne.n	8006cb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e016      	b.n	8006ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e000      	b.n	8006ce2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006ce0:	2302      	movs	r3, #2
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	00100002 	.word	0x00100002
 8006cf0:	ffff0000 	.word	0xffff0000

08006cf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	@ 0x30
 8006cf8:	af02      	add	r7, sp, #8
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	4608      	mov	r0, r1
 8006cfe:	4611      	mov	r1, r2
 8006d00:	461a      	mov	r2, r3
 8006d02:	4603      	mov	r3, r0
 8006d04:	817b      	strh	r3, [r7, #10]
 8006d06:	460b      	mov	r3, r1
 8006d08:	813b      	strh	r3, [r7, #8]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d0e:	f7fe f919 	bl	8004f44 <HAL_GetTick>
 8006d12:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	f040 8214 	bne.w	800714a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	2319      	movs	r3, #25
 8006d28:	2201      	movs	r2, #1
 8006d2a:	497b      	ldr	r1, [pc, #492]	@ (8006f18 <HAL_I2C_Mem_Read+0x224>)
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fb91 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	e207      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_I2C_Mem_Read+0x56>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e200      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d007      	beq.n	8006d70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2222      	movs	r2, #34	@ 0x22
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2240      	movs	r2, #64	@ 0x40
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da6:	b29a      	uxth	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4a5b      	ldr	r2, [pc, #364]	@ (8006f1c <HAL_I2C_Mem_Read+0x228>)
 8006db0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006db2:	88f8      	ldrh	r0, [r7, #6]
 8006db4:	893a      	ldrh	r2, [r7, #8]
 8006db6:	8979      	ldrh	r1, [r7, #10]
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	9301      	str	r3, [sp, #4]
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 fa5e 	bl	8007284 <I2C_RequestMemoryRead>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e1bc      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d113      	bne.n	8006e02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dda:	2300      	movs	r3, #0
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	695b      	ldr	r3, [r3, #20]
 8006de4:	623b      	str	r3, [r7, #32]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	623b      	str	r3, [r7, #32]
 8006dee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	e190      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d11b      	bne.n	8006e42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
 8006e2c:	61fb      	str	r3, [r7, #28]
 8006e2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e3e:	601a      	str	r2, [r3, #0]
 8006e40:	e170      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d11b      	bne.n	8006e82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	61bb      	str	r3, [r7, #24]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	e150      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e98:	e144      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	f200 80f1 	bhi.w	8007086 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d123      	bne.n	8006ef4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 fc79 	bl	80077a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e145      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006edc:	3b01      	subs	r3, #1
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006ef2:	e117      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d14e      	bne.n	8006f9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	2200      	movs	r2, #0
 8006f04:	4906      	ldr	r1, [pc, #24]	@ (8006f20 <HAL_I2C_Mem_Read+0x22c>)
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 faa4 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d008      	beq.n	8006f24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e11a      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
 8006f16:	bf00      	nop
 8006f18:	00100002 	.word	0x00100002
 8006f1c:	ffff0000 	.word	0xffff0000
 8006f20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	691a      	ldr	r2, [r3, #16]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f98:	e0c4      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	496c      	ldr	r1, [pc, #432]	@ (8007154 <HAL_I2C_Mem_Read+0x460>)
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fa55 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e0cb      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4955      	ldr	r1, [pc, #340]	@ (8007154 <HAL_I2C_Mem_Read+0x460>)
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fa27 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e09d      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800701e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702a:	b2d2      	uxtb	r2, r2
 800702c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007032:	1c5a      	adds	r2, r3, #1
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b29a      	uxth	r2, r3
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007064:	1c5a      	adds	r2, r3, #1
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007084:	e04e      	b.n	8007124 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007088:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fb8c 	bl	80077a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e058      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070b6:	3b01      	subs	r3, #1
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	3b01      	subs	r3, #1
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	f003 0304 	and.w	r3, r3, #4
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d124      	bne.n	8007124 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070de:	2b03      	cmp	r3, #3
 80070e0:	d107      	bne.n	80070f2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070f0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	691a      	ldr	r2, [r3, #16]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007128:	2b00      	cmp	r3, #0
 800712a:	f47f aeb6 	bne.w	8006e9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	e000      	b.n	800714c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800714a:	2302      	movs	r3, #2
  }
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	@ 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	00010004 	.word	0x00010004

08007158 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	461a      	mov	r2, r3
 8007166:	4603      	mov	r3, r0
 8007168:	817b      	strh	r3, [r7, #10]
 800716a:	460b      	mov	r3, r1
 800716c:	813b      	strh	r3, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007180:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	2200      	movs	r2, #0
 800718a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 f960 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a8:	d103      	bne.n	80071b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e05f      	b.n	8007276 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	461a      	mov	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	6a3a      	ldr	r2, [r7, #32]
 80071ca:	492d      	ldr	r1, [pc, #180]	@ (8007280 <I2C_RequestMemoryWrite+0x128>)
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f9bb 	bl	8007548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e04c      	b.n	8007276 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071dc:	2300      	movs	r3, #0
 80071de:	617b      	str	r3, [r7, #20]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	617b      	str	r3, [r7, #20]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f4:	6a39      	ldr	r1, [r7, #32]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fa46 	bl	8007688 <I2C_WaitOnTXEFlagUntilTimeout>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007206:	2b04      	cmp	r3, #4
 8007208:	d107      	bne.n	800721a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007218:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e02b      	b.n	8007276 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d105      	bne.n	8007230 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007224:	893b      	ldrh	r3, [r7, #8]
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	611a      	str	r2, [r3, #16]
 800722e:	e021      	b.n	8007274 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007230:	893b      	ldrh	r3, [r7, #8]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	b29b      	uxth	r3, r3
 8007236:	b2da      	uxtb	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	6a39      	ldr	r1, [r7, #32]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa20 	bl	8007688 <I2C_WaitOnTXEFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00d      	beq.n	800726a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	2b04      	cmp	r3, #4
 8007254:	d107      	bne.n	8007266 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007264:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e005      	b.n	8007276 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800726a:	893b      	ldrh	r3, [r7, #8]
 800726c:	b2da      	uxtb	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3718      	adds	r7, #24
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	00010002 	.word	0x00010002

08007284 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af02      	add	r7, sp, #8
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	4608      	mov	r0, r1
 800728e:	4611      	mov	r1, r2
 8007290:	461a      	mov	r2, r3
 8007292:	4603      	mov	r3, r0
 8007294:	817b      	strh	r3, [r7, #10]
 8007296:	460b      	mov	r3, r1
 8007298:	813b      	strh	r3, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f8c2 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072e4:	d103      	bne.n	80072ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e0aa      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072f2:	897b      	ldrh	r3, [r7, #10]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007300:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	6a3a      	ldr	r2, [r7, #32]
 8007306:	4952      	ldr	r1, [pc, #328]	@ (8007450 <I2C_RequestMemoryRead+0x1cc>)
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f91d 	bl	8007548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e097      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800732e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007330:	6a39      	ldr	r1, [r7, #32]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f9a8 	bl	8007688 <I2C_WaitOnTXEFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007342:	2b04      	cmp	r3, #4
 8007344:	d107      	bne.n	8007356 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007354:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e076      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d105      	bne.n	800736c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007360:	893b      	ldrh	r3, [r7, #8]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	611a      	str	r2, [r3, #16]
 800736a:	e021      	b.n	80073b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800736c:	893b      	ldrh	r3, [r7, #8]
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	b29b      	uxth	r3, r3
 8007372:	b2da      	uxtb	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800737a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800737c:	6a39      	ldr	r1, [r7, #32]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 f982 	bl	8007688 <I2C_WaitOnTXEFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00d      	beq.n	80073a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738e:	2b04      	cmp	r3, #4
 8007390:	d107      	bne.n	80073a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e050      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073a6:	893b      	ldrh	r3, [r7, #8]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b2:	6a39      	ldr	r1, [r7, #32]
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	f000 f967 	bl	8007688 <I2C_WaitOnTXEFlagUntilTimeout>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00d      	beq.n	80073dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d107      	bne.n	80073d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e035      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 f82b 	bl	8007454 <I2C_WaitOnFlagUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00d      	beq.n	8007420 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800740e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007412:	d103      	bne.n	800741c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800741a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e013      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007420:	897b      	ldrh	r3, [r7, #10]
 8007422:	b2db      	uxtb	r3, r3
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	b2da      	uxtb	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	4906      	ldr	r1, [pc, #24]	@ (8007450 <I2C_RequestMemoryRead+0x1cc>)
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f000 f886 	bl	8007548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e000      	b.n	8007448 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	00010002 	.word	0x00010002

08007454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	603b      	str	r3, [r7, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007464:	e048      	b.n	80074f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800746c:	d044      	beq.n	80074f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800746e:	f7fd fd69 	bl	8004f44 <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d302      	bcc.n	8007484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d139      	bne.n	80074f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	0c1b      	lsrs	r3, r3, #16
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10d      	bne.n	80074aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	43da      	mvns	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4013      	ands	r3, r2
 800749a:	b29b      	uxth	r3, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	bf0c      	ite	eq
 80074a0:	2301      	moveq	r3, #1
 80074a2:	2300      	movne	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	e00c      	b.n	80074c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	43da      	mvns	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	4013      	ands	r3, r2
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	bf0c      	ite	eq
 80074bc:	2301      	moveq	r3, #1
 80074be:	2300      	movne	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	461a      	mov	r2, r3
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d116      	bne.n	80074f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e023      	b.n	8007540 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	0c1b      	lsrs	r3, r3, #16
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d10d      	bne.n	800751e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	43da      	mvns	r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	4013      	ands	r3, r2
 800750e:	b29b      	uxth	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf0c      	ite	eq
 8007514:	2301      	moveq	r3, #1
 8007516:	2300      	movne	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	461a      	mov	r2, r3
 800751c:	e00c      	b.n	8007538 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	43da      	mvns	r2, r3
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	4013      	ands	r3, r2
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf0c      	ite	eq
 8007530:	2301      	moveq	r3, #1
 8007532:	2300      	movne	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	429a      	cmp	r2, r3
 800753c:	d093      	beq.n	8007466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
 8007554:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007556:	e071      	b.n	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007566:	d123      	bne.n	80075b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007576:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2220      	movs	r2, #32
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759c:	f043 0204 	orr.w	r2, r3, #4
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e067      	b.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075b6:	d041      	beq.n	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b8:	f7fd fcc4 	bl	8004f44 <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d302      	bcc.n	80075ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d136      	bne.n	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10c      	bne.n	80075f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	43da      	mvns	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf14      	ite	ne
 80075ea:	2301      	movne	r3, #1
 80075ec:	2300      	moveq	r3, #0
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	e00b      	b.n	800760a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	43da      	mvns	r2, r3
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4013      	ands	r3, r2
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	bf14      	ite	ne
 8007604:	2301      	movne	r3, #1
 8007606:	2300      	moveq	r3, #0
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007628:	f043 0220 	orr.w	r2, r3, #32
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e021      	b.n	8007680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10c      	bne.n	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	43da      	mvns	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4013      	ands	r3, r2
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e00b      	b.n	8007678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	699b      	ldr	r3, [r3, #24]
 8007666:	43da      	mvns	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4013      	ands	r3, r2
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f47f af6d 	bne.w	8007558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007694:	e034      	b.n	8007700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f8e3 	bl	8007862 <I2C_IsAcknowledgeFailed>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e034      	b.n	8007710 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076ac:	d028      	beq.n	8007700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076ae:	f7fd fc49 	bl	8004f44 <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d302      	bcc.n	80076c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11d      	bne.n	8007700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ce:	2b80      	cmp	r3, #128	@ 0x80
 80076d0:	d016      	beq.n	8007700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ec:	f043 0220 	orr.w	r2, r3, #32
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e007      	b.n	8007710 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800770a:	2b80      	cmp	r3, #128	@ 0x80
 800770c:	d1c3      	bne.n	8007696 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007724:	e034      	b.n	8007790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f89b 	bl	8007862 <I2C_IsAcknowledgeFailed>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e034      	b.n	80077a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800773c:	d028      	beq.n	8007790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773e:	f7fd fc01 	bl	8004f44 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	429a      	cmp	r2, r3
 800774c:	d302      	bcc.n	8007754 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11d      	bne.n	8007790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	f003 0304 	and.w	r3, r3, #4
 800775e:	2b04      	cmp	r3, #4
 8007760:	d016      	beq.n	8007790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e007      	b.n	80077a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	f003 0304 	and.w	r3, r3, #4
 800779a:	2b04      	cmp	r3, #4
 800779c:	d1c3      	bne.n	8007726 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077b4:	e049      	b.n	800784a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	f003 0310 	and.w	r3, r3, #16
 80077c0:	2b10      	cmp	r3, #16
 80077c2:	d119      	bne.n	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0210 	mvn.w	r2, #16
 80077cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e030      	b.n	800785a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077f8:	f7fd fba4 	bl	8004f44 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	429a      	cmp	r2, r3
 8007806:	d302      	bcc.n	800780e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d11d      	bne.n	800784a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007818:	2b40      	cmp	r3, #64	@ 0x40
 800781a:	d016      	beq.n	800784a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2220      	movs	r2, #32
 8007826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e007      	b.n	800785a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007854:	2b40      	cmp	r3, #64	@ 0x40
 8007856:	d1ae      	bne.n	80077b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007878:	d11b      	bne.n	80078b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007882:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800789e:	f043 0204 	orr.w	r2, r3, #4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80078c6:	4b06      	ldr	r3, [pc, #24]	@ (80078e0 <HAL_PWR_EnableBkUpAccess+0x20>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <HAL_PWR_EnableBkUpAccess+0x24>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80078d2:	687b      	ldr	r3, [r7, #4]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	420e0020 	.word	0x420e0020
 80078e4:	40007000 	.word	0x40007000

080078e8 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80078f2:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <HAL_PWREx_EnableBkUpReg+0x44>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f8:	f7fd fb24 	bl	8004f44 <HAL_GetTick>
 80078fc:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80078fe:	e009      	b.n	8007914 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8007900:	f7fd fb20 	bl	8004f44 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800790e:	d901      	bls.n	8007914 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8007914:	4b06      	ldr	r3, [pc, #24]	@ (8007930 <HAL_PWREx_EnableBkUpReg+0x48>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d1ef      	bne.n	8007900 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	420e00a4 	.word	0x420e00a4
 8007930:	40007000 	.word	0x40007000

08007934 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800793e:	2300      	movs	r3, #0
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4b20      	ldr	r3, [pc, #128]	@ (80079c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007946:	4a1f      	ldr	r2, [pc, #124]	@ (80079c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800794c:	6413      	str	r3, [r2, #64]	@ 0x40
 800794e:	4b1d      	ldr	r3, [pc, #116]	@ (80079c4 <HAL_PWREx_EnableOverDrive+0x90>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800795a:	4b1b      	ldr	r3, [pc, #108]	@ (80079c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007960:	f7fd faf0 	bl	8004f44 <HAL_GetTick>
 8007964:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007966:	e009      	b.n	800797c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007968:	f7fd faec 	bl	8004f44 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007976:	d901      	bls.n	800797c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e01f      	b.n	80079bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800797c:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <HAL_PWREx_EnableOverDrive+0x98>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007988:	d1ee      	bne.n	8007968 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800798a:	4b11      	ldr	r3, [pc, #68]	@ (80079d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800798c:	2201      	movs	r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007990:	f7fd fad8 	bl	8004f44 <HAL_GetTick>
 8007994:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007996:	e009      	b.n	80079ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007998:	f7fd fad4 	bl	8004f44 <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079a6:	d901      	bls.n	80079ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e007      	b.n	80079bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079ac:	4b07      	ldr	r3, [pc, #28]	@ (80079cc <HAL_PWREx_EnableOverDrive+0x98>)
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079b8:	d1ee      	bne.n	8007998 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40023800 	.word	0x40023800
 80079c8:	420e0040 	.word	0x420e0040
 80079cc:	40007000 	.word	0x40007000
 80079d0:	420e0044 	.word	0x420e0044

080079d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0cc      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079e8:	4b68      	ldr	r3, [pc, #416]	@ (8007b8c <HAL_RCC_ClockConfig+0x1b8>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	683a      	ldr	r2, [r7, #0]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d90c      	bls.n	8007a10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f6:	4b65      	ldr	r3, [pc, #404]	@ (8007b8c <HAL_RCC_ClockConfig+0x1b8>)
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	b2d2      	uxtb	r2, r2
 80079fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fe:	4b63      	ldr	r3, [pc, #396]	@ (8007b8c <HAL_RCC_ClockConfig+0x1b8>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d001      	beq.n	8007a10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0b8      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d020      	beq.n	8007a5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0304 	and.w	r3, r3, #4
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a28:	4b59      	ldr	r3, [pc, #356]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	4a58      	ldr	r2, [pc, #352]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0308 	and.w	r3, r3, #8
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a40:	4b53      	ldr	r3, [pc, #332]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	4a52      	ldr	r2, [pc, #328]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a4c:	4b50      	ldr	r3, [pc, #320]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	494d      	ldr	r1, [pc, #308]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d044      	beq.n	8007af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d107      	bne.n	8007a82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a72:	4b47      	ldr	r3, [pc, #284]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d119      	bne.n	8007ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e07f      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d003      	beq.n	8007a92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d107      	bne.n	8007aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a92:	4b3f      	ldr	r3, [pc, #252]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e06f      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e067      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ab2:	4b37      	ldr	r3, [pc, #220]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f023 0203 	bic.w	r2, r3, #3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4934      	ldr	r1, [pc, #208]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ac4:	f7fd fa3e 	bl	8004f44 <HAL_GetTick>
 8007ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aca:	e00a      	b.n	8007ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007acc:	f7fd fa3a 	bl	8004f44 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e04f      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 020c 	and.w	r2, r3, #12
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d1eb      	bne.n	8007acc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007af4:	4b25      	ldr	r3, [pc, #148]	@ (8007b8c <HAL_RCC_ClockConfig+0x1b8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 030f 	and.w	r3, r3, #15
 8007afc:	683a      	ldr	r2, [r7, #0]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d20c      	bcs.n	8007b1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b02:	4b22      	ldr	r3, [pc, #136]	@ (8007b8c <HAL_RCC_ClockConfig+0x1b8>)
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	b2d2      	uxtb	r2, r2
 8007b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0a:	4b20      	ldr	r3, [pc, #128]	@ (8007b8c <HAL_RCC_ClockConfig+0x1b8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d001      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e032      	b.n	8007b82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b28:	4b19      	ldr	r3, [pc, #100]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	4916      	ldr	r1, [pc, #88]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b46:	4b12      	ldr	r3, [pc, #72]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	490e      	ldr	r1, [pc, #56]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b5a:	f000 fb7f 	bl	800825c <HAL_RCC_GetSysClockFreq>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	490a      	ldr	r1, [pc, #40]	@ (8007b94 <HAL_RCC_ClockConfig+0x1c0>)
 8007b6c:	5ccb      	ldrb	r3, [r1, r3]
 8007b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b72:	4a09      	ldr	r2, [pc, #36]	@ (8007b98 <HAL_RCC_ClockConfig+0x1c4>)
 8007b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b76:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <HAL_RCC_ClockConfig+0x1c8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fd f99e 	bl	8004ebc <HAL_InitTick>

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40023c00 	.word	0x40023c00
 8007b90:	40023800 	.word	0x40023800
 8007b94:	080136c0 	.word	0x080136c0
 8007b98:	20000000 	.word	0x20000000
 8007b9c:	2000001c 	.word	0x2000001c

08007ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ba4:	4b03      	ldr	r3, [pc, #12]	@ (8007bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000000 	.word	0x20000000

08007bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bbc:	f7ff fff0 	bl	8007ba0 <HAL_RCC_GetHCLKFreq>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	0a9b      	lsrs	r3, r3, #10
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	4903      	ldr	r1, [pc, #12]	@ (8007bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bce:	5ccb      	ldrb	r3, [r1, r3]
 8007bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40023800 	.word	0x40023800
 8007bdc:	080136d0 	.word	0x080136d0

08007be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007be4:	f7ff ffdc 	bl	8007ba0 <HAL_RCC_GetHCLKFreq>
 8007be8:	4602      	mov	r2, r0
 8007bea:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	0b5b      	lsrs	r3, r3, #13
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	4903      	ldr	r1, [pc, #12]	@ (8007c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bf6:	5ccb      	ldrb	r3, [r1, r3]
 8007bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40023800 	.word	0x40023800
 8007c04:	080136d0 	.word	0x080136d0

08007c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08c      	sub	sp, #48	@ 0x30
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d010      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007c40:	4b6f      	ldr	r3, [pc, #444]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c46:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c4e:	496c      	ldr	r1, [pc, #432]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007c6e:	4b64      	ldr	r3, [pc, #400]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c74:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c7c:	4960      	ldr	r1, [pc, #384]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d017      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c9c:	4b58      	ldr	r3, [pc, #352]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ca2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007caa:	4955      	ldr	r1, [pc, #340]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007cac:	4313      	orrs	r3, r2
 8007cae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cba:	d101      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d101      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d017      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cd8:	4b49      	ldr	r3, [pc, #292]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ce6:	4946      	ldr	r1, [pc, #280]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cf2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cf6:	d101      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007d04:	2301      	movs	r3, #1
 8007d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0320 	and.w	r3, r3, #32
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 808a 	beq.w	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	2300      	movs	r3, #0
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	4b39      	ldr	r3, [pc, #228]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	4a38      	ldr	r2, [pc, #224]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d26:	4b36      	ldr	r3, [pc, #216]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007d32:	4b34      	ldr	r3, [pc, #208]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a33      	ldr	r2, [pc, #204]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d3e:	f7fd f901 	bl	8004f44 <HAL_GetTick>
 8007d42:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007d44:	e008      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d46:	f7fd f8fd 	bl	8004f44 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e278      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007d58:	4b2a      	ldr	r3, [pc, #168]	@ (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d0f0      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d64:	4b26      	ldr	r3, [pc, #152]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d6c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d02f      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d028      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d82:	4b1f      	ldr	r3, [pc, #124]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d8a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007d8e:	2201      	movs	r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d92:	4b1d      	ldr	r3, [pc, #116]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007d98:	4a19      	ldr	r2, [pc, #100]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d9e:	4b18      	ldr	r3, [pc, #96]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da2:	f003 0301 	and.w	r3, r3, #1
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d114      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007daa:	f7fd f8cb 	bl	8004f44 <HAL_GetTick>
 8007dae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db0:	e00a      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db2:	f7fd f8c7 	bl	8004f44 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d901      	bls.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e240      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0ee      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ddc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007de0:	d114      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007de2:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df6:	4902      	ldr	r1, [pc, #8]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	608b      	str	r3, [r1, #8]
 8007dfc:	e00c      	b.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007dfe:	bf00      	nop
 8007e00:	40023800 	.word	0x40023800
 8007e04:	40007000 	.word	0x40007000
 8007e08:	42470e40 	.word	0x42470e40
 8007e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	4a49      	ldr	r2, [pc, #292]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e12:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007e16:	6093      	str	r3, [r2, #8]
 8007e18:	4b47      	ldr	r3, [pc, #284]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e24:	4944      	ldr	r1, [pc, #272]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0310 	and.w	r3, r3, #16
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8007f3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007e3e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e5a:	4937      	ldr	r1, [pc, #220]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007e6e:	4b32      	ldr	r3, [pc, #200]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e74:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e7c:	492e      	ldr	r1, [pc, #184]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d011      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007e90:	4b29      	ldr	r3, [pc, #164]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e96:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e9e:	4926      	ldr	r1, [pc, #152]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eae:	d101      	bne.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00a      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ec6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ece:	491a      	ldr	r1, [pc, #104]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d011      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007ee2:	4b15      	ldr	r3, [pc, #84]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ee8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef0:	4911      	ldr	r1, [pc, #68]	@ (8007f38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f00:	d101      	bne.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007f02:	2301      	movs	r3, #1
 8007f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d005      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f14:	f040 80ff 	bne.w	8008116 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f18:	4b09      	ldr	r3, [pc, #36]	@ (8007f40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f1e:	f7fd f811 	bl	8004f44 <HAL_GetTick>
 8007f22:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f24:	e00e      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f26:	f7fd f80d 	bl	8004f44 <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d907      	bls.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f34:	2303      	movs	r3, #3
 8007f36:	e188      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	424711e0 	.word	0x424711e0
 8007f40:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f44:	4b7e      	ldr	r3, [pc, #504]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1ea      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d009      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d028      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d124      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007f78:	4b71      	ldr	r3, [pc, #452]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f7e:	0c1b      	lsrs	r3, r3, #16
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	3301      	adds	r3, #1
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f90:	0e1b      	lsrs	r3, r3, #24
 8007f92:	f003 030f 	and.w	r3, r3, #15
 8007f96:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	085b      	lsrs	r3, r3, #1
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	431a      	orrs	r2, r3
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	071b      	lsls	r3, r3, #28
 8007fba:	4961      	ldr	r1, [pc, #388]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fd6:	d00a      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d035      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fe8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fec:	d130      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007fee:	4b54      	ldr	r3, [pc, #336]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	f003 0303 	and.w	r3, r3, #3
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	005b      	lsls	r3, r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008000:	4b4f      	ldr	r3, [pc, #316]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008002:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008006:	0f1b      	lsrs	r3, r3, #28
 8008008:	f003 0307 	and.w	r3, r3, #7
 800800c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685a      	ldr	r2, [r3, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	019b      	lsls	r3, r3, #6
 8008018:	431a      	orrs	r2, r3
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	085b      	lsrs	r3, r3, #1
 800801e:	3b01      	subs	r3, #1
 8008020:	041b      	lsls	r3, r3, #16
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	061b      	lsls	r3, r3, #24
 800802a:	431a      	orrs	r2, r3
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	071b      	lsls	r3, r3, #28
 8008030:	4943      	ldr	r1, [pc, #268]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008032:	4313      	orrs	r3, r2
 8008034:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008038:	4b41      	ldr	r3, [pc, #260]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800803a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800803e:	f023 021f 	bic.w	r2, r3, #31
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008046:	3b01      	subs	r3, #1
 8008048:	493d      	ldr	r1, [pc, #244]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008058:	2b00      	cmp	r3, #0
 800805a:	d029      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008060:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008064:	d124      	bne.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008066:	4b36      	ldr	r3, [pc, #216]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800806c:	0c1b      	lsrs	r3, r3, #16
 800806e:	f003 0303 	and.w	r3, r3, #3
 8008072:	3301      	adds	r3, #1
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008078:	4b31      	ldr	r3, [pc, #196]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800807a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800807e:	0f1b      	lsrs	r3, r3, #28
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	019b      	lsls	r3, r3, #6
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	085b      	lsrs	r3, r3, #1
 8008098:	3b01      	subs	r3, #1
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	431a      	orrs	r2, r3
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	061b      	lsls	r3, r3, #24
 80080a2:	431a      	orrs	r2, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	071b      	lsls	r3, r3, #28
 80080a8:	4925      	ldr	r1, [pc, #148]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d016      	beq.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	019b      	lsls	r3, r3, #6
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	68db      	ldr	r3, [r3, #12]
 80080cc:	085b      	lsrs	r3, r3, #1
 80080ce:	3b01      	subs	r3, #1
 80080d0:	041b      	lsls	r3, r3, #16
 80080d2:	431a      	orrs	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	061b      	lsls	r3, r3, #24
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	071b      	lsls	r3, r3, #28
 80080e2:	4917      	ldr	r1, [pc, #92]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80080ea:	4b16      	ldr	r3, [pc, #88]	@ (8008144 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80080ec:	2201      	movs	r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080f0:	f7fc ff28 	bl	8004f44 <HAL_GetTick>
 80080f4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80080f6:	e008      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080f8:	f7fc ff24 	bl	8004f44 <HAL_GetTick>
 80080fc:	4602      	mov	r2, r0
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	2b02      	cmp	r3, #2
 8008104:	d901      	bls.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e09f      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800810a:	4b0d      	ldr	r3, [pc, #52]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0f0      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8008116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008118:	2b01      	cmp	r3, #1
 800811a:	f040 8095 	bne.w	8008248 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800811e:	4b0a      	ldr	r3, [pc, #40]	@ (8008148 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008120:	2200      	movs	r2, #0
 8008122:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008124:	f7fc ff0e 	bl	8004f44 <HAL_GetTick>
 8008128:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800812a:	e00f      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800812c:	f7fc ff0a 	bl	8004f44 <HAL_GetTick>
 8008130:	4602      	mov	r2, r0
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	1ad3      	subs	r3, r2, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d908      	bls.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e085      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800
 8008144:	42470068 	.word	0x42470068
 8008148:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800814c:	4b41      	ldr	r3, [pc, #260]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008158:	d0e8      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0304 	and.w	r3, r3, #4
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02b      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817e:	2b00      	cmp	r3, #0
 8008180:	d127      	bne.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008182:	4b34      	ldr	r3, [pc, #208]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008188:	0c1b      	lsrs	r3, r3, #16
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	3301      	adds	r3, #1
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	019b      	lsls	r3, r3, #6
 800819e:	431a      	orrs	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	3b01      	subs	r3, #1
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ae:	061b      	lsls	r3, r3, #24
 80081b0:	4928      	ldr	r1, [pc, #160]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80081b8:	4b26      	ldr	r3, [pc, #152]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80081ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081be:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c6:	3b01      	subs	r3, #1
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	4922      	ldr	r1, [pc, #136]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d01d      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081e6:	d118      	bne.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80081e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ee:	0e1b      	lsrs	r3, r3, #24
 80081f0:	f003 030f 	and.w	r3, r3, #15
 80081f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	019b      	lsls	r3, r3, #6
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	085b      	lsrs	r3, r3, #1
 8008208:	3b01      	subs	r3, #1
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	431a      	orrs	r2, r3
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	061b      	lsls	r3, r3, #24
 8008212:	4910      	ldr	r1, [pc, #64]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008214:	4313      	orrs	r3, r2
 8008216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800821a:	4b0f      	ldr	r3, [pc, #60]	@ (8008258 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800821c:	2201      	movs	r2, #1
 800821e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008220:	f7fc fe90 	bl	8004f44 <HAL_GetTick>
 8008224:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008226:	e008      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008228:	f7fc fe8c 	bl	8004f44 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e007      	b.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800823a:	4b06      	ldr	r3, [pc, #24]	@ (8008254 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008246:	d1ef      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3730      	adds	r7, #48	@ 0x30
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	40023800 	.word	0x40023800
 8008258:	42470070 	.word	0x42470070

0800825c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800825c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008260:	b0ae      	sub	sp, #184	@ 0xb8
 8008262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008270:	2300      	movs	r3, #0
 8008272:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008282:	4bcb      	ldr	r3, [pc, #812]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f003 030c 	and.w	r3, r3, #12
 800828a:	2b0c      	cmp	r3, #12
 800828c:	f200 8206 	bhi.w	800869c <HAL_RCC_GetSysClockFreq+0x440>
 8008290:	a201      	add	r2, pc, #4	@ (adr r2, 8008298 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082cd 	.word	0x080082cd
 800829c:	0800869d 	.word	0x0800869d
 80082a0:	0800869d 	.word	0x0800869d
 80082a4:	0800869d 	.word	0x0800869d
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	0800869d 	.word	0x0800869d
 80082b0:	0800869d 	.word	0x0800869d
 80082b4:	0800869d 	.word	0x0800869d
 80082b8:	080082dd 	.word	0x080082dd
 80082bc:	0800869d 	.word	0x0800869d
 80082c0:	0800869d 	.word	0x0800869d
 80082c4:	0800869d 	.word	0x0800869d
 80082c8:	080084cd 	.word	0x080084cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082cc:	4bb9      	ldr	r3, [pc, #740]	@ (80085b4 <HAL_RCC_GetSysClockFreq+0x358>)
 80082ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80082d2:	e1e7      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082d4:	4bb8      	ldr	r3, [pc, #736]	@ (80085b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80082d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80082da:	e1e3      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082dc:	4bb4      	ldr	r3, [pc, #720]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082e8:	4bb1      	ldr	r3, [pc, #708]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d071      	beq.n	80083d8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082f4:	4bae      	ldr	r3, [pc, #696]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	099b      	lsrs	r3, r3, #6
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008300:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800830c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008310:	2300      	movs	r3, #0
 8008312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008316:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800831a:	4622      	mov	r2, r4
 800831c:	462b      	mov	r3, r5
 800831e:	f04f 0000 	mov.w	r0, #0
 8008322:	f04f 0100 	mov.w	r1, #0
 8008326:	0159      	lsls	r1, r3, #5
 8008328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800832c:	0150      	lsls	r0, r2, #5
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4621      	mov	r1, r4
 8008334:	1a51      	subs	r1, r2, r1
 8008336:	6439      	str	r1, [r7, #64]	@ 0x40
 8008338:	4629      	mov	r1, r5
 800833a:	eb63 0301 	sbc.w	r3, r3, r1
 800833e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008340:	f04f 0200 	mov.w	r2, #0
 8008344:	f04f 0300 	mov.w	r3, #0
 8008348:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800834c:	4649      	mov	r1, r9
 800834e:	018b      	lsls	r3, r1, #6
 8008350:	4641      	mov	r1, r8
 8008352:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008356:	4641      	mov	r1, r8
 8008358:	018a      	lsls	r2, r1, #6
 800835a:	4641      	mov	r1, r8
 800835c:	1a51      	subs	r1, r2, r1
 800835e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008360:	4649      	mov	r1, r9
 8008362:	eb63 0301 	sbc.w	r3, r3, r1
 8008366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008368:	f04f 0200 	mov.w	r2, #0
 800836c:	f04f 0300 	mov.w	r3, #0
 8008370:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008374:	4649      	mov	r1, r9
 8008376:	00cb      	lsls	r3, r1, #3
 8008378:	4641      	mov	r1, r8
 800837a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800837e:	4641      	mov	r1, r8
 8008380:	00ca      	lsls	r2, r1, #3
 8008382:	4610      	mov	r0, r2
 8008384:	4619      	mov	r1, r3
 8008386:	4603      	mov	r3, r0
 8008388:	4622      	mov	r2, r4
 800838a:	189b      	adds	r3, r3, r2
 800838c:	633b      	str	r3, [r7, #48]	@ 0x30
 800838e:	462b      	mov	r3, r5
 8008390:	460a      	mov	r2, r1
 8008392:	eb42 0303 	adc.w	r3, r2, r3
 8008396:	637b      	str	r3, [r7, #52]	@ 0x34
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80083a4:	4629      	mov	r1, r5
 80083a6:	024b      	lsls	r3, r1, #9
 80083a8:	4621      	mov	r1, r4
 80083aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083ae:	4621      	mov	r1, r4
 80083b0:	024a      	lsls	r2, r1, #9
 80083b2:	4610      	mov	r0, r2
 80083b4:	4619      	mov	r1, r3
 80083b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80083ba:	2200      	movs	r2, #0
 80083bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80083c4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80083c8:	f7f8 fddc 	bl	8000f84 <__aeabi_uldivmod>
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	4613      	mov	r3, r2
 80083d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083d6:	e067      	b.n	80084a8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083d8:	4b75      	ldr	r3, [pc, #468]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	099b      	lsrs	r3, r3, #6
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083e4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80083e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80083f2:	2300      	movs	r3, #0
 80083f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083f6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80083fa:	4622      	mov	r2, r4
 80083fc:	462b      	mov	r3, r5
 80083fe:	f04f 0000 	mov.w	r0, #0
 8008402:	f04f 0100 	mov.w	r1, #0
 8008406:	0159      	lsls	r1, r3, #5
 8008408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800840c:	0150      	lsls	r0, r2, #5
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4621      	mov	r1, r4
 8008414:	1a51      	subs	r1, r2, r1
 8008416:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008418:	4629      	mov	r1, r5
 800841a:	eb63 0301 	sbc.w	r3, r3, r1
 800841e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008420:	f04f 0200 	mov.w	r2, #0
 8008424:	f04f 0300 	mov.w	r3, #0
 8008428:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800842c:	4649      	mov	r1, r9
 800842e:	018b      	lsls	r3, r1, #6
 8008430:	4641      	mov	r1, r8
 8008432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008436:	4641      	mov	r1, r8
 8008438:	018a      	lsls	r2, r1, #6
 800843a:	4641      	mov	r1, r8
 800843c:	ebb2 0a01 	subs.w	sl, r2, r1
 8008440:	4649      	mov	r1, r9
 8008442:	eb63 0b01 	sbc.w	fp, r3, r1
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	f04f 0300 	mov.w	r3, #0
 800844e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008452:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800845a:	4692      	mov	sl, r2
 800845c:	469b      	mov	fp, r3
 800845e:	4623      	mov	r3, r4
 8008460:	eb1a 0303 	adds.w	r3, sl, r3
 8008464:	623b      	str	r3, [r7, #32]
 8008466:	462b      	mov	r3, r5
 8008468:	eb4b 0303 	adc.w	r3, fp, r3
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	f04f 0300 	mov.w	r3, #0
 8008476:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800847a:	4629      	mov	r1, r5
 800847c:	028b      	lsls	r3, r1, #10
 800847e:	4621      	mov	r1, r4
 8008480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008484:	4621      	mov	r1, r4
 8008486:	028a      	lsls	r2, r1, #10
 8008488:	4610      	mov	r0, r2
 800848a:	4619      	mov	r1, r3
 800848c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008490:	2200      	movs	r2, #0
 8008492:	673b      	str	r3, [r7, #112]	@ 0x70
 8008494:	677a      	str	r2, [r7, #116]	@ 0x74
 8008496:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800849a:	f7f8 fd73 	bl	8000f84 <__aeabi_uldivmod>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4613      	mov	r3, r2
 80084a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80084a8:	4b41      	ldr	r3, [pc, #260]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	0c1b      	lsrs	r3, r3, #16
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	3301      	adds	r3, #1
 80084b4:	005b      	lsls	r3, r3, #1
 80084b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80084ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80084be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80084c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80084ca:	e0eb      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80084cc:	4b38      	ldr	r3, [pc, #224]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80084d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80084d8:	4b35      	ldr	r3, [pc, #212]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d06b      	beq.n	80085bc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80084e4:	4b32      	ldr	r3, [pc, #200]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0x354>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	099b      	lsrs	r3, r3, #6
 80084ea:	2200      	movs	r2, #0
 80084ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80084f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80084f8:	2300      	movs	r3, #0
 80084fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80084fc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8008500:	4622      	mov	r2, r4
 8008502:	462b      	mov	r3, r5
 8008504:	f04f 0000 	mov.w	r0, #0
 8008508:	f04f 0100 	mov.w	r1, #0
 800850c:	0159      	lsls	r1, r3, #5
 800850e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008512:	0150      	lsls	r0, r2, #5
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4621      	mov	r1, r4
 800851a:	1a51      	subs	r1, r2, r1
 800851c:	61b9      	str	r1, [r7, #24]
 800851e:	4629      	mov	r1, r5
 8008520:	eb63 0301 	sbc.w	r3, r3, r1
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	f04f 0200 	mov.w	r2, #0
 800852a:	f04f 0300 	mov.w	r3, #0
 800852e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8008532:	4659      	mov	r1, fp
 8008534:	018b      	lsls	r3, r1, #6
 8008536:	4651      	mov	r1, sl
 8008538:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800853c:	4651      	mov	r1, sl
 800853e:	018a      	lsls	r2, r1, #6
 8008540:	4651      	mov	r1, sl
 8008542:	ebb2 0801 	subs.w	r8, r2, r1
 8008546:	4659      	mov	r1, fp
 8008548:	eb63 0901 	sbc.w	r9, r3, r1
 800854c:	f04f 0200 	mov.w	r2, #0
 8008550:	f04f 0300 	mov.w	r3, #0
 8008554:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008558:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800855c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008560:	4690      	mov	r8, r2
 8008562:	4699      	mov	r9, r3
 8008564:	4623      	mov	r3, r4
 8008566:	eb18 0303 	adds.w	r3, r8, r3
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	462b      	mov	r3, r5
 800856e:	eb49 0303 	adc.w	r3, r9, r3
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008580:	4629      	mov	r1, r5
 8008582:	024b      	lsls	r3, r1, #9
 8008584:	4621      	mov	r1, r4
 8008586:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800858a:	4621      	mov	r1, r4
 800858c:	024a      	lsls	r2, r1, #9
 800858e:	4610      	mov	r0, r2
 8008590:	4619      	mov	r1, r3
 8008592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008596:	2200      	movs	r2, #0
 8008598:	65bb      	str	r3, [r7, #88]	@ 0x58
 800859a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800859c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80085a0:	f7f8 fcf0 	bl	8000f84 <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4613      	mov	r3, r2
 80085aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80085ae:	e065      	b.n	800867c <HAL_RCC_GetSysClockFreq+0x420>
 80085b0:	40023800 	.word	0x40023800
 80085b4:	00f42400 	.word	0x00f42400
 80085b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085bc:	4b3d      	ldr	r3, [pc, #244]	@ (80086b4 <HAL_RCC_GetSysClockFreq+0x458>)
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	099b      	lsrs	r3, r3, #6
 80085c2:	2200      	movs	r2, #0
 80085c4:	4618      	mov	r0, r3
 80085c6:	4611      	mov	r1, r2
 80085c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80085cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80085ce:	2300      	movs	r3, #0
 80085d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80085d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80085d6:	4642      	mov	r2, r8
 80085d8:	464b      	mov	r3, r9
 80085da:	f04f 0000 	mov.w	r0, #0
 80085de:	f04f 0100 	mov.w	r1, #0
 80085e2:	0159      	lsls	r1, r3, #5
 80085e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80085e8:	0150      	lsls	r0, r2, #5
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4641      	mov	r1, r8
 80085f0:	1a51      	subs	r1, r2, r1
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	4649      	mov	r1, r9
 80085f6:	eb63 0301 	sbc.w	r3, r3, r1
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008608:	4659      	mov	r1, fp
 800860a:	018b      	lsls	r3, r1, #6
 800860c:	4651      	mov	r1, sl
 800860e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008612:	4651      	mov	r1, sl
 8008614:	018a      	lsls	r2, r1, #6
 8008616:	4651      	mov	r1, sl
 8008618:	1a54      	subs	r4, r2, r1
 800861a:	4659      	mov	r1, fp
 800861c:	eb63 0501 	sbc.w	r5, r3, r1
 8008620:	f04f 0200 	mov.w	r2, #0
 8008624:	f04f 0300 	mov.w	r3, #0
 8008628:	00eb      	lsls	r3, r5, #3
 800862a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800862e:	00e2      	lsls	r2, r4, #3
 8008630:	4614      	mov	r4, r2
 8008632:	461d      	mov	r5, r3
 8008634:	4643      	mov	r3, r8
 8008636:	18e3      	adds	r3, r4, r3
 8008638:	603b      	str	r3, [r7, #0]
 800863a:	464b      	mov	r3, r9
 800863c:	eb45 0303 	adc.w	r3, r5, r3
 8008640:	607b      	str	r3, [r7, #4]
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800864e:	4629      	mov	r1, r5
 8008650:	028b      	lsls	r3, r1, #10
 8008652:	4621      	mov	r1, r4
 8008654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008658:	4621      	mov	r1, r4
 800865a:	028a      	lsls	r2, r1, #10
 800865c:	4610      	mov	r0, r2
 800865e:	4619      	mov	r1, r3
 8008660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008664:	2200      	movs	r2, #0
 8008666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008668:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800866a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800866e:	f7f8 fc89 	bl	8000f84 <__aeabi_uldivmod>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	4613      	mov	r3, r2
 8008678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800867c:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <HAL_RCC_GetSysClockFreq+0x458>)
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	0f1b      	lsrs	r3, r3, #28
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800868a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800868e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008692:	fbb2 f3f3 	udiv	r3, r2, r3
 8008696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800869a:	e003      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800869e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80086a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	37b8      	adds	r7, #184	@ 0xb8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086b2:	bf00      	nop
 80086b4:	40023800 	.word	0x40023800
 80086b8:	00f42400 	.word	0x00f42400

080086bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e28d      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 8083 	beq.w	80087e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086dc:	4b94      	ldr	r3, [pc, #592]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 030c 	and.w	r3, r3, #12
 80086e4:	2b04      	cmp	r3, #4
 80086e6:	d019      	beq.n	800871c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80086e8:	4b91      	ldr	r3, [pc, #580]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 030c 	and.w	r3, r3, #12
        || \
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d106      	bne.n	8008702 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80086f4:	4b8e      	ldr	r3, [pc, #568]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008700:	d00c      	beq.n	800871c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008702:	4b8b      	ldr	r3, [pc, #556]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800870a:	2b0c      	cmp	r3, #12
 800870c:	d112      	bne.n	8008734 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800870e:	4b88      	ldr	r3, [pc, #544]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008716:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800871a:	d10b      	bne.n	8008734 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800871c:	4b84      	ldr	r3, [pc, #528]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d05b      	beq.n	80087e0 <HAL_RCC_OscConfig+0x124>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d157      	bne.n	80087e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e25a      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800873c:	d106      	bne.n	800874c <HAL_RCC_OscConfig+0x90>
 800873e:	4b7c      	ldr	r3, [pc, #496]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a7b      	ldr	r2, [pc, #492]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	e01d      	b.n	8008788 <HAL_RCC_OscConfig+0xcc>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008754:	d10c      	bne.n	8008770 <HAL_RCC_OscConfig+0xb4>
 8008756:	4b76      	ldr	r3, [pc, #472]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a75      	ldr	r2, [pc, #468]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 800875c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	4b73      	ldr	r3, [pc, #460]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a72      	ldr	r2, [pc, #456]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	e00b      	b.n	8008788 <HAL_RCC_OscConfig+0xcc>
 8008770:	4b6f      	ldr	r3, [pc, #444]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a6e      	ldr	r2, [pc, #440]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800877a:	6013      	str	r3, [r2, #0]
 800877c:	4b6c      	ldr	r3, [pc, #432]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a6b      	ldr	r2, [pc, #428]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008786:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d013      	beq.n	80087b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008790:	f7fc fbd8 	bl	8004f44 <HAL_GetTick>
 8008794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008798:	f7fc fbd4 	bl	8004f44 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b64      	cmp	r3, #100	@ 0x64
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e21f      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087aa:	4b61      	ldr	r3, [pc, #388]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HAL_RCC_OscConfig+0xdc>
 80087b6:	e014      	b.n	80087e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b8:	f7fc fbc4 	bl	8004f44 <HAL_GetTick>
 80087bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087c0:	f7fc fbc0 	bl	8004f44 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b64      	cmp	r3, #100	@ 0x64
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e20b      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087d2:	4b57      	ldr	r3, [pc, #348]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1f0      	bne.n	80087c0 <HAL_RCC_OscConfig+0x104>
 80087de:	e000      	b.n	80087e2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d06f      	beq.n	80088ce <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80087ee:	4b50      	ldr	r3, [pc, #320]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 030c 	and.w	r3, r3, #12
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d017      	beq.n	800882a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80087fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 030c 	and.w	r3, r3, #12
        || \
 8008802:	2b08      	cmp	r3, #8
 8008804:	d105      	bne.n	8008812 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008806:	4b4a      	ldr	r3, [pc, #296]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00b      	beq.n	800882a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008812:	4b47      	ldr	r3, [pc, #284]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800881a:	2b0c      	cmp	r3, #12
 800881c:	d11c      	bne.n	8008858 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800881e:	4b44      	ldr	r3, [pc, #272]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d116      	bne.n	8008858 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800882a:	4b41      	ldr	r3, [pc, #260]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d005      	beq.n	8008842 <HAL_RCC_OscConfig+0x186>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d001      	beq.n	8008842 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e1d3      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008842:	4b3b      	ldr	r3, [pc, #236]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	4937      	ldr	r1, [pc, #220]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008852:	4313      	orrs	r3, r2
 8008854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008856:	e03a      	b.n	80088ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d020      	beq.n	80088a2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008860:	4b34      	ldr	r3, [pc, #208]	@ (8008934 <HAL_RCC_OscConfig+0x278>)
 8008862:	2201      	movs	r2, #1
 8008864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008866:	f7fc fb6d 	bl	8004f44 <HAL_GetTick>
 800886a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800886e:	f7fc fb69 	bl	8004f44 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e1b4      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008880:	4b2b      	ldr	r3, [pc, #172]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f0      	beq.n	800886e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888c:	4b28      	ldr	r3, [pc, #160]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	4925      	ldr	r1, [pc, #148]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 800889c:	4313      	orrs	r3, r2
 800889e:	600b      	str	r3, [r1, #0]
 80088a0:	e015      	b.n	80088ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088a2:	4b24      	ldr	r3, [pc, #144]	@ (8008934 <HAL_RCC_OscConfig+0x278>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a8:	f7fc fb4c 	bl	8004f44 <HAL_GetTick>
 80088ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ae:	e008      	b.n	80088c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b0:	f7fc fb48 	bl	8004f44 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d901      	bls.n	80088c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80088be:	2303      	movs	r3, #3
 80088c0:	e193      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1f0      	bne.n	80088b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0308 	and.w	r3, r3, #8
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d036      	beq.n	8008948 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d016      	beq.n	8008910 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088e2:	4b15      	ldr	r3, [pc, #84]	@ (8008938 <HAL_RCC_OscConfig+0x27c>)
 80088e4:	2201      	movs	r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e8:	f7fc fb2c 	bl	8004f44 <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f0:	f7fc fb28 	bl	8004f44 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e173      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008902:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <HAL_RCC_OscConfig+0x274>)
 8008904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0f0      	beq.n	80088f0 <HAL_RCC_OscConfig+0x234>
 800890e:	e01b      	b.n	8008948 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008910:	4b09      	ldr	r3, [pc, #36]	@ (8008938 <HAL_RCC_OscConfig+0x27c>)
 8008912:	2200      	movs	r2, #0
 8008914:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008916:	f7fc fb15 	bl	8004f44 <HAL_GetTick>
 800891a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800891c:	e00e      	b.n	800893c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800891e:	f7fc fb11 	bl	8004f44 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	2b02      	cmp	r3, #2
 800892a:	d907      	bls.n	800893c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e15c      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
 8008930:	40023800 	.word	0x40023800
 8008934:	42470000 	.word	0x42470000
 8008938:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800893c:	4b8a      	ldr	r3, [pc, #552]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 800893e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1ea      	bne.n	800891e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 8097 	beq.w	8008a84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800895a:	4b83      	ldr	r3, [pc, #524]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10f      	bne.n	8008986 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 800896c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008974:	6413      	str	r3, [r2, #64]	@ 0x40
 8008976:	4b7c      	ldr	r3, [pc, #496]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800897a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800897e:	60bb      	str	r3, [r7, #8]
 8008980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008982:	2301      	movs	r3, #1
 8008984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008986:	4b79      	ldr	r3, [pc, #484]	@ (8008b6c <HAL_RCC_OscConfig+0x4b0>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800898e:	2b00      	cmp	r3, #0
 8008990:	d118      	bne.n	80089c4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008992:	4b76      	ldr	r3, [pc, #472]	@ (8008b6c <HAL_RCC_OscConfig+0x4b0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a75      	ldr	r2, [pc, #468]	@ (8008b6c <HAL_RCC_OscConfig+0x4b0>)
 8008998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800899c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800899e:	f7fc fad1 	bl	8004f44 <HAL_GetTick>
 80089a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089a6:	f7fc facd 	bl	8004f44 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e118      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b8:	4b6c      	ldr	r3, [pc, #432]	@ (8008b6c <HAL_RCC_OscConfig+0x4b0>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d0f0      	beq.n	80089a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d106      	bne.n	80089da <HAL_RCC_OscConfig+0x31e>
 80089cc:	4b66      	ldr	r3, [pc, #408]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d0:	4a65      	ldr	r2, [pc, #404]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089d8:	e01c      	b.n	8008a14 <HAL_RCC_OscConfig+0x358>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d10c      	bne.n	80089fc <HAL_RCC_OscConfig+0x340>
 80089e2:	4b61      	ldr	r3, [pc, #388]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e6:	4a60      	ldr	r2, [pc, #384]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089e8:	f043 0304 	orr.w	r3, r3, #4
 80089ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ee:	4b5e      	ldr	r3, [pc, #376]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f2:	4a5d      	ldr	r2, [pc, #372]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089f4:	f043 0301 	orr.w	r3, r3, #1
 80089f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80089fa:	e00b      	b.n	8008a14 <HAL_RCC_OscConfig+0x358>
 80089fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 80089fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a00:	4a59      	ldr	r2, [pc, #356]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8008a08:	4b57      	ldr	r3, [pc, #348]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a0c:	4a56      	ldr	r2, [pc, #344]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a0e:	f023 0304 	bic.w	r3, r3, #4
 8008a12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d015      	beq.n	8008a48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a1c:	f7fc fa92 	bl	8004f44 <HAL_GetTick>
 8008a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a22:	e00a      	b.n	8008a3a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a24:	f7fc fa8e 	bl	8004f44 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e0d7      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0ee      	beq.n	8008a24 <HAL_RCC_OscConfig+0x368>
 8008a46:	e014      	b.n	8008a72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a48:	f7fc fa7c 	bl	8004f44 <HAL_GetTick>
 8008a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a4e:	e00a      	b.n	8008a66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a50:	f7fc fa78 	bl	8004f44 <HAL_GetTick>
 8008a54:	4602      	mov	r2, r0
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	1ad3      	subs	r3, r2, r3
 8008a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008a62:	2303      	movs	r3, #3
 8008a64:	e0c1      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a66:	4b40      	ldr	r3, [pc, #256]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1ee      	bne.n	8008a50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d105      	bne.n	8008a84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a78:	4b3b      	ldr	r3, [pc, #236]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a82:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 80ad 	beq.w	8008be8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a8e:	4b36      	ldr	r3, [pc, #216]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f003 030c 	and.w	r3, r3, #12
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d060      	beq.n	8008b5c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d145      	bne.n	8008b2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aa2:	4b33      	ldr	r3, [pc, #204]	@ (8008b70 <HAL_RCC_OscConfig+0x4b4>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aa8:	f7fc fa4c 	bl	8004f44 <HAL_GetTick>
 8008aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aae:	e008      	b.n	8008ac2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ab0:	f7fc fa48 	bl	8004f44 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d901      	bls.n	8008ac2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e093      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ac2:	4b29      	ldr	r3, [pc, #164]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1f0      	bne.n	8008ab0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69da      	ldr	r2, [r3, #28]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008adc:	019b      	lsls	r3, r3, #6
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	085b      	lsrs	r3, r3, #1
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	431a      	orrs	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	061b      	lsls	r3, r3, #24
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af8:	071b      	lsls	r3, r3, #28
 8008afa:	491b      	ldr	r1, [pc, #108]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b00:	4b1b      	ldr	r3, [pc, #108]	@ (8008b70 <HAL_RCC_OscConfig+0x4b4>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b06:	f7fc fa1d 	bl	8004f44 <HAL_GetTick>
 8008b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b0c:	e008      	b.n	8008b20 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b0e:	f7fc fa19 	bl	8004f44 <HAL_GetTick>
 8008b12:	4602      	mov	r2, r0
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d901      	bls.n	8008b20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	e064      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b20:	4b11      	ldr	r3, [pc, #68]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d0f0      	beq.n	8008b0e <HAL_RCC_OscConfig+0x452>
 8008b2c:	e05c      	b.n	8008be8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b2e:	4b10      	ldr	r3, [pc, #64]	@ (8008b70 <HAL_RCC_OscConfig+0x4b4>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b34:	f7fc fa06 	bl	8004f44 <HAL_GetTick>
 8008b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b3a:	e008      	b.n	8008b4e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b3c:	f7fc fa02 	bl	8004f44 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d901      	bls.n	8008b4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008b4a:	2303      	movs	r3, #3
 8008b4c:	e04d      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b4e:	4b06      	ldr	r3, [pc, #24]	@ (8008b68 <HAL_RCC_OscConfig+0x4ac>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f0      	bne.n	8008b3c <HAL_RCC_OscConfig+0x480>
 8008b5a:	e045      	b.n	8008be8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d107      	bne.n	8008b74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	e040      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
 8008b68:	40023800 	.word	0x40023800
 8008b6c:	40007000 	.word	0x40007000
 8008b70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b74:	4b1f      	ldr	r3, [pc, #124]	@ (8008bf4 <HAL_RCC_OscConfig+0x538>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d030      	beq.n	8008be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d129      	bne.n	8008be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d122      	bne.n	8008be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008baa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d119      	bne.n	8008be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bba:	085b      	lsrs	r3, r3, #1
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d10f      	bne.n	8008be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d107      	bne.n	8008be4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d001      	beq.n	8008be8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	40023800 	.word	0x40023800

08008bf8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e073      	b.n	8008cf2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	7f5b      	ldrb	r3, [r3, #29]
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d105      	bne.n	8008c20 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7fa fcea 	bl	80035f4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b10      	cmp	r3, #16
 8008c32:	d055      	beq.n	8008ce0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	22ca      	movs	r2, #202	@ 0xca
 8008c3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2253      	movs	r2, #83	@ 0x53
 8008c42:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 f87f 	bl	8008d48 <RTC_EnterInitMode>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008c4e:	7bfb      	ldrb	r3, [r7, #15]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d12c      	bne.n	8008cae <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008c62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c66:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	6899      	ldr	r1, [r3, #8]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	430a      	orrs	r2, r1
 8008c84:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	68d2      	ldr	r2, [r2, #12]
 8008c8e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6919      	ldr	r1, [r3, #16]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	041a      	lsls	r2, r3, #16
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f886 	bl	8008db6 <RTC_ExitInitMode>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d110      	bne.n	8008cd6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008cc2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699a      	ldr	r2, [r3, #24]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	430a      	orrs	r2, r1
 8008cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	22ff      	movs	r2, #255	@ 0xff
 8008cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8008cde:	e001      	b.n	8008ce4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8008d44 <HAL_RTC_WaitForSynchro+0x48>)
 8008d0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d10:	f7fc f918 	bl	8004f44 <HAL_GetTick>
 8008d14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d16:	e009      	b.n	8008d2c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d18:	f7fc f914 	bl	8004f44 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d26:	d901      	bls.n	8008d2c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e007      	b.n	8008d3c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d0ee      	beq.n	8008d18 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	00017f5f 	.word	0x00017f5f

08008d48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d122      	bne.n	8008dac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008d74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d76:	f7fc f8e5 	bl	8004f44 <HAL_GetTick>
 8008d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008d7c:	e00c      	b.n	8008d98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d7e:	f7fc f8e1 	bl	8004f44 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d8c:	d904      	bls.n	8008d98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2204      	movs	r2, #4
 8008d92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <RTC_EnterInitMode+0x64>
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d1e8      	bne.n	8008d7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3710      	adds	r7, #16
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008db6:	b580      	push	{r7, lr}
 8008db8:	b084      	sub	sp, #16
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008dd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff ff8b 	bl	8008cfc <HAL_RTC_WaitForSynchro>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d004      	beq.n	8008df6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2204      	movs	r2, #4
 8008df0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e07b      	b.n	8008f0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d108      	bne.n	8008e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e22:	d009      	beq.n	8008e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	61da      	str	r2, [r3, #28]
 8008e2a:	e005      	b.n	8008e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d106      	bne.n	8008e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fa fc64 	bl	8003720 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e80:	431a      	orrs	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	f003 0302 	and.w	r3, r3, #2
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	69db      	ldr	r3, [r3, #28]
 8008eae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ebc:	ea42 0103 	orr.w	r1, r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ec4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	0c1b      	lsrs	r3, r3, #16
 8008ed6:	f003 0104 	and.w	r1, r3, #4
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	f003 0210 	and.w	r2, r3, #16
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e041      	b.n	8008fa8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d106      	bne.n	8008f3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7fa ffc5 	bl	8003ec8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2202      	movs	r2, #2
 8008f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4610      	mov	r0, r2
 8008f52:	f000 fa7d 	bl	8009450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b085      	sub	sp, #20
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d001      	beq.n	8008fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e04e      	b.n	8009066 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0201 	orr.w	r2, r2, #1
 8008fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4a23      	ldr	r2, [pc, #140]	@ (8009074 <HAL_TIM_Base_Start_IT+0xc4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d022      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff2:	d01d      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8009078 <HAL_TIM_Base_Start_IT+0xc8>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d018      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a1e      	ldr	r2, [pc, #120]	@ (800907c <HAL_TIM_Base_Start_IT+0xcc>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d013      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a1c      	ldr	r2, [pc, #112]	@ (8009080 <HAL_TIM_Base_Start_IT+0xd0>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d00e      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1b      	ldr	r2, [pc, #108]	@ (8009084 <HAL_TIM_Base_Start_IT+0xd4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d009      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a19      	ldr	r2, [pc, #100]	@ (8009088 <HAL_TIM_Base_Start_IT+0xd8>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d004      	beq.n	8009030 <HAL_TIM_Base_Start_IT+0x80>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a18      	ldr	r2, [pc, #96]	@ (800908c <HAL_TIM_Base_Start_IT+0xdc>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d111      	bne.n	8009054 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b06      	cmp	r3, #6
 8009040:	d010      	beq.n	8009064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f042 0201 	orr.w	r2, r2, #1
 8009050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009052:	e007      	b.n	8009064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f042 0201 	orr.w	r2, r2, #1
 8009062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	40010000 	.word	0x40010000
 8009078:	40000400 	.word	0x40000400
 800907c:	40000800 	.word	0x40000800
 8009080:	40000c00 	.word	0x40000c00
 8009084:	40010400 	.word	0x40010400
 8009088:	40014000 	.word	0x40014000
 800908c:	40001800 	.word	0x40001800

08009090 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d020      	beq.n	80090f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f003 0302 	and.w	r3, r3, #2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01b      	beq.n	80090f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f06f 0202 	mvn.w	r2, #2
 80090c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f999 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 80090e0:	e005      	b.n	80090ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f98b 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 f99c 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	f003 0304 	and.w	r3, r3, #4
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d020      	beq.n	8009140 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f003 0304 	and.w	r3, r3, #4
 8009104:	2b00      	cmp	r3, #0
 8009106:	d01b      	beq.n	8009140 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f06f 0204 	mvn.w	r2, #4
 8009110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f973 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 800912c:	e005      	b.n	800913a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f965 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f976 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d020      	beq.n	800918c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f003 0308 	and.w	r3, r3, #8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d01b      	beq.n	800918c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f06f 0208 	mvn.w	r2, #8
 800915c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2204      	movs	r2, #4
 8009162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	f003 0303 	and.w	r3, r3, #3
 800916e:	2b00      	cmp	r3, #0
 8009170:	d003      	beq.n	800917a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f94d 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 8009178:	e005      	b.n	8009186 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f93f 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f950 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	f003 0310 	and.w	r3, r3, #16
 8009192:	2b00      	cmp	r3, #0
 8009194:	d020      	beq.n	80091d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01b      	beq.n	80091d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0210 	mvn.w	r2, #16
 80091a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2208      	movs	r2, #8
 80091ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f927 	bl	8009412 <HAL_TIM_IC_CaptureCallback>
 80091c4:	e005      	b.n	80091d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f919 	bl	80093fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f92a 	bl	8009426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00c      	beq.n	80091fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d007      	beq.n	80091fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f06f 0201 	mvn.w	r2, #1
 80091f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7f9 fbf0 	bl	80029dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00c      	beq.n	8009220 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800920c:	2b00      	cmp	r3, #0
 800920e:	d007      	beq.n	8009220 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fade 	bl	80097dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800923c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f8fb 	bl	800943a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0220 	mvn.w	r2, #32
 8009260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fab0 	bl	80097c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009268:	bf00      	nop
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_TIM_ConfigClockSource+0x1c>
 8009288:	2302      	movs	r3, #2
 800928a:	e0b4      	b.n	80093f6 <HAL_TIM_ConfigClockSource+0x186>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68ba      	ldr	r2, [r7, #8]
 80092ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092c4:	d03e      	beq.n	8009344 <HAL_TIM_ConfigClockSource+0xd4>
 80092c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ca:	f200 8087 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092d2:	f000 8086 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x172>
 80092d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092da:	d87f      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092dc:	2b70      	cmp	r3, #112	@ 0x70
 80092de:	d01a      	beq.n	8009316 <HAL_TIM_ConfigClockSource+0xa6>
 80092e0:	2b70      	cmp	r3, #112	@ 0x70
 80092e2:	d87b      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092e4:	2b60      	cmp	r3, #96	@ 0x60
 80092e6:	d050      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x11a>
 80092e8:	2b60      	cmp	r3, #96	@ 0x60
 80092ea:	d877      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092ec:	2b50      	cmp	r3, #80	@ 0x50
 80092ee:	d03c      	beq.n	800936a <HAL_TIM_ConfigClockSource+0xfa>
 80092f0:	2b50      	cmp	r3, #80	@ 0x50
 80092f2:	d873      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092f4:	2b40      	cmp	r3, #64	@ 0x40
 80092f6:	d058      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x13a>
 80092f8:	2b40      	cmp	r3, #64	@ 0x40
 80092fa:	d86f      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 80092fc:	2b30      	cmp	r3, #48	@ 0x30
 80092fe:	d064      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009300:	2b30      	cmp	r3, #48	@ 0x30
 8009302:	d86b      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 8009304:	2b20      	cmp	r3, #32
 8009306:	d060      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009308:	2b20      	cmp	r3, #32
 800930a:	d867      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d05c      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009310:	2b10      	cmp	r3, #16
 8009312:	d05a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x15a>
 8009314:	e062      	b.n	80093dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009326:	f000 f9b3 	bl	8009690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	609a      	str	r2, [r3, #8]
      break;
 8009342:	e04f      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009354:	f000 f99c 	bl	8009690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009366:	609a      	str	r2, [r3, #8]
      break;
 8009368:	e03c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009376:	461a      	mov	r2, r3
 8009378:	f000 f910 	bl	800959c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2150      	movs	r1, #80	@ 0x50
 8009382:	4618      	mov	r0, r3
 8009384:	f000 f969 	bl	800965a <TIM_ITRx_SetConfig>
      break;
 8009388:	e02c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009396:	461a      	mov	r2, r3
 8009398:	f000 f92f 	bl	80095fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2160      	movs	r1, #96	@ 0x60
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f959 	bl	800965a <TIM_ITRx_SetConfig>
      break;
 80093a8:	e01c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093b6:	461a      	mov	r2, r3
 80093b8:	f000 f8f0 	bl	800959c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2140      	movs	r1, #64	@ 0x40
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f949 	bl	800965a <TIM_ITRx_SetConfig>
      break;
 80093c8:	e00c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f000 f940 	bl	800965a <TIM_ITRx_SetConfig>
      break;
 80093da:	e003      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e000      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009412:	b480      	push	{r7}
 8009414:	b083      	sub	sp, #12
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800941a:	bf00      	nop
 800941c:	370c      	adds	r7, #12
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr

08009426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009426:	b480      	push	{r7}
 8009428:	b083      	sub	sp, #12
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800943a:	b480      	push	{r7}
 800943c:	b083      	sub	sp, #12
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
	...

08009450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a43      	ldr	r2, [pc, #268]	@ (8009570 <TIM_Base_SetConfig+0x120>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d013      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800946e:	d00f      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a40      	ldr	r2, [pc, #256]	@ (8009574 <TIM_Base_SetConfig+0x124>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d00b      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a3f      	ldr	r2, [pc, #252]	@ (8009578 <TIM_Base_SetConfig+0x128>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d007      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a3e      	ldr	r2, [pc, #248]	@ (800957c <TIM_Base_SetConfig+0x12c>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d003      	beq.n	8009490 <TIM_Base_SetConfig+0x40>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a3d      	ldr	r2, [pc, #244]	@ (8009580 <TIM_Base_SetConfig+0x130>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d108      	bne.n	80094a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a32      	ldr	r2, [pc, #200]	@ (8009570 <TIM_Base_SetConfig+0x120>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d02b      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b0:	d027      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009574 <TIM_Base_SetConfig+0x124>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d023      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009578 <TIM_Base_SetConfig+0x128>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d01f      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a2d      	ldr	r2, [pc, #180]	@ (800957c <TIM_Base_SetConfig+0x12c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d01b      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009580 <TIM_Base_SetConfig+0x130>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d017      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a2b      	ldr	r2, [pc, #172]	@ (8009584 <TIM_Base_SetConfig+0x134>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009588 <TIM_Base_SetConfig+0x138>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d00f      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a29      	ldr	r2, [pc, #164]	@ (800958c <TIM_Base_SetConfig+0x13c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00b      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a28      	ldr	r2, [pc, #160]	@ (8009590 <TIM_Base_SetConfig+0x140>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d007      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a27      	ldr	r2, [pc, #156]	@ (8009594 <TIM_Base_SetConfig+0x144>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d003      	beq.n	8009502 <TIM_Base_SetConfig+0xb2>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a26      	ldr	r2, [pc, #152]	@ (8009598 <TIM_Base_SetConfig+0x148>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d108      	bne.n	8009514 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	4313      	orrs	r3, r2
 8009512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	4a0e      	ldr	r2, [pc, #56]	@ (8009570 <TIM_Base_SetConfig+0x120>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d003      	beq.n	8009542 <TIM_Base_SetConfig+0xf2>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a10      	ldr	r2, [pc, #64]	@ (8009580 <TIM_Base_SetConfig+0x130>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d103      	bne.n	800954a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f043 0204 	orr.w	r2, r3, #4
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	601a      	str	r2, [r3, #0]
}
 8009562:	bf00      	nop
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	40010000 	.word	0x40010000
 8009574:	40000400 	.word	0x40000400
 8009578:	40000800 	.word	0x40000800
 800957c:	40000c00 	.word	0x40000c00
 8009580:	40010400 	.word	0x40010400
 8009584:	40014000 	.word	0x40014000
 8009588:	40014400 	.word	0x40014400
 800958c:	40014800 	.word	0x40014800
 8009590:	40001800 	.word	0x40001800
 8009594:	40001c00 	.word	0x40001c00
 8009598:	40002000 	.word	0x40002000

0800959c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a1b      	ldr	r3, [r3, #32]
 80095ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	f023 0201 	bic.w	r2, r3, #1
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	011b      	lsls	r3, r3, #4
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f023 030a 	bic.w	r3, r3, #10
 80095d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80095da:	697a      	ldr	r2, [r7, #20]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	4313      	orrs	r3, r2
 80095e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	693a      	ldr	r2, [r7, #16]
 80095e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	621a      	str	r2, [r3, #32]
}
 80095ee:	bf00      	nop
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b087      	sub	sp, #28
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	f023 0210 	bic.w	r2, r3, #16
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	031b      	lsls	r3, r3, #12
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009636:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	011b      	lsls	r3, r3, #4
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	4313      	orrs	r3, r2
 8009640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	697a      	ldr	r2, [r7, #20]
 800964c:	621a      	str	r2, [r3, #32]
}
 800964e:	bf00      	nop
 8009650:	371c      	adds	r7, #28
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800965a:	b480      	push	{r7}
 800965c:	b085      	sub	sp, #20
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	4313      	orrs	r3, r2
 8009678:	f043 0307 	orr.w	r3, r3, #7
 800967c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	609a      	str	r2, [r3, #8]
}
 8009684:	bf00      	nop
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	021a      	lsls	r2, r3, #8
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	431a      	orrs	r2, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	697a      	ldr	r2, [r7, #20]
 80096ba:	4313      	orrs	r3, r2
 80096bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	609a      	str	r2, [r3, #8]
}
 80096c4:	bf00      	nop
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d101      	bne.n	80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096e4:	2302      	movs	r3, #2
 80096e6:	e05a      	b.n	800979e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2201      	movs	r2, #1
 80096ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800970e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a21      	ldr	r2, [pc, #132]	@ (80097ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d022      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009734:	d01d      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a1d      	ldr	r2, [pc, #116]	@ (80097b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d018      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1b      	ldr	r2, [pc, #108]	@ (80097b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d013      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a1a      	ldr	r2, [pc, #104]	@ (80097b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d00e      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a18      	ldr	r2, [pc, #96]	@ (80097bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d009      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a17      	ldr	r2, [pc, #92]	@ (80097c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d004      	beq.n	8009772 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a15      	ldr	r2, [pc, #84]	@ (80097c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d10c      	bne.n	800978c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009778:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	4313      	orrs	r3, r2
 8009782:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	40010000 	.word	0x40010000
 80097b0:	40000400 	.word	0x40000400
 80097b4:	40000800 	.word	0x40000800
 80097b8:	40000c00 	.word	0x40000c00
 80097bc:	40010400 	.word	0x40010400
 80097c0:	40014000 	.word	0x40014000
 80097c4:	40001800 	.word	0x40001800

080097c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d101      	bne.n	8009802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e042      	b.n	8009888 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d106      	bne.n	800981c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7fa ff14 	bl	8004644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2224      	movs	r2, #36	@ 0x24
 8009820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 f821 	bl	800a87c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695a      	ldr	r2, [r3, #20]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2220      	movs	r2, #32
 800987c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e024      	b.n	80098ec <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2224      	movs	r2, #36	@ 0x24
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098b8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7fb f84a 	bl	8004954 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08a      	sub	sp, #40	@ 0x28
 80098f8:	af02      	add	r7, sp, #8
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	603b      	str	r3, [r7, #0]
 8009900:	4613      	mov	r3, r2
 8009902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b20      	cmp	r3, #32
 8009912:	d175      	bne.n	8009a00 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <HAL_UART_Transmit+0x2c>
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e06e      	b.n	8009a02 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2221      	movs	r2, #33	@ 0x21
 800992e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009932:	f7fb fb07 	bl	8004f44 <HAL_GetTick>
 8009936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	88fa      	ldrh	r2, [r7, #6]
 8009942:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800994c:	d108      	bne.n	8009960 <HAL_UART_Transmit+0x6c>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d104      	bne.n	8009960 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009956:	2300      	movs	r3, #0
 8009958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	61bb      	str	r3, [r7, #24]
 800995e:	e003      	b.n	8009968 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009964:	2300      	movs	r3, #0
 8009966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009968:	e02e      	b.n	80099c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2200      	movs	r2, #0
 8009972:	2180      	movs	r1, #128	@ 0x80
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fcbf 	bl	800a2f8 <UART_WaitOnFlagUntilTimeout>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2220      	movs	r2, #32
 8009984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009988:	2303      	movs	r3, #3
 800998a:	e03a      	b.n	8009a02 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d10b      	bne.n	80099aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	3302      	adds	r3, #2
 80099a6:	61bb      	str	r3, [r7, #24]
 80099a8:	e007      	b.n	80099ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	781a      	ldrb	r2, [r3, #0]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	3301      	adds	r3, #1
 80099b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099be:	b29b      	uxth	r3, r3
 80099c0:	3b01      	subs	r3, #1
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1cb      	bne.n	800996a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2200      	movs	r2, #0
 80099da:	2140      	movs	r1, #64	@ 0x40
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 fc8b 	bl	800a2f8 <UART_WaitOnFlagUntilTimeout>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e006      	b.n	8009a02 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
  }
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	4613      	mov	r3, r2
 8009a16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d112      	bne.n	8009a4a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <HAL_UART_Receive_DMA+0x26>
 8009a2a:	88fb      	ldrh	r3, [r7, #6]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d101      	bne.n	8009a34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e00b      	b.n	8009a4c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a3a:	88fb      	ldrh	r3, [r7, #6]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 fcb3 	bl	800a3ac <UART_Start_Receive_DMA>
 8009a46:	4603      	mov	r3, r0
 8009a48:	e000      	b.n	8009a4c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009a4a:	2302      	movs	r3, #2
  }
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b090      	sub	sp, #64	@ 0x40
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a6a:	2b80      	cmp	r3, #128	@ 0x80
 8009a6c:	bf0c      	ite	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	2300      	movne	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b21      	cmp	r3, #33	@ 0x21
 8009a80:	d128      	bne.n	8009ad4 <HAL_UART_DMAStop+0x80>
 8009a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d025      	beq.n	8009ad4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3314      	adds	r3, #20
 8009a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	623b      	str	r3, [r7, #32]
   return(result);
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	3314      	adds	r3, #20
 8009aa6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aa8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e5      	bne.n	8009a88 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d004      	beq.n	8009ace <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fc f8ef 	bl	8005cac <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fd12 	bl	800a4f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ade:	2b40      	cmp	r3, #64	@ 0x40
 8009ae0:	bf0c      	ite	eq
 8009ae2:	2301      	moveq	r3, #1
 8009ae4:	2300      	movne	r3, #0
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b22      	cmp	r3, #34	@ 0x22
 8009af4:	d128      	bne.n	8009b48 <HAL_UART_DMAStop+0xf4>
 8009af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d025      	beq.n	8009b48 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3314      	adds	r3, #20
 8009b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	e853 3f00 	ldrex	r3, [r3]
 8009b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3314      	adds	r3, #20
 8009b1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b1c:	61fa      	str	r2, [r7, #28]
 8009b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b20:	69b9      	ldr	r1, [r7, #24]
 8009b22:	69fa      	ldr	r2, [r7, #28]
 8009b24:	e841 2300 	strex	r3, r2, [r1]
 8009b28:	617b      	str	r3, [r7, #20]
   return(result);
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d1e5      	bne.n	8009afc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d004      	beq.n	8009b42 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fc f8b5 	bl	8005cac <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fd00 	bl	800a548 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3740      	adds	r7, #64	@ 0x40
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b0ba      	sub	sp, #232	@ 0xe8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b8a:	f003 030f 	and.w	r3, r3, #15
 8009b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10f      	bne.n	8009bba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d009      	beq.n	8009bba <HAL_UART_IRQHandler+0x66>
 8009ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009baa:	f003 0320 	and.w	r3, r3, #32
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 fda4 	bl	800a700 <UART_Receive_IT>
      return;
 8009bb8:	e273      	b.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	f000 80de 	beq.w	8009d80 <HAL_UART_IRQHandler+0x22c>
 8009bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d106      	bne.n	8009bde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 80d1 	beq.w	8009d80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00b      	beq.n	8009c02 <HAL_UART_IRQHandler+0xae>
 8009bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfa:	f043 0201 	orr.w	r2, r3, #1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c06:	f003 0304 	and.w	r3, r3, #4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00b      	beq.n	8009c26 <HAL_UART_IRQHandler+0xd2>
 8009c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c1e:	f043 0202 	orr.w	r2, r3, #2
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c2a:	f003 0302 	and.w	r3, r3, #2
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00b      	beq.n	8009c4a <HAL_UART_IRQHandler+0xf6>
 8009c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c42:	f043 0204 	orr.w	r2, r3, #4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c4e:	f003 0308 	and.w	r3, r3, #8
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d011      	beq.n	8009c7a <HAL_UART_IRQHandler+0x126>
 8009c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5a:	f003 0320 	and.w	r3, r3, #32
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d105      	bne.n	8009c6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c72:	f043 0208 	orr.w	r2, r3, #8
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 820a 	beq.w	800a098 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c88:	f003 0320 	and.w	r3, r3, #32
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d008      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x14e>
 8009c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c94:	f003 0320 	and.w	r3, r3, #32
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fd2f 	bl	800a700 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cac:	2b40      	cmp	r3, #64	@ 0x40
 8009cae:	bf0c      	ite	eq
 8009cb0:	2301      	moveq	r3, #1
 8009cb2:	2300      	movne	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cbe:	f003 0308 	and.w	r3, r3, #8
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d103      	bne.n	8009cce <HAL_UART_IRQHandler+0x17a>
 8009cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d04f      	beq.n	8009d6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 fc3a 	bl	800a548 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cde:	2b40      	cmp	r3, #64	@ 0x40
 8009ce0:	d141      	bne.n	8009d66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3314      	adds	r3, #20
 8009ce8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3314      	adds	r3, #20
 8009d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d1e:	e841 2300 	strex	r3, r2, [r1]
 8009d22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1d9      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d013      	beq.n	8009d5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d3a:	4a8a      	ldr	r2, [pc, #552]	@ (8009f64 <HAL_UART_IRQHandler+0x410>)
 8009d3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fc f822 	bl	8005d8c <HAL_DMA_Abort_IT>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d016      	beq.n	8009d7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009d58:	4610      	mov	r0, r2
 8009d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5c:	e00e      	b.n	8009d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f9b6 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d64:	e00a      	b.n	8009d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f9b2 	bl	800a0d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d6c:	e006      	b.n	8009d7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9ae 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009d7a:	e18d      	b.n	800a098 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7c:	bf00      	nop
    return;
 8009d7e:	e18b      	b.n	800a098 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	f040 8167 	bne.w	800a058 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d8e:	f003 0310 	and.w	r3, r3, #16
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 8160 	beq.w	800a058 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d9c:	f003 0310 	and.w	r3, r3, #16
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 8159 	beq.w	800a058 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009da6:	2300      	movs	r3, #0
 8009da8:	60bb      	str	r3, [r7, #8]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	60bb      	str	r3, [r7, #8]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	60bb      	str	r3, [r7, #8]
 8009dba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dc6:	2b40      	cmp	r3, #64	@ 0x40
 8009dc8:	f040 80ce 	bne.w	8009f68 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 80a9 	beq.w	8009f34 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dea:	429a      	cmp	r2, r3
 8009dec:	f080 80a2 	bcs.w	8009f34 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009df6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dfc:	69db      	ldr	r3, [r3, #28]
 8009dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e02:	f000 8088 	beq.w	8009f16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	330c      	adds	r3, #12
 8009e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	330c      	adds	r3, #12
 8009e2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009e32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1d9      	bne.n	8009e06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3314      	adds	r3, #20
 8009e58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e64:	f023 0301 	bic.w	r3, r3, #1
 8009e68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3314      	adds	r3, #20
 8009e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e82:	e841 2300 	strex	r3, r2, [r1]
 8009e86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1e1      	bne.n	8009e52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3314      	adds	r3, #20
 8009e94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e98:	e853 3f00 	ldrex	r3, [r3]
 8009e9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3314      	adds	r3, #20
 8009eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009eb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009eb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ec0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e3      	bne.n	8009e8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2220      	movs	r2, #32
 8009eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	330c      	adds	r3, #12
 8009eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ede:	e853 3f00 	ldrex	r3, [r3]
 8009ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ee4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ee6:	f023 0310 	bic.w	r3, r3, #16
 8009eea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	330c      	adds	r3, #12
 8009ef4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ef8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009efa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009efe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f00:	e841 2300 	strex	r3, r2, [r1]
 8009f04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d1e3      	bne.n	8009ed4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f10:	4618      	mov	r0, r3
 8009f12:	f7fb fecb 	bl	8005cac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2202      	movs	r2, #2
 8009f1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f8d9 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f32:	e0b3      	b.n	800a09c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	f040 80ad 	bne.w	800a09c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f4c:	f040 80a6 	bne.w	800a09c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2202      	movs	r2, #2
 8009f54:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f8c1 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
      return;
 8009f62:	e09b      	b.n	800a09c <HAL_UART_IRQHandler+0x548>
 8009f64:	0800a60f 	.word	0x0800a60f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 808e 	beq.w	800a0a0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 8089 	beq.w	800a0a0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	330c      	adds	r3, #12
 8009f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	e853 3f00 	ldrex	r3, [r3]
 8009f9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	330c      	adds	r3, #12
 8009fae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009fb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fba:	e841 2300 	strex	r3, r2, [r1]
 8009fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1e3      	bne.n	8009f8e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	3314      	adds	r3, #20
 8009fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd0:	e853 3f00 	ldrex	r3, [r3]
 8009fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	f023 0301 	bic.w	r3, r3, #1
 8009fdc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3314      	adds	r3, #20
 8009fe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fea:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ff2:	e841 2300 	strex	r3, r2, [r1]
 8009ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1e3      	bne.n	8009fc6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2220      	movs	r2, #32
 800a002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	330c      	adds	r3, #12
 800a012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	e853 3f00 	ldrex	r3, [r3]
 800a01a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 0310 	bic.w	r3, r3, #16
 800a022:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	330c      	adds	r3, #12
 800a02c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a030:	61fa      	str	r2, [r7, #28]
 800a032:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a034:	69b9      	ldr	r1, [r7, #24]
 800a036:	69fa      	ldr	r2, [r7, #28]
 800a038:	e841 2300 	strex	r3, r2, [r1]
 800a03c:	617b      	str	r3, [r7, #20]
   return(result);
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1e3      	bne.n	800a00c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2202      	movs	r2, #2
 800a048:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a04a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f847 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a056:	e023      	b.n	800a0a0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a05c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a060:	2b00      	cmp	r3, #0
 800a062:	d009      	beq.n	800a078 <HAL_UART_IRQHandler+0x524>
 800a064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d003      	beq.n	800a078 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fadd 	bl	800a630 <UART_Transmit_IT>
    return;
 800a076:	e014      	b.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
 800a084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d008      	beq.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fb1d 	bl	800a6d0 <UART_EndTransmit_IT>
    return;
 800a096:	e004      	b.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
    return;
 800a098:	bf00      	nop
 800a09a:	e002      	b.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
      return;
 800a09c:	bf00      	nop
 800a09e:	e000      	b.n	800a0a2 <HAL_UART_IRQHandler+0x54e>
      return;
 800a0a0:	bf00      	nop
  }
}
 800a0a2:	37e8      	adds	r7, #232	@ 0xe8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b09c      	sub	sp, #112	@ 0x70
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a108:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a114:	2b00      	cmp	r3, #0
 800a116:	d172      	bne.n	800a1fe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a11a:	2200      	movs	r2, #0
 800a11c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a11e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	330c      	adds	r3, #12
 800a124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a12e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a134:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	330c      	adds	r3, #12
 800a13c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a13e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a140:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a142:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a146:	e841 2300 	strex	r3, r2, [r1]
 800a14a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a14c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1e5      	bne.n	800a11e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3314      	adds	r3, #20
 800a158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a15c:	e853 3f00 	ldrex	r3, [r3]
 800a160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a164:	f023 0301 	bic.w	r3, r3, #1
 800a168:	667b      	str	r3, [r7, #100]	@ 0x64
 800a16a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3314      	adds	r3, #20
 800a170:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a172:	647a      	str	r2, [r7, #68]	@ 0x44
 800a174:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a176:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a178:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a17a:	e841 2300 	strex	r3, r2, [r1]
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1e5      	bne.n	800a152 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3314      	adds	r3, #20
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	623b      	str	r3, [r7, #32]
   return(result);
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a19c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a19e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3314      	adds	r3, #20
 800a1a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e5      	bne.n	800a186 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1bc:	2220      	movs	r2, #32
 800a1be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d119      	bne.n	800a1fe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	330c      	adds	r3, #12
 800a1d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	e853 3f00 	ldrex	r3, [r3]
 800a1d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f023 0310 	bic.w	r3, r3, #16
 800a1e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	330c      	adds	r3, #12
 800a1e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1ea:	61fa      	str	r2, [r7, #28]
 800a1ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ee:	69b9      	ldr	r1, [r7, #24]
 800a1f0:	69fa      	ldr	r2, [r7, #28]
 800a1f2:	e841 2300 	strex	r3, r2, [r1]
 800a1f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1e5      	bne.n	800a1ca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a200:	2200      	movs	r2, #0
 800a202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d106      	bne.n	800a21a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a20c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a20e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a210:	4619      	mov	r1, r3
 800a212:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a214:	f7ff ff66 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a218:	e002      	b.n	800a220 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a21a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a21c:	f7fa fc18 	bl	8004a50 <HAL_UART_RxCpltCallback>
}
 800a220:	bf00      	nop
 800a222:	3770      	adds	r7, #112	@ 0x70
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a234:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	2b01      	cmp	r3, #1
 800a242:	d108      	bne.n	800a256 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a248:	085b      	lsrs	r3, r3, #1
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	4619      	mov	r1, r3
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f7ff ff48 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a254:	e002      	b.n	800a25c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f7ff ff30 	bl	800a0bc <HAL_UART_RxHalfCpltCallback>
}
 800a25c:	bf00      	nop
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a274:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a280:	2b80      	cmp	r3, #128	@ 0x80
 800a282:	bf0c      	ite	eq
 800a284:	2301      	moveq	r3, #1
 800a286:	2300      	movne	r3, #0
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a292:	b2db      	uxtb	r3, r3
 800a294:	2b21      	cmp	r3, #33	@ 0x21
 800a296:	d108      	bne.n	800a2aa <UART_DMAError+0x46>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d005      	beq.n	800a2aa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a2a4:	68b8      	ldr	r0, [r7, #8]
 800a2a6:	f000 f927 	bl	800a4f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2b4:	2b40      	cmp	r3, #64	@ 0x40
 800a2b6:	bf0c      	ite	eq
 800a2b8:	2301      	moveq	r3, #1
 800a2ba:	2300      	movne	r3, #0
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b22      	cmp	r3, #34	@ 0x22
 800a2ca:	d108      	bne.n	800a2de <UART_DMAError+0x7a>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	f000 f935 	bl	800a548 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2e2:	f043 0210 	orr.w	r2, r3, #16
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2ea:	68b8      	ldr	r0, [r7, #8]
 800a2ec:	f7ff fef0 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	4613      	mov	r3, r2
 800a306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a308:	e03b      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a30a:	6a3b      	ldr	r3, [r7, #32]
 800a30c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a310:	d037      	beq.n	800a382 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a312:	f7fa fe17 	bl	8004f44 <HAL_GetTick>
 800a316:	4602      	mov	r2, r0
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	1ad3      	subs	r3, r2, r3
 800a31c:	6a3a      	ldr	r2, [r7, #32]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d302      	bcc.n	800a328 <UART_WaitOnFlagUntilTimeout+0x30>
 800a322:	6a3b      	ldr	r3, [r7, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a328:	2303      	movs	r3, #3
 800a32a:	e03a      	b.n	800a3a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	2b00      	cmp	r3, #0
 800a338:	d023      	beq.n	800a382 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b80      	cmp	r3, #128	@ 0x80
 800a33e:	d020      	beq.n	800a382 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	2b40      	cmp	r3, #64	@ 0x40
 800a344:	d01d      	beq.n	800a382 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0308 	and.w	r3, r3, #8
 800a350:	2b08      	cmp	r3, #8
 800a352:	d116      	bne.n	800a382 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a354:	2300      	movs	r3, #0
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	617b      	str	r3, [r7, #20]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f8ec 	bl	800a548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2208      	movs	r2, #8
 800a374:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e00f      	b.n	800a3a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	4013      	ands	r3, r2
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	429a      	cmp	r2, r3
 800a390:	bf0c      	ite	eq
 800a392:	2301      	moveq	r3, #1
 800a394:	2300      	movne	r3, #0
 800a396:	b2db      	uxtb	r3, r3
 800a398:	461a      	mov	r2, r3
 800a39a:	79fb      	ldrb	r3, [r7, #7]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d0b4      	beq.n	800a30a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b098      	sub	sp, #96	@ 0x60
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	88fa      	ldrh	r2, [r7, #6]
 800a3c4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2222      	movs	r2, #34	@ 0x22
 800a3d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d8:	4a44      	ldr	r2, [pc, #272]	@ (800a4ec <UART_Start_Receive_DMA+0x140>)
 800a3da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e0:	4a43      	ldr	r2, [pc, #268]	@ (800a4f0 <UART_Start_Receive_DMA+0x144>)
 800a3e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e8:	4a42      	ldr	r2, [pc, #264]	@ (800a4f4 <UART_Start_Receive_DMA+0x148>)
 800a3ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a3f4:	f107 0308 	add.w	r3, r7, #8
 800a3f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3304      	adds	r3, #4
 800a404:	4619      	mov	r1, r3
 800a406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	88fb      	ldrh	r3, [r7, #6]
 800a40c:	f7fb fbf6 	bl	8005bfc <HAL_DMA_Start_IT>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d008      	beq.n	800a428 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2210      	movs	r2, #16
 800a41a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2220      	movs	r2, #32
 800a420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e05d      	b.n	800a4e4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a428:	2300      	movs	r3, #0
 800a42a:	613b      	str	r3, [r7, #16]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	613b      	str	r3, [r7, #16]
 800a43c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d019      	beq.n	800a47a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	330c      	adds	r3, #12
 800a44c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a450:	e853 3f00 	ldrex	r3, [r3]
 800a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a45c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	330c      	adds	r3, #12
 800a464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a466:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a468:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a46a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a46c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a46e:	e841 2300 	strex	r3, r2, [r1]
 800a472:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1e5      	bne.n	800a446 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3314      	adds	r3, #20
 800a480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a484:	e853 3f00 	ldrex	r3, [r3]
 800a488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48c:	f043 0301 	orr.w	r3, r3, #1
 800a490:	657b      	str	r3, [r7, #84]	@ 0x54
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3314      	adds	r3, #20
 800a498:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a49a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a49c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a4a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4a2:	e841 2300 	strex	r3, r2, [r1]
 800a4a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e5      	bne.n	800a47a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3314      	adds	r3, #20
 800a4b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	e853 3f00 	ldrex	r3, [r3]
 800a4bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6a39      	ldr	r1, [r7, #32]
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e5      	bne.n	800a4ae <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a4e2:	2300      	movs	r3, #0
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3760      	adds	r7, #96	@ 0x60
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	0800a0fd 	.word	0x0800a0fd
 800a4f0:	0800a229 	.word	0x0800a229
 800a4f4:	0800a265 	.word	0x0800a265

0800a4f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b089      	sub	sp, #36	@ 0x24
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	330c      	adds	r3, #12
 800a506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	e853 3f00 	ldrex	r3, [r3]
 800a50e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a516:	61fb      	str	r3, [r7, #28]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	330c      	adds	r3, #12
 800a51e:	69fa      	ldr	r2, [r7, #28]
 800a520:	61ba      	str	r2, [r7, #24]
 800a522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a524:	6979      	ldr	r1, [r7, #20]
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	e841 2300 	strex	r3, r2, [r1]
 800a52c:	613b      	str	r3, [r7, #16]
   return(result);
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e5      	bne.n	800a500 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a53c:	bf00      	nop
 800a53e:	3724      	adds	r7, #36	@ 0x24
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b095      	sub	sp, #84	@ 0x54
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	330c      	adds	r3, #12
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a55a:	e853 3f00 	ldrex	r3, [r3]
 800a55e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	330c      	adds	r3, #12
 800a56e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a570:	643a      	str	r2, [r7, #64]	@ 0x40
 800a572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a578:	e841 2300 	strex	r3, r2, [r1]
 800a57c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e5      	bne.n	800a550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3314      	adds	r3, #20
 800a58a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a58c:	6a3b      	ldr	r3, [r7, #32]
 800a58e:	e853 3f00 	ldrex	r3, [r3]
 800a592:	61fb      	str	r3, [r7, #28]
   return(result);
 800a594:	69fb      	ldr	r3, [r7, #28]
 800a596:	f023 0301 	bic.w	r3, r3, #1
 800a59a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3314      	adds	r3, #20
 800a5a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e5      	bne.n	800a584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d119      	bne.n	800a5f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	330c      	adds	r3, #12
 800a5c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	e853 3f00 	ldrex	r3, [r3]
 800a5ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f023 0310 	bic.w	r3, r3, #16
 800a5d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	330c      	adds	r3, #12
 800a5de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5e0:	61ba      	str	r2, [r7, #24]
 800a5e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e4:	6979      	ldr	r1, [r7, #20]
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	e841 2300 	strex	r3, r2, [r1]
 800a5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1e5      	bne.n	800a5c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a602:	bf00      	nop
 800a604:	3754      	adds	r7, #84	@ 0x54
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a61a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a622:	68f8      	ldr	r0, [r7, #12]
 800a624:	f7ff fd54 	bl	800a0d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a628:	bf00      	nop
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	2b21      	cmp	r3, #33	@ 0x21
 800a642:	d13e      	bne.n	800a6c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a64c:	d114      	bne.n	800a678 <UART_Transmit_IT+0x48>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d110      	bne.n	800a678 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	881b      	ldrh	r3, [r3, #0]
 800a660:	461a      	mov	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a66a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a1b      	ldr	r3, [r3, #32]
 800a670:	1c9a      	adds	r2, r3, #2
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	621a      	str	r2, [r3, #32]
 800a676:	e008      	b.n	800a68a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	1c59      	adds	r1, r3, #1
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	6211      	str	r1, [r2, #32]
 800a682:	781a      	ldrb	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a68e:	b29b      	uxth	r3, r3
 800a690:	3b01      	subs	r3, #1
 800a692:	b29b      	uxth	r3, r3
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	4619      	mov	r1, r3
 800a698:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10f      	bne.n	800a6be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e000      	b.n	800a6c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a6c2:	2302      	movs	r3, #2
  }
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68da      	ldr	r2, [r3, #12]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2220      	movs	r2, #32
 800a6ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f7ff fcd9 	bl	800a0a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b08c      	sub	sp, #48	@ 0x30
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b22      	cmp	r3, #34	@ 0x22
 800a71a:	f040 80aa 	bne.w	800a872 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a726:	d115      	bne.n	800a754 <UART_Receive_IT+0x54>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d111      	bne.n	800a754 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a742:	b29a      	uxth	r2, r3
 800a744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a746:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a74c:	1c9a      	adds	r2, r3, #2
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	629a      	str	r2, [r3, #40]	@ 0x28
 800a752:	e024      	b.n	800a79e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a758:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a762:	d007      	beq.n	800a774 <UART_Receive_IT+0x74>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d10a      	bne.n	800a782 <UART_Receive_IT+0x82>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d106      	bne.n	800a782 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a77e:	701a      	strb	r2, [r3, #0]
 800a780:	e008      	b.n	800a794 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a792:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	3b01      	subs	r3, #1
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d15d      	bne.n	800a86e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f022 0220 	bic.w	r2, r2, #32
 800a7c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68da      	ldr	r2, [r3, #12]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	695a      	ldr	r2, [r3, #20]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f022 0201 	bic.w	r2, r2, #1
 800a7e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2220      	movs	r2, #32
 800a7e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d135      	bne.n	800a864 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	330c      	adds	r3, #12
 800a804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	613b      	str	r3, [r7, #16]
   return(result);
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f023 0310 	bic.w	r3, r3, #16
 800a814:	627b      	str	r3, [r7, #36]	@ 0x24
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	330c      	adds	r3, #12
 800a81c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a81e:	623a      	str	r2, [r7, #32]
 800a820:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	69f9      	ldr	r1, [r7, #28]
 800a824:	6a3a      	ldr	r2, [r7, #32]
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e5      	bne.n	800a7fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0310 	and.w	r3, r3, #16
 800a83c:	2b10      	cmp	r3, #16
 800a83e:	d10a      	bne.n	800a856 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	60fb      	str	r3, [r7, #12]
 800a854:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff fc41 	bl	800a0e4 <HAL_UARTEx_RxEventCallback>
 800a862:	e002      	b.n	800a86a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f7fa f8f3 	bl	8004a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e002      	b.n	800a874 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	e000      	b.n	800a874 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a872:	2302      	movs	r3, #2
  }
}
 800a874:	4618      	mov	r0, r3
 800a876:	3730      	adds	r7, #48	@ 0x30
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a87c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a880:	b0c0      	sub	sp, #256	@ 0x100
 800a882:	af00      	add	r7, sp, #0
 800a884:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a898:	68d9      	ldr	r1, [r3, #12]
 800a89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	ea40 0301 	orr.w	r3, r0, r1
 800a8a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8aa:	689a      	ldr	r2, [r3, #8]
 800a8ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	431a      	orrs	r2, r3
 800a8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c0:	69db      	ldr	r3, [r3, #28]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a8d4:	f021 010c 	bic.w	r1, r1, #12
 800a8d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8e2:	430b      	orrs	r3, r1
 800a8e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f6:	6999      	ldr	r1, [r3, #24]
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	ea40 0301 	orr.w	r3, r0, r1
 800a902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	4b8f      	ldr	r3, [pc, #572]	@ (800ab48 <UART_SetConfig+0x2cc>)
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d005      	beq.n	800a91c <UART_SetConfig+0xa0>
 800a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	4b8d      	ldr	r3, [pc, #564]	@ (800ab4c <UART_SetConfig+0x2d0>)
 800a918:	429a      	cmp	r2, r3
 800a91a:	d104      	bne.n	800a926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a91c:	f7fd f960 	bl	8007be0 <HAL_RCC_GetPCLK2Freq>
 800a920:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a924:	e003      	b.n	800a92e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a926:	f7fd f947 	bl	8007bb8 <HAL_RCC_GetPCLK1Freq>
 800a92a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a92e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a932:	69db      	ldr	r3, [r3, #28]
 800a934:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a938:	f040 810c 	bne.w	800ab54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a940:	2200      	movs	r2, #0
 800a942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a946:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a94a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a94e:	4622      	mov	r2, r4
 800a950:	462b      	mov	r3, r5
 800a952:	1891      	adds	r1, r2, r2
 800a954:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a956:	415b      	adcs	r3, r3
 800a958:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a95a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a95e:	4621      	mov	r1, r4
 800a960:	eb12 0801 	adds.w	r8, r2, r1
 800a964:	4629      	mov	r1, r5
 800a966:	eb43 0901 	adc.w	r9, r3, r1
 800a96a:	f04f 0200 	mov.w	r2, #0
 800a96e:	f04f 0300 	mov.w	r3, #0
 800a972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a97a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a97e:	4690      	mov	r8, r2
 800a980:	4699      	mov	r9, r3
 800a982:	4623      	mov	r3, r4
 800a984:	eb18 0303 	adds.w	r3, r8, r3
 800a988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a98c:	462b      	mov	r3, r5
 800a98e:	eb49 0303 	adc.w	r3, r9, r3
 800a992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a9a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	18db      	adds	r3, r3, r3
 800a9ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	eb42 0303 	adc.w	r3, r2, r3
 800a9b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a9bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a9c0:	f7f6 fae0 	bl	8000f84 <__aeabi_uldivmod>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4b61      	ldr	r3, [pc, #388]	@ (800ab50 <UART_SetConfig+0x2d4>)
 800a9ca:	fba3 2302 	umull	r2, r3, r3, r2
 800a9ce:	095b      	lsrs	r3, r3, #5
 800a9d0:	011c      	lsls	r4, r3, #4
 800a9d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a9e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a9e4:	4642      	mov	r2, r8
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	1891      	adds	r1, r2, r2
 800a9ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a9ec:	415b      	adcs	r3, r3
 800a9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a9f4:	4641      	mov	r1, r8
 800a9f6:	eb12 0a01 	adds.w	sl, r2, r1
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	eb43 0b01 	adc.w	fp, r3, r1
 800aa00:	f04f 0200 	mov.w	r2, #0
 800aa04:	f04f 0300 	mov.w	r3, #0
 800aa08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa14:	4692      	mov	sl, r2
 800aa16:	469b      	mov	fp, r3
 800aa18:	4643      	mov	r3, r8
 800aa1a:	eb1a 0303 	adds.w	r3, sl, r3
 800aa1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa22:	464b      	mov	r3, r9
 800aa24:	eb4b 0303 	adc.w	r3, fp, r3
 800aa28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aa3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa40:	460b      	mov	r3, r1
 800aa42:	18db      	adds	r3, r3, r3
 800aa44:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa46:	4613      	mov	r3, r2
 800aa48:	eb42 0303 	adc.w	r3, r2, r3
 800aa4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aa52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa56:	f7f6 fa95 	bl	8000f84 <__aeabi_uldivmod>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	4611      	mov	r1, r2
 800aa60:	4b3b      	ldr	r3, [pc, #236]	@ (800ab50 <UART_SetConfig+0x2d4>)
 800aa62:	fba3 2301 	umull	r2, r3, r3, r1
 800aa66:	095b      	lsrs	r3, r3, #5
 800aa68:	2264      	movs	r2, #100	@ 0x64
 800aa6a:	fb02 f303 	mul.w	r3, r2, r3
 800aa6e:	1acb      	subs	r3, r1, r3
 800aa70:	00db      	lsls	r3, r3, #3
 800aa72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa76:	4b36      	ldr	r3, [pc, #216]	@ (800ab50 <UART_SetConfig+0x2d4>)
 800aa78:	fba3 2302 	umull	r2, r3, r3, r2
 800aa7c:	095b      	lsrs	r3, r3, #5
 800aa7e:	005b      	lsls	r3, r3, #1
 800aa80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aa84:	441c      	add	r4, r3
 800aa86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aa94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aa98:	4642      	mov	r2, r8
 800aa9a:	464b      	mov	r3, r9
 800aa9c:	1891      	adds	r1, r2, r2
 800aa9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aaa0:	415b      	adcs	r3, r3
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aaa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aaa8:	4641      	mov	r1, r8
 800aaaa:	1851      	adds	r1, r2, r1
 800aaac:	6339      	str	r1, [r7, #48]	@ 0x30
 800aaae:	4649      	mov	r1, r9
 800aab0:	414b      	adcs	r3, r1
 800aab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab4:	f04f 0200 	mov.w	r2, #0
 800aab8:	f04f 0300 	mov.w	r3, #0
 800aabc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aac0:	4659      	mov	r1, fp
 800aac2:	00cb      	lsls	r3, r1, #3
 800aac4:	4651      	mov	r1, sl
 800aac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aaca:	4651      	mov	r1, sl
 800aacc:	00ca      	lsls	r2, r1, #3
 800aace:	4610      	mov	r0, r2
 800aad0:	4619      	mov	r1, r3
 800aad2:	4603      	mov	r3, r0
 800aad4:	4642      	mov	r2, r8
 800aad6:	189b      	adds	r3, r3, r2
 800aad8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aadc:	464b      	mov	r3, r9
 800aade:	460a      	mov	r2, r1
 800aae0:	eb42 0303 	adc.w	r3, r2, r3
 800aae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aaf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aaf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aafc:	460b      	mov	r3, r1
 800aafe:	18db      	adds	r3, r3, r3
 800ab00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab02:	4613      	mov	r3, r2
 800ab04:	eb42 0303 	adc.w	r3, r2, r3
 800ab08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ab0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ab12:	f7f6 fa37 	bl	8000f84 <__aeabi_uldivmod>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab50 <UART_SetConfig+0x2d4>)
 800ab1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab20:	095b      	lsrs	r3, r3, #5
 800ab22:	2164      	movs	r1, #100	@ 0x64
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	00db      	lsls	r3, r3, #3
 800ab2c:	3332      	adds	r3, #50	@ 0x32
 800ab2e:	4a08      	ldr	r2, [pc, #32]	@ (800ab50 <UART_SetConfig+0x2d4>)
 800ab30:	fba2 2303 	umull	r2, r3, r2, r3
 800ab34:	095b      	lsrs	r3, r3, #5
 800ab36:	f003 0207 	and.w	r2, r3, #7
 800ab3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4422      	add	r2, r4
 800ab42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab44:	e106      	b.n	800ad54 <UART_SetConfig+0x4d8>
 800ab46:	bf00      	nop
 800ab48:	40011000 	.word	0x40011000
 800ab4c:	40011400 	.word	0x40011400
 800ab50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab66:	4642      	mov	r2, r8
 800ab68:	464b      	mov	r3, r9
 800ab6a:	1891      	adds	r1, r2, r2
 800ab6c:	6239      	str	r1, [r7, #32]
 800ab6e:	415b      	adcs	r3, r3
 800ab70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab76:	4641      	mov	r1, r8
 800ab78:	1854      	adds	r4, r2, r1
 800ab7a:	4649      	mov	r1, r9
 800ab7c:	eb43 0501 	adc.w	r5, r3, r1
 800ab80:	f04f 0200 	mov.w	r2, #0
 800ab84:	f04f 0300 	mov.w	r3, #0
 800ab88:	00eb      	lsls	r3, r5, #3
 800ab8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab8e:	00e2      	lsls	r2, r4, #3
 800ab90:	4614      	mov	r4, r2
 800ab92:	461d      	mov	r5, r3
 800ab94:	4643      	mov	r3, r8
 800ab96:	18e3      	adds	r3, r4, r3
 800ab98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	eb45 0303 	adc.w	r3, r5, r3
 800aba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	2200      	movs	r2, #0
 800abae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	f04f 0300 	mov.w	r3, #0
 800abbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800abc2:	4629      	mov	r1, r5
 800abc4:	008b      	lsls	r3, r1, #2
 800abc6:	4621      	mov	r1, r4
 800abc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abcc:	4621      	mov	r1, r4
 800abce:	008a      	lsls	r2, r1, #2
 800abd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800abd4:	f7f6 f9d6 	bl	8000f84 <__aeabi_uldivmod>
 800abd8:	4602      	mov	r2, r0
 800abda:	460b      	mov	r3, r1
 800abdc:	4b60      	ldr	r3, [pc, #384]	@ (800ad60 <UART_SetConfig+0x4e4>)
 800abde:	fba3 2302 	umull	r2, r3, r3, r2
 800abe2:	095b      	lsrs	r3, r3, #5
 800abe4:	011c      	lsls	r4, r3, #4
 800abe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abea:	2200      	movs	r2, #0
 800abec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800abf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800abf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800abf8:	4642      	mov	r2, r8
 800abfa:	464b      	mov	r3, r9
 800abfc:	1891      	adds	r1, r2, r2
 800abfe:	61b9      	str	r1, [r7, #24]
 800ac00:	415b      	adcs	r3, r3
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac08:	4641      	mov	r1, r8
 800ac0a:	1851      	adds	r1, r2, r1
 800ac0c:	6139      	str	r1, [r7, #16]
 800ac0e:	4649      	mov	r1, r9
 800ac10:	414b      	adcs	r3, r1
 800ac12:	617b      	str	r3, [r7, #20]
 800ac14:	f04f 0200 	mov.w	r2, #0
 800ac18:	f04f 0300 	mov.w	r3, #0
 800ac1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac20:	4659      	mov	r1, fp
 800ac22:	00cb      	lsls	r3, r1, #3
 800ac24:	4651      	mov	r1, sl
 800ac26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac2a:	4651      	mov	r1, sl
 800ac2c:	00ca      	lsls	r2, r1, #3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	4603      	mov	r3, r0
 800ac34:	4642      	mov	r2, r8
 800ac36:	189b      	adds	r3, r3, r2
 800ac38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	460a      	mov	r2, r1
 800ac40:	eb42 0303 	adc.w	r3, r2, r3
 800ac44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac60:	4649      	mov	r1, r9
 800ac62:	008b      	lsls	r3, r1, #2
 800ac64:	4641      	mov	r1, r8
 800ac66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac6a:	4641      	mov	r1, r8
 800ac6c:	008a      	lsls	r2, r1, #2
 800ac6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac72:	f7f6 f987 	bl	8000f84 <__aeabi_uldivmod>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4b38      	ldr	r3, [pc, #224]	@ (800ad60 <UART_SetConfig+0x4e4>)
 800ac7e:	fba3 2301 	umull	r2, r3, r3, r1
 800ac82:	095b      	lsrs	r3, r3, #5
 800ac84:	2264      	movs	r2, #100	@ 0x64
 800ac86:	fb02 f303 	mul.w	r3, r2, r3
 800ac8a:	1acb      	subs	r3, r1, r3
 800ac8c:	011b      	lsls	r3, r3, #4
 800ac8e:	3332      	adds	r3, #50	@ 0x32
 800ac90:	4a33      	ldr	r2, [pc, #204]	@ (800ad60 <UART_SetConfig+0x4e4>)
 800ac92:	fba2 2303 	umull	r2, r3, r2, r3
 800ac96:	095b      	lsrs	r3, r3, #5
 800ac98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac9c:	441c      	add	r4, r3
 800ac9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aca2:	2200      	movs	r2, #0
 800aca4:	673b      	str	r3, [r7, #112]	@ 0x70
 800aca6:	677a      	str	r2, [r7, #116]	@ 0x74
 800aca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800acac:	4642      	mov	r2, r8
 800acae:	464b      	mov	r3, r9
 800acb0:	1891      	adds	r1, r2, r2
 800acb2:	60b9      	str	r1, [r7, #8]
 800acb4:	415b      	adcs	r3, r3
 800acb6:	60fb      	str	r3, [r7, #12]
 800acb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acbc:	4641      	mov	r1, r8
 800acbe:	1851      	adds	r1, r2, r1
 800acc0:	6039      	str	r1, [r7, #0]
 800acc2:	4649      	mov	r1, r9
 800acc4:	414b      	adcs	r3, r1
 800acc6:	607b      	str	r3, [r7, #4]
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	f04f 0300 	mov.w	r3, #0
 800acd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800acd4:	4659      	mov	r1, fp
 800acd6:	00cb      	lsls	r3, r1, #3
 800acd8:	4651      	mov	r1, sl
 800acda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acde:	4651      	mov	r1, sl
 800ace0:	00ca      	lsls	r2, r1, #3
 800ace2:	4610      	mov	r0, r2
 800ace4:	4619      	mov	r1, r3
 800ace6:	4603      	mov	r3, r0
 800ace8:	4642      	mov	r2, r8
 800acea:	189b      	adds	r3, r3, r2
 800acec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acee:	464b      	mov	r3, r9
 800acf0:	460a      	mov	r2, r1
 800acf2:	eb42 0303 	adc.w	r3, r2, r3
 800acf6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad02:	667a      	str	r2, [r7, #100]	@ 0x64
 800ad04:	f04f 0200 	mov.w	r2, #0
 800ad08:	f04f 0300 	mov.w	r3, #0
 800ad0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ad10:	4649      	mov	r1, r9
 800ad12:	008b      	lsls	r3, r1, #2
 800ad14:	4641      	mov	r1, r8
 800ad16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad1a:	4641      	mov	r1, r8
 800ad1c:	008a      	lsls	r2, r1, #2
 800ad1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad22:	f7f6 f92f 	bl	8000f84 <__aeabi_uldivmod>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ad60 <UART_SetConfig+0x4e4>)
 800ad2c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad30:	095b      	lsrs	r3, r3, #5
 800ad32:	2164      	movs	r1, #100	@ 0x64
 800ad34:	fb01 f303 	mul.w	r3, r1, r3
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	3332      	adds	r3, #50	@ 0x32
 800ad3e:	4a08      	ldr	r2, [pc, #32]	@ (800ad60 <UART_SetConfig+0x4e4>)
 800ad40:	fba2 2303 	umull	r2, r3, r2, r3
 800ad44:	095b      	lsrs	r3, r3, #5
 800ad46:	f003 020f 	and.w	r2, r3, #15
 800ad4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4422      	add	r2, r4
 800ad52:	609a      	str	r2, [r3, #8]
}
 800ad54:	bf00      	nop
 800ad56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad60:	51eb851f 	.word	0x51eb851f

0800ad64 <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the connected uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 800ad6e:	4b45      	ldr	r3, [pc, #276]	@ (800ae84 <e22_init+0x120>)
 800ad70:	22c0      	movs	r2, #192	@ 0xc0
 800ad72:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 800ad74:	4b43      	ldr	r3, [pc, #268]	@ (800ae84 <e22_init+0x120>)
 800ad76:	2203      	movs	r2, #3
 800ad78:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x06;	//6 bytes will be configured.
 800ad7a:	4b42      	ldr	r3, [pc, #264]	@ (800ae84 <e22_init+0x120>)
 800ad7c:	2206      	movs	r2, #6
 800ad7e:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7c5b      	ldrb	r3, [r3, #17]
 800ad84:	b25a      	sxtb	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7c1b      	ldrb	r3, [r3, #16]
 800ad8a:	b25b      	sxtb	r3, r3
 800ad8c:	00db      	lsls	r3, r3, #3
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	4313      	orrs	r3, r2
 800ad92:	b25a      	sxtb	r2, r3
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	7bdb      	ldrb	r3, [r3, #15]
 800ad98:	b25b      	sxtb	r3, r3
 800ad9a:	015b      	lsls	r3, r3, #5
 800ad9c:	b25b      	sxtb	r3, r3
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	b25b      	sxtb	r3, r3
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	4b37      	ldr	r3, [pc, #220]	@ (800ae84 <e22_init+0x120>)
 800ada6:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7d1b      	ldrb	r3, [r3, #20]
 800adac:	b25a      	sxtb	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7cdb      	ldrb	r3, [r3, #19]
 800adb2:	b25b      	sxtb	r3, r3
 800adb4:	015b      	lsls	r3, r3, #5
 800adb6:	b25b      	sxtb	r3, r3
 800adb8:	4313      	orrs	r3, r2
 800adba:	b25a      	sxtb	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7c9b      	ldrb	r3, [r3, #18]
 800adc0:	b25b      	sxtb	r3, r3
 800adc2:	019b      	lsls	r3, r3, #6
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	4313      	orrs	r3, r2
 800adc8:	b25b      	sxtb	r3, r3
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	4b2d      	ldr	r3, [pc, #180]	@ (800ae84 <e22_init+0x120>)
 800adce:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7d5a      	ldrb	r2, [r3, #21]
 800add4:	4b2b      	ldr	r3, [pc, #172]	@ (800ae84 <e22_init+0x120>)
 800add6:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7edb      	ldrb	r3, [r3, #27]
 800addc:	b25a      	sxtb	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7e9b      	ldrb	r3, [r3, #26]
 800ade2:	b25b      	sxtb	r3, r3
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	b25b      	sxtb	r3, r3
 800ade8:	4313      	orrs	r3, r2
 800adea:	b25a      	sxtb	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	7e5b      	ldrb	r3, [r3, #25]
 800adf0:	b25b      	sxtb	r3, r3
 800adf2:	011b      	lsls	r3, r3, #4
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	4313      	orrs	r3, r2
 800adf8:	b25a      	sxtb	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7e1b      	ldrb	r3, [r3, #24]
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	015b      	lsls	r3, r3, #5
 800ae02:	b25b      	sxtb	r3, r3
 800ae04:	4313      	orrs	r3, r2
 800ae06:	b25a      	sxtb	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	7ddb      	ldrb	r3, [r3, #23]
 800ae0c:	b25b      	sxtb	r3, r3
 800ae0e:	019b      	lsls	r3, r3, #6
 800ae10:	b25b      	sxtb	r3, r3
 800ae12:	4313      	orrs	r3, r2
 800ae14:	b25a      	sxtb	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	7d9b      	ldrb	r3, [r3, #22]
 800ae1a:	b25b      	sxtb	r3, r3
 800ae1c:	01db      	lsls	r3, r3, #7
 800ae1e:	b25b      	sxtb	r3, r3
 800ae20:	4313      	orrs	r3, r2
 800ae22:	b25b      	sxtb	r3, r3
 800ae24:	b2da      	uxtb	r2, r3
 800ae26:	4b17      	ldr	r3, [pc, #92]	@ (800ae84 <e22_init+0x120>)
 800ae28:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8b9b      	ldrh	r3, [r3, #28]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	4b13      	ldr	r3, [pc, #76]	@ (800ae84 <e22_init+0x120>)
 800ae36:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	8b9b      	ldrh	r3, [r3, #28]
 800ae3c:	b2da      	uxtb	r2, r3
 800ae3e:	4b11      	ldr	r3, [pc, #68]	@ (800ae84 <e22_init+0x120>)
 800ae40:	721a      	strb	r2, [r3, #8]

	// UART transmits the configuration datas.
	// Try configuring the telemetry module for a ferw times because it's sometimes not working well.
    e22_chMode_config(lora_conf_struct);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f838 	bl	800aeb8 <e22_chMode_config>
    HAL_Delay(20);
 800ae48:	2014      	movs	r0, #20
 800ae4a:	f7fa f887 	bl	8004f5c <HAL_Delay>
	for(int i = 0; i < 5; i++)
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
 800ae52:	e00e      	b.n	800ae72 <e22_init+0x10e>
	{
		HAL_UART_Transmit(huart, data_packet, data_packet[2] + 3, 50);
 800ae54:	4b0b      	ldr	r3, [pc, #44]	@ (800ae84 <e22_init+0x120>)
 800ae56:	789b      	ldrb	r3, [r3, #2]
 800ae58:	3303      	adds	r3, #3
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	2332      	movs	r3, #50	@ 0x32
 800ae5e:	4909      	ldr	r1, [pc, #36]	@ (800ae84 <e22_init+0x120>)
 800ae60:	6838      	ldr	r0, [r7, #0]
 800ae62:	f7fe fd47 	bl	80098f4 <HAL_UART_Transmit>
		HAL_Delay(10);
 800ae66:	200a      	movs	r0, #10
 800ae68:	f7fa f878 	bl	8004f5c <HAL_Delay>
	for(int i = 0; i < 5; i++)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	dded      	ble.n	800ae54 <e22_init+0xf0>
	}

#ifdef DEBUG_TELEM_VIA_TTL
	view_e22_response(&TELEM_UART_HNDLR, &TTL_HNDLR);
#endif
}
 800ae78:	bf00      	nop
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20001b4c 	.word	0x20001b4c

0800ae88 <e22_chMode_sleep>:
  * @brief  Makes the module asleep.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_sleep(e22_conf_struct_t *lora_conf_struct)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	//For sleep mode M0 -> 1    M1 -> 1
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_SET);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	891b      	ldrh	r3, [r3, #8]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	f7fb fc8a 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_SET);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6858      	ldr	r0, [r3, #4]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	895b      	ldrh	r3, [r3, #10]
 800aea8:	2201      	movs	r2, #1
 800aeaa:	4619      	mov	r1, r3
 800aeac:	f7fb fc82 	bl	80067b4 <HAL_GPIO_WritePin>
}
 800aeb0:	bf00      	nop
 800aeb2:	3708      	adds	r7, #8
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <e22_chMode_config>:
  * @brief  Changes the mode to config.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_config(e22_conf_struct_t *lora_conf_struct)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_RESET);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6818      	ldr	r0, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	891b      	ldrh	r3, [r3, #8]
 800aec8:	2200      	movs	r2, #0
 800aeca:	4619      	mov	r1, r3
 800aecc:	f7fb fc72 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_SET);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6858      	ldr	r0, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	895b      	ldrh	r3, [r3, #10]
 800aed8:	2201      	movs	r2, #1
 800aeda:	4619      	mov	r1, r3
 800aedc:	f7fb fc6a 	bl	80067b4 <HAL_GPIO_WritePin>
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <e22_chMode_transmit>:
  * @brief  Changes the mode to transmit.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_chMode_transmit(e22_conf_struct_t *lora_conf_struct)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin , GPIO_PIN_RESET);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6818      	ldr	r0, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	891b      	ldrh	r3, [r3, #8]
 800aef8:	2200      	movs	r2, #0
 800aefa:	4619      	mov	r1, r3
 800aefc:	f7fb fc5a 	bl	80067b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin , GPIO_PIN_RESET);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6858      	ldr	r0, [r3, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	895b      	ldrh	r3, [r3, #10]
 800af08:	2200      	movs	r2, #0
 800af0a:	4619      	mov	r1, r3
 800af0c:	f7fb fc52 	bl	80067b4 <HAL_GPIO_WritePin>
}
 800af10:	bf00      	nop
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals(bme280_struct_t* BME, uint32_t* ut, uint32_t* up, uint32_t* uh)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08c      	sub	sp, #48	@ 0x30
 800af1c:	af04      	add	r7, sp, #16
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 30);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6898      	ldr	r0, [r3, #8]
 800af2a:	231e      	movs	r3, #30
 800af2c:	9302      	str	r3, [sp, #8]
 800af2e:	2301      	movs	r3, #1
 800af30:	9301      	str	r3, [sp, #4]
 800af32:	f107 0314 	add.w	r3, r7, #20
 800af36:	9300      	str	r3, [sp, #0]
 800af38:	2301      	movs	r3, #1
 800af3a:	22f3      	movs	r2, #243	@ 0xf3
 800af3c:	21ec      	movs	r1, #236	@ 0xec
 800af3e:	f7fb fed9 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800af42:	4603      	mov	r3, r0
 800af44:	77fb      	strb	r3, [r7, #31]
	BME->flags.is_bme_updated_1 = 0;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	BME->flags.is_bme_updated_3 = 0;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	if((params[0] & 0x01) == 0x00)
 800af56:	7d3b      	ldrb	r3, [r7, #20]
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d139      	bne.n	800afd4 <bme280_getVals+0xbc>
	{
		retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6898      	ldr	r0, [r3, #8]
 800af64:	2314      	movs	r3, #20
 800af66:	9302      	str	r3, [sp, #8]
 800af68:	2308      	movs	r3, #8
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	f107 0314 	add.w	r3, r7, #20
 800af70:	9300      	str	r3, [sp, #0]
 800af72:	2301      	movs	r3, #1
 800af74:	22f7      	movs	r2, #247	@ 0xf7
 800af76:	21ec      	movs	r1, #236	@ 0xec
 800af78:	f7fb febc 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800af7c:	4603      	mov	r3, r0
 800af7e:	77fb      	strb	r3, [r7, #31]
		if (retVal == HAL_OK){
 800af80:	7ffb      	ldrb	r3, [r7, #31]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d126      	bne.n	800afd4 <bme280_getVals+0xbc>
			BME->flags.is_bme_updated_1 = 1;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			BME->flags.is_bme_updated_3 = 1;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2201      	movs	r2, #1
 800af92:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			*ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	031a      	lsls	r2, r3, #12
 800af9a:	7e3b      	ldrb	r3, [r7, #24]
 800af9c:	011b      	lsls	r3, r3, #4
 800af9e:	4313      	orrs	r3, r2
 800afa0:	7e7a      	ldrb	r2, [r7, #25]
 800afa2:	0912      	lsrs	r2, r2, #4
 800afa4:	b2d2      	uxtb	r2, r2
 800afa6:	4313      	orrs	r3, r2
 800afa8:	461a      	mov	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	601a      	str	r2, [r3, #0]
			*up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800afae:	7d3b      	ldrb	r3, [r7, #20]
 800afb0:	031a      	lsls	r2, r3, #12
 800afb2:	7d7b      	ldrb	r3, [r7, #21]
 800afb4:	011b      	lsls	r3, r3, #4
 800afb6:	4313      	orrs	r3, r2
 800afb8:	7dba      	ldrb	r2, [r7, #22]
 800afba:	0912      	lsrs	r2, r2, #4
 800afbc:	b2d2      	uxtb	r2, r2
 800afbe:	4313      	orrs	r3, r2
 800afc0:	461a      	mov	r2, r3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	601a      	str	r2, [r3, #0]
			*uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 800afc6:	7ebb      	ldrb	r3, [r7, #26]
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	7efa      	ldrb	r2, [r7, #27]
 800afcc:	4313      	orrs	r3, r2
 800afce:	461a      	mov	r2, r3
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	601a      	str	r2, [r3, #0]
		}
	}
	UNUSED(retVal);
}
 800afd4:	bf00      	nop
 800afd6:	3720      	adds	r7, #32
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	0000      	movs	r0, r0
	...

0800afe0 <bme280_get_altitude>:

static void bme280_get_altitude(bme280_struct_t* BME)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
	float p_seaLevel = 1013.25;		//hPa
 800afe8:	4b31      	ldr	r3, [pc, #196]	@ (800b0b0 <bme280_get_altitude+0xd0>)
 800afea:	60fb      	str	r3, [r7, #12]
	float alt = 44330.0 * (1.0 - pow((BME->datas.pressure / p_seaLevel), (1.0 / 5.255)));
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	ed93 7a04 	vldr	s14, [r3, #16]
 800aff2:	edd7 7a03 	vldr	s15, [r7, #12]
 800aff6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800affa:	ee16 0a90 	vmov	r0, s13
 800affe:	f7f5 fac3 	bl	8000588 <__aeabi_f2d>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 800b0a0 <bme280_get_altitude+0xc0>
 800b00a:	ec43 2b10 	vmov	d0, r2, r3
 800b00e:	f006 fc25 	bl	801185c <pow>
 800b012:	ec53 2b10 	vmov	r2, r3, d0
 800b016:	f04f 0000 	mov.w	r0, #0
 800b01a:	4926      	ldr	r1, [pc, #152]	@ (800b0b4 <bme280_get_altitude+0xd4>)
 800b01c:	f7f5 f954 	bl	80002c8 <__aeabi_dsub>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4610      	mov	r0, r2
 800b026:	4619      	mov	r1, r3
 800b028:	a31f      	add	r3, pc, #124	@ (adr r3, 800b0a8 <bme280_get_altitude+0xc8>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 fb03 	bl	8000638 <__aeabi_dmul>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	4610      	mov	r0, r2
 800b038:	4619      	mov	r1, r3
 800b03a:	f7f5 fdf5 	bl	8000c28 <__aeabi_d2f>
 800b03e:	4603      	mov	r3, r0
 800b040:	60bb      	str	r3, [r7, #8]
	BME->datas.height = alt;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	619a      	str	r2, [r3, #24]
	BME->datas.altitude = alt - BME->parameters->base_alt;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800b050:	ed97 7a02 	vldr	s14, [r7, #8]
 800b054:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	edc3 7a07 	vstr	s15, [r3, #28]
	if(BME->datas.altitude > BME->parameters->max_alt && BME->parameters->base_alt != 0.0)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	ed93 7a07 	vldr	s14, [r3, #28]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800b06c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b074:	dc00      	bgt.n	800b078 <bme280_get_altitude+0x98>
	{
		BME->parameters->max_alt = BME->datas.altitude;
	}
}
 800b076:	e00d      	b.n	800b094 <bme280_get_altitude+0xb4>
	if(BME->datas.altitude > BME->parameters->max_alt && BME->parameters->base_alt != 0.0)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800b080:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b088:	d004      	beq.n	800b094 <bme280_get_altitude+0xb4>
		BME->parameters->max_alt = BME->datas.altitude;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	69d2      	ldr	r2, [r2, #28]
 800b092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b094:	bf00      	nop
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	f3af 8000 	nop.w
 800b0a0:	ccd9456c 	.word	0xccd9456c
 800b0a4:	3fc85b95 	.word	0x3fc85b95
 800b0a8:	00000000 	.word	0x00000000
 800b0ac:	40e5a540 	.word	0x40e5a540
 800b0b0:	447d5000 	.word	0x447d5000
 800b0b4:	3ff00000 	.word	0x3ff00000

0800b0b8 <bme280_config>:
void bme280_config(bme280_struct_t* BME)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b090      	sub	sp, #64	@ 0x40
 800b0bc:	af04      	add	r7, sp, #16
 800b0be:	6078      	str	r0, [r7, #4]
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	BME->parameters->base_alt = 0.0;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f04f 0200 	mov.w	r2, #0
 800b0c8:	625a      	str	r2, [r3, #36]	@ 0x24
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(BME->device_config.BME_I2C);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f7fb fce6 	bl	8006aa0 <HAL_I2C_DeInit>
	HAL_Delay(5);
 800b0d4:	2005      	movs	r0, #5
 800b0d6:	f7f9 ff41 	bl	8004f5c <HAL_Delay>
	HAL_I2C_Init(BME->device_config.BME_I2C);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fb fb9a 	bl	8006818 <HAL_I2C_Init>
	HAL_Delay(5);
 800b0e4:	2005      	movs	r0, #5
 800b0e6:	f7f9 ff39 	bl	8004f5c <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6898      	ldr	r0, [r3, #8]
 800b0ee:	23c8      	movs	r3, #200	@ 0xc8
 800b0f0:	9302      	str	r3, [sp, #8]
 800b0f2:	2319      	movs	r3, #25
 800b0f4:	9301      	str	r3, [sp, #4]
 800b0f6:	f107 030c 	add.w	r3, r7, #12
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	2288      	movs	r2, #136	@ 0x88
 800b100:	21ec      	movs	r1, #236	@ 0xec
 800b102:	f7fb fdf7 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800b106:	4603      	mov	r3, r0
 800b108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800b10c:	7b3b      	ldrb	r3, [r7, #12]
 800b10e:	4619      	mov	r1, r3
 800b110:	7b7b      	ldrb	r3, [r7, #13]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	b29a      	uxth	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	b292      	uxth	r2, r2
 800b11e:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 800b120:	7bbb      	ldrb	r3, [r7, #14]
 800b122:	b219      	sxth	r1, r3
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	b21b      	sxth	r3, r3
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b21a      	sxth	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	430a      	orrs	r2, r1
 800b132:	b212      	sxth	r2, r2
 800b134:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 800b136:	7c3b      	ldrb	r3, [r7, #16]
 800b138:	b219      	sxth	r1, r3
 800b13a:	7c7b      	ldrb	r3, [r7, #17]
 800b13c:	b21b      	sxth	r3, r3
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	b21a      	sxth	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	430a      	orrs	r2, r1
 800b148:	b212      	sxth	r2, r2
 800b14a:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800b14c:	7cbb      	ldrb	r3, [r7, #18]
 800b14e:	b21a      	sxth	r2, r3
 800b150:	7cfb      	ldrb	r3, [r7, #19]
 800b152:	b21b      	sxth	r3, r3
 800b154:	021b      	lsls	r3, r3, #8
 800b156:	b21b      	sxth	r3, r3
 800b158:	4313      	orrs	r3, r2
 800b15a:	b21a      	sxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	b292      	uxth	r2, r2
 800b162:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 800b164:	7d3b      	ldrb	r3, [r7, #20]
 800b166:	b219      	sxth	r1, r3
 800b168:	7d7b      	ldrb	r3, [r7, #21]
 800b16a:	b21b      	sxth	r3, r3
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	b21a      	sxth	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	430a      	orrs	r2, r1
 800b176:	b212      	sxth	r2, r2
 800b178:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800b17a:	7dbb      	ldrb	r3, [r7, #22]
 800b17c:	b219      	sxth	r1, r3
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	b21b      	sxth	r3, r3
 800b182:	021b      	lsls	r3, r3, #8
 800b184:	b21a      	sxth	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	b212      	sxth	r2, r2
 800b18e:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 800b190:	7e3b      	ldrb	r3, [r7, #24]
 800b192:	b219      	sxth	r1, r3
 800b194:	7e7b      	ldrb	r3, [r7, #25]
 800b196:	b21b      	sxth	r3, r3
 800b198:	021b      	lsls	r3, r3, #8
 800b19a:	b21a      	sxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	b212      	sxth	r2, r2
 800b1a4:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 800b1a6:	7ebb      	ldrb	r3, [r7, #26]
 800b1a8:	b219      	sxth	r1, r3
 800b1aa:	7efb      	ldrb	r3, [r7, #27]
 800b1ac:	b21b      	sxth	r3, r3
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	b21a      	sxth	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	430a      	orrs	r2, r1
 800b1b8:	b212      	sxth	r2, r2
 800b1ba:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800b1bc:	7f3b      	ldrb	r3, [r7, #28]
 800b1be:	b219      	sxth	r1, r3
 800b1c0:	7f7b      	ldrb	r3, [r7, #29]
 800b1c2:	b21b      	sxth	r3, r3
 800b1c4:	021b      	lsls	r3, r3, #8
 800b1c6:	b21a      	sxth	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	430a      	orrs	r2, r1
 800b1ce:	b212      	sxth	r2, r2
 800b1d0:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 800b1d2:	7fbb      	ldrb	r3, [r7, #30]
 800b1d4:	b219      	sxth	r1, r3
 800b1d6:	7ffb      	ldrb	r3, [r7, #31]
 800b1d8:	b21b      	sxth	r3, r3
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	b21a      	sxth	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	430a      	orrs	r2, r1
 800b1e4:	b212      	sxth	r2, r2
 800b1e6:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 800b1e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1ec:	b219      	sxth	r1, r3
 800b1ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b1f2:	b21b      	sxth	r3, r3
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	b21a      	sxth	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	430a      	orrs	r2, r1
 800b1fe:	b212      	sxth	r2, r2
 800b200:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800b202:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b206:	b219      	sxth	r1, r3
 800b208:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b20c:	b21b      	sxth	r3, r3
 800b20e:	021b      	lsls	r3, r3, #8
 800b210:	b21a      	sxth	r2, r3
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	b212      	sxth	r2, r2
 800b21a:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b224:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6898      	ldr	r0, [r3, #8]
 800b22a:	2332      	movs	r3, #50	@ 0x32
 800b22c:	9302      	str	r3, [sp, #8]
 800b22e:	2307      	movs	r3, #7
 800b230:	9301      	str	r3, [sp, #4]
 800b232:	f107 030c 	add.w	r3, r7, #12
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	2301      	movs	r3, #1
 800b23a:	22e1      	movs	r2, #225	@ 0xe1
 800b23c:	21ec      	movs	r1, #236	@ 0xec
 800b23e:	f7fb fd59 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800b242:	4603      	mov	r3, r0
 800b244:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800b248:	7b3b      	ldrb	r3, [r7, #12]
 800b24a:	b219      	sxth	r1, r3
 800b24c:	7b7b      	ldrb	r3, [r7, #13]
 800b24e:	b21b      	sxth	r3, r3
 800b250:	021b      	lsls	r3, r3, #8
 800b252:	b21a      	sxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	430a      	orrs	r2, r1
 800b25a:	b212      	sxth	r2, r2
 800b25c:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	7bba      	ldrb	r2, [r7, #14]
 800b264:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800b266:	7c3b      	ldrb	r3, [r7, #16]
 800b268:	b21b      	sxth	r3, r3
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	b219      	sxth	r1, r3
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	b21b      	sxth	r3, r3
 800b274:	011b      	lsls	r3, r3, #4
 800b276:	b21a      	sxth	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	430a      	orrs	r2, r1
 800b27e:	b212      	sxth	r2, r2
 800b280:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 800b282:	7c3b      	ldrb	r3, [r7, #16]
 800b284:	091b      	lsrs	r3, r3, #4
 800b286:	b2db      	uxtb	r3, r3
 800b288:	b219      	sxth	r1, r3
 800b28a:	7c7b      	ldrb	r3, [r7, #17]
 800b28c:	b21b      	sxth	r3, r3
 800b28e:	011b      	lsls	r3, r3, #4
 800b290:	b21a      	sxth	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	430a      	orrs	r2, r1
 800b298:	b212      	sxth	r2, r2
 800b29a:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 800b29c:	7cba      	ldrb	r2, [r7, #18]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	b252      	sxtb	r2, r2
 800b2a4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	uint8_t data_ctrl = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	72fb      	strb	r3, [r7, #11]
	data_ctrl = BME->device_config.over_sampling;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	795b      	ldrb	r3, [r3, #5]
 800b2b0:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6898      	ldr	r0, [r3, #8]
 800b2b6:	2332      	movs	r3, #50	@ 0x32
 800b2b8:	9302      	str	r3, [sp, #8]
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	9301      	str	r3, [sp, #4]
 800b2be:	f107 030b 	add.w	r3, r7, #11
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	22f2      	movs	r2, #242	@ 0xf2
 800b2c8:	21ec      	movs	r1, #236	@ 0xec
 800b2ca:	f7fb fc19 	bl	8006b00 <HAL_I2C_Mem_Write>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_ctrl = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	72fb      	strb	r3, [r7, #11]
	data_ctrl = BME->device_config.mode | (BME->device_config.over_sampling << 2) | (BME->device_config.over_sampling << 5);																		//Mode has been chosed.
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	791b      	ldrb	r3, [r3, #4]
 800b2dc:	b25a      	sxtb	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	795b      	ldrb	r3, [r3, #5]
 800b2e2:	b25b      	sxtb	r3, r3
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	b25b      	sxtb	r3, r3
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	b25a      	sxtb	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	795b      	ldrb	r3, [r3, #5]
 800b2f0:	b25b      	sxtb	r3, r3
 800b2f2:	015b      	lsls	r3, r3, #5
 800b2f4:	b25b      	sxtb	r3, r3
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	b25b      	sxtb	r3, r3
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6898      	ldr	r0, [r3, #8]
 800b302:	2332      	movs	r3, #50	@ 0x32
 800b304:	9302      	str	r3, [sp, #8]
 800b306:	2301      	movs	r3, #1
 800b308:	9301      	str	r3, [sp, #4]
 800b30a:	f107 030b 	add.w	r3, r7, #11
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2301      	movs	r3, #1
 800b312:	22f4      	movs	r2, #244	@ 0xf4
 800b314:	21ec      	movs	r1, #236	@ 0xec
 800b316:	f7fb fbf3 	bl	8006b00 <HAL_I2C_Mem_Write>
 800b31a:	4603      	mov	r3, r0
 800b31c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_ctrl = 0;
 800b320:	2300      	movs	r3, #0
 800b322:	72fb      	strb	r3, [r7, #11]
	data_ctrl = (BME->device_config.filter << 2) | (BME->device_config.period << 5);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	799b      	ldrb	r3, [r3, #6]
 800b328:	b25b      	sxtb	r3, r3
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	b25a      	sxtb	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	79db      	ldrb	r3, [r3, #7]
 800b332:	b25b      	sxtb	r3, r3
 800b334:	015b      	lsls	r3, r3, #5
 800b336:	b25b      	sxtb	r3, r3
 800b338:	4313      	orrs	r3, r2
 800b33a:	b25b      	sxtb	r3, r3
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6898      	ldr	r0, [r3, #8]
 800b344:	2332      	movs	r3, #50	@ 0x32
 800b346:	9302      	str	r3, [sp, #8]
 800b348:	2301      	movs	r3, #1
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	f107 030b 	add.w	r3, r7, #11
 800b350:	9300      	str	r3, [sp, #0]
 800b352:	2301      	movs	r3, #1
 800b354:	22f5      	movs	r2, #245	@ 0xf5
 800b356:	21ec      	movs	r1, #236	@ 0xec
 800b358:	f7fb fbd2 	bl	8006b00 <HAL_I2C_Mem_Write>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	float base = 0.0;
 800b362:	f04f 0300 	mov.w	r3, #0
 800b366:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_Delay(100);
 800b368:	2064      	movs	r0, #100	@ 0x64
 800b36a:	f7f9 fdf7 	bl	8004f5c <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 800b36e:	2300      	movs	r3, #0
 800b370:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b372:	e011      	b.n	800b398 <bme280_config+0x2e0>
	{
	  bme280_update(BME);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f853 	bl	800b420 <bme280_update>
	  base +=  BME->datas.altitude;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	edd3 7a07 	vldr	s15, [r3, #28]
 800b380:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b384:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b388:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	  HAL_Delay(30);
 800b38c:	201e      	movs	r0, #30
 800b38e:	f7f9 fde5 	bl	8004f5c <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 800b392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b394:	3301      	adds	r3, #1
 800b396:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39a:	2b1d      	cmp	r3, #29
 800b39c:	ddea      	ble.n	800b374 <bme280_config+0x2bc>
	}
	BME->parameters->base_alt = (base / 30.0);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b3a6:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 800b3aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3ae:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	BME->flags.is_bme_updated_2 = 1;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	bme280_update(BME);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f830 	bl	800b420 <bme280_update>
	BME->parameters->max_alt = 0.0;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f04f 0200 	mov.w	r2, #0
 800b3c8:	629a      	str	r2, [r3, #40]	@ 0x28

	UNUSED(retVal);
}
 800b3ca:	bf00      	nop
 800b3cc:	3730      	adds	r7, #48	@ 0x30
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <bme280_init>:

uint8_t bme280_init(bme280_struct_t* BME)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b088      	sub	sp, #32
 800b3d6:	af04      	add	r7, sp, #16
 800b3d8:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];
	if(BME->parameters == NULL)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d106      	bne.n	800b3f0 <bme280_init+0x1e>
	{
		BME->parameters = malloc(sizeof(*BME->parameters));
 800b3e2:	202c      	movs	r0, #44	@ 0x2c
 800b3e4:	f001 fa24 	bl	800c830 <malloc>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	601a      	str	r2, [r3, #0]
	}
	HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 20);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6898      	ldr	r0, [r3, #8]
 800b3f4:	2314      	movs	r3, #20
 800b3f6:	9302      	str	r3, [sp, #8]
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	9301      	str	r3, [sp, #4]
 800b3fc:	f107 030c 	add.w	r3, r7, #12
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	2301      	movs	r3, #1
 800b404:	22d0      	movs	r2, #208	@ 0xd0
 800b406:	21ec      	movs	r1, #236	@ 0xec
 800b408:	f7fb fc74 	bl	8006cf4 <HAL_I2C_Mem_Read>

	if(*buf == 0x60)
 800b40c:	7b3b      	ldrb	r3, [r7, #12]
 800b40e:	2b60      	cmp	r3, #96	@ 0x60
 800b410:	d101      	bne.n	800b416 <bme280_init+0x44>
		return 0;
 800b412:	2300      	movs	r3, #0
 800b414:	e000      	b.n	800b418 <bme280_init+0x46>

	return 1;
 800b416:	2301      	movs	r3, #1
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <bme280_update>:


void bme280_update(bme280_struct_t* BME){
 800b420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b424:	b0d8      	sub	sp, #352	@ 0x160
 800b426:	af00      	add	r7, sp, #0
 800b428:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int32_t var1_t, var2_t, T, adc_T;
	uint32_t	ut, up, uh;

	bme280_getVals(BME, &ut, &up, &uh);
 800b42c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800b430:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800b434:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800b438:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800b43c:	f7ff fd6c 	bl	800af18 <bme280_getVals>

	if(BME->flags.is_bme_updated_1 == 1)
 800b440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b444:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b448:	2b01      	cmp	r3, #1
 800b44a:	f040 83b7 	bne.w	800bbbc <bme280_update+0x79c>
	{
		//For tempereature
		adc_T =	ut;
 800b44e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b452:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800b456:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b45a:	10da      	asrs	r2, r3, #3
 800b45c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	881b      	ldrh	r3, [r3, #0]
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	1ad2      	subs	r2, r2, r3
 800b468:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b472:	fb02 f303 	mul.w	r3, r2, r3
 800b476:	12db      	asrs	r3, r3, #11
 800b478:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 800b47c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b480:	111a      	asrs	r2, r3, #4
 800b482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	1ad1      	subs	r1, r2, r3
 800b48c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b490:	111a      	asrs	r2, r3, #4
 800b492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	881b      	ldrh	r3, [r3, #0]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	fb01 f303 	mul.w	r3, r1, r3
 800b4a0:	131a      	asrs	r2, r3, #12
 800b4a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b4ac:	fb02 f303 	mul.w	r3, r2, r3
 800b4b0:	139b      	asrs	r3, r3, #14
 800b4b2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		int32_t t_fine = var1_t + var2_t;
 800b4b6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800b4ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b4be:	4413      	add	r3, r2
 800b4c0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
		T = (t_fine * 5 + 128) >> 8;
 800b4c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	3380      	adds	r3, #128	@ 0x80
 800b4d0:	121b      	asrs	r3, r3, #8
 800b4d2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		BME->datas.temperature = (float)T / 100.0;
 800b4d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4e2:	eddf 6abb 	vldr	s13, [pc, #748]	@ 800b7d0 <bme280_update+0x3b0>
 800b4e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ee:	edc3 7a03 	vstr	s15, [r3, #12]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)up;
 800b4f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4fa:	657a      	str	r2, [r7, #84]	@ 0x54
 800b4fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b500:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
		var1_p = ((int64_t)t_fine) - 128000;
 800b504:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b508:	17da      	asrs	r2, r3, #31
 800b50a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b50e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b512:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b516:	460b      	mov	r3, r1
 800b518:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 800b51c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b51e:	4613      	mov	r3, r2
 800b520:	f143 33ff 	adc.w	r3, r3, #4294967295	@ 0xffffffff
 800b524:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b526:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b52a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 800b52e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b532:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b536:	fb03 f102 	mul.w	r1, r3, r2
 800b53a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b53e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	18ca      	adds	r2, r1, r3
 800b548:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b54c:	fba3 4503 	umull	r4, r5, r3, r3
 800b550:	1953      	adds	r3, r2, r5
 800b552:	461d      	mov	r5, r3
 800b554:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b55e:	b21b      	sxth	r3, r3
 800b560:	17da      	asrs	r2, r3, #31
 800b562:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b566:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b56a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800b56e:	4603      	mov	r3, r0
 800b570:	fb03 f205 	mul.w	r2, r3, r5
 800b574:	460b      	mov	r3, r1
 800b576:	fb04 f303 	mul.w	r3, r4, r3
 800b57a:	4413      	add	r3, r2
 800b57c:	4602      	mov	r2, r0
 800b57e:	fba4 ab02 	umull	sl, fp, r4, r2
 800b582:	445b      	add	r3, fp
 800b584:	469b      	mov	fp, r3
 800b586:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
 800b58a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 800b58e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b598:	b21b      	sxth	r3, r3
 800b59a:	17da      	asrs	r2, r3, #31
 800b59c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b5a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b5a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b5a8:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800b5ac:	462a      	mov	r2, r5
 800b5ae:	fb02 f203 	mul.w	r2, r2, r3
 800b5b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	441a      	add	r2, r3
 800b5be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	fba3 8901 	umull	r8, r9, r3, r1
 800b5c8:	eb02 0309 	add.w	r3, r2, r9
 800b5cc:	4699      	mov	r9, r3
 800b5ce:	f04f 0000 	mov.w	r0, #0
 800b5d2:	f04f 0100 	mov.w	r1, #0
 800b5d6:	ea4f 4149 	mov.w	r1, r9, lsl #17
 800b5da:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 800b5de:	ea4f 4048 	mov.w	r0, r8, lsl #17
 800b5e2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b5e6:	1814      	adds	r4, r2, r0
 800b5e8:	643c      	str	r4, [r7, #64]	@ 0x40
 800b5ea:	414b      	adcs	r3, r1
 800b5ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ee:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800b5f2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 800b5f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b600:	b21b      	sxth	r3, r3
 800b602:	17da      	asrs	r2, r3, #31
 800b604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b608:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b60c:	f04f 0000 	mov.w	r0, #0
 800b610:	f04f 0100 	mov.w	r1, #0
 800b614:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b618:	00d9      	lsls	r1, r3, #3
 800b61a:	2000      	movs	r0, #0
 800b61c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b620:	1814      	adds	r4, r2, r0
 800b622:	63bc      	str	r4, [r7, #56]	@ 0x38
 800b624:	414b      	adcs	r3, r1
 800b626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b628:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b62c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 800b630:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b634:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b638:	fb03 f102 	mul.w	r1, r3, r2
 800b63c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b640:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b644:	fb02 f303 	mul.w	r3, r2, r3
 800b648:	18ca      	adds	r2, r1, r3
 800b64a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b64e:	fba3 1303 	umull	r1, r3, r3, r3
 800b652:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b656:	460b      	mov	r3, r1
 800b658:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b660:	18d3      	adds	r3, r2, r3
 800b662:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b666:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b670:	b21b      	sxth	r3, r3
 800b672:	17da      	asrs	r2, r3, #31
 800b674:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b678:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b67c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800b680:	462b      	mov	r3, r5
 800b682:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b686:	4642      	mov	r2, r8
 800b688:	fb02 f203 	mul.w	r2, r2, r3
 800b68c:	464b      	mov	r3, r9
 800b68e:	4621      	mov	r1, r4
 800b690:	fb01 f303 	mul.w	r3, r1, r3
 800b694:	4413      	add	r3, r2
 800b696:	4622      	mov	r2, r4
 800b698:	4641      	mov	r1, r8
 800b69a:	fba2 1201 	umull	r1, r2, r2, r1
 800b69e:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800b6a2:	460a      	mov	r2, r1
 800b6a4:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800b6a8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b6b2:	f04f 0000 	mov.w	r0, #0
 800b6b6:	f04f 0100 	mov.w	r1, #0
 800b6ba:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800b6be:	4623      	mov	r3, r4
 800b6c0:	0a18      	lsrs	r0, r3, #8
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b6c8:	462b      	mov	r3, r5
 800b6ca:	1219      	asrs	r1, r3, #8
 800b6cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b6d6:	b21b      	sxth	r3, r3
 800b6d8:	17da      	asrs	r2, r3, #31
 800b6da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b6de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b6e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b6e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b6ea:	464a      	mov	r2, r9
 800b6ec:	fb02 f203 	mul.w	r2, r2, r3
 800b6f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b6f4:	4644      	mov	r4, r8
 800b6f6:	fb04 f303 	mul.w	r3, r4, r3
 800b6fa:	441a      	add	r2, r3
 800b6fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b700:	4644      	mov	r4, r8
 800b702:	fba3 4304 	umull	r4, r3, r3, r4
 800b706:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b70a:	4623      	mov	r3, r4
 800b70c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b714:	18d3      	adds	r3, r2, r3
 800b716:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b71a:	f04f 0200 	mov.w	r2, #0
 800b71e:	f04f 0300 	mov.w	r3, #0
 800b722:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800b726:	464c      	mov	r4, r9
 800b728:	0323      	lsls	r3, r4, #12
 800b72a:	4644      	mov	r4, r8
 800b72c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800b730:	4644      	mov	r4, r8
 800b732:	0322      	lsls	r2, r4, #12
 800b734:	1884      	adds	r4, r0, r2
 800b736:	633c      	str	r4, [r7, #48]	@ 0x30
 800b738:	eb41 0303 	adc.w	r3, r1, r3
 800b73c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b73e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b742:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 800b746:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b74a:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800b74e:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800b752:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800b756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	88db      	ldrh	r3, [r3, #6]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	2200      	movs	r2, #0
 800b762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b766:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b76a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b76e:	462b      	mov	r3, r5
 800b770:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800b774:	4642      	mov	r2, r8
 800b776:	fb02 f203 	mul.w	r2, r2, r3
 800b77a:	464b      	mov	r3, r9
 800b77c:	4621      	mov	r1, r4
 800b77e:	fb01 f303 	mul.w	r3, r1, r3
 800b782:	4413      	add	r3, r2
 800b784:	4622      	mov	r2, r4
 800b786:	4641      	mov	r1, r8
 800b788:	fba2 1201 	umull	r1, r2, r2, r1
 800b78c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b790:	460a      	mov	r2, r1
 800b792:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800b796:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800b79a:	4413      	add	r3, r2
 800b79c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b7a0:	f04f 0200 	mov.w	r2, #0
 800b7a4:	f04f 0300 	mov.w	r3, #0
 800b7a8:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	104a      	asrs	r2, r1, #1
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	17cb      	asrs	r3, r1, #31
 800b7b4:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		if(var1_p == 0)
 800b7b8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	d109      	bne.n	800b7d4 <bme280_update+0x3b4>
		{
			P = 0;
 800b7c0:	f04f 0200 	mov.w	r2, #0
 800b7c4:	f04f 0300 	mov.w	r3, #0
 800b7c8:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 800b7cc:	e14e      	b.n	800ba6c <bme280_update+0x64c>
 800b7ce:	bf00      	nop
 800b7d0:	42c80000 	.word	0x42c80000
		}else
		{
		P = 1048576 - adc_P;
 800b7d4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 800b7de:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b7e0:	eb61 0303 	sbc.w	r3, r1, r3
 800b7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b7e6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b7ea:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 800b7ee:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b7f2:	f04f 0000 	mov.w	r0, #0
 800b7f6:	f04f 0100 	mov.w	r1, #0
 800b7fa:	07d9      	lsls	r1, r3, #31
 800b7fc:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800b800:	07d0      	lsls	r0, r2, #31
 800b802:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b806:	1a84      	subs	r4, r0, r2
 800b808:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800b80c:	eb61 0303 	sbc.w	r3, r1, r3
 800b810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b814:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800b818:	4622      	mov	r2, r4
 800b81a:	462b      	mov	r3, r5
 800b81c:	1891      	adds	r1, r2, r2
 800b81e:	6239      	str	r1, [r7, #32]
 800b820:	415b      	adcs	r3, r3
 800b822:	627b      	str	r3, [r7, #36]	@ 0x24
 800b824:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b828:	4621      	mov	r1, r4
 800b82a:	1851      	adds	r1, r2, r1
 800b82c:	61b9      	str	r1, [r7, #24]
 800b82e:	4629      	mov	r1, r5
 800b830:	414b      	adcs	r3, r1
 800b832:	61fb      	str	r3, [r7, #28]
 800b834:	f04f 0200 	mov.w	r2, #0
 800b838:	f04f 0300 	mov.w	r3, #0
 800b83c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800b840:	4649      	mov	r1, r9
 800b842:	018b      	lsls	r3, r1, #6
 800b844:	4641      	mov	r1, r8
 800b846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b84a:	4641      	mov	r1, r8
 800b84c:	018a      	lsls	r2, r1, #6
 800b84e:	4641      	mov	r1, r8
 800b850:	1889      	adds	r1, r1, r2
 800b852:	6139      	str	r1, [r7, #16]
 800b854:	4649      	mov	r1, r9
 800b856:	eb43 0101 	adc.w	r1, r3, r1
 800b85a:	6179      	str	r1, [r7, #20]
 800b85c:	f04f 0200 	mov.w	r2, #0
 800b860:	f04f 0300 	mov.w	r3, #0
 800b864:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800b868:	4649      	mov	r1, r9
 800b86a:	008b      	lsls	r3, r1, #2
 800b86c:	4641      	mov	r1, r8
 800b86e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b872:	4641      	mov	r1, r8
 800b874:	008a      	lsls	r2, r1, #2
 800b876:	4610      	mov	r0, r2
 800b878:	4619      	mov	r1, r3
 800b87a:	4603      	mov	r3, r0
 800b87c:	4622      	mov	r2, r4
 800b87e:	189b      	adds	r3, r3, r2
 800b880:	60bb      	str	r3, [r7, #8]
 800b882:	460b      	mov	r3, r1
 800b884:	462a      	mov	r2, r5
 800b886:	eb42 0303 	adc.w	r3, r2, r3
 800b88a:	60fb      	str	r3, [r7, #12]
 800b88c:	f04f 0200 	mov.w	r2, #0
 800b890:	f04f 0300 	mov.w	r3, #0
 800b894:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800b898:	4649      	mov	r1, r9
 800b89a:	008b      	lsls	r3, r1, #2
 800b89c:	4641      	mov	r1, r8
 800b89e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	008a      	lsls	r2, r1, #2
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	189b      	adds	r3, r3, r2
 800b8b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b8b4:	462b      	mov	r3, r5
 800b8b6:	460a      	mov	r2, r1
 800b8b8:	eb42 0303 	adc.w	r3, r2, r3
 800b8bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b8c0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b8c4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b8c8:	f7f5 fb0c 	bl	8000ee4 <__aeabi_ldivmod>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 800b8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b8de:	b21b      	sxth	r3, r3
 800b8e0:	17da      	asrs	r2, r3, #31
 800b8e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b8e4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b8e6:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b8ea:	f04f 0000 	mov.w	r0, #0
 800b8ee:	f04f 0100 	mov.w	r1, #0
 800b8f2:	0b50      	lsrs	r0, r2, #13
 800b8f4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b8f8:	1359      	asrs	r1, r3, #13
 800b8fa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800b8fe:	462b      	mov	r3, r5
 800b900:	fb00 f203 	mul.w	r2, r0, r3
 800b904:	4623      	mov	r3, r4
 800b906:	fb03 f301 	mul.w	r3, r3, r1
 800b90a:	4413      	add	r3, r2
 800b90c:	4622      	mov	r2, r4
 800b90e:	fba2 1200 	umull	r1, r2, r2, r0
 800b912:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b916:	460a      	mov	r2, r1
 800b918:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800b91c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b920:	4413      	add	r3, r2
 800b922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b926:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b92a:	f04f 0000 	mov.w	r0, #0
 800b92e:	f04f 0100 	mov.w	r1, #0
 800b932:	0b50      	lsrs	r0, r2, #13
 800b934:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b938:	1359      	asrs	r1, r3, #13
 800b93a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800b93e:	462b      	mov	r3, r5
 800b940:	fb00 f203 	mul.w	r2, r0, r3
 800b944:	4623      	mov	r3, r4
 800b946:	fb03 f301 	mul.w	r3, r3, r1
 800b94a:	4413      	add	r3, r2
 800b94c:	4622      	mov	r2, r4
 800b94e:	fba2 1200 	umull	r1, r2, r2, r0
 800b952:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b956:	460a      	mov	r2, r1
 800b958:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800b95c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b960:	4413      	add	r3, r2
 800b962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b966:	f04f 0200 	mov.w	r2, #0
 800b96a:	f04f 0300 	mov.w	r3, #0
 800b96e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800b972:	4621      	mov	r1, r4
 800b974:	0e4a      	lsrs	r2, r1, #25
 800b976:	4629      	mov	r1, r5
 800b978:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800b97c:	4629      	mov	r1, r5
 800b97e:	164b      	asrs	r3, r1, #25
 800b980:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800b984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b98e:	b21b      	sxth	r3, r3
 800b990:	17da      	asrs	r2, r3, #31
 800b992:	673b      	str	r3, [r7, #112]	@ 0x70
 800b994:	677a      	str	r2, [r7, #116]	@ 0x74
 800b996:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b99a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800b99e:	462a      	mov	r2, r5
 800b9a0:	fb02 f203 	mul.w	r2, r2, r3
 800b9a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	fb01 f303 	mul.w	r3, r1, r3
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	fba2 1201 	umull	r1, r2, r2, r1
 800b9ba:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b9be:	460a      	mov	r2, r1
 800b9c0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800b9c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b9ce:	f04f 0200 	mov.w	r2, #0
 800b9d2:	f04f 0300 	mov.w	r3, #0
 800b9d6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800b9da:	4621      	mov	r1, r4
 800b9dc:	0cca      	lsrs	r2, r1, #19
 800b9de:	4629      	mov	r1, r5
 800b9e0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	14cb      	asrs	r3, r1, #19
 800b9e8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 800b9ec:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800b9f0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b9f4:	1884      	adds	r4, r0, r2
 800b9f6:	66bc      	str	r4, [r7, #104]	@ 0x68
 800b9f8:	eb41 0303 	adc.w	r3, r1, r3
 800b9fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b9fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800ba02:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800ba06:	4621      	mov	r1, r4
 800ba08:	1889      	adds	r1, r1, r2
 800ba0a:	6639      	str	r1, [r7, #96]	@ 0x60
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	eb43 0101 	adc.w	r1, r3, r1
 800ba12:	6679      	str	r1, [r7, #100]	@ 0x64
 800ba14:	f04f 0000 	mov.w	r0, #0
 800ba18:	f04f 0100 	mov.w	r1, #0
 800ba1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ba20:	4623      	mov	r3, r4
 800ba22:	0a18      	lsrs	r0, r3, #8
 800ba24:	462b      	mov	r3, r5
 800ba26:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800ba2a:	462b      	mov	r3, r5
 800ba2c:	1219      	asrs	r1, r3, #8
 800ba2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ba38:	b21b      	sxth	r3, r3
 800ba3a:	17da      	asrs	r2, r3, #31
 800ba3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba3e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800ba40:	f04f 0200 	mov.w	r2, #0
 800ba44:	f04f 0300 	mov.w	r3, #0
 800ba48:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 800ba4c:	464c      	mov	r4, r9
 800ba4e:	0123      	lsls	r3, r4, #4
 800ba50:	4644      	mov	r4, r8
 800ba52:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800ba56:	4644      	mov	r4, r8
 800ba58:	0122      	lsls	r2, r4, #4
 800ba5a:	1884      	adds	r4, r0, r2
 800ba5c:	603c      	str	r4, [r7, #0]
 800ba5e:	eb41 0303 	adc.w	r3, r1, r3
 800ba62:	607b      	str	r3, [r7, #4]
 800ba64:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ba68:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		}

		BME->datas.pressure = ((float)P / 256.0 / 100.0);
 800ba6c:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800ba70:	f7f5 f9fa 	bl	8000e68 <__aeabi_l2f>
 800ba74:	4603      	mov	r3, r0
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7f4 fd86 	bl	8000588 <__aeabi_f2d>
 800ba7c:	f04f 0200 	mov.w	r2, #0
 800ba80:	4b51      	ldr	r3, [pc, #324]	@ (800bbc8 <bme280_update+0x7a8>)
 800ba82:	f7f4 ff03 	bl	800088c <__aeabi_ddiv>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	f04f 0200 	mov.w	r2, #0
 800ba92:	4b4e      	ldr	r3, [pc, #312]	@ (800bbcc <bme280_update+0x7ac>)
 800ba94:	f7f4 fefa 	bl	800088c <__aeabi_ddiv>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	4619      	mov	r1, r3
 800baa0:	f7f5 f8c2 	bl	8000c28 <__aeabi_d2f>
 800baa4:	4602      	mov	r2, r0
 800baa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baaa:	611a      	str	r2, [r3, #16]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = uh;
 800baac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bab0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		var_h = (t_fine - ((int32_t)76800));
 800bab4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800bab8:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800babc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 800bac0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800bac4:	039a      	lsls	r2, r3, #14
 800bac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800bad0:	051b      	lsls	r3, r3, #20
 800bad2:	1ad2      	subs	r2, r2, r3
 800bad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800bade:	4619      	mov	r1, r3
 800bae0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bae4:	fb01 f303 	mul.w	r3, r1, r3
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800baee:	0bdb      	lsrs	r3, r3, #15
 800baf0:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800baf4:	6812      	ldr	r2, [r2, #0]
 800baf6:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800bafa:	4611      	mov	r1, r2
 800bafc:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800bb00:	fb01 f202 	mul.w	r2, r1, r2
 800bb04:	0a92      	lsrs	r2, r2, #10
 800bb06:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800bb0a:	6809      	ldr	r1, [r1, #0]
 800bb0c:	7f09      	ldrb	r1, [r1, #28]
 800bb0e:	4608      	mov	r0, r1
 800bb10:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800bb14:	fb00 f101 	mul.w	r1, r0, r1
 800bb18:	0ac9      	lsrs	r1, r1, #11
 800bb1a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800bb1e:	fb01 f202 	mul.w	r2, r1, r2
 800bb22:	0a92      	lsrs	r2, r2, #10
 800bb24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bb28:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800bb2c:	6809      	ldr	r1, [r1, #0]
 800bb2e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800bb32:	fb01 f202 	mul.w	r2, r1, r2
 800bb36:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800bb3a:	0b92      	lsrs	r2, r2, #14
 800bb3c:	fb02 f303 	mul.w	r3, r2, r3
 800bb40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 800bb44:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bb48:	0bdb      	lsrs	r3, r3, #15
 800bb4a:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800bb4e:	0bd2      	lsrs	r2, r2, #15
 800bb50:	fb02 f303 	mul.w	r3, r2, r3
 800bb54:	09db      	lsrs	r3, r3, #7
 800bb56:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800bb5a:	6812      	ldr	r2, [r2, #0]
 800bb5c:	7e12      	ldrb	r2, [r2, #24]
 800bb5e:	fb02 f303 	mul.w	r3, r2, r3
 800bb62:	091b      	lsrs	r3, r3, #4
 800bb64:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800bb68:	1ad3      	subs	r3, r2, r3
 800bb6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800bb6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bb72:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800bb76:	bf28      	it	cs
 800bb78:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 800bb7c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		BME->datas.humidity = ((float)(var_h >> 12)) / 1024.0;
 800bb80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800bb84:	0b1b      	lsrs	r3, r3, #12
 800bb86:	ee07 3a90 	vmov	s15, r3
 800bb8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb8e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800bbd0 <bme280_update+0x7b0>
 800bb92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9a:	edc3 7a05 	vstr	s15, [r3, #20]

		// Get time of update.
		BME->datas.time_of_update = HAL_GetTick();
 800bb9e:	f7f9 f9d1 	bl	8004f44 <HAL_GetTick>
 800bba2:	4602      	mov	r2, r0
 800bba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba8:	625a      	str	r2, [r3, #36]	@ 0x24

		//get altitude
		bme280_get_altitude(BME);
 800bbaa:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800bbae:	f7ff fa17 	bl	800afe0 <bme280_get_altitude>
		BME->flags.is_bme_updated_1 = 0;
 800bbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	}

}
 800bbbc:	bf00      	nop
 800bbbe:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbc8:	40700000 	.word	0x40700000
 800bbcc:	40590000 	.word	0x40590000
 800bbd0:	44800000 	.word	0x44800000

0800bbd4 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b088      	sub	sp, #32
 800bbd8:	af04      	add	r7, sp, #16
 800bbda:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800bbec:	4b23      	ldr	r3, [pc, #140]	@ (800bc7c <bmi088_init+0xa8>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 800bbf2:	4b23      	ldr	r3, [pc, #140]	@ (800bc80 <bmi088_init+0xac>)
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d107      	bne.n	800bc14 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 800bc04:	2101      	movs	r1, #1
 800bc06:	2018      	movs	r0, #24
 800bc08:	f000 fdf6 	bl	800c7f8 <calloc>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	461a      	mov	r2, r3
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68d8      	ldr	r0, [r3, #12]
 800bc18:	2332      	movs	r3, #50	@ 0x32
 800bc1a:	9302      	str	r3, [sp, #8]
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	2301      	movs	r3, #1
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2130      	movs	r1, #48	@ 0x30
 800bc2c:	f7fb f862 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800bc30:	4603      	mov	r3, r0
 800bc32:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68d8      	ldr	r0, [r3, #12]
 800bc38:	2332      	movs	r3, #50	@ 0x32
 800bc3a:	9302      	str	r3, [sp, #8]
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	f107 030c 	add.w	r3, r7, #12
 800bc44:	3301      	adds	r3, #1
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	21d0      	movs	r1, #208	@ 0xd0
 800bc4e:	f7fb f851 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800bc52:	4603      	mov	r3, r0
 800bc54:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 800bc56:	7b3b      	ldrb	r3, [r7, #12]
 800bc58:	2b1e      	cmp	r3, #30
 800bc5a:	d003      	beq.n	800bc64 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800bc5c:	7bfb      	ldrb	r3, [r7, #15]
 800bc5e:	f043 0301 	orr.w	r3, r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 800bc64:	7b7b      	ldrb	r3, [r7, #13]
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d003      	beq.n	800bc72 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
 800bc6c:	f043 0302 	orr.w	r3, r3, #2
 800bc70:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	20001b55 	.word	0x20001b55
 800bc80:	20001b56 	.word	0x20001b56

0800bc84 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b088      	sub	sp, #32
 800bc88:	af04      	add	r7, sp, #16
 800bc8a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7f9 fe8b 	bl	80059ae <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7f9 fe85 	bl	80059ae <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	68d8      	ldr	r0, [r3, #12]
 800bcb0:	2364      	movs	r3, #100	@ 0x64
 800bcb2:	9302      	str	r3, [sp, #8]
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	f107 030c 	add.w	r3, r7, #12
 800bcbc:	9300      	str	r3, [sp, #0]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	227c      	movs	r2, #124	@ 0x7c
 800bcc2:	2130      	movs	r1, #48	@ 0x30
 800bcc4:	f7fa ff1c 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	461a      	mov	r2, r3
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	68d8      	ldr	r0, [r3, #12]
 800bcda:	2364      	movs	r3, #100	@ 0x64
 800bcdc:	9302      	str	r3, [sp, #8]
 800bcde:	2301      	movs	r3, #1
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	f107 030c 	add.w	r3, r7, #12
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	2301      	movs	r3, #1
 800bcea:	227d      	movs	r2, #125	@ 0x7d
 800bcec:	2130      	movs	r1, #48	@ 0x30
 800bcee:	f7fa ff07 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	7bfb      	ldrb	r3, [r7, #15]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800bcfc:	2014      	movs	r0, #20
 800bcfe:	f7f9 f92d 	bl	8004f5c <HAL_Delay>

	buf[0] = ACC_RESET;
 800bd02:	23b6      	movs	r3, #182	@ 0xb6
 800bd04:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	68d8      	ldr	r0, [r3, #12]
 800bd0a:	2364      	movs	r3, #100	@ 0x64
 800bd0c:	9302      	str	r3, [sp, #8]
 800bd0e:	2301      	movs	r3, #1
 800bd10:	9301      	str	r3, [sp, #4]
 800bd12:	f107 030c 	add.w	r3, r7, #12
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	2301      	movs	r3, #1
 800bd1a:	227e      	movs	r2, #126	@ 0x7e
 800bd1c:	2130      	movs	r1, #48	@ 0x30
 800bd1e:	f7fa feef 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	7bfb      	ldrb	r3, [r7, #15]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d002      	beq.n	800bd38 <bmi088_config+0xb4>
 800bd32:	4bb4      	ldr	r3, [pc, #720]	@ (800c004 <bmi088_config+0x380>)
 800bd34:	22a0      	movs	r2, #160	@ 0xa0
 800bd36:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800bd38:	200a      	movs	r0, #10
 800bd3a:	f7f9 f90f 	bl	8004f5c <HAL_Delay>

	buf[0] = FIFO_RESET;
 800bd3e:	23b0      	movs	r3, #176	@ 0xb0
 800bd40:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68d8      	ldr	r0, [r3, #12]
 800bd46:	2364      	movs	r3, #100	@ 0x64
 800bd48:	9302      	str	r3, [sp, #8]
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	f107 030c 	add.w	r3, r7, #12
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2301      	movs	r3, #1
 800bd56:	227e      	movs	r2, #126	@ 0x7e
 800bd58:	2130      	movs	r1, #48	@ 0x30
 800bd5a:	f7fa fed1 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	461a      	mov	r2, r3
 800bd62:	7bfb      	ldrb	r3, [r7, #15]
 800bd64:	4313      	orrs	r3, r2
 800bd66:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d002      	beq.n	800bd74 <bmi088_config+0xf0>
 800bd6e:	4ba5      	ldr	r3, [pc, #660]	@ (800c004 <bmi088_config+0x380>)
 800bd70:	22a5      	movs	r2, #165	@ 0xa5
 800bd72:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800bd74:	200a      	movs	r0, #10
 800bd76:	f7f9 f8f1 	bl	8004f5c <HAL_Delay>

	buf[0] = GYRO_RESET;
 800bd7a:	23b6      	movs	r3, #182	@ 0xb6
 800bd7c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68d8      	ldr	r0, [r3, #12]
 800bd82:	2364      	movs	r3, #100	@ 0x64
 800bd84:	9302      	str	r3, [sp, #8]
 800bd86:	2301      	movs	r3, #1
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	f107 030c 	add.w	r3, r7, #12
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	2301      	movs	r3, #1
 800bd92:	2214      	movs	r2, #20
 800bd94:	21d0      	movs	r1, #208	@ 0xd0
 800bd96:	f7fa feb3 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d002      	beq.n	800bdb0 <bmi088_config+0x12c>
 800bdaa:	4b96      	ldr	r3, [pc, #600]	@ (800c004 <bmi088_config+0x380>)
 800bdac:	22aa      	movs	r2, #170	@ 0xaa
 800bdae:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800bdb0:	200a      	movs	r0, #10
 800bdb2:	f7f9 f8d3 	bl	8004f5c <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	7a9b      	ldrb	r3, [r3, #10]
 800bdba:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68d8      	ldr	r0, [r3, #12]
 800bdc0:	2364      	movs	r3, #100	@ 0x64
 800bdc2:	9302      	str	r3, [sp, #8]
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	f107 030c 	add.w	r3, r7, #12
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	2301      	movs	r3, #1
 800bdd0:	220f      	movs	r2, #15
 800bdd2:	21d0      	movs	r1, #208	@ 0xd0
 800bdd4:	f7fa fe94 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d002      	beq.n	800bdee <bmi088_config+0x16a>
 800bde8:	4b86      	ldr	r3, [pc, #536]	@ (800c004 <bmi088_config+0x380>)
 800bdea:	22b0      	movs	r2, #176	@ 0xb0
 800bdec:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	7a5b      	ldrb	r3, [r3, #9]
 800bdf2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68d8      	ldr	r0, [r3, #12]
 800bdf8:	2314      	movs	r3, #20
 800bdfa:	9302      	str	r3, [sp, #8]
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	f107 030c 	add.w	r3, r7, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	2301      	movs	r3, #1
 800be08:	2210      	movs	r2, #16
 800be0a:	21d0      	movs	r1, #208	@ 0xd0
 800be0c:	f7fa fe78 	bl	8006b00 <HAL_I2C_Mem_Write>
 800be10:	4603      	mov	r3, r0
 800be12:	461a      	mov	r2, r3
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	4313      	orrs	r3, r2
 800be18:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d002      	beq.n	800be26 <bmi088_config+0x1a2>
 800be20:	4b78      	ldr	r3, [pc, #480]	@ (800c004 <bmi088_config+0x380>)
 800be22:	22b4      	movs	r2, #180	@ 0xb4
 800be24:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	7a1b      	ldrb	r3, [r3, #8]
 800be2a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68d8      	ldr	r0, [r3, #12]
 800be30:	2314      	movs	r3, #20
 800be32:	9302      	str	r3, [sp, #8]
 800be34:	2301      	movs	r3, #1
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	f107 030c 	add.w	r3, r7, #12
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	2301      	movs	r3, #1
 800be40:	2211      	movs	r2, #17
 800be42:	21d0      	movs	r1, #208	@ 0xd0
 800be44:	f7fa fe5c 	bl	8006b00 <HAL_I2C_Mem_Write>
 800be48:	4603      	mov	r3, r0
 800be4a:	461a      	mov	r2, r3
 800be4c:	7bfb      	ldrb	r3, [r7, #15]
 800be4e:	4313      	orrs	r3, r2
 800be50:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800be52:	7bfb      	ldrb	r3, [r7, #15]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <bmi088_config+0x1da>
 800be58:	4b6a      	ldr	r3, [pc, #424]	@ (800c004 <bmi088_config+0x380>)
 800be5a:	22b8      	movs	r2, #184	@ 0xb8
 800be5c:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800be5e:	2014      	movs	r0, #20
 800be60:	f7f9 f87c 	bl	8004f5c <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 800be64:	2380      	movs	r3, #128	@ 0x80
 800be66:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68d8      	ldr	r0, [r3, #12]
 800be6c:	2314      	movs	r3, #20
 800be6e:	9302      	str	r3, [sp, #8]
 800be70:	2301      	movs	r3, #1
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	f107 030c 	add.w	r3, r7, #12
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	2301      	movs	r3, #1
 800be7c:	2215      	movs	r2, #21
 800be7e:	21d0      	movs	r1, #208	@ 0xd0
 800be80:	f7fa fe3e 	bl	8006b00 <HAL_I2C_Mem_Write>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	4313      	orrs	r3, r2
 800be8c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d002      	beq.n	800be9a <bmi088_config+0x216>
 800be94:	4b5b      	ldr	r3, [pc, #364]	@ (800c004 <bmi088_config+0x380>)
 800be96:	22be      	movs	r2, #190	@ 0xbe
 800be98:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800be9a:	2305      	movs	r3, #5
 800be9c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	68d8      	ldr	r0, [r3, #12]
 800bea2:	2314      	movs	r3, #20
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	2301      	movs	r3, #1
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	f107 030c 	add.w	r3, r7, #12
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	2301      	movs	r3, #1
 800beb2:	2216      	movs	r2, #22
 800beb4:	21d0      	movs	r1, #208	@ 0xd0
 800beb6:	f7fa fe23 	bl	8006b00 <HAL_I2C_Mem_Write>
 800beba:	4603      	mov	r3, r0
 800bebc:	461a      	mov	r2, r3
 800bebe:	7bfb      	ldrb	r3, [r7, #15]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bec4:	7bfb      	ldrb	r3, [r7, #15]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <bmi088_config+0x24c>
 800beca:	4b4e      	ldr	r3, [pc, #312]	@ (800c004 <bmi088_config+0x380>)
 800becc:	22c2      	movs	r2, #194	@ 0xc2
 800bece:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 800bed0:	2381      	movs	r3, #129	@ 0x81
 800bed2:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68d8      	ldr	r0, [r3, #12]
 800bed8:	2314      	movs	r3, #20
 800beda:	9302      	str	r3, [sp, #8]
 800bedc:	2301      	movs	r3, #1
 800bede:	9301      	str	r3, [sp, #4]
 800bee0:	f107 030c 	add.w	r3, r7, #12
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	2301      	movs	r3, #1
 800bee8:	2218      	movs	r2, #24
 800beea:	21d0      	movs	r1, #208	@ 0xd0
 800beec:	f7fa fe08 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d002      	beq.n	800bf06 <bmi088_config+0x282>
 800bf00:	4b40      	ldr	r3, [pc, #256]	@ (800c004 <bmi088_config+0x380>)
 800bf02:	22c6      	movs	r2, #198	@ 0xc6
 800bf04:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800bf06:	2304      	movs	r3, #4
 800bf08:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68d8      	ldr	r0, [r3, #12]
 800bf0e:	2314      	movs	r3, #20
 800bf10:	9302      	str	r3, [sp, #8]
 800bf12:	2301      	movs	r3, #1
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	f107 030c 	add.w	r3, r7, #12
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	227d      	movs	r2, #125	@ 0x7d
 800bf20:	2130      	movs	r1, #48	@ 0x30
 800bf22:	f7fa fded 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bf26:	4603      	mov	r3, r0
 800bf28:	461a      	mov	r2, r3
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d002      	beq.n	800bf3c <bmi088_config+0x2b8>
 800bf36:	4b33      	ldr	r3, [pc, #204]	@ (800c004 <bmi088_config+0x380>)
 800bf38:	22cb      	movs	r2, #203	@ 0xcb
 800bf3a:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800bf3c:	2008      	movs	r0, #8
 800bf3e:	f7f9 f80d 	bl	8004f5c <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	791b      	ldrb	r3, [r3, #4]
 800bf46:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68d8      	ldr	r0, [r3, #12]
 800bf4c:	2314      	movs	r3, #20
 800bf4e:	9302      	str	r3, [sp, #8]
 800bf50:	2301      	movs	r3, #1
 800bf52:	9301      	str	r3, [sp, #4]
 800bf54:	f107 030c 	add.w	r3, r7, #12
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	227c      	movs	r2, #124	@ 0x7c
 800bf5e:	2130      	movs	r1, #48	@ 0x30
 800bf60:	f7fa fdce 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461a      	mov	r2, r3
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <bmi088_config+0x2f6>
 800bf74:	4b23      	ldr	r3, [pc, #140]	@ (800c004 <bmi088_config+0x380>)
 800bf76:	22d0      	movs	r2, #208	@ 0xd0
 800bf78:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800bf7a:	2008      	movs	r0, #8
 800bf7c:	f7f8 ffee 	bl	8004f5c <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	799b      	ldrb	r3, [r3, #6]
 800bf84:	b25b      	sxtb	r3, r3
 800bf86:	011b      	lsls	r3, r3, #4
 800bf88:	b25a      	sxtb	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	79db      	ldrb	r3, [r3, #7]
 800bf8e:	b25b      	sxtb	r3, r3
 800bf90:	4313      	orrs	r3, r2
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68d8      	ldr	r0, [r3, #12]
 800bf9c:	2314      	movs	r3, #20
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	9301      	str	r3, [sp, #4]
 800bfa4:	f107 030c 	add.w	r3, r7, #12
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	2301      	movs	r3, #1
 800bfac:	2240      	movs	r2, #64	@ 0x40
 800bfae:	2130      	movs	r1, #48	@ 0x30
 800bfb0:	f7fa fda6 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bfbe:	7bfb      	ldrb	r3, [r7, #15]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <bmi088_config+0x346>
 800bfc4:	4b0f      	ldr	r3, [pc, #60]	@ (800c004 <bmi088_config+0x380>)
 800bfc6:	22d5      	movs	r2, #213	@ 0xd5
 800bfc8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	795b      	ldrb	r3, [r3, #5]
 800bfce:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	68d8      	ldr	r0, [r3, #12]
 800bfd4:	2314      	movs	r3, #20
 800bfd6:	9302      	str	r3, [sp, #8]
 800bfd8:	2301      	movs	r3, #1
 800bfda:	9301      	str	r3, [sp, #4]
 800bfdc:	f107 030c 	add.w	r3, r7, #12
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	2241      	movs	r2, #65	@ 0x41
 800bfe6:	2130      	movs	r1, #48	@ 0x30
 800bfe8:	f7fa fd8a 	bl	8006b00 <HAL_I2C_Mem_Write>
 800bfec:	4603      	mov	r3, r0
 800bfee:	461a      	mov	r2, r3
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bff6:	7bfb      	ldrb	r3, [r7, #15]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d005      	beq.n	800c008 <bmi088_config+0x384>
 800bffc:	4b01      	ldr	r3, [pc, #4]	@ (800c004 <bmi088_config+0x380>)
 800bffe:	22d9      	movs	r2, #217	@ 0xd9
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	e001      	b.n	800c008 <bmi088_config+0x384>
 800c004:	20001b58 	.word	0x20001b58

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800c008:	230a      	movs	r3, #10
 800c00a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68d8      	ldr	r0, [r3, #12]
 800c010:	2314      	movs	r3, #20
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	2301      	movs	r3, #1
 800c016:	9301      	str	r3, [sp, #4]
 800c018:	f107 030c 	add.w	r3, r7, #12
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	2301      	movs	r3, #1
 800c020:	2253      	movs	r2, #83	@ 0x53
 800c022:	2130      	movs	r1, #48	@ 0x30
 800c024:	f7fa fd6c 	bl	8006b00 <HAL_I2C_Mem_Write>
 800c028:	4603      	mov	r3, r0
 800c02a:	461a      	mov	r2, r3
 800c02c:	7bfb      	ldrb	r3, [r7, #15]
 800c02e:	4313      	orrs	r3, r2
 800c030:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800c032:	2304      	movs	r3, #4
 800c034:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	68d8      	ldr	r0, [r3, #12]
 800c03a:	2314      	movs	r3, #20
 800c03c:	9302      	str	r3, [sp, #8]
 800c03e:	2301      	movs	r3, #1
 800c040:	9301      	str	r3, [sp, #4]
 800c042:	f107 030c 	add.w	r3, r7, #12
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	2301      	movs	r3, #1
 800c04a:	2258      	movs	r2, #88	@ 0x58
 800c04c:	2130      	movs	r1, #48	@ 0x30
 800c04e:	f7fa fd57 	bl	8006b00 <HAL_I2C_Mem_Write>
 800c052:	4603      	mov	r3, r0
 800c054:	461a      	mov	r2, r3
 800c056:	7bfb      	ldrb	r3, [r7, #15]
 800c058:	4313      	orrs	r3, r2
 800c05a:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800c062:	4618      	mov	r0, r3
 800c064:	f7f9 fc95 	bl	8005992 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800c06e:	4618      	mov	r0, r3
 800c070:	f7f9 fc8f 	bl	8005992 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 800c074:	2046      	movs	r0, #70	@ 0x46
 800c076:	f7f8 ff71 	bl	8004f5c <HAL_Delay>
}
 800c07a:	bf00      	nop
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	0000      	movs	r0, r0
	...

0800c088 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 800c088:	b5b0      	push	{r4, r5, r7, lr}
 800c08a:	b092      	sub	sp, #72	@ 0x48
 800c08c:	af04      	add	r7, sp, #16
 800c08e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	785b      	ldrb	r3, [r3, #1]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	f000 81d9 	beq.w	800c452 <bmi088_update+0x3ca>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68d8      	ldr	r0, [r3, #12]
 800c0a4:	2314      	movs	r3, #20
 800c0a6:	9302      	str	r3, [sp, #8]
 800c0a8:	2309      	movs	r3, #9
 800c0aa:	9301      	str	r3, [sp, #4]
 800c0ac:	f107 0314 	add.w	r3, r7, #20
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	2212      	movs	r2, #18
 800c0b6:	2130      	movs	r1, #48	@ 0x30
 800c0b8:	f7fa fe1c 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	68d8      	ldr	r0, [r3, #12]
 800c0c6:	2314      	movs	r3, #20
 800c0c8:	9302      	str	r3, [sp, #8]
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	9301      	str	r3, [sp, #4]
 800c0ce:	f107 0310 	add.w	r3, r7, #16
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	2222      	movs	r2, #34	@ 0x22
 800c0d8:	2130      	movs	r1, #48	@ 0x30
 800c0da:	f7fa fe0b 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 800c0e4:	7c3b      	ldrb	r3, [r7, #16]
 800c0e6:	b21b      	sxth	r3, r3
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	b21a      	sxth	r2, r3
 800c0ec:	7c7b      	ldrb	r3, [r7, #17]
 800c0ee:	095b      	lsrs	r3, r3, #5
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	b21b      	sxth	r3, r3
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	b21b      	sxth	r3, r3
 800c0f8:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800c0fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c104:	d305      	bcc.n	800c112 <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 800c106:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c108:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	867b      	strh	r3, [r7, #50]	@ 0x32
 800c110:	e023      	b.n	800c15a <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 800c112:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c114:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 800c116:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c122:	ee17 0a90 	vmov	r0, s15
 800c126:	f7f4 fa2f 	bl	8000588 <__aeabi_f2d>
 800c12a:	f04f 0200 	mov.w	r2, #0
 800c12e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800c132:	f7f4 fa81 	bl	8000638 <__aeabi_dmul>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4610      	mov	r0, r2
 800c13c:	4619      	mov	r1, r3
 800c13e:	f04f 0200 	mov.w	r2, #0
 800c142:	4bb5      	ldr	r3, [pc, #724]	@ (800c418 <bmi088_update+0x390>)
 800c144:	f7f4 f8c2 	bl	80002cc <__adddf3>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	4610      	mov	r0, r2
 800c14e:	4619      	mov	r1, r3
 800c150:	f7f4 fd6a 	bl	8000c28 <__aeabi_d2f>
 800c154:	4602      	mov	r2, r0
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	649a      	str	r2, [r3, #72]	@ 0x48
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 800c15a:	7f3b      	ldrb	r3, [r7, #28]
 800c15c:	041a      	lsls	r2, r3, #16
 800c15e:	7efb      	ldrb	r3, [r7, #27]
 800c160:	021b      	lsls	r3, r3, #8
 800c162:	4313      	orrs	r3, r2
 800c164:	7eba      	ldrb	r2, [r7, #26]
 800c166:	4313      	orrs	r3, r2
 800c168:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 800c16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c16c:	ee07 3a90 	vmov	s15, r3
 800c170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c174:	ee17 0a90 	vmov	r0, s15
 800c178:	f7f4 fa06 	bl	8000588 <__aeabi_f2d>
 800c17c:	a3a0      	add	r3, pc, #640	@ (adr r3, 800c400 <bmi088_update+0x378>)
 800c17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c182:	f7f4 fa59 	bl	8000638 <__aeabi_dmul>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4610      	mov	r0, r2
 800c18c:	4619      	mov	r1, r3
 800c18e:	a39e      	add	r3, pc, #632	@ (adr r3, 800c408 <bmi088_update+0x380>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f7f4 fb7a 	bl	800088c <__aeabi_ddiv>
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4610      	mov	r0, r2
 800c19e:	4619      	mov	r1, r3
 800c1a0:	f7f4 fd42 	bl	8000c28 <__aeabi_d2f>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	64da      	str	r2, [r3, #76]	@ 0x4c

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 800c1aa:	7e7b      	ldrb	r3, [r7, #25]
 800c1ac:	b21b      	sxth	r3, r3
 800c1ae:	021b      	lsls	r3, r3, #8
 800c1b0:	b21a      	sxth	r2, r3
 800c1b2:	7e3b      	ldrb	r3, [r7, #24]
 800c1b4:	b21b      	sxth	r3, r3
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
 800c1bc:	b21b      	sxth	r3, r3
 800c1be:	021b      	lsls	r3, r3, #8
 800c1c0:	b21a      	sxth	r2, r3
 800c1c2:	7dbb      	ldrb	r3, [r7, #22]
 800c1c4:	b21b      	sxth	r3, r3
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 800c1ca:	7d7b      	ldrb	r3, [r7, #21]
 800c1cc:	b21b      	sxth	r3, r3
 800c1ce:	021b      	lsls	r3, r3, #8
 800c1d0:	b21a      	sxth	r2, r3
 800c1d2:	7d3b      	ldrb	r3, [r7, #20]
 800c1d4:	b21b      	sxth	r3, r3
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET;
 800c1da:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800c1de:	ee07 3a90 	vmov	s15, r3
 800c1e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1e6:	ee17 0a90 	vmov	r0, s15
 800c1ea:	f7f4 f9cd 	bl	8000588 <__aeabi_f2d>
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	4b8a      	ldr	r3, [pc, #552]	@ (800c41c <bmi088_update+0x394>)
 800c1f4:	f7f4 fb4a 	bl	800088c <__aeabi_ddiv>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4619      	mov	r1, r3
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	4b86      	ldr	r3, [pc, #536]	@ (800c420 <bmi088_update+0x398>)
 800c206:	f7f4 fa17 	bl	8000638 <__aeabi_dmul>
 800c20a:	4602      	mov	r2, r0
 800c20c:	460b      	mov	r3, r1
 800c20e:	4610      	mov	r0, r2
 800c210:	4619      	mov	r1, r3
 800c212:	f04f 0200 	mov.w	r2, #0
 800c216:	4b83      	ldr	r3, [pc, #524]	@ (800c424 <bmi088_update+0x39c>)
 800c218:	f7f4 fa0e 	bl	8000638 <__aeabi_dmul>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4614      	mov	r4, r2
 800c222:	461d      	mov	r5, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	795b      	ldrb	r3, [r3, #5]
 800c228:	3301      	adds	r3, #1
 800c22a:	ee07 3a90 	vmov	s15, r3
 800c22e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c232:	ee17 0a90 	vmov	r0, s15
 800c236:	f7f4 f9a7 	bl	8000588 <__aeabi_f2d>
 800c23a:	4602      	mov	r2, r0
 800c23c:	460b      	mov	r3, r1
 800c23e:	ec43 2b11 	vmov	d1, r2, r3
 800c242:	ed9f 0b73 	vldr	d0, [pc, #460]	@ 800c410 <bmi088_update+0x388>
 800c246:	f005 fb09 	bl	801185c <pow>
 800c24a:	ec53 2b10 	vmov	r2, r3, d0
 800c24e:	4620      	mov	r0, r4
 800c250:	4629      	mov	r1, r5
 800c252:	f7f4 f9f1 	bl	8000638 <__aeabi_dmul>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4610      	mov	r0, r2
 800c25c:	4619      	mov	r1, r3
 800c25e:	f04f 0200 	mov.w	r2, #0
 800c262:	4b71      	ldr	r3, [pc, #452]	@ (800c428 <bmi088_update+0x3a0>)
 800c264:	f7f4 f830 	bl	80002c8 <__aeabi_dsub>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	4610      	mov	r0, r2
 800c26e:	4619      	mov	r1, r3
 800c270:	f7f4 fcda 	bl	8000c28 <__aeabi_d2f>
 800c274:	4602      	mov	r2, r0
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	645a      	str	r2, [r3, #68]	@ 0x44
			BMI->datas.acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET;
 800c27a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c286:	ee17 0a90 	vmov	r0, s15
 800c28a:	f7f4 f97d 	bl	8000588 <__aeabi_f2d>
 800c28e:	f04f 0200 	mov.w	r2, #0
 800c292:	4b62      	ldr	r3, [pc, #392]	@ (800c41c <bmi088_update+0x394>)
 800c294:	f7f4 fafa 	bl	800088c <__aeabi_ddiv>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4610      	mov	r0, r2
 800c29e:	4619      	mov	r1, r3
 800c2a0:	f04f 0200 	mov.w	r2, #0
 800c2a4:	4b5e      	ldr	r3, [pc, #376]	@ (800c420 <bmi088_update+0x398>)
 800c2a6:	f7f4 f9c7 	bl	8000638 <__aeabi_dmul>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4610      	mov	r0, r2
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f04f 0200 	mov.w	r2, #0
 800c2b6:	4b5b      	ldr	r3, [pc, #364]	@ (800c424 <bmi088_update+0x39c>)
 800c2b8:	f7f4 f9be 	bl	8000638 <__aeabi_dmul>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4614      	mov	r4, r2
 800c2c2:	461d      	mov	r5, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	795b      	ldrb	r3, [r3, #5]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	ee07 3a90 	vmov	s15, r3
 800c2ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2d2:	ee17 0a90 	vmov	r0, s15
 800c2d6:	f7f4 f957 	bl	8000588 <__aeabi_f2d>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	ec43 2b11 	vmov	d1, r2, r3
 800c2e2:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 800c410 <bmi088_update+0x388>
 800c2e6:	f005 fab9 	bl	801185c <pow>
 800c2ea:	ec53 2b10 	vmov	r2, r3, d0
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f4 f9a1 	bl	8000638 <__aeabi_dmul>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	f04f 0200 	mov.w	r2, #0
 800c302:	4b4a      	ldr	r3, [pc, #296]	@ (800c42c <bmi088_update+0x3a4>)
 800c304:	f7f3 ffe2 	bl	80002cc <__adddf3>
 800c308:	4602      	mov	r2, r0
 800c30a:	460b      	mov	r3, r1
 800c30c:	4610      	mov	r0, r2
 800c30e:	4619      	mov	r1, r3
 800c310:	f7f4 fc8a 	bl	8000c28 <__aeabi_d2f>
 800c314:	4602      	mov	r2, r0
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	641a      	str	r2, [r3, #64]	@ 0x40
			BMI->datas.acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET;
 800c31a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c31e:	ee07 3a90 	vmov	s15, r3
 800c322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c326:	ee17 0a90 	vmov	r0, s15
 800c32a:	f7f4 f92d 	bl	8000588 <__aeabi_f2d>
 800c32e:	f04f 0200 	mov.w	r2, #0
 800c332:	4b3a      	ldr	r3, [pc, #232]	@ (800c41c <bmi088_update+0x394>)
 800c334:	f7f4 faaa 	bl	800088c <__aeabi_ddiv>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4610      	mov	r0, r2
 800c33e:	4619      	mov	r1, r3
 800c340:	f04f 0200 	mov.w	r2, #0
 800c344:	4b36      	ldr	r3, [pc, #216]	@ (800c420 <bmi088_update+0x398>)
 800c346:	f7f4 f977 	bl	8000638 <__aeabi_dmul>
 800c34a:	4602      	mov	r2, r0
 800c34c:	460b      	mov	r3, r1
 800c34e:	4610      	mov	r0, r2
 800c350:	4619      	mov	r1, r3
 800c352:	f04f 0200 	mov.w	r2, #0
 800c356:	4b33      	ldr	r3, [pc, #204]	@ (800c424 <bmi088_update+0x39c>)
 800c358:	f7f4 f96e 	bl	8000638 <__aeabi_dmul>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4614      	mov	r4, r2
 800c362:	461d      	mov	r5, r3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	795b      	ldrb	r3, [r3, #5]
 800c368:	3301      	adds	r3, #1
 800c36a:	ee07 3a90 	vmov	s15, r3
 800c36e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c372:	ee17 0a90 	vmov	r0, s15
 800c376:	f7f4 f907 	bl	8000588 <__aeabi_f2d>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	ec43 2b11 	vmov	d1, r2, r3
 800c382:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 800c410 <bmi088_update+0x388>
 800c386:	f005 fa69 	bl	801185c <pow>
 800c38a:	ec53 2b10 	vmov	r2, r3, d0
 800c38e:	4620      	mov	r0, r4
 800c390:	4629      	mov	r1, r5
 800c392:	f7f4 f951 	bl	8000638 <__aeabi_dmul>
 800c396:	4602      	mov	r2, r0
 800c398:	460b      	mov	r3, r1
 800c39a:	4610      	mov	r0, r2
 800c39c:	4619      	mov	r1, r3
 800c39e:	f04f 0200 	mov.w	r2, #0
 800c3a2:	4b21      	ldr	r3, [pc, #132]	@ (800c428 <bmi088_update+0x3a0>)
 800c3a4:	f7f3 ff92 	bl	80002cc <__adddf3>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f7f4 fc3a 	bl	8000c28 <__aeabi_d2f>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	63da      	str	r2, [r3, #60]	@ 0x3c

			if(is_starded)
 800c3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800c430 <bmi088_update+0x3a8>)
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d03a      	beq.n	800c438 <bmi088_update+0x3b0>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800c3ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3da:	d502      	bpl.n	800c3e2 <bmi088_update+0x35a>
 800c3dc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c434 <bmi088_update+0x3ac>
 800c3e0:	e007      	b.n	800c3f2 <bmi088_update+0x36a>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800c3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800c3f8:	e021      	b.n	800c43e <bmi088_update+0x3b6>
 800c3fa:	bf00      	nop
 800c3fc:	f3af 8000 	nop.w
 800c400:	00000000 	.word	0x00000000
 800c404:	40438800 	.word	0x40438800
 800c408:	00000000 	.word	0x00000000
 800c40c:	412e8480 	.word	0x412e8480
 800c410:	00000000 	.word	0x00000000
 800c414:	40000000 	.word	0x40000000
 800c418:	40370000 	.word	0x40370000
 800c41c:	40e00000 	.word	0x40e00000
 800c420:	408f4000 	.word	0x408f4000
 800c424:	3ff80000 	.word	0x3ff80000
 800c428:	40100000 	.word	0x40100000
 800c42c:	402e0000 	.word	0x402e0000
 800c430:	20001b56 	.word	0x20001b56
 800c434:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 800c438:	4ba9      	ldr	r3, [pc, #676]	@ (800c6e0 <bmi088_update+0x658>)
 800c43a:	2201      	movs	r2, #1
 800c43c:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	651a      	str	r2, [r3, #80]	@ 0x50
			BMI->flags.isAccelUpdated = 0;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 800c44c:	4ba5      	ldr	r3, [pc, #660]	@ (800c6e4 <bmi088_update+0x65c>)
 800c44e:	2201      	movs	r2, #1
 800c450:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 813b 	beq.w	800c6d2 <bmi088_update+0x64a>
 800c45c:	4ba1      	ldr	r3, [pc, #644]	@ (800c6e4 <bmi088_update+0x65c>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 8136 	beq.w	800c6d2 <bmi088_update+0x64a>
		{
			if(is_starded){
 800c466:	4b9e      	ldr	r3, [pc, #632]	@ (800c6e0 <bmi088_update+0x658>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8129 	beq.w	800c6c2 <bmi088_update+0x63a>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	68d8      	ldr	r0, [r3, #12]
 800c474:	230a      	movs	r3, #10
 800c476:	9302      	str	r3, [sp, #8]
 800c478:	2306      	movs	r3, #6
 800c47a:	9301      	str	r3, [sp, #4]
 800c47c:	f107 0308 	add.w	r3, r7, #8
 800c480:	9300      	str	r3, [sp, #0]
 800c482:	2301      	movs	r3, #1
 800c484:	2202      	movs	r2, #2
 800c486:	21d0      	movs	r1, #208	@ 0xd0
 800c488:	f7fa fc34 	bl	8006cf4 <HAL_I2C_Mem_Read>
 800c48c:	4603      	mov	r3, r0
 800c48e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800c492:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c496:	2b00      	cmp	r3, #0
 800c498:	f040 811a 	bne.w	800c6d0 <bmi088_update+0x648>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 800c49c:	7a7b      	ldrb	r3, [r7, #9]
 800c49e:	b21b      	sxth	r3, r3
 800c4a0:	021b      	lsls	r3, r3, #8
 800c4a2:	b21a      	sxth	r2, r3
 800c4a4:	7a3b      	ldrb	r3, [r7, #8]
 800c4a6:	b21b      	sxth	r3, r3
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 800c4ac:	7afb      	ldrb	r3, [r7, #11]
 800c4ae:	b21b      	sxth	r3, r3
 800c4b0:	021b      	lsls	r3, r3, #8
 800c4b2:	b21a      	sxth	r2, r3
 800c4b4:	7abb      	ldrb	r3, [r7, #10]
 800c4b6:	b21b      	sxth	r3, r3
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 800c4bc:	7b7b      	ldrb	r3, [r7, #13]
 800c4be:	b21b      	sxth	r3, r3
 800c4c0:	021b      	lsls	r3, r3, #8
 800c4c2:	b21a      	sxth	r2, r3
 800c4c4:	7b3b      	ldrb	r3, [r7, #12]
 800c4c6:	b21b      	sxth	r3, r3
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	843b      	strh	r3, [r7, #32]
/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][2]) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][1]) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][0]) * BMI->deltaTime;
*/
				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]);
 800c4cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c4d0:	ee07 3a90 	vmov	s15, r3
 800c4d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4d8:	ee17 0a90 	vmov	r0, s15
 800c4dc:	f7f4 f854 	bl	8000588 <__aeabi_f2d>
 800c4e0:	a37d      	add	r3, pc, #500	@ (adr r3, 800c6d8 <bmi088_update+0x650>)
 800c4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e6:	f7f4 f9d1 	bl	800088c <__aeabi_ddiv>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4614      	mov	r4, r2
 800c4f0:	461d      	mov	r5, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	7a9b      	ldrb	r3, [r3, #10]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c4fc:	4113      	asrs	r3, r2
 800c4fe:	ee07 3a90 	vmov	s15, r3
 800c502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c506:	ee17 0a90 	vmov	r0, s15
 800c50a:	f7f4 f83d 	bl	8000588 <__aeabi_f2d>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f4 f88f 	bl	8000638 <__aeabi_dmul>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	4614      	mov	r4, r2
 800c520:	461d      	mov	r5, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f7f4 f82d 	bl	8000588 <__aeabi_f2d>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4620      	mov	r0, r4
 800c534:	4629      	mov	r1, r5
 800c536:	f7f3 fec7 	bl	80002c8 <__aeabi_dsub>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4610      	mov	r0, r2
 800c540:	4619      	mov	r1, r3
 800c542:	f7f4 fb71 	bl	8000c28 <__aeabi_d2f>
 800c546:	4602      	mov	r2, r0
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]);
 800c54c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c550:	ee07 3a90 	vmov	s15, r3
 800c554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c558:	ee17 0a90 	vmov	r0, s15
 800c55c:	f7f4 f814 	bl	8000588 <__aeabi_f2d>
 800c560:	a35d      	add	r3, pc, #372	@ (adr r3, 800c6d8 <bmi088_update+0x650>)
 800c562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c566:	f7f4 f991 	bl	800088c <__aeabi_ddiv>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4614      	mov	r4, r2
 800c570:	461d      	mov	r5, r3
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	7a9b      	ldrb	r3, [r3, #10]
 800c576:	461a      	mov	r2, r3
 800c578:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c57c:	4113      	asrs	r3, r2
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c586:	ee17 0a90 	vmov	r0, s15
 800c58a:	f7f3 fffd 	bl	8000588 <__aeabi_f2d>
 800c58e:	4602      	mov	r2, r0
 800c590:	460b      	mov	r3, r1
 800c592:	4620      	mov	r0, r4
 800c594:	4629      	mov	r1, r5
 800c596:	f7f4 f84f 	bl	8000638 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4614      	mov	r4, r2
 800c5a0:	461d      	mov	r5, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7f3 ffed 	bl	8000588 <__aeabi_f2d>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	f7f3 fe87 	bl	80002c8 <__aeabi_dsub>
 800c5ba:	4602      	mov	r2, r0
 800c5bc:	460b      	mov	r3, r1
 800c5be:	4610      	mov	r0, r2
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f7f4 fb31 	bl	8000c28 <__aeabi_d2f>
 800c5c6:	4602      	mov	r2, r0
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]);
 800c5cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5d0:	ee07 3a90 	vmov	s15, r3
 800c5d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5d8:	ee17 0a90 	vmov	r0, s15
 800c5dc:	f7f3 ffd4 	bl	8000588 <__aeabi_f2d>
 800c5e0:	a33d      	add	r3, pc, #244	@ (adr r3, 800c6d8 <bmi088_update+0x650>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f4 f951 	bl	800088c <__aeabi_ddiv>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	4614      	mov	r4, r2
 800c5f0:	461d      	mov	r5, r3
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	7a9b      	ldrb	r3, [r3, #10]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c5fc:	4113      	asrs	r3, r2
 800c5fe:	ee07 3a90 	vmov	s15, r3
 800c602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c606:	ee17 0a90 	vmov	r0, s15
 800c60a:	f7f3 ffbd 	bl	8000588 <__aeabi_f2d>
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	f7f4 f80f 	bl	8000638 <__aeabi_dmul>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4614      	mov	r4, r2
 800c620:	461d      	mov	r5, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7f3 ffad 	bl	8000588 <__aeabi_f2d>
 800c62e:	4602      	mov	r2, r0
 800c630:	460b      	mov	r3, r1
 800c632:	4620      	mov	r0, r4
 800c634:	4629      	mov	r1, r5
 800c636:	f7f3 fe47 	bl	80002c8 <__aeabi_dsub>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	4610      	mov	r0, r2
 800c640:	4619      	mov	r1, r3
 800c642:	f7f4 faf1 	bl	8000c28 <__aeabi_d2f>
 800c646:	4602      	mov	r2, r0
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	621a      	str	r2, [r3, #32]

				BMI->datas.gyro_x_angle += (BMI->datas.gyro_x) * BMI->datas.delta_time;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	edd3 6a06 	vldr	s13, [r3, #24]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c65e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c662:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.gyro_y_angle += (BMI->datas.gyro_y) * BMI->datas.delta_time;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	edd3 6a07 	vldr	s13, [r3, #28]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c67e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c682:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.gyro_z_angle += (BMI->datas.gyro_z) * BMI->datas.delta_time;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	edd3 6a08 	vldr	s13, [r3, #32]
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c69e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c6a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				if(BMI->IMU_callback != NULL)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d003      	beq.n	800c6bc <bmi088_update+0x634>
				{
					BMI->IMU_callback(BMI);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	4798      	blx	r3

				/*
				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
				quaternionToEuler();
				*/
				is_gyro_renewed = 1;
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <bmi088_update+0x660>)
 800c6be:	2201      	movs	r2, #1
 800c6c0:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 800c6c8:	4b06      	ldr	r3, [pc, #24]	@ (800c6e4 <bmi088_update+0x65c>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e000      	b.n	800c6d2 <bmi088_update+0x64a>
					return;
 800c6d0:	bf00      	nop
		}
}
 800c6d2:	3738      	adds	r7, #56	@ 0x38
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c6d8:	00000000 	.word	0x00000000
 800c6dc:	40dfffc0 	.word	0x40dfffc0
 800c6e0:	20001b56 	.word	0x20001b56
 800c6e4:	20001b55 	.word	0x20001b55
 800c6e8:	20001b57 	.word	0x20001b57

0800c6ec <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	705a      	strb	r2, [r3, #1]
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	701a      	strb	r2, [r3, #0]
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff fcab 	bl	800c088 <bmi088_update>
		if(is_gyro_renewed == 1)
 800c732:	4b2f      	ldr	r3, [pc, #188]	@ (800c7f0 <get_offset+0xd0>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d1f8      	bne.n	800c72c <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c740:	da2d      	bge.n	800c79e <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	ed93 7a00 	vldr	s14, [r3]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	695b      	ldr	r3, [r3, #20]
 800c754:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c758:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	ed93 7a01 	vldr	s14, [r3, #4]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	edd3 7a07 	vldr	s15, [r3, #28]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c772:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	ed93 7a02 	vldr	s14, [r3, #8]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	edd3 7a08 	vldr	s15, [r3, #32]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	695b      	ldr	r3, [r3, #20]
 800c788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c78c:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3301      	adds	r3, #1
 800c794:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 800c796:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <get_offset+0xd0>)
 800c798:	2200      	movs	r2, #0
 800c79a:	701a      	strb	r2, [r3, #0]
 800c79c:	e7c6      	b.n	800c72c <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	ed93 7a00 	vldr	s14, [r3]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	695b      	ldr	r3, [r3, #20]
 800c7aa:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800c7f4 <get_offset+0xd4>
 800c7ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7b2:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	ed93 7a01 	vldr	s14, [r3, #4]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800c7f4 <get_offset+0xd4>
 800c7c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7ca:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	ed93 7a02 	vldr	s14, [r3, #8]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	695b      	ldr	r3, [r3, #20]
 800c7da:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c7f4 <get_offset+0xd4>
 800c7de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7e2:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 800c7e6:	bf00      	nop
		}

	}
}
 800c7e8:	bf00      	nop
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20001b57 	.word	0x20001b57
 800c7f4:	447a0000 	.word	0x447a0000

0800c7f8 <calloc>:
 800c7f8:	4b02      	ldr	r3, [pc, #8]	@ (800c804 <calloc+0xc>)
 800c7fa:	460a      	mov	r2, r1
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	6818      	ldr	r0, [r3, #0]
 800c800:	f000 b802 	b.w	800c808 <_calloc_r>
 800c804:	20000030 	.word	0x20000030

0800c808 <_calloc_r>:
 800c808:	b570      	push	{r4, r5, r6, lr}
 800c80a:	fba1 5402 	umull	r5, r4, r1, r2
 800c80e:	b934      	cbnz	r4, 800c81e <_calloc_r+0x16>
 800c810:	4629      	mov	r1, r5
 800c812:	f000 f837 	bl	800c884 <_malloc_r>
 800c816:	4606      	mov	r6, r0
 800c818:	b928      	cbnz	r0, 800c826 <_calloc_r+0x1e>
 800c81a:	4630      	mov	r0, r6
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	220c      	movs	r2, #12
 800c820:	6002      	str	r2, [r0, #0]
 800c822:	2600      	movs	r6, #0
 800c824:	e7f9      	b.n	800c81a <_calloc_r+0x12>
 800c826:	462a      	mov	r2, r5
 800c828:	4621      	mov	r1, r4
 800c82a:	f001 f880 	bl	800d92e <memset>
 800c82e:	e7f4      	b.n	800c81a <_calloc_r+0x12>

0800c830 <malloc>:
 800c830:	4b02      	ldr	r3, [pc, #8]	@ (800c83c <malloc+0xc>)
 800c832:	4601      	mov	r1, r0
 800c834:	6818      	ldr	r0, [r3, #0]
 800c836:	f000 b825 	b.w	800c884 <_malloc_r>
 800c83a:	bf00      	nop
 800c83c:	20000030 	.word	0x20000030

0800c840 <sbrk_aligned>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	4e0f      	ldr	r6, [pc, #60]	@ (800c880 <sbrk_aligned+0x40>)
 800c844:	460c      	mov	r4, r1
 800c846:	6831      	ldr	r1, [r6, #0]
 800c848:	4605      	mov	r5, r0
 800c84a:	b911      	cbnz	r1, 800c852 <sbrk_aligned+0x12>
 800c84c:	f001 f8c6 	bl	800d9dc <_sbrk_r>
 800c850:	6030      	str	r0, [r6, #0]
 800c852:	4621      	mov	r1, r4
 800c854:	4628      	mov	r0, r5
 800c856:	f001 f8c1 	bl	800d9dc <_sbrk_r>
 800c85a:	1c43      	adds	r3, r0, #1
 800c85c:	d103      	bne.n	800c866 <sbrk_aligned+0x26>
 800c85e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c862:	4620      	mov	r0, r4
 800c864:	bd70      	pop	{r4, r5, r6, pc}
 800c866:	1cc4      	adds	r4, r0, #3
 800c868:	f024 0403 	bic.w	r4, r4, #3
 800c86c:	42a0      	cmp	r0, r4
 800c86e:	d0f8      	beq.n	800c862 <sbrk_aligned+0x22>
 800c870:	1a21      	subs	r1, r4, r0
 800c872:	4628      	mov	r0, r5
 800c874:	f001 f8b2 	bl	800d9dc <_sbrk_r>
 800c878:	3001      	adds	r0, #1
 800c87a:	d1f2      	bne.n	800c862 <sbrk_aligned+0x22>
 800c87c:	e7ef      	b.n	800c85e <sbrk_aligned+0x1e>
 800c87e:	bf00      	nop
 800c880:	20001b5c 	.word	0x20001b5c

0800c884 <_malloc_r>:
 800c884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c888:	1ccd      	adds	r5, r1, #3
 800c88a:	f025 0503 	bic.w	r5, r5, #3
 800c88e:	3508      	adds	r5, #8
 800c890:	2d0c      	cmp	r5, #12
 800c892:	bf38      	it	cc
 800c894:	250c      	movcc	r5, #12
 800c896:	2d00      	cmp	r5, #0
 800c898:	4606      	mov	r6, r0
 800c89a:	db01      	blt.n	800c8a0 <_malloc_r+0x1c>
 800c89c:	42a9      	cmp	r1, r5
 800c89e:	d904      	bls.n	800c8aa <_malloc_r+0x26>
 800c8a0:	230c      	movs	r3, #12
 800c8a2:	6033      	str	r3, [r6, #0]
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c980 <_malloc_r+0xfc>
 800c8ae:	f000 f869 	bl	800c984 <__malloc_lock>
 800c8b2:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b6:	461c      	mov	r4, r3
 800c8b8:	bb44      	cbnz	r4, 800c90c <_malloc_r+0x88>
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	4630      	mov	r0, r6
 800c8be:	f7ff ffbf 	bl	800c840 <sbrk_aligned>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	d158      	bne.n	800c97a <_malloc_r+0xf6>
 800c8c8:	f8d8 4000 	ldr.w	r4, [r8]
 800c8cc:	4627      	mov	r7, r4
 800c8ce:	2f00      	cmp	r7, #0
 800c8d0:	d143      	bne.n	800c95a <_malloc_r+0xd6>
 800c8d2:	2c00      	cmp	r4, #0
 800c8d4:	d04b      	beq.n	800c96e <_malloc_r+0xea>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	4639      	mov	r1, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	eb04 0903 	add.w	r9, r4, r3
 800c8e0:	f001 f87c 	bl	800d9dc <_sbrk_r>
 800c8e4:	4581      	cmp	r9, r0
 800c8e6:	d142      	bne.n	800c96e <_malloc_r+0xea>
 800c8e8:	6821      	ldr	r1, [r4, #0]
 800c8ea:	1a6d      	subs	r5, r5, r1
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f7ff ffa6 	bl	800c840 <sbrk_aligned>
 800c8f4:	3001      	adds	r0, #1
 800c8f6:	d03a      	beq.n	800c96e <_malloc_r+0xea>
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	442b      	add	r3, r5
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	f8d8 3000 	ldr.w	r3, [r8]
 800c902:	685a      	ldr	r2, [r3, #4]
 800c904:	bb62      	cbnz	r2, 800c960 <_malloc_r+0xdc>
 800c906:	f8c8 7000 	str.w	r7, [r8]
 800c90a:	e00f      	b.n	800c92c <_malloc_r+0xa8>
 800c90c:	6822      	ldr	r2, [r4, #0]
 800c90e:	1b52      	subs	r2, r2, r5
 800c910:	d420      	bmi.n	800c954 <_malloc_r+0xd0>
 800c912:	2a0b      	cmp	r2, #11
 800c914:	d917      	bls.n	800c946 <_malloc_r+0xc2>
 800c916:	1961      	adds	r1, r4, r5
 800c918:	42a3      	cmp	r3, r4
 800c91a:	6025      	str	r5, [r4, #0]
 800c91c:	bf18      	it	ne
 800c91e:	6059      	strne	r1, [r3, #4]
 800c920:	6863      	ldr	r3, [r4, #4]
 800c922:	bf08      	it	eq
 800c924:	f8c8 1000 	streq.w	r1, [r8]
 800c928:	5162      	str	r2, [r4, r5]
 800c92a:	604b      	str	r3, [r1, #4]
 800c92c:	4630      	mov	r0, r6
 800c92e:	f000 f82f 	bl	800c990 <__malloc_unlock>
 800c932:	f104 000b 	add.w	r0, r4, #11
 800c936:	1d23      	adds	r3, r4, #4
 800c938:	f020 0007 	bic.w	r0, r0, #7
 800c93c:	1ac2      	subs	r2, r0, r3
 800c93e:	bf1c      	itt	ne
 800c940:	1a1b      	subne	r3, r3, r0
 800c942:	50a3      	strne	r3, [r4, r2]
 800c944:	e7af      	b.n	800c8a6 <_malloc_r+0x22>
 800c946:	6862      	ldr	r2, [r4, #4]
 800c948:	42a3      	cmp	r3, r4
 800c94a:	bf0c      	ite	eq
 800c94c:	f8c8 2000 	streq.w	r2, [r8]
 800c950:	605a      	strne	r2, [r3, #4]
 800c952:	e7eb      	b.n	800c92c <_malloc_r+0xa8>
 800c954:	4623      	mov	r3, r4
 800c956:	6864      	ldr	r4, [r4, #4]
 800c958:	e7ae      	b.n	800c8b8 <_malloc_r+0x34>
 800c95a:	463c      	mov	r4, r7
 800c95c:	687f      	ldr	r7, [r7, #4]
 800c95e:	e7b6      	b.n	800c8ce <_malloc_r+0x4a>
 800c960:	461a      	mov	r2, r3
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	42a3      	cmp	r3, r4
 800c966:	d1fb      	bne.n	800c960 <_malloc_r+0xdc>
 800c968:	2300      	movs	r3, #0
 800c96a:	6053      	str	r3, [r2, #4]
 800c96c:	e7de      	b.n	800c92c <_malloc_r+0xa8>
 800c96e:	230c      	movs	r3, #12
 800c970:	6033      	str	r3, [r6, #0]
 800c972:	4630      	mov	r0, r6
 800c974:	f000 f80c 	bl	800c990 <__malloc_unlock>
 800c978:	e794      	b.n	800c8a4 <_malloc_r+0x20>
 800c97a:	6005      	str	r5, [r0, #0]
 800c97c:	e7d6      	b.n	800c92c <_malloc_r+0xa8>
 800c97e:	bf00      	nop
 800c980:	20001b60 	.word	0x20001b60

0800c984 <__malloc_lock>:
 800c984:	4801      	ldr	r0, [pc, #4]	@ (800c98c <__malloc_lock+0x8>)
 800c986:	f001 b876 	b.w	800da76 <__retarget_lock_acquire_recursive>
 800c98a:	bf00      	nop
 800c98c:	20001ca4 	.word	0x20001ca4

0800c990 <__malloc_unlock>:
 800c990:	4801      	ldr	r0, [pc, #4]	@ (800c998 <__malloc_unlock+0x8>)
 800c992:	f001 b871 	b.w	800da78 <__retarget_lock_release_recursive>
 800c996:	bf00      	nop
 800c998:	20001ca4 	.word	0x20001ca4

0800c99c <__cvt>:
 800c99c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9a0:	ec57 6b10 	vmov	r6, r7, d0
 800c9a4:	2f00      	cmp	r7, #0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	463b      	mov	r3, r7
 800c9ac:	bfbb      	ittet	lt
 800c9ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c9b2:	461f      	movlt	r7, r3
 800c9b4:	2300      	movge	r3, #0
 800c9b6:	232d      	movlt	r3, #45	@ 0x2d
 800c9b8:	700b      	strb	r3, [r1, #0]
 800c9ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c9bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c9c0:	4691      	mov	r9, r2
 800c9c2:	f023 0820 	bic.w	r8, r3, #32
 800c9c6:	bfbc      	itt	lt
 800c9c8:	4632      	movlt	r2, r6
 800c9ca:	4616      	movlt	r6, r2
 800c9cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c9d0:	d005      	beq.n	800c9de <__cvt+0x42>
 800c9d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c9d6:	d100      	bne.n	800c9da <__cvt+0x3e>
 800c9d8:	3401      	adds	r4, #1
 800c9da:	2102      	movs	r1, #2
 800c9dc:	e000      	b.n	800c9e0 <__cvt+0x44>
 800c9de:	2103      	movs	r1, #3
 800c9e0:	ab03      	add	r3, sp, #12
 800c9e2:	9301      	str	r3, [sp, #4]
 800c9e4:	ab02      	add	r3, sp, #8
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	ec47 6b10 	vmov	d0, r6, r7
 800c9ec:	4653      	mov	r3, sl
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	f001 f8e2 	bl	800dbb8 <_dtoa_r>
 800c9f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	d119      	bne.n	800ca30 <__cvt+0x94>
 800c9fc:	f019 0f01 	tst.w	r9, #1
 800ca00:	d00e      	beq.n	800ca20 <__cvt+0x84>
 800ca02:	eb00 0904 	add.w	r9, r0, r4
 800ca06:	2200      	movs	r2, #0
 800ca08:	2300      	movs	r3, #0
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	f7f4 f87b 	bl	8000b08 <__aeabi_dcmpeq>
 800ca12:	b108      	cbz	r0, 800ca18 <__cvt+0x7c>
 800ca14:	f8cd 900c 	str.w	r9, [sp, #12]
 800ca18:	2230      	movs	r2, #48	@ 0x30
 800ca1a:	9b03      	ldr	r3, [sp, #12]
 800ca1c:	454b      	cmp	r3, r9
 800ca1e:	d31e      	bcc.n	800ca5e <__cvt+0xc2>
 800ca20:	9b03      	ldr	r3, [sp, #12]
 800ca22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca24:	1b5b      	subs	r3, r3, r5
 800ca26:	4628      	mov	r0, r5
 800ca28:	6013      	str	r3, [r2, #0]
 800ca2a:	b004      	add	sp, #16
 800ca2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ca34:	eb00 0904 	add.w	r9, r0, r4
 800ca38:	d1e5      	bne.n	800ca06 <__cvt+0x6a>
 800ca3a:	7803      	ldrb	r3, [r0, #0]
 800ca3c:	2b30      	cmp	r3, #48	@ 0x30
 800ca3e:	d10a      	bne.n	800ca56 <__cvt+0xba>
 800ca40:	2200      	movs	r2, #0
 800ca42:	2300      	movs	r3, #0
 800ca44:	4630      	mov	r0, r6
 800ca46:	4639      	mov	r1, r7
 800ca48:	f7f4 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 800ca4c:	b918      	cbnz	r0, 800ca56 <__cvt+0xba>
 800ca4e:	f1c4 0401 	rsb	r4, r4, #1
 800ca52:	f8ca 4000 	str.w	r4, [sl]
 800ca56:	f8da 3000 	ldr.w	r3, [sl]
 800ca5a:	4499      	add	r9, r3
 800ca5c:	e7d3      	b.n	800ca06 <__cvt+0x6a>
 800ca5e:	1c59      	adds	r1, r3, #1
 800ca60:	9103      	str	r1, [sp, #12]
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	e7d9      	b.n	800ca1a <__cvt+0x7e>

0800ca66 <__exponent>:
 800ca66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca68:	2900      	cmp	r1, #0
 800ca6a:	bfba      	itte	lt
 800ca6c:	4249      	neglt	r1, r1
 800ca6e:	232d      	movlt	r3, #45	@ 0x2d
 800ca70:	232b      	movge	r3, #43	@ 0x2b
 800ca72:	2909      	cmp	r1, #9
 800ca74:	7002      	strb	r2, [r0, #0]
 800ca76:	7043      	strb	r3, [r0, #1]
 800ca78:	dd29      	ble.n	800cace <__exponent+0x68>
 800ca7a:	f10d 0307 	add.w	r3, sp, #7
 800ca7e:	461d      	mov	r5, r3
 800ca80:	270a      	movs	r7, #10
 800ca82:	461a      	mov	r2, r3
 800ca84:	fbb1 f6f7 	udiv	r6, r1, r7
 800ca88:	fb07 1416 	mls	r4, r7, r6, r1
 800ca8c:	3430      	adds	r4, #48	@ 0x30
 800ca8e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ca92:	460c      	mov	r4, r1
 800ca94:	2c63      	cmp	r4, #99	@ 0x63
 800ca96:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	dcf1      	bgt.n	800ca82 <__exponent+0x1c>
 800ca9e:	3130      	adds	r1, #48	@ 0x30
 800caa0:	1e94      	subs	r4, r2, #2
 800caa2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800caa6:	1c41      	adds	r1, r0, #1
 800caa8:	4623      	mov	r3, r4
 800caaa:	42ab      	cmp	r3, r5
 800caac:	d30a      	bcc.n	800cac4 <__exponent+0x5e>
 800caae:	f10d 0309 	add.w	r3, sp, #9
 800cab2:	1a9b      	subs	r3, r3, r2
 800cab4:	42ac      	cmp	r4, r5
 800cab6:	bf88      	it	hi
 800cab8:	2300      	movhi	r3, #0
 800caba:	3302      	adds	r3, #2
 800cabc:	4403      	add	r3, r0
 800cabe:	1a18      	subs	r0, r3, r0
 800cac0:	b003      	add	sp, #12
 800cac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cac4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cac8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cacc:	e7ed      	b.n	800caaa <__exponent+0x44>
 800cace:	2330      	movs	r3, #48	@ 0x30
 800cad0:	3130      	adds	r1, #48	@ 0x30
 800cad2:	7083      	strb	r3, [r0, #2]
 800cad4:	70c1      	strb	r1, [r0, #3]
 800cad6:	1d03      	adds	r3, r0, #4
 800cad8:	e7f1      	b.n	800cabe <__exponent+0x58>
	...

0800cadc <_printf_float>:
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	b08d      	sub	sp, #52	@ 0x34
 800cae2:	460c      	mov	r4, r1
 800cae4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cae8:	4616      	mov	r6, r2
 800caea:	461f      	mov	r7, r3
 800caec:	4605      	mov	r5, r0
 800caee:	f000 ff3d 	bl	800d96c <_localeconv_r>
 800caf2:	6803      	ldr	r3, [r0, #0]
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f3 fbda 	bl	80002b0 <strlen>
 800cafc:	2300      	movs	r3, #0
 800cafe:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb00:	f8d8 3000 	ldr.w	r3, [r8]
 800cb04:	9005      	str	r0, [sp, #20]
 800cb06:	3307      	adds	r3, #7
 800cb08:	f023 0307 	bic.w	r3, r3, #7
 800cb0c:	f103 0208 	add.w	r2, r3, #8
 800cb10:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cb14:	f8d4 b000 	ldr.w	fp, [r4]
 800cb18:	f8c8 2000 	str.w	r2, [r8]
 800cb1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cb24:	9307      	str	r3, [sp, #28]
 800cb26:	f8cd 8018 	str.w	r8, [sp, #24]
 800cb2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cb2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb32:	4b9c      	ldr	r3, [pc, #624]	@ (800cda4 <_printf_float+0x2c8>)
 800cb34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb38:	f7f4 f818 	bl	8000b6c <__aeabi_dcmpun>
 800cb3c:	bb70      	cbnz	r0, 800cb9c <_printf_float+0xc0>
 800cb3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cb42:	4b98      	ldr	r3, [pc, #608]	@ (800cda4 <_printf_float+0x2c8>)
 800cb44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb48:	f7f3 fff2 	bl	8000b30 <__aeabi_dcmple>
 800cb4c:	bb30      	cbnz	r0, 800cb9c <_printf_float+0xc0>
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2300      	movs	r3, #0
 800cb52:	4640      	mov	r0, r8
 800cb54:	4649      	mov	r1, r9
 800cb56:	f7f3 ffe1 	bl	8000b1c <__aeabi_dcmplt>
 800cb5a:	b110      	cbz	r0, 800cb62 <_printf_float+0x86>
 800cb5c:	232d      	movs	r3, #45	@ 0x2d
 800cb5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb62:	4a91      	ldr	r2, [pc, #580]	@ (800cda8 <_printf_float+0x2cc>)
 800cb64:	4b91      	ldr	r3, [pc, #580]	@ (800cdac <_printf_float+0x2d0>)
 800cb66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cb6a:	bf8c      	ite	hi
 800cb6c:	4690      	movhi	r8, r2
 800cb6e:	4698      	movls	r8, r3
 800cb70:	2303      	movs	r3, #3
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	f02b 0304 	bic.w	r3, fp, #4
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	f04f 0900 	mov.w	r9, #0
 800cb7e:	9700      	str	r7, [sp, #0]
 800cb80:	4633      	mov	r3, r6
 800cb82:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cb84:	4621      	mov	r1, r4
 800cb86:	4628      	mov	r0, r5
 800cb88:	f000 f9d2 	bl	800cf30 <_printf_common>
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	f040 808d 	bne.w	800ccac <_printf_float+0x1d0>
 800cb92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb96:	b00d      	add	sp, #52	@ 0x34
 800cb98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb9c:	4642      	mov	r2, r8
 800cb9e:	464b      	mov	r3, r9
 800cba0:	4640      	mov	r0, r8
 800cba2:	4649      	mov	r1, r9
 800cba4:	f7f3 ffe2 	bl	8000b6c <__aeabi_dcmpun>
 800cba8:	b140      	cbz	r0, 800cbbc <_printf_float+0xe0>
 800cbaa:	464b      	mov	r3, r9
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	bfbc      	itt	lt
 800cbb0:	232d      	movlt	r3, #45	@ 0x2d
 800cbb2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cbb6:	4a7e      	ldr	r2, [pc, #504]	@ (800cdb0 <_printf_float+0x2d4>)
 800cbb8:	4b7e      	ldr	r3, [pc, #504]	@ (800cdb4 <_printf_float+0x2d8>)
 800cbba:	e7d4      	b.n	800cb66 <_printf_float+0x8a>
 800cbbc:	6863      	ldr	r3, [r4, #4]
 800cbbe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cbc2:	9206      	str	r2, [sp, #24]
 800cbc4:	1c5a      	adds	r2, r3, #1
 800cbc6:	d13b      	bne.n	800cc40 <_printf_float+0x164>
 800cbc8:	2306      	movs	r3, #6
 800cbca:	6063      	str	r3, [r4, #4]
 800cbcc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	9303      	str	r3, [sp, #12]
 800cbd6:	ab0a      	add	r3, sp, #40	@ 0x28
 800cbd8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cbdc:	ab09      	add	r3, sp, #36	@ 0x24
 800cbde:	9300      	str	r3, [sp, #0]
 800cbe0:	6861      	ldr	r1, [r4, #4]
 800cbe2:	ec49 8b10 	vmov	d0, r8, r9
 800cbe6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cbea:	4628      	mov	r0, r5
 800cbec:	f7ff fed6 	bl	800c99c <__cvt>
 800cbf0:	9b06      	ldr	r3, [sp, #24]
 800cbf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbf4:	2b47      	cmp	r3, #71	@ 0x47
 800cbf6:	4680      	mov	r8, r0
 800cbf8:	d129      	bne.n	800cc4e <_printf_float+0x172>
 800cbfa:	1cc8      	adds	r0, r1, #3
 800cbfc:	db02      	blt.n	800cc04 <_printf_float+0x128>
 800cbfe:	6863      	ldr	r3, [r4, #4]
 800cc00:	4299      	cmp	r1, r3
 800cc02:	dd41      	ble.n	800cc88 <_printf_float+0x1ac>
 800cc04:	f1aa 0a02 	sub.w	sl, sl, #2
 800cc08:	fa5f fa8a 	uxtb.w	sl, sl
 800cc0c:	3901      	subs	r1, #1
 800cc0e:	4652      	mov	r2, sl
 800cc10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cc14:	9109      	str	r1, [sp, #36]	@ 0x24
 800cc16:	f7ff ff26 	bl	800ca66 <__exponent>
 800cc1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cc1c:	1813      	adds	r3, r2, r0
 800cc1e:	2a01      	cmp	r2, #1
 800cc20:	4681      	mov	r9, r0
 800cc22:	6123      	str	r3, [r4, #16]
 800cc24:	dc02      	bgt.n	800cc2c <_printf_float+0x150>
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	07d2      	lsls	r2, r2, #31
 800cc2a:	d501      	bpl.n	800cc30 <_printf_float+0x154>
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0a2      	beq.n	800cb7e <_printf_float+0xa2>
 800cc38:	232d      	movs	r3, #45	@ 0x2d
 800cc3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc3e:	e79e      	b.n	800cb7e <_printf_float+0xa2>
 800cc40:	9a06      	ldr	r2, [sp, #24]
 800cc42:	2a47      	cmp	r2, #71	@ 0x47
 800cc44:	d1c2      	bne.n	800cbcc <_printf_float+0xf0>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1c0      	bne.n	800cbcc <_printf_float+0xf0>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	e7bd      	b.n	800cbca <_printf_float+0xee>
 800cc4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cc52:	d9db      	bls.n	800cc0c <_printf_float+0x130>
 800cc54:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cc58:	d118      	bne.n	800cc8c <_printf_float+0x1b0>
 800cc5a:	2900      	cmp	r1, #0
 800cc5c:	6863      	ldr	r3, [r4, #4]
 800cc5e:	dd0b      	ble.n	800cc78 <_printf_float+0x19c>
 800cc60:	6121      	str	r1, [r4, #16]
 800cc62:	b913      	cbnz	r3, 800cc6a <_printf_float+0x18e>
 800cc64:	6822      	ldr	r2, [r4, #0]
 800cc66:	07d0      	lsls	r0, r2, #31
 800cc68:	d502      	bpl.n	800cc70 <_printf_float+0x194>
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	440b      	add	r3, r1
 800cc6e:	6123      	str	r3, [r4, #16]
 800cc70:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cc72:	f04f 0900 	mov.w	r9, #0
 800cc76:	e7db      	b.n	800cc30 <_printf_float+0x154>
 800cc78:	b913      	cbnz	r3, 800cc80 <_printf_float+0x1a4>
 800cc7a:	6822      	ldr	r2, [r4, #0]
 800cc7c:	07d2      	lsls	r2, r2, #31
 800cc7e:	d501      	bpl.n	800cc84 <_printf_float+0x1a8>
 800cc80:	3302      	adds	r3, #2
 800cc82:	e7f4      	b.n	800cc6e <_printf_float+0x192>
 800cc84:	2301      	movs	r3, #1
 800cc86:	e7f2      	b.n	800cc6e <_printf_float+0x192>
 800cc88:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc8e:	4299      	cmp	r1, r3
 800cc90:	db05      	blt.n	800cc9e <_printf_float+0x1c2>
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	6121      	str	r1, [r4, #16]
 800cc96:	07d8      	lsls	r0, r3, #31
 800cc98:	d5ea      	bpl.n	800cc70 <_printf_float+0x194>
 800cc9a:	1c4b      	adds	r3, r1, #1
 800cc9c:	e7e7      	b.n	800cc6e <_printf_float+0x192>
 800cc9e:	2900      	cmp	r1, #0
 800cca0:	bfd4      	ite	le
 800cca2:	f1c1 0202 	rsble	r2, r1, #2
 800cca6:	2201      	movgt	r2, #1
 800cca8:	4413      	add	r3, r2
 800ccaa:	e7e0      	b.n	800cc6e <_printf_float+0x192>
 800ccac:	6823      	ldr	r3, [r4, #0]
 800ccae:	055a      	lsls	r2, r3, #21
 800ccb0:	d407      	bmi.n	800ccc2 <_printf_float+0x1e6>
 800ccb2:	6923      	ldr	r3, [r4, #16]
 800ccb4:	4642      	mov	r2, r8
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b8      	blx	r7
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	d12b      	bne.n	800cd18 <_printf_float+0x23c>
 800ccc0:	e767      	b.n	800cb92 <_printf_float+0xb6>
 800ccc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ccc6:	f240 80dd 	bls.w	800ce84 <_printf_float+0x3a8>
 800ccca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ccce:	2200      	movs	r2, #0
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f7f3 ff19 	bl	8000b08 <__aeabi_dcmpeq>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d033      	beq.n	800cd42 <_printf_float+0x266>
 800ccda:	4a37      	ldr	r2, [pc, #220]	@ (800cdb8 <_printf_float+0x2dc>)
 800ccdc:	2301      	movs	r3, #1
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b8      	blx	r7
 800cce4:	3001      	adds	r0, #1
 800cce6:	f43f af54 	beq.w	800cb92 <_printf_float+0xb6>
 800ccea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ccee:	4543      	cmp	r3, r8
 800ccf0:	db02      	blt.n	800ccf8 <_printf_float+0x21c>
 800ccf2:	6823      	ldr	r3, [r4, #0]
 800ccf4:	07d8      	lsls	r0, r3, #31
 800ccf6:	d50f      	bpl.n	800cd18 <_printf_float+0x23c>
 800ccf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4628      	mov	r0, r5
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f43f af45 	beq.w	800cb92 <_printf_float+0xb6>
 800cd08:	f04f 0900 	mov.w	r9, #0
 800cd0c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cd10:	f104 0a1a 	add.w	sl, r4, #26
 800cd14:	45c8      	cmp	r8, r9
 800cd16:	dc09      	bgt.n	800cd2c <_printf_float+0x250>
 800cd18:	6823      	ldr	r3, [r4, #0]
 800cd1a:	079b      	lsls	r3, r3, #30
 800cd1c:	f100 8103 	bmi.w	800cf26 <_printf_float+0x44a>
 800cd20:	68e0      	ldr	r0, [r4, #12]
 800cd22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd24:	4298      	cmp	r0, r3
 800cd26:	bfb8      	it	lt
 800cd28:	4618      	movlt	r0, r3
 800cd2a:	e734      	b.n	800cb96 <_printf_float+0xba>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	4652      	mov	r2, sl
 800cd30:	4631      	mov	r1, r6
 800cd32:	4628      	mov	r0, r5
 800cd34:	47b8      	blx	r7
 800cd36:	3001      	adds	r0, #1
 800cd38:	f43f af2b 	beq.w	800cb92 <_printf_float+0xb6>
 800cd3c:	f109 0901 	add.w	r9, r9, #1
 800cd40:	e7e8      	b.n	800cd14 <_printf_float+0x238>
 800cd42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	dc39      	bgt.n	800cdbc <_printf_float+0x2e0>
 800cd48:	4a1b      	ldr	r2, [pc, #108]	@ (800cdb8 <_printf_float+0x2dc>)
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4631      	mov	r1, r6
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b8      	blx	r7
 800cd52:	3001      	adds	r0, #1
 800cd54:	f43f af1d 	beq.w	800cb92 <_printf_float+0xb6>
 800cd58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cd5c:	ea59 0303 	orrs.w	r3, r9, r3
 800cd60:	d102      	bne.n	800cd68 <_printf_float+0x28c>
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	07d9      	lsls	r1, r3, #31
 800cd66:	d5d7      	bpl.n	800cd18 <_printf_float+0x23c>
 800cd68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd6c:	4631      	mov	r1, r6
 800cd6e:	4628      	mov	r0, r5
 800cd70:	47b8      	blx	r7
 800cd72:	3001      	adds	r0, #1
 800cd74:	f43f af0d 	beq.w	800cb92 <_printf_float+0xb6>
 800cd78:	f04f 0a00 	mov.w	sl, #0
 800cd7c:	f104 0b1a 	add.w	fp, r4, #26
 800cd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd82:	425b      	negs	r3, r3
 800cd84:	4553      	cmp	r3, sl
 800cd86:	dc01      	bgt.n	800cd8c <_printf_float+0x2b0>
 800cd88:	464b      	mov	r3, r9
 800cd8a:	e793      	b.n	800ccb4 <_printf_float+0x1d8>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	465a      	mov	r2, fp
 800cd90:	4631      	mov	r1, r6
 800cd92:	4628      	mov	r0, r5
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f aefb 	beq.w	800cb92 <_printf_float+0xb6>
 800cd9c:	f10a 0a01 	add.w	sl, sl, #1
 800cda0:	e7ee      	b.n	800cd80 <_printf_float+0x2a4>
 800cda2:	bf00      	nop
 800cda4:	7fefffff 	.word	0x7fefffff
 800cda8:	080136e4 	.word	0x080136e4
 800cdac:	080136e0 	.word	0x080136e0
 800cdb0:	080136ec 	.word	0x080136ec
 800cdb4:	080136e8 	.word	0x080136e8
 800cdb8:	08013826 	.word	0x08013826
 800cdbc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cdbe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cdc2:	4553      	cmp	r3, sl
 800cdc4:	bfa8      	it	ge
 800cdc6:	4653      	movge	r3, sl
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	4699      	mov	r9, r3
 800cdcc:	dc36      	bgt.n	800ce3c <_printf_float+0x360>
 800cdce:	f04f 0b00 	mov.w	fp, #0
 800cdd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cdd6:	f104 021a 	add.w	r2, r4, #26
 800cdda:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cddc:	9306      	str	r3, [sp, #24]
 800cdde:	eba3 0309 	sub.w	r3, r3, r9
 800cde2:	455b      	cmp	r3, fp
 800cde4:	dc31      	bgt.n	800ce4a <_printf_float+0x36e>
 800cde6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cde8:	459a      	cmp	sl, r3
 800cdea:	dc3a      	bgt.n	800ce62 <_printf_float+0x386>
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	07da      	lsls	r2, r3, #31
 800cdf0:	d437      	bmi.n	800ce62 <_printf_float+0x386>
 800cdf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdf4:	ebaa 0903 	sub.w	r9, sl, r3
 800cdf8:	9b06      	ldr	r3, [sp, #24]
 800cdfa:	ebaa 0303 	sub.w	r3, sl, r3
 800cdfe:	4599      	cmp	r9, r3
 800ce00:	bfa8      	it	ge
 800ce02:	4699      	movge	r9, r3
 800ce04:	f1b9 0f00 	cmp.w	r9, #0
 800ce08:	dc33      	bgt.n	800ce72 <_printf_float+0x396>
 800ce0a:	f04f 0800 	mov.w	r8, #0
 800ce0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce12:	f104 0b1a 	add.w	fp, r4, #26
 800ce16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce18:	ebaa 0303 	sub.w	r3, sl, r3
 800ce1c:	eba3 0309 	sub.w	r3, r3, r9
 800ce20:	4543      	cmp	r3, r8
 800ce22:	f77f af79 	ble.w	800cd18 <_printf_float+0x23c>
 800ce26:	2301      	movs	r3, #1
 800ce28:	465a      	mov	r2, fp
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	47b8      	blx	r7
 800ce30:	3001      	adds	r0, #1
 800ce32:	f43f aeae 	beq.w	800cb92 <_printf_float+0xb6>
 800ce36:	f108 0801 	add.w	r8, r8, #1
 800ce3a:	e7ec      	b.n	800ce16 <_printf_float+0x33a>
 800ce3c:	4642      	mov	r2, r8
 800ce3e:	4631      	mov	r1, r6
 800ce40:	4628      	mov	r0, r5
 800ce42:	47b8      	blx	r7
 800ce44:	3001      	adds	r0, #1
 800ce46:	d1c2      	bne.n	800cdce <_printf_float+0x2f2>
 800ce48:	e6a3      	b.n	800cb92 <_printf_float+0xb6>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	4631      	mov	r1, r6
 800ce4e:	4628      	mov	r0, r5
 800ce50:	9206      	str	r2, [sp, #24]
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	f43f ae9c 	beq.w	800cb92 <_printf_float+0xb6>
 800ce5a:	9a06      	ldr	r2, [sp, #24]
 800ce5c:	f10b 0b01 	add.w	fp, fp, #1
 800ce60:	e7bb      	b.n	800cdda <_printf_float+0x2fe>
 800ce62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce66:	4631      	mov	r1, r6
 800ce68:	4628      	mov	r0, r5
 800ce6a:	47b8      	blx	r7
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d1c0      	bne.n	800cdf2 <_printf_float+0x316>
 800ce70:	e68f      	b.n	800cb92 <_printf_float+0xb6>
 800ce72:	9a06      	ldr	r2, [sp, #24]
 800ce74:	464b      	mov	r3, r9
 800ce76:	4442      	add	r2, r8
 800ce78:	4631      	mov	r1, r6
 800ce7a:	4628      	mov	r0, r5
 800ce7c:	47b8      	blx	r7
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d1c3      	bne.n	800ce0a <_printf_float+0x32e>
 800ce82:	e686      	b.n	800cb92 <_printf_float+0xb6>
 800ce84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ce88:	f1ba 0f01 	cmp.w	sl, #1
 800ce8c:	dc01      	bgt.n	800ce92 <_printf_float+0x3b6>
 800ce8e:	07db      	lsls	r3, r3, #31
 800ce90:	d536      	bpl.n	800cf00 <_printf_float+0x424>
 800ce92:	2301      	movs	r3, #1
 800ce94:	4642      	mov	r2, r8
 800ce96:	4631      	mov	r1, r6
 800ce98:	4628      	mov	r0, r5
 800ce9a:	47b8      	blx	r7
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	f43f ae78 	beq.w	800cb92 <_printf_float+0xb6>
 800cea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cea6:	4631      	mov	r1, r6
 800cea8:	4628      	mov	r0, r5
 800ceaa:	47b8      	blx	r7
 800ceac:	3001      	adds	r0, #1
 800ceae:	f43f ae70 	beq.w	800cb92 <_printf_float+0xb6>
 800ceb2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	2300      	movs	r3, #0
 800ceba:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cebe:	f7f3 fe23 	bl	8000b08 <__aeabi_dcmpeq>
 800cec2:	b9c0      	cbnz	r0, 800cef6 <_printf_float+0x41a>
 800cec4:	4653      	mov	r3, sl
 800cec6:	f108 0201 	add.w	r2, r8, #1
 800ceca:	4631      	mov	r1, r6
 800cecc:	4628      	mov	r0, r5
 800cece:	47b8      	blx	r7
 800ced0:	3001      	adds	r0, #1
 800ced2:	d10c      	bne.n	800ceee <_printf_float+0x412>
 800ced4:	e65d      	b.n	800cb92 <_printf_float+0xb6>
 800ced6:	2301      	movs	r3, #1
 800ced8:	465a      	mov	r2, fp
 800ceda:	4631      	mov	r1, r6
 800cedc:	4628      	mov	r0, r5
 800cede:	47b8      	blx	r7
 800cee0:	3001      	adds	r0, #1
 800cee2:	f43f ae56 	beq.w	800cb92 <_printf_float+0xb6>
 800cee6:	f108 0801 	add.w	r8, r8, #1
 800ceea:	45d0      	cmp	r8, sl
 800ceec:	dbf3      	blt.n	800ced6 <_printf_float+0x3fa>
 800ceee:	464b      	mov	r3, r9
 800cef0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cef4:	e6df      	b.n	800ccb6 <_printf_float+0x1da>
 800cef6:	f04f 0800 	mov.w	r8, #0
 800cefa:	f104 0b1a 	add.w	fp, r4, #26
 800cefe:	e7f4      	b.n	800ceea <_printf_float+0x40e>
 800cf00:	2301      	movs	r3, #1
 800cf02:	4642      	mov	r2, r8
 800cf04:	e7e1      	b.n	800ceca <_printf_float+0x3ee>
 800cf06:	2301      	movs	r3, #1
 800cf08:	464a      	mov	r2, r9
 800cf0a:	4631      	mov	r1, r6
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	47b8      	blx	r7
 800cf10:	3001      	adds	r0, #1
 800cf12:	f43f ae3e 	beq.w	800cb92 <_printf_float+0xb6>
 800cf16:	f108 0801 	add.w	r8, r8, #1
 800cf1a:	68e3      	ldr	r3, [r4, #12]
 800cf1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf1e:	1a5b      	subs	r3, r3, r1
 800cf20:	4543      	cmp	r3, r8
 800cf22:	dcf0      	bgt.n	800cf06 <_printf_float+0x42a>
 800cf24:	e6fc      	b.n	800cd20 <_printf_float+0x244>
 800cf26:	f04f 0800 	mov.w	r8, #0
 800cf2a:	f104 0919 	add.w	r9, r4, #25
 800cf2e:	e7f4      	b.n	800cf1a <_printf_float+0x43e>

0800cf30 <_printf_common>:
 800cf30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf34:	4616      	mov	r6, r2
 800cf36:	4698      	mov	r8, r3
 800cf38:	688a      	ldr	r2, [r1, #8]
 800cf3a:	690b      	ldr	r3, [r1, #16]
 800cf3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf40:	4293      	cmp	r3, r2
 800cf42:	bfb8      	it	lt
 800cf44:	4613      	movlt	r3, r2
 800cf46:	6033      	str	r3, [r6, #0]
 800cf48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf4c:	4607      	mov	r7, r0
 800cf4e:	460c      	mov	r4, r1
 800cf50:	b10a      	cbz	r2, 800cf56 <_printf_common+0x26>
 800cf52:	3301      	adds	r3, #1
 800cf54:	6033      	str	r3, [r6, #0]
 800cf56:	6823      	ldr	r3, [r4, #0]
 800cf58:	0699      	lsls	r1, r3, #26
 800cf5a:	bf42      	ittt	mi
 800cf5c:	6833      	ldrmi	r3, [r6, #0]
 800cf5e:	3302      	addmi	r3, #2
 800cf60:	6033      	strmi	r3, [r6, #0]
 800cf62:	6825      	ldr	r5, [r4, #0]
 800cf64:	f015 0506 	ands.w	r5, r5, #6
 800cf68:	d106      	bne.n	800cf78 <_printf_common+0x48>
 800cf6a:	f104 0a19 	add.w	sl, r4, #25
 800cf6e:	68e3      	ldr	r3, [r4, #12]
 800cf70:	6832      	ldr	r2, [r6, #0]
 800cf72:	1a9b      	subs	r3, r3, r2
 800cf74:	42ab      	cmp	r3, r5
 800cf76:	dc26      	bgt.n	800cfc6 <_printf_common+0x96>
 800cf78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	3b00      	subs	r3, #0
 800cf80:	bf18      	it	ne
 800cf82:	2301      	movne	r3, #1
 800cf84:	0692      	lsls	r2, r2, #26
 800cf86:	d42b      	bmi.n	800cfe0 <_printf_common+0xb0>
 800cf88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf8c:	4641      	mov	r1, r8
 800cf8e:	4638      	mov	r0, r7
 800cf90:	47c8      	blx	r9
 800cf92:	3001      	adds	r0, #1
 800cf94:	d01e      	beq.n	800cfd4 <_printf_common+0xa4>
 800cf96:	6823      	ldr	r3, [r4, #0]
 800cf98:	6922      	ldr	r2, [r4, #16]
 800cf9a:	f003 0306 	and.w	r3, r3, #6
 800cf9e:	2b04      	cmp	r3, #4
 800cfa0:	bf02      	ittt	eq
 800cfa2:	68e5      	ldreq	r5, [r4, #12]
 800cfa4:	6833      	ldreq	r3, [r6, #0]
 800cfa6:	1aed      	subeq	r5, r5, r3
 800cfa8:	68a3      	ldr	r3, [r4, #8]
 800cfaa:	bf0c      	ite	eq
 800cfac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfb0:	2500      	movne	r5, #0
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	bfc4      	itt	gt
 800cfb6:	1a9b      	subgt	r3, r3, r2
 800cfb8:	18ed      	addgt	r5, r5, r3
 800cfba:	2600      	movs	r6, #0
 800cfbc:	341a      	adds	r4, #26
 800cfbe:	42b5      	cmp	r5, r6
 800cfc0:	d11a      	bne.n	800cff8 <_printf_common+0xc8>
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	e008      	b.n	800cfd8 <_printf_common+0xa8>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4652      	mov	r2, sl
 800cfca:	4641      	mov	r1, r8
 800cfcc:	4638      	mov	r0, r7
 800cfce:	47c8      	blx	r9
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d103      	bne.n	800cfdc <_printf_common+0xac>
 800cfd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfdc:	3501      	adds	r5, #1
 800cfde:	e7c6      	b.n	800cf6e <_printf_common+0x3e>
 800cfe0:	18e1      	adds	r1, r4, r3
 800cfe2:	1c5a      	adds	r2, r3, #1
 800cfe4:	2030      	movs	r0, #48	@ 0x30
 800cfe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cfea:	4422      	add	r2, r4
 800cfec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cff4:	3302      	adds	r3, #2
 800cff6:	e7c7      	b.n	800cf88 <_printf_common+0x58>
 800cff8:	2301      	movs	r3, #1
 800cffa:	4622      	mov	r2, r4
 800cffc:	4641      	mov	r1, r8
 800cffe:	4638      	mov	r0, r7
 800d000:	47c8      	blx	r9
 800d002:	3001      	adds	r0, #1
 800d004:	d0e6      	beq.n	800cfd4 <_printf_common+0xa4>
 800d006:	3601      	adds	r6, #1
 800d008:	e7d9      	b.n	800cfbe <_printf_common+0x8e>
	...

0800d00c <_printf_i>:
 800d00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d010:	7e0f      	ldrb	r7, [r1, #24]
 800d012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d014:	2f78      	cmp	r7, #120	@ 0x78
 800d016:	4691      	mov	r9, r2
 800d018:	4680      	mov	r8, r0
 800d01a:	460c      	mov	r4, r1
 800d01c:	469a      	mov	sl, r3
 800d01e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d022:	d807      	bhi.n	800d034 <_printf_i+0x28>
 800d024:	2f62      	cmp	r7, #98	@ 0x62
 800d026:	d80a      	bhi.n	800d03e <_printf_i+0x32>
 800d028:	2f00      	cmp	r7, #0
 800d02a:	f000 80d1 	beq.w	800d1d0 <_printf_i+0x1c4>
 800d02e:	2f58      	cmp	r7, #88	@ 0x58
 800d030:	f000 80b8 	beq.w	800d1a4 <_printf_i+0x198>
 800d034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d03c:	e03a      	b.n	800d0b4 <_printf_i+0xa8>
 800d03e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d042:	2b15      	cmp	r3, #21
 800d044:	d8f6      	bhi.n	800d034 <_printf_i+0x28>
 800d046:	a101      	add	r1, pc, #4	@ (adr r1, 800d04c <_printf_i+0x40>)
 800d048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d04c:	0800d0a5 	.word	0x0800d0a5
 800d050:	0800d0b9 	.word	0x0800d0b9
 800d054:	0800d035 	.word	0x0800d035
 800d058:	0800d035 	.word	0x0800d035
 800d05c:	0800d035 	.word	0x0800d035
 800d060:	0800d035 	.word	0x0800d035
 800d064:	0800d0b9 	.word	0x0800d0b9
 800d068:	0800d035 	.word	0x0800d035
 800d06c:	0800d035 	.word	0x0800d035
 800d070:	0800d035 	.word	0x0800d035
 800d074:	0800d035 	.word	0x0800d035
 800d078:	0800d1b7 	.word	0x0800d1b7
 800d07c:	0800d0e3 	.word	0x0800d0e3
 800d080:	0800d171 	.word	0x0800d171
 800d084:	0800d035 	.word	0x0800d035
 800d088:	0800d035 	.word	0x0800d035
 800d08c:	0800d1d9 	.word	0x0800d1d9
 800d090:	0800d035 	.word	0x0800d035
 800d094:	0800d0e3 	.word	0x0800d0e3
 800d098:	0800d035 	.word	0x0800d035
 800d09c:	0800d035 	.word	0x0800d035
 800d0a0:	0800d179 	.word	0x0800d179
 800d0a4:	6833      	ldr	r3, [r6, #0]
 800d0a6:	1d1a      	adds	r2, r3, #4
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	6032      	str	r2, [r6, #0]
 800d0ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e09c      	b.n	800d1f2 <_printf_i+0x1e6>
 800d0b8:	6833      	ldr	r3, [r6, #0]
 800d0ba:	6820      	ldr	r0, [r4, #0]
 800d0bc:	1d19      	adds	r1, r3, #4
 800d0be:	6031      	str	r1, [r6, #0]
 800d0c0:	0606      	lsls	r6, r0, #24
 800d0c2:	d501      	bpl.n	800d0c8 <_printf_i+0xbc>
 800d0c4:	681d      	ldr	r5, [r3, #0]
 800d0c6:	e003      	b.n	800d0d0 <_printf_i+0xc4>
 800d0c8:	0645      	lsls	r5, r0, #25
 800d0ca:	d5fb      	bpl.n	800d0c4 <_printf_i+0xb8>
 800d0cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0d0:	2d00      	cmp	r5, #0
 800d0d2:	da03      	bge.n	800d0dc <_printf_i+0xd0>
 800d0d4:	232d      	movs	r3, #45	@ 0x2d
 800d0d6:	426d      	negs	r5, r5
 800d0d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0dc:	4858      	ldr	r0, [pc, #352]	@ (800d240 <_printf_i+0x234>)
 800d0de:	230a      	movs	r3, #10
 800d0e0:	e011      	b.n	800d106 <_printf_i+0xfa>
 800d0e2:	6821      	ldr	r1, [r4, #0]
 800d0e4:	6833      	ldr	r3, [r6, #0]
 800d0e6:	0608      	lsls	r0, r1, #24
 800d0e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d0ec:	d402      	bmi.n	800d0f4 <_printf_i+0xe8>
 800d0ee:	0649      	lsls	r1, r1, #25
 800d0f0:	bf48      	it	mi
 800d0f2:	b2ad      	uxthmi	r5, r5
 800d0f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d0f6:	4852      	ldr	r0, [pc, #328]	@ (800d240 <_printf_i+0x234>)
 800d0f8:	6033      	str	r3, [r6, #0]
 800d0fa:	bf14      	ite	ne
 800d0fc:	230a      	movne	r3, #10
 800d0fe:	2308      	moveq	r3, #8
 800d100:	2100      	movs	r1, #0
 800d102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d106:	6866      	ldr	r6, [r4, #4]
 800d108:	60a6      	str	r6, [r4, #8]
 800d10a:	2e00      	cmp	r6, #0
 800d10c:	db05      	blt.n	800d11a <_printf_i+0x10e>
 800d10e:	6821      	ldr	r1, [r4, #0]
 800d110:	432e      	orrs	r6, r5
 800d112:	f021 0104 	bic.w	r1, r1, #4
 800d116:	6021      	str	r1, [r4, #0]
 800d118:	d04b      	beq.n	800d1b2 <_printf_i+0x1a6>
 800d11a:	4616      	mov	r6, r2
 800d11c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d120:	fb03 5711 	mls	r7, r3, r1, r5
 800d124:	5dc7      	ldrb	r7, [r0, r7]
 800d126:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d12a:	462f      	mov	r7, r5
 800d12c:	42bb      	cmp	r3, r7
 800d12e:	460d      	mov	r5, r1
 800d130:	d9f4      	bls.n	800d11c <_printf_i+0x110>
 800d132:	2b08      	cmp	r3, #8
 800d134:	d10b      	bne.n	800d14e <_printf_i+0x142>
 800d136:	6823      	ldr	r3, [r4, #0]
 800d138:	07df      	lsls	r7, r3, #31
 800d13a:	d508      	bpl.n	800d14e <_printf_i+0x142>
 800d13c:	6923      	ldr	r3, [r4, #16]
 800d13e:	6861      	ldr	r1, [r4, #4]
 800d140:	4299      	cmp	r1, r3
 800d142:	bfde      	ittt	le
 800d144:	2330      	movle	r3, #48	@ 0x30
 800d146:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d14a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d14e:	1b92      	subs	r2, r2, r6
 800d150:	6122      	str	r2, [r4, #16]
 800d152:	f8cd a000 	str.w	sl, [sp]
 800d156:	464b      	mov	r3, r9
 800d158:	aa03      	add	r2, sp, #12
 800d15a:	4621      	mov	r1, r4
 800d15c:	4640      	mov	r0, r8
 800d15e:	f7ff fee7 	bl	800cf30 <_printf_common>
 800d162:	3001      	adds	r0, #1
 800d164:	d14a      	bne.n	800d1fc <_printf_i+0x1f0>
 800d166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d16a:	b004      	add	sp, #16
 800d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d170:	6823      	ldr	r3, [r4, #0]
 800d172:	f043 0320 	orr.w	r3, r3, #32
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	4832      	ldr	r0, [pc, #200]	@ (800d244 <_printf_i+0x238>)
 800d17a:	2778      	movs	r7, #120	@ 0x78
 800d17c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	6831      	ldr	r1, [r6, #0]
 800d184:	061f      	lsls	r7, r3, #24
 800d186:	f851 5b04 	ldr.w	r5, [r1], #4
 800d18a:	d402      	bmi.n	800d192 <_printf_i+0x186>
 800d18c:	065f      	lsls	r7, r3, #25
 800d18e:	bf48      	it	mi
 800d190:	b2ad      	uxthmi	r5, r5
 800d192:	6031      	str	r1, [r6, #0]
 800d194:	07d9      	lsls	r1, r3, #31
 800d196:	bf44      	itt	mi
 800d198:	f043 0320 	orrmi.w	r3, r3, #32
 800d19c:	6023      	strmi	r3, [r4, #0]
 800d19e:	b11d      	cbz	r5, 800d1a8 <_printf_i+0x19c>
 800d1a0:	2310      	movs	r3, #16
 800d1a2:	e7ad      	b.n	800d100 <_printf_i+0xf4>
 800d1a4:	4826      	ldr	r0, [pc, #152]	@ (800d240 <_printf_i+0x234>)
 800d1a6:	e7e9      	b.n	800d17c <_printf_i+0x170>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	f023 0320 	bic.w	r3, r3, #32
 800d1ae:	6023      	str	r3, [r4, #0]
 800d1b0:	e7f6      	b.n	800d1a0 <_printf_i+0x194>
 800d1b2:	4616      	mov	r6, r2
 800d1b4:	e7bd      	b.n	800d132 <_printf_i+0x126>
 800d1b6:	6833      	ldr	r3, [r6, #0]
 800d1b8:	6825      	ldr	r5, [r4, #0]
 800d1ba:	6961      	ldr	r1, [r4, #20]
 800d1bc:	1d18      	adds	r0, r3, #4
 800d1be:	6030      	str	r0, [r6, #0]
 800d1c0:	062e      	lsls	r6, r5, #24
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	d501      	bpl.n	800d1ca <_printf_i+0x1be>
 800d1c6:	6019      	str	r1, [r3, #0]
 800d1c8:	e002      	b.n	800d1d0 <_printf_i+0x1c4>
 800d1ca:	0668      	lsls	r0, r5, #25
 800d1cc:	d5fb      	bpl.n	800d1c6 <_printf_i+0x1ba>
 800d1ce:	8019      	strh	r1, [r3, #0]
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	4616      	mov	r6, r2
 800d1d6:	e7bc      	b.n	800d152 <_printf_i+0x146>
 800d1d8:	6833      	ldr	r3, [r6, #0]
 800d1da:	1d1a      	adds	r2, r3, #4
 800d1dc:	6032      	str	r2, [r6, #0]
 800d1de:	681e      	ldr	r6, [r3, #0]
 800d1e0:	6862      	ldr	r2, [r4, #4]
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f7f3 f813 	bl	8000210 <memchr>
 800d1ea:	b108      	cbz	r0, 800d1f0 <_printf_i+0x1e4>
 800d1ec:	1b80      	subs	r0, r0, r6
 800d1ee:	6060      	str	r0, [r4, #4]
 800d1f0:	6863      	ldr	r3, [r4, #4]
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1fa:	e7aa      	b.n	800d152 <_printf_i+0x146>
 800d1fc:	6923      	ldr	r3, [r4, #16]
 800d1fe:	4632      	mov	r2, r6
 800d200:	4649      	mov	r1, r9
 800d202:	4640      	mov	r0, r8
 800d204:	47d0      	blx	sl
 800d206:	3001      	adds	r0, #1
 800d208:	d0ad      	beq.n	800d166 <_printf_i+0x15a>
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	079b      	lsls	r3, r3, #30
 800d20e:	d413      	bmi.n	800d238 <_printf_i+0x22c>
 800d210:	68e0      	ldr	r0, [r4, #12]
 800d212:	9b03      	ldr	r3, [sp, #12]
 800d214:	4298      	cmp	r0, r3
 800d216:	bfb8      	it	lt
 800d218:	4618      	movlt	r0, r3
 800d21a:	e7a6      	b.n	800d16a <_printf_i+0x15e>
 800d21c:	2301      	movs	r3, #1
 800d21e:	4632      	mov	r2, r6
 800d220:	4649      	mov	r1, r9
 800d222:	4640      	mov	r0, r8
 800d224:	47d0      	blx	sl
 800d226:	3001      	adds	r0, #1
 800d228:	d09d      	beq.n	800d166 <_printf_i+0x15a>
 800d22a:	3501      	adds	r5, #1
 800d22c:	68e3      	ldr	r3, [r4, #12]
 800d22e:	9903      	ldr	r1, [sp, #12]
 800d230:	1a5b      	subs	r3, r3, r1
 800d232:	42ab      	cmp	r3, r5
 800d234:	dcf2      	bgt.n	800d21c <_printf_i+0x210>
 800d236:	e7eb      	b.n	800d210 <_printf_i+0x204>
 800d238:	2500      	movs	r5, #0
 800d23a:	f104 0619 	add.w	r6, r4, #25
 800d23e:	e7f5      	b.n	800d22c <_printf_i+0x220>
 800d240:	080136f0 	.word	0x080136f0
 800d244:	08013701 	.word	0x08013701

0800d248 <_scanf_float>:
 800d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d24c:	b087      	sub	sp, #28
 800d24e:	4691      	mov	r9, r2
 800d250:	9303      	str	r3, [sp, #12]
 800d252:	688b      	ldr	r3, [r1, #8]
 800d254:	1e5a      	subs	r2, r3, #1
 800d256:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d25a:	bf81      	itttt	hi
 800d25c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d260:	eb03 0b05 	addhi.w	fp, r3, r5
 800d264:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d268:	608b      	strhi	r3, [r1, #8]
 800d26a:	680b      	ldr	r3, [r1, #0]
 800d26c:	460a      	mov	r2, r1
 800d26e:	f04f 0500 	mov.w	r5, #0
 800d272:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d276:	f842 3b1c 	str.w	r3, [r2], #28
 800d27a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d27e:	4680      	mov	r8, r0
 800d280:	460c      	mov	r4, r1
 800d282:	bf98      	it	ls
 800d284:	f04f 0b00 	movls.w	fp, #0
 800d288:	9201      	str	r2, [sp, #4]
 800d28a:	4616      	mov	r6, r2
 800d28c:	46aa      	mov	sl, r5
 800d28e:	462f      	mov	r7, r5
 800d290:	9502      	str	r5, [sp, #8]
 800d292:	68a2      	ldr	r2, [r4, #8]
 800d294:	b15a      	cbz	r2, 800d2ae <_scanf_float+0x66>
 800d296:	f8d9 3000 	ldr.w	r3, [r9]
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b4e      	cmp	r3, #78	@ 0x4e
 800d29e:	d863      	bhi.n	800d368 <_scanf_float+0x120>
 800d2a0:	2b40      	cmp	r3, #64	@ 0x40
 800d2a2:	d83b      	bhi.n	800d31c <_scanf_float+0xd4>
 800d2a4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d2a8:	b2c8      	uxtb	r0, r1
 800d2aa:	280e      	cmp	r0, #14
 800d2ac:	d939      	bls.n	800d322 <_scanf_float+0xda>
 800d2ae:	b11f      	cbz	r7, 800d2b8 <_scanf_float+0x70>
 800d2b0:	6823      	ldr	r3, [r4, #0]
 800d2b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2b6:	6023      	str	r3, [r4, #0]
 800d2b8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d2bc:	f1ba 0f01 	cmp.w	sl, #1
 800d2c0:	f200 8114 	bhi.w	800d4ec <_scanf_float+0x2a4>
 800d2c4:	9b01      	ldr	r3, [sp, #4]
 800d2c6:	429e      	cmp	r6, r3
 800d2c8:	f200 8105 	bhi.w	800d4d6 <_scanf_float+0x28e>
 800d2cc:	2001      	movs	r0, #1
 800d2ce:	b007      	add	sp, #28
 800d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d2d8:	2a0d      	cmp	r2, #13
 800d2da:	d8e8      	bhi.n	800d2ae <_scanf_float+0x66>
 800d2dc:	a101      	add	r1, pc, #4	@ (adr r1, 800d2e4 <_scanf_float+0x9c>)
 800d2de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d2e2:	bf00      	nop
 800d2e4:	0800d42d 	.word	0x0800d42d
 800d2e8:	0800d2af 	.word	0x0800d2af
 800d2ec:	0800d2af 	.word	0x0800d2af
 800d2f0:	0800d2af 	.word	0x0800d2af
 800d2f4:	0800d489 	.word	0x0800d489
 800d2f8:	0800d463 	.word	0x0800d463
 800d2fc:	0800d2af 	.word	0x0800d2af
 800d300:	0800d2af 	.word	0x0800d2af
 800d304:	0800d43b 	.word	0x0800d43b
 800d308:	0800d2af 	.word	0x0800d2af
 800d30c:	0800d2af 	.word	0x0800d2af
 800d310:	0800d2af 	.word	0x0800d2af
 800d314:	0800d2af 	.word	0x0800d2af
 800d318:	0800d3f7 	.word	0x0800d3f7
 800d31c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d320:	e7da      	b.n	800d2d8 <_scanf_float+0x90>
 800d322:	290e      	cmp	r1, #14
 800d324:	d8c3      	bhi.n	800d2ae <_scanf_float+0x66>
 800d326:	a001      	add	r0, pc, #4	@ (adr r0, 800d32c <_scanf_float+0xe4>)
 800d328:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d32c:	0800d3e7 	.word	0x0800d3e7
 800d330:	0800d2af 	.word	0x0800d2af
 800d334:	0800d3e7 	.word	0x0800d3e7
 800d338:	0800d477 	.word	0x0800d477
 800d33c:	0800d2af 	.word	0x0800d2af
 800d340:	0800d389 	.word	0x0800d389
 800d344:	0800d3cd 	.word	0x0800d3cd
 800d348:	0800d3cd 	.word	0x0800d3cd
 800d34c:	0800d3cd 	.word	0x0800d3cd
 800d350:	0800d3cd 	.word	0x0800d3cd
 800d354:	0800d3cd 	.word	0x0800d3cd
 800d358:	0800d3cd 	.word	0x0800d3cd
 800d35c:	0800d3cd 	.word	0x0800d3cd
 800d360:	0800d3cd 	.word	0x0800d3cd
 800d364:	0800d3cd 	.word	0x0800d3cd
 800d368:	2b6e      	cmp	r3, #110	@ 0x6e
 800d36a:	d809      	bhi.n	800d380 <_scanf_float+0x138>
 800d36c:	2b60      	cmp	r3, #96	@ 0x60
 800d36e:	d8b1      	bhi.n	800d2d4 <_scanf_float+0x8c>
 800d370:	2b54      	cmp	r3, #84	@ 0x54
 800d372:	d07b      	beq.n	800d46c <_scanf_float+0x224>
 800d374:	2b59      	cmp	r3, #89	@ 0x59
 800d376:	d19a      	bne.n	800d2ae <_scanf_float+0x66>
 800d378:	2d07      	cmp	r5, #7
 800d37a:	d198      	bne.n	800d2ae <_scanf_float+0x66>
 800d37c:	2508      	movs	r5, #8
 800d37e:	e02f      	b.n	800d3e0 <_scanf_float+0x198>
 800d380:	2b74      	cmp	r3, #116	@ 0x74
 800d382:	d073      	beq.n	800d46c <_scanf_float+0x224>
 800d384:	2b79      	cmp	r3, #121	@ 0x79
 800d386:	e7f6      	b.n	800d376 <_scanf_float+0x12e>
 800d388:	6821      	ldr	r1, [r4, #0]
 800d38a:	05c8      	lsls	r0, r1, #23
 800d38c:	d51e      	bpl.n	800d3cc <_scanf_float+0x184>
 800d38e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d392:	6021      	str	r1, [r4, #0]
 800d394:	3701      	adds	r7, #1
 800d396:	f1bb 0f00 	cmp.w	fp, #0
 800d39a:	d003      	beq.n	800d3a4 <_scanf_float+0x15c>
 800d39c:	3201      	adds	r2, #1
 800d39e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d3a2:	60a2      	str	r2, [r4, #8]
 800d3a4:	68a3      	ldr	r3, [r4, #8]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	60a3      	str	r3, [r4, #8]
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f8c9 3004 	str.w	r3, [r9, #4]
 800d3bc:	f340 8082 	ble.w	800d4c4 <_scanf_float+0x27c>
 800d3c0:	f8d9 3000 	ldr.w	r3, [r9]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	f8c9 3000 	str.w	r3, [r9]
 800d3ca:	e762      	b.n	800d292 <_scanf_float+0x4a>
 800d3cc:	eb1a 0105 	adds.w	r1, sl, r5
 800d3d0:	f47f af6d 	bne.w	800d2ae <_scanf_float+0x66>
 800d3d4:	6822      	ldr	r2, [r4, #0]
 800d3d6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d3da:	6022      	str	r2, [r4, #0]
 800d3dc:	460d      	mov	r5, r1
 800d3de:	468a      	mov	sl, r1
 800d3e0:	f806 3b01 	strb.w	r3, [r6], #1
 800d3e4:	e7de      	b.n	800d3a4 <_scanf_float+0x15c>
 800d3e6:	6822      	ldr	r2, [r4, #0]
 800d3e8:	0610      	lsls	r0, r2, #24
 800d3ea:	f57f af60 	bpl.w	800d2ae <_scanf_float+0x66>
 800d3ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d3f2:	6022      	str	r2, [r4, #0]
 800d3f4:	e7f4      	b.n	800d3e0 <_scanf_float+0x198>
 800d3f6:	f1ba 0f00 	cmp.w	sl, #0
 800d3fa:	d10c      	bne.n	800d416 <_scanf_float+0x1ce>
 800d3fc:	b977      	cbnz	r7, 800d41c <_scanf_float+0x1d4>
 800d3fe:	6822      	ldr	r2, [r4, #0]
 800d400:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d404:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d408:	d108      	bne.n	800d41c <_scanf_float+0x1d4>
 800d40a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d40e:	6022      	str	r2, [r4, #0]
 800d410:	f04f 0a01 	mov.w	sl, #1
 800d414:	e7e4      	b.n	800d3e0 <_scanf_float+0x198>
 800d416:	f1ba 0f02 	cmp.w	sl, #2
 800d41a:	d050      	beq.n	800d4be <_scanf_float+0x276>
 800d41c:	2d01      	cmp	r5, #1
 800d41e:	d002      	beq.n	800d426 <_scanf_float+0x1de>
 800d420:	2d04      	cmp	r5, #4
 800d422:	f47f af44 	bne.w	800d2ae <_scanf_float+0x66>
 800d426:	3501      	adds	r5, #1
 800d428:	b2ed      	uxtb	r5, r5
 800d42a:	e7d9      	b.n	800d3e0 <_scanf_float+0x198>
 800d42c:	f1ba 0f01 	cmp.w	sl, #1
 800d430:	f47f af3d 	bne.w	800d2ae <_scanf_float+0x66>
 800d434:	f04f 0a02 	mov.w	sl, #2
 800d438:	e7d2      	b.n	800d3e0 <_scanf_float+0x198>
 800d43a:	b975      	cbnz	r5, 800d45a <_scanf_float+0x212>
 800d43c:	2f00      	cmp	r7, #0
 800d43e:	f47f af37 	bne.w	800d2b0 <_scanf_float+0x68>
 800d442:	6822      	ldr	r2, [r4, #0]
 800d444:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d448:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d44c:	f040 8103 	bne.w	800d656 <_scanf_float+0x40e>
 800d450:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d454:	6022      	str	r2, [r4, #0]
 800d456:	2501      	movs	r5, #1
 800d458:	e7c2      	b.n	800d3e0 <_scanf_float+0x198>
 800d45a:	2d03      	cmp	r5, #3
 800d45c:	d0e3      	beq.n	800d426 <_scanf_float+0x1de>
 800d45e:	2d05      	cmp	r5, #5
 800d460:	e7df      	b.n	800d422 <_scanf_float+0x1da>
 800d462:	2d02      	cmp	r5, #2
 800d464:	f47f af23 	bne.w	800d2ae <_scanf_float+0x66>
 800d468:	2503      	movs	r5, #3
 800d46a:	e7b9      	b.n	800d3e0 <_scanf_float+0x198>
 800d46c:	2d06      	cmp	r5, #6
 800d46e:	f47f af1e 	bne.w	800d2ae <_scanf_float+0x66>
 800d472:	2507      	movs	r5, #7
 800d474:	e7b4      	b.n	800d3e0 <_scanf_float+0x198>
 800d476:	6822      	ldr	r2, [r4, #0]
 800d478:	0591      	lsls	r1, r2, #22
 800d47a:	f57f af18 	bpl.w	800d2ae <_scanf_float+0x66>
 800d47e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d482:	6022      	str	r2, [r4, #0]
 800d484:	9702      	str	r7, [sp, #8]
 800d486:	e7ab      	b.n	800d3e0 <_scanf_float+0x198>
 800d488:	6822      	ldr	r2, [r4, #0]
 800d48a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d48e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d492:	d005      	beq.n	800d4a0 <_scanf_float+0x258>
 800d494:	0550      	lsls	r0, r2, #21
 800d496:	f57f af0a 	bpl.w	800d2ae <_scanf_float+0x66>
 800d49a:	2f00      	cmp	r7, #0
 800d49c:	f000 80db 	beq.w	800d656 <_scanf_float+0x40e>
 800d4a0:	0591      	lsls	r1, r2, #22
 800d4a2:	bf58      	it	pl
 800d4a4:	9902      	ldrpl	r1, [sp, #8]
 800d4a6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d4aa:	bf58      	it	pl
 800d4ac:	1a79      	subpl	r1, r7, r1
 800d4ae:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d4b2:	bf58      	it	pl
 800d4b4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d4b8:	6022      	str	r2, [r4, #0]
 800d4ba:	2700      	movs	r7, #0
 800d4bc:	e790      	b.n	800d3e0 <_scanf_float+0x198>
 800d4be:	f04f 0a03 	mov.w	sl, #3
 800d4c2:	e78d      	b.n	800d3e0 <_scanf_float+0x198>
 800d4c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	4640      	mov	r0, r8
 800d4cc:	4798      	blx	r3
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f43f aedf 	beq.w	800d292 <_scanf_float+0x4a>
 800d4d4:	e6eb      	b.n	800d2ae <_scanf_float+0x66>
 800d4d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d4da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d4de:	464a      	mov	r2, r9
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	4798      	blx	r3
 800d4e4:	6923      	ldr	r3, [r4, #16]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	6123      	str	r3, [r4, #16]
 800d4ea:	e6eb      	b.n	800d2c4 <_scanf_float+0x7c>
 800d4ec:	1e6b      	subs	r3, r5, #1
 800d4ee:	2b06      	cmp	r3, #6
 800d4f0:	d824      	bhi.n	800d53c <_scanf_float+0x2f4>
 800d4f2:	2d02      	cmp	r5, #2
 800d4f4:	d836      	bhi.n	800d564 <_scanf_float+0x31c>
 800d4f6:	9b01      	ldr	r3, [sp, #4]
 800d4f8:	429e      	cmp	r6, r3
 800d4fa:	f67f aee7 	bls.w	800d2cc <_scanf_float+0x84>
 800d4fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d506:	464a      	mov	r2, r9
 800d508:	4640      	mov	r0, r8
 800d50a:	4798      	blx	r3
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	3b01      	subs	r3, #1
 800d510:	6123      	str	r3, [r4, #16]
 800d512:	e7f0      	b.n	800d4f6 <_scanf_float+0x2ae>
 800d514:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d518:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d51c:	464a      	mov	r2, r9
 800d51e:	4640      	mov	r0, r8
 800d520:	4798      	blx	r3
 800d522:	6923      	ldr	r3, [r4, #16]
 800d524:	3b01      	subs	r3, #1
 800d526:	6123      	str	r3, [r4, #16]
 800d528:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d52c:	fa5f fa8a 	uxtb.w	sl, sl
 800d530:	f1ba 0f02 	cmp.w	sl, #2
 800d534:	d1ee      	bne.n	800d514 <_scanf_float+0x2cc>
 800d536:	3d03      	subs	r5, #3
 800d538:	b2ed      	uxtb	r5, r5
 800d53a:	1b76      	subs	r6, r6, r5
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	05da      	lsls	r2, r3, #23
 800d540:	d530      	bpl.n	800d5a4 <_scanf_float+0x35c>
 800d542:	055b      	lsls	r3, r3, #21
 800d544:	d511      	bpl.n	800d56a <_scanf_float+0x322>
 800d546:	9b01      	ldr	r3, [sp, #4]
 800d548:	429e      	cmp	r6, r3
 800d54a:	f67f aebf 	bls.w	800d2cc <_scanf_float+0x84>
 800d54e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d552:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d556:	464a      	mov	r2, r9
 800d558:	4640      	mov	r0, r8
 800d55a:	4798      	blx	r3
 800d55c:	6923      	ldr	r3, [r4, #16]
 800d55e:	3b01      	subs	r3, #1
 800d560:	6123      	str	r3, [r4, #16]
 800d562:	e7f0      	b.n	800d546 <_scanf_float+0x2fe>
 800d564:	46aa      	mov	sl, r5
 800d566:	46b3      	mov	fp, r6
 800d568:	e7de      	b.n	800d528 <_scanf_float+0x2e0>
 800d56a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	2965      	cmp	r1, #101	@ 0x65
 800d572:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d576:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d57a:	6123      	str	r3, [r4, #16]
 800d57c:	d00c      	beq.n	800d598 <_scanf_float+0x350>
 800d57e:	2945      	cmp	r1, #69	@ 0x45
 800d580:	d00a      	beq.n	800d598 <_scanf_float+0x350>
 800d582:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d586:	464a      	mov	r2, r9
 800d588:	4640      	mov	r0, r8
 800d58a:	4798      	blx	r3
 800d58c:	6923      	ldr	r3, [r4, #16]
 800d58e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d592:	3b01      	subs	r3, #1
 800d594:	1eb5      	subs	r5, r6, #2
 800d596:	6123      	str	r3, [r4, #16]
 800d598:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d59c:	464a      	mov	r2, r9
 800d59e:	4640      	mov	r0, r8
 800d5a0:	4798      	blx	r3
 800d5a2:	462e      	mov	r6, r5
 800d5a4:	6822      	ldr	r2, [r4, #0]
 800d5a6:	f012 0210 	ands.w	r2, r2, #16
 800d5aa:	d001      	beq.n	800d5b0 <_scanf_float+0x368>
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	e68e      	b.n	800d2ce <_scanf_float+0x86>
 800d5b0:	7032      	strb	r2, [r6, #0]
 800d5b2:	6823      	ldr	r3, [r4, #0]
 800d5b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d5b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5bc:	d125      	bne.n	800d60a <_scanf_float+0x3c2>
 800d5be:	9b02      	ldr	r3, [sp, #8]
 800d5c0:	429f      	cmp	r7, r3
 800d5c2:	d00a      	beq.n	800d5da <_scanf_float+0x392>
 800d5c4:	1bda      	subs	r2, r3, r7
 800d5c6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d5ca:	429e      	cmp	r6, r3
 800d5cc:	bf28      	it	cs
 800d5ce:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d5d2:	4922      	ldr	r1, [pc, #136]	@ (800d65c <_scanf_float+0x414>)
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f000 f907 	bl	800d7e8 <siprintf>
 800d5da:	9901      	ldr	r1, [sp, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	4640      	mov	r0, r8
 800d5e0:	f002 fbb2 	bl	800fd48 <_strtod_r>
 800d5e4:	9b03      	ldr	r3, [sp, #12]
 800d5e6:	6821      	ldr	r1, [r4, #0]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f011 0f02 	tst.w	r1, #2
 800d5ee:	ec57 6b10 	vmov	r6, r7, d0
 800d5f2:	f103 0204 	add.w	r2, r3, #4
 800d5f6:	d015      	beq.n	800d624 <_scanf_float+0x3dc>
 800d5f8:	9903      	ldr	r1, [sp, #12]
 800d5fa:	600a      	str	r2, [r1, #0]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	e9c3 6700 	strd	r6, r7, [r3]
 800d602:	68e3      	ldr	r3, [r4, #12]
 800d604:	3301      	adds	r3, #1
 800d606:	60e3      	str	r3, [r4, #12]
 800d608:	e7d0      	b.n	800d5ac <_scanf_float+0x364>
 800d60a:	9b04      	ldr	r3, [sp, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d0e4      	beq.n	800d5da <_scanf_float+0x392>
 800d610:	9905      	ldr	r1, [sp, #20]
 800d612:	230a      	movs	r3, #10
 800d614:	3101      	adds	r1, #1
 800d616:	4640      	mov	r0, r8
 800d618:	f002 fc16 	bl	800fe48 <_strtol_r>
 800d61c:	9b04      	ldr	r3, [sp, #16]
 800d61e:	9e05      	ldr	r6, [sp, #20]
 800d620:	1ac2      	subs	r2, r0, r3
 800d622:	e7d0      	b.n	800d5c6 <_scanf_float+0x37e>
 800d624:	f011 0f04 	tst.w	r1, #4
 800d628:	9903      	ldr	r1, [sp, #12]
 800d62a:	600a      	str	r2, [r1, #0]
 800d62c:	d1e6      	bne.n	800d5fc <_scanf_float+0x3b4>
 800d62e:	681d      	ldr	r5, [r3, #0]
 800d630:	4632      	mov	r2, r6
 800d632:	463b      	mov	r3, r7
 800d634:	4630      	mov	r0, r6
 800d636:	4639      	mov	r1, r7
 800d638:	f7f3 fa98 	bl	8000b6c <__aeabi_dcmpun>
 800d63c:	b128      	cbz	r0, 800d64a <_scanf_float+0x402>
 800d63e:	4808      	ldr	r0, [pc, #32]	@ (800d660 <_scanf_float+0x418>)
 800d640:	f000 fa2a 	bl	800da98 <nanf>
 800d644:	ed85 0a00 	vstr	s0, [r5]
 800d648:	e7db      	b.n	800d602 <_scanf_float+0x3ba>
 800d64a:	4630      	mov	r0, r6
 800d64c:	4639      	mov	r1, r7
 800d64e:	f7f3 faeb 	bl	8000c28 <__aeabi_d2f>
 800d652:	6028      	str	r0, [r5, #0]
 800d654:	e7d5      	b.n	800d602 <_scanf_float+0x3ba>
 800d656:	2700      	movs	r7, #0
 800d658:	e62e      	b.n	800d2b8 <_scanf_float+0x70>
 800d65a:	bf00      	nop
 800d65c:	08013712 	.word	0x08013712
 800d660:	0801386e 	.word	0x0801386e

0800d664 <std>:
 800d664:	2300      	movs	r3, #0
 800d666:	b510      	push	{r4, lr}
 800d668:	4604      	mov	r4, r0
 800d66a:	e9c0 3300 	strd	r3, r3, [r0]
 800d66e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d672:	6083      	str	r3, [r0, #8]
 800d674:	8181      	strh	r1, [r0, #12]
 800d676:	6643      	str	r3, [r0, #100]	@ 0x64
 800d678:	81c2      	strh	r2, [r0, #14]
 800d67a:	6183      	str	r3, [r0, #24]
 800d67c:	4619      	mov	r1, r3
 800d67e:	2208      	movs	r2, #8
 800d680:	305c      	adds	r0, #92	@ 0x5c
 800d682:	f000 f954 	bl	800d92e <memset>
 800d686:	4b0d      	ldr	r3, [pc, #52]	@ (800d6bc <std+0x58>)
 800d688:	6263      	str	r3, [r4, #36]	@ 0x24
 800d68a:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c0 <std+0x5c>)
 800d68c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d68e:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c4 <std+0x60>)
 800d690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d692:	4b0d      	ldr	r3, [pc, #52]	@ (800d6c8 <std+0x64>)
 800d694:	6323      	str	r3, [r4, #48]	@ 0x30
 800d696:	4b0d      	ldr	r3, [pc, #52]	@ (800d6cc <std+0x68>)
 800d698:	6224      	str	r4, [r4, #32]
 800d69a:	429c      	cmp	r4, r3
 800d69c:	d006      	beq.n	800d6ac <std+0x48>
 800d69e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d6a2:	4294      	cmp	r4, r2
 800d6a4:	d002      	beq.n	800d6ac <std+0x48>
 800d6a6:	33d0      	adds	r3, #208	@ 0xd0
 800d6a8:	429c      	cmp	r4, r3
 800d6aa:	d105      	bne.n	800d6b8 <std+0x54>
 800d6ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6b4:	f000 b9de 	b.w	800da74 <__retarget_lock_init_recursive>
 800d6b8:	bd10      	pop	{r4, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0800d885 	.word	0x0800d885
 800d6c0:	0800d8ab 	.word	0x0800d8ab
 800d6c4:	0800d8e3 	.word	0x0800d8e3
 800d6c8:	0800d907 	.word	0x0800d907
 800d6cc:	20001b64 	.word	0x20001b64

0800d6d0 <stdio_exit_handler>:
 800d6d0:	4a02      	ldr	r2, [pc, #8]	@ (800d6dc <stdio_exit_handler+0xc>)
 800d6d2:	4903      	ldr	r1, [pc, #12]	@ (800d6e0 <stdio_exit_handler+0x10>)
 800d6d4:	4803      	ldr	r0, [pc, #12]	@ (800d6e4 <stdio_exit_handler+0x14>)
 800d6d6:	f000 b869 	b.w	800d7ac <_fwalk_sglue>
 800d6da:	bf00      	nop
 800d6dc:	20000024 	.word	0x20000024
 800d6e0:	08010841 	.word	0x08010841
 800d6e4:	20000034 	.word	0x20000034

0800d6e8 <cleanup_stdio>:
 800d6e8:	6841      	ldr	r1, [r0, #4]
 800d6ea:	4b0c      	ldr	r3, [pc, #48]	@ (800d71c <cleanup_stdio+0x34>)
 800d6ec:	4299      	cmp	r1, r3
 800d6ee:	b510      	push	{r4, lr}
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	d001      	beq.n	800d6f8 <cleanup_stdio+0x10>
 800d6f4:	f003 f8a4 	bl	8010840 <_fflush_r>
 800d6f8:	68a1      	ldr	r1, [r4, #8]
 800d6fa:	4b09      	ldr	r3, [pc, #36]	@ (800d720 <cleanup_stdio+0x38>)
 800d6fc:	4299      	cmp	r1, r3
 800d6fe:	d002      	beq.n	800d706 <cleanup_stdio+0x1e>
 800d700:	4620      	mov	r0, r4
 800d702:	f003 f89d 	bl	8010840 <_fflush_r>
 800d706:	68e1      	ldr	r1, [r4, #12]
 800d708:	4b06      	ldr	r3, [pc, #24]	@ (800d724 <cleanup_stdio+0x3c>)
 800d70a:	4299      	cmp	r1, r3
 800d70c:	d004      	beq.n	800d718 <cleanup_stdio+0x30>
 800d70e:	4620      	mov	r0, r4
 800d710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d714:	f003 b894 	b.w	8010840 <_fflush_r>
 800d718:	bd10      	pop	{r4, pc}
 800d71a:	bf00      	nop
 800d71c:	20001b64 	.word	0x20001b64
 800d720:	20001bcc 	.word	0x20001bcc
 800d724:	20001c34 	.word	0x20001c34

0800d728 <global_stdio_init.part.0>:
 800d728:	b510      	push	{r4, lr}
 800d72a:	4b0b      	ldr	r3, [pc, #44]	@ (800d758 <global_stdio_init.part.0+0x30>)
 800d72c:	4c0b      	ldr	r4, [pc, #44]	@ (800d75c <global_stdio_init.part.0+0x34>)
 800d72e:	4a0c      	ldr	r2, [pc, #48]	@ (800d760 <global_stdio_init.part.0+0x38>)
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	4620      	mov	r0, r4
 800d734:	2200      	movs	r2, #0
 800d736:	2104      	movs	r1, #4
 800d738:	f7ff ff94 	bl	800d664 <std>
 800d73c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d740:	2201      	movs	r2, #1
 800d742:	2109      	movs	r1, #9
 800d744:	f7ff ff8e 	bl	800d664 <std>
 800d748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d74c:	2202      	movs	r2, #2
 800d74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d752:	2112      	movs	r1, #18
 800d754:	f7ff bf86 	b.w	800d664 <std>
 800d758:	20001c9c 	.word	0x20001c9c
 800d75c:	20001b64 	.word	0x20001b64
 800d760:	0800d6d1 	.word	0x0800d6d1

0800d764 <__sfp_lock_acquire>:
 800d764:	4801      	ldr	r0, [pc, #4]	@ (800d76c <__sfp_lock_acquire+0x8>)
 800d766:	f000 b986 	b.w	800da76 <__retarget_lock_acquire_recursive>
 800d76a:	bf00      	nop
 800d76c:	20001ca5 	.word	0x20001ca5

0800d770 <__sfp_lock_release>:
 800d770:	4801      	ldr	r0, [pc, #4]	@ (800d778 <__sfp_lock_release+0x8>)
 800d772:	f000 b981 	b.w	800da78 <__retarget_lock_release_recursive>
 800d776:	bf00      	nop
 800d778:	20001ca5 	.word	0x20001ca5

0800d77c <__sinit>:
 800d77c:	b510      	push	{r4, lr}
 800d77e:	4604      	mov	r4, r0
 800d780:	f7ff fff0 	bl	800d764 <__sfp_lock_acquire>
 800d784:	6a23      	ldr	r3, [r4, #32]
 800d786:	b11b      	cbz	r3, 800d790 <__sinit+0x14>
 800d788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d78c:	f7ff bff0 	b.w	800d770 <__sfp_lock_release>
 800d790:	4b04      	ldr	r3, [pc, #16]	@ (800d7a4 <__sinit+0x28>)
 800d792:	6223      	str	r3, [r4, #32]
 800d794:	4b04      	ldr	r3, [pc, #16]	@ (800d7a8 <__sinit+0x2c>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d1f5      	bne.n	800d788 <__sinit+0xc>
 800d79c:	f7ff ffc4 	bl	800d728 <global_stdio_init.part.0>
 800d7a0:	e7f2      	b.n	800d788 <__sinit+0xc>
 800d7a2:	bf00      	nop
 800d7a4:	0800d6e9 	.word	0x0800d6e9
 800d7a8:	20001c9c 	.word	0x20001c9c

0800d7ac <_fwalk_sglue>:
 800d7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b0:	4607      	mov	r7, r0
 800d7b2:	4688      	mov	r8, r1
 800d7b4:	4614      	mov	r4, r2
 800d7b6:	2600      	movs	r6, #0
 800d7b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d7bc:	f1b9 0901 	subs.w	r9, r9, #1
 800d7c0:	d505      	bpl.n	800d7ce <_fwalk_sglue+0x22>
 800d7c2:	6824      	ldr	r4, [r4, #0]
 800d7c4:	2c00      	cmp	r4, #0
 800d7c6:	d1f7      	bne.n	800d7b8 <_fwalk_sglue+0xc>
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ce:	89ab      	ldrh	r3, [r5, #12]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d907      	bls.n	800d7e4 <_fwalk_sglue+0x38>
 800d7d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	d003      	beq.n	800d7e4 <_fwalk_sglue+0x38>
 800d7dc:	4629      	mov	r1, r5
 800d7de:	4638      	mov	r0, r7
 800d7e0:	47c0      	blx	r8
 800d7e2:	4306      	orrs	r6, r0
 800d7e4:	3568      	adds	r5, #104	@ 0x68
 800d7e6:	e7e9      	b.n	800d7bc <_fwalk_sglue+0x10>

0800d7e8 <siprintf>:
 800d7e8:	b40e      	push	{r1, r2, r3}
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	b09d      	sub	sp, #116	@ 0x74
 800d7ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d7f0:	9002      	str	r0, [sp, #8]
 800d7f2:	9006      	str	r0, [sp, #24]
 800d7f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7f8:	480a      	ldr	r0, [pc, #40]	@ (800d824 <siprintf+0x3c>)
 800d7fa:	9107      	str	r1, [sp, #28]
 800d7fc:	9104      	str	r1, [sp, #16]
 800d7fe:	490a      	ldr	r1, [pc, #40]	@ (800d828 <siprintf+0x40>)
 800d800:	f853 2b04 	ldr.w	r2, [r3], #4
 800d804:	9105      	str	r1, [sp, #20]
 800d806:	2400      	movs	r4, #0
 800d808:	a902      	add	r1, sp, #8
 800d80a:	6800      	ldr	r0, [r0, #0]
 800d80c:	9301      	str	r3, [sp, #4]
 800d80e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d810:	f002 fb78 	bl	800ff04 <_svfiprintf_r>
 800d814:	9b02      	ldr	r3, [sp, #8]
 800d816:	701c      	strb	r4, [r3, #0]
 800d818:	b01d      	add	sp, #116	@ 0x74
 800d81a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d81e:	b003      	add	sp, #12
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	20000030 	.word	0x20000030
 800d828:	ffff0208 	.word	0xffff0208

0800d82c <siscanf>:
 800d82c:	b40e      	push	{r1, r2, r3}
 800d82e:	b570      	push	{r4, r5, r6, lr}
 800d830:	b09d      	sub	sp, #116	@ 0x74
 800d832:	ac21      	add	r4, sp, #132	@ 0x84
 800d834:	2500      	movs	r5, #0
 800d836:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d83a:	f854 6b04 	ldr.w	r6, [r4], #4
 800d83e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d842:	951b      	str	r5, [sp, #108]	@ 0x6c
 800d844:	9002      	str	r0, [sp, #8]
 800d846:	9006      	str	r0, [sp, #24]
 800d848:	f7f2 fd32 	bl	80002b0 <strlen>
 800d84c:	4b0b      	ldr	r3, [pc, #44]	@ (800d87c <siscanf+0x50>)
 800d84e:	9003      	str	r0, [sp, #12]
 800d850:	9007      	str	r0, [sp, #28]
 800d852:	480b      	ldr	r0, [pc, #44]	@ (800d880 <siscanf+0x54>)
 800d854:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d856:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d85a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d85e:	4632      	mov	r2, r6
 800d860:	4623      	mov	r3, r4
 800d862:	a902      	add	r1, sp, #8
 800d864:	6800      	ldr	r0, [r0, #0]
 800d866:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d868:	9514      	str	r5, [sp, #80]	@ 0x50
 800d86a:	9401      	str	r4, [sp, #4]
 800d86c:	f002 fca0 	bl	80101b0 <__ssvfiscanf_r>
 800d870:	b01d      	add	sp, #116	@ 0x74
 800d872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d876:	b003      	add	sp, #12
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	0800d8a7 	.word	0x0800d8a7
 800d880:	20000030 	.word	0x20000030

0800d884 <__sread>:
 800d884:	b510      	push	{r4, lr}
 800d886:	460c      	mov	r4, r1
 800d888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d88c:	f000 f894 	bl	800d9b8 <_read_r>
 800d890:	2800      	cmp	r0, #0
 800d892:	bfab      	itete	ge
 800d894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d896:	89a3      	ldrhlt	r3, [r4, #12]
 800d898:	181b      	addge	r3, r3, r0
 800d89a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d89e:	bfac      	ite	ge
 800d8a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d8a2:	81a3      	strhlt	r3, [r4, #12]
 800d8a4:	bd10      	pop	{r4, pc}

0800d8a6 <__seofread>:
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	4770      	bx	lr

0800d8aa <__swrite>:
 800d8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ae:	461f      	mov	r7, r3
 800d8b0:	898b      	ldrh	r3, [r1, #12]
 800d8b2:	05db      	lsls	r3, r3, #23
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	460c      	mov	r4, r1
 800d8b8:	4616      	mov	r6, r2
 800d8ba:	d505      	bpl.n	800d8c8 <__swrite+0x1e>
 800d8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c0:	2302      	movs	r3, #2
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f000 f866 	bl	800d994 <_lseek_r>
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d8d2:	81a3      	strh	r3, [r4, #12]
 800d8d4:	4632      	mov	r2, r6
 800d8d6:	463b      	mov	r3, r7
 800d8d8:	4628      	mov	r0, r5
 800d8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8de:	f000 b88d 	b.w	800d9fc <_write_r>

0800d8e2 <__sseek>:
 800d8e2:	b510      	push	{r4, lr}
 800d8e4:	460c      	mov	r4, r1
 800d8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8ea:	f000 f853 	bl	800d994 <_lseek_r>
 800d8ee:	1c43      	adds	r3, r0, #1
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	bf15      	itete	ne
 800d8f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d8f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d8fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d8fe:	81a3      	strheq	r3, [r4, #12]
 800d900:	bf18      	it	ne
 800d902:	81a3      	strhne	r3, [r4, #12]
 800d904:	bd10      	pop	{r4, pc}

0800d906 <__sclose>:
 800d906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d90a:	f000 b833 	b.w	800d974 <_close_r>

0800d90e <memcmp>:
 800d90e:	b510      	push	{r4, lr}
 800d910:	3901      	subs	r1, #1
 800d912:	4402      	add	r2, r0
 800d914:	4290      	cmp	r0, r2
 800d916:	d101      	bne.n	800d91c <memcmp+0xe>
 800d918:	2000      	movs	r0, #0
 800d91a:	e005      	b.n	800d928 <memcmp+0x1a>
 800d91c:	7803      	ldrb	r3, [r0, #0]
 800d91e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d922:	42a3      	cmp	r3, r4
 800d924:	d001      	beq.n	800d92a <memcmp+0x1c>
 800d926:	1b18      	subs	r0, r3, r4
 800d928:	bd10      	pop	{r4, pc}
 800d92a:	3001      	adds	r0, #1
 800d92c:	e7f2      	b.n	800d914 <memcmp+0x6>

0800d92e <memset>:
 800d92e:	4402      	add	r2, r0
 800d930:	4603      	mov	r3, r0
 800d932:	4293      	cmp	r3, r2
 800d934:	d100      	bne.n	800d938 <memset+0xa>
 800d936:	4770      	bx	lr
 800d938:	f803 1b01 	strb.w	r1, [r3], #1
 800d93c:	e7f9      	b.n	800d932 <memset+0x4>

0800d93e <strstr>:
 800d93e:	780a      	ldrb	r2, [r1, #0]
 800d940:	b570      	push	{r4, r5, r6, lr}
 800d942:	b96a      	cbnz	r2, 800d960 <strstr+0x22>
 800d944:	bd70      	pop	{r4, r5, r6, pc}
 800d946:	429a      	cmp	r2, r3
 800d948:	d109      	bne.n	800d95e <strstr+0x20>
 800d94a:	460c      	mov	r4, r1
 800d94c:	4605      	mov	r5, r0
 800d94e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d952:	2b00      	cmp	r3, #0
 800d954:	d0f6      	beq.n	800d944 <strstr+0x6>
 800d956:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d95a:	429e      	cmp	r6, r3
 800d95c:	d0f7      	beq.n	800d94e <strstr+0x10>
 800d95e:	3001      	adds	r0, #1
 800d960:	7803      	ldrb	r3, [r0, #0]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1ef      	bne.n	800d946 <strstr+0x8>
 800d966:	4618      	mov	r0, r3
 800d968:	e7ec      	b.n	800d944 <strstr+0x6>
	...

0800d96c <_localeconv_r>:
 800d96c:	4800      	ldr	r0, [pc, #0]	@ (800d970 <_localeconv_r+0x4>)
 800d96e:	4770      	bx	lr
 800d970:	20000170 	.word	0x20000170

0800d974 <_close_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4d06      	ldr	r5, [pc, #24]	@ (800d990 <_close_r+0x1c>)
 800d978:	2300      	movs	r3, #0
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	602b      	str	r3, [r5, #0]
 800d980:	f7f6 f896 	bl	8003ab0 <_close>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_close_r+0x1a>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_close_r+0x1a>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	20001ca0 	.word	0x20001ca0

0800d994 <_lseek_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4d07      	ldr	r5, [pc, #28]	@ (800d9b4 <_lseek_r+0x20>)
 800d998:	4604      	mov	r4, r0
 800d99a:	4608      	mov	r0, r1
 800d99c:	4611      	mov	r1, r2
 800d99e:	2200      	movs	r2, #0
 800d9a0:	602a      	str	r2, [r5, #0]
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	f7f6 f8ab 	bl	8003afe <_lseek>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_lseek_r+0x1e>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_lseek_r+0x1e>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	20001ca0 	.word	0x20001ca0

0800d9b8 <_read_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	@ (800d9d8 <_read_r+0x20>)
 800d9bc:	4604      	mov	r4, r0
 800d9be:	4608      	mov	r0, r1
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	602a      	str	r2, [r5, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f7f6 f839 	bl	8003a3e <_read>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_read_r+0x1e>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_read_r+0x1e>
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	20001ca0 	.word	0x20001ca0

0800d9dc <_sbrk_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d06      	ldr	r5, [pc, #24]	@ (800d9f8 <_sbrk_r+0x1c>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	602b      	str	r3, [r5, #0]
 800d9e8:	f7f6 f896 	bl	8003b18 <_sbrk>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_sbrk_r+0x1a>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_sbrk_r+0x1a>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	20001ca0 	.word	0x20001ca0

0800d9fc <_write_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4d07      	ldr	r5, [pc, #28]	@ (800da1c <_write_r+0x20>)
 800da00:	4604      	mov	r4, r0
 800da02:	4608      	mov	r0, r1
 800da04:	4611      	mov	r1, r2
 800da06:	2200      	movs	r2, #0
 800da08:	602a      	str	r2, [r5, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	f7f6 f834 	bl	8003a78 <_write>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_write_r+0x1e>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_write_r+0x1e>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	20001ca0 	.word	0x20001ca0

0800da20 <__errno>:
 800da20:	4b01      	ldr	r3, [pc, #4]	@ (800da28 <__errno+0x8>)
 800da22:	6818      	ldr	r0, [r3, #0]
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	20000030 	.word	0x20000030

0800da2c <__libc_init_array>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	4d0d      	ldr	r5, [pc, #52]	@ (800da64 <__libc_init_array+0x38>)
 800da30:	4c0d      	ldr	r4, [pc, #52]	@ (800da68 <__libc_init_array+0x3c>)
 800da32:	1b64      	subs	r4, r4, r5
 800da34:	10a4      	asrs	r4, r4, #2
 800da36:	2600      	movs	r6, #0
 800da38:	42a6      	cmp	r6, r4
 800da3a:	d109      	bne.n	800da50 <__libc_init_array+0x24>
 800da3c:	4d0b      	ldr	r5, [pc, #44]	@ (800da6c <__libc_init_array+0x40>)
 800da3e:	4c0c      	ldr	r4, [pc, #48]	@ (800da70 <__libc_init_array+0x44>)
 800da40:	f005 fd56 	bl	80134f0 <_init>
 800da44:	1b64      	subs	r4, r4, r5
 800da46:	10a4      	asrs	r4, r4, #2
 800da48:	2600      	movs	r6, #0
 800da4a:	42a6      	cmp	r6, r4
 800da4c:	d105      	bne.n	800da5a <__libc_init_array+0x2e>
 800da4e:	bd70      	pop	{r4, r5, r6, pc}
 800da50:	f855 3b04 	ldr.w	r3, [r5], #4
 800da54:	4798      	blx	r3
 800da56:	3601      	adds	r6, #1
 800da58:	e7ee      	b.n	800da38 <__libc_init_array+0xc>
 800da5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800da5e:	4798      	blx	r3
 800da60:	3601      	adds	r6, #1
 800da62:	e7f2      	b.n	800da4a <__libc_init_array+0x1e>
 800da64:	08013be0 	.word	0x08013be0
 800da68:	08013be0 	.word	0x08013be0
 800da6c:	08013be0 	.word	0x08013be0
 800da70:	08013be4 	.word	0x08013be4

0800da74 <__retarget_lock_init_recursive>:
 800da74:	4770      	bx	lr

0800da76 <__retarget_lock_acquire_recursive>:
 800da76:	4770      	bx	lr

0800da78 <__retarget_lock_release_recursive>:
 800da78:	4770      	bx	lr

0800da7a <memcpy>:
 800da7a:	440a      	add	r2, r1
 800da7c:	4291      	cmp	r1, r2
 800da7e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800da82:	d100      	bne.n	800da86 <memcpy+0xc>
 800da84:	4770      	bx	lr
 800da86:	b510      	push	{r4, lr}
 800da88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da90:	4291      	cmp	r1, r2
 800da92:	d1f9      	bne.n	800da88 <memcpy+0xe>
 800da94:	bd10      	pop	{r4, pc}
	...

0800da98 <nanf>:
 800da98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800daa0 <nanf+0x8>
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop
 800daa0:	7fc00000 	.word	0x7fc00000

0800daa4 <quorem>:
 800daa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	6903      	ldr	r3, [r0, #16]
 800daaa:	690c      	ldr	r4, [r1, #16]
 800daac:	42a3      	cmp	r3, r4
 800daae:	4607      	mov	r7, r0
 800dab0:	db7e      	blt.n	800dbb0 <quorem+0x10c>
 800dab2:	3c01      	subs	r4, #1
 800dab4:	f101 0814 	add.w	r8, r1, #20
 800dab8:	00a3      	lsls	r3, r4, #2
 800daba:	f100 0514 	add.w	r5, r0, #20
 800dabe:	9300      	str	r3, [sp, #0]
 800dac0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800daca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dace:	3301      	adds	r3, #1
 800dad0:	429a      	cmp	r2, r3
 800dad2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dad6:	fbb2 f6f3 	udiv	r6, r2, r3
 800dada:	d32e      	bcc.n	800db3a <quorem+0x96>
 800dadc:	f04f 0a00 	mov.w	sl, #0
 800dae0:	46c4      	mov	ip, r8
 800dae2:	46ae      	mov	lr, r5
 800dae4:	46d3      	mov	fp, sl
 800dae6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800daea:	b298      	uxth	r0, r3
 800daec:	fb06 a000 	mla	r0, r6, r0, sl
 800daf0:	0c02      	lsrs	r2, r0, #16
 800daf2:	0c1b      	lsrs	r3, r3, #16
 800daf4:	fb06 2303 	mla	r3, r6, r3, r2
 800daf8:	f8de 2000 	ldr.w	r2, [lr]
 800dafc:	b280      	uxth	r0, r0
 800dafe:	b292      	uxth	r2, r2
 800db00:	1a12      	subs	r2, r2, r0
 800db02:	445a      	add	r2, fp
 800db04:	f8de 0000 	ldr.w	r0, [lr]
 800db08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db16:	b292      	uxth	r2, r2
 800db18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db1c:	45e1      	cmp	r9, ip
 800db1e:	f84e 2b04 	str.w	r2, [lr], #4
 800db22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db26:	d2de      	bcs.n	800dae6 <quorem+0x42>
 800db28:	9b00      	ldr	r3, [sp, #0]
 800db2a:	58eb      	ldr	r3, [r5, r3]
 800db2c:	b92b      	cbnz	r3, 800db3a <quorem+0x96>
 800db2e:	9b01      	ldr	r3, [sp, #4]
 800db30:	3b04      	subs	r3, #4
 800db32:	429d      	cmp	r5, r3
 800db34:	461a      	mov	r2, r3
 800db36:	d32f      	bcc.n	800db98 <quorem+0xf4>
 800db38:	613c      	str	r4, [r7, #16]
 800db3a:	4638      	mov	r0, r7
 800db3c:	f001 f912 	bl	800ed64 <__mcmp>
 800db40:	2800      	cmp	r0, #0
 800db42:	db25      	blt.n	800db90 <quorem+0xec>
 800db44:	4629      	mov	r1, r5
 800db46:	2000      	movs	r0, #0
 800db48:	f858 2b04 	ldr.w	r2, [r8], #4
 800db4c:	f8d1 c000 	ldr.w	ip, [r1]
 800db50:	fa1f fe82 	uxth.w	lr, r2
 800db54:	fa1f f38c 	uxth.w	r3, ip
 800db58:	eba3 030e 	sub.w	r3, r3, lr
 800db5c:	4403      	add	r3, r0
 800db5e:	0c12      	lsrs	r2, r2, #16
 800db60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800db64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800db68:	b29b      	uxth	r3, r3
 800db6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db6e:	45c1      	cmp	r9, r8
 800db70:	f841 3b04 	str.w	r3, [r1], #4
 800db74:	ea4f 4022 	mov.w	r0, r2, asr #16
 800db78:	d2e6      	bcs.n	800db48 <quorem+0xa4>
 800db7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db82:	b922      	cbnz	r2, 800db8e <quorem+0xea>
 800db84:	3b04      	subs	r3, #4
 800db86:	429d      	cmp	r5, r3
 800db88:	461a      	mov	r2, r3
 800db8a:	d30b      	bcc.n	800dba4 <quorem+0x100>
 800db8c:	613c      	str	r4, [r7, #16]
 800db8e:	3601      	adds	r6, #1
 800db90:	4630      	mov	r0, r6
 800db92:	b003      	add	sp, #12
 800db94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db98:	6812      	ldr	r2, [r2, #0]
 800db9a:	3b04      	subs	r3, #4
 800db9c:	2a00      	cmp	r2, #0
 800db9e:	d1cb      	bne.n	800db38 <quorem+0x94>
 800dba0:	3c01      	subs	r4, #1
 800dba2:	e7c6      	b.n	800db32 <quorem+0x8e>
 800dba4:	6812      	ldr	r2, [r2, #0]
 800dba6:	3b04      	subs	r3, #4
 800dba8:	2a00      	cmp	r2, #0
 800dbaa:	d1ef      	bne.n	800db8c <quorem+0xe8>
 800dbac:	3c01      	subs	r4, #1
 800dbae:	e7ea      	b.n	800db86 <quorem+0xe2>
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e7ee      	b.n	800db92 <quorem+0xee>
 800dbb4:	0000      	movs	r0, r0
	...

0800dbb8 <_dtoa_r>:
 800dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	69c7      	ldr	r7, [r0, #28]
 800dbbe:	b097      	sub	sp, #92	@ 0x5c
 800dbc0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dbc4:	ec55 4b10 	vmov	r4, r5, d0
 800dbc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800dbca:	9107      	str	r1, [sp, #28]
 800dbcc:	4681      	mov	r9, r0
 800dbce:	920c      	str	r2, [sp, #48]	@ 0x30
 800dbd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dbd2:	b97f      	cbnz	r7, 800dbf4 <_dtoa_r+0x3c>
 800dbd4:	2010      	movs	r0, #16
 800dbd6:	f7fe fe2b 	bl	800c830 <malloc>
 800dbda:	4602      	mov	r2, r0
 800dbdc:	f8c9 001c 	str.w	r0, [r9, #28]
 800dbe0:	b920      	cbnz	r0, 800dbec <_dtoa_r+0x34>
 800dbe2:	4ba9      	ldr	r3, [pc, #676]	@ (800de88 <_dtoa_r+0x2d0>)
 800dbe4:	21ef      	movs	r1, #239	@ 0xef
 800dbe6:	48a9      	ldr	r0, [pc, #676]	@ (800de8c <_dtoa_r+0x2d4>)
 800dbe8:	f002 fefa 	bl	80109e0 <__assert_func>
 800dbec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dbf0:	6007      	str	r7, [r0, #0]
 800dbf2:	60c7      	str	r7, [r0, #12]
 800dbf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dbf8:	6819      	ldr	r1, [r3, #0]
 800dbfa:	b159      	cbz	r1, 800dc14 <_dtoa_r+0x5c>
 800dbfc:	685a      	ldr	r2, [r3, #4]
 800dbfe:	604a      	str	r2, [r1, #4]
 800dc00:	2301      	movs	r3, #1
 800dc02:	4093      	lsls	r3, r2
 800dc04:	608b      	str	r3, [r1, #8]
 800dc06:	4648      	mov	r0, r9
 800dc08:	f000 fe30 	bl	800e86c <_Bfree>
 800dc0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]
 800dc14:	1e2b      	subs	r3, r5, #0
 800dc16:	bfb9      	ittee	lt
 800dc18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc1c:	9305      	strlt	r3, [sp, #20]
 800dc1e:	2300      	movge	r3, #0
 800dc20:	6033      	strge	r3, [r6, #0]
 800dc22:	9f05      	ldr	r7, [sp, #20]
 800dc24:	4b9a      	ldr	r3, [pc, #616]	@ (800de90 <_dtoa_r+0x2d8>)
 800dc26:	bfbc      	itt	lt
 800dc28:	2201      	movlt	r2, #1
 800dc2a:	6032      	strlt	r2, [r6, #0]
 800dc2c:	43bb      	bics	r3, r7
 800dc2e:	d112      	bne.n	800dc56 <_dtoa_r+0x9e>
 800dc30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc3c:	4323      	orrs	r3, r4
 800dc3e:	f000 855a 	beq.w	800e6f6 <_dtoa_r+0xb3e>
 800dc42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dea4 <_dtoa_r+0x2ec>
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f000 855c 	beq.w	800e706 <_dtoa_r+0xb4e>
 800dc4e:	f10a 0303 	add.w	r3, sl, #3
 800dc52:	f000 bd56 	b.w	800e702 <_dtoa_r+0xb4a>
 800dc56:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	ec51 0b17 	vmov	r0, r1, d7
 800dc60:	2300      	movs	r3, #0
 800dc62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dc66:	f7f2 ff4f 	bl	8000b08 <__aeabi_dcmpeq>
 800dc6a:	4680      	mov	r8, r0
 800dc6c:	b158      	cbz	r0, 800dc86 <_dtoa_r+0xce>
 800dc6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dc70:	2301      	movs	r3, #1
 800dc72:	6013      	str	r3, [r2, #0]
 800dc74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dc76:	b113      	cbz	r3, 800dc7e <_dtoa_r+0xc6>
 800dc78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800dc7a:	4b86      	ldr	r3, [pc, #536]	@ (800de94 <_dtoa_r+0x2dc>)
 800dc7c:	6013      	str	r3, [r2, #0]
 800dc7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800dea8 <_dtoa_r+0x2f0>
 800dc82:	f000 bd40 	b.w	800e706 <_dtoa_r+0xb4e>
 800dc86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dc8a:	aa14      	add	r2, sp, #80	@ 0x50
 800dc8c:	a915      	add	r1, sp, #84	@ 0x54
 800dc8e:	4648      	mov	r0, r9
 800dc90:	f001 f988 	bl	800efa4 <__d2b>
 800dc94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dc98:	9002      	str	r0, [sp, #8]
 800dc9a:	2e00      	cmp	r6, #0
 800dc9c:	d078      	beq.n	800dd90 <_dtoa_r+0x1d8>
 800dc9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dca0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800dca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dcac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dcb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dcb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dcb8:	4619      	mov	r1, r3
 800dcba:	2200      	movs	r2, #0
 800dcbc:	4b76      	ldr	r3, [pc, #472]	@ (800de98 <_dtoa_r+0x2e0>)
 800dcbe:	f7f2 fb03 	bl	80002c8 <__aeabi_dsub>
 800dcc2:	a36b      	add	r3, pc, #428	@ (adr r3, 800de70 <_dtoa_r+0x2b8>)
 800dcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc8:	f7f2 fcb6 	bl	8000638 <__aeabi_dmul>
 800dccc:	a36a      	add	r3, pc, #424	@ (adr r3, 800de78 <_dtoa_r+0x2c0>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	f7f2 fafb 	bl	80002cc <__adddf3>
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	4630      	mov	r0, r6
 800dcda:	460d      	mov	r5, r1
 800dcdc:	f7f2 fc42 	bl	8000564 <__aeabi_i2d>
 800dce0:	a367      	add	r3, pc, #412	@ (adr r3, 800de80 <_dtoa_r+0x2c8>)
 800dce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce6:	f7f2 fca7 	bl	8000638 <__aeabi_dmul>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 faeb 	bl	80002cc <__adddf3>
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	460d      	mov	r5, r1
 800dcfa:	f7f2 ff4d 	bl	8000b98 <__aeabi_d2iz>
 800dcfe:	2200      	movs	r2, #0
 800dd00:	4607      	mov	r7, r0
 800dd02:	2300      	movs	r3, #0
 800dd04:	4620      	mov	r0, r4
 800dd06:	4629      	mov	r1, r5
 800dd08:	f7f2 ff08 	bl	8000b1c <__aeabi_dcmplt>
 800dd0c:	b140      	cbz	r0, 800dd20 <_dtoa_r+0x168>
 800dd0e:	4638      	mov	r0, r7
 800dd10:	f7f2 fc28 	bl	8000564 <__aeabi_i2d>
 800dd14:	4622      	mov	r2, r4
 800dd16:	462b      	mov	r3, r5
 800dd18:	f7f2 fef6 	bl	8000b08 <__aeabi_dcmpeq>
 800dd1c:	b900      	cbnz	r0, 800dd20 <_dtoa_r+0x168>
 800dd1e:	3f01      	subs	r7, #1
 800dd20:	2f16      	cmp	r7, #22
 800dd22:	d852      	bhi.n	800ddca <_dtoa_r+0x212>
 800dd24:	4b5d      	ldr	r3, [pc, #372]	@ (800de9c <_dtoa_r+0x2e4>)
 800dd26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd32:	f7f2 fef3 	bl	8000b1c <__aeabi_dcmplt>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d049      	beq.n	800ddce <_dtoa_r+0x216>
 800dd3a:	3f01      	subs	r7, #1
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800dd40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd42:	1b9b      	subs	r3, r3, r6
 800dd44:	1e5a      	subs	r2, r3, #1
 800dd46:	bf45      	ittet	mi
 800dd48:	f1c3 0301 	rsbmi	r3, r3, #1
 800dd4c:	9300      	strmi	r3, [sp, #0]
 800dd4e:	2300      	movpl	r3, #0
 800dd50:	2300      	movmi	r3, #0
 800dd52:	9206      	str	r2, [sp, #24]
 800dd54:	bf54      	ite	pl
 800dd56:	9300      	strpl	r3, [sp, #0]
 800dd58:	9306      	strmi	r3, [sp, #24]
 800dd5a:	2f00      	cmp	r7, #0
 800dd5c:	db39      	blt.n	800ddd2 <_dtoa_r+0x21a>
 800dd5e:	9b06      	ldr	r3, [sp, #24]
 800dd60:	970d      	str	r7, [sp, #52]	@ 0x34
 800dd62:	443b      	add	r3, r7
 800dd64:	9306      	str	r3, [sp, #24]
 800dd66:	2300      	movs	r3, #0
 800dd68:	9308      	str	r3, [sp, #32]
 800dd6a:	9b07      	ldr	r3, [sp, #28]
 800dd6c:	2b09      	cmp	r3, #9
 800dd6e:	d863      	bhi.n	800de38 <_dtoa_r+0x280>
 800dd70:	2b05      	cmp	r3, #5
 800dd72:	bfc4      	itt	gt
 800dd74:	3b04      	subgt	r3, #4
 800dd76:	9307      	strgt	r3, [sp, #28]
 800dd78:	9b07      	ldr	r3, [sp, #28]
 800dd7a:	f1a3 0302 	sub.w	r3, r3, #2
 800dd7e:	bfcc      	ite	gt
 800dd80:	2400      	movgt	r4, #0
 800dd82:	2401      	movle	r4, #1
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	d863      	bhi.n	800de50 <_dtoa_r+0x298>
 800dd88:	e8df f003 	tbb	[pc, r3]
 800dd8c:	2b375452 	.word	0x2b375452
 800dd90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dd94:	441e      	add	r6, r3
 800dd96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dd9a:	2b20      	cmp	r3, #32
 800dd9c:	bfc1      	itttt	gt
 800dd9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dda2:	409f      	lslgt	r7, r3
 800dda4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dda8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ddac:	bfd6      	itet	le
 800ddae:	f1c3 0320 	rsble	r3, r3, #32
 800ddb2:	ea47 0003 	orrgt.w	r0, r7, r3
 800ddb6:	fa04 f003 	lslle.w	r0, r4, r3
 800ddba:	f7f2 fbc3 	bl	8000544 <__aeabi_ui2d>
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ddc4:	3e01      	subs	r6, #1
 800ddc6:	9212      	str	r2, [sp, #72]	@ 0x48
 800ddc8:	e776      	b.n	800dcb8 <_dtoa_r+0x100>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e7b7      	b.n	800dd3e <_dtoa_r+0x186>
 800ddce:	9010      	str	r0, [sp, #64]	@ 0x40
 800ddd0:	e7b6      	b.n	800dd40 <_dtoa_r+0x188>
 800ddd2:	9b00      	ldr	r3, [sp, #0]
 800ddd4:	1bdb      	subs	r3, r3, r7
 800ddd6:	9300      	str	r3, [sp, #0]
 800ddd8:	427b      	negs	r3, r7
 800ddda:	9308      	str	r3, [sp, #32]
 800dddc:	2300      	movs	r3, #0
 800ddde:	930d      	str	r3, [sp, #52]	@ 0x34
 800dde0:	e7c3      	b.n	800dd6a <_dtoa_r+0x1b2>
 800dde2:	2301      	movs	r3, #1
 800dde4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dde6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dde8:	eb07 0b03 	add.w	fp, r7, r3
 800ddec:	f10b 0301 	add.w	r3, fp, #1
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	9303      	str	r3, [sp, #12]
 800ddf4:	bfb8      	it	lt
 800ddf6:	2301      	movlt	r3, #1
 800ddf8:	e006      	b.n	800de08 <_dtoa_r+0x250>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de00:	2b00      	cmp	r3, #0
 800de02:	dd28      	ble.n	800de56 <_dtoa_r+0x29e>
 800de04:	469b      	mov	fp, r3
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800de0c:	2100      	movs	r1, #0
 800de0e:	2204      	movs	r2, #4
 800de10:	f102 0514 	add.w	r5, r2, #20
 800de14:	429d      	cmp	r5, r3
 800de16:	d926      	bls.n	800de66 <_dtoa_r+0x2ae>
 800de18:	6041      	str	r1, [r0, #4]
 800de1a:	4648      	mov	r0, r9
 800de1c:	f000 fce6 	bl	800e7ec <_Balloc>
 800de20:	4682      	mov	sl, r0
 800de22:	2800      	cmp	r0, #0
 800de24:	d142      	bne.n	800deac <_dtoa_r+0x2f4>
 800de26:	4b1e      	ldr	r3, [pc, #120]	@ (800dea0 <_dtoa_r+0x2e8>)
 800de28:	4602      	mov	r2, r0
 800de2a:	f240 11af 	movw	r1, #431	@ 0x1af
 800de2e:	e6da      	b.n	800dbe6 <_dtoa_r+0x2e>
 800de30:	2300      	movs	r3, #0
 800de32:	e7e3      	b.n	800ddfc <_dtoa_r+0x244>
 800de34:	2300      	movs	r3, #0
 800de36:	e7d5      	b.n	800dde4 <_dtoa_r+0x22c>
 800de38:	2401      	movs	r4, #1
 800de3a:	2300      	movs	r3, #0
 800de3c:	9307      	str	r3, [sp, #28]
 800de3e:	9409      	str	r4, [sp, #36]	@ 0x24
 800de40:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800de44:	2200      	movs	r2, #0
 800de46:	f8cd b00c 	str.w	fp, [sp, #12]
 800de4a:	2312      	movs	r3, #18
 800de4c:	920c      	str	r2, [sp, #48]	@ 0x30
 800de4e:	e7db      	b.n	800de08 <_dtoa_r+0x250>
 800de50:	2301      	movs	r3, #1
 800de52:	9309      	str	r3, [sp, #36]	@ 0x24
 800de54:	e7f4      	b.n	800de40 <_dtoa_r+0x288>
 800de56:	f04f 0b01 	mov.w	fp, #1
 800de5a:	f8cd b00c 	str.w	fp, [sp, #12]
 800de5e:	465b      	mov	r3, fp
 800de60:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800de64:	e7d0      	b.n	800de08 <_dtoa_r+0x250>
 800de66:	3101      	adds	r1, #1
 800de68:	0052      	lsls	r2, r2, #1
 800de6a:	e7d1      	b.n	800de10 <_dtoa_r+0x258>
 800de6c:	f3af 8000 	nop.w
 800de70:	636f4361 	.word	0x636f4361
 800de74:	3fd287a7 	.word	0x3fd287a7
 800de78:	8b60c8b3 	.word	0x8b60c8b3
 800de7c:	3fc68a28 	.word	0x3fc68a28
 800de80:	509f79fb 	.word	0x509f79fb
 800de84:	3fd34413 	.word	0x3fd34413
 800de88:	08013724 	.word	0x08013724
 800de8c:	0801373b 	.word	0x0801373b
 800de90:	7ff00000 	.word	0x7ff00000
 800de94:	08013827 	.word	0x08013827
 800de98:	3ff80000 	.word	0x3ff80000
 800de9c:	08013908 	.word	0x08013908
 800dea0:	08013793 	.word	0x08013793
 800dea4:	08013720 	.word	0x08013720
 800dea8:	08013826 	.word	0x08013826
 800deac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800deb0:	6018      	str	r0, [r3, #0]
 800deb2:	9b03      	ldr	r3, [sp, #12]
 800deb4:	2b0e      	cmp	r3, #14
 800deb6:	f200 80a1 	bhi.w	800dffc <_dtoa_r+0x444>
 800deba:	2c00      	cmp	r4, #0
 800debc:	f000 809e 	beq.w	800dffc <_dtoa_r+0x444>
 800dec0:	2f00      	cmp	r7, #0
 800dec2:	dd33      	ble.n	800df2c <_dtoa_r+0x374>
 800dec4:	4b9c      	ldr	r3, [pc, #624]	@ (800e138 <_dtoa_r+0x580>)
 800dec6:	f007 020f 	and.w	r2, r7, #15
 800deca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dece:	ed93 7b00 	vldr	d7, [r3]
 800ded2:	05f8      	lsls	r0, r7, #23
 800ded4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ded8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dedc:	d516      	bpl.n	800df0c <_dtoa_r+0x354>
 800dede:	4b97      	ldr	r3, [pc, #604]	@ (800e13c <_dtoa_r+0x584>)
 800dee0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dee4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dee8:	f7f2 fcd0 	bl	800088c <__aeabi_ddiv>
 800deec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800def0:	f004 040f 	and.w	r4, r4, #15
 800def4:	2603      	movs	r6, #3
 800def6:	4d91      	ldr	r5, [pc, #580]	@ (800e13c <_dtoa_r+0x584>)
 800def8:	b954      	cbnz	r4, 800df10 <_dtoa_r+0x358>
 800defa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800defe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df02:	f7f2 fcc3 	bl	800088c <__aeabi_ddiv>
 800df06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df0a:	e028      	b.n	800df5e <_dtoa_r+0x3a6>
 800df0c:	2602      	movs	r6, #2
 800df0e:	e7f2      	b.n	800def6 <_dtoa_r+0x33e>
 800df10:	07e1      	lsls	r1, r4, #31
 800df12:	d508      	bpl.n	800df26 <_dtoa_r+0x36e>
 800df14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800df18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df1c:	f7f2 fb8c 	bl	8000638 <__aeabi_dmul>
 800df20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800df24:	3601      	adds	r6, #1
 800df26:	1064      	asrs	r4, r4, #1
 800df28:	3508      	adds	r5, #8
 800df2a:	e7e5      	b.n	800def8 <_dtoa_r+0x340>
 800df2c:	f000 80af 	beq.w	800e08e <_dtoa_r+0x4d6>
 800df30:	427c      	negs	r4, r7
 800df32:	4b81      	ldr	r3, [pc, #516]	@ (800e138 <_dtoa_r+0x580>)
 800df34:	4d81      	ldr	r5, [pc, #516]	@ (800e13c <_dtoa_r+0x584>)
 800df36:	f004 020f 	and.w	r2, r4, #15
 800df3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800df46:	f7f2 fb77 	bl	8000638 <__aeabi_dmul>
 800df4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df4e:	1124      	asrs	r4, r4, #4
 800df50:	2300      	movs	r3, #0
 800df52:	2602      	movs	r6, #2
 800df54:	2c00      	cmp	r4, #0
 800df56:	f040 808f 	bne.w	800e078 <_dtoa_r+0x4c0>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d1d3      	bne.n	800df06 <_dtoa_r+0x34e>
 800df5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 8094 	beq.w	800e092 <_dtoa_r+0x4da>
 800df6a:	4b75      	ldr	r3, [pc, #468]	@ (800e140 <_dtoa_r+0x588>)
 800df6c:	2200      	movs	r2, #0
 800df6e:	4620      	mov	r0, r4
 800df70:	4629      	mov	r1, r5
 800df72:	f7f2 fdd3 	bl	8000b1c <__aeabi_dcmplt>
 800df76:	2800      	cmp	r0, #0
 800df78:	f000 808b 	beq.w	800e092 <_dtoa_r+0x4da>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	f000 8087 	beq.w	800e092 <_dtoa_r+0x4da>
 800df84:	f1bb 0f00 	cmp.w	fp, #0
 800df88:	dd34      	ble.n	800dff4 <_dtoa_r+0x43c>
 800df8a:	4620      	mov	r0, r4
 800df8c:	4b6d      	ldr	r3, [pc, #436]	@ (800e144 <_dtoa_r+0x58c>)
 800df8e:	2200      	movs	r2, #0
 800df90:	4629      	mov	r1, r5
 800df92:	f7f2 fb51 	bl	8000638 <__aeabi_dmul>
 800df96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df9a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800df9e:	3601      	adds	r6, #1
 800dfa0:	465c      	mov	r4, fp
 800dfa2:	4630      	mov	r0, r6
 800dfa4:	f7f2 fade 	bl	8000564 <__aeabi_i2d>
 800dfa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfac:	f7f2 fb44 	bl	8000638 <__aeabi_dmul>
 800dfb0:	4b65      	ldr	r3, [pc, #404]	@ (800e148 <_dtoa_r+0x590>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	f7f2 f98a 	bl	80002cc <__adddf3>
 800dfb8:	4605      	mov	r5, r0
 800dfba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dfbe:	2c00      	cmp	r4, #0
 800dfc0:	d16a      	bne.n	800e098 <_dtoa_r+0x4e0>
 800dfc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfc6:	4b61      	ldr	r3, [pc, #388]	@ (800e14c <_dtoa_r+0x594>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f7f2 f97d 	bl	80002c8 <__aeabi_dsub>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfd6:	462a      	mov	r2, r5
 800dfd8:	4633      	mov	r3, r6
 800dfda:	f7f2 fdbd 	bl	8000b58 <__aeabi_dcmpgt>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	f040 8298 	bne.w	800e514 <_dtoa_r+0x95c>
 800dfe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfe8:	462a      	mov	r2, r5
 800dfea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dfee:	f7f2 fd95 	bl	8000b1c <__aeabi_dcmplt>
 800dff2:	bb38      	cbnz	r0, 800e044 <_dtoa_r+0x48c>
 800dff4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800dff8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800dffc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800dffe:	2b00      	cmp	r3, #0
 800e000:	f2c0 8157 	blt.w	800e2b2 <_dtoa_r+0x6fa>
 800e004:	2f0e      	cmp	r7, #14
 800e006:	f300 8154 	bgt.w	800e2b2 <_dtoa_r+0x6fa>
 800e00a:	4b4b      	ldr	r3, [pc, #300]	@ (800e138 <_dtoa_r+0x580>)
 800e00c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e010:	ed93 7b00 	vldr	d7, [r3]
 800e014:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e016:	2b00      	cmp	r3, #0
 800e018:	ed8d 7b00 	vstr	d7, [sp]
 800e01c:	f280 80e5 	bge.w	800e1ea <_dtoa_r+0x632>
 800e020:	9b03      	ldr	r3, [sp, #12]
 800e022:	2b00      	cmp	r3, #0
 800e024:	f300 80e1 	bgt.w	800e1ea <_dtoa_r+0x632>
 800e028:	d10c      	bne.n	800e044 <_dtoa_r+0x48c>
 800e02a:	4b48      	ldr	r3, [pc, #288]	@ (800e14c <_dtoa_r+0x594>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	ec51 0b17 	vmov	r0, r1, d7
 800e032:	f7f2 fb01 	bl	8000638 <__aeabi_dmul>
 800e036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e03a:	f7f2 fd83 	bl	8000b44 <__aeabi_dcmpge>
 800e03e:	2800      	cmp	r0, #0
 800e040:	f000 8266 	beq.w	800e510 <_dtoa_r+0x958>
 800e044:	2400      	movs	r4, #0
 800e046:	4625      	mov	r5, r4
 800e048:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e04a:	4656      	mov	r6, sl
 800e04c:	ea6f 0803 	mvn.w	r8, r3
 800e050:	2700      	movs	r7, #0
 800e052:	4621      	mov	r1, r4
 800e054:	4648      	mov	r0, r9
 800e056:	f000 fc09 	bl	800e86c <_Bfree>
 800e05a:	2d00      	cmp	r5, #0
 800e05c:	f000 80bd 	beq.w	800e1da <_dtoa_r+0x622>
 800e060:	b12f      	cbz	r7, 800e06e <_dtoa_r+0x4b6>
 800e062:	42af      	cmp	r7, r5
 800e064:	d003      	beq.n	800e06e <_dtoa_r+0x4b6>
 800e066:	4639      	mov	r1, r7
 800e068:	4648      	mov	r0, r9
 800e06a:	f000 fbff 	bl	800e86c <_Bfree>
 800e06e:	4629      	mov	r1, r5
 800e070:	4648      	mov	r0, r9
 800e072:	f000 fbfb 	bl	800e86c <_Bfree>
 800e076:	e0b0      	b.n	800e1da <_dtoa_r+0x622>
 800e078:	07e2      	lsls	r2, r4, #31
 800e07a:	d505      	bpl.n	800e088 <_dtoa_r+0x4d0>
 800e07c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e080:	f7f2 fada 	bl	8000638 <__aeabi_dmul>
 800e084:	3601      	adds	r6, #1
 800e086:	2301      	movs	r3, #1
 800e088:	1064      	asrs	r4, r4, #1
 800e08a:	3508      	adds	r5, #8
 800e08c:	e762      	b.n	800df54 <_dtoa_r+0x39c>
 800e08e:	2602      	movs	r6, #2
 800e090:	e765      	b.n	800df5e <_dtoa_r+0x3a6>
 800e092:	9c03      	ldr	r4, [sp, #12]
 800e094:	46b8      	mov	r8, r7
 800e096:	e784      	b.n	800dfa2 <_dtoa_r+0x3ea>
 800e098:	4b27      	ldr	r3, [pc, #156]	@ (800e138 <_dtoa_r+0x580>)
 800e09a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e09c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e0a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0a4:	4454      	add	r4, sl
 800e0a6:	2900      	cmp	r1, #0
 800e0a8:	d054      	beq.n	800e154 <_dtoa_r+0x59c>
 800e0aa:	4929      	ldr	r1, [pc, #164]	@ (800e150 <_dtoa_r+0x598>)
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	f7f2 fbed 	bl	800088c <__aeabi_ddiv>
 800e0b2:	4633      	mov	r3, r6
 800e0b4:	462a      	mov	r2, r5
 800e0b6:	f7f2 f907 	bl	80002c8 <__aeabi_dsub>
 800e0ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e0be:	4656      	mov	r6, sl
 800e0c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0c4:	f7f2 fd68 	bl	8000b98 <__aeabi_d2iz>
 800e0c8:	4605      	mov	r5, r0
 800e0ca:	f7f2 fa4b 	bl	8000564 <__aeabi_i2d>
 800e0ce:	4602      	mov	r2, r0
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0d6:	f7f2 f8f7 	bl	80002c8 <__aeabi_dsub>
 800e0da:	3530      	adds	r5, #48	@ 0x30
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e0e4:	f806 5b01 	strb.w	r5, [r6], #1
 800e0e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e0ec:	f7f2 fd16 	bl	8000b1c <__aeabi_dcmplt>
 800e0f0:	2800      	cmp	r0, #0
 800e0f2:	d172      	bne.n	800e1da <_dtoa_r+0x622>
 800e0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0f8:	4911      	ldr	r1, [pc, #68]	@ (800e140 <_dtoa_r+0x588>)
 800e0fa:	2000      	movs	r0, #0
 800e0fc:	f7f2 f8e4 	bl	80002c8 <__aeabi_dsub>
 800e100:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e104:	f7f2 fd0a 	bl	8000b1c <__aeabi_dcmplt>
 800e108:	2800      	cmp	r0, #0
 800e10a:	f040 80b4 	bne.w	800e276 <_dtoa_r+0x6be>
 800e10e:	42a6      	cmp	r6, r4
 800e110:	f43f af70 	beq.w	800dff4 <_dtoa_r+0x43c>
 800e114:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e118:	4b0a      	ldr	r3, [pc, #40]	@ (800e144 <_dtoa_r+0x58c>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	f7f2 fa8c 	bl	8000638 <__aeabi_dmul>
 800e120:	4b08      	ldr	r3, [pc, #32]	@ (800e144 <_dtoa_r+0x58c>)
 800e122:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e126:	2200      	movs	r2, #0
 800e128:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e12c:	f7f2 fa84 	bl	8000638 <__aeabi_dmul>
 800e130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e134:	e7c4      	b.n	800e0c0 <_dtoa_r+0x508>
 800e136:	bf00      	nop
 800e138:	08013908 	.word	0x08013908
 800e13c:	080138e0 	.word	0x080138e0
 800e140:	3ff00000 	.word	0x3ff00000
 800e144:	40240000 	.word	0x40240000
 800e148:	401c0000 	.word	0x401c0000
 800e14c:	40140000 	.word	0x40140000
 800e150:	3fe00000 	.word	0x3fe00000
 800e154:	4631      	mov	r1, r6
 800e156:	4628      	mov	r0, r5
 800e158:	f7f2 fa6e 	bl	8000638 <__aeabi_dmul>
 800e15c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e160:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e162:	4656      	mov	r6, sl
 800e164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e168:	f7f2 fd16 	bl	8000b98 <__aeabi_d2iz>
 800e16c:	4605      	mov	r5, r0
 800e16e:	f7f2 f9f9 	bl	8000564 <__aeabi_i2d>
 800e172:	4602      	mov	r2, r0
 800e174:	460b      	mov	r3, r1
 800e176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e17a:	f7f2 f8a5 	bl	80002c8 <__aeabi_dsub>
 800e17e:	3530      	adds	r5, #48	@ 0x30
 800e180:	f806 5b01 	strb.w	r5, [r6], #1
 800e184:	4602      	mov	r2, r0
 800e186:	460b      	mov	r3, r1
 800e188:	42a6      	cmp	r6, r4
 800e18a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e18e:	f04f 0200 	mov.w	r2, #0
 800e192:	d124      	bne.n	800e1de <_dtoa_r+0x626>
 800e194:	4baf      	ldr	r3, [pc, #700]	@ (800e454 <_dtoa_r+0x89c>)
 800e196:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e19a:	f7f2 f897 	bl	80002cc <__adddf3>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1a6:	f7f2 fcd7 	bl	8000b58 <__aeabi_dcmpgt>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d163      	bne.n	800e276 <_dtoa_r+0x6be>
 800e1ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e1b2:	49a8      	ldr	r1, [pc, #672]	@ (800e454 <_dtoa_r+0x89c>)
 800e1b4:	2000      	movs	r0, #0
 800e1b6:	f7f2 f887 	bl	80002c8 <__aeabi_dsub>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	460b      	mov	r3, r1
 800e1be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1c2:	f7f2 fcab 	bl	8000b1c <__aeabi_dcmplt>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	f43f af14 	beq.w	800dff4 <_dtoa_r+0x43c>
 800e1cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e1ce:	1e73      	subs	r3, r6, #1
 800e1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e1d6:	2b30      	cmp	r3, #48	@ 0x30
 800e1d8:	d0f8      	beq.n	800e1cc <_dtoa_r+0x614>
 800e1da:	4647      	mov	r7, r8
 800e1dc:	e03b      	b.n	800e256 <_dtoa_r+0x69e>
 800e1de:	4b9e      	ldr	r3, [pc, #632]	@ (800e458 <_dtoa_r+0x8a0>)
 800e1e0:	f7f2 fa2a 	bl	8000638 <__aeabi_dmul>
 800e1e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1e8:	e7bc      	b.n	800e164 <_dtoa_r+0x5ac>
 800e1ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e1ee:	4656      	mov	r6, sl
 800e1f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f7f2 fb48 	bl	800088c <__aeabi_ddiv>
 800e1fc:	f7f2 fccc 	bl	8000b98 <__aeabi_d2iz>
 800e200:	4680      	mov	r8, r0
 800e202:	f7f2 f9af 	bl	8000564 <__aeabi_i2d>
 800e206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e20a:	f7f2 fa15 	bl	8000638 <__aeabi_dmul>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4620      	mov	r0, r4
 800e214:	4629      	mov	r1, r5
 800e216:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e21a:	f7f2 f855 	bl	80002c8 <__aeabi_dsub>
 800e21e:	f806 4b01 	strb.w	r4, [r6], #1
 800e222:	9d03      	ldr	r5, [sp, #12]
 800e224:	eba6 040a 	sub.w	r4, r6, sl
 800e228:	42a5      	cmp	r5, r4
 800e22a:	4602      	mov	r2, r0
 800e22c:	460b      	mov	r3, r1
 800e22e:	d133      	bne.n	800e298 <_dtoa_r+0x6e0>
 800e230:	f7f2 f84c 	bl	80002cc <__adddf3>
 800e234:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e238:	4604      	mov	r4, r0
 800e23a:	460d      	mov	r5, r1
 800e23c:	f7f2 fc8c 	bl	8000b58 <__aeabi_dcmpgt>
 800e240:	b9c0      	cbnz	r0, 800e274 <_dtoa_r+0x6bc>
 800e242:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e246:	4620      	mov	r0, r4
 800e248:	4629      	mov	r1, r5
 800e24a:	f7f2 fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 800e24e:	b110      	cbz	r0, 800e256 <_dtoa_r+0x69e>
 800e250:	f018 0f01 	tst.w	r8, #1
 800e254:	d10e      	bne.n	800e274 <_dtoa_r+0x6bc>
 800e256:	9902      	ldr	r1, [sp, #8]
 800e258:	4648      	mov	r0, r9
 800e25a:	f000 fb07 	bl	800e86c <_Bfree>
 800e25e:	2300      	movs	r3, #0
 800e260:	7033      	strb	r3, [r6, #0]
 800e262:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e264:	3701      	adds	r7, #1
 800e266:	601f      	str	r7, [r3, #0]
 800e268:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 824b 	beq.w	800e706 <_dtoa_r+0xb4e>
 800e270:	601e      	str	r6, [r3, #0]
 800e272:	e248      	b.n	800e706 <_dtoa_r+0xb4e>
 800e274:	46b8      	mov	r8, r7
 800e276:	4633      	mov	r3, r6
 800e278:	461e      	mov	r6, r3
 800e27a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e27e:	2a39      	cmp	r2, #57	@ 0x39
 800e280:	d106      	bne.n	800e290 <_dtoa_r+0x6d8>
 800e282:	459a      	cmp	sl, r3
 800e284:	d1f8      	bne.n	800e278 <_dtoa_r+0x6c0>
 800e286:	2230      	movs	r2, #48	@ 0x30
 800e288:	f108 0801 	add.w	r8, r8, #1
 800e28c:	f88a 2000 	strb.w	r2, [sl]
 800e290:	781a      	ldrb	r2, [r3, #0]
 800e292:	3201      	adds	r2, #1
 800e294:	701a      	strb	r2, [r3, #0]
 800e296:	e7a0      	b.n	800e1da <_dtoa_r+0x622>
 800e298:	4b6f      	ldr	r3, [pc, #444]	@ (800e458 <_dtoa_r+0x8a0>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	f7f2 f9cc 	bl	8000638 <__aeabi_dmul>
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	460d      	mov	r5, r1
 800e2a8:	f7f2 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	d09f      	beq.n	800e1f0 <_dtoa_r+0x638>
 800e2b0:	e7d1      	b.n	800e256 <_dtoa_r+0x69e>
 800e2b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2b4:	2a00      	cmp	r2, #0
 800e2b6:	f000 80ea 	beq.w	800e48e <_dtoa_r+0x8d6>
 800e2ba:	9a07      	ldr	r2, [sp, #28]
 800e2bc:	2a01      	cmp	r2, #1
 800e2be:	f300 80cd 	bgt.w	800e45c <_dtoa_r+0x8a4>
 800e2c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e2c4:	2a00      	cmp	r2, #0
 800e2c6:	f000 80c1 	beq.w	800e44c <_dtoa_r+0x894>
 800e2ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e2ce:	9c08      	ldr	r4, [sp, #32]
 800e2d0:	9e00      	ldr	r6, [sp, #0]
 800e2d2:	9a00      	ldr	r2, [sp, #0]
 800e2d4:	441a      	add	r2, r3
 800e2d6:	9200      	str	r2, [sp, #0]
 800e2d8:	9a06      	ldr	r2, [sp, #24]
 800e2da:	2101      	movs	r1, #1
 800e2dc:	441a      	add	r2, r3
 800e2de:	4648      	mov	r0, r9
 800e2e0:	9206      	str	r2, [sp, #24]
 800e2e2:	f000 fbc1 	bl	800ea68 <__i2b>
 800e2e6:	4605      	mov	r5, r0
 800e2e8:	b166      	cbz	r6, 800e304 <_dtoa_r+0x74c>
 800e2ea:	9b06      	ldr	r3, [sp, #24]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dd09      	ble.n	800e304 <_dtoa_r+0x74c>
 800e2f0:	42b3      	cmp	r3, r6
 800e2f2:	9a00      	ldr	r2, [sp, #0]
 800e2f4:	bfa8      	it	ge
 800e2f6:	4633      	movge	r3, r6
 800e2f8:	1ad2      	subs	r2, r2, r3
 800e2fa:	9200      	str	r2, [sp, #0]
 800e2fc:	9a06      	ldr	r2, [sp, #24]
 800e2fe:	1af6      	subs	r6, r6, r3
 800e300:	1ad3      	subs	r3, r2, r3
 800e302:	9306      	str	r3, [sp, #24]
 800e304:	9b08      	ldr	r3, [sp, #32]
 800e306:	b30b      	cbz	r3, 800e34c <_dtoa_r+0x794>
 800e308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	f000 80c6 	beq.w	800e49c <_dtoa_r+0x8e4>
 800e310:	2c00      	cmp	r4, #0
 800e312:	f000 80c0 	beq.w	800e496 <_dtoa_r+0x8de>
 800e316:	4629      	mov	r1, r5
 800e318:	4622      	mov	r2, r4
 800e31a:	4648      	mov	r0, r9
 800e31c:	f000 fc5c 	bl	800ebd8 <__pow5mult>
 800e320:	9a02      	ldr	r2, [sp, #8]
 800e322:	4601      	mov	r1, r0
 800e324:	4605      	mov	r5, r0
 800e326:	4648      	mov	r0, r9
 800e328:	f000 fbb4 	bl	800ea94 <__multiply>
 800e32c:	9902      	ldr	r1, [sp, #8]
 800e32e:	4680      	mov	r8, r0
 800e330:	4648      	mov	r0, r9
 800e332:	f000 fa9b 	bl	800e86c <_Bfree>
 800e336:	9b08      	ldr	r3, [sp, #32]
 800e338:	1b1b      	subs	r3, r3, r4
 800e33a:	9308      	str	r3, [sp, #32]
 800e33c:	f000 80b1 	beq.w	800e4a2 <_dtoa_r+0x8ea>
 800e340:	9a08      	ldr	r2, [sp, #32]
 800e342:	4641      	mov	r1, r8
 800e344:	4648      	mov	r0, r9
 800e346:	f000 fc47 	bl	800ebd8 <__pow5mult>
 800e34a:	9002      	str	r0, [sp, #8]
 800e34c:	2101      	movs	r1, #1
 800e34e:	4648      	mov	r0, r9
 800e350:	f000 fb8a 	bl	800ea68 <__i2b>
 800e354:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e356:	4604      	mov	r4, r0
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f000 81d8 	beq.w	800e70e <_dtoa_r+0xb56>
 800e35e:	461a      	mov	r2, r3
 800e360:	4601      	mov	r1, r0
 800e362:	4648      	mov	r0, r9
 800e364:	f000 fc38 	bl	800ebd8 <__pow5mult>
 800e368:	9b07      	ldr	r3, [sp, #28]
 800e36a:	2b01      	cmp	r3, #1
 800e36c:	4604      	mov	r4, r0
 800e36e:	f300 809f 	bgt.w	800e4b0 <_dtoa_r+0x8f8>
 800e372:	9b04      	ldr	r3, [sp, #16]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f040 8097 	bne.w	800e4a8 <_dtoa_r+0x8f0>
 800e37a:	9b05      	ldr	r3, [sp, #20]
 800e37c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e380:	2b00      	cmp	r3, #0
 800e382:	f040 8093 	bne.w	800e4ac <_dtoa_r+0x8f4>
 800e386:	9b05      	ldr	r3, [sp, #20]
 800e388:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e38c:	0d1b      	lsrs	r3, r3, #20
 800e38e:	051b      	lsls	r3, r3, #20
 800e390:	b133      	cbz	r3, 800e3a0 <_dtoa_r+0x7e8>
 800e392:	9b00      	ldr	r3, [sp, #0]
 800e394:	3301      	adds	r3, #1
 800e396:	9300      	str	r3, [sp, #0]
 800e398:	9b06      	ldr	r3, [sp, #24]
 800e39a:	3301      	adds	r3, #1
 800e39c:	9306      	str	r3, [sp, #24]
 800e39e:	2301      	movs	r3, #1
 800e3a0:	9308      	str	r3, [sp, #32]
 800e3a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 81b8 	beq.w	800e71a <_dtoa_r+0xb62>
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3b0:	6918      	ldr	r0, [r3, #16]
 800e3b2:	f000 fb0d 	bl	800e9d0 <__hi0bits>
 800e3b6:	f1c0 0020 	rsb	r0, r0, #32
 800e3ba:	9b06      	ldr	r3, [sp, #24]
 800e3bc:	4418      	add	r0, r3
 800e3be:	f010 001f 	ands.w	r0, r0, #31
 800e3c2:	f000 8082 	beq.w	800e4ca <_dtoa_r+0x912>
 800e3c6:	f1c0 0320 	rsb	r3, r0, #32
 800e3ca:	2b04      	cmp	r3, #4
 800e3cc:	dd73      	ble.n	800e4b6 <_dtoa_r+0x8fe>
 800e3ce:	9b00      	ldr	r3, [sp, #0]
 800e3d0:	f1c0 001c 	rsb	r0, r0, #28
 800e3d4:	4403      	add	r3, r0
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	9b06      	ldr	r3, [sp, #24]
 800e3da:	4403      	add	r3, r0
 800e3dc:	4406      	add	r6, r0
 800e3de:	9306      	str	r3, [sp, #24]
 800e3e0:	9b00      	ldr	r3, [sp, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	dd05      	ble.n	800e3f2 <_dtoa_r+0x83a>
 800e3e6:	9902      	ldr	r1, [sp, #8]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	4648      	mov	r0, r9
 800e3ec:	f000 fc4e 	bl	800ec8c <__lshift>
 800e3f0:	9002      	str	r0, [sp, #8]
 800e3f2:	9b06      	ldr	r3, [sp, #24]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dd05      	ble.n	800e404 <_dtoa_r+0x84c>
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4648      	mov	r0, r9
 800e3fe:	f000 fc45 	bl	800ec8c <__lshift>
 800e402:	4604      	mov	r4, r0
 800e404:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e406:	2b00      	cmp	r3, #0
 800e408:	d061      	beq.n	800e4ce <_dtoa_r+0x916>
 800e40a:	9802      	ldr	r0, [sp, #8]
 800e40c:	4621      	mov	r1, r4
 800e40e:	f000 fca9 	bl	800ed64 <__mcmp>
 800e412:	2800      	cmp	r0, #0
 800e414:	da5b      	bge.n	800e4ce <_dtoa_r+0x916>
 800e416:	2300      	movs	r3, #0
 800e418:	9902      	ldr	r1, [sp, #8]
 800e41a:	220a      	movs	r2, #10
 800e41c:	4648      	mov	r0, r9
 800e41e:	f000 fa47 	bl	800e8b0 <__multadd>
 800e422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e424:	9002      	str	r0, [sp, #8]
 800e426:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 8177 	beq.w	800e71e <_dtoa_r+0xb66>
 800e430:	4629      	mov	r1, r5
 800e432:	2300      	movs	r3, #0
 800e434:	220a      	movs	r2, #10
 800e436:	4648      	mov	r0, r9
 800e438:	f000 fa3a 	bl	800e8b0 <__multadd>
 800e43c:	f1bb 0f00 	cmp.w	fp, #0
 800e440:	4605      	mov	r5, r0
 800e442:	dc6f      	bgt.n	800e524 <_dtoa_r+0x96c>
 800e444:	9b07      	ldr	r3, [sp, #28]
 800e446:	2b02      	cmp	r3, #2
 800e448:	dc49      	bgt.n	800e4de <_dtoa_r+0x926>
 800e44a:	e06b      	b.n	800e524 <_dtoa_r+0x96c>
 800e44c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e44e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e452:	e73c      	b.n	800e2ce <_dtoa_r+0x716>
 800e454:	3fe00000 	.word	0x3fe00000
 800e458:	40240000 	.word	0x40240000
 800e45c:	9b03      	ldr	r3, [sp, #12]
 800e45e:	1e5c      	subs	r4, r3, #1
 800e460:	9b08      	ldr	r3, [sp, #32]
 800e462:	42a3      	cmp	r3, r4
 800e464:	db09      	blt.n	800e47a <_dtoa_r+0x8c2>
 800e466:	1b1c      	subs	r4, r3, r4
 800e468:	9b03      	ldr	r3, [sp, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f6bf af30 	bge.w	800e2d0 <_dtoa_r+0x718>
 800e470:	9b00      	ldr	r3, [sp, #0]
 800e472:	9a03      	ldr	r2, [sp, #12]
 800e474:	1a9e      	subs	r6, r3, r2
 800e476:	2300      	movs	r3, #0
 800e478:	e72b      	b.n	800e2d2 <_dtoa_r+0x71a>
 800e47a:	9b08      	ldr	r3, [sp, #32]
 800e47c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e47e:	9408      	str	r4, [sp, #32]
 800e480:	1ae3      	subs	r3, r4, r3
 800e482:	441a      	add	r2, r3
 800e484:	9e00      	ldr	r6, [sp, #0]
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	920d      	str	r2, [sp, #52]	@ 0x34
 800e48a:	2400      	movs	r4, #0
 800e48c:	e721      	b.n	800e2d2 <_dtoa_r+0x71a>
 800e48e:	9c08      	ldr	r4, [sp, #32]
 800e490:	9e00      	ldr	r6, [sp, #0]
 800e492:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e494:	e728      	b.n	800e2e8 <_dtoa_r+0x730>
 800e496:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e49a:	e751      	b.n	800e340 <_dtoa_r+0x788>
 800e49c:	9a08      	ldr	r2, [sp, #32]
 800e49e:	9902      	ldr	r1, [sp, #8]
 800e4a0:	e750      	b.n	800e344 <_dtoa_r+0x78c>
 800e4a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e4a6:	e751      	b.n	800e34c <_dtoa_r+0x794>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e779      	b.n	800e3a0 <_dtoa_r+0x7e8>
 800e4ac:	9b04      	ldr	r3, [sp, #16]
 800e4ae:	e777      	b.n	800e3a0 <_dtoa_r+0x7e8>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	9308      	str	r3, [sp, #32]
 800e4b4:	e779      	b.n	800e3aa <_dtoa_r+0x7f2>
 800e4b6:	d093      	beq.n	800e3e0 <_dtoa_r+0x828>
 800e4b8:	9a00      	ldr	r2, [sp, #0]
 800e4ba:	331c      	adds	r3, #28
 800e4bc:	441a      	add	r2, r3
 800e4be:	9200      	str	r2, [sp, #0]
 800e4c0:	9a06      	ldr	r2, [sp, #24]
 800e4c2:	441a      	add	r2, r3
 800e4c4:	441e      	add	r6, r3
 800e4c6:	9206      	str	r2, [sp, #24]
 800e4c8:	e78a      	b.n	800e3e0 <_dtoa_r+0x828>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	e7f4      	b.n	800e4b8 <_dtoa_r+0x900>
 800e4ce:	9b03      	ldr	r3, [sp, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	46b8      	mov	r8, r7
 800e4d4:	dc20      	bgt.n	800e518 <_dtoa_r+0x960>
 800e4d6:	469b      	mov	fp, r3
 800e4d8:	9b07      	ldr	r3, [sp, #28]
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	dd1e      	ble.n	800e51c <_dtoa_r+0x964>
 800e4de:	f1bb 0f00 	cmp.w	fp, #0
 800e4e2:	f47f adb1 	bne.w	800e048 <_dtoa_r+0x490>
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	465b      	mov	r3, fp
 800e4ea:	2205      	movs	r2, #5
 800e4ec:	4648      	mov	r0, r9
 800e4ee:	f000 f9df 	bl	800e8b0 <__multadd>
 800e4f2:	4601      	mov	r1, r0
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	9802      	ldr	r0, [sp, #8]
 800e4f8:	f000 fc34 	bl	800ed64 <__mcmp>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	f77f ada3 	ble.w	800e048 <_dtoa_r+0x490>
 800e502:	4656      	mov	r6, sl
 800e504:	2331      	movs	r3, #49	@ 0x31
 800e506:	f806 3b01 	strb.w	r3, [r6], #1
 800e50a:	f108 0801 	add.w	r8, r8, #1
 800e50e:	e59f      	b.n	800e050 <_dtoa_r+0x498>
 800e510:	9c03      	ldr	r4, [sp, #12]
 800e512:	46b8      	mov	r8, r7
 800e514:	4625      	mov	r5, r4
 800e516:	e7f4      	b.n	800e502 <_dtoa_r+0x94a>
 800e518:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f000 8101 	beq.w	800e726 <_dtoa_r+0xb6e>
 800e524:	2e00      	cmp	r6, #0
 800e526:	dd05      	ble.n	800e534 <_dtoa_r+0x97c>
 800e528:	4629      	mov	r1, r5
 800e52a:	4632      	mov	r2, r6
 800e52c:	4648      	mov	r0, r9
 800e52e:	f000 fbad 	bl	800ec8c <__lshift>
 800e532:	4605      	mov	r5, r0
 800e534:	9b08      	ldr	r3, [sp, #32]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d05c      	beq.n	800e5f4 <_dtoa_r+0xa3c>
 800e53a:	6869      	ldr	r1, [r5, #4]
 800e53c:	4648      	mov	r0, r9
 800e53e:	f000 f955 	bl	800e7ec <_Balloc>
 800e542:	4606      	mov	r6, r0
 800e544:	b928      	cbnz	r0, 800e552 <_dtoa_r+0x99a>
 800e546:	4b82      	ldr	r3, [pc, #520]	@ (800e750 <_dtoa_r+0xb98>)
 800e548:	4602      	mov	r2, r0
 800e54a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e54e:	f7ff bb4a 	b.w	800dbe6 <_dtoa_r+0x2e>
 800e552:	692a      	ldr	r2, [r5, #16]
 800e554:	3202      	adds	r2, #2
 800e556:	0092      	lsls	r2, r2, #2
 800e558:	f105 010c 	add.w	r1, r5, #12
 800e55c:	300c      	adds	r0, #12
 800e55e:	f7ff fa8c 	bl	800da7a <memcpy>
 800e562:	2201      	movs	r2, #1
 800e564:	4631      	mov	r1, r6
 800e566:	4648      	mov	r0, r9
 800e568:	f000 fb90 	bl	800ec8c <__lshift>
 800e56c:	f10a 0301 	add.w	r3, sl, #1
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	eb0a 030b 	add.w	r3, sl, fp
 800e576:	9308      	str	r3, [sp, #32]
 800e578:	9b04      	ldr	r3, [sp, #16]
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	462f      	mov	r7, r5
 800e580:	9306      	str	r3, [sp, #24]
 800e582:	4605      	mov	r5, r0
 800e584:	9b00      	ldr	r3, [sp, #0]
 800e586:	9802      	ldr	r0, [sp, #8]
 800e588:	4621      	mov	r1, r4
 800e58a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e58e:	f7ff fa89 	bl	800daa4 <quorem>
 800e592:	4603      	mov	r3, r0
 800e594:	3330      	adds	r3, #48	@ 0x30
 800e596:	9003      	str	r0, [sp, #12]
 800e598:	4639      	mov	r1, r7
 800e59a:	9802      	ldr	r0, [sp, #8]
 800e59c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e59e:	f000 fbe1 	bl	800ed64 <__mcmp>
 800e5a2:	462a      	mov	r2, r5
 800e5a4:	9004      	str	r0, [sp, #16]
 800e5a6:	4621      	mov	r1, r4
 800e5a8:	4648      	mov	r0, r9
 800e5aa:	f000 fbf7 	bl	800ed9c <__mdiff>
 800e5ae:	68c2      	ldr	r2, [r0, #12]
 800e5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	bb02      	cbnz	r2, 800e5f8 <_dtoa_r+0xa40>
 800e5b6:	4601      	mov	r1, r0
 800e5b8:	9802      	ldr	r0, [sp, #8]
 800e5ba:	f000 fbd3 	bl	800ed64 <__mcmp>
 800e5be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	4648      	mov	r0, r9
 800e5c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e5c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5ca:	f000 f94f 	bl	800e86c <_Bfree>
 800e5ce:	9b07      	ldr	r3, [sp, #28]
 800e5d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e5d2:	9e00      	ldr	r6, [sp, #0]
 800e5d4:	ea42 0103 	orr.w	r1, r2, r3
 800e5d8:	9b06      	ldr	r3, [sp, #24]
 800e5da:	4319      	orrs	r1, r3
 800e5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5de:	d10d      	bne.n	800e5fc <_dtoa_r+0xa44>
 800e5e0:	2b39      	cmp	r3, #57	@ 0x39
 800e5e2:	d027      	beq.n	800e634 <_dtoa_r+0xa7c>
 800e5e4:	9a04      	ldr	r2, [sp, #16]
 800e5e6:	2a00      	cmp	r2, #0
 800e5e8:	dd01      	ble.n	800e5ee <_dtoa_r+0xa36>
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	3331      	adds	r3, #49	@ 0x31
 800e5ee:	f88b 3000 	strb.w	r3, [fp]
 800e5f2:	e52e      	b.n	800e052 <_dtoa_r+0x49a>
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	e7b9      	b.n	800e56c <_dtoa_r+0x9b4>
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	e7e2      	b.n	800e5c2 <_dtoa_r+0xa0a>
 800e5fc:	9904      	ldr	r1, [sp, #16]
 800e5fe:	2900      	cmp	r1, #0
 800e600:	db04      	blt.n	800e60c <_dtoa_r+0xa54>
 800e602:	9807      	ldr	r0, [sp, #28]
 800e604:	4301      	orrs	r1, r0
 800e606:	9806      	ldr	r0, [sp, #24]
 800e608:	4301      	orrs	r1, r0
 800e60a:	d120      	bne.n	800e64e <_dtoa_r+0xa96>
 800e60c:	2a00      	cmp	r2, #0
 800e60e:	ddee      	ble.n	800e5ee <_dtoa_r+0xa36>
 800e610:	9902      	ldr	r1, [sp, #8]
 800e612:	9300      	str	r3, [sp, #0]
 800e614:	2201      	movs	r2, #1
 800e616:	4648      	mov	r0, r9
 800e618:	f000 fb38 	bl	800ec8c <__lshift>
 800e61c:	4621      	mov	r1, r4
 800e61e:	9002      	str	r0, [sp, #8]
 800e620:	f000 fba0 	bl	800ed64 <__mcmp>
 800e624:	2800      	cmp	r0, #0
 800e626:	9b00      	ldr	r3, [sp, #0]
 800e628:	dc02      	bgt.n	800e630 <_dtoa_r+0xa78>
 800e62a:	d1e0      	bne.n	800e5ee <_dtoa_r+0xa36>
 800e62c:	07da      	lsls	r2, r3, #31
 800e62e:	d5de      	bpl.n	800e5ee <_dtoa_r+0xa36>
 800e630:	2b39      	cmp	r3, #57	@ 0x39
 800e632:	d1da      	bne.n	800e5ea <_dtoa_r+0xa32>
 800e634:	2339      	movs	r3, #57	@ 0x39
 800e636:	f88b 3000 	strb.w	r3, [fp]
 800e63a:	4633      	mov	r3, r6
 800e63c:	461e      	mov	r6, r3
 800e63e:	3b01      	subs	r3, #1
 800e640:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e644:	2a39      	cmp	r2, #57	@ 0x39
 800e646:	d04e      	beq.n	800e6e6 <_dtoa_r+0xb2e>
 800e648:	3201      	adds	r2, #1
 800e64a:	701a      	strb	r2, [r3, #0]
 800e64c:	e501      	b.n	800e052 <_dtoa_r+0x49a>
 800e64e:	2a00      	cmp	r2, #0
 800e650:	dd03      	ble.n	800e65a <_dtoa_r+0xaa2>
 800e652:	2b39      	cmp	r3, #57	@ 0x39
 800e654:	d0ee      	beq.n	800e634 <_dtoa_r+0xa7c>
 800e656:	3301      	adds	r3, #1
 800e658:	e7c9      	b.n	800e5ee <_dtoa_r+0xa36>
 800e65a:	9a00      	ldr	r2, [sp, #0]
 800e65c:	9908      	ldr	r1, [sp, #32]
 800e65e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e662:	428a      	cmp	r2, r1
 800e664:	d028      	beq.n	800e6b8 <_dtoa_r+0xb00>
 800e666:	9902      	ldr	r1, [sp, #8]
 800e668:	2300      	movs	r3, #0
 800e66a:	220a      	movs	r2, #10
 800e66c:	4648      	mov	r0, r9
 800e66e:	f000 f91f 	bl	800e8b0 <__multadd>
 800e672:	42af      	cmp	r7, r5
 800e674:	9002      	str	r0, [sp, #8]
 800e676:	f04f 0300 	mov.w	r3, #0
 800e67a:	f04f 020a 	mov.w	r2, #10
 800e67e:	4639      	mov	r1, r7
 800e680:	4648      	mov	r0, r9
 800e682:	d107      	bne.n	800e694 <_dtoa_r+0xadc>
 800e684:	f000 f914 	bl	800e8b0 <__multadd>
 800e688:	4607      	mov	r7, r0
 800e68a:	4605      	mov	r5, r0
 800e68c:	9b00      	ldr	r3, [sp, #0]
 800e68e:	3301      	adds	r3, #1
 800e690:	9300      	str	r3, [sp, #0]
 800e692:	e777      	b.n	800e584 <_dtoa_r+0x9cc>
 800e694:	f000 f90c 	bl	800e8b0 <__multadd>
 800e698:	4629      	mov	r1, r5
 800e69a:	4607      	mov	r7, r0
 800e69c:	2300      	movs	r3, #0
 800e69e:	220a      	movs	r2, #10
 800e6a0:	4648      	mov	r0, r9
 800e6a2:	f000 f905 	bl	800e8b0 <__multadd>
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	e7f0      	b.n	800e68c <_dtoa_r+0xad4>
 800e6aa:	f1bb 0f00 	cmp.w	fp, #0
 800e6ae:	bfcc      	ite	gt
 800e6b0:	465e      	movgt	r6, fp
 800e6b2:	2601      	movle	r6, #1
 800e6b4:	4456      	add	r6, sl
 800e6b6:	2700      	movs	r7, #0
 800e6b8:	9902      	ldr	r1, [sp, #8]
 800e6ba:	9300      	str	r3, [sp, #0]
 800e6bc:	2201      	movs	r2, #1
 800e6be:	4648      	mov	r0, r9
 800e6c0:	f000 fae4 	bl	800ec8c <__lshift>
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	9002      	str	r0, [sp, #8]
 800e6c8:	f000 fb4c 	bl	800ed64 <__mcmp>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	dcb4      	bgt.n	800e63a <_dtoa_r+0xa82>
 800e6d0:	d102      	bne.n	800e6d8 <_dtoa_r+0xb20>
 800e6d2:	9b00      	ldr	r3, [sp, #0]
 800e6d4:	07db      	lsls	r3, r3, #31
 800e6d6:	d4b0      	bmi.n	800e63a <_dtoa_r+0xa82>
 800e6d8:	4633      	mov	r3, r6
 800e6da:	461e      	mov	r6, r3
 800e6dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6e0:	2a30      	cmp	r2, #48	@ 0x30
 800e6e2:	d0fa      	beq.n	800e6da <_dtoa_r+0xb22>
 800e6e4:	e4b5      	b.n	800e052 <_dtoa_r+0x49a>
 800e6e6:	459a      	cmp	sl, r3
 800e6e8:	d1a8      	bne.n	800e63c <_dtoa_r+0xa84>
 800e6ea:	2331      	movs	r3, #49	@ 0x31
 800e6ec:	f108 0801 	add.w	r8, r8, #1
 800e6f0:	f88a 3000 	strb.w	r3, [sl]
 800e6f4:	e4ad      	b.n	800e052 <_dtoa_r+0x49a>
 800e6f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e754 <_dtoa_r+0xb9c>
 800e6fc:	b11b      	cbz	r3, 800e706 <_dtoa_r+0xb4e>
 800e6fe:	f10a 0308 	add.w	r3, sl, #8
 800e702:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e704:	6013      	str	r3, [r2, #0]
 800e706:	4650      	mov	r0, sl
 800e708:	b017      	add	sp, #92	@ 0x5c
 800e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70e:	9b07      	ldr	r3, [sp, #28]
 800e710:	2b01      	cmp	r3, #1
 800e712:	f77f ae2e 	ble.w	800e372 <_dtoa_r+0x7ba>
 800e716:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e718:	9308      	str	r3, [sp, #32]
 800e71a:	2001      	movs	r0, #1
 800e71c:	e64d      	b.n	800e3ba <_dtoa_r+0x802>
 800e71e:	f1bb 0f00 	cmp.w	fp, #0
 800e722:	f77f aed9 	ble.w	800e4d8 <_dtoa_r+0x920>
 800e726:	4656      	mov	r6, sl
 800e728:	9802      	ldr	r0, [sp, #8]
 800e72a:	4621      	mov	r1, r4
 800e72c:	f7ff f9ba 	bl	800daa4 <quorem>
 800e730:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e734:	f806 3b01 	strb.w	r3, [r6], #1
 800e738:	eba6 020a 	sub.w	r2, r6, sl
 800e73c:	4593      	cmp	fp, r2
 800e73e:	ddb4      	ble.n	800e6aa <_dtoa_r+0xaf2>
 800e740:	9902      	ldr	r1, [sp, #8]
 800e742:	2300      	movs	r3, #0
 800e744:	220a      	movs	r2, #10
 800e746:	4648      	mov	r0, r9
 800e748:	f000 f8b2 	bl	800e8b0 <__multadd>
 800e74c:	9002      	str	r0, [sp, #8]
 800e74e:	e7eb      	b.n	800e728 <_dtoa_r+0xb70>
 800e750:	08013793 	.word	0x08013793
 800e754:	08013717 	.word	0x08013717

0800e758 <_free_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4605      	mov	r5, r0
 800e75c:	2900      	cmp	r1, #0
 800e75e:	d041      	beq.n	800e7e4 <_free_r+0x8c>
 800e760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e764:	1f0c      	subs	r4, r1, #4
 800e766:	2b00      	cmp	r3, #0
 800e768:	bfb8      	it	lt
 800e76a:	18e4      	addlt	r4, r4, r3
 800e76c:	f7fe f90a 	bl	800c984 <__malloc_lock>
 800e770:	4a1d      	ldr	r2, [pc, #116]	@ (800e7e8 <_free_r+0x90>)
 800e772:	6813      	ldr	r3, [r2, #0]
 800e774:	b933      	cbnz	r3, 800e784 <_free_r+0x2c>
 800e776:	6063      	str	r3, [r4, #4]
 800e778:	6014      	str	r4, [r2, #0]
 800e77a:	4628      	mov	r0, r5
 800e77c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e780:	f7fe b906 	b.w	800c990 <__malloc_unlock>
 800e784:	42a3      	cmp	r3, r4
 800e786:	d908      	bls.n	800e79a <_free_r+0x42>
 800e788:	6820      	ldr	r0, [r4, #0]
 800e78a:	1821      	adds	r1, r4, r0
 800e78c:	428b      	cmp	r3, r1
 800e78e:	bf01      	itttt	eq
 800e790:	6819      	ldreq	r1, [r3, #0]
 800e792:	685b      	ldreq	r3, [r3, #4]
 800e794:	1809      	addeq	r1, r1, r0
 800e796:	6021      	streq	r1, [r4, #0]
 800e798:	e7ed      	b.n	800e776 <_free_r+0x1e>
 800e79a:	461a      	mov	r2, r3
 800e79c:	685b      	ldr	r3, [r3, #4]
 800e79e:	b10b      	cbz	r3, 800e7a4 <_free_r+0x4c>
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	d9fa      	bls.n	800e79a <_free_r+0x42>
 800e7a4:	6811      	ldr	r1, [r2, #0]
 800e7a6:	1850      	adds	r0, r2, r1
 800e7a8:	42a0      	cmp	r0, r4
 800e7aa:	d10b      	bne.n	800e7c4 <_free_r+0x6c>
 800e7ac:	6820      	ldr	r0, [r4, #0]
 800e7ae:	4401      	add	r1, r0
 800e7b0:	1850      	adds	r0, r2, r1
 800e7b2:	4283      	cmp	r3, r0
 800e7b4:	6011      	str	r1, [r2, #0]
 800e7b6:	d1e0      	bne.n	800e77a <_free_r+0x22>
 800e7b8:	6818      	ldr	r0, [r3, #0]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	6053      	str	r3, [r2, #4]
 800e7be:	4408      	add	r0, r1
 800e7c0:	6010      	str	r0, [r2, #0]
 800e7c2:	e7da      	b.n	800e77a <_free_r+0x22>
 800e7c4:	d902      	bls.n	800e7cc <_free_r+0x74>
 800e7c6:	230c      	movs	r3, #12
 800e7c8:	602b      	str	r3, [r5, #0]
 800e7ca:	e7d6      	b.n	800e77a <_free_r+0x22>
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	1821      	adds	r1, r4, r0
 800e7d0:	428b      	cmp	r3, r1
 800e7d2:	bf04      	itt	eq
 800e7d4:	6819      	ldreq	r1, [r3, #0]
 800e7d6:	685b      	ldreq	r3, [r3, #4]
 800e7d8:	6063      	str	r3, [r4, #4]
 800e7da:	bf04      	itt	eq
 800e7dc:	1809      	addeq	r1, r1, r0
 800e7de:	6021      	streq	r1, [r4, #0]
 800e7e0:	6054      	str	r4, [r2, #4]
 800e7e2:	e7ca      	b.n	800e77a <_free_r+0x22>
 800e7e4:	bd38      	pop	{r3, r4, r5, pc}
 800e7e6:	bf00      	nop
 800e7e8:	20001b60 	.word	0x20001b60

0800e7ec <_Balloc>:
 800e7ec:	b570      	push	{r4, r5, r6, lr}
 800e7ee:	69c6      	ldr	r6, [r0, #28]
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	460d      	mov	r5, r1
 800e7f4:	b976      	cbnz	r6, 800e814 <_Balloc+0x28>
 800e7f6:	2010      	movs	r0, #16
 800e7f8:	f7fe f81a 	bl	800c830 <malloc>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	61e0      	str	r0, [r4, #28]
 800e800:	b920      	cbnz	r0, 800e80c <_Balloc+0x20>
 800e802:	4b18      	ldr	r3, [pc, #96]	@ (800e864 <_Balloc+0x78>)
 800e804:	4818      	ldr	r0, [pc, #96]	@ (800e868 <_Balloc+0x7c>)
 800e806:	216b      	movs	r1, #107	@ 0x6b
 800e808:	f002 f8ea 	bl	80109e0 <__assert_func>
 800e80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e810:	6006      	str	r6, [r0, #0]
 800e812:	60c6      	str	r6, [r0, #12]
 800e814:	69e6      	ldr	r6, [r4, #28]
 800e816:	68f3      	ldr	r3, [r6, #12]
 800e818:	b183      	cbz	r3, 800e83c <_Balloc+0x50>
 800e81a:	69e3      	ldr	r3, [r4, #28]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e822:	b9b8      	cbnz	r0, 800e854 <_Balloc+0x68>
 800e824:	2101      	movs	r1, #1
 800e826:	fa01 f605 	lsl.w	r6, r1, r5
 800e82a:	1d72      	adds	r2, r6, #5
 800e82c:	0092      	lsls	r2, r2, #2
 800e82e:	4620      	mov	r0, r4
 800e830:	f7fd ffea 	bl	800c808 <_calloc_r>
 800e834:	b160      	cbz	r0, 800e850 <_Balloc+0x64>
 800e836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e83a:	e00e      	b.n	800e85a <_Balloc+0x6e>
 800e83c:	2221      	movs	r2, #33	@ 0x21
 800e83e:	2104      	movs	r1, #4
 800e840:	4620      	mov	r0, r4
 800e842:	f7fd ffe1 	bl	800c808 <_calloc_r>
 800e846:	69e3      	ldr	r3, [r4, #28]
 800e848:	60f0      	str	r0, [r6, #12]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e4      	bne.n	800e81a <_Balloc+0x2e>
 800e850:	2000      	movs	r0, #0
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	6802      	ldr	r2, [r0, #0]
 800e856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e85a:	2300      	movs	r3, #0
 800e85c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e860:	e7f7      	b.n	800e852 <_Balloc+0x66>
 800e862:	bf00      	nop
 800e864:	08013724 	.word	0x08013724
 800e868:	080137a4 	.word	0x080137a4

0800e86c <_Bfree>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	69c6      	ldr	r6, [r0, #28]
 800e870:	4605      	mov	r5, r0
 800e872:	460c      	mov	r4, r1
 800e874:	b976      	cbnz	r6, 800e894 <_Bfree+0x28>
 800e876:	2010      	movs	r0, #16
 800e878:	f7fd ffda 	bl	800c830 <malloc>
 800e87c:	4602      	mov	r2, r0
 800e87e:	61e8      	str	r0, [r5, #28]
 800e880:	b920      	cbnz	r0, 800e88c <_Bfree+0x20>
 800e882:	4b09      	ldr	r3, [pc, #36]	@ (800e8a8 <_Bfree+0x3c>)
 800e884:	4809      	ldr	r0, [pc, #36]	@ (800e8ac <_Bfree+0x40>)
 800e886:	218f      	movs	r1, #143	@ 0x8f
 800e888:	f002 f8aa 	bl	80109e0 <__assert_func>
 800e88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e890:	6006      	str	r6, [r0, #0]
 800e892:	60c6      	str	r6, [r0, #12]
 800e894:	b13c      	cbz	r4, 800e8a6 <_Bfree+0x3a>
 800e896:	69eb      	ldr	r3, [r5, #28]
 800e898:	6862      	ldr	r2, [r4, #4]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8a0:	6021      	str	r1, [r4, #0]
 800e8a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	08013724 	.word	0x08013724
 800e8ac:	080137a4 	.word	0x080137a4

0800e8b0 <__multadd>:
 800e8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b4:	690d      	ldr	r5, [r1, #16]
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	461e      	mov	r6, r3
 800e8bc:	f101 0c14 	add.w	ip, r1, #20
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e8c6:	b299      	uxth	r1, r3
 800e8c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e8cc:	0c1e      	lsrs	r6, r3, #16
 800e8ce:	0c0b      	lsrs	r3, r1, #16
 800e8d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e8d4:	b289      	uxth	r1, r1
 800e8d6:	3001      	adds	r0, #1
 800e8d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8dc:	4285      	cmp	r5, r0
 800e8de:	f84c 1b04 	str.w	r1, [ip], #4
 800e8e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8e6:	dcec      	bgt.n	800e8c2 <__multadd+0x12>
 800e8e8:	b30e      	cbz	r6, 800e92e <__multadd+0x7e>
 800e8ea:	68a3      	ldr	r3, [r4, #8]
 800e8ec:	42ab      	cmp	r3, r5
 800e8ee:	dc19      	bgt.n	800e924 <__multadd+0x74>
 800e8f0:	6861      	ldr	r1, [r4, #4]
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	3101      	adds	r1, #1
 800e8f6:	f7ff ff79 	bl	800e7ec <_Balloc>
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	b928      	cbnz	r0, 800e90a <__multadd+0x5a>
 800e8fe:	4602      	mov	r2, r0
 800e900:	4b0c      	ldr	r3, [pc, #48]	@ (800e934 <__multadd+0x84>)
 800e902:	480d      	ldr	r0, [pc, #52]	@ (800e938 <__multadd+0x88>)
 800e904:	21ba      	movs	r1, #186	@ 0xba
 800e906:	f002 f86b 	bl	80109e0 <__assert_func>
 800e90a:	6922      	ldr	r2, [r4, #16]
 800e90c:	3202      	adds	r2, #2
 800e90e:	f104 010c 	add.w	r1, r4, #12
 800e912:	0092      	lsls	r2, r2, #2
 800e914:	300c      	adds	r0, #12
 800e916:	f7ff f8b0 	bl	800da7a <memcpy>
 800e91a:	4621      	mov	r1, r4
 800e91c:	4638      	mov	r0, r7
 800e91e:	f7ff ffa5 	bl	800e86c <_Bfree>
 800e922:	4644      	mov	r4, r8
 800e924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e928:	3501      	adds	r5, #1
 800e92a:	615e      	str	r6, [r3, #20]
 800e92c:	6125      	str	r5, [r4, #16]
 800e92e:	4620      	mov	r0, r4
 800e930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e934:	08013793 	.word	0x08013793
 800e938:	080137a4 	.word	0x080137a4

0800e93c <__s2b>:
 800e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e940:	460c      	mov	r4, r1
 800e942:	4615      	mov	r5, r2
 800e944:	461f      	mov	r7, r3
 800e946:	2209      	movs	r2, #9
 800e948:	3308      	adds	r3, #8
 800e94a:	4606      	mov	r6, r0
 800e94c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e950:	2100      	movs	r1, #0
 800e952:	2201      	movs	r2, #1
 800e954:	429a      	cmp	r2, r3
 800e956:	db09      	blt.n	800e96c <__s2b+0x30>
 800e958:	4630      	mov	r0, r6
 800e95a:	f7ff ff47 	bl	800e7ec <_Balloc>
 800e95e:	b940      	cbnz	r0, 800e972 <__s2b+0x36>
 800e960:	4602      	mov	r2, r0
 800e962:	4b19      	ldr	r3, [pc, #100]	@ (800e9c8 <__s2b+0x8c>)
 800e964:	4819      	ldr	r0, [pc, #100]	@ (800e9cc <__s2b+0x90>)
 800e966:	21d3      	movs	r1, #211	@ 0xd3
 800e968:	f002 f83a 	bl	80109e0 <__assert_func>
 800e96c:	0052      	lsls	r2, r2, #1
 800e96e:	3101      	adds	r1, #1
 800e970:	e7f0      	b.n	800e954 <__s2b+0x18>
 800e972:	9b08      	ldr	r3, [sp, #32]
 800e974:	6143      	str	r3, [r0, #20]
 800e976:	2d09      	cmp	r5, #9
 800e978:	f04f 0301 	mov.w	r3, #1
 800e97c:	6103      	str	r3, [r0, #16]
 800e97e:	dd16      	ble.n	800e9ae <__s2b+0x72>
 800e980:	f104 0909 	add.w	r9, r4, #9
 800e984:	46c8      	mov	r8, r9
 800e986:	442c      	add	r4, r5
 800e988:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e98c:	4601      	mov	r1, r0
 800e98e:	3b30      	subs	r3, #48	@ 0x30
 800e990:	220a      	movs	r2, #10
 800e992:	4630      	mov	r0, r6
 800e994:	f7ff ff8c 	bl	800e8b0 <__multadd>
 800e998:	45a0      	cmp	r8, r4
 800e99a:	d1f5      	bne.n	800e988 <__s2b+0x4c>
 800e99c:	f1a5 0408 	sub.w	r4, r5, #8
 800e9a0:	444c      	add	r4, r9
 800e9a2:	1b2d      	subs	r5, r5, r4
 800e9a4:	1963      	adds	r3, r4, r5
 800e9a6:	42bb      	cmp	r3, r7
 800e9a8:	db04      	blt.n	800e9b4 <__s2b+0x78>
 800e9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9ae:	340a      	adds	r4, #10
 800e9b0:	2509      	movs	r5, #9
 800e9b2:	e7f6      	b.n	800e9a2 <__s2b+0x66>
 800e9b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e9b8:	4601      	mov	r1, r0
 800e9ba:	3b30      	subs	r3, #48	@ 0x30
 800e9bc:	220a      	movs	r2, #10
 800e9be:	4630      	mov	r0, r6
 800e9c0:	f7ff ff76 	bl	800e8b0 <__multadd>
 800e9c4:	e7ee      	b.n	800e9a4 <__s2b+0x68>
 800e9c6:	bf00      	nop
 800e9c8:	08013793 	.word	0x08013793
 800e9cc:	080137a4 	.word	0x080137a4

0800e9d0 <__hi0bits>:
 800e9d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	bf36      	itet	cc
 800e9d8:	0403      	lslcc	r3, r0, #16
 800e9da:	2000      	movcs	r0, #0
 800e9dc:	2010      	movcc	r0, #16
 800e9de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e9e2:	bf3c      	itt	cc
 800e9e4:	021b      	lslcc	r3, r3, #8
 800e9e6:	3008      	addcc	r0, #8
 800e9e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e9ec:	bf3c      	itt	cc
 800e9ee:	011b      	lslcc	r3, r3, #4
 800e9f0:	3004      	addcc	r0, #4
 800e9f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9f6:	bf3c      	itt	cc
 800e9f8:	009b      	lslcc	r3, r3, #2
 800e9fa:	3002      	addcc	r0, #2
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	db05      	blt.n	800ea0c <__hi0bits+0x3c>
 800ea00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea04:	f100 0001 	add.w	r0, r0, #1
 800ea08:	bf08      	it	eq
 800ea0a:	2020      	moveq	r0, #32
 800ea0c:	4770      	bx	lr

0800ea0e <__lo0bits>:
 800ea0e:	6803      	ldr	r3, [r0, #0]
 800ea10:	4602      	mov	r2, r0
 800ea12:	f013 0007 	ands.w	r0, r3, #7
 800ea16:	d00b      	beq.n	800ea30 <__lo0bits+0x22>
 800ea18:	07d9      	lsls	r1, r3, #31
 800ea1a:	d421      	bmi.n	800ea60 <__lo0bits+0x52>
 800ea1c:	0798      	lsls	r0, r3, #30
 800ea1e:	bf49      	itett	mi
 800ea20:	085b      	lsrmi	r3, r3, #1
 800ea22:	089b      	lsrpl	r3, r3, #2
 800ea24:	2001      	movmi	r0, #1
 800ea26:	6013      	strmi	r3, [r2, #0]
 800ea28:	bf5c      	itt	pl
 800ea2a:	6013      	strpl	r3, [r2, #0]
 800ea2c:	2002      	movpl	r0, #2
 800ea2e:	4770      	bx	lr
 800ea30:	b299      	uxth	r1, r3
 800ea32:	b909      	cbnz	r1, 800ea38 <__lo0bits+0x2a>
 800ea34:	0c1b      	lsrs	r3, r3, #16
 800ea36:	2010      	movs	r0, #16
 800ea38:	b2d9      	uxtb	r1, r3
 800ea3a:	b909      	cbnz	r1, 800ea40 <__lo0bits+0x32>
 800ea3c:	3008      	adds	r0, #8
 800ea3e:	0a1b      	lsrs	r3, r3, #8
 800ea40:	0719      	lsls	r1, r3, #28
 800ea42:	bf04      	itt	eq
 800ea44:	091b      	lsreq	r3, r3, #4
 800ea46:	3004      	addeq	r0, #4
 800ea48:	0799      	lsls	r1, r3, #30
 800ea4a:	bf04      	itt	eq
 800ea4c:	089b      	lsreq	r3, r3, #2
 800ea4e:	3002      	addeq	r0, #2
 800ea50:	07d9      	lsls	r1, r3, #31
 800ea52:	d403      	bmi.n	800ea5c <__lo0bits+0x4e>
 800ea54:	085b      	lsrs	r3, r3, #1
 800ea56:	f100 0001 	add.w	r0, r0, #1
 800ea5a:	d003      	beq.n	800ea64 <__lo0bits+0x56>
 800ea5c:	6013      	str	r3, [r2, #0]
 800ea5e:	4770      	bx	lr
 800ea60:	2000      	movs	r0, #0
 800ea62:	4770      	bx	lr
 800ea64:	2020      	movs	r0, #32
 800ea66:	4770      	bx	lr

0800ea68 <__i2b>:
 800ea68:	b510      	push	{r4, lr}
 800ea6a:	460c      	mov	r4, r1
 800ea6c:	2101      	movs	r1, #1
 800ea6e:	f7ff febd 	bl	800e7ec <_Balloc>
 800ea72:	4602      	mov	r2, r0
 800ea74:	b928      	cbnz	r0, 800ea82 <__i2b+0x1a>
 800ea76:	4b05      	ldr	r3, [pc, #20]	@ (800ea8c <__i2b+0x24>)
 800ea78:	4805      	ldr	r0, [pc, #20]	@ (800ea90 <__i2b+0x28>)
 800ea7a:	f240 1145 	movw	r1, #325	@ 0x145
 800ea7e:	f001 ffaf 	bl	80109e0 <__assert_func>
 800ea82:	2301      	movs	r3, #1
 800ea84:	6144      	str	r4, [r0, #20]
 800ea86:	6103      	str	r3, [r0, #16]
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop
 800ea8c:	08013793 	.word	0x08013793
 800ea90:	080137a4 	.word	0x080137a4

0800ea94 <__multiply>:
 800ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	4617      	mov	r7, r2
 800ea9a:	690a      	ldr	r2, [r1, #16]
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	bfa8      	it	ge
 800eaa2:	463b      	movge	r3, r7
 800eaa4:	4689      	mov	r9, r1
 800eaa6:	bfa4      	itt	ge
 800eaa8:	460f      	movge	r7, r1
 800eaaa:	4699      	movge	r9, r3
 800eaac:	693d      	ldr	r5, [r7, #16]
 800eaae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	6879      	ldr	r1, [r7, #4]
 800eab6:	eb05 060a 	add.w	r6, r5, sl
 800eaba:	42b3      	cmp	r3, r6
 800eabc:	b085      	sub	sp, #20
 800eabe:	bfb8      	it	lt
 800eac0:	3101      	addlt	r1, #1
 800eac2:	f7ff fe93 	bl	800e7ec <_Balloc>
 800eac6:	b930      	cbnz	r0, 800ead6 <__multiply+0x42>
 800eac8:	4602      	mov	r2, r0
 800eaca:	4b41      	ldr	r3, [pc, #260]	@ (800ebd0 <__multiply+0x13c>)
 800eacc:	4841      	ldr	r0, [pc, #260]	@ (800ebd4 <__multiply+0x140>)
 800eace:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ead2:	f001 ff85 	bl	80109e0 <__assert_func>
 800ead6:	f100 0414 	add.w	r4, r0, #20
 800eada:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800eade:	4623      	mov	r3, r4
 800eae0:	2200      	movs	r2, #0
 800eae2:	4573      	cmp	r3, lr
 800eae4:	d320      	bcc.n	800eb28 <__multiply+0x94>
 800eae6:	f107 0814 	add.w	r8, r7, #20
 800eaea:	f109 0114 	add.w	r1, r9, #20
 800eaee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800eaf2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800eaf6:	9302      	str	r3, [sp, #8]
 800eaf8:	1beb      	subs	r3, r5, r7
 800eafa:	3b15      	subs	r3, #21
 800eafc:	f023 0303 	bic.w	r3, r3, #3
 800eb00:	3304      	adds	r3, #4
 800eb02:	3715      	adds	r7, #21
 800eb04:	42bd      	cmp	r5, r7
 800eb06:	bf38      	it	cc
 800eb08:	2304      	movcc	r3, #4
 800eb0a:	9301      	str	r3, [sp, #4]
 800eb0c:	9b02      	ldr	r3, [sp, #8]
 800eb0e:	9103      	str	r1, [sp, #12]
 800eb10:	428b      	cmp	r3, r1
 800eb12:	d80c      	bhi.n	800eb2e <__multiply+0x9a>
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	dd03      	ble.n	800eb20 <__multiply+0x8c>
 800eb18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d055      	beq.n	800ebcc <__multiply+0x138>
 800eb20:	6106      	str	r6, [r0, #16]
 800eb22:	b005      	add	sp, #20
 800eb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb28:	f843 2b04 	str.w	r2, [r3], #4
 800eb2c:	e7d9      	b.n	800eae2 <__multiply+0x4e>
 800eb2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800eb32:	f1ba 0f00 	cmp.w	sl, #0
 800eb36:	d01f      	beq.n	800eb78 <__multiply+0xe4>
 800eb38:	46c4      	mov	ip, r8
 800eb3a:	46a1      	mov	r9, r4
 800eb3c:	2700      	movs	r7, #0
 800eb3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb42:	f8d9 3000 	ldr.w	r3, [r9]
 800eb46:	fa1f fb82 	uxth.w	fp, r2
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800eb50:	443b      	add	r3, r7
 800eb52:	f8d9 7000 	ldr.w	r7, [r9]
 800eb56:	0c12      	lsrs	r2, r2, #16
 800eb58:	0c3f      	lsrs	r7, r7, #16
 800eb5a:	fb0a 7202 	mla	r2, sl, r2, r7
 800eb5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb68:	4565      	cmp	r5, ip
 800eb6a:	f849 3b04 	str.w	r3, [r9], #4
 800eb6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800eb72:	d8e4      	bhi.n	800eb3e <__multiply+0xaa>
 800eb74:	9b01      	ldr	r3, [sp, #4]
 800eb76:	50e7      	str	r7, [r4, r3]
 800eb78:	9b03      	ldr	r3, [sp, #12]
 800eb7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eb7e:	3104      	adds	r1, #4
 800eb80:	f1b9 0f00 	cmp.w	r9, #0
 800eb84:	d020      	beq.n	800ebc8 <__multiply+0x134>
 800eb86:	6823      	ldr	r3, [r4, #0]
 800eb88:	4647      	mov	r7, r8
 800eb8a:	46a4      	mov	ip, r4
 800eb8c:	f04f 0a00 	mov.w	sl, #0
 800eb90:	f8b7 b000 	ldrh.w	fp, [r7]
 800eb94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800eb98:	fb09 220b 	mla	r2, r9, fp, r2
 800eb9c:	4452      	add	r2, sl
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eba4:	f84c 3b04 	str.w	r3, [ip], #4
 800eba8:	f857 3b04 	ldr.w	r3, [r7], #4
 800ebac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebb0:	f8bc 3000 	ldrh.w	r3, [ip]
 800ebb4:	fb09 330a 	mla	r3, r9, sl, r3
 800ebb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ebbc:	42bd      	cmp	r5, r7
 800ebbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ebc2:	d8e5      	bhi.n	800eb90 <__multiply+0xfc>
 800ebc4:	9a01      	ldr	r2, [sp, #4]
 800ebc6:	50a3      	str	r3, [r4, r2]
 800ebc8:	3404      	adds	r4, #4
 800ebca:	e79f      	b.n	800eb0c <__multiply+0x78>
 800ebcc:	3e01      	subs	r6, #1
 800ebce:	e7a1      	b.n	800eb14 <__multiply+0x80>
 800ebd0:	08013793 	.word	0x08013793
 800ebd4:	080137a4 	.word	0x080137a4

0800ebd8 <__pow5mult>:
 800ebd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebdc:	4615      	mov	r5, r2
 800ebde:	f012 0203 	ands.w	r2, r2, #3
 800ebe2:	4607      	mov	r7, r0
 800ebe4:	460e      	mov	r6, r1
 800ebe6:	d007      	beq.n	800ebf8 <__pow5mult+0x20>
 800ebe8:	4c25      	ldr	r4, [pc, #148]	@ (800ec80 <__pow5mult+0xa8>)
 800ebea:	3a01      	subs	r2, #1
 800ebec:	2300      	movs	r3, #0
 800ebee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ebf2:	f7ff fe5d 	bl	800e8b0 <__multadd>
 800ebf6:	4606      	mov	r6, r0
 800ebf8:	10ad      	asrs	r5, r5, #2
 800ebfa:	d03d      	beq.n	800ec78 <__pow5mult+0xa0>
 800ebfc:	69fc      	ldr	r4, [r7, #28]
 800ebfe:	b97c      	cbnz	r4, 800ec20 <__pow5mult+0x48>
 800ec00:	2010      	movs	r0, #16
 800ec02:	f7fd fe15 	bl	800c830 <malloc>
 800ec06:	4602      	mov	r2, r0
 800ec08:	61f8      	str	r0, [r7, #28]
 800ec0a:	b928      	cbnz	r0, 800ec18 <__pow5mult+0x40>
 800ec0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ec84 <__pow5mult+0xac>)
 800ec0e:	481e      	ldr	r0, [pc, #120]	@ (800ec88 <__pow5mult+0xb0>)
 800ec10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ec14:	f001 fee4 	bl	80109e0 <__assert_func>
 800ec18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ec1c:	6004      	str	r4, [r0, #0]
 800ec1e:	60c4      	str	r4, [r0, #12]
 800ec20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ec24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ec28:	b94c      	cbnz	r4, 800ec3e <__pow5mult+0x66>
 800ec2a:	f240 2171 	movw	r1, #625	@ 0x271
 800ec2e:	4638      	mov	r0, r7
 800ec30:	f7ff ff1a 	bl	800ea68 <__i2b>
 800ec34:	2300      	movs	r3, #0
 800ec36:	f8c8 0008 	str.w	r0, [r8, #8]
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	6003      	str	r3, [r0, #0]
 800ec3e:	f04f 0900 	mov.w	r9, #0
 800ec42:	07eb      	lsls	r3, r5, #31
 800ec44:	d50a      	bpl.n	800ec5c <__pow5mult+0x84>
 800ec46:	4631      	mov	r1, r6
 800ec48:	4622      	mov	r2, r4
 800ec4a:	4638      	mov	r0, r7
 800ec4c:	f7ff ff22 	bl	800ea94 <__multiply>
 800ec50:	4631      	mov	r1, r6
 800ec52:	4680      	mov	r8, r0
 800ec54:	4638      	mov	r0, r7
 800ec56:	f7ff fe09 	bl	800e86c <_Bfree>
 800ec5a:	4646      	mov	r6, r8
 800ec5c:	106d      	asrs	r5, r5, #1
 800ec5e:	d00b      	beq.n	800ec78 <__pow5mult+0xa0>
 800ec60:	6820      	ldr	r0, [r4, #0]
 800ec62:	b938      	cbnz	r0, 800ec74 <__pow5mult+0x9c>
 800ec64:	4622      	mov	r2, r4
 800ec66:	4621      	mov	r1, r4
 800ec68:	4638      	mov	r0, r7
 800ec6a:	f7ff ff13 	bl	800ea94 <__multiply>
 800ec6e:	6020      	str	r0, [r4, #0]
 800ec70:	f8c0 9000 	str.w	r9, [r0]
 800ec74:	4604      	mov	r4, r0
 800ec76:	e7e4      	b.n	800ec42 <__pow5mult+0x6a>
 800ec78:	4630      	mov	r0, r6
 800ec7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec7e:	bf00      	nop
 800ec80:	080138d0 	.word	0x080138d0
 800ec84:	08013724 	.word	0x08013724
 800ec88:	080137a4 	.word	0x080137a4

0800ec8c <__lshift>:
 800ec8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec90:	460c      	mov	r4, r1
 800ec92:	6849      	ldr	r1, [r1, #4]
 800ec94:	6923      	ldr	r3, [r4, #16]
 800ec96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec9a:	68a3      	ldr	r3, [r4, #8]
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	4691      	mov	r9, r2
 800eca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eca4:	f108 0601 	add.w	r6, r8, #1
 800eca8:	42b3      	cmp	r3, r6
 800ecaa:	db0b      	blt.n	800ecc4 <__lshift+0x38>
 800ecac:	4638      	mov	r0, r7
 800ecae:	f7ff fd9d 	bl	800e7ec <_Balloc>
 800ecb2:	4605      	mov	r5, r0
 800ecb4:	b948      	cbnz	r0, 800ecca <__lshift+0x3e>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	4b28      	ldr	r3, [pc, #160]	@ (800ed5c <__lshift+0xd0>)
 800ecba:	4829      	ldr	r0, [pc, #164]	@ (800ed60 <__lshift+0xd4>)
 800ecbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ecc0:	f001 fe8e 	bl	80109e0 <__assert_func>
 800ecc4:	3101      	adds	r1, #1
 800ecc6:	005b      	lsls	r3, r3, #1
 800ecc8:	e7ee      	b.n	800eca8 <__lshift+0x1c>
 800ecca:	2300      	movs	r3, #0
 800eccc:	f100 0114 	add.w	r1, r0, #20
 800ecd0:	f100 0210 	add.w	r2, r0, #16
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	4553      	cmp	r3, sl
 800ecd8:	db33      	blt.n	800ed42 <__lshift+0xb6>
 800ecda:	6920      	ldr	r0, [r4, #16]
 800ecdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ece0:	f104 0314 	add.w	r3, r4, #20
 800ece4:	f019 091f 	ands.w	r9, r9, #31
 800ece8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ecec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ecf0:	d02b      	beq.n	800ed4a <__lshift+0xbe>
 800ecf2:	f1c9 0e20 	rsb	lr, r9, #32
 800ecf6:	468a      	mov	sl, r1
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	6818      	ldr	r0, [r3, #0]
 800ecfc:	fa00 f009 	lsl.w	r0, r0, r9
 800ed00:	4310      	orrs	r0, r2
 800ed02:	f84a 0b04 	str.w	r0, [sl], #4
 800ed06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed0a:	459c      	cmp	ip, r3
 800ed0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed10:	d8f3      	bhi.n	800ecfa <__lshift+0x6e>
 800ed12:	ebac 0304 	sub.w	r3, ip, r4
 800ed16:	3b15      	subs	r3, #21
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	f104 0015 	add.w	r0, r4, #21
 800ed22:	4560      	cmp	r0, ip
 800ed24:	bf88      	it	hi
 800ed26:	2304      	movhi	r3, #4
 800ed28:	50ca      	str	r2, [r1, r3]
 800ed2a:	b10a      	cbz	r2, 800ed30 <__lshift+0xa4>
 800ed2c:	f108 0602 	add.w	r6, r8, #2
 800ed30:	3e01      	subs	r6, #1
 800ed32:	4638      	mov	r0, r7
 800ed34:	612e      	str	r6, [r5, #16]
 800ed36:	4621      	mov	r1, r4
 800ed38:	f7ff fd98 	bl	800e86c <_Bfree>
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed42:	f842 0f04 	str.w	r0, [r2, #4]!
 800ed46:	3301      	adds	r3, #1
 800ed48:	e7c5      	b.n	800ecd6 <__lshift+0x4a>
 800ed4a:	3904      	subs	r1, #4
 800ed4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed50:	f841 2f04 	str.w	r2, [r1, #4]!
 800ed54:	459c      	cmp	ip, r3
 800ed56:	d8f9      	bhi.n	800ed4c <__lshift+0xc0>
 800ed58:	e7ea      	b.n	800ed30 <__lshift+0xa4>
 800ed5a:	bf00      	nop
 800ed5c:	08013793 	.word	0x08013793
 800ed60:	080137a4 	.word	0x080137a4

0800ed64 <__mcmp>:
 800ed64:	690a      	ldr	r2, [r1, #16]
 800ed66:	4603      	mov	r3, r0
 800ed68:	6900      	ldr	r0, [r0, #16]
 800ed6a:	1a80      	subs	r0, r0, r2
 800ed6c:	b530      	push	{r4, r5, lr}
 800ed6e:	d10e      	bne.n	800ed8e <__mcmp+0x2a>
 800ed70:	3314      	adds	r3, #20
 800ed72:	3114      	adds	r1, #20
 800ed74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ed78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed84:	4295      	cmp	r5, r2
 800ed86:	d003      	beq.n	800ed90 <__mcmp+0x2c>
 800ed88:	d205      	bcs.n	800ed96 <__mcmp+0x32>
 800ed8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed8e:	bd30      	pop	{r4, r5, pc}
 800ed90:	42a3      	cmp	r3, r4
 800ed92:	d3f3      	bcc.n	800ed7c <__mcmp+0x18>
 800ed94:	e7fb      	b.n	800ed8e <__mcmp+0x2a>
 800ed96:	2001      	movs	r0, #1
 800ed98:	e7f9      	b.n	800ed8e <__mcmp+0x2a>
	...

0800ed9c <__mdiff>:
 800ed9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda0:	4689      	mov	r9, r1
 800eda2:	4606      	mov	r6, r0
 800eda4:	4611      	mov	r1, r2
 800eda6:	4648      	mov	r0, r9
 800eda8:	4614      	mov	r4, r2
 800edaa:	f7ff ffdb 	bl	800ed64 <__mcmp>
 800edae:	1e05      	subs	r5, r0, #0
 800edb0:	d112      	bne.n	800edd8 <__mdiff+0x3c>
 800edb2:	4629      	mov	r1, r5
 800edb4:	4630      	mov	r0, r6
 800edb6:	f7ff fd19 	bl	800e7ec <_Balloc>
 800edba:	4602      	mov	r2, r0
 800edbc:	b928      	cbnz	r0, 800edca <__mdiff+0x2e>
 800edbe:	4b3f      	ldr	r3, [pc, #252]	@ (800eebc <__mdiff+0x120>)
 800edc0:	f240 2137 	movw	r1, #567	@ 0x237
 800edc4:	483e      	ldr	r0, [pc, #248]	@ (800eec0 <__mdiff+0x124>)
 800edc6:	f001 fe0b 	bl	80109e0 <__assert_func>
 800edca:	2301      	movs	r3, #1
 800edcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800edd0:	4610      	mov	r0, r2
 800edd2:	b003      	add	sp, #12
 800edd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edd8:	bfbc      	itt	lt
 800edda:	464b      	movlt	r3, r9
 800eddc:	46a1      	movlt	r9, r4
 800edde:	4630      	mov	r0, r6
 800ede0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ede4:	bfba      	itte	lt
 800ede6:	461c      	movlt	r4, r3
 800ede8:	2501      	movlt	r5, #1
 800edea:	2500      	movge	r5, #0
 800edec:	f7ff fcfe 	bl	800e7ec <_Balloc>
 800edf0:	4602      	mov	r2, r0
 800edf2:	b918      	cbnz	r0, 800edfc <__mdiff+0x60>
 800edf4:	4b31      	ldr	r3, [pc, #196]	@ (800eebc <__mdiff+0x120>)
 800edf6:	f240 2145 	movw	r1, #581	@ 0x245
 800edfa:	e7e3      	b.n	800edc4 <__mdiff+0x28>
 800edfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee00:	6926      	ldr	r6, [r4, #16]
 800ee02:	60c5      	str	r5, [r0, #12]
 800ee04:	f109 0310 	add.w	r3, r9, #16
 800ee08:	f109 0514 	add.w	r5, r9, #20
 800ee0c:	f104 0e14 	add.w	lr, r4, #20
 800ee10:	f100 0b14 	add.w	fp, r0, #20
 800ee14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ee18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ee1c:	9301      	str	r3, [sp, #4]
 800ee1e:	46d9      	mov	r9, fp
 800ee20:	f04f 0c00 	mov.w	ip, #0
 800ee24:	9b01      	ldr	r3, [sp, #4]
 800ee26:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ee2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ee2e:	9301      	str	r3, [sp, #4]
 800ee30:	fa1f f38a 	uxth.w	r3, sl
 800ee34:	4619      	mov	r1, r3
 800ee36:	b283      	uxth	r3, r0
 800ee38:	1acb      	subs	r3, r1, r3
 800ee3a:	0c00      	lsrs	r0, r0, #16
 800ee3c:	4463      	add	r3, ip
 800ee3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ee42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ee4c:	4576      	cmp	r6, lr
 800ee4e:	f849 3b04 	str.w	r3, [r9], #4
 800ee52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ee56:	d8e5      	bhi.n	800ee24 <__mdiff+0x88>
 800ee58:	1b33      	subs	r3, r6, r4
 800ee5a:	3b15      	subs	r3, #21
 800ee5c:	f023 0303 	bic.w	r3, r3, #3
 800ee60:	3415      	adds	r4, #21
 800ee62:	3304      	adds	r3, #4
 800ee64:	42a6      	cmp	r6, r4
 800ee66:	bf38      	it	cc
 800ee68:	2304      	movcc	r3, #4
 800ee6a:	441d      	add	r5, r3
 800ee6c:	445b      	add	r3, fp
 800ee6e:	461e      	mov	r6, r3
 800ee70:	462c      	mov	r4, r5
 800ee72:	4544      	cmp	r4, r8
 800ee74:	d30e      	bcc.n	800ee94 <__mdiff+0xf8>
 800ee76:	f108 0103 	add.w	r1, r8, #3
 800ee7a:	1b49      	subs	r1, r1, r5
 800ee7c:	f021 0103 	bic.w	r1, r1, #3
 800ee80:	3d03      	subs	r5, #3
 800ee82:	45a8      	cmp	r8, r5
 800ee84:	bf38      	it	cc
 800ee86:	2100      	movcc	r1, #0
 800ee88:	440b      	add	r3, r1
 800ee8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee8e:	b191      	cbz	r1, 800eeb6 <__mdiff+0x11a>
 800ee90:	6117      	str	r7, [r2, #16]
 800ee92:	e79d      	b.n	800edd0 <__mdiff+0x34>
 800ee94:	f854 1b04 	ldr.w	r1, [r4], #4
 800ee98:	46e6      	mov	lr, ip
 800ee9a:	0c08      	lsrs	r0, r1, #16
 800ee9c:	fa1c fc81 	uxtah	ip, ip, r1
 800eea0:	4471      	add	r1, lr
 800eea2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800eea6:	b289      	uxth	r1, r1
 800eea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800eeac:	f846 1b04 	str.w	r1, [r6], #4
 800eeb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eeb4:	e7dd      	b.n	800ee72 <__mdiff+0xd6>
 800eeb6:	3f01      	subs	r7, #1
 800eeb8:	e7e7      	b.n	800ee8a <__mdiff+0xee>
 800eeba:	bf00      	nop
 800eebc:	08013793 	.word	0x08013793
 800eec0:	080137a4 	.word	0x080137a4

0800eec4 <__ulp>:
 800eec4:	b082      	sub	sp, #8
 800eec6:	ed8d 0b00 	vstr	d0, [sp]
 800eeca:	9a01      	ldr	r2, [sp, #4]
 800eecc:	4b0f      	ldr	r3, [pc, #60]	@ (800ef0c <__ulp+0x48>)
 800eece:	4013      	ands	r3, r2
 800eed0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	dc08      	bgt.n	800eeea <__ulp+0x26>
 800eed8:	425b      	negs	r3, r3
 800eeda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800eede:	ea4f 5223 	mov.w	r2, r3, asr #20
 800eee2:	da04      	bge.n	800eeee <__ulp+0x2a>
 800eee4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800eee8:	4113      	asrs	r3, r2
 800eeea:	2200      	movs	r2, #0
 800eeec:	e008      	b.n	800ef00 <__ulp+0x3c>
 800eeee:	f1a2 0314 	sub.w	r3, r2, #20
 800eef2:	2b1e      	cmp	r3, #30
 800eef4:	bfda      	itte	le
 800eef6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800eefa:	40da      	lsrle	r2, r3
 800eefc:	2201      	movgt	r2, #1
 800eefe:	2300      	movs	r3, #0
 800ef00:	4619      	mov	r1, r3
 800ef02:	4610      	mov	r0, r2
 800ef04:	ec41 0b10 	vmov	d0, r0, r1
 800ef08:	b002      	add	sp, #8
 800ef0a:	4770      	bx	lr
 800ef0c:	7ff00000 	.word	0x7ff00000

0800ef10 <__b2d>:
 800ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef14:	6906      	ldr	r6, [r0, #16]
 800ef16:	f100 0814 	add.w	r8, r0, #20
 800ef1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ef1e:	1f37      	subs	r7, r6, #4
 800ef20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ef24:	4610      	mov	r0, r2
 800ef26:	f7ff fd53 	bl	800e9d0 <__hi0bits>
 800ef2a:	f1c0 0320 	rsb	r3, r0, #32
 800ef2e:	280a      	cmp	r0, #10
 800ef30:	600b      	str	r3, [r1, #0]
 800ef32:	491b      	ldr	r1, [pc, #108]	@ (800efa0 <__b2d+0x90>)
 800ef34:	dc15      	bgt.n	800ef62 <__b2d+0x52>
 800ef36:	f1c0 0c0b 	rsb	ip, r0, #11
 800ef3a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ef3e:	45b8      	cmp	r8, r7
 800ef40:	ea43 0501 	orr.w	r5, r3, r1
 800ef44:	bf34      	ite	cc
 800ef46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef4a:	2300      	movcs	r3, #0
 800ef4c:	3015      	adds	r0, #21
 800ef4e:	fa02 f000 	lsl.w	r0, r2, r0
 800ef52:	fa23 f30c 	lsr.w	r3, r3, ip
 800ef56:	4303      	orrs	r3, r0
 800ef58:	461c      	mov	r4, r3
 800ef5a:	ec45 4b10 	vmov	d0, r4, r5
 800ef5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef62:	45b8      	cmp	r8, r7
 800ef64:	bf3a      	itte	cc
 800ef66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ef6a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ef6e:	2300      	movcs	r3, #0
 800ef70:	380b      	subs	r0, #11
 800ef72:	d012      	beq.n	800ef9a <__b2d+0x8a>
 800ef74:	f1c0 0120 	rsb	r1, r0, #32
 800ef78:	fa23 f401 	lsr.w	r4, r3, r1
 800ef7c:	4082      	lsls	r2, r0
 800ef7e:	4322      	orrs	r2, r4
 800ef80:	4547      	cmp	r7, r8
 800ef82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ef86:	bf8c      	ite	hi
 800ef88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ef8c:	2200      	movls	r2, #0
 800ef8e:	4083      	lsls	r3, r0
 800ef90:	40ca      	lsrs	r2, r1
 800ef92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ef96:	4313      	orrs	r3, r2
 800ef98:	e7de      	b.n	800ef58 <__b2d+0x48>
 800ef9a:	ea42 0501 	orr.w	r5, r2, r1
 800ef9e:	e7db      	b.n	800ef58 <__b2d+0x48>
 800efa0:	3ff00000 	.word	0x3ff00000

0800efa4 <__d2b>:
 800efa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efa8:	460f      	mov	r7, r1
 800efaa:	2101      	movs	r1, #1
 800efac:	ec59 8b10 	vmov	r8, r9, d0
 800efb0:	4616      	mov	r6, r2
 800efb2:	f7ff fc1b 	bl	800e7ec <_Balloc>
 800efb6:	4604      	mov	r4, r0
 800efb8:	b930      	cbnz	r0, 800efc8 <__d2b+0x24>
 800efba:	4602      	mov	r2, r0
 800efbc:	4b23      	ldr	r3, [pc, #140]	@ (800f04c <__d2b+0xa8>)
 800efbe:	4824      	ldr	r0, [pc, #144]	@ (800f050 <__d2b+0xac>)
 800efc0:	f240 310f 	movw	r1, #783	@ 0x30f
 800efc4:	f001 fd0c 	bl	80109e0 <__assert_func>
 800efc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800efcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800efd0:	b10d      	cbz	r5, 800efd6 <__d2b+0x32>
 800efd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800efd6:	9301      	str	r3, [sp, #4]
 800efd8:	f1b8 0300 	subs.w	r3, r8, #0
 800efdc:	d023      	beq.n	800f026 <__d2b+0x82>
 800efde:	4668      	mov	r0, sp
 800efe0:	9300      	str	r3, [sp, #0]
 800efe2:	f7ff fd14 	bl	800ea0e <__lo0bits>
 800efe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800efea:	b1d0      	cbz	r0, 800f022 <__d2b+0x7e>
 800efec:	f1c0 0320 	rsb	r3, r0, #32
 800eff0:	fa02 f303 	lsl.w	r3, r2, r3
 800eff4:	430b      	orrs	r3, r1
 800eff6:	40c2      	lsrs	r2, r0
 800eff8:	6163      	str	r3, [r4, #20]
 800effa:	9201      	str	r2, [sp, #4]
 800effc:	9b01      	ldr	r3, [sp, #4]
 800effe:	61a3      	str	r3, [r4, #24]
 800f000:	2b00      	cmp	r3, #0
 800f002:	bf0c      	ite	eq
 800f004:	2201      	moveq	r2, #1
 800f006:	2202      	movne	r2, #2
 800f008:	6122      	str	r2, [r4, #16]
 800f00a:	b1a5      	cbz	r5, 800f036 <__d2b+0x92>
 800f00c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f010:	4405      	add	r5, r0
 800f012:	603d      	str	r5, [r7, #0]
 800f014:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f018:	6030      	str	r0, [r6, #0]
 800f01a:	4620      	mov	r0, r4
 800f01c:	b003      	add	sp, #12
 800f01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f022:	6161      	str	r1, [r4, #20]
 800f024:	e7ea      	b.n	800effc <__d2b+0x58>
 800f026:	a801      	add	r0, sp, #4
 800f028:	f7ff fcf1 	bl	800ea0e <__lo0bits>
 800f02c:	9b01      	ldr	r3, [sp, #4]
 800f02e:	6163      	str	r3, [r4, #20]
 800f030:	3020      	adds	r0, #32
 800f032:	2201      	movs	r2, #1
 800f034:	e7e8      	b.n	800f008 <__d2b+0x64>
 800f036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f03a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f03e:	6038      	str	r0, [r7, #0]
 800f040:	6918      	ldr	r0, [r3, #16]
 800f042:	f7ff fcc5 	bl	800e9d0 <__hi0bits>
 800f046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f04a:	e7e5      	b.n	800f018 <__d2b+0x74>
 800f04c:	08013793 	.word	0x08013793
 800f050:	080137a4 	.word	0x080137a4

0800f054 <__ratio>:
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	b085      	sub	sp, #20
 800f05a:	e9cd 1000 	strd	r1, r0, [sp]
 800f05e:	a902      	add	r1, sp, #8
 800f060:	f7ff ff56 	bl	800ef10 <__b2d>
 800f064:	9800      	ldr	r0, [sp, #0]
 800f066:	a903      	add	r1, sp, #12
 800f068:	ec55 4b10 	vmov	r4, r5, d0
 800f06c:	f7ff ff50 	bl	800ef10 <__b2d>
 800f070:	9b01      	ldr	r3, [sp, #4]
 800f072:	6919      	ldr	r1, [r3, #16]
 800f074:	9b00      	ldr	r3, [sp, #0]
 800f076:	691b      	ldr	r3, [r3, #16]
 800f078:	1ac9      	subs	r1, r1, r3
 800f07a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f07e:	1a9b      	subs	r3, r3, r2
 800f080:	ec5b ab10 	vmov	sl, fp, d0
 800f084:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f088:	2b00      	cmp	r3, #0
 800f08a:	bfce      	itee	gt
 800f08c:	462a      	movgt	r2, r5
 800f08e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f092:	465a      	movle	r2, fp
 800f094:	462f      	mov	r7, r5
 800f096:	46d9      	mov	r9, fp
 800f098:	bfcc      	ite	gt
 800f09a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f09e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f0a2:	464b      	mov	r3, r9
 800f0a4:	4652      	mov	r2, sl
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	4639      	mov	r1, r7
 800f0aa:	f7f1 fbef 	bl	800088c <__aeabi_ddiv>
 800f0ae:	ec41 0b10 	vmov	d0, r0, r1
 800f0b2:	b005      	add	sp, #20
 800f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f0b8 <__copybits>:
 800f0b8:	3901      	subs	r1, #1
 800f0ba:	b570      	push	{r4, r5, r6, lr}
 800f0bc:	1149      	asrs	r1, r1, #5
 800f0be:	6914      	ldr	r4, [r2, #16]
 800f0c0:	3101      	adds	r1, #1
 800f0c2:	f102 0314 	add.w	r3, r2, #20
 800f0c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f0ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f0ce:	1f05      	subs	r5, r0, #4
 800f0d0:	42a3      	cmp	r3, r4
 800f0d2:	d30c      	bcc.n	800f0ee <__copybits+0x36>
 800f0d4:	1aa3      	subs	r3, r4, r2
 800f0d6:	3b11      	subs	r3, #17
 800f0d8:	f023 0303 	bic.w	r3, r3, #3
 800f0dc:	3211      	adds	r2, #17
 800f0de:	42a2      	cmp	r2, r4
 800f0e0:	bf88      	it	hi
 800f0e2:	2300      	movhi	r3, #0
 800f0e4:	4418      	add	r0, r3
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	4288      	cmp	r0, r1
 800f0ea:	d305      	bcc.n	800f0f8 <__copybits+0x40>
 800f0ec:	bd70      	pop	{r4, r5, r6, pc}
 800f0ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800f0f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800f0f6:	e7eb      	b.n	800f0d0 <__copybits+0x18>
 800f0f8:	f840 3b04 	str.w	r3, [r0], #4
 800f0fc:	e7f4      	b.n	800f0e8 <__copybits+0x30>

0800f0fe <__any_on>:
 800f0fe:	f100 0214 	add.w	r2, r0, #20
 800f102:	6900      	ldr	r0, [r0, #16]
 800f104:	114b      	asrs	r3, r1, #5
 800f106:	4298      	cmp	r0, r3
 800f108:	b510      	push	{r4, lr}
 800f10a:	db11      	blt.n	800f130 <__any_on+0x32>
 800f10c:	dd0a      	ble.n	800f124 <__any_on+0x26>
 800f10e:	f011 011f 	ands.w	r1, r1, #31
 800f112:	d007      	beq.n	800f124 <__any_on+0x26>
 800f114:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f118:	fa24 f001 	lsr.w	r0, r4, r1
 800f11c:	fa00 f101 	lsl.w	r1, r0, r1
 800f120:	428c      	cmp	r4, r1
 800f122:	d10b      	bne.n	800f13c <__any_on+0x3e>
 800f124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f128:	4293      	cmp	r3, r2
 800f12a:	d803      	bhi.n	800f134 <__any_on+0x36>
 800f12c:	2000      	movs	r0, #0
 800f12e:	bd10      	pop	{r4, pc}
 800f130:	4603      	mov	r3, r0
 800f132:	e7f7      	b.n	800f124 <__any_on+0x26>
 800f134:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f138:	2900      	cmp	r1, #0
 800f13a:	d0f5      	beq.n	800f128 <__any_on+0x2a>
 800f13c:	2001      	movs	r0, #1
 800f13e:	e7f6      	b.n	800f12e <__any_on+0x30>

0800f140 <sulp>:
 800f140:	b570      	push	{r4, r5, r6, lr}
 800f142:	4604      	mov	r4, r0
 800f144:	460d      	mov	r5, r1
 800f146:	ec45 4b10 	vmov	d0, r4, r5
 800f14a:	4616      	mov	r6, r2
 800f14c:	f7ff feba 	bl	800eec4 <__ulp>
 800f150:	ec51 0b10 	vmov	r0, r1, d0
 800f154:	b17e      	cbz	r6, 800f176 <sulp+0x36>
 800f156:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f15a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f15e:	2b00      	cmp	r3, #0
 800f160:	dd09      	ble.n	800f176 <sulp+0x36>
 800f162:	051b      	lsls	r3, r3, #20
 800f164:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f168:	2400      	movs	r4, #0
 800f16a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f16e:	4622      	mov	r2, r4
 800f170:	462b      	mov	r3, r5
 800f172:	f7f1 fa61 	bl	8000638 <__aeabi_dmul>
 800f176:	ec41 0b10 	vmov	d0, r0, r1
 800f17a:	bd70      	pop	{r4, r5, r6, pc}
 800f17c:	0000      	movs	r0, r0
	...

0800f180 <_strtod_l>:
 800f180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f184:	b09f      	sub	sp, #124	@ 0x7c
 800f186:	460c      	mov	r4, r1
 800f188:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f18a:	2200      	movs	r2, #0
 800f18c:	921a      	str	r2, [sp, #104]	@ 0x68
 800f18e:	9005      	str	r0, [sp, #20]
 800f190:	f04f 0a00 	mov.w	sl, #0
 800f194:	f04f 0b00 	mov.w	fp, #0
 800f198:	460a      	mov	r2, r1
 800f19a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f19c:	7811      	ldrb	r1, [r2, #0]
 800f19e:	292b      	cmp	r1, #43	@ 0x2b
 800f1a0:	d04a      	beq.n	800f238 <_strtod_l+0xb8>
 800f1a2:	d838      	bhi.n	800f216 <_strtod_l+0x96>
 800f1a4:	290d      	cmp	r1, #13
 800f1a6:	d832      	bhi.n	800f20e <_strtod_l+0x8e>
 800f1a8:	2908      	cmp	r1, #8
 800f1aa:	d832      	bhi.n	800f212 <_strtod_l+0x92>
 800f1ac:	2900      	cmp	r1, #0
 800f1ae:	d03b      	beq.n	800f228 <_strtod_l+0xa8>
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f1b6:	782a      	ldrb	r2, [r5, #0]
 800f1b8:	2a30      	cmp	r2, #48	@ 0x30
 800f1ba:	f040 80b2 	bne.w	800f322 <_strtod_l+0x1a2>
 800f1be:	786a      	ldrb	r2, [r5, #1]
 800f1c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f1c4:	2a58      	cmp	r2, #88	@ 0x58
 800f1c6:	d16e      	bne.n	800f2a6 <_strtod_l+0x126>
 800f1c8:	9302      	str	r3, [sp, #8]
 800f1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1cc:	9301      	str	r3, [sp, #4]
 800f1ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	4a8f      	ldr	r2, [pc, #572]	@ (800f410 <_strtod_l+0x290>)
 800f1d4:	9805      	ldr	r0, [sp, #20]
 800f1d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f1d8:	a919      	add	r1, sp, #100	@ 0x64
 800f1da:	f001 fc87 	bl	8010aec <__gethex>
 800f1de:	f010 060f 	ands.w	r6, r0, #15
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	d005      	beq.n	800f1f2 <_strtod_l+0x72>
 800f1e6:	2e06      	cmp	r6, #6
 800f1e8:	d128      	bne.n	800f23c <_strtod_l+0xbc>
 800f1ea:	3501      	adds	r5, #1
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800f1f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800f1f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f040 858e 	bne.w	800fd16 <_strtod_l+0xb96>
 800f1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1fc:	b1cb      	cbz	r3, 800f232 <_strtod_l+0xb2>
 800f1fe:	4652      	mov	r2, sl
 800f200:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f204:	ec43 2b10 	vmov	d0, r2, r3
 800f208:	b01f      	add	sp, #124	@ 0x7c
 800f20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f20e:	2920      	cmp	r1, #32
 800f210:	d1ce      	bne.n	800f1b0 <_strtod_l+0x30>
 800f212:	3201      	adds	r2, #1
 800f214:	e7c1      	b.n	800f19a <_strtod_l+0x1a>
 800f216:	292d      	cmp	r1, #45	@ 0x2d
 800f218:	d1ca      	bne.n	800f1b0 <_strtod_l+0x30>
 800f21a:	2101      	movs	r1, #1
 800f21c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f21e:	1c51      	adds	r1, r2, #1
 800f220:	9119      	str	r1, [sp, #100]	@ 0x64
 800f222:	7852      	ldrb	r2, [r2, #1]
 800f224:	2a00      	cmp	r2, #0
 800f226:	d1c5      	bne.n	800f1b4 <_strtod_l+0x34>
 800f228:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f22a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f040 8570 	bne.w	800fd12 <_strtod_l+0xb92>
 800f232:	4652      	mov	r2, sl
 800f234:	465b      	mov	r3, fp
 800f236:	e7e5      	b.n	800f204 <_strtod_l+0x84>
 800f238:	2100      	movs	r1, #0
 800f23a:	e7ef      	b.n	800f21c <_strtod_l+0x9c>
 800f23c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f23e:	b13a      	cbz	r2, 800f250 <_strtod_l+0xd0>
 800f240:	2135      	movs	r1, #53	@ 0x35
 800f242:	a81c      	add	r0, sp, #112	@ 0x70
 800f244:	f7ff ff38 	bl	800f0b8 <__copybits>
 800f248:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f24a:	9805      	ldr	r0, [sp, #20]
 800f24c:	f7ff fb0e 	bl	800e86c <_Bfree>
 800f250:	3e01      	subs	r6, #1
 800f252:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f254:	2e04      	cmp	r6, #4
 800f256:	d806      	bhi.n	800f266 <_strtod_l+0xe6>
 800f258:	e8df f006 	tbb	[pc, r6]
 800f25c:	201d0314 	.word	0x201d0314
 800f260:	14          	.byte	0x14
 800f261:	00          	.byte	0x00
 800f262:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f266:	05e1      	lsls	r1, r4, #23
 800f268:	bf48      	it	mi
 800f26a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f26e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f272:	0d1b      	lsrs	r3, r3, #20
 800f274:	051b      	lsls	r3, r3, #20
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1bb      	bne.n	800f1f2 <_strtod_l+0x72>
 800f27a:	f7fe fbd1 	bl	800da20 <__errno>
 800f27e:	2322      	movs	r3, #34	@ 0x22
 800f280:	6003      	str	r3, [r0, #0]
 800f282:	e7b6      	b.n	800f1f2 <_strtod_l+0x72>
 800f284:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f288:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f28c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f290:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f294:	e7e7      	b.n	800f266 <_strtod_l+0xe6>
 800f296:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f418 <_strtod_l+0x298>
 800f29a:	e7e4      	b.n	800f266 <_strtod_l+0xe6>
 800f29c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f2a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f2a4:	e7df      	b.n	800f266 <_strtod_l+0xe6>
 800f2a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f2ac:	785b      	ldrb	r3, [r3, #1]
 800f2ae:	2b30      	cmp	r3, #48	@ 0x30
 800f2b0:	d0f9      	beq.n	800f2a6 <_strtod_l+0x126>
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d09d      	beq.n	800f1f2 <_strtod_l+0x72>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	2700      	movs	r7, #0
 800f2ba:	9308      	str	r3, [sp, #32]
 800f2bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2be:	930c      	str	r3, [sp, #48]	@ 0x30
 800f2c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f2c2:	46b9      	mov	r9, r7
 800f2c4:	220a      	movs	r2, #10
 800f2c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f2c8:	7805      	ldrb	r5, [r0, #0]
 800f2ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f2ce:	b2d9      	uxtb	r1, r3
 800f2d0:	2909      	cmp	r1, #9
 800f2d2:	d928      	bls.n	800f326 <_strtod_l+0x1a6>
 800f2d4:	494f      	ldr	r1, [pc, #316]	@ (800f414 <_strtod_l+0x294>)
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f001 fb67 	bl	80109aa <strncmp>
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d032      	beq.n	800f346 <_strtod_l+0x1c6>
 800f2e0:	2000      	movs	r0, #0
 800f2e2:	462a      	mov	r2, r5
 800f2e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f2e6:	464d      	mov	r5, r9
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2a65      	cmp	r2, #101	@ 0x65
 800f2ec:	d001      	beq.n	800f2f2 <_strtod_l+0x172>
 800f2ee:	2a45      	cmp	r2, #69	@ 0x45
 800f2f0:	d114      	bne.n	800f31c <_strtod_l+0x19c>
 800f2f2:	b91d      	cbnz	r5, 800f2fc <_strtod_l+0x17c>
 800f2f4:	9a08      	ldr	r2, [sp, #32]
 800f2f6:	4302      	orrs	r2, r0
 800f2f8:	d096      	beq.n	800f228 <_strtod_l+0xa8>
 800f2fa:	2500      	movs	r5, #0
 800f2fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f2fe:	1c62      	adds	r2, r4, #1
 800f300:	9219      	str	r2, [sp, #100]	@ 0x64
 800f302:	7862      	ldrb	r2, [r4, #1]
 800f304:	2a2b      	cmp	r2, #43	@ 0x2b
 800f306:	d07a      	beq.n	800f3fe <_strtod_l+0x27e>
 800f308:	2a2d      	cmp	r2, #45	@ 0x2d
 800f30a:	d07e      	beq.n	800f40a <_strtod_l+0x28a>
 800f30c:	f04f 0c00 	mov.w	ip, #0
 800f310:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f314:	2909      	cmp	r1, #9
 800f316:	f240 8085 	bls.w	800f424 <_strtod_l+0x2a4>
 800f31a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f31c:	f04f 0800 	mov.w	r8, #0
 800f320:	e0a5      	b.n	800f46e <_strtod_l+0x2ee>
 800f322:	2300      	movs	r3, #0
 800f324:	e7c8      	b.n	800f2b8 <_strtod_l+0x138>
 800f326:	f1b9 0f08 	cmp.w	r9, #8
 800f32a:	bfd8      	it	le
 800f32c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f32e:	f100 0001 	add.w	r0, r0, #1
 800f332:	bfda      	itte	le
 800f334:	fb02 3301 	mlale	r3, r2, r1, r3
 800f338:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f33a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f33e:	f109 0901 	add.w	r9, r9, #1
 800f342:	9019      	str	r0, [sp, #100]	@ 0x64
 800f344:	e7bf      	b.n	800f2c6 <_strtod_l+0x146>
 800f346:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f34c:	785a      	ldrb	r2, [r3, #1]
 800f34e:	f1b9 0f00 	cmp.w	r9, #0
 800f352:	d03b      	beq.n	800f3cc <_strtod_l+0x24c>
 800f354:	900a      	str	r0, [sp, #40]	@ 0x28
 800f356:	464d      	mov	r5, r9
 800f358:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f35c:	2b09      	cmp	r3, #9
 800f35e:	d912      	bls.n	800f386 <_strtod_l+0x206>
 800f360:	2301      	movs	r3, #1
 800f362:	e7c2      	b.n	800f2ea <_strtod_l+0x16a>
 800f364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	9219      	str	r2, [sp, #100]	@ 0x64
 800f36a:	785a      	ldrb	r2, [r3, #1]
 800f36c:	3001      	adds	r0, #1
 800f36e:	2a30      	cmp	r2, #48	@ 0x30
 800f370:	d0f8      	beq.n	800f364 <_strtod_l+0x1e4>
 800f372:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f376:	2b08      	cmp	r3, #8
 800f378:	f200 84d2 	bhi.w	800fd20 <_strtod_l+0xba0>
 800f37c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f37e:	900a      	str	r0, [sp, #40]	@ 0x28
 800f380:	2000      	movs	r0, #0
 800f382:	930c      	str	r3, [sp, #48]	@ 0x30
 800f384:	4605      	mov	r5, r0
 800f386:	3a30      	subs	r2, #48	@ 0x30
 800f388:	f100 0301 	add.w	r3, r0, #1
 800f38c:	d018      	beq.n	800f3c0 <_strtod_l+0x240>
 800f38e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f390:	4419      	add	r1, r3
 800f392:	910a      	str	r1, [sp, #40]	@ 0x28
 800f394:	462e      	mov	r6, r5
 800f396:	f04f 0e0a 	mov.w	lr, #10
 800f39a:	1c71      	adds	r1, r6, #1
 800f39c:	eba1 0c05 	sub.w	ip, r1, r5
 800f3a0:	4563      	cmp	r3, ip
 800f3a2:	dc15      	bgt.n	800f3d0 <_strtod_l+0x250>
 800f3a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f3a8:	182b      	adds	r3, r5, r0
 800f3aa:	2b08      	cmp	r3, #8
 800f3ac:	f105 0501 	add.w	r5, r5, #1
 800f3b0:	4405      	add	r5, r0
 800f3b2:	dc1a      	bgt.n	800f3ea <_strtod_l+0x26a>
 800f3b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f3b6:	230a      	movs	r3, #10
 800f3b8:	fb03 2301 	mla	r3, r3, r1, r2
 800f3bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3be:	2300      	movs	r3, #0
 800f3c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f3c2:	1c51      	adds	r1, r2, #1
 800f3c4:	9119      	str	r1, [sp, #100]	@ 0x64
 800f3c6:	7852      	ldrb	r2, [r2, #1]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	e7c5      	b.n	800f358 <_strtod_l+0x1d8>
 800f3cc:	4648      	mov	r0, r9
 800f3ce:	e7ce      	b.n	800f36e <_strtod_l+0x1ee>
 800f3d0:	2e08      	cmp	r6, #8
 800f3d2:	dc05      	bgt.n	800f3e0 <_strtod_l+0x260>
 800f3d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f3d6:	fb0e f606 	mul.w	r6, lr, r6
 800f3da:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f3dc:	460e      	mov	r6, r1
 800f3de:	e7dc      	b.n	800f39a <_strtod_l+0x21a>
 800f3e0:	2910      	cmp	r1, #16
 800f3e2:	bfd8      	it	le
 800f3e4:	fb0e f707 	mulle.w	r7, lr, r7
 800f3e8:	e7f8      	b.n	800f3dc <_strtod_l+0x25c>
 800f3ea:	2b0f      	cmp	r3, #15
 800f3ec:	bfdc      	itt	le
 800f3ee:	230a      	movle	r3, #10
 800f3f0:	fb03 2707 	mlale	r7, r3, r7, r2
 800f3f4:	e7e3      	b.n	800f3be <_strtod_l+0x23e>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	e77a      	b.n	800f2f4 <_strtod_l+0x174>
 800f3fe:	f04f 0c00 	mov.w	ip, #0
 800f402:	1ca2      	adds	r2, r4, #2
 800f404:	9219      	str	r2, [sp, #100]	@ 0x64
 800f406:	78a2      	ldrb	r2, [r4, #2]
 800f408:	e782      	b.n	800f310 <_strtod_l+0x190>
 800f40a:	f04f 0c01 	mov.w	ip, #1
 800f40e:	e7f8      	b.n	800f402 <_strtod_l+0x282>
 800f410:	080139e4 	.word	0x080139e4
 800f414:	080137fd 	.word	0x080137fd
 800f418:	7ff00000 	.word	0x7ff00000
 800f41c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f41e:	1c51      	adds	r1, r2, #1
 800f420:	9119      	str	r1, [sp, #100]	@ 0x64
 800f422:	7852      	ldrb	r2, [r2, #1]
 800f424:	2a30      	cmp	r2, #48	@ 0x30
 800f426:	d0f9      	beq.n	800f41c <_strtod_l+0x29c>
 800f428:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f42c:	2908      	cmp	r1, #8
 800f42e:	f63f af75 	bhi.w	800f31c <_strtod_l+0x19c>
 800f432:	3a30      	subs	r2, #48	@ 0x30
 800f434:	9209      	str	r2, [sp, #36]	@ 0x24
 800f436:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f438:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f43a:	f04f 080a 	mov.w	r8, #10
 800f43e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f440:	1c56      	adds	r6, r2, #1
 800f442:	9619      	str	r6, [sp, #100]	@ 0x64
 800f444:	7852      	ldrb	r2, [r2, #1]
 800f446:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f44a:	f1be 0f09 	cmp.w	lr, #9
 800f44e:	d939      	bls.n	800f4c4 <_strtod_l+0x344>
 800f450:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f452:	1a76      	subs	r6, r6, r1
 800f454:	2e08      	cmp	r6, #8
 800f456:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f45a:	dc03      	bgt.n	800f464 <_strtod_l+0x2e4>
 800f45c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f45e:	4588      	cmp	r8, r1
 800f460:	bfa8      	it	ge
 800f462:	4688      	movge	r8, r1
 800f464:	f1bc 0f00 	cmp.w	ip, #0
 800f468:	d001      	beq.n	800f46e <_strtod_l+0x2ee>
 800f46a:	f1c8 0800 	rsb	r8, r8, #0
 800f46e:	2d00      	cmp	r5, #0
 800f470:	d14e      	bne.n	800f510 <_strtod_l+0x390>
 800f472:	9908      	ldr	r1, [sp, #32]
 800f474:	4308      	orrs	r0, r1
 800f476:	f47f aebc 	bne.w	800f1f2 <_strtod_l+0x72>
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f47f aed4 	bne.w	800f228 <_strtod_l+0xa8>
 800f480:	2a69      	cmp	r2, #105	@ 0x69
 800f482:	d028      	beq.n	800f4d6 <_strtod_l+0x356>
 800f484:	dc25      	bgt.n	800f4d2 <_strtod_l+0x352>
 800f486:	2a49      	cmp	r2, #73	@ 0x49
 800f488:	d025      	beq.n	800f4d6 <_strtod_l+0x356>
 800f48a:	2a4e      	cmp	r2, #78	@ 0x4e
 800f48c:	f47f aecc 	bne.w	800f228 <_strtod_l+0xa8>
 800f490:	499a      	ldr	r1, [pc, #616]	@ (800f6fc <_strtod_l+0x57c>)
 800f492:	a819      	add	r0, sp, #100	@ 0x64
 800f494:	f001 fd4c 	bl	8010f30 <__match>
 800f498:	2800      	cmp	r0, #0
 800f49a:	f43f aec5 	beq.w	800f228 <_strtod_l+0xa8>
 800f49e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b28      	cmp	r3, #40	@ 0x28
 800f4a4:	d12e      	bne.n	800f504 <_strtod_l+0x384>
 800f4a6:	4996      	ldr	r1, [pc, #600]	@ (800f700 <_strtod_l+0x580>)
 800f4a8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f4aa:	a819      	add	r0, sp, #100	@ 0x64
 800f4ac:	f001 fd54 	bl	8010f58 <__hexnan>
 800f4b0:	2805      	cmp	r0, #5
 800f4b2:	d127      	bne.n	800f504 <_strtod_l+0x384>
 800f4b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f4b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f4ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f4be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f4c2:	e696      	b.n	800f1f2 <_strtod_l+0x72>
 800f4c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f4c6:	fb08 2101 	mla	r1, r8, r1, r2
 800f4ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f4ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4d0:	e7b5      	b.n	800f43e <_strtod_l+0x2be>
 800f4d2:	2a6e      	cmp	r2, #110	@ 0x6e
 800f4d4:	e7da      	b.n	800f48c <_strtod_l+0x30c>
 800f4d6:	498b      	ldr	r1, [pc, #556]	@ (800f704 <_strtod_l+0x584>)
 800f4d8:	a819      	add	r0, sp, #100	@ 0x64
 800f4da:	f001 fd29 	bl	8010f30 <__match>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	f43f aea2 	beq.w	800f228 <_strtod_l+0xa8>
 800f4e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4e6:	4988      	ldr	r1, [pc, #544]	@ (800f708 <_strtod_l+0x588>)
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	a819      	add	r0, sp, #100	@ 0x64
 800f4ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800f4ee:	f001 fd1f 	bl	8010f30 <__match>
 800f4f2:	b910      	cbnz	r0, 800f4fa <_strtod_l+0x37a>
 800f4f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800f4fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f718 <_strtod_l+0x598>
 800f4fe:	f04f 0a00 	mov.w	sl, #0
 800f502:	e676      	b.n	800f1f2 <_strtod_l+0x72>
 800f504:	4881      	ldr	r0, [pc, #516]	@ (800f70c <_strtod_l+0x58c>)
 800f506:	f001 fa63 	bl	80109d0 <nan>
 800f50a:	ec5b ab10 	vmov	sl, fp, d0
 800f50e:	e670      	b.n	800f1f2 <_strtod_l+0x72>
 800f510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f512:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f514:	eba8 0303 	sub.w	r3, r8, r3
 800f518:	f1b9 0f00 	cmp.w	r9, #0
 800f51c:	bf08      	it	eq
 800f51e:	46a9      	moveq	r9, r5
 800f520:	2d10      	cmp	r5, #16
 800f522:	9309      	str	r3, [sp, #36]	@ 0x24
 800f524:	462c      	mov	r4, r5
 800f526:	bfa8      	it	ge
 800f528:	2410      	movge	r4, #16
 800f52a:	f7f1 f80b 	bl	8000544 <__aeabi_ui2d>
 800f52e:	2d09      	cmp	r5, #9
 800f530:	4682      	mov	sl, r0
 800f532:	468b      	mov	fp, r1
 800f534:	dc13      	bgt.n	800f55e <_strtod_l+0x3de>
 800f536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f43f ae5a 	beq.w	800f1f2 <_strtod_l+0x72>
 800f53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f540:	dd78      	ble.n	800f634 <_strtod_l+0x4b4>
 800f542:	2b16      	cmp	r3, #22
 800f544:	dc5f      	bgt.n	800f606 <_strtod_l+0x486>
 800f546:	4972      	ldr	r1, [pc, #456]	@ (800f710 <_strtod_l+0x590>)
 800f548:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f54c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f550:	4652      	mov	r2, sl
 800f552:	465b      	mov	r3, fp
 800f554:	f7f1 f870 	bl	8000638 <__aeabi_dmul>
 800f558:	4682      	mov	sl, r0
 800f55a:	468b      	mov	fp, r1
 800f55c:	e649      	b.n	800f1f2 <_strtod_l+0x72>
 800f55e:	4b6c      	ldr	r3, [pc, #432]	@ (800f710 <_strtod_l+0x590>)
 800f560:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f564:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f568:	f7f1 f866 	bl	8000638 <__aeabi_dmul>
 800f56c:	4682      	mov	sl, r0
 800f56e:	4638      	mov	r0, r7
 800f570:	468b      	mov	fp, r1
 800f572:	f7f0 ffe7 	bl	8000544 <__aeabi_ui2d>
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	4650      	mov	r0, sl
 800f57c:	4659      	mov	r1, fp
 800f57e:	f7f0 fea5 	bl	80002cc <__adddf3>
 800f582:	2d0f      	cmp	r5, #15
 800f584:	4682      	mov	sl, r0
 800f586:	468b      	mov	fp, r1
 800f588:	ddd5      	ble.n	800f536 <_strtod_l+0x3b6>
 800f58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f58c:	1b2c      	subs	r4, r5, r4
 800f58e:	441c      	add	r4, r3
 800f590:	2c00      	cmp	r4, #0
 800f592:	f340 8093 	ble.w	800f6bc <_strtod_l+0x53c>
 800f596:	f014 030f 	ands.w	r3, r4, #15
 800f59a:	d00a      	beq.n	800f5b2 <_strtod_l+0x432>
 800f59c:	495c      	ldr	r1, [pc, #368]	@ (800f710 <_strtod_l+0x590>)
 800f59e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f5a2:	4652      	mov	r2, sl
 800f5a4:	465b      	mov	r3, fp
 800f5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f5aa:	f7f1 f845 	bl	8000638 <__aeabi_dmul>
 800f5ae:	4682      	mov	sl, r0
 800f5b0:	468b      	mov	fp, r1
 800f5b2:	f034 040f 	bics.w	r4, r4, #15
 800f5b6:	d073      	beq.n	800f6a0 <_strtod_l+0x520>
 800f5b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f5bc:	dd49      	ble.n	800f652 <_strtod_l+0x4d2>
 800f5be:	2400      	movs	r4, #0
 800f5c0:	46a0      	mov	r8, r4
 800f5c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f5c4:	46a1      	mov	r9, r4
 800f5c6:	9a05      	ldr	r2, [sp, #20]
 800f5c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f718 <_strtod_l+0x598>
 800f5cc:	2322      	movs	r3, #34	@ 0x22
 800f5ce:	6013      	str	r3, [r2, #0]
 800f5d0:	f04f 0a00 	mov.w	sl, #0
 800f5d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	f43f ae0b 	beq.w	800f1f2 <_strtod_l+0x72>
 800f5dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f5de:	9805      	ldr	r0, [sp, #20]
 800f5e0:	f7ff f944 	bl	800e86c <_Bfree>
 800f5e4:	9805      	ldr	r0, [sp, #20]
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	f7ff f940 	bl	800e86c <_Bfree>
 800f5ec:	9805      	ldr	r0, [sp, #20]
 800f5ee:	4641      	mov	r1, r8
 800f5f0:	f7ff f93c 	bl	800e86c <_Bfree>
 800f5f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5f6:	9805      	ldr	r0, [sp, #20]
 800f5f8:	f7ff f938 	bl	800e86c <_Bfree>
 800f5fc:	9805      	ldr	r0, [sp, #20]
 800f5fe:	4621      	mov	r1, r4
 800f600:	f7ff f934 	bl	800e86c <_Bfree>
 800f604:	e5f5      	b.n	800f1f2 <_strtod_l+0x72>
 800f606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f608:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f60c:	4293      	cmp	r3, r2
 800f60e:	dbbc      	blt.n	800f58a <_strtod_l+0x40a>
 800f610:	4c3f      	ldr	r4, [pc, #252]	@ (800f710 <_strtod_l+0x590>)
 800f612:	f1c5 050f 	rsb	r5, r5, #15
 800f616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f61a:	4652      	mov	r2, sl
 800f61c:	465b      	mov	r3, fp
 800f61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f622:	f7f1 f809 	bl	8000638 <__aeabi_dmul>
 800f626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f628:	1b5d      	subs	r5, r3, r5
 800f62a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f62e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f632:	e78f      	b.n	800f554 <_strtod_l+0x3d4>
 800f634:	3316      	adds	r3, #22
 800f636:	dba8      	blt.n	800f58a <_strtod_l+0x40a>
 800f638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f63a:	eba3 0808 	sub.w	r8, r3, r8
 800f63e:	4b34      	ldr	r3, [pc, #208]	@ (800f710 <_strtod_l+0x590>)
 800f640:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f644:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f648:	4650      	mov	r0, sl
 800f64a:	4659      	mov	r1, fp
 800f64c:	f7f1 f91e 	bl	800088c <__aeabi_ddiv>
 800f650:	e782      	b.n	800f558 <_strtod_l+0x3d8>
 800f652:	2300      	movs	r3, #0
 800f654:	4f2f      	ldr	r7, [pc, #188]	@ (800f714 <_strtod_l+0x594>)
 800f656:	1124      	asrs	r4, r4, #4
 800f658:	4650      	mov	r0, sl
 800f65a:	4659      	mov	r1, fp
 800f65c:	461e      	mov	r6, r3
 800f65e:	2c01      	cmp	r4, #1
 800f660:	dc21      	bgt.n	800f6a6 <_strtod_l+0x526>
 800f662:	b10b      	cbz	r3, 800f668 <_strtod_l+0x4e8>
 800f664:	4682      	mov	sl, r0
 800f666:	468b      	mov	fp, r1
 800f668:	492a      	ldr	r1, [pc, #168]	@ (800f714 <_strtod_l+0x594>)
 800f66a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f66e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f672:	4652      	mov	r2, sl
 800f674:	465b      	mov	r3, fp
 800f676:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f67a:	f7f0 ffdd 	bl	8000638 <__aeabi_dmul>
 800f67e:	4b26      	ldr	r3, [pc, #152]	@ (800f718 <_strtod_l+0x598>)
 800f680:	460a      	mov	r2, r1
 800f682:	400b      	ands	r3, r1
 800f684:	4925      	ldr	r1, [pc, #148]	@ (800f71c <_strtod_l+0x59c>)
 800f686:	428b      	cmp	r3, r1
 800f688:	4682      	mov	sl, r0
 800f68a:	d898      	bhi.n	800f5be <_strtod_l+0x43e>
 800f68c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f690:	428b      	cmp	r3, r1
 800f692:	bf86      	itte	hi
 800f694:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f720 <_strtod_l+0x5a0>
 800f698:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800f69c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	9308      	str	r3, [sp, #32]
 800f6a4:	e076      	b.n	800f794 <_strtod_l+0x614>
 800f6a6:	07e2      	lsls	r2, r4, #31
 800f6a8:	d504      	bpl.n	800f6b4 <_strtod_l+0x534>
 800f6aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6ae:	f7f0 ffc3 	bl	8000638 <__aeabi_dmul>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	3601      	adds	r6, #1
 800f6b6:	1064      	asrs	r4, r4, #1
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	e7d0      	b.n	800f65e <_strtod_l+0x4de>
 800f6bc:	d0f0      	beq.n	800f6a0 <_strtod_l+0x520>
 800f6be:	4264      	negs	r4, r4
 800f6c0:	f014 020f 	ands.w	r2, r4, #15
 800f6c4:	d00a      	beq.n	800f6dc <_strtod_l+0x55c>
 800f6c6:	4b12      	ldr	r3, [pc, #72]	@ (800f710 <_strtod_l+0x590>)
 800f6c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6cc:	4650      	mov	r0, sl
 800f6ce:	4659      	mov	r1, fp
 800f6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d4:	f7f1 f8da 	bl	800088c <__aeabi_ddiv>
 800f6d8:	4682      	mov	sl, r0
 800f6da:	468b      	mov	fp, r1
 800f6dc:	1124      	asrs	r4, r4, #4
 800f6de:	d0df      	beq.n	800f6a0 <_strtod_l+0x520>
 800f6e0:	2c1f      	cmp	r4, #31
 800f6e2:	dd1f      	ble.n	800f724 <_strtod_l+0x5a4>
 800f6e4:	2400      	movs	r4, #0
 800f6e6:	46a0      	mov	r8, r4
 800f6e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6ea:	46a1      	mov	r9, r4
 800f6ec:	9a05      	ldr	r2, [sp, #20]
 800f6ee:	2322      	movs	r3, #34	@ 0x22
 800f6f0:	f04f 0a00 	mov.w	sl, #0
 800f6f4:	f04f 0b00 	mov.w	fp, #0
 800f6f8:	6013      	str	r3, [r2, #0]
 800f6fa:	e76b      	b.n	800f5d4 <_strtod_l+0x454>
 800f6fc:	080136ed 	.word	0x080136ed
 800f700:	080139d0 	.word	0x080139d0
 800f704:	080136e5 	.word	0x080136e5
 800f708:	0801371a 	.word	0x0801371a
 800f70c:	0801386e 	.word	0x0801386e
 800f710:	08013908 	.word	0x08013908
 800f714:	080138e0 	.word	0x080138e0
 800f718:	7ff00000 	.word	0x7ff00000
 800f71c:	7ca00000 	.word	0x7ca00000
 800f720:	7fefffff 	.word	0x7fefffff
 800f724:	f014 0310 	ands.w	r3, r4, #16
 800f728:	bf18      	it	ne
 800f72a:	236a      	movne	r3, #106	@ 0x6a
 800f72c:	4ea9      	ldr	r6, [pc, #676]	@ (800f9d4 <_strtod_l+0x854>)
 800f72e:	9308      	str	r3, [sp, #32]
 800f730:	4650      	mov	r0, sl
 800f732:	4659      	mov	r1, fp
 800f734:	2300      	movs	r3, #0
 800f736:	07e7      	lsls	r7, r4, #31
 800f738:	d504      	bpl.n	800f744 <_strtod_l+0x5c4>
 800f73a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f73e:	f7f0 ff7b 	bl	8000638 <__aeabi_dmul>
 800f742:	2301      	movs	r3, #1
 800f744:	1064      	asrs	r4, r4, #1
 800f746:	f106 0608 	add.w	r6, r6, #8
 800f74a:	d1f4      	bne.n	800f736 <_strtod_l+0x5b6>
 800f74c:	b10b      	cbz	r3, 800f752 <_strtod_l+0x5d2>
 800f74e:	4682      	mov	sl, r0
 800f750:	468b      	mov	fp, r1
 800f752:	9b08      	ldr	r3, [sp, #32]
 800f754:	b1b3      	cbz	r3, 800f784 <_strtod_l+0x604>
 800f756:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f75a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f75e:	2b00      	cmp	r3, #0
 800f760:	4659      	mov	r1, fp
 800f762:	dd0f      	ble.n	800f784 <_strtod_l+0x604>
 800f764:	2b1f      	cmp	r3, #31
 800f766:	dd56      	ble.n	800f816 <_strtod_l+0x696>
 800f768:	2b34      	cmp	r3, #52	@ 0x34
 800f76a:	bfde      	ittt	le
 800f76c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800f770:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f774:	4093      	lslle	r3, r2
 800f776:	f04f 0a00 	mov.w	sl, #0
 800f77a:	bfcc      	ite	gt
 800f77c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f780:	ea03 0b01 	andle.w	fp, r3, r1
 800f784:	2200      	movs	r2, #0
 800f786:	2300      	movs	r3, #0
 800f788:	4650      	mov	r0, sl
 800f78a:	4659      	mov	r1, fp
 800f78c:	f7f1 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 800f790:	2800      	cmp	r0, #0
 800f792:	d1a7      	bne.n	800f6e4 <_strtod_l+0x564>
 800f794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f79a:	9805      	ldr	r0, [sp, #20]
 800f79c:	462b      	mov	r3, r5
 800f79e:	464a      	mov	r2, r9
 800f7a0:	f7ff f8cc 	bl	800e93c <__s2b>
 800f7a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f7a6:	2800      	cmp	r0, #0
 800f7a8:	f43f af09 	beq.w	800f5be <_strtod_l+0x43e>
 800f7ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7b0:	2a00      	cmp	r2, #0
 800f7b2:	eba3 0308 	sub.w	r3, r3, r8
 800f7b6:	bfa8      	it	ge
 800f7b8:	2300      	movge	r3, #0
 800f7ba:	9312      	str	r3, [sp, #72]	@ 0x48
 800f7bc:	2400      	movs	r4, #0
 800f7be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f7c2:	9316      	str	r3, [sp, #88]	@ 0x58
 800f7c4:	46a0      	mov	r8, r4
 800f7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7c8:	9805      	ldr	r0, [sp, #20]
 800f7ca:	6859      	ldr	r1, [r3, #4]
 800f7cc:	f7ff f80e 	bl	800e7ec <_Balloc>
 800f7d0:	4681      	mov	r9, r0
 800f7d2:	2800      	cmp	r0, #0
 800f7d4:	f43f aef7 	beq.w	800f5c6 <_strtod_l+0x446>
 800f7d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7da:	691a      	ldr	r2, [r3, #16]
 800f7dc:	3202      	adds	r2, #2
 800f7de:	f103 010c 	add.w	r1, r3, #12
 800f7e2:	0092      	lsls	r2, r2, #2
 800f7e4:	300c      	adds	r0, #12
 800f7e6:	f7fe f948 	bl	800da7a <memcpy>
 800f7ea:	ec4b ab10 	vmov	d0, sl, fp
 800f7ee:	9805      	ldr	r0, [sp, #20]
 800f7f0:	aa1c      	add	r2, sp, #112	@ 0x70
 800f7f2:	a91b      	add	r1, sp, #108	@ 0x6c
 800f7f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f7f8:	f7ff fbd4 	bl	800efa4 <__d2b>
 800f7fc:	901a      	str	r0, [sp, #104]	@ 0x68
 800f7fe:	2800      	cmp	r0, #0
 800f800:	f43f aee1 	beq.w	800f5c6 <_strtod_l+0x446>
 800f804:	9805      	ldr	r0, [sp, #20]
 800f806:	2101      	movs	r1, #1
 800f808:	f7ff f92e 	bl	800ea68 <__i2b>
 800f80c:	4680      	mov	r8, r0
 800f80e:	b948      	cbnz	r0, 800f824 <_strtod_l+0x6a4>
 800f810:	f04f 0800 	mov.w	r8, #0
 800f814:	e6d7      	b.n	800f5c6 <_strtod_l+0x446>
 800f816:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f81a:	fa02 f303 	lsl.w	r3, r2, r3
 800f81e:	ea03 0a0a 	and.w	sl, r3, sl
 800f822:	e7af      	b.n	800f784 <_strtod_l+0x604>
 800f824:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f826:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f828:	2d00      	cmp	r5, #0
 800f82a:	bfab      	itete	ge
 800f82c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f82e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f830:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f832:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f834:	bfac      	ite	ge
 800f836:	18ef      	addge	r7, r5, r3
 800f838:	1b5e      	sublt	r6, r3, r5
 800f83a:	9b08      	ldr	r3, [sp, #32]
 800f83c:	1aed      	subs	r5, r5, r3
 800f83e:	4415      	add	r5, r2
 800f840:	4b65      	ldr	r3, [pc, #404]	@ (800f9d8 <_strtod_l+0x858>)
 800f842:	3d01      	subs	r5, #1
 800f844:	429d      	cmp	r5, r3
 800f846:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f84a:	da50      	bge.n	800f8ee <_strtod_l+0x76e>
 800f84c:	1b5b      	subs	r3, r3, r5
 800f84e:	2b1f      	cmp	r3, #31
 800f850:	eba2 0203 	sub.w	r2, r2, r3
 800f854:	f04f 0101 	mov.w	r1, #1
 800f858:	dc3d      	bgt.n	800f8d6 <_strtod_l+0x756>
 800f85a:	fa01 f303 	lsl.w	r3, r1, r3
 800f85e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f860:	2300      	movs	r3, #0
 800f862:	9310      	str	r3, [sp, #64]	@ 0x40
 800f864:	18bd      	adds	r5, r7, r2
 800f866:	9b08      	ldr	r3, [sp, #32]
 800f868:	42af      	cmp	r7, r5
 800f86a:	4416      	add	r6, r2
 800f86c:	441e      	add	r6, r3
 800f86e:	463b      	mov	r3, r7
 800f870:	bfa8      	it	ge
 800f872:	462b      	movge	r3, r5
 800f874:	42b3      	cmp	r3, r6
 800f876:	bfa8      	it	ge
 800f878:	4633      	movge	r3, r6
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	bfc2      	ittt	gt
 800f87e:	1aed      	subgt	r5, r5, r3
 800f880:	1af6      	subgt	r6, r6, r3
 800f882:	1aff      	subgt	r7, r7, r3
 800f884:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f886:	2b00      	cmp	r3, #0
 800f888:	dd16      	ble.n	800f8b8 <_strtod_l+0x738>
 800f88a:	4641      	mov	r1, r8
 800f88c:	9805      	ldr	r0, [sp, #20]
 800f88e:	461a      	mov	r2, r3
 800f890:	f7ff f9a2 	bl	800ebd8 <__pow5mult>
 800f894:	4680      	mov	r8, r0
 800f896:	2800      	cmp	r0, #0
 800f898:	d0ba      	beq.n	800f810 <_strtod_l+0x690>
 800f89a:	4601      	mov	r1, r0
 800f89c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f89e:	9805      	ldr	r0, [sp, #20]
 800f8a0:	f7ff f8f8 	bl	800ea94 <__multiply>
 800f8a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	f43f ae8d 	beq.w	800f5c6 <_strtod_l+0x446>
 800f8ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8ae:	9805      	ldr	r0, [sp, #20]
 800f8b0:	f7fe ffdc 	bl	800e86c <_Bfree>
 800f8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f8b8:	2d00      	cmp	r5, #0
 800f8ba:	dc1d      	bgt.n	800f8f8 <_strtod_l+0x778>
 800f8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dd23      	ble.n	800f90a <_strtod_l+0x78a>
 800f8c2:	4649      	mov	r1, r9
 800f8c4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f8c6:	9805      	ldr	r0, [sp, #20]
 800f8c8:	f7ff f986 	bl	800ebd8 <__pow5mult>
 800f8cc:	4681      	mov	r9, r0
 800f8ce:	b9e0      	cbnz	r0, 800f90a <_strtod_l+0x78a>
 800f8d0:	f04f 0900 	mov.w	r9, #0
 800f8d4:	e677      	b.n	800f5c6 <_strtod_l+0x446>
 800f8d6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f8da:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f8de:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f8e2:	35e2      	adds	r5, #226	@ 0xe2
 800f8e4:	fa01 f305 	lsl.w	r3, r1, r5
 800f8e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f8ec:	e7ba      	b.n	800f864 <_strtod_l+0x6e4>
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f8f6:	e7b5      	b.n	800f864 <_strtod_l+0x6e4>
 800f8f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f8fa:	9805      	ldr	r0, [sp, #20]
 800f8fc:	462a      	mov	r2, r5
 800f8fe:	f7ff f9c5 	bl	800ec8c <__lshift>
 800f902:	901a      	str	r0, [sp, #104]	@ 0x68
 800f904:	2800      	cmp	r0, #0
 800f906:	d1d9      	bne.n	800f8bc <_strtod_l+0x73c>
 800f908:	e65d      	b.n	800f5c6 <_strtod_l+0x446>
 800f90a:	2e00      	cmp	r6, #0
 800f90c:	dd07      	ble.n	800f91e <_strtod_l+0x79e>
 800f90e:	4649      	mov	r1, r9
 800f910:	9805      	ldr	r0, [sp, #20]
 800f912:	4632      	mov	r2, r6
 800f914:	f7ff f9ba 	bl	800ec8c <__lshift>
 800f918:	4681      	mov	r9, r0
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d0d8      	beq.n	800f8d0 <_strtod_l+0x750>
 800f91e:	2f00      	cmp	r7, #0
 800f920:	dd08      	ble.n	800f934 <_strtod_l+0x7b4>
 800f922:	4641      	mov	r1, r8
 800f924:	9805      	ldr	r0, [sp, #20]
 800f926:	463a      	mov	r2, r7
 800f928:	f7ff f9b0 	bl	800ec8c <__lshift>
 800f92c:	4680      	mov	r8, r0
 800f92e:	2800      	cmp	r0, #0
 800f930:	f43f ae49 	beq.w	800f5c6 <_strtod_l+0x446>
 800f934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f936:	9805      	ldr	r0, [sp, #20]
 800f938:	464a      	mov	r2, r9
 800f93a:	f7ff fa2f 	bl	800ed9c <__mdiff>
 800f93e:	4604      	mov	r4, r0
 800f940:	2800      	cmp	r0, #0
 800f942:	f43f ae40 	beq.w	800f5c6 <_strtod_l+0x446>
 800f946:	68c3      	ldr	r3, [r0, #12]
 800f948:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f94a:	2300      	movs	r3, #0
 800f94c:	60c3      	str	r3, [r0, #12]
 800f94e:	4641      	mov	r1, r8
 800f950:	f7ff fa08 	bl	800ed64 <__mcmp>
 800f954:	2800      	cmp	r0, #0
 800f956:	da45      	bge.n	800f9e4 <_strtod_l+0x864>
 800f958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f95a:	ea53 030a 	orrs.w	r3, r3, sl
 800f95e:	d16b      	bne.n	800fa38 <_strtod_l+0x8b8>
 800f960:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f964:	2b00      	cmp	r3, #0
 800f966:	d167      	bne.n	800fa38 <_strtod_l+0x8b8>
 800f968:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f96c:	0d1b      	lsrs	r3, r3, #20
 800f96e:	051b      	lsls	r3, r3, #20
 800f970:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f974:	d960      	bls.n	800fa38 <_strtod_l+0x8b8>
 800f976:	6963      	ldr	r3, [r4, #20]
 800f978:	b913      	cbnz	r3, 800f980 <_strtod_l+0x800>
 800f97a:	6923      	ldr	r3, [r4, #16]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	dd5b      	ble.n	800fa38 <_strtod_l+0x8b8>
 800f980:	4621      	mov	r1, r4
 800f982:	2201      	movs	r2, #1
 800f984:	9805      	ldr	r0, [sp, #20]
 800f986:	f7ff f981 	bl	800ec8c <__lshift>
 800f98a:	4641      	mov	r1, r8
 800f98c:	4604      	mov	r4, r0
 800f98e:	f7ff f9e9 	bl	800ed64 <__mcmp>
 800f992:	2800      	cmp	r0, #0
 800f994:	dd50      	ble.n	800fa38 <_strtod_l+0x8b8>
 800f996:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f99a:	9a08      	ldr	r2, [sp, #32]
 800f99c:	0d1b      	lsrs	r3, r3, #20
 800f99e:	051b      	lsls	r3, r3, #20
 800f9a0:	2a00      	cmp	r2, #0
 800f9a2:	d06a      	beq.n	800fa7a <_strtod_l+0x8fa>
 800f9a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f9a8:	d867      	bhi.n	800fa7a <_strtod_l+0x8fa>
 800f9aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f9ae:	f67f ae9d 	bls.w	800f6ec <_strtod_l+0x56c>
 800f9b2:	4b0a      	ldr	r3, [pc, #40]	@ (800f9dc <_strtod_l+0x85c>)
 800f9b4:	4650      	mov	r0, sl
 800f9b6:	4659      	mov	r1, fp
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f7f0 fe3d 	bl	8000638 <__aeabi_dmul>
 800f9be:	4b08      	ldr	r3, [pc, #32]	@ (800f9e0 <_strtod_l+0x860>)
 800f9c0:	400b      	ands	r3, r1
 800f9c2:	4682      	mov	sl, r0
 800f9c4:	468b      	mov	fp, r1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f47f ae08 	bne.w	800f5dc <_strtod_l+0x45c>
 800f9cc:	9a05      	ldr	r2, [sp, #20]
 800f9ce:	2322      	movs	r3, #34	@ 0x22
 800f9d0:	6013      	str	r3, [r2, #0]
 800f9d2:	e603      	b.n	800f5dc <_strtod_l+0x45c>
 800f9d4:	080139f8 	.word	0x080139f8
 800f9d8:	fffffc02 	.word	0xfffffc02
 800f9dc:	39500000 	.word	0x39500000
 800f9e0:	7ff00000 	.word	0x7ff00000
 800f9e4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f9e8:	d165      	bne.n	800fab6 <_strtod_l+0x936>
 800f9ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f9ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9f0:	b35a      	cbz	r2, 800fa4a <_strtod_l+0x8ca>
 800f9f2:	4a9f      	ldr	r2, [pc, #636]	@ (800fc70 <_strtod_l+0xaf0>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d12b      	bne.n	800fa50 <_strtod_l+0x8d0>
 800f9f8:	9b08      	ldr	r3, [sp, #32]
 800f9fa:	4651      	mov	r1, sl
 800f9fc:	b303      	cbz	r3, 800fa40 <_strtod_l+0x8c0>
 800f9fe:	4b9d      	ldr	r3, [pc, #628]	@ (800fc74 <_strtod_l+0xaf4>)
 800fa00:	465a      	mov	r2, fp
 800fa02:	4013      	ands	r3, r2
 800fa04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fa08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa0c:	d81b      	bhi.n	800fa46 <_strtod_l+0x8c6>
 800fa0e:	0d1b      	lsrs	r3, r3, #20
 800fa10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fa14:	fa02 f303 	lsl.w	r3, r2, r3
 800fa18:	4299      	cmp	r1, r3
 800fa1a:	d119      	bne.n	800fa50 <_strtod_l+0x8d0>
 800fa1c:	4b96      	ldr	r3, [pc, #600]	@ (800fc78 <_strtod_l+0xaf8>)
 800fa1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d102      	bne.n	800fa2a <_strtod_l+0x8aa>
 800fa24:	3101      	adds	r1, #1
 800fa26:	f43f adce 	beq.w	800f5c6 <_strtod_l+0x446>
 800fa2a:	4b92      	ldr	r3, [pc, #584]	@ (800fc74 <_strtod_l+0xaf4>)
 800fa2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa2e:	401a      	ands	r2, r3
 800fa30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fa34:	f04f 0a00 	mov.w	sl, #0
 800fa38:	9b08      	ldr	r3, [sp, #32]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1b9      	bne.n	800f9b2 <_strtod_l+0x832>
 800fa3e:	e5cd      	b.n	800f5dc <_strtod_l+0x45c>
 800fa40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa44:	e7e8      	b.n	800fa18 <_strtod_l+0x898>
 800fa46:	4613      	mov	r3, r2
 800fa48:	e7e6      	b.n	800fa18 <_strtod_l+0x898>
 800fa4a:	ea53 030a 	orrs.w	r3, r3, sl
 800fa4e:	d0a2      	beq.n	800f996 <_strtod_l+0x816>
 800fa50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fa52:	b1db      	cbz	r3, 800fa8c <_strtod_l+0x90c>
 800fa54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fa56:	4213      	tst	r3, r2
 800fa58:	d0ee      	beq.n	800fa38 <_strtod_l+0x8b8>
 800fa5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa5c:	9a08      	ldr	r2, [sp, #32]
 800fa5e:	4650      	mov	r0, sl
 800fa60:	4659      	mov	r1, fp
 800fa62:	b1bb      	cbz	r3, 800fa94 <_strtod_l+0x914>
 800fa64:	f7ff fb6c 	bl	800f140 <sulp>
 800fa68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa6c:	ec53 2b10 	vmov	r2, r3, d0
 800fa70:	f7f0 fc2c 	bl	80002cc <__adddf3>
 800fa74:	4682      	mov	sl, r0
 800fa76:	468b      	mov	fp, r1
 800fa78:	e7de      	b.n	800fa38 <_strtod_l+0x8b8>
 800fa7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fa7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fa82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fa86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fa8a:	e7d5      	b.n	800fa38 <_strtod_l+0x8b8>
 800fa8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fa8e:	ea13 0f0a 	tst.w	r3, sl
 800fa92:	e7e1      	b.n	800fa58 <_strtod_l+0x8d8>
 800fa94:	f7ff fb54 	bl	800f140 <sulp>
 800fa98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa9c:	ec53 2b10 	vmov	r2, r3, d0
 800faa0:	f7f0 fc12 	bl	80002c8 <__aeabi_dsub>
 800faa4:	2200      	movs	r2, #0
 800faa6:	2300      	movs	r3, #0
 800faa8:	4682      	mov	sl, r0
 800faaa:	468b      	mov	fp, r1
 800faac:	f7f1 f82c 	bl	8000b08 <__aeabi_dcmpeq>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d0c1      	beq.n	800fa38 <_strtod_l+0x8b8>
 800fab4:	e61a      	b.n	800f6ec <_strtod_l+0x56c>
 800fab6:	4641      	mov	r1, r8
 800fab8:	4620      	mov	r0, r4
 800faba:	f7ff facb 	bl	800f054 <__ratio>
 800fabe:	ec57 6b10 	vmov	r6, r7, d0
 800fac2:	2200      	movs	r2, #0
 800fac4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fac8:	4630      	mov	r0, r6
 800faca:	4639      	mov	r1, r7
 800facc:	f7f1 f830 	bl	8000b30 <__aeabi_dcmple>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d06f      	beq.n	800fbb4 <_strtod_l+0xa34>
 800fad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d17a      	bne.n	800fbd0 <_strtod_l+0xa50>
 800fada:	f1ba 0f00 	cmp.w	sl, #0
 800fade:	d158      	bne.n	800fb92 <_strtod_l+0xa12>
 800fae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d15a      	bne.n	800fba0 <_strtod_l+0xa20>
 800faea:	4b64      	ldr	r3, [pc, #400]	@ (800fc7c <_strtod_l+0xafc>)
 800faec:	2200      	movs	r2, #0
 800faee:	4630      	mov	r0, r6
 800faf0:	4639      	mov	r1, r7
 800faf2:	f7f1 f813 	bl	8000b1c <__aeabi_dcmplt>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	d159      	bne.n	800fbae <_strtod_l+0xa2e>
 800fafa:	4630      	mov	r0, r6
 800fafc:	4639      	mov	r1, r7
 800fafe:	4b60      	ldr	r3, [pc, #384]	@ (800fc80 <_strtod_l+0xb00>)
 800fb00:	2200      	movs	r2, #0
 800fb02:	f7f0 fd99 	bl	8000638 <__aeabi_dmul>
 800fb06:	4606      	mov	r6, r0
 800fb08:	460f      	mov	r7, r1
 800fb0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800fb0e:	9606      	str	r6, [sp, #24]
 800fb10:	9307      	str	r3, [sp, #28]
 800fb12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb16:	4d57      	ldr	r5, [pc, #348]	@ (800fc74 <_strtod_l+0xaf4>)
 800fb18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fb1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb1e:	401d      	ands	r5, r3
 800fb20:	4b58      	ldr	r3, [pc, #352]	@ (800fc84 <_strtod_l+0xb04>)
 800fb22:	429d      	cmp	r5, r3
 800fb24:	f040 80b2 	bne.w	800fc8c <_strtod_l+0xb0c>
 800fb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800fb2e:	ec4b ab10 	vmov	d0, sl, fp
 800fb32:	f7ff f9c7 	bl	800eec4 <__ulp>
 800fb36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb3a:	ec51 0b10 	vmov	r0, r1, d0
 800fb3e:	f7f0 fd7b 	bl	8000638 <__aeabi_dmul>
 800fb42:	4652      	mov	r2, sl
 800fb44:	465b      	mov	r3, fp
 800fb46:	f7f0 fbc1 	bl	80002cc <__adddf3>
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4949      	ldr	r1, [pc, #292]	@ (800fc74 <_strtod_l+0xaf4>)
 800fb4e:	4a4e      	ldr	r2, [pc, #312]	@ (800fc88 <_strtod_l+0xb08>)
 800fb50:	4019      	ands	r1, r3
 800fb52:	4291      	cmp	r1, r2
 800fb54:	4682      	mov	sl, r0
 800fb56:	d942      	bls.n	800fbde <_strtod_l+0xa5e>
 800fb58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb5a:	4b47      	ldr	r3, [pc, #284]	@ (800fc78 <_strtod_l+0xaf8>)
 800fb5c:	429a      	cmp	r2, r3
 800fb5e:	d103      	bne.n	800fb68 <_strtod_l+0x9e8>
 800fb60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb62:	3301      	adds	r3, #1
 800fb64:	f43f ad2f 	beq.w	800f5c6 <_strtod_l+0x446>
 800fb68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fc78 <_strtod_l+0xaf8>
 800fb6c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fb70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fb72:	9805      	ldr	r0, [sp, #20]
 800fb74:	f7fe fe7a 	bl	800e86c <_Bfree>
 800fb78:	9805      	ldr	r0, [sp, #20]
 800fb7a:	4649      	mov	r1, r9
 800fb7c:	f7fe fe76 	bl	800e86c <_Bfree>
 800fb80:	9805      	ldr	r0, [sp, #20]
 800fb82:	4641      	mov	r1, r8
 800fb84:	f7fe fe72 	bl	800e86c <_Bfree>
 800fb88:	9805      	ldr	r0, [sp, #20]
 800fb8a:	4621      	mov	r1, r4
 800fb8c:	f7fe fe6e 	bl	800e86c <_Bfree>
 800fb90:	e619      	b.n	800f7c6 <_strtod_l+0x646>
 800fb92:	f1ba 0f01 	cmp.w	sl, #1
 800fb96:	d103      	bne.n	800fba0 <_strtod_l+0xa20>
 800fb98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	f43f ada6 	beq.w	800f6ec <_strtod_l+0x56c>
 800fba0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800fc50 <_strtod_l+0xad0>
 800fba4:	4f35      	ldr	r7, [pc, #212]	@ (800fc7c <_strtod_l+0xafc>)
 800fba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fbaa:	2600      	movs	r6, #0
 800fbac:	e7b1      	b.n	800fb12 <_strtod_l+0x992>
 800fbae:	4f34      	ldr	r7, [pc, #208]	@ (800fc80 <_strtod_l+0xb00>)
 800fbb0:	2600      	movs	r6, #0
 800fbb2:	e7aa      	b.n	800fb0a <_strtod_l+0x98a>
 800fbb4:	4b32      	ldr	r3, [pc, #200]	@ (800fc80 <_strtod_l+0xb00>)
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	4639      	mov	r1, r7
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f7f0 fd3c 	bl	8000638 <__aeabi_dmul>
 800fbc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbc2:	4606      	mov	r6, r0
 800fbc4:	460f      	mov	r7, r1
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d09f      	beq.n	800fb0a <_strtod_l+0x98a>
 800fbca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fbce:	e7a0      	b.n	800fb12 <_strtod_l+0x992>
 800fbd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fc58 <_strtod_l+0xad8>
 800fbd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fbd8:	ec57 6b17 	vmov	r6, r7, d7
 800fbdc:	e799      	b.n	800fb12 <_strtod_l+0x992>
 800fbde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fbe2:	9b08      	ldr	r3, [sp, #32]
 800fbe4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d1c1      	bne.n	800fb70 <_strtod_l+0x9f0>
 800fbec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fbf0:	0d1b      	lsrs	r3, r3, #20
 800fbf2:	051b      	lsls	r3, r3, #20
 800fbf4:	429d      	cmp	r5, r3
 800fbf6:	d1bb      	bne.n	800fb70 <_strtod_l+0x9f0>
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	4639      	mov	r1, r7
 800fbfc:	f7f1 f9da 	bl	8000fb4 <__aeabi_d2lz>
 800fc00:	f7f0 fcec 	bl	80005dc <__aeabi_l2d>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	4630      	mov	r0, r6
 800fc0a:	4639      	mov	r1, r7
 800fc0c:	f7f0 fb5c 	bl	80002c8 <__aeabi_dsub>
 800fc10:	460b      	mov	r3, r1
 800fc12:	4602      	mov	r2, r0
 800fc14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fc18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fc1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc1e:	ea46 060a 	orr.w	r6, r6, sl
 800fc22:	431e      	orrs	r6, r3
 800fc24:	d06f      	beq.n	800fd06 <_strtod_l+0xb86>
 800fc26:	a30e      	add	r3, pc, #56	@ (adr r3, 800fc60 <_strtod_l+0xae0>)
 800fc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2c:	f7f0 ff76 	bl	8000b1c <__aeabi_dcmplt>
 800fc30:	2800      	cmp	r0, #0
 800fc32:	f47f acd3 	bne.w	800f5dc <_strtod_l+0x45c>
 800fc36:	a30c      	add	r3, pc, #48	@ (adr r3, 800fc68 <_strtod_l+0xae8>)
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fc40:	f7f0 ff8a 	bl	8000b58 <__aeabi_dcmpgt>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d093      	beq.n	800fb70 <_strtod_l+0x9f0>
 800fc48:	e4c8      	b.n	800f5dc <_strtod_l+0x45c>
 800fc4a:	bf00      	nop
 800fc4c:	f3af 8000 	nop.w
 800fc50:	00000000 	.word	0x00000000
 800fc54:	bff00000 	.word	0xbff00000
 800fc58:	00000000 	.word	0x00000000
 800fc5c:	3ff00000 	.word	0x3ff00000
 800fc60:	94a03595 	.word	0x94a03595
 800fc64:	3fdfffff 	.word	0x3fdfffff
 800fc68:	35afe535 	.word	0x35afe535
 800fc6c:	3fe00000 	.word	0x3fe00000
 800fc70:	000fffff 	.word	0x000fffff
 800fc74:	7ff00000 	.word	0x7ff00000
 800fc78:	7fefffff 	.word	0x7fefffff
 800fc7c:	3ff00000 	.word	0x3ff00000
 800fc80:	3fe00000 	.word	0x3fe00000
 800fc84:	7fe00000 	.word	0x7fe00000
 800fc88:	7c9fffff 	.word	0x7c9fffff
 800fc8c:	9b08      	ldr	r3, [sp, #32]
 800fc8e:	b323      	cbz	r3, 800fcda <_strtod_l+0xb5a>
 800fc90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fc94:	d821      	bhi.n	800fcda <_strtod_l+0xb5a>
 800fc96:	a328      	add	r3, pc, #160	@ (adr r3, 800fd38 <_strtod_l+0xbb8>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	4639      	mov	r1, r7
 800fca0:	f7f0 ff46 	bl	8000b30 <__aeabi_dcmple>
 800fca4:	b1a0      	cbz	r0, 800fcd0 <_strtod_l+0xb50>
 800fca6:	4639      	mov	r1, r7
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f7f0 ff9d 	bl	8000be8 <__aeabi_d2uiz>
 800fcae:	2801      	cmp	r0, #1
 800fcb0:	bf38      	it	cc
 800fcb2:	2001      	movcc	r0, #1
 800fcb4:	f7f0 fc46 	bl	8000544 <__aeabi_ui2d>
 800fcb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcba:	4606      	mov	r6, r0
 800fcbc:	460f      	mov	r7, r1
 800fcbe:	b9fb      	cbnz	r3, 800fd00 <_strtod_l+0xb80>
 800fcc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fcc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800fcc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800fcc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fccc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fcd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fcd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fcd6:	1b5b      	subs	r3, r3, r5
 800fcd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800fcda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fcde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fce2:	f7ff f8ef 	bl	800eec4 <__ulp>
 800fce6:	4650      	mov	r0, sl
 800fce8:	ec53 2b10 	vmov	r2, r3, d0
 800fcec:	4659      	mov	r1, fp
 800fcee:	f7f0 fca3 	bl	8000638 <__aeabi_dmul>
 800fcf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fcf6:	f7f0 fae9 	bl	80002cc <__adddf3>
 800fcfa:	4682      	mov	sl, r0
 800fcfc:	468b      	mov	fp, r1
 800fcfe:	e770      	b.n	800fbe2 <_strtod_l+0xa62>
 800fd00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fd04:	e7e0      	b.n	800fcc8 <_strtod_l+0xb48>
 800fd06:	a30e      	add	r3, pc, #56	@ (adr r3, 800fd40 <_strtod_l+0xbc0>)
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f7f0 ff06 	bl	8000b1c <__aeabi_dcmplt>
 800fd10:	e798      	b.n	800fc44 <_strtod_l+0xac4>
 800fd12:	2300      	movs	r3, #0
 800fd14:	930e      	str	r3, [sp, #56]	@ 0x38
 800fd16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fd18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fd1a:	6013      	str	r3, [r2, #0]
 800fd1c:	f7ff ba6d 	b.w	800f1fa <_strtod_l+0x7a>
 800fd20:	2a65      	cmp	r2, #101	@ 0x65
 800fd22:	f43f ab68 	beq.w	800f3f6 <_strtod_l+0x276>
 800fd26:	2a45      	cmp	r2, #69	@ 0x45
 800fd28:	f43f ab65 	beq.w	800f3f6 <_strtod_l+0x276>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	f7ff bba0 	b.w	800f472 <_strtod_l+0x2f2>
 800fd32:	bf00      	nop
 800fd34:	f3af 8000 	nop.w
 800fd38:	ffc00000 	.word	0xffc00000
 800fd3c:	41dfffff 	.word	0x41dfffff
 800fd40:	94a03595 	.word	0x94a03595
 800fd44:	3fcfffff 	.word	0x3fcfffff

0800fd48 <_strtod_r>:
 800fd48:	4b01      	ldr	r3, [pc, #4]	@ (800fd50 <_strtod_r+0x8>)
 800fd4a:	f7ff ba19 	b.w	800f180 <_strtod_l>
 800fd4e:	bf00      	nop
 800fd50:	20000080 	.word	0x20000080

0800fd54 <_strtol_l.isra.0>:
 800fd54:	2b24      	cmp	r3, #36	@ 0x24
 800fd56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd5a:	4686      	mov	lr, r0
 800fd5c:	4690      	mov	r8, r2
 800fd5e:	d801      	bhi.n	800fd64 <_strtol_l.isra.0+0x10>
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d106      	bne.n	800fd72 <_strtol_l.isra.0+0x1e>
 800fd64:	f7fd fe5c 	bl	800da20 <__errno>
 800fd68:	2316      	movs	r3, #22
 800fd6a:	6003      	str	r3, [r0, #0]
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd72:	4834      	ldr	r0, [pc, #208]	@ (800fe44 <_strtol_l.isra.0+0xf0>)
 800fd74:	460d      	mov	r5, r1
 800fd76:	462a      	mov	r2, r5
 800fd78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd7c:	5d06      	ldrb	r6, [r0, r4]
 800fd7e:	f016 0608 	ands.w	r6, r6, #8
 800fd82:	d1f8      	bne.n	800fd76 <_strtol_l.isra.0+0x22>
 800fd84:	2c2d      	cmp	r4, #45	@ 0x2d
 800fd86:	d110      	bne.n	800fdaa <_strtol_l.isra.0+0x56>
 800fd88:	782c      	ldrb	r4, [r5, #0]
 800fd8a:	2601      	movs	r6, #1
 800fd8c:	1c95      	adds	r5, r2, #2
 800fd8e:	f033 0210 	bics.w	r2, r3, #16
 800fd92:	d115      	bne.n	800fdc0 <_strtol_l.isra.0+0x6c>
 800fd94:	2c30      	cmp	r4, #48	@ 0x30
 800fd96:	d10d      	bne.n	800fdb4 <_strtol_l.isra.0+0x60>
 800fd98:	782a      	ldrb	r2, [r5, #0]
 800fd9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fd9e:	2a58      	cmp	r2, #88	@ 0x58
 800fda0:	d108      	bne.n	800fdb4 <_strtol_l.isra.0+0x60>
 800fda2:	786c      	ldrb	r4, [r5, #1]
 800fda4:	3502      	adds	r5, #2
 800fda6:	2310      	movs	r3, #16
 800fda8:	e00a      	b.n	800fdc0 <_strtol_l.isra.0+0x6c>
 800fdaa:	2c2b      	cmp	r4, #43	@ 0x2b
 800fdac:	bf04      	itt	eq
 800fdae:	782c      	ldrbeq	r4, [r5, #0]
 800fdb0:	1c95      	addeq	r5, r2, #2
 800fdb2:	e7ec      	b.n	800fd8e <_strtol_l.isra.0+0x3a>
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1f6      	bne.n	800fda6 <_strtol_l.isra.0+0x52>
 800fdb8:	2c30      	cmp	r4, #48	@ 0x30
 800fdba:	bf14      	ite	ne
 800fdbc:	230a      	movne	r3, #10
 800fdbe:	2308      	moveq	r3, #8
 800fdc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fdc4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800fdc8:	2200      	movs	r2, #0
 800fdca:	fbbc f9f3 	udiv	r9, ip, r3
 800fdce:	4610      	mov	r0, r2
 800fdd0:	fb03 ca19 	mls	sl, r3, r9, ip
 800fdd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fdd8:	2f09      	cmp	r7, #9
 800fdda:	d80f      	bhi.n	800fdfc <_strtol_l.isra.0+0xa8>
 800fddc:	463c      	mov	r4, r7
 800fdde:	42a3      	cmp	r3, r4
 800fde0:	dd1b      	ble.n	800fe1a <_strtol_l.isra.0+0xc6>
 800fde2:	1c57      	adds	r7, r2, #1
 800fde4:	d007      	beq.n	800fdf6 <_strtol_l.isra.0+0xa2>
 800fde6:	4581      	cmp	r9, r0
 800fde8:	d314      	bcc.n	800fe14 <_strtol_l.isra.0+0xc0>
 800fdea:	d101      	bne.n	800fdf0 <_strtol_l.isra.0+0x9c>
 800fdec:	45a2      	cmp	sl, r4
 800fdee:	db11      	blt.n	800fe14 <_strtol_l.isra.0+0xc0>
 800fdf0:	fb00 4003 	mla	r0, r0, r3, r4
 800fdf4:	2201      	movs	r2, #1
 800fdf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fdfa:	e7eb      	b.n	800fdd4 <_strtol_l.isra.0+0x80>
 800fdfc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fe00:	2f19      	cmp	r7, #25
 800fe02:	d801      	bhi.n	800fe08 <_strtol_l.isra.0+0xb4>
 800fe04:	3c37      	subs	r4, #55	@ 0x37
 800fe06:	e7ea      	b.n	800fdde <_strtol_l.isra.0+0x8a>
 800fe08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fe0c:	2f19      	cmp	r7, #25
 800fe0e:	d804      	bhi.n	800fe1a <_strtol_l.isra.0+0xc6>
 800fe10:	3c57      	subs	r4, #87	@ 0x57
 800fe12:	e7e4      	b.n	800fdde <_strtol_l.isra.0+0x8a>
 800fe14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe18:	e7ed      	b.n	800fdf6 <_strtol_l.isra.0+0xa2>
 800fe1a:	1c53      	adds	r3, r2, #1
 800fe1c:	d108      	bne.n	800fe30 <_strtol_l.isra.0+0xdc>
 800fe1e:	2322      	movs	r3, #34	@ 0x22
 800fe20:	f8ce 3000 	str.w	r3, [lr]
 800fe24:	4660      	mov	r0, ip
 800fe26:	f1b8 0f00 	cmp.w	r8, #0
 800fe2a:	d0a0      	beq.n	800fd6e <_strtol_l.isra.0+0x1a>
 800fe2c:	1e69      	subs	r1, r5, #1
 800fe2e:	e006      	b.n	800fe3e <_strtol_l.isra.0+0xea>
 800fe30:	b106      	cbz	r6, 800fe34 <_strtol_l.isra.0+0xe0>
 800fe32:	4240      	negs	r0, r0
 800fe34:	f1b8 0f00 	cmp.w	r8, #0
 800fe38:	d099      	beq.n	800fd6e <_strtol_l.isra.0+0x1a>
 800fe3a:	2a00      	cmp	r2, #0
 800fe3c:	d1f6      	bne.n	800fe2c <_strtol_l.isra.0+0xd8>
 800fe3e:	f8c8 1000 	str.w	r1, [r8]
 800fe42:	e794      	b.n	800fd6e <_strtol_l.isra.0+0x1a>
 800fe44:	08013a21 	.word	0x08013a21

0800fe48 <_strtol_r>:
 800fe48:	f7ff bf84 	b.w	800fd54 <_strtol_l.isra.0>

0800fe4c <__ssputs_r>:
 800fe4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe50:	688e      	ldr	r6, [r1, #8]
 800fe52:	461f      	mov	r7, r3
 800fe54:	42be      	cmp	r6, r7
 800fe56:	680b      	ldr	r3, [r1, #0]
 800fe58:	4682      	mov	sl, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	4690      	mov	r8, r2
 800fe5e:	d82d      	bhi.n	800febc <__ssputs_r+0x70>
 800fe60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe68:	d026      	beq.n	800feb8 <__ssputs_r+0x6c>
 800fe6a:	6965      	ldr	r5, [r4, #20]
 800fe6c:	6909      	ldr	r1, [r1, #16]
 800fe6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe72:	eba3 0901 	sub.w	r9, r3, r1
 800fe76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe7a:	1c7b      	adds	r3, r7, #1
 800fe7c:	444b      	add	r3, r9
 800fe7e:	106d      	asrs	r5, r5, #1
 800fe80:	429d      	cmp	r5, r3
 800fe82:	bf38      	it	cc
 800fe84:	461d      	movcc	r5, r3
 800fe86:	0553      	lsls	r3, r2, #21
 800fe88:	d527      	bpl.n	800feda <__ssputs_r+0x8e>
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	f7fc fcfa 	bl	800c884 <_malloc_r>
 800fe90:	4606      	mov	r6, r0
 800fe92:	b360      	cbz	r0, 800feee <__ssputs_r+0xa2>
 800fe94:	6921      	ldr	r1, [r4, #16]
 800fe96:	464a      	mov	r2, r9
 800fe98:	f7fd fdef 	bl	800da7a <memcpy>
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fea6:	81a3      	strh	r3, [r4, #12]
 800fea8:	6126      	str	r6, [r4, #16]
 800feaa:	6165      	str	r5, [r4, #20]
 800feac:	444e      	add	r6, r9
 800feae:	eba5 0509 	sub.w	r5, r5, r9
 800feb2:	6026      	str	r6, [r4, #0]
 800feb4:	60a5      	str	r5, [r4, #8]
 800feb6:	463e      	mov	r6, r7
 800feb8:	42be      	cmp	r6, r7
 800feba:	d900      	bls.n	800febe <__ssputs_r+0x72>
 800febc:	463e      	mov	r6, r7
 800febe:	6820      	ldr	r0, [r4, #0]
 800fec0:	4632      	mov	r2, r6
 800fec2:	4641      	mov	r1, r8
 800fec4:	f000 fd57 	bl	8010976 <memmove>
 800fec8:	68a3      	ldr	r3, [r4, #8]
 800feca:	1b9b      	subs	r3, r3, r6
 800fecc:	60a3      	str	r3, [r4, #8]
 800fece:	6823      	ldr	r3, [r4, #0]
 800fed0:	4433      	add	r3, r6
 800fed2:	6023      	str	r3, [r4, #0]
 800fed4:	2000      	movs	r0, #0
 800fed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feda:	462a      	mov	r2, r5
 800fedc:	f001 f8e9 	bl	80110b2 <_realloc_r>
 800fee0:	4606      	mov	r6, r0
 800fee2:	2800      	cmp	r0, #0
 800fee4:	d1e0      	bne.n	800fea8 <__ssputs_r+0x5c>
 800fee6:	6921      	ldr	r1, [r4, #16]
 800fee8:	4650      	mov	r0, sl
 800feea:	f7fe fc35 	bl	800e758 <_free_r>
 800feee:	230c      	movs	r3, #12
 800fef0:	f8ca 3000 	str.w	r3, [sl]
 800fef4:	89a3      	ldrh	r3, [r4, #12]
 800fef6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fefa:	81a3      	strh	r3, [r4, #12]
 800fefc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff00:	e7e9      	b.n	800fed6 <__ssputs_r+0x8a>
	...

0800ff04 <_svfiprintf_r>:
 800ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff08:	4698      	mov	r8, r3
 800ff0a:	898b      	ldrh	r3, [r1, #12]
 800ff0c:	061b      	lsls	r3, r3, #24
 800ff0e:	b09d      	sub	sp, #116	@ 0x74
 800ff10:	4607      	mov	r7, r0
 800ff12:	460d      	mov	r5, r1
 800ff14:	4614      	mov	r4, r2
 800ff16:	d510      	bpl.n	800ff3a <_svfiprintf_r+0x36>
 800ff18:	690b      	ldr	r3, [r1, #16]
 800ff1a:	b973      	cbnz	r3, 800ff3a <_svfiprintf_r+0x36>
 800ff1c:	2140      	movs	r1, #64	@ 0x40
 800ff1e:	f7fc fcb1 	bl	800c884 <_malloc_r>
 800ff22:	6028      	str	r0, [r5, #0]
 800ff24:	6128      	str	r0, [r5, #16]
 800ff26:	b930      	cbnz	r0, 800ff36 <_svfiprintf_r+0x32>
 800ff28:	230c      	movs	r3, #12
 800ff2a:	603b      	str	r3, [r7, #0]
 800ff2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff30:	b01d      	add	sp, #116	@ 0x74
 800ff32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff36:	2340      	movs	r3, #64	@ 0x40
 800ff38:	616b      	str	r3, [r5, #20]
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff3e:	2320      	movs	r3, #32
 800ff40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ff44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff48:	2330      	movs	r3, #48	@ 0x30
 800ff4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80100e8 <_svfiprintf_r+0x1e4>
 800ff4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff52:	f04f 0901 	mov.w	r9, #1
 800ff56:	4623      	mov	r3, r4
 800ff58:	469a      	mov	sl, r3
 800ff5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff5e:	b10a      	cbz	r2, 800ff64 <_svfiprintf_r+0x60>
 800ff60:	2a25      	cmp	r2, #37	@ 0x25
 800ff62:	d1f9      	bne.n	800ff58 <_svfiprintf_r+0x54>
 800ff64:	ebba 0b04 	subs.w	fp, sl, r4
 800ff68:	d00b      	beq.n	800ff82 <_svfiprintf_r+0x7e>
 800ff6a:	465b      	mov	r3, fp
 800ff6c:	4622      	mov	r2, r4
 800ff6e:	4629      	mov	r1, r5
 800ff70:	4638      	mov	r0, r7
 800ff72:	f7ff ff6b 	bl	800fe4c <__ssputs_r>
 800ff76:	3001      	adds	r0, #1
 800ff78:	f000 80a7 	beq.w	80100ca <_svfiprintf_r+0x1c6>
 800ff7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff7e:	445a      	add	r2, fp
 800ff80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff82:	f89a 3000 	ldrb.w	r3, [sl]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f000 809f 	beq.w	80100ca <_svfiprintf_r+0x1c6>
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff96:	f10a 0a01 	add.w	sl, sl, #1
 800ff9a:	9304      	str	r3, [sp, #16]
 800ff9c:	9307      	str	r3, [sp, #28]
 800ff9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ffa2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ffa4:	4654      	mov	r4, sl
 800ffa6:	2205      	movs	r2, #5
 800ffa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffac:	484e      	ldr	r0, [pc, #312]	@ (80100e8 <_svfiprintf_r+0x1e4>)
 800ffae:	f7f0 f92f 	bl	8000210 <memchr>
 800ffb2:	9a04      	ldr	r2, [sp, #16]
 800ffb4:	b9d8      	cbnz	r0, 800ffee <_svfiprintf_r+0xea>
 800ffb6:	06d0      	lsls	r0, r2, #27
 800ffb8:	bf44      	itt	mi
 800ffba:	2320      	movmi	r3, #32
 800ffbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffc0:	0711      	lsls	r1, r2, #28
 800ffc2:	bf44      	itt	mi
 800ffc4:	232b      	movmi	r3, #43	@ 0x2b
 800ffc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ffca:	f89a 3000 	ldrb.w	r3, [sl]
 800ffce:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffd0:	d015      	beq.n	800fffe <_svfiprintf_r+0xfa>
 800ffd2:	9a07      	ldr	r2, [sp, #28]
 800ffd4:	4654      	mov	r4, sl
 800ffd6:	2000      	movs	r0, #0
 800ffd8:	f04f 0c0a 	mov.w	ip, #10
 800ffdc:	4621      	mov	r1, r4
 800ffde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffe2:	3b30      	subs	r3, #48	@ 0x30
 800ffe4:	2b09      	cmp	r3, #9
 800ffe6:	d94b      	bls.n	8010080 <_svfiprintf_r+0x17c>
 800ffe8:	b1b0      	cbz	r0, 8010018 <_svfiprintf_r+0x114>
 800ffea:	9207      	str	r2, [sp, #28]
 800ffec:	e014      	b.n	8010018 <_svfiprintf_r+0x114>
 800ffee:	eba0 0308 	sub.w	r3, r0, r8
 800fff2:	fa09 f303 	lsl.w	r3, r9, r3
 800fff6:	4313      	orrs	r3, r2
 800fff8:	9304      	str	r3, [sp, #16]
 800fffa:	46a2      	mov	sl, r4
 800fffc:	e7d2      	b.n	800ffa4 <_svfiprintf_r+0xa0>
 800fffe:	9b03      	ldr	r3, [sp, #12]
 8010000:	1d19      	adds	r1, r3, #4
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	9103      	str	r1, [sp, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	bfbb      	ittet	lt
 801000a:	425b      	neglt	r3, r3
 801000c:	f042 0202 	orrlt.w	r2, r2, #2
 8010010:	9307      	strge	r3, [sp, #28]
 8010012:	9307      	strlt	r3, [sp, #28]
 8010014:	bfb8      	it	lt
 8010016:	9204      	strlt	r2, [sp, #16]
 8010018:	7823      	ldrb	r3, [r4, #0]
 801001a:	2b2e      	cmp	r3, #46	@ 0x2e
 801001c:	d10a      	bne.n	8010034 <_svfiprintf_r+0x130>
 801001e:	7863      	ldrb	r3, [r4, #1]
 8010020:	2b2a      	cmp	r3, #42	@ 0x2a
 8010022:	d132      	bne.n	801008a <_svfiprintf_r+0x186>
 8010024:	9b03      	ldr	r3, [sp, #12]
 8010026:	1d1a      	adds	r2, r3, #4
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	9203      	str	r2, [sp, #12]
 801002c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010030:	3402      	adds	r4, #2
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80100f8 <_svfiprintf_r+0x1f4>
 8010038:	7821      	ldrb	r1, [r4, #0]
 801003a:	2203      	movs	r2, #3
 801003c:	4650      	mov	r0, sl
 801003e:	f7f0 f8e7 	bl	8000210 <memchr>
 8010042:	b138      	cbz	r0, 8010054 <_svfiprintf_r+0x150>
 8010044:	9b04      	ldr	r3, [sp, #16]
 8010046:	eba0 000a 	sub.w	r0, r0, sl
 801004a:	2240      	movs	r2, #64	@ 0x40
 801004c:	4082      	lsls	r2, r0
 801004e:	4313      	orrs	r3, r2
 8010050:	3401      	adds	r4, #1
 8010052:	9304      	str	r3, [sp, #16]
 8010054:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010058:	4824      	ldr	r0, [pc, #144]	@ (80100ec <_svfiprintf_r+0x1e8>)
 801005a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801005e:	2206      	movs	r2, #6
 8010060:	f7f0 f8d6 	bl	8000210 <memchr>
 8010064:	2800      	cmp	r0, #0
 8010066:	d036      	beq.n	80100d6 <_svfiprintf_r+0x1d2>
 8010068:	4b21      	ldr	r3, [pc, #132]	@ (80100f0 <_svfiprintf_r+0x1ec>)
 801006a:	bb1b      	cbnz	r3, 80100b4 <_svfiprintf_r+0x1b0>
 801006c:	9b03      	ldr	r3, [sp, #12]
 801006e:	3307      	adds	r3, #7
 8010070:	f023 0307 	bic.w	r3, r3, #7
 8010074:	3308      	adds	r3, #8
 8010076:	9303      	str	r3, [sp, #12]
 8010078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801007a:	4433      	add	r3, r6
 801007c:	9309      	str	r3, [sp, #36]	@ 0x24
 801007e:	e76a      	b.n	800ff56 <_svfiprintf_r+0x52>
 8010080:	fb0c 3202 	mla	r2, ip, r2, r3
 8010084:	460c      	mov	r4, r1
 8010086:	2001      	movs	r0, #1
 8010088:	e7a8      	b.n	800ffdc <_svfiprintf_r+0xd8>
 801008a:	2300      	movs	r3, #0
 801008c:	3401      	adds	r4, #1
 801008e:	9305      	str	r3, [sp, #20]
 8010090:	4619      	mov	r1, r3
 8010092:	f04f 0c0a 	mov.w	ip, #10
 8010096:	4620      	mov	r0, r4
 8010098:	f810 2b01 	ldrb.w	r2, [r0], #1
 801009c:	3a30      	subs	r2, #48	@ 0x30
 801009e:	2a09      	cmp	r2, #9
 80100a0:	d903      	bls.n	80100aa <_svfiprintf_r+0x1a6>
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d0c6      	beq.n	8010034 <_svfiprintf_r+0x130>
 80100a6:	9105      	str	r1, [sp, #20]
 80100a8:	e7c4      	b.n	8010034 <_svfiprintf_r+0x130>
 80100aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80100ae:	4604      	mov	r4, r0
 80100b0:	2301      	movs	r3, #1
 80100b2:	e7f0      	b.n	8010096 <_svfiprintf_r+0x192>
 80100b4:	ab03      	add	r3, sp, #12
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	462a      	mov	r2, r5
 80100ba:	4b0e      	ldr	r3, [pc, #56]	@ (80100f4 <_svfiprintf_r+0x1f0>)
 80100bc:	a904      	add	r1, sp, #16
 80100be:	4638      	mov	r0, r7
 80100c0:	f7fc fd0c 	bl	800cadc <_printf_float>
 80100c4:	1c42      	adds	r2, r0, #1
 80100c6:	4606      	mov	r6, r0
 80100c8:	d1d6      	bne.n	8010078 <_svfiprintf_r+0x174>
 80100ca:	89ab      	ldrh	r3, [r5, #12]
 80100cc:	065b      	lsls	r3, r3, #25
 80100ce:	f53f af2d 	bmi.w	800ff2c <_svfiprintf_r+0x28>
 80100d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80100d4:	e72c      	b.n	800ff30 <_svfiprintf_r+0x2c>
 80100d6:	ab03      	add	r3, sp, #12
 80100d8:	9300      	str	r3, [sp, #0]
 80100da:	462a      	mov	r2, r5
 80100dc:	4b05      	ldr	r3, [pc, #20]	@ (80100f4 <_svfiprintf_r+0x1f0>)
 80100de:	a904      	add	r1, sp, #16
 80100e0:	4638      	mov	r0, r7
 80100e2:	f7fc ff93 	bl	800d00c <_printf_i>
 80100e6:	e7ed      	b.n	80100c4 <_svfiprintf_r+0x1c0>
 80100e8:	080137ff 	.word	0x080137ff
 80100ec:	08013809 	.word	0x08013809
 80100f0:	0800cadd 	.word	0x0800cadd
 80100f4:	0800fe4d 	.word	0x0800fe4d
 80100f8:	08013805 	.word	0x08013805

080100fc <_sungetc_r>:
 80100fc:	b538      	push	{r3, r4, r5, lr}
 80100fe:	1c4b      	adds	r3, r1, #1
 8010100:	4614      	mov	r4, r2
 8010102:	d103      	bne.n	801010c <_sungetc_r+0x10>
 8010104:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010108:	4628      	mov	r0, r5
 801010a:	bd38      	pop	{r3, r4, r5, pc}
 801010c:	8993      	ldrh	r3, [r2, #12]
 801010e:	f023 0320 	bic.w	r3, r3, #32
 8010112:	8193      	strh	r3, [r2, #12]
 8010114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010116:	6852      	ldr	r2, [r2, #4]
 8010118:	b2cd      	uxtb	r5, r1
 801011a:	b18b      	cbz	r3, 8010140 <_sungetc_r+0x44>
 801011c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801011e:	4293      	cmp	r3, r2
 8010120:	dd08      	ble.n	8010134 <_sungetc_r+0x38>
 8010122:	6823      	ldr	r3, [r4, #0]
 8010124:	1e5a      	subs	r2, r3, #1
 8010126:	6022      	str	r2, [r4, #0]
 8010128:	f803 5c01 	strb.w	r5, [r3, #-1]
 801012c:	6863      	ldr	r3, [r4, #4]
 801012e:	3301      	adds	r3, #1
 8010130:	6063      	str	r3, [r4, #4]
 8010132:	e7e9      	b.n	8010108 <_sungetc_r+0xc>
 8010134:	4621      	mov	r1, r4
 8010136:	f000 fbe4 	bl	8010902 <__submore>
 801013a:	2800      	cmp	r0, #0
 801013c:	d0f1      	beq.n	8010122 <_sungetc_r+0x26>
 801013e:	e7e1      	b.n	8010104 <_sungetc_r+0x8>
 8010140:	6921      	ldr	r1, [r4, #16]
 8010142:	6823      	ldr	r3, [r4, #0]
 8010144:	b151      	cbz	r1, 801015c <_sungetc_r+0x60>
 8010146:	4299      	cmp	r1, r3
 8010148:	d208      	bcs.n	801015c <_sungetc_r+0x60>
 801014a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801014e:	42a9      	cmp	r1, r5
 8010150:	d104      	bne.n	801015c <_sungetc_r+0x60>
 8010152:	3b01      	subs	r3, #1
 8010154:	3201      	adds	r2, #1
 8010156:	6023      	str	r3, [r4, #0]
 8010158:	6062      	str	r2, [r4, #4]
 801015a:	e7d5      	b.n	8010108 <_sungetc_r+0xc>
 801015c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8010160:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010164:	6363      	str	r3, [r4, #52]	@ 0x34
 8010166:	2303      	movs	r3, #3
 8010168:	63a3      	str	r3, [r4, #56]	@ 0x38
 801016a:	4623      	mov	r3, r4
 801016c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010170:	6023      	str	r3, [r4, #0]
 8010172:	2301      	movs	r3, #1
 8010174:	e7dc      	b.n	8010130 <_sungetc_r+0x34>

08010176 <__ssrefill_r>:
 8010176:	b510      	push	{r4, lr}
 8010178:	460c      	mov	r4, r1
 801017a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801017c:	b169      	cbz	r1, 801019a <__ssrefill_r+0x24>
 801017e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010182:	4299      	cmp	r1, r3
 8010184:	d001      	beq.n	801018a <__ssrefill_r+0x14>
 8010186:	f7fe fae7 	bl	800e758 <_free_r>
 801018a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801018c:	6063      	str	r3, [r4, #4]
 801018e:	2000      	movs	r0, #0
 8010190:	6360      	str	r0, [r4, #52]	@ 0x34
 8010192:	b113      	cbz	r3, 801019a <__ssrefill_r+0x24>
 8010194:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010196:	6023      	str	r3, [r4, #0]
 8010198:	bd10      	pop	{r4, pc}
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	2300      	movs	r3, #0
 80101a0:	6063      	str	r3, [r4, #4]
 80101a2:	89a3      	ldrh	r3, [r4, #12]
 80101a4:	f043 0320 	orr.w	r3, r3, #32
 80101a8:	81a3      	strh	r3, [r4, #12]
 80101aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101ae:	e7f3      	b.n	8010198 <__ssrefill_r+0x22>

080101b0 <__ssvfiscanf_r>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	460c      	mov	r4, r1
 80101b6:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80101ba:	2100      	movs	r1, #0
 80101bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80101c0:	49a6      	ldr	r1, [pc, #664]	@ (801045c <__ssvfiscanf_r+0x2ac>)
 80101c2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80101c4:	f10d 0804 	add.w	r8, sp, #4
 80101c8:	49a5      	ldr	r1, [pc, #660]	@ (8010460 <__ssvfiscanf_r+0x2b0>)
 80101ca:	4fa6      	ldr	r7, [pc, #664]	@ (8010464 <__ssvfiscanf_r+0x2b4>)
 80101cc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80101d0:	4606      	mov	r6, r0
 80101d2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80101d4:	9300      	str	r3, [sp, #0]
 80101d6:	f892 9000 	ldrb.w	r9, [r2]
 80101da:	f1b9 0f00 	cmp.w	r9, #0
 80101de:	f000 8158 	beq.w	8010492 <__ssvfiscanf_r+0x2e2>
 80101e2:	f817 3009 	ldrb.w	r3, [r7, r9]
 80101e6:	f013 0308 	ands.w	r3, r3, #8
 80101ea:	f102 0501 	add.w	r5, r2, #1
 80101ee:	d019      	beq.n	8010224 <__ssvfiscanf_r+0x74>
 80101f0:	6863      	ldr	r3, [r4, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	dd0f      	ble.n	8010216 <__ssvfiscanf_r+0x66>
 80101f6:	6823      	ldr	r3, [r4, #0]
 80101f8:	781a      	ldrb	r2, [r3, #0]
 80101fa:	5cba      	ldrb	r2, [r7, r2]
 80101fc:	0712      	lsls	r2, r2, #28
 80101fe:	d401      	bmi.n	8010204 <__ssvfiscanf_r+0x54>
 8010200:	462a      	mov	r2, r5
 8010202:	e7e8      	b.n	80101d6 <__ssvfiscanf_r+0x26>
 8010204:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010206:	3201      	adds	r2, #1
 8010208:	9245      	str	r2, [sp, #276]	@ 0x114
 801020a:	6862      	ldr	r2, [r4, #4]
 801020c:	3301      	adds	r3, #1
 801020e:	3a01      	subs	r2, #1
 8010210:	6062      	str	r2, [r4, #4]
 8010212:	6023      	str	r3, [r4, #0]
 8010214:	e7ec      	b.n	80101f0 <__ssvfiscanf_r+0x40>
 8010216:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010218:	4621      	mov	r1, r4
 801021a:	4630      	mov	r0, r6
 801021c:	4798      	blx	r3
 801021e:	2800      	cmp	r0, #0
 8010220:	d0e9      	beq.n	80101f6 <__ssvfiscanf_r+0x46>
 8010222:	e7ed      	b.n	8010200 <__ssvfiscanf_r+0x50>
 8010224:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010228:	f040 8085 	bne.w	8010336 <__ssvfiscanf_r+0x186>
 801022c:	9341      	str	r3, [sp, #260]	@ 0x104
 801022e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010230:	7853      	ldrb	r3, [r2, #1]
 8010232:	2b2a      	cmp	r3, #42	@ 0x2a
 8010234:	bf02      	ittt	eq
 8010236:	2310      	moveq	r3, #16
 8010238:	1c95      	addeq	r5, r2, #2
 801023a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801023c:	220a      	movs	r2, #10
 801023e:	46aa      	mov	sl, r5
 8010240:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010244:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010248:	2b09      	cmp	r3, #9
 801024a:	d91e      	bls.n	801028a <__ssvfiscanf_r+0xda>
 801024c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8010468 <__ssvfiscanf_r+0x2b8>
 8010250:	2203      	movs	r2, #3
 8010252:	4658      	mov	r0, fp
 8010254:	f7ef ffdc 	bl	8000210 <memchr>
 8010258:	b138      	cbz	r0, 801026a <__ssvfiscanf_r+0xba>
 801025a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801025c:	eba0 000b 	sub.w	r0, r0, fp
 8010260:	2301      	movs	r3, #1
 8010262:	4083      	lsls	r3, r0
 8010264:	4313      	orrs	r3, r2
 8010266:	9341      	str	r3, [sp, #260]	@ 0x104
 8010268:	4655      	mov	r5, sl
 801026a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801026e:	2b78      	cmp	r3, #120	@ 0x78
 8010270:	d806      	bhi.n	8010280 <__ssvfiscanf_r+0xd0>
 8010272:	2b57      	cmp	r3, #87	@ 0x57
 8010274:	d810      	bhi.n	8010298 <__ssvfiscanf_r+0xe8>
 8010276:	2b25      	cmp	r3, #37	@ 0x25
 8010278:	d05d      	beq.n	8010336 <__ssvfiscanf_r+0x186>
 801027a:	d857      	bhi.n	801032c <__ssvfiscanf_r+0x17c>
 801027c:	2b00      	cmp	r3, #0
 801027e:	d075      	beq.n	801036c <__ssvfiscanf_r+0x1bc>
 8010280:	2303      	movs	r3, #3
 8010282:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010284:	230a      	movs	r3, #10
 8010286:	9342      	str	r3, [sp, #264]	@ 0x108
 8010288:	e088      	b.n	801039c <__ssvfiscanf_r+0x1ec>
 801028a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801028c:	fb02 1103 	mla	r1, r2, r3, r1
 8010290:	3930      	subs	r1, #48	@ 0x30
 8010292:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010294:	4655      	mov	r5, sl
 8010296:	e7d2      	b.n	801023e <__ssvfiscanf_r+0x8e>
 8010298:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801029c:	2a20      	cmp	r2, #32
 801029e:	d8ef      	bhi.n	8010280 <__ssvfiscanf_r+0xd0>
 80102a0:	a101      	add	r1, pc, #4	@ (adr r1, 80102a8 <__ssvfiscanf_r+0xf8>)
 80102a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80102a6:	bf00      	nop
 80102a8:	0801037b 	.word	0x0801037b
 80102ac:	08010281 	.word	0x08010281
 80102b0:	08010281 	.word	0x08010281
 80102b4:	080103d5 	.word	0x080103d5
 80102b8:	08010281 	.word	0x08010281
 80102bc:	08010281 	.word	0x08010281
 80102c0:	08010281 	.word	0x08010281
 80102c4:	08010281 	.word	0x08010281
 80102c8:	08010281 	.word	0x08010281
 80102cc:	08010281 	.word	0x08010281
 80102d0:	08010281 	.word	0x08010281
 80102d4:	080103eb 	.word	0x080103eb
 80102d8:	080103d1 	.word	0x080103d1
 80102dc:	08010333 	.word	0x08010333
 80102e0:	08010333 	.word	0x08010333
 80102e4:	08010333 	.word	0x08010333
 80102e8:	08010281 	.word	0x08010281
 80102ec:	0801038d 	.word	0x0801038d
 80102f0:	08010281 	.word	0x08010281
 80102f4:	08010281 	.word	0x08010281
 80102f8:	08010281 	.word	0x08010281
 80102fc:	08010281 	.word	0x08010281
 8010300:	080103fb 	.word	0x080103fb
 8010304:	08010395 	.word	0x08010395
 8010308:	08010373 	.word	0x08010373
 801030c:	08010281 	.word	0x08010281
 8010310:	08010281 	.word	0x08010281
 8010314:	080103f7 	.word	0x080103f7
 8010318:	08010281 	.word	0x08010281
 801031c:	080103d1 	.word	0x080103d1
 8010320:	08010281 	.word	0x08010281
 8010324:	08010281 	.word	0x08010281
 8010328:	0801037b 	.word	0x0801037b
 801032c:	3b45      	subs	r3, #69	@ 0x45
 801032e:	2b02      	cmp	r3, #2
 8010330:	d8a6      	bhi.n	8010280 <__ssvfiscanf_r+0xd0>
 8010332:	2305      	movs	r3, #5
 8010334:	e031      	b.n	801039a <__ssvfiscanf_r+0x1ea>
 8010336:	6863      	ldr	r3, [r4, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	dd0d      	ble.n	8010358 <__ssvfiscanf_r+0x1a8>
 801033c:	6823      	ldr	r3, [r4, #0]
 801033e:	781a      	ldrb	r2, [r3, #0]
 8010340:	454a      	cmp	r2, r9
 8010342:	f040 80a6 	bne.w	8010492 <__ssvfiscanf_r+0x2e2>
 8010346:	3301      	adds	r3, #1
 8010348:	6862      	ldr	r2, [r4, #4]
 801034a:	6023      	str	r3, [r4, #0]
 801034c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801034e:	3a01      	subs	r2, #1
 8010350:	3301      	adds	r3, #1
 8010352:	6062      	str	r2, [r4, #4]
 8010354:	9345      	str	r3, [sp, #276]	@ 0x114
 8010356:	e753      	b.n	8010200 <__ssvfiscanf_r+0x50>
 8010358:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801035a:	4621      	mov	r1, r4
 801035c:	4630      	mov	r0, r6
 801035e:	4798      	blx	r3
 8010360:	2800      	cmp	r0, #0
 8010362:	d0eb      	beq.n	801033c <__ssvfiscanf_r+0x18c>
 8010364:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010366:	2800      	cmp	r0, #0
 8010368:	f040 808b 	bne.w	8010482 <__ssvfiscanf_r+0x2d2>
 801036c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010370:	e08b      	b.n	801048a <__ssvfiscanf_r+0x2da>
 8010372:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010374:	f042 0220 	orr.w	r2, r2, #32
 8010378:	9241      	str	r2, [sp, #260]	@ 0x104
 801037a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801037c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010380:	9241      	str	r2, [sp, #260]	@ 0x104
 8010382:	2210      	movs	r2, #16
 8010384:	2b6e      	cmp	r3, #110	@ 0x6e
 8010386:	9242      	str	r2, [sp, #264]	@ 0x108
 8010388:	d902      	bls.n	8010390 <__ssvfiscanf_r+0x1e0>
 801038a:	e005      	b.n	8010398 <__ssvfiscanf_r+0x1e8>
 801038c:	2300      	movs	r3, #0
 801038e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010390:	2303      	movs	r3, #3
 8010392:	e002      	b.n	801039a <__ssvfiscanf_r+0x1ea>
 8010394:	2308      	movs	r3, #8
 8010396:	9342      	str	r3, [sp, #264]	@ 0x108
 8010398:	2304      	movs	r3, #4
 801039a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801039c:	6863      	ldr	r3, [r4, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	dd39      	ble.n	8010416 <__ssvfiscanf_r+0x266>
 80103a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103a4:	0659      	lsls	r1, r3, #25
 80103a6:	d404      	bmi.n	80103b2 <__ssvfiscanf_r+0x202>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	781a      	ldrb	r2, [r3, #0]
 80103ac:	5cba      	ldrb	r2, [r7, r2]
 80103ae:	0712      	lsls	r2, r2, #28
 80103b0:	d438      	bmi.n	8010424 <__ssvfiscanf_r+0x274>
 80103b2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80103b4:	2b02      	cmp	r3, #2
 80103b6:	dc47      	bgt.n	8010448 <__ssvfiscanf_r+0x298>
 80103b8:	466b      	mov	r3, sp
 80103ba:	4622      	mov	r2, r4
 80103bc:	a941      	add	r1, sp, #260	@ 0x104
 80103be:	4630      	mov	r0, r6
 80103c0:	f000 f86c 	bl	801049c <_scanf_chars>
 80103c4:	2801      	cmp	r0, #1
 80103c6:	d064      	beq.n	8010492 <__ssvfiscanf_r+0x2e2>
 80103c8:	2802      	cmp	r0, #2
 80103ca:	f47f af19 	bne.w	8010200 <__ssvfiscanf_r+0x50>
 80103ce:	e7c9      	b.n	8010364 <__ssvfiscanf_r+0x1b4>
 80103d0:	220a      	movs	r2, #10
 80103d2:	e7d7      	b.n	8010384 <__ssvfiscanf_r+0x1d4>
 80103d4:	4629      	mov	r1, r5
 80103d6:	4640      	mov	r0, r8
 80103d8:	f000 fa5a 	bl	8010890 <__sccl>
 80103dc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103e2:	9341      	str	r3, [sp, #260]	@ 0x104
 80103e4:	4605      	mov	r5, r0
 80103e6:	2301      	movs	r3, #1
 80103e8:	e7d7      	b.n	801039a <__ssvfiscanf_r+0x1ea>
 80103ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80103ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f0:	9341      	str	r3, [sp, #260]	@ 0x104
 80103f2:	2300      	movs	r3, #0
 80103f4:	e7d1      	b.n	801039a <__ssvfiscanf_r+0x1ea>
 80103f6:	2302      	movs	r3, #2
 80103f8:	e7cf      	b.n	801039a <__ssvfiscanf_r+0x1ea>
 80103fa:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80103fc:	06c3      	lsls	r3, r0, #27
 80103fe:	f53f aeff 	bmi.w	8010200 <__ssvfiscanf_r+0x50>
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010406:	1d19      	adds	r1, r3, #4
 8010408:	9100      	str	r1, [sp, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	07c0      	lsls	r0, r0, #31
 801040e:	bf4c      	ite	mi
 8010410:	801a      	strhmi	r2, [r3, #0]
 8010412:	601a      	strpl	r2, [r3, #0]
 8010414:	e6f4      	b.n	8010200 <__ssvfiscanf_r+0x50>
 8010416:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010418:	4621      	mov	r1, r4
 801041a:	4630      	mov	r0, r6
 801041c:	4798      	blx	r3
 801041e:	2800      	cmp	r0, #0
 8010420:	d0bf      	beq.n	80103a2 <__ssvfiscanf_r+0x1f2>
 8010422:	e79f      	b.n	8010364 <__ssvfiscanf_r+0x1b4>
 8010424:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010426:	3201      	adds	r2, #1
 8010428:	9245      	str	r2, [sp, #276]	@ 0x114
 801042a:	6862      	ldr	r2, [r4, #4]
 801042c:	3a01      	subs	r2, #1
 801042e:	2a00      	cmp	r2, #0
 8010430:	6062      	str	r2, [r4, #4]
 8010432:	dd02      	ble.n	801043a <__ssvfiscanf_r+0x28a>
 8010434:	3301      	adds	r3, #1
 8010436:	6023      	str	r3, [r4, #0]
 8010438:	e7b6      	b.n	80103a8 <__ssvfiscanf_r+0x1f8>
 801043a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801043c:	4621      	mov	r1, r4
 801043e:	4630      	mov	r0, r6
 8010440:	4798      	blx	r3
 8010442:	2800      	cmp	r0, #0
 8010444:	d0b0      	beq.n	80103a8 <__ssvfiscanf_r+0x1f8>
 8010446:	e78d      	b.n	8010364 <__ssvfiscanf_r+0x1b4>
 8010448:	2b04      	cmp	r3, #4
 801044a:	dc0f      	bgt.n	801046c <__ssvfiscanf_r+0x2bc>
 801044c:	466b      	mov	r3, sp
 801044e:	4622      	mov	r2, r4
 8010450:	a941      	add	r1, sp, #260	@ 0x104
 8010452:	4630      	mov	r0, r6
 8010454:	f000 f87c 	bl	8010550 <_scanf_i>
 8010458:	e7b4      	b.n	80103c4 <__ssvfiscanf_r+0x214>
 801045a:	bf00      	nop
 801045c:	080100fd 	.word	0x080100fd
 8010460:	08010177 	.word	0x08010177
 8010464:	08013a21 	.word	0x08013a21
 8010468:	08013805 	.word	0x08013805
 801046c:	4b0a      	ldr	r3, [pc, #40]	@ (8010498 <__ssvfiscanf_r+0x2e8>)
 801046e:	2b00      	cmp	r3, #0
 8010470:	f43f aec6 	beq.w	8010200 <__ssvfiscanf_r+0x50>
 8010474:	466b      	mov	r3, sp
 8010476:	4622      	mov	r2, r4
 8010478:	a941      	add	r1, sp, #260	@ 0x104
 801047a:	4630      	mov	r0, r6
 801047c:	f7fc fee4 	bl	800d248 <_scanf_float>
 8010480:	e7a0      	b.n	80103c4 <__ssvfiscanf_r+0x214>
 8010482:	89a3      	ldrh	r3, [r4, #12]
 8010484:	065b      	lsls	r3, r3, #25
 8010486:	f53f af71 	bmi.w	801036c <__ssvfiscanf_r+0x1bc>
 801048a:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010492:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010494:	e7f9      	b.n	801048a <__ssvfiscanf_r+0x2da>
 8010496:	bf00      	nop
 8010498:	0800d249 	.word	0x0800d249

0801049c <_scanf_chars>:
 801049c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104a0:	4615      	mov	r5, r2
 80104a2:	688a      	ldr	r2, [r1, #8]
 80104a4:	4680      	mov	r8, r0
 80104a6:	460c      	mov	r4, r1
 80104a8:	b932      	cbnz	r2, 80104b8 <_scanf_chars+0x1c>
 80104aa:	698a      	ldr	r2, [r1, #24]
 80104ac:	2a00      	cmp	r2, #0
 80104ae:	bf14      	ite	ne
 80104b0:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80104b4:	2201      	moveq	r2, #1
 80104b6:	608a      	str	r2, [r1, #8]
 80104b8:	6822      	ldr	r2, [r4, #0]
 80104ba:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801054c <_scanf_chars+0xb0>
 80104be:	06d1      	lsls	r1, r2, #27
 80104c0:	bf5f      	itttt	pl
 80104c2:	681a      	ldrpl	r2, [r3, #0]
 80104c4:	1d11      	addpl	r1, r2, #4
 80104c6:	6019      	strpl	r1, [r3, #0]
 80104c8:	6816      	ldrpl	r6, [r2, #0]
 80104ca:	2700      	movs	r7, #0
 80104cc:	69a0      	ldr	r0, [r4, #24]
 80104ce:	b188      	cbz	r0, 80104f4 <_scanf_chars+0x58>
 80104d0:	2801      	cmp	r0, #1
 80104d2:	d107      	bne.n	80104e4 <_scanf_chars+0x48>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	781a      	ldrb	r2, [r3, #0]
 80104d8:	6963      	ldr	r3, [r4, #20]
 80104da:	5c9b      	ldrb	r3, [r3, r2]
 80104dc:	b953      	cbnz	r3, 80104f4 <_scanf_chars+0x58>
 80104de:	2f00      	cmp	r7, #0
 80104e0:	d031      	beq.n	8010546 <_scanf_chars+0xaa>
 80104e2:	e022      	b.n	801052a <_scanf_chars+0x8e>
 80104e4:	2802      	cmp	r0, #2
 80104e6:	d120      	bne.n	801052a <_scanf_chars+0x8e>
 80104e8:	682b      	ldr	r3, [r5, #0]
 80104ea:	781b      	ldrb	r3, [r3, #0]
 80104ec:	f819 3003 	ldrb.w	r3, [r9, r3]
 80104f0:	071b      	lsls	r3, r3, #28
 80104f2:	d41a      	bmi.n	801052a <_scanf_chars+0x8e>
 80104f4:	6823      	ldr	r3, [r4, #0]
 80104f6:	06da      	lsls	r2, r3, #27
 80104f8:	bf5e      	ittt	pl
 80104fa:	682b      	ldrpl	r3, [r5, #0]
 80104fc:	781b      	ldrbpl	r3, [r3, #0]
 80104fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010502:	682a      	ldr	r2, [r5, #0]
 8010504:	686b      	ldr	r3, [r5, #4]
 8010506:	3201      	adds	r2, #1
 8010508:	602a      	str	r2, [r5, #0]
 801050a:	68a2      	ldr	r2, [r4, #8]
 801050c:	3b01      	subs	r3, #1
 801050e:	3a01      	subs	r2, #1
 8010510:	606b      	str	r3, [r5, #4]
 8010512:	3701      	adds	r7, #1
 8010514:	60a2      	str	r2, [r4, #8]
 8010516:	b142      	cbz	r2, 801052a <_scanf_chars+0x8e>
 8010518:	2b00      	cmp	r3, #0
 801051a:	dcd7      	bgt.n	80104cc <_scanf_chars+0x30>
 801051c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010520:	4629      	mov	r1, r5
 8010522:	4640      	mov	r0, r8
 8010524:	4798      	blx	r3
 8010526:	2800      	cmp	r0, #0
 8010528:	d0d0      	beq.n	80104cc <_scanf_chars+0x30>
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	f013 0310 	ands.w	r3, r3, #16
 8010530:	d105      	bne.n	801053e <_scanf_chars+0xa2>
 8010532:	68e2      	ldr	r2, [r4, #12]
 8010534:	3201      	adds	r2, #1
 8010536:	60e2      	str	r2, [r4, #12]
 8010538:	69a2      	ldr	r2, [r4, #24]
 801053a:	b102      	cbz	r2, 801053e <_scanf_chars+0xa2>
 801053c:	7033      	strb	r3, [r6, #0]
 801053e:	6923      	ldr	r3, [r4, #16]
 8010540:	443b      	add	r3, r7
 8010542:	6123      	str	r3, [r4, #16]
 8010544:	2000      	movs	r0, #0
 8010546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801054a:	bf00      	nop
 801054c:	08013a21 	.word	0x08013a21

08010550 <_scanf_i>:
 8010550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010554:	4698      	mov	r8, r3
 8010556:	4b74      	ldr	r3, [pc, #464]	@ (8010728 <_scanf_i+0x1d8>)
 8010558:	460c      	mov	r4, r1
 801055a:	4682      	mov	sl, r0
 801055c:	4616      	mov	r6, r2
 801055e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010562:	b087      	sub	sp, #28
 8010564:	ab03      	add	r3, sp, #12
 8010566:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801056a:	4b70      	ldr	r3, [pc, #448]	@ (801072c <_scanf_i+0x1dc>)
 801056c:	69a1      	ldr	r1, [r4, #24]
 801056e:	4a70      	ldr	r2, [pc, #448]	@ (8010730 <_scanf_i+0x1e0>)
 8010570:	2903      	cmp	r1, #3
 8010572:	bf08      	it	eq
 8010574:	461a      	moveq	r2, r3
 8010576:	68a3      	ldr	r3, [r4, #8]
 8010578:	9201      	str	r2, [sp, #4]
 801057a:	1e5a      	subs	r2, r3, #1
 801057c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010580:	bf88      	it	hi
 8010582:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010586:	4627      	mov	r7, r4
 8010588:	bf82      	ittt	hi
 801058a:	eb03 0905 	addhi.w	r9, r3, r5
 801058e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010592:	60a3      	strhi	r3, [r4, #8]
 8010594:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010598:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801059c:	bf98      	it	ls
 801059e:	f04f 0900 	movls.w	r9, #0
 80105a2:	6023      	str	r3, [r4, #0]
 80105a4:	463d      	mov	r5, r7
 80105a6:	f04f 0b00 	mov.w	fp, #0
 80105aa:	6831      	ldr	r1, [r6, #0]
 80105ac:	ab03      	add	r3, sp, #12
 80105ae:	7809      	ldrb	r1, [r1, #0]
 80105b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80105b4:	2202      	movs	r2, #2
 80105b6:	f7ef fe2b 	bl	8000210 <memchr>
 80105ba:	b328      	cbz	r0, 8010608 <_scanf_i+0xb8>
 80105bc:	f1bb 0f01 	cmp.w	fp, #1
 80105c0:	d159      	bne.n	8010676 <_scanf_i+0x126>
 80105c2:	6862      	ldr	r2, [r4, #4]
 80105c4:	b92a      	cbnz	r2, 80105d2 <_scanf_i+0x82>
 80105c6:	6822      	ldr	r2, [r4, #0]
 80105c8:	2108      	movs	r1, #8
 80105ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80105ce:	6061      	str	r1, [r4, #4]
 80105d0:	6022      	str	r2, [r4, #0]
 80105d2:	6822      	ldr	r2, [r4, #0]
 80105d4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80105d8:	6022      	str	r2, [r4, #0]
 80105da:	68a2      	ldr	r2, [r4, #8]
 80105dc:	1e51      	subs	r1, r2, #1
 80105de:	60a1      	str	r1, [r4, #8]
 80105e0:	b192      	cbz	r2, 8010608 <_scanf_i+0xb8>
 80105e2:	6832      	ldr	r2, [r6, #0]
 80105e4:	1c51      	adds	r1, r2, #1
 80105e6:	6031      	str	r1, [r6, #0]
 80105e8:	7812      	ldrb	r2, [r2, #0]
 80105ea:	f805 2b01 	strb.w	r2, [r5], #1
 80105ee:	6872      	ldr	r2, [r6, #4]
 80105f0:	3a01      	subs	r2, #1
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	6072      	str	r2, [r6, #4]
 80105f6:	dc07      	bgt.n	8010608 <_scanf_i+0xb8>
 80105f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80105fc:	4631      	mov	r1, r6
 80105fe:	4650      	mov	r0, sl
 8010600:	4790      	blx	r2
 8010602:	2800      	cmp	r0, #0
 8010604:	f040 8085 	bne.w	8010712 <_scanf_i+0x1c2>
 8010608:	f10b 0b01 	add.w	fp, fp, #1
 801060c:	f1bb 0f03 	cmp.w	fp, #3
 8010610:	d1cb      	bne.n	80105aa <_scanf_i+0x5a>
 8010612:	6863      	ldr	r3, [r4, #4]
 8010614:	b90b      	cbnz	r3, 801061a <_scanf_i+0xca>
 8010616:	230a      	movs	r3, #10
 8010618:	6063      	str	r3, [r4, #4]
 801061a:	6863      	ldr	r3, [r4, #4]
 801061c:	4945      	ldr	r1, [pc, #276]	@ (8010734 <_scanf_i+0x1e4>)
 801061e:	6960      	ldr	r0, [r4, #20]
 8010620:	1ac9      	subs	r1, r1, r3
 8010622:	f000 f935 	bl	8010890 <__sccl>
 8010626:	f04f 0b00 	mov.w	fp, #0
 801062a:	68a3      	ldr	r3, [r4, #8]
 801062c:	6822      	ldr	r2, [r4, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d03d      	beq.n	80106ae <_scanf_i+0x15e>
 8010632:	6831      	ldr	r1, [r6, #0]
 8010634:	6960      	ldr	r0, [r4, #20]
 8010636:	f891 c000 	ldrb.w	ip, [r1]
 801063a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801063e:	2800      	cmp	r0, #0
 8010640:	d035      	beq.n	80106ae <_scanf_i+0x15e>
 8010642:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010646:	d124      	bne.n	8010692 <_scanf_i+0x142>
 8010648:	0510      	lsls	r0, r2, #20
 801064a:	d522      	bpl.n	8010692 <_scanf_i+0x142>
 801064c:	f10b 0b01 	add.w	fp, fp, #1
 8010650:	f1b9 0f00 	cmp.w	r9, #0
 8010654:	d003      	beq.n	801065e <_scanf_i+0x10e>
 8010656:	3301      	adds	r3, #1
 8010658:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 801065c:	60a3      	str	r3, [r4, #8]
 801065e:	6873      	ldr	r3, [r6, #4]
 8010660:	3b01      	subs	r3, #1
 8010662:	2b00      	cmp	r3, #0
 8010664:	6073      	str	r3, [r6, #4]
 8010666:	dd1b      	ble.n	80106a0 <_scanf_i+0x150>
 8010668:	6833      	ldr	r3, [r6, #0]
 801066a:	3301      	adds	r3, #1
 801066c:	6033      	str	r3, [r6, #0]
 801066e:	68a3      	ldr	r3, [r4, #8]
 8010670:	3b01      	subs	r3, #1
 8010672:	60a3      	str	r3, [r4, #8]
 8010674:	e7d9      	b.n	801062a <_scanf_i+0xda>
 8010676:	f1bb 0f02 	cmp.w	fp, #2
 801067a:	d1ae      	bne.n	80105da <_scanf_i+0x8a>
 801067c:	6822      	ldr	r2, [r4, #0]
 801067e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010682:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010686:	d1c4      	bne.n	8010612 <_scanf_i+0xc2>
 8010688:	2110      	movs	r1, #16
 801068a:	6061      	str	r1, [r4, #4]
 801068c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010690:	e7a2      	b.n	80105d8 <_scanf_i+0x88>
 8010692:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010696:	6022      	str	r2, [r4, #0]
 8010698:	780b      	ldrb	r3, [r1, #0]
 801069a:	f805 3b01 	strb.w	r3, [r5], #1
 801069e:	e7de      	b.n	801065e <_scanf_i+0x10e>
 80106a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80106a4:	4631      	mov	r1, r6
 80106a6:	4650      	mov	r0, sl
 80106a8:	4798      	blx	r3
 80106aa:	2800      	cmp	r0, #0
 80106ac:	d0df      	beq.n	801066e <_scanf_i+0x11e>
 80106ae:	6823      	ldr	r3, [r4, #0]
 80106b0:	05d9      	lsls	r1, r3, #23
 80106b2:	d50d      	bpl.n	80106d0 <_scanf_i+0x180>
 80106b4:	42bd      	cmp	r5, r7
 80106b6:	d909      	bls.n	80106cc <_scanf_i+0x17c>
 80106b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80106bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80106c0:	4632      	mov	r2, r6
 80106c2:	4650      	mov	r0, sl
 80106c4:	4798      	blx	r3
 80106c6:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80106ca:	464d      	mov	r5, r9
 80106cc:	42bd      	cmp	r5, r7
 80106ce:	d028      	beq.n	8010722 <_scanf_i+0x1d2>
 80106d0:	6822      	ldr	r2, [r4, #0]
 80106d2:	f012 0210 	ands.w	r2, r2, #16
 80106d6:	d113      	bne.n	8010700 <_scanf_i+0x1b0>
 80106d8:	702a      	strb	r2, [r5, #0]
 80106da:	6863      	ldr	r3, [r4, #4]
 80106dc:	9e01      	ldr	r6, [sp, #4]
 80106de:	4639      	mov	r1, r7
 80106e0:	4650      	mov	r0, sl
 80106e2:	47b0      	blx	r6
 80106e4:	f8d8 3000 	ldr.w	r3, [r8]
 80106e8:	6821      	ldr	r1, [r4, #0]
 80106ea:	1d1a      	adds	r2, r3, #4
 80106ec:	f8c8 2000 	str.w	r2, [r8]
 80106f0:	f011 0f20 	tst.w	r1, #32
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	d00f      	beq.n	8010718 <_scanf_i+0x1c8>
 80106f8:	6018      	str	r0, [r3, #0]
 80106fa:	68e3      	ldr	r3, [r4, #12]
 80106fc:	3301      	adds	r3, #1
 80106fe:	60e3      	str	r3, [r4, #12]
 8010700:	6923      	ldr	r3, [r4, #16]
 8010702:	1bed      	subs	r5, r5, r7
 8010704:	445d      	add	r5, fp
 8010706:	442b      	add	r3, r5
 8010708:	6123      	str	r3, [r4, #16]
 801070a:	2000      	movs	r0, #0
 801070c:	b007      	add	sp, #28
 801070e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010712:	f04f 0b00 	mov.w	fp, #0
 8010716:	e7ca      	b.n	80106ae <_scanf_i+0x15e>
 8010718:	07ca      	lsls	r2, r1, #31
 801071a:	bf4c      	ite	mi
 801071c:	8018      	strhmi	r0, [r3, #0]
 801071e:	6018      	strpl	r0, [r3, #0]
 8010720:	e7eb      	b.n	80106fa <_scanf_i+0x1aa>
 8010722:	2001      	movs	r0, #1
 8010724:	e7f2      	b.n	801070c <_scanf_i+0x1bc>
 8010726:	bf00      	nop
 8010728:	080136b4 	.word	0x080136b4
 801072c:	0800fe49 	.word	0x0800fe49
 8010730:	080111ed 	.word	0x080111ed
 8010734:	08013820 	.word	0x08013820

08010738 <__sflush_r>:
 8010738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801073c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010740:	0716      	lsls	r6, r2, #28
 8010742:	4605      	mov	r5, r0
 8010744:	460c      	mov	r4, r1
 8010746:	d454      	bmi.n	80107f2 <__sflush_r+0xba>
 8010748:	684b      	ldr	r3, [r1, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	dc02      	bgt.n	8010754 <__sflush_r+0x1c>
 801074e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010750:	2b00      	cmp	r3, #0
 8010752:	dd48      	ble.n	80107e6 <__sflush_r+0xae>
 8010754:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010756:	2e00      	cmp	r6, #0
 8010758:	d045      	beq.n	80107e6 <__sflush_r+0xae>
 801075a:	2300      	movs	r3, #0
 801075c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010760:	682f      	ldr	r7, [r5, #0]
 8010762:	6a21      	ldr	r1, [r4, #32]
 8010764:	602b      	str	r3, [r5, #0]
 8010766:	d030      	beq.n	80107ca <__sflush_r+0x92>
 8010768:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801076a:	89a3      	ldrh	r3, [r4, #12]
 801076c:	0759      	lsls	r1, r3, #29
 801076e:	d505      	bpl.n	801077c <__sflush_r+0x44>
 8010770:	6863      	ldr	r3, [r4, #4]
 8010772:	1ad2      	subs	r2, r2, r3
 8010774:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010776:	b10b      	cbz	r3, 801077c <__sflush_r+0x44>
 8010778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801077a:	1ad2      	subs	r2, r2, r3
 801077c:	2300      	movs	r3, #0
 801077e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010780:	6a21      	ldr	r1, [r4, #32]
 8010782:	4628      	mov	r0, r5
 8010784:	47b0      	blx	r6
 8010786:	1c43      	adds	r3, r0, #1
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	d106      	bne.n	801079a <__sflush_r+0x62>
 801078c:	6829      	ldr	r1, [r5, #0]
 801078e:	291d      	cmp	r1, #29
 8010790:	d82b      	bhi.n	80107ea <__sflush_r+0xb2>
 8010792:	4a2a      	ldr	r2, [pc, #168]	@ (801083c <__sflush_r+0x104>)
 8010794:	40ca      	lsrs	r2, r1
 8010796:	07d6      	lsls	r6, r2, #31
 8010798:	d527      	bpl.n	80107ea <__sflush_r+0xb2>
 801079a:	2200      	movs	r2, #0
 801079c:	6062      	str	r2, [r4, #4]
 801079e:	04d9      	lsls	r1, r3, #19
 80107a0:	6922      	ldr	r2, [r4, #16]
 80107a2:	6022      	str	r2, [r4, #0]
 80107a4:	d504      	bpl.n	80107b0 <__sflush_r+0x78>
 80107a6:	1c42      	adds	r2, r0, #1
 80107a8:	d101      	bne.n	80107ae <__sflush_r+0x76>
 80107aa:	682b      	ldr	r3, [r5, #0]
 80107ac:	b903      	cbnz	r3, 80107b0 <__sflush_r+0x78>
 80107ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80107b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107b2:	602f      	str	r7, [r5, #0]
 80107b4:	b1b9      	cbz	r1, 80107e6 <__sflush_r+0xae>
 80107b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107ba:	4299      	cmp	r1, r3
 80107bc:	d002      	beq.n	80107c4 <__sflush_r+0x8c>
 80107be:	4628      	mov	r0, r5
 80107c0:	f7fd ffca 	bl	800e758 <_free_r>
 80107c4:	2300      	movs	r3, #0
 80107c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80107c8:	e00d      	b.n	80107e6 <__sflush_r+0xae>
 80107ca:	2301      	movs	r3, #1
 80107cc:	4628      	mov	r0, r5
 80107ce:	47b0      	blx	r6
 80107d0:	4602      	mov	r2, r0
 80107d2:	1c50      	adds	r0, r2, #1
 80107d4:	d1c9      	bne.n	801076a <__sflush_r+0x32>
 80107d6:	682b      	ldr	r3, [r5, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d0c6      	beq.n	801076a <__sflush_r+0x32>
 80107dc:	2b1d      	cmp	r3, #29
 80107de:	d001      	beq.n	80107e4 <__sflush_r+0xac>
 80107e0:	2b16      	cmp	r3, #22
 80107e2:	d11e      	bne.n	8010822 <__sflush_r+0xea>
 80107e4:	602f      	str	r7, [r5, #0]
 80107e6:	2000      	movs	r0, #0
 80107e8:	e022      	b.n	8010830 <__sflush_r+0xf8>
 80107ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107ee:	b21b      	sxth	r3, r3
 80107f0:	e01b      	b.n	801082a <__sflush_r+0xf2>
 80107f2:	690f      	ldr	r7, [r1, #16]
 80107f4:	2f00      	cmp	r7, #0
 80107f6:	d0f6      	beq.n	80107e6 <__sflush_r+0xae>
 80107f8:	0793      	lsls	r3, r2, #30
 80107fa:	680e      	ldr	r6, [r1, #0]
 80107fc:	bf08      	it	eq
 80107fe:	694b      	ldreq	r3, [r1, #20]
 8010800:	600f      	str	r7, [r1, #0]
 8010802:	bf18      	it	ne
 8010804:	2300      	movne	r3, #0
 8010806:	eba6 0807 	sub.w	r8, r6, r7
 801080a:	608b      	str	r3, [r1, #8]
 801080c:	f1b8 0f00 	cmp.w	r8, #0
 8010810:	dde9      	ble.n	80107e6 <__sflush_r+0xae>
 8010812:	6a21      	ldr	r1, [r4, #32]
 8010814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010816:	4643      	mov	r3, r8
 8010818:	463a      	mov	r2, r7
 801081a:	4628      	mov	r0, r5
 801081c:	47b0      	blx	r6
 801081e:	2800      	cmp	r0, #0
 8010820:	dc08      	bgt.n	8010834 <__sflush_r+0xfc>
 8010822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801082a:	81a3      	strh	r3, [r4, #12]
 801082c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010834:	4407      	add	r7, r0
 8010836:	eba8 0800 	sub.w	r8, r8, r0
 801083a:	e7e7      	b.n	801080c <__sflush_r+0xd4>
 801083c:	20400001 	.word	0x20400001

08010840 <_fflush_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	690b      	ldr	r3, [r1, #16]
 8010844:	4605      	mov	r5, r0
 8010846:	460c      	mov	r4, r1
 8010848:	b913      	cbnz	r3, 8010850 <_fflush_r+0x10>
 801084a:	2500      	movs	r5, #0
 801084c:	4628      	mov	r0, r5
 801084e:	bd38      	pop	{r3, r4, r5, pc}
 8010850:	b118      	cbz	r0, 801085a <_fflush_r+0x1a>
 8010852:	6a03      	ldr	r3, [r0, #32]
 8010854:	b90b      	cbnz	r3, 801085a <_fflush_r+0x1a>
 8010856:	f7fc ff91 	bl	800d77c <__sinit>
 801085a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d0f3      	beq.n	801084a <_fflush_r+0xa>
 8010862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010864:	07d0      	lsls	r0, r2, #31
 8010866:	d404      	bmi.n	8010872 <_fflush_r+0x32>
 8010868:	0599      	lsls	r1, r3, #22
 801086a:	d402      	bmi.n	8010872 <_fflush_r+0x32>
 801086c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801086e:	f7fd f902 	bl	800da76 <__retarget_lock_acquire_recursive>
 8010872:	4628      	mov	r0, r5
 8010874:	4621      	mov	r1, r4
 8010876:	f7ff ff5f 	bl	8010738 <__sflush_r>
 801087a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801087c:	07da      	lsls	r2, r3, #31
 801087e:	4605      	mov	r5, r0
 8010880:	d4e4      	bmi.n	801084c <_fflush_r+0xc>
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	059b      	lsls	r3, r3, #22
 8010886:	d4e1      	bmi.n	801084c <_fflush_r+0xc>
 8010888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801088a:	f7fd f8f5 	bl	800da78 <__retarget_lock_release_recursive>
 801088e:	e7dd      	b.n	801084c <_fflush_r+0xc>

08010890 <__sccl>:
 8010890:	b570      	push	{r4, r5, r6, lr}
 8010892:	780b      	ldrb	r3, [r1, #0]
 8010894:	4604      	mov	r4, r0
 8010896:	2b5e      	cmp	r3, #94	@ 0x5e
 8010898:	bf0b      	itete	eq
 801089a:	784b      	ldrbeq	r3, [r1, #1]
 801089c:	1c4a      	addne	r2, r1, #1
 801089e:	1c8a      	addeq	r2, r1, #2
 80108a0:	2100      	movne	r1, #0
 80108a2:	bf08      	it	eq
 80108a4:	2101      	moveq	r1, #1
 80108a6:	3801      	subs	r0, #1
 80108a8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80108ac:	f800 1f01 	strb.w	r1, [r0, #1]!
 80108b0:	42a8      	cmp	r0, r5
 80108b2:	d1fb      	bne.n	80108ac <__sccl+0x1c>
 80108b4:	b90b      	cbnz	r3, 80108ba <__sccl+0x2a>
 80108b6:	1e50      	subs	r0, r2, #1
 80108b8:	bd70      	pop	{r4, r5, r6, pc}
 80108ba:	f081 0101 	eor.w	r1, r1, #1
 80108be:	54e1      	strb	r1, [r4, r3]
 80108c0:	4610      	mov	r0, r2
 80108c2:	4602      	mov	r2, r0
 80108c4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80108c8:	2d2d      	cmp	r5, #45	@ 0x2d
 80108ca:	d005      	beq.n	80108d8 <__sccl+0x48>
 80108cc:	2d5d      	cmp	r5, #93	@ 0x5d
 80108ce:	d016      	beq.n	80108fe <__sccl+0x6e>
 80108d0:	2d00      	cmp	r5, #0
 80108d2:	d0f1      	beq.n	80108b8 <__sccl+0x28>
 80108d4:	462b      	mov	r3, r5
 80108d6:	e7f2      	b.n	80108be <__sccl+0x2e>
 80108d8:	7846      	ldrb	r6, [r0, #1]
 80108da:	2e5d      	cmp	r6, #93	@ 0x5d
 80108dc:	d0fa      	beq.n	80108d4 <__sccl+0x44>
 80108de:	42b3      	cmp	r3, r6
 80108e0:	dcf8      	bgt.n	80108d4 <__sccl+0x44>
 80108e2:	3002      	adds	r0, #2
 80108e4:	461a      	mov	r2, r3
 80108e6:	3201      	adds	r2, #1
 80108e8:	4296      	cmp	r6, r2
 80108ea:	54a1      	strb	r1, [r4, r2]
 80108ec:	dcfb      	bgt.n	80108e6 <__sccl+0x56>
 80108ee:	1af2      	subs	r2, r6, r3
 80108f0:	3a01      	subs	r2, #1
 80108f2:	1c5d      	adds	r5, r3, #1
 80108f4:	42b3      	cmp	r3, r6
 80108f6:	bfa8      	it	ge
 80108f8:	2200      	movge	r2, #0
 80108fa:	18ab      	adds	r3, r5, r2
 80108fc:	e7e1      	b.n	80108c2 <__sccl+0x32>
 80108fe:	4610      	mov	r0, r2
 8010900:	e7da      	b.n	80108b8 <__sccl+0x28>

08010902 <__submore>:
 8010902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010906:	460c      	mov	r4, r1
 8010908:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801090a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801090e:	4299      	cmp	r1, r3
 8010910:	d11d      	bne.n	801094e <__submore+0x4c>
 8010912:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010916:	f7fb ffb5 	bl	800c884 <_malloc_r>
 801091a:	b918      	cbnz	r0, 8010924 <__submore+0x22>
 801091c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010928:	63a3      	str	r3, [r4, #56]	@ 0x38
 801092a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801092e:	6360      	str	r0, [r4, #52]	@ 0x34
 8010930:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010934:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010938:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801093c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010940:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010944:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010948:	6020      	str	r0, [r4, #0]
 801094a:	2000      	movs	r0, #0
 801094c:	e7e8      	b.n	8010920 <__submore+0x1e>
 801094e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010950:	0077      	lsls	r7, r6, #1
 8010952:	463a      	mov	r2, r7
 8010954:	f000 fbad 	bl	80110b2 <_realloc_r>
 8010958:	4605      	mov	r5, r0
 801095a:	2800      	cmp	r0, #0
 801095c:	d0de      	beq.n	801091c <__submore+0x1a>
 801095e:	eb00 0806 	add.w	r8, r0, r6
 8010962:	4601      	mov	r1, r0
 8010964:	4632      	mov	r2, r6
 8010966:	4640      	mov	r0, r8
 8010968:	f7fd f887 	bl	800da7a <memcpy>
 801096c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010970:	f8c4 8000 	str.w	r8, [r4]
 8010974:	e7e9      	b.n	801094a <__submore+0x48>

08010976 <memmove>:
 8010976:	4288      	cmp	r0, r1
 8010978:	b510      	push	{r4, lr}
 801097a:	eb01 0402 	add.w	r4, r1, r2
 801097e:	d902      	bls.n	8010986 <memmove+0x10>
 8010980:	4284      	cmp	r4, r0
 8010982:	4623      	mov	r3, r4
 8010984:	d807      	bhi.n	8010996 <memmove+0x20>
 8010986:	1e43      	subs	r3, r0, #1
 8010988:	42a1      	cmp	r1, r4
 801098a:	d008      	beq.n	801099e <memmove+0x28>
 801098c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010990:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010994:	e7f8      	b.n	8010988 <memmove+0x12>
 8010996:	4402      	add	r2, r0
 8010998:	4601      	mov	r1, r0
 801099a:	428a      	cmp	r2, r1
 801099c:	d100      	bne.n	80109a0 <memmove+0x2a>
 801099e:	bd10      	pop	{r4, pc}
 80109a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109a8:	e7f7      	b.n	801099a <memmove+0x24>

080109aa <strncmp>:
 80109aa:	b510      	push	{r4, lr}
 80109ac:	b16a      	cbz	r2, 80109ca <strncmp+0x20>
 80109ae:	3901      	subs	r1, #1
 80109b0:	1884      	adds	r4, r0, r2
 80109b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d103      	bne.n	80109c6 <strncmp+0x1c>
 80109be:	42a0      	cmp	r0, r4
 80109c0:	d001      	beq.n	80109c6 <strncmp+0x1c>
 80109c2:	2a00      	cmp	r2, #0
 80109c4:	d1f5      	bne.n	80109b2 <strncmp+0x8>
 80109c6:	1ad0      	subs	r0, r2, r3
 80109c8:	bd10      	pop	{r4, pc}
 80109ca:	4610      	mov	r0, r2
 80109cc:	e7fc      	b.n	80109c8 <strncmp+0x1e>
	...

080109d0 <nan>:
 80109d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80109d8 <nan+0x8>
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	00000000 	.word	0x00000000
 80109dc:	7ff80000 	.word	0x7ff80000

080109e0 <__assert_func>:
 80109e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109e2:	4614      	mov	r4, r2
 80109e4:	461a      	mov	r2, r3
 80109e6:	4b09      	ldr	r3, [pc, #36]	@ (8010a0c <__assert_func+0x2c>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4605      	mov	r5, r0
 80109ec:	68d8      	ldr	r0, [r3, #12]
 80109ee:	b14c      	cbz	r4, 8010a04 <__assert_func+0x24>
 80109f0:	4b07      	ldr	r3, [pc, #28]	@ (8010a10 <__assert_func+0x30>)
 80109f2:	9100      	str	r1, [sp, #0]
 80109f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80109f8:	4906      	ldr	r1, [pc, #24]	@ (8010a14 <__assert_func+0x34>)
 80109fa:	462b      	mov	r3, r5
 80109fc:	f000 fc06 	bl	801120c <fiprintf>
 8010a00:	f000 fc16 	bl	8011230 <abort>
 8010a04:	4b04      	ldr	r3, [pc, #16]	@ (8010a18 <__assert_func+0x38>)
 8010a06:	461c      	mov	r4, r3
 8010a08:	e7f3      	b.n	80109f2 <__assert_func+0x12>
 8010a0a:	bf00      	nop
 8010a0c:	20000030 	.word	0x20000030
 8010a10:	08013833 	.word	0x08013833
 8010a14:	08013840 	.word	0x08013840
 8010a18:	0801386e 	.word	0x0801386e

08010a1c <rshift>:
 8010a1c:	6903      	ldr	r3, [r0, #16]
 8010a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a2a:	f100 0414 	add.w	r4, r0, #20
 8010a2e:	dd45      	ble.n	8010abc <rshift+0xa0>
 8010a30:	f011 011f 	ands.w	r1, r1, #31
 8010a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a3c:	d10c      	bne.n	8010a58 <rshift+0x3c>
 8010a3e:	f100 0710 	add.w	r7, r0, #16
 8010a42:	4629      	mov	r1, r5
 8010a44:	42b1      	cmp	r1, r6
 8010a46:	d334      	bcc.n	8010ab2 <rshift+0x96>
 8010a48:	1a9b      	subs	r3, r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	1eea      	subs	r2, r5, #3
 8010a4e:	4296      	cmp	r6, r2
 8010a50:	bf38      	it	cc
 8010a52:	2300      	movcc	r3, #0
 8010a54:	4423      	add	r3, r4
 8010a56:	e015      	b.n	8010a84 <rshift+0x68>
 8010a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a5c:	f1c1 0820 	rsb	r8, r1, #32
 8010a60:	40cf      	lsrs	r7, r1
 8010a62:	f105 0e04 	add.w	lr, r5, #4
 8010a66:	46a1      	mov	r9, r4
 8010a68:	4576      	cmp	r6, lr
 8010a6a:	46f4      	mov	ip, lr
 8010a6c:	d815      	bhi.n	8010a9a <rshift+0x7e>
 8010a6e:	1a9a      	subs	r2, r3, r2
 8010a70:	0092      	lsls	r2, r2, #2
 8010a72:	3a04      	subs	r2, #4
 8010a74:	3501      	adds	r5, #1
 8010a76:	42ae      	cmp	r6, r5
 8010a78:	bf38      	it	cc
 8010a7a:	2200      	movcc	r2, #0
 8010a7c:	18a3      	adds	r3, r4, r2
 8010a7e:	50a7      	str	r7, [r4, r2]
 8010a80:	b107      	cbz	r7, 8010a84 <rshift+0x68>
 8010a82:	3304      	adds	r3, #4
 8010a84:	1b1a      	subs	r2, r3, r4
 8010a86:	42a3      	cmp	r3, r4
 8010a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010a8c:	bf08      	it	eq
 8010a8e:	2300      	moveq	r3, #0
 8010a90:	6102      	str	r2, [r0, #16]
 8010a92:	bf08      	it	eq
 8010a94:	6143      	streq	r3, [r0, #20]
 8010a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a9a:	f8dc c000 	ldr.w	ip, [ip]
 8010a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8010aa6:	f849 7b04 	str.w	r7, [r9], #4
 8010aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010aae:	40cf      	lsrs	r7, r1
 8010ab0:	e7da      	b.n	8010a68 <rshift+0x4c>
 8010ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8010aba:	e7c3      	b.n	8010a44 <rshift+0x28>
 8010abc:	4623      	mov	r3, r4
 8010abe:	e7e1      	b.n	8010a84 <rshift+0x68>

08010ac0 <__hexdig_fun>:
 8010ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ac4:	2b09      	cmp	r3, #9
 8010ac6:	d802      	bhi.n	8010ace <__hexdig_fun+0xe>
 8010ac8:	3820      	subs	r0, #32
 8010aca:	b2c0      	uxtb	r0, r0
 8010acc:	4770      	bx	lr
 8010ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010ad2:	2b05      	cmp	r3, #5
 8010ad4:	d801      	bhi.n	8010ada <__hexdig_fun+0x1a>
 8010ad6:	3847      	subs	r0, #71	@ 0x47
 8010ad8:	e7f7      	b.n	8010aca <__hexdig_fun+0xa>
 8010ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010ade:	2b05      	cmp	r3, #5
 8010ae0:	d801      	bhi.n	8010ae6 <__hexdig_fun+0x26>
 8010ae2:	3827      	subs	r0, #39	@ 0x27
 8010ae4:	e7f1      	b.n	8010aca <__hexdig_fun+0xa>
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	4770      	bx	lr
	...

08010aec <__gethex>:
 8010aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010af0:	b085      	sub	sp, #20
 8010af2:	468a      	mov	sl, r1
 8010af4:	9302      	str	r3, [sp, #8]
 8010af6:	680b      	ldr	r3, [r1, #0]
 8010af8:	9001      	str	r0, [sp, #4]
 8010afa:	4690      	mov	r8, r2
 8010afc:	1c9c      	adds	r4, r3, #2
 8010afe:	46a1      	mov	r9, r4
 8010b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010b04:	2830      	cmp	r0, #48	@ 0x30
 8010b06:	d0fa      	beq.n	8010afe <__gethex+0x12>
 8010b08:	eba9 0303 	sub.w	r3, r9, r3
 8010b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010b10:	f7ff ffd6 	bl	8010ac0 <__hexdig_fun>
 8010b14:	4605      	mov	r5, r0
 8010b16:	2800      	cmp	r0, #0
 8010b18:	d168      	bne.n	8010bec <__gethex+0x100>
 8010b1a:	49a0      	ldr	r1, [pc, #640]	@ (8010d9c <__gethex+0x2b0>)
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	4648      	mov	r0, r9
 8010b20:	f7ff ff43 	bl	80109aa <strncmp>
 8010b24:	4607      	mov	r7, r0
 8010b26:	2800      	cmp	r0, #0
 8010b28:	d167      	bne.n	8010bfa <__gethex+0x10e>
 8010b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010b2e:	4626      	mov	r6, r4
 8010b30:	f7ff ffc6 	bl	8010ac0 <__hexdig_fun>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d062      	beq.n	8010bfe <__gethex+0x112>
 8010b38:	4623      	mov	r3, r4
 8010b3a:	7818      	ldrb	r0, [r3, #0]
 8010b3c:	2830      	cmp	r0, #48	@ 0x30
 8010b3e:	4699      	mov	r9, r3
 8010b40:	f103 0301 	add.w	r3, r3, #1
 8010b44:	d0f9      	beq.n	8010b3a <__gethex+0x4e>
 8010b46:	f7ff ffbb 	bl	8010ac0 <__hexdig_fun>
 8010b4a:	fab0 f580 	clz	r5, r0
 8010b4e:	096d      	lsrs	r5, r5, #5
 8010b50:	f04f 0b01 	mov.w	fp, #1
 8010b54:	464a      	mov	r2, r9
 8010b56:	4616      	mov	r6, r2
 8010b58:	3201      	adds	r2, #1
 8010b5a:	7830      	ldrb	r0, [r6, #0]
 8010b5c:	f7ff ffb0 	bl	8010ac0 <__hexdig_fun>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	d1f8      	bne.n	8010b56 <__gethex+0x6a>
 8010b64:	498d      	ldr	r1, [pc, #564]	@ (8010d9c <__gethex+0x2b0>)
 8010b66:	2201      	movs	r2, #1
 8010b68:	4630      	mov	r0, r6
 8010b6a:	f7ff ff1e 	bl	80109aa <strncmp>
 8010b6e:	2800      	cmp	r0, #0
 8010b70:	d13f      	bne.n	8010bf2 <__gethex+0x106>
 8010b72:	b944      	cbnz	r4, 8010b86 <__gethex+0x9a>
 8010b74:	1c74      	adds	r4, r6, #1
 8010b76:	4622      	mov	r2, r4
 8010b78:	4616      	mov	r6, r2
 8010b7a:	3201      	adds	r2, #1
 8010b7c:	7830      	ldrb	r0, [r6, #0]
 8010b7e:	f7ff ff9f 	bl	8010ac0 <__hexdig_fun>
 8010b82:	2800      	cmp	r0, #0
 8010b84:	d1f8      	bne.n	8010b78 <__gethex+0x8c>
 8010b86:	1ba4      	subs	r4, r4, r6
 8010b88:	00a7      	lsls	r7, r4, #2
 8010b8a:	7833      	ldrb	r3, [r6, #0]
 8010b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010b90:	2b50      	cmp	r3, #80	@ 0x50
 8010b92:	d13e      	bne.n	8010c12 <__gethex+0x126>
 8010b94:	7873      	ldrb	r3, [r6, #1]
 8010b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8010b98:	d033      	beq.n	8010c02 <__gethex+0x116>
 8010b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8010b9c:	d034      	beq.n	8010c08 <__gethex+0x11c>
 8010b9e:	1c71      	adds	r1, r6, #1
 8010ba0:	2400      	movs	r4, #0
 8010ba2:	7808      	ldrb	r0, [r1, #0]
 8010ba4:	f7ff ff8c 	bl	8010ac0 <__hexdig_fun>
 8010ba8:	1e43      	subs	r3, r0, #1
 8010baa:	b2db      	uxtb	r3, r3
 8010bac:	2b18      	cmp	r3, #24
 8010bae:	d830      	bhi.n	8010c12 <__gethex+0x126>
 8010bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8010bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bb8:	f7ff ff82 	bl	8010ac0 <__hexdig_fun>
 8010bbc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8010bc4:	f1bc 0f18 	cmp.w	ip, #24
 8010bc8:	f04f 030a 	mov.w	r3, #10
 8010bcc:	d91e      	bls.n	8010c0c <__gethex+0x120>
 8010bce:	b104      	cbz	r4, 8010bd2 <__gethex+0xe6>
 8010bd0:	4252      	negs	r2, r2
 8010bd2:	4417      	add	r7, r2
 8010bd4:	f8ca 1000 	str.w	r1, [sl]
 8010bd8:	b1ed      	cbz	r5, 8010c16 <__gethex+0x12a>
 8010bda:	f1bb 0f00 	cmp.w	fp, #0
 8010bde:	bf0c      	ite	eq
 8010be0:	2506      	moveq	r5, #6
 8010be2:	2500      	movne	r5, #0
 8010be4:	4628      	mov	r0, r5
 8010be6:	b005      	add	sp, #20
 8010be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bec:	2500      	movs	r5, #0
 8010bee:	462c      	mov	r4, r5
 8010bf0:	e7b0      	b.n	8010b54 <__gethex+0x68>
 8010bf2:	2c00      	cmp	r4, #0
 8010bf4:	d1c7      	bne.n	8010b86 <__gethex+0x9a>
 8010bf6:	4627      	mov	r7, r4
 8010bf8:	e7c7      	b.n	8010b8a <__gethex+0x9e>
 8010bfa:	464e      	mov	r6, r9
 8010bfc:	462f      	mov	r7, r5
 8010bfe:	2501      	movs	r5, #1
 8010c00:	e7c3      	b.n	8010b8a <__gethex+0x9e>
 8010c02:	2400      	movs	r4, #0
 8010c04:	1cb1      	adds	r1, r6, #2
 8010c06:	e7cc      	b.n	8010ba2 <__gethex+0xb6>
 8010c08:	2401      	movs	r4, #1
 8010c0a:	e7fb      	b.n	8010c04 <__gethex+0x118>
 8010c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8010c10:	e7ce      	b.n	8010bb0 <__gethex+0xc4>
 8010c12:	4631      	mov	r1, r6
 8010c14:	e7de      	b.n	8010bd4 <__gethex+0xe8>
 8010c16:	eba6 0309 	sub.w	r3, r6, r9
 8010c1a:	3b01      	subs	r3, #1
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	2b07      	cmp	r3, #7
 8010c20:	dc0a      	bgt.n	8010c38 <__gethex+0x14c>
 8010c22:	9801      	ldr	r0, [sp, #4]
 8010c24:	f7fd fde2 	bl	800e7ec <_Balloc>
 8010c28:	4604      	mov	r4, r0
 8010c2a:	b940      	cbnz	r0, 8010c3e <__gethex+0x152>
 8010c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8010da0 <__gethex+0x2b4>)
 8010c2e:	4602      	mov	r2, r0
 8010c30:	21e4      	movs	r1, #228	@ 0xe4
 8010c32:	485c      	ldr	r0, [pc, #368]	@ (8010da4 <__gethex+0x2b8>)
 8010c34:	f7ff fed4 	bl	80109e0 <__assert_func>
 8010c38:	3101      	adds	r1, #1
 8010c3a:	105b      	asrs	r3, r3, #1
 8010c3c:	e7ef      	b.n	8010c1e <__gethex+0x132>
 8010c3e:	f100 0a14 	add.w	sl, r0, #20
 8010c42:	2300      	movs	r3, #0
 8010c44:	4655      	mov	r5, sl
 8010c46:	469b      	mov	fp, r3
 8010c48:	45b1      	cmp	r9, r6
 8010c4a:	d337      	bcc.n	8010cbc <__gethex+0x1d0>
 8010c4c:	f845 bb04 	str.w	fp, [r5], #4
 8010c50:	eba5 050a 	sub.w	r5, r5, sl
 8010c54:	10ad      	asrs	r5, r5, #2
 8010c56:	6125      	str	r5, [r4, #16]
 8010c58:	4658      	mov	r0, fp
 8010c5a:	f7fd feb9 	bl	800e9d0 <__hi0bits>
 8010c5e:	016d      	lsls	r5, r5, #5
 8010c60:	f8d8 6000 	ldr.w	r6, [r8]
 8010c64:	1a2d      	subs	r5, r5, r0
 8010c66:	42b5      	cmp	r5, r6
 8010c68:	dd54      	ble.n	8010d14 <__gethex+0x228>
 8010c6a:	1bad      	subs	r5, r5, r6
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f7fe fa45 	bl	800f0fe <__any_on>
 8010c74:	4681      	mov	r9, r0
 8010c76:	b178      	cbz	r0, 8010c98 <__gethex+0x1ac>
 8010c78:	1e6b      	subs	r3, r5, #1
 8010c7a:	1159      	asrs	r1, r3, #5
 8010c7c:	f003 021f 	and.w	r2, r3, #31
 8010c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010c84:	f04f 0901 	mov.w	r9, #1
 8010c88:	fa09 f202 	lsl.w	r2, r9, r2
 8010c8c:	420a      	tst	r2, r1
 8010c8e:	d003      	beq.n	8010c98 <__gethex+0x1ac>
 8010c90:	454b      	cmp	r3, r9
 8010c92:	dc36      	bgt.n	8010d02 <__gethex+0x216>
 8010c94:	f04f 0902 	mov.w	r9, #2
 8010c98:	4629      	mov	r1, r5
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f7ff febe 	bl	8010a1c <rshift>
 8010ca0:	442f      	add	r7, r5
 8010ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ca6:	42bb      	cmp	r3, r7
 8010ca8:	da42      	bge.n	8010d30 <__gethex+0x244>
 8010caa:	9801      	ldr	r0, [sp, #4]
 8010cac:	4621      	mov	r1, r4
 8010cae:	f7fd fddd 	bl	800e86c <_Bfree>
 8010cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	6013      	str	r3, [r2, #0]
 8010cb8:	25a3      	movs	r5, #163	@ 0xa3
 8010cba:	e793      	b.n	8010be4 <__gethex+0xf8>
 8010cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010cc2:	d012      	beq.n	8010cea <__gethex+0x1fe>
 8010cc4:	2b20      	cmp	r3, #32
 8010cc6:	d104      	bne.n	8010cd2 <__gethex+0x1e6>
 8010cc8:	f845 bb04 	str.w	fp, [r5], #4
 8010ccc:	f04f 0b00 	mov.w	fp, #0
 8010cd0:	465b      	mov	r3, fp
 8010cd2:	7830      	ldrb	r0, [r6, #0]
 8010cd4:	9303      	str	r3, [sp, #12]
 8010cd6:	f7ff fef3 	bl	8010ac0 <__hexdig_fun>
 8010cda:	9b03      	ldr	r3, [sp, #12]
 8010cdc:	f000 000f 	and.w	r0, r0, #15
 8010ce0:	4098      	lsls	r0, r3
 8010ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8010ce6:	3304      	adds	r3, #4
 8010ce8:	e7ae      	b.n	8010c48 <__gethex+0x15c>
 8010cea:	45b1      	cmp	r9, r6
 8010cec:	d8ea      	bhi.n	8010cc4 <__gethex+0x1d8>
 8010cee:	492b      	ldr	r1, [pc, #172]	@ (8010d9c <__gethex+0x2b0>)
 8010cf0:	9303      	str	r3, [sp, #12]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	f7ff fe58 	bl	80109aa <strncmp>
 8010cfa:	9b03      	ldr	r3, [sp, #12]
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	d1e1      	bne.n	8010cc4 <__gethex+0x1d8>
 8010d00:	e7a2      	b.n	8010c48 <__gethex+0x15c>
 8010d02:	1ea9      	subs	r1, r5, #2
 8010d04:	4620      	mov	r0, r4
 8010d06:	f7fe f9fa 	bl	800f0fe <__any_on>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d0c2      	beq.n	8010c94 <__gethex+0x1a8>
 8010d0e:	f04f 0903 	mov.w	r9, #3
 8010d12:	e7c1      	b.n	8010c98 <__gethex+0x1ac>
 8010d14:	da09      	bge.n	8010d2a <__gethex+0x23e>
 8010d16:	1b75      	subs	r5, r6, r5
 8010d18:	4621      	mov	r1, r4
 8010d1a:	9801      	ldr	r0, [sp, #4]
 8010d1c:	462a      	mov	r2, r5
 8010d1e:	f7fd ffb5 	bl	800ec8c <__lshift>
 8010d22:	1b7f      	subs	r7, r7, r5
 8010d24:	4604      	mov	r4, r0
 8010d26:	f100 0a14 	add.w	sl, r0, #20
 8010d2a:	f04f 0900 	mov.w	r9, #0
 8010d2e:	e7b8      	b.n	8010ca2 <__gethex+0x1b6>
 8010d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010d34:	42bd      	cmp	r5, r7
 8010d36:	dd6f      	ble.n	8010e18 <__gethex+0x32c>
 8010d38:	1bed      	subs	r5, r5, r7
 8010d3a:	42ae      	cmp	r6, r5
 8010d3c:	dc34      	bgt.n	8010da8 <__gethex+0x2bc>
 8010d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d42:	2b02      	cmp	r3, #2
 8010d44:	d022      	beq.n	8010d8c <__gethex+0x2a0>
 8010d46:	2b03      	cmp	r3, #3
 8010d48:	d024      	beq.n	8010d94 <__gethex+0x2a8>
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	d115      	bne.n	8010d7a <__gethex+0x28e>
 8010d4e:	42ae      	cmp	r6, r5
 8010d50:	d113      	bne.n	8010d7a <__gethex+0x28e>
 8010d52:	2e01      	cmp	r6, #1
 8010d54:	d10b      	bne.n	8010d6e <__gethex+0x282>
 8010d56:	9a02      	ldr	r2, [sp, #8]
 8010d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	2301      	movs	r3, #1
 8010d60:	6123      	str	r3, [r4, #16]
 8010d62:	f8ca 3000 	str.w	r3, [sl]
 8010d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d68:	2562      	movs	r5, #98	@ 0x62
 8010d6a:	601c      	str	r4, [r3, #0]
 8010d6c:	e73a      	b.n	8010be4 <__gethex+0xf8>
 8010d6e:	1e71      	subs	r1, r6, #1
 8010d70:	4620      	mov	r0, r4
 8010d72:	f7fe f9c4 	bl	800f0fe <__any_on>
 8010d76:	2800      	cmp	r0, #0
 8010d78:	d1ed      	bne.n	8010d56 <__gethex+0x26a>
 8010d7a:	9801      	ldr	r0, [sp, #4]
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	f7fd fd75 	bl	800e86c <_Bfree>
 8010d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010d84:	2300      	movs	r3, #0
 8010d86:	6013      	str	r3, [r2, #0]
 8010d88:	2550      	movs	r5, #80	@ 0x50
 8010d8a:	e72b      	b.n	8010be4 <__gethex+0xf8>
 8010d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d1f3      	bne.n	8010d7a <__gethex+0x28e>
 8010d92:	e7e0      	b.n	8010d56 <__gethex+0x26a>
 8010d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d1dd      	bne.n	8010d56 <__gethex+0x26a>
 8010d9a:	e7ee      	b.n	8010d7a <__gethex+0x28e>
 8010d9c:	080137fd 	.word	0x080137fd
 8010da0:	08013793 	.word	0x08013793
 8010da4:	0801386f 	.word	0x0801386f
 8010da8:	1e6f      	subs	r7, r5, #1
 8010daa:	f1b9 0f00 	cmp.w	r9, #0
 8010dae:	d130      	bne.n	8010e12 <__gethex+0x326>
 8010db0:	b127      	cbz	r7, 8010dbc <__gethex+0x2d0>
 8010db2:	4639      	mov	r1, r7
 8010db4:	4620      	mov	r0, r4
 8010db6:	f7fe f9a2 	bl	800f0fe <__any_on>
 8010dba:	4681      	mov	r9, r0
 8010dbc:	117a      	asrs	r2, r7, #5
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010dc4:	f007 071f 	and.w	r7, r7, #31
 8010dc8:	40bb      	lsls	r3, r7
 8010dca:	4213      	tst	r3, r2
 8010dcc:	4629      	mov	r1, r5
 8010dce:	4620      	mov	r0, r4
 8010dd0:	bf18      	it	ne
 8010dd2:	f049 0902 	orrne.w	r9, r9, #2
 8010dd6:	f7ff fe21 	bl	8010a1c <rshift>
 8010dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010dde:	1b76      	subs	r6, r6, r5
 8010de0:	2502      	movs	r5, #2
 8010de2:	f1b9 0f00 	cmp.w	r9, #0
 8010de6:	d047      	beq.n	8010e78 <__gethex+0x38c>
 8010de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010dec:	2b02      	cmp	r3, #2
 8010dee:	d015      	beq.n	8010e1c <__gethex+0x330>
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	d017      	beq.n	8010e24 <__gethex+0x338>
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d109      	bne.n	8010e0c <__gethex+0x320>
 8010df8:	f019 0f02 	tst.w	r9, #2
 8010dfc:	d006      	beq.n	8010e0c <__gethex+0x320>
 8010dfe:	f8da 3000 	ldr.w	r3, [sl]
 8010e02:	ea49 0903 	orr.w	r9, r9, r3
 8010e06:	f019 0f01 	tst.w	r9, #1
 8010e0a:	d10e      	bne.n	8010e2a <__gethex+0x33e>
 8010e0c:	f045 0510 	orr.w	r5, r5, #16
 8010e10:	e032      	b.n	8010e78 <__gethex+0x38c>
 8010e12:	f04f 0901 	mov.w	r9, #1
 8010e16:	e7d1      	b.n	8010dbc <__gethex+0x2d0>
 8010e18:	2501      	movs	r5, #1
 8010e1a:	e7e2      	b.n	8010de2 <__gethex+0x2f6>
 8010e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e1e:	f1c3 0301 	rsb	r3, r3, #1
 8010e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d0f0      	beq.n	8010e0c <__gethex+0x320>
 8010e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e2e:	f104 0314 	add.w	r3, r4, #20
 8010e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e3a:	f04f 0c00 	mov.w	ip, #0
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e44:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010e48:	d01b      	beq.n	8010e82 <__gethex+0x396>
 8010e4a:	3201      	adds	r2, #1
 8010e4c:	6002      	str	r2, [r0, #0]
 8010e4e:	2d02      	cmp	r5, #2
 8010e50:	f104 0314 	add.w	r3, r4, #20
 8010e54:	d13c      	bne.n	8010ed0 <__gethex+0x3e4>
 8010e56:	f8d8 2000 	ldr.w	r2, [r8]
 8010e5a:	3a01      	subs	r2, #1
 8010e5c:	42b2      	cmp	r2, r6
 8010e5e:	d109      	bne.n	8010e74 <__gethex+0x388>
 8010e60:	1171      	asrs	r1, r6, #5
 8010e62:	2201      	movs	r2, #1
 8010e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e68:	f006 061f 	and.w	r6, r6, #31
 8010e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8010e70:	421e      	tst	r6, r3
 8010e72:	d13a      	bne.n	8010eea <__gethex+0x3fe>
 8010e74:	f045 0520 	orr.w	r5, r5, #32
 8010e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e7a:	601c      	str	r4, [r3, #0]
 8010e7c:	9b02      	ldr	r3, [sp, #8]
 8010e7e:	601f      	str	r7, [r3, #0]
 8010e80:	e6b0      	b.n	8010be4 <__gethex+0xf8>
 8010e82:	4299      	cmp	r1, r3
 8010e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8010e88:	d8d9      	bhi.n	8010e3e <__gethex+0x352>
 8010e8a:	68a3      	ldr	r3, [r4, #8]
 8010e8c:	459b      	cmp	fp, r3
 8010e8e:	db17      	blt.n	8010ec0 <__gethex+0x3d4>
 8010e90:	6861      	ldr	r1, [r4, #4]
 8010e92:	9801      	ldr	r0, [sp, #4]
 8010e94:	3101      	adds	r1, #1
 8010e96:	f7fd fca9 	bl	800e7ec <_Balloc>
 8010e9a:	4681      	mov	r9, r0
 8010e9c:	b918      	cbnz	r0, 8010ea6 <__gethex+0x3ba>
 8010e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8010f08 <__gethex+0x41c>)
 8010ea0:	4602      	mov	r2, r0
 8010ea2:	2184      	movs	r1, #132	@ 0x84
 8010ea4:	e6c5      	b.n	8010c32 <__gethex+0x146>
 8010ea6:	6922      	ldr	r2, [r4, #16]
 8010ea8:	3202      	adds	r2, #2
 8010eaa:	f104 010c 	add.w	r1, r4, #12
 8010eae:	0092      	lsls	r2, r2, #2
 8010eb0:	300c      	adds	r0, #12
 8010eb2:	f7fc fde2 	bl	800da7a <memcpy>
 8010eb6:	4621      	mov	r1, r4
 8010eb8:	9801      	ldr	r0, [sp, #4]
 8010eba:	f7fd fcd7 	bl	800e86c <_Bfree>
 8010ebe:	464c      	mov	r4, r9
 8010ec0:	6923      	ldr	r3, [r4, #16]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ec8:	6122      	str	r2, [r4, #16]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	615a      	str	r2, [r3, #20]
 8010ece:	e7be      	b.n	8010e4e <__gethex+0x362>
 8010ed0:	6922      	ldr	r2, [r4, #16]
 8010ed2:	455a      	cmp	r2, fp
 8010ed4:	dd0b      	ble.n	8010eee <__gethex+0x402>
 8010ed6:	2101      	movs	r1, #1
 8010ed8:	4620      	mov	r0, r4
 8010eda:	f7ff fd9f 	bl	8010a1c <rshift>
 8010ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010ee2:	3701      	adds	r7, #1
 8010ee4:	42bb      	cmp	r3, r7
 8010ee6:	f6ff aee0 	blt.w	8010caa <__gethex+0x1be>
 8010eea:	2501      	movs	r5, #1
 8010eec:	e7c2      	b.n	8010e74 <__gethex+0x388>
 8010eee:	f016 061f 	ands.w	r6, r6, #31
 8010ef2:	d0fa      	beq.n	8010eea <__gethex+0x3fe>
 8010ef4:	4453      	add	r3, sl
 8010ef6:	f1c6 0620 	rsb	r6, r6, #32
 8010efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010efe:	f7fd fd67 	bl	800e9d0 <__hi0bits>
 8010f02:	42b0      	cmp	r0, r6
 8010f04:	dbe7      	blt.n	8010ed6 <__gethex+0x3ea>
 8010f06:	e7f0      	b.n	8010eea <__gethex+0x3fe>
 8010f08:	08013793 	.word	0x08013793

08010f0c <L_shift>:
 8010f0c:	f1c2 0208 	rsb	r2, r2, #8
 8010f10:	0092      	lsls	r2, r2, #2
 8010f12:	b570      	push	{r4, r5, r6, lr}
 8010f14:	f1c2 0620 	rsb	r6, r2, #32
 8010f18:	6843      	ldr	r3, [r0, #4]
 8010f1a:	6804      	ldr	r4, [r0, #0]
 8010f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8010f20:	432c      	orrs	r4, r5
 8010f22:	40d3      	lsrs	r3, r2
 8010f24:	6004      	str	r4, [r0, #0]
 8010f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f2a:	4288      	cmp	r0, r1
 8010f2c:	d3f4      	bcc.n	8010f18 <L_shift+0xc>
 8010f2e:	bd70      	pop	{r4, r5, r6, pc}

08010f30 <__match>:
 8010f30:	b530      	push	{r4, r5, lr}
 8010f32:	6803      	ldr	r3, [r0, #0]
 8010f34:	3301      	adds	r3, #1
 8010f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f3a:	b914      	cbnz	r4, 8010f42 <__match+0x12>
 8010f3c:	6003      	str	r3, [r0, #0]
 8010f3e:	2001      	movs	r0, #1
 8010f40:	bd30      	pop	{r4, r5, pc}
 8010f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010f4a:	2d19      	cmp	r5, #25
 8010f4c:	bf98      	it	ls
 8010f4e:	3220      	addls	r2, #32
 8010f50:	42a2      	cmp	r2, r4
 8010f52:	d0f0      	beq.n	8010f36 <__match+0x6>
 8010f54:	2000      	movs	r0, #0
 8010f56:	e7f3      	b.n	8010f40 <__match+0x10>

08010f58 <__hexnan>:
 8010f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f5c:	680b      	ldr	r3, [r1, #0]
 8010f5e:	6801      	ldr	r1, [r0, #0]
 8010f60:	115e      	asrs	r6, r3, #5
 8010f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f66:	f013 031f 	ands.w	r3, r3, #31
 8010f6a:	b087      	sub	sp, #28
 8010f6c:	bf18      	it	ne
 8010f6e:	3604      	addne	r6, #4
 8010f70:	2500      	movs	r5, #0
 8010f72:	1f37      	subs	r7, r6, #4
 8010f74:	4682      	mov	sl, r0
 8010f76:	4690      	mov	r8, r2
 8010f78:	9301      	str	r3, [sp, #4]
 8010f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f7e:	46b9      	mov	r9, r7
 8010f80:	463c      	mov	r4, r7
 8010f82:	9502      	str	r5, [sp, #8]
 8010f84:	46ab      	mov	fp, r5
 8010f86:	784a      	ldrb	r2, [r1, #1]
 8010f88:	1c4b      	adds	r3, r1, #1
 8010f8a:	9303      	str	r3, [sp, #12]
 8010f8c:	b342      	cbz	r2, 8010fe0 <__hexnan+0x88>
 8010f8e:	4610      	mov	r0, r2
 8010f90:	9105      	str	r1, [sp, #20]
 8010f92:	9204      	str	r2, [sp, #16]
 8010f94:	f7ff fd94 	bl	8010ac0 <__hexdig_fun>
 8010f98:	2800      	cmp	r0, #0
 8010f9a:	d151      	bne.n	8011040 <__hexnan+0xe8>
 8010f9c:	9a04      	ldr	r2, [sp, #16]
 8010f9e:	9905      	ldr	r1, [sp, #20]
 8010fa0:	2a20      	cmp	r2, #32
 8010fa2:	d818      	bhi.n	8010fd6 <__hexnan+0x7e>
 8010fa4:	9b02      	ldr	r3, [sp, #8]
 8010fa6:	459b      	cmp	fp, r3
 8010fa8:	dd13      	ble.n	8010fd2 <__hexnan+0x7a>
 8010faa:	454c      	cmp	r4, r9
 8010fac:	d206      	bcs.n	8010fbc <__hexnan+0x64>
 8010fae:	2d07      	cmp	r5, #7
 8010fb0:	dc04      	bgt.n	8010fbc <__hexnan+0x64>
 8010fb2:	462a      	mov	r2, r5
 8010fb4:	4649      	mov	r1, r9
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	f7ff ffa8 	bl	8010f0c <L_shift>
 8010fbc:	4544      	cmp	r4, r8
 8010fbe:	d952      	bls.n	8011066 <__hexnan+0x10e>
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8010fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fca:	f8cd b008 	str.w	fp, [sp, #8]
 8010fce:	464c      	mov	r4, r9
 8010fd0:	461d      	mov	r5, r3
 8010fd2:	9903      	ldr	r1, [sp, #12]
 8010fd4:	e7d7      	b.n	8010f86 <__hexnan+0x2e>
 8010fd6:	2a29      	cmp	r2, #41	@ 0x29
 8010fd8:	d157      	bne.n	801108a <__hexnan+0x132>
 8010fda:	3102      	adds	r1, #2
 8010fdc:	f8ca 1000 	str.w	r1, [sl]
 8010fe0:	f1bb 0f00 	cmp.w	fp, #0
 8010fe4:	d051      	beq.n	801108a <__hexnan+0x132>
 8010fe6:	454c      	cmp	r4, r9
 8010fe8:	d206      	bcs.n	8010ff8 <__hexnan+0xa0>
 8010fea:	2d07      	cmp	r5, #7
 8010fec:	dc04      	bgt.n	8010ff8 <__hexnan+0xa0>
 8010fee:	462a      	mov	r2, r5
 8010ff0:	4649      	mov	r1, r9
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f7ff ff8a 	bl	8010f0c <L_shift>
 8010ff8:	4544      	cmp	r4, r8
 8010ffa:	d936      	bls.n	801106a <__hexnan+0x112>
 8010ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8011000:	4623      	mov	r3, r4
 8011002:	f853 1b04 	ldr.w	r1, [r3], #4
 8011006:	f842 1f04 	str.w	r1, [r2, #4]!
 801100a:	429f      	cmp	r7, r3
 801100c:	d2f9      	bcs.n	8011002 <__hexnan+0xaa>
 801100e:	1b3b      	subs	r3, r7, r4
 8011010:	f023 0303 	bic.w	r3, r3, #3
 8011014:	3304      	adds	r3, #4
 8011016:	3401      	adds	r4, #1
 8011018:	3e03      	subs	r6, #3
 801101a:	42b4      	cmp	r4, r6
 801101c:	bf88      	it	hi
 801101e:	2304      	movhi	r3, #4
 8011020:	4443      	add	r3, r8
 8011022:	2200      	movs	r2, #0
 8011024:	f843 2b04 	str.w	r2, [r3], #4
 8011028:	429f      	cmp	r7, r3
 801102a:	d2fb      	bcs.n	8011024 <__hexnan+0xcc>
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	b91b      	cbnz	r3, 8011038 <__hexnan+0xe0>
 8011030:	4547      	cmp	r7, r8
 8011032:	d128      	bne.n	8011086 <__hexnan+0x12e>
 8011034:	2301      	movs	r3, #1
 8011036:	603b      	str	r3, [r7, #0]
 8011038:	2005      	movs	r0, #5
 801103a:	b007      	add	sp, #28
 801103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011040:	3501      	adds	r5, #1
 8011042:	2d08      	cmp	r5, #8
 8011044:	f10b 0b01 	add.w	fp, fp, #1
 8011048:	dd06      	ble.n	8011058 <__hexnan+0x100>
 801104a:	4544      	cmp	r4, r8
 801104c:	d9c1      	bls.n	8010fd2 <__hexnan+0x7a>
 801104e:	2300      	movs	r3, #0
 8011050:	f844 3c04 	str.w	r3, [r4, #-4]
 8011054:	2501      	movs	r5, #1
 8011056:	3c04      	subs	r4, #4
 8011058:	6822      	ldr	r2, [r4, #0]
 801105a:	f000 000f 	and.w	r0, r0, #15
 801105e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011062:	6020      	str	r0, [r4, #0]
 8011064:	e7b5      	b.n	8010fd2 <__hexnan+0x7a>
 8011066:	2508      	movs	r5, #8
 8011068:	e7b3      	b.n	8010fd2 <__hexnan+0x7a>
 801106a:	9b01      	ldr	r3, [sp, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d0dd      	beq.n	801102c <__hexnan+0xd4>
 8011070:	f1c3 0320 	rsb	r3, r3, #32
 8011074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011078:	40da      	lsrs	r2, r3
 801107a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801107e:	4013      	ands	r3, r2
 8011080:	f846 3c04 	str.w	r3, [r6, #-4]
 8011084:	e7d2      	b.n	801102c <__hexnan+0xd4>
 8011086:	3f04      	subs	r7, #4
 8011088:	e7d0      	b.n	801102c <__hexnan+0xd4>
 801108a:	2004      	movs	r0, #4
 801108c:	e7d5      	b.n	801103a <__hexnan+0xe2>

0801108e <__ascii_mbtowc>:
 801108e:	b082      	sub	sp, #8
 8011090:	b901      	cbnz	r1, 8011094 <__ascii_mbtowc+0x6>
 8011092:	a901      	add	r1, sp, #4
 8011094:	b142      	cbz	r2, 80110a8 <__ascii_mbtowc+0x1a>
 8011096:	b14b      	cbz	r3, 80110ac <__ascii_mbtowc+0x1e>
 8011098:	7813      	ldrb	r3, [r2, #0]
 801109a:	600b      	str	r3, [r1, #0]
 801109c:	7812      	ldrb	r2, [r2, #0]
 801109e:	1e10      	subs	r0, r2, #0
 80110a0:	bf18      	it	ne
 80110a2:	2001      	movne	r0, #1
 80110a4:	b002      	add	sp, #8
 80110a6:	4770      	bx	lr
 80110a8:	4610      	mov	r0, r2
 80110aa:	e7fb      	b.n	80110a4 <__ascii_mbtowc+0x16>
 80110ac:	f06f 0001 	mvn.w	r0, #1
 80110b0:	e7f8      	b.n	80110a4 <__ascii_mbtowc+0x16>

080110b2 <_realloc_r>:
 80110b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110b6:	4607      	mov	r7, r0
 80110b8:	4614      	mov	r4, r2
 80110ba:	460d      	mov	r5, r1
 80110bc:	b921      	cbnz	r1, 80110c8 <_realloc_r+0x16>
 80110be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80110c2:	4611      	mov	r1, r2
 80110c4:	f7fb bbde 	b.w	800c884 <_malloc_r>
 80110c8:	b92a      	cbnz	r2, 80110d6 <_realloc_r+0x24>
 80110ca:	f7fd fb45 	bl	800e758 <_free_r>
 80110ce:	4625      	mov	r5, r4
 80110d0:	4628      	mov	r0, r5
 80110d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110d6:	f000 f8b2 	bl	801123e <_malloc_usable_size_r>
 80110da:	4284      	cmp	r4, r0
 80110dc:	4606      	mov	r6, r0
 80110de:	d802      	bhi.n	80110e6 <_realloc_r+0x34>
 80110e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110e4:	d8f4      	bhi.n	80110d0 <_realloc_r+0x1e>
 80110e6:	4621      	mov	r1, r4
 80110e8:	4638      	mov	r0, r7
 80110ea:	f7fb fbcb 	bl	800c884 <_malloc_r>
 80110ee:	4680      	mov	r8, r0
 80110f0:	b908      	cbnz	r0, 80110f6 <_realloc_r+0x44>
 80110f2:	4645      	mov	r5, r8
 80110f4:	e7ec      	b.n	80110d0 <_realloc_r+0x1e>
 80110f6:	42b4      	cmp	r4, r6
 80110f8:	4622      	mov	r2, r4
 80110fa:	4629      	mov	r1, r5
 80110fc:	bf28      	it	cs
 80110fe:	4632      	movcs	r2, r6
 8011100:	f7fc fcbb 	bl	800da7a <memcpy>
 8011104:	4629      	mov	r1, r5
 8011106:	4638      	mov	r0, r7
 8011108:	f7fd fb26 	bl	800e758 <_free_r>
 801110c:	e7f1      	b.n	80110f2 <_realloc_r+0x40>
	...

08011110 <_strtoul_l.isra.0>:
 8011110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011114:	4e34      	ldr	r6, [pc, #208]	@ (80111e8 <_strtoul_l.isra.0+0xd8>)
 8011116:	4686      	mov	lr, r0
 8011118:	460d      	mov	r5, r1
 801111a:	4628      	mov	r0, r5
 801111c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011120:	5d37      	ldrb	r7, [r6, r4]
 8011122:	f017 0708 	ands.w	r7, r7, #8
 8011126:	d1f8      	bne.n	801111a <_strtoul_l.isra.0+0xa>
 8011128:	2c2d      	cmp	r4, #45	@ 0x2d
 801112a:	d110      	bne.n	801114e <_strtoul_l.isra.0+0x3e>
 801112c:	782c      	ldrb	r4, [r5, #0]
 801112e:	2701      	movs	r7, #1
 8011130:	1c85      	adds	r5, r0, #2
 8011132:	f033 0010 	bics.w	r0, r3, #16
 8011136:	d115      	bne.n	8011164 <_strtoul_l.isra.0+0x54>
 8011138:	2c30      	cmp	r4, #48	@ 0x30
 801113a:	d10d      	bne.n	8011158 <_strtoul_l.isra.0+0x48>
 801113c:	7828      	ldrb	r0, [r5, #0]
 801113e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011142:	2858      	cmp	r0, #88	@ 0x58
 8011144:	d108      	bne.n	8011158 <_strtoul_l.isra.0+0x48>
 8011146:	786c      	ldrb	r4, [r5, #1]
 8011148:	3502      	adds	r5, #2
 801114a:	2310      	movs	r3, #16
 801114c:	e00a      	b.n	8011164 <_strtoul_l.isra.0+0x54>
 801114e:	2c2b      	cmp	r4, #43	@ 0x2b
 8011150:	bf04      	itt	eq
 8011152:	782c      	ldrbeq	r4, [r5, #0]
 8011154:	1c85      	addeq	r5, r0, #2
 8011156:	e7ec      	b.n	8011132 <_strtoul_l.isra.0+0x22>
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1f6      	bne.n	801114a <_strtoul_l.isra.0+0x3a>
 801115c:	2c30      	cmp	r4, #48	@ 0x30
 801115e:	bf14      	ite	ne
 8011160:	230a      	movne	r3, #10
 8011162:	2308      	moveq	r3, #8
 8011164:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011168:	2600      	movs	r6, #0
 801116a:	fbb8 f8f3 	udiv	r8, r8, r3
 801116e:	fb03 f908 	mul.w	r9, r3, r8
 8011172:	ea6f 0909 	mvn.w	r9, r9
 8011176:	4630      	mov	r0, r6
 8011178:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801117c:	f1bc 0f09 	cmp.w	ip, #9
 8011180:	d810      	bhi.n	80111a4 <_strtoul_l.isra.0+0x94>
 8011182:	4664      	mov	r4, ip
 8011184:	42a3      	cmp	r3, r4
 8011186:	dd1e      	ble.n	80111c6 <_strtoul_l.isra.0+0xb6>
 8011188:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801118c:	d007      	beq.n	801119e <_strtoul_l.isra.0+0x8e>
 801118e:	4580      	cmp	r8, r0
 8011190:	d316      	bcc.n	80111c0 <_strtoul_l.isra.0+0xb0>
 8011192:	d101      	bne.n	8011198 <_strtoul_l.isra.0+0x88>
 8011194:	45a1      	cmp	r9, r4
 8011196:	db13      	blt.n	80111c0 <_strtoul_l.isra.0+0xb0>
 8011198:	fb00 4003 	mla	r0, r0, r3, r4
 801119c:	2601      	movs	r6, #1
 801119e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80111a2:	e7e9      	b.n	8011178 <_strtoul_l.isra.0+0x68>
 80111a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80111a8:	f1bc 0f19 	cmp.w	ip, #25
 80111ac:	d801      	bhi.n	80111b2 <_strtoul_l.isra.0+0xa2>
 80111ae:	3c37      	subs	r4, #55	@ 0x37
 80111b0:	e7e8      	b.n	8011184 <_strtoul_l.isra.0+0x74>
 80111b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80111b6:	f1bc 0f19 	cmp.w	ip, #25
 80111ba:	d804      	bhi.n	80111c6 <_strtoul_l.isra.0+0xb6>
 80111bc:	3c57      	subs	r4, #87	@ 0x57
 80111be:	e7e1      	b.n	8011184 <_strtoul_l.isra.0+0x74>
 80111c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80111c4:	e7eb      	b.n	801119e <_strtoul_l.isra.0+0x8e>
 80111c6:	1c73      	adds	r3, r6, #1
 80111c8:	d106      	bne.n	80111d8 <_strtoul_l.isra.0+0xc8>
 80111ca:	2322      	movs	r3, #34	@ 0x22
 80111cc:	f8ce 3000 	str.w	r3, [lr]
 80111d0:	4630      	mov	r0, r6
 80111d2:	b932      	cbnz	r2, 80111e2 <_strtoul_l.isra.0+0xd2>
 80111d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111d8:	b107      	cbz	r7, 80111dc <_strtoul_l.isra.0+0xcc>
 80111da:	4240      	negs	r0, r0
 80111dc:	2a00      	cmp	r2, #0
 80111de:	d0f9      	beq.n	80111d4 <_strtoul_l.isra.0+0xc4>
 80111e0:	b106      	cbz	r6, 80111e4 <_strtoul_l.isra.0+0xd4>
 80111e2:	1e69      	subs	r1, r5, #1
 80111e4:	6011      	str	r1, [r2, #0]
 80111e6:	e7f5      	b.n	80111d4 <_strtoul_l.isra.0+0xc4>
 80111e8:	08013a21 	.word	0x08013a21

080111ec <_strtoul_r>:
 80111ec:	f7ff bf90 	b.w	8011110 <_strtoul_l.isra.0>

080111f0 <__ascii_wctomb>:
 80111f0:	4603      	mov	r3, r0
 80111f2:	4608      	mov	r0, r1
 80111f4:	b141      	cbz	r1, 8011208 <__ascii_wctomb+0x18>
 80111f6:	2aff      	cmp	r2, #255	@ 0xff
 80111f8:	d904      	bls.n	8011204 <__ascii_wctomb+0x14>
 80111fa:	228a      	movs	r2, #138	@ 0x8a
 80111fc:	601a      	str	r2, [r3, #0]
 80111fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011202:	4770      	bx	lr
 8011204:	700a      	strb	r2, [r1, #0]
 8011206:	2001      	movs	r0, #1
 8011208:	4770      	bx	lr
	...

0801120c <fiprintf>:
 801120c:	b40e      	push	{r1, r2, r3}
 801120e:	b503      	push	{r0, r1, lr}
 8011210:	4601      	mov	r1, r0
 8011212:	ab03      	add	r3, sp, #12
 8011214:	4805      	ldr	r0, [pc, #20]	@ (801122c <fiprintf+0x20>)
 8011216:	f853 2b04 	ldr.w	r2, [r3], #4
 801121a:	6800      	ldr	r0, [r0, #0]
 801121c:	9301      	str	r3, [sp, #4]
 801121e:	f000 f83f 	bl	80112a0 <_vfiprintf_r>
 8011222:	b002      	add	sp, #8
 8011224:	f85d eb04 	ldr.w	lr, [sp], #4
 8011228:	b003      	add	sp, #12
 801122a:	4770      	bx	lr
 801122c:	20000030 	.word	0x20000030

08011230 <abort>:
 8011230:	b508      	push	{r3, lr}
 8011232:	2006      	movs	r0, #6
 8011234:	f000 fa08 	bl	8011648 <raise>
 8011238:	2001      	movs	r0, #1
 801123a:	f7f2 fbf5 	bl	8003a28 <_exit>

0801123e <_malloc_usable_size_r>:
 801123e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011242:	1f18      	subs	r0, r3, #4
 8011244:	2b00      	cmp	r3, #0
 8011246:	bfbc      	itt	lt
 8011248:	580b      	ldrlt	r3, [r1, r0]
 801124a:	18c0      	addlt	r0, r0, r3
 801124c:	4770      	bx	lr

0801124e <__sfputc_r>:
 801124e:	6893      	ldr	r3, [r2, #8]
 8011250:	3b01      	subs	r3, #1
 8011252:	2b00      	cmp	r3, #0
 8011254:	b410      	push	{r4}
 8011256:	6093      	str	r3, [r2, #8]
 8011258:	da08      	bge.n	801126c <__sfputc_r+0x1e>
 801125a:	6994      	ldr	r4, [r2, #24]
 801125c:	42a3      	cmp	r3, r4
 801125e:	db01      	blt.n	8011264 <__sfputc_r+0x16>
 8011260:	290a      	cmp	r1, #10
 8011262:	d103      	bne.n	801126c <__sfputc_r+0x1e>
 8011264:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011268:	f000 b932 	b.w	80114d0 <__swbuf_r>
 801126c:	6813      	ldr	r3, [r2, #0]
 801126e:	1c58      	adds	r0, r3, #1
 8011270:	6010      	str	r0, [r2, #0]
 8011272:	7019      	strb	r1, [r3, #0]
 8011274:	4608      	mov	r0, r1
 8011276:	f85d 4b04 	ldr.w	r4, [sp], #4
 801127a:	4770      	bx	lr

0801127c <__sfputs_r>:
 801127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801127e:	4606      	mov	r6, r0
 8011280:	460f      	mov	r7, r1
 8011282:	4614      	mov	r4, r2
 8011284:	18d5      	adds	r5, r2, r3
 8011286:	42ac      	cmp	r4, r5
 8011288:	d101      	bne.n	801128e <__sfputs_r+0x12>
 801128a:	2000      	movs	r0, #0
 801128c:	e007      	b.n	801129e <__sfputs_r+0x22>
 801128e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011292:	463a      	mov	r2, r7
 8011294:	4630      	mov	r0, r6
 8011296:	f7ff ffda 	bl	801124e <__sfputc_r>
 801129a:	1c43      	adds	r3, r0, #1
 801129c:	d1f3      	bne.n	8011286 <__sfputs_r+0xa>
 801129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112a0 <_vfiprintf_r>:
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	460d      	mov	r5, r1
 80112a6:	b09d      	sub	sp, #116	@ 0x74
 80112a8:	4614      	mov	r4, r2
 80112aa:	4698      	mov	r8, r3
 80112ac:	4606      	mov	r6, r0
 80112ae:	b118      	cbz	r0, 80112b8 <_vfiprintf_r+0x18>
 80112b0:	6a03      	ldr	r3, [r0, #32]
 80112b2:	b90b      	cbnz	r3, 80112b8 <_vfiprintf_r+0x18>
 80112b4:	f7fc fa62 	bl	800d77c <__sinit>
 80112b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112ba:	07d9      	lsls	r1, r3, #31
 80112bc:	d405      	bmi.n	80112ca <_vfiprintf_r+0x2a>
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	059a      	lsls	r2, r3, #22
 80112c2:	d402      	bmi.n	80112ca <_vfiprintf_r+0x2a>
 80112c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112c6:	f7fc fbd6 	bl	800da76 <__retarget_lock_acquire_recursive>
 80112ca:	89ab      	ldrh	r3, [r5, #12]
 80112cc:	071b      	lsls	r3, r3, #28
 80112ce:	d501      	bpl.n	80112d4 <_vfiprintf_r+0x34>
 80112d0:	692b      	ldr	r3, [r5, #16]
 80112d2:	b99b      	cbnz	r3, 80112fc <_vfiprintf_r+0x5c>
 80112d4:	4629      	mov	r1, r5
 80112d6:	4630      	mov	r0, r6
 80112d8:	f000 f938 	bl	801154c <__swsetup_r>
 80112dc:	b170      	cbz	r0, 80112fc <_vfiprintf_r+0x5c>
 80112de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112e0:	07dc      	lsls	r4, r3, #31
 80112e2:	d504      	bpl.n	80112ee <_vfiprintf_r+0x4e>
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112e8:	b01d      	add	sp, #116	@ 0x74
 80112ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ee:	89ab      	ldrh	r3, [r5, #12]
 80112f0:	0598      	lsls	r0, r3, #22
 80112f2:	d4f7      	bmi.n	80112e4 <_vfiprintf_r+0x44>
 80112f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112f6:	f7fc fbbf 	bl	800da78 <__retarget_lock_release_recursive>
 80112fa:	e7f3      	b.n	80112e4 <_vfiprintf_r+0x44>
 80112fc:	2300      	movs	r3, #0
 80112fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8011300:	2320      	movs	r3, #32
 8011302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011306:	f8cd 800c 	str.w	r8, [sp, #12]
 801130a:	2330      	movs	r3, #48	@ 0x30
 801130c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80114bc <_vfiprintf_r+0x21c>
 8011310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011314:	f04f 0901 	mov.w	r9, #1
 8011318:	4623      	mov	r3, r4
 801131a:	469a      	mov	sl, r3
 801131c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011320:	b10a      	cbz	r2, 8011326 <_vfiprintf_r+0x86>
 8011322:	2a25      	cmp	r2, #37	@ 0x25
 8011324:	d1f9      	bne.n	801131a <_vfiprintf_r+0x7a>
 8011326:	ebba 0b04 	subs.w	fp, sl, r4
 801132a:	d00b      	beq.n	8011344 <_vfiprintf_r+0xa4>
 801132c:	465b      	mov	r3, fp
 801132e:	4622      	mov	r2, r4
 8011330:	4629      	mov	r1, r5
 8011332:	4630      	mov	r0, r6
 8011334:	f7ff ffa2 	bl	801127c <__sfputs_r>
 8011338:	3001      	adds	r0, #1
 801133a:	f000 80a7 	beq.w	801148c <_vfiprintf_r+0x1ec>
 801133e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011340:	445a      	add	r2, fp
 8011342:	9209      	str	r2, [sp, #36]	@ 0x24
 8011344:	f89a 3000 	ldrb.w	r3, [sl]
 8011348:	2b00      	cmp	r3, #0
 801134a:	f000 809f 	beq.w	801148c <_vfiprintf_r+0x1ec>
 801134e:	2300      	movs	r3, #0
 8011350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011358:	f10a 0a01 	add.w	sl, sl, #1
 801135c:	9304      	str	r3, [sp, #16]
 801135e:	9307      	str	r3, [sp, #28]
 8011360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011364:	931a      	str	r3, [sp, #104]	@ 0x68
 8011366:	4654      	mov	r4, sl
 8011368:	2205      	movs	r2, #5
 801136a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801136e:	4853      	ldr	r0, [pc, #332]	@ (80114bc <_vfiprintf_r+0x21c>)
 8011370:	f7ee ff4e 	bl	8000210 <memchr>
 8011374:	9a04      	ldr	r2, [sp, #16]
 8011376:	b9d8      	cbnz	r0, 80113b0 <_vfiprintf_r+0x110>
 8011378:	06d1      	lsls	r1, r2, #27
 801137a:	bf44      	itt	mi
 801137c:	2320      	movmi	r3, #32
 801137e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011382:	0713      	lsls	r3, r2, #28
 8011384:	bf44      	itt	mi
 8011386:	232b      	movmi	r3, #43	@ 0x2b
 8011388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801138c:	f89a 3000 	ldrb.w	r3, [sl]
 8011390:	2b2a      	cmp	r3, #42	@ 0x2a
 8011392:	d015      	beq.n	80113c0 <_vfiprintf_r+0x120>
 8011394:	9a07      	ldr	r2, [sp, #28]
 8011396:	4654      	mov	r4, sl
 8011398:	2000      	movs	r0, #0
 801139a:	f04f 0c0a 	mov.w	ip, #10
 801139e:	4621      	mov	r1, r4
 80113a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113a4:	3b30      	subs	r3, #48	@ 0x30
 80113a6:	2b09      	cmp	r3, #9
 80113a8:	d94b      	bls.n	8011442 <_vfiprintf_r+0x1a2>
 80113aa:	b1b0      	cbz	r0, 80113da <_vfiprintf_r+0x13a>
 80113ac:	9207      	str	r2, [sp, #28]
 80113ae:	e014      	b.n	80113da <_vfiprintf_r+0x13a>
 80113b0:	eba0 0308 	sub.w	r3, r0, r8
 80113b4:	fa09 f303 	lsl.w	r3, r9, r3
 80113b8:	4313      	orrs	r3, r2
 80113ba:	9304      	str	r3, [sp, #16]
 80113bc:	46a2      	mov	sl, r4
 80113be:	e7d2      	b.n	8011366 <_vfiprintf_r+0xc6>
 80113c0:	9b03      	ldr	r3, [sp, #12]
 80113c2:	1d19      	adds	r1, r3, #4
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	9103      	str	r1, [sp, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	bfbb      	ittet	lt
 80113cc:	425b      	neglt	r3, r3
 80113ce:	f042 0202 	orrlt.w	r2, r2, #2
 80113d2:	9307      	strge	r3, [sp, #28]
 80113d4:	9307      	strlt	r3, [sp, #28]
 80113d6:	bfb8      	it	lt
 80113d8:	9204      	strlt	r2, [sp, #16]
 80113da:	7823      	ldrb	r3, [r4, #0]
 80113dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80113de:	d10a      	bne.n	80113f6 <_vfiprintf_r+0x156>
 80113e0:	7863      	ldrb	r3, [r4, #1]
 80113e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80113e4:	d132      	bne.n	801144c <_vfiprintf_r+0x1ac>
 80113e6:	9b03      	ldr	r3, [sp, #12]
 80113e8:	1d1a      	adds	r2, r3, #4
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	9203      	str	r2, [sp, #12]
 80113ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80113f2:	3402      	adds	r4, #2
 80113f4:	9305      	str	r3, [sp, #20]
 80113f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80114cc <_vfiprintf_r+0x22c>
 80113fa:	7821      	ldrb	r1, [r4, #0]
 80113fc:	2203      	movs	r2, #3
 80113fe:	4650      	mov	r0, sl
 8011400:	f7ee ff06 	bl	8000210 <memchr>
 8011404:	b138      	cbz	r0, 8011416 <_vfiprintf_r+0x176>
 8011406:	9b04      	ldr	r3, [sp, #16]
 8011408:	eba0 000a 	sub.w	r0, r0, sl
 801140c:	2240      	movs	r2, #64	@ 0x40
 801140e:	4082      	lsls	r2, r0
 8011410:	4313      	orrs	r3, r2
 8011412:	3401      	adds	r4, #1
 8011414:	9304      	str	r3, [sp, #16]
 8011416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801141a:	4829      	ldr	r0, [pc, #164]	@ (80114c0 <_vfiprintf_r+0x220>)
 801141c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011420:	2206      	movs	r2, #6
 8011422:	f7ee fef5 	bl	8000210 <memchr>
 8011426:	2800      	cmp	r0, #0
 8011428:	d03f      	beq.n	80114aa <_vfiprintf_r+0x20a>
 801142a:	4b26      	ldr	r3, [pc, #152]	@ (80114c4 <_vfiprintf_r+0x224>)
 801142c:	bb1b      	cbnz	r3, 8011476 <_vfiprintf_r+0x1d6>
 801142e:	9b03      	ldr	r3, [sp, #12]
 8011430:	3307      	adds	r3, #7
 8011432:	f023 0307 	bic.w	r3, r3, #7
 8011436:	3308      	adds	r3, #8
 8011438:	9303      	str	r3, [sp, #12]
 801143a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801143c:	443b      	add	r3, r7
 801143e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011440:	e76a      	b.n	8011318 <_vfiprintf_r+0x78>
 8011442:	fb0c 3202 	mla	r2, ip, r2, r3
 8011446:	460c      	mov	r4, r1
 8011448:	2001      	movs	r0, #1
 801144a:	e7a8      	b.n	801139e <_vfiprintf_r+0xfe>
 801144c:	2300      	movs	r3, #0
 801144e:	3401      	adds	r4, #1
 8011450:	9305      	str	r3, [sp, #20]
 8011452:	4619      	mov	r1, r3
 8011454:	f04f 0c0a 	mov.w	ip, #10
 8011458:	4620      	mov	r0, r4
 801145a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801145e:	3a30      	subs	r2, #48	@ 0x30
 8011460:	2a09      	cmp	r2, #9
 8011462:	d903      	bls.n	801146c <_vfiprintf_r+0x1cc>
 8011464:	2b00      	cmp	r3, #0
 8011466:	d0c6      	beq.n	80113f6 <_vfiprintf_r+0x156>
 8011468:	9105      	str	r1, [sp, #20]
 801146a:	e7c4      	b.n	80113f6 <_vfiprintf_r+0x156>
 801146c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011470:	4604      	mov	r4, r0
 8011472:	2301      	movs	r3, #1
 8011474:	e7f0      	b.n	8011458 <_vfiprintf_r+0x1b8>
 8011476:	ab03      	add	r3, sp, #12
 8011478:	9300      	str	r3, [sp, #0]
 801147a:	462a      	mov	r2, r5
 801147c:	4b12      	ldr	r3, [pc, #72]	@ (80114c8 <_vfiprintf_r+0x228>)
 801147e:	a904      	add	r1, sp, #16
 8011480:	4630      	mov	r0, r6
 8011482:	f7fb fb2b 	bl	800cadc <_printf_float>
 8011486:	4607      	mov	r7, r0
 8011488:	1c78      	adds	r0, r7, #1
 801148a:	d1d6      	bne.n	801143a <_vfiprintf_r+0x19a>
 801148c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801148e:	07d9      	lsls	r1, r3, #31
 8011490:	d405      	bmi.n	801149e <_vfiprintf_r+0x1fe>
 8011492:	89ab      	ldrh	r3, [r5, #12]
 8011494:	059a      	lsls	r2, r3, #22
 8011496:	d402      	bmi.n	801149e <_vfiprintf_r+0x1fe>
 8011498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801149a:	f7fc faed 	bl	800da78 <__retarget_lock_release_recursive>
 801149e:	89ab      	ldrh	r3, [r5, #12]
 80114a0:	065b      	lsls	r3, r3, #25
 80114a2:	f53f af1f 	bmi.w	80112e4 <_vfiprintf_r+0x44>
 80114a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80114a8:	e71e      	b.n	80112e8 <_vfiprintf_r+0x48>
 80114aa:	ab03      	add	r3, sp, #12
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	462a      	mov	r2, r5
 80114b0:	4b05      	ldr	r3, [pc, #20]	@ (80114c8 <_vfiprintf_r+0x228>)
 80114b2:	a904      	add	r1, sp, #16
 80114b4:	4630      	mov	r0, r6
 80114b6:	f7fb fda9 	bl	800d00c <_printf_i>
 80114ba:	e7e4      	b.n	8011486 <_vfiprintf_r+0x1e6>
 80114bc:	080137ff 	.word	0x080137ff
 80114c0:	08013809 	.word	0x08013809
 80114c4:	0800cadd 	.word	0x0800cadd
 80114c8:	0801127d 	.word	0x0801127d
 80114cc:	08013805 	.word	0x08013805

080114d0 <__swbuf_r>:
 80114d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d2:	460e      	mov	r6, r1
 80114d4:	4614      	mov	r4, r2
 80114d6:	4605      	mov	r5, r0
 80114d8:	b118      	cbz	r0, 80114e2 <__swbuf_r+0x12>
 80114da:	6a03      	ldr	r3, [r0, #32]
 80114dc:	b90b      	cbnz	r3, 80114e2 <__swbuf_r+0x12>
 80114de:	f7fc f94d 	bl	800d77c <__sinit>
 80114e2:	69a3      	ldr	r3, [r4, #24]
 80114e4:	60a3      	str	r3, [r4, #8]
 80114e6:	89a3      	ldrh	r3, [r4, #12]
 80114e8:	071a      	lsls	r2, r3, #28
 80114ea:	d501      	bpl.n	80114f0 <__swbuf_r+0x20>
 80114ec:	6923      	ldr	r3, [r4, #16]
 80114ee:	b943      	cbnz	r3, 8011502 <__swbuf_r+0x32>
 80114f0:	4621      	mov	r1, r4
 80114f2:	4628      	mov	r0, r5
 80114f4:	f000 f82a 	bl	801154c <__swsetup_r>
 80114f8:	b118      	cbz	r0, 8011502 <__swbuf_r+0x32>
 80114fa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80114fe:	4638      	mov	r0, r7
 8011500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011502:	6823      	ldr	r3, [r4, #0]
 8011504:	6922      	ldr	r2, [r4, #16]
 8011506:	1a98      	subs	r0, r3, r2
 8011508:	6963      	ldr	r3, [r4, #20]
 801150a:	b2f6      	uxtb	r6, r6
 801150c:	4283      	cmp	r3, r0
 801150e:	4637      	mov	r7, r6
 8011510:	dc05      	bgt.n	801151e <__swbuf_r+0x4e>
 8011512:	4621      	mov	r1, r4
 8011514:	4628      	mov	r0, r5
 8011516:	f7ff f993 	bl	8010840 <_fflush_r>
 801151a:	2800      	cmp	r0, #0
 801151c:	d1ed      	bne.n	80114fa <__swbuf_r+0x2a>
 801151e:	68a3      	ldr	r3, [r4, #8]
 8011520:	3b01      	subs	r3, #1
 8011522:	60a3      	str	r3, [r4, #8]
 8011524:	6823      	ldr	r3, [r4, #0]
 8011526:	1c5a      	adds	r2, r3, #1
 8011528:	6022      	str	r2, [r4, #0]
 801152a:	701e      	strb	r6, [r3, #0]
 801152c:	6962      	ldr	r2, [r4, #20]
 801152e:	1c43      	adds	r3, r0, #1
 8011530:	429a      	cmp	r2, r3
 8011532:	d004      	beq.n	801153e <__swbuf_r+0x6e>
 8011534:	89a3      	ldrh	r3, [r4, #12]
 8011536:	07db      	lsls	r3, r3, #31
 8011538:	d5e1      	bpl.n	80114fe <__swbuf_r+0x2e>
 801153a:	2e0a      	cmp	r6, #10
 801153c:	d1df      	bne.n	80114fe <__swbuf_r+0x2e>
 801153e:	4621      	mov	r1, r4
 8011540:	4628      	mov	r0, r5
 8011542:	f7ff f97d 	bl	8010840 <_fflush_r>
 8011546:	2800      	cmp	r0, #0
 8011548:	d0d9      	beq.n	80114fe <__swbuf_r+0x2e>
 801154a:	e7d6      	b.n	80114fa <__swbuf_r+0x2a>

0801154c <__swsetup_r>:
 801154c:	b538      	push	{r3, r4, r5, lr}
 801154e:	4b29      	ldr	r3, [pc, #164]	@ (80115f4 <__swsetup_r+0xa8>)
 8011550:	4605      	mov	r5, r0
 8011552:	6818      	ldr	r0, [r3, #0]
 8011554:	460c      	mov	r4, r1
 8011556:	b118      	cbz	r0, 8011560 <__swsetup_r+0x14>
 8011558:	6a03      	ldr	r3, [r0, #32]
 801155a:	b90b      	cbnz	r3, 8011560 <__swsetup_r+0x14>
 801155c:	f7fc f90e 	bl	800d77c <__sinit>
 8011560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011564:	0719      	lsls	r1, r3, #28
 8011566:	d422      	bmi.n	80115ae <__swsetup_r+0x62>
 8011568:	06da      	lsls	r2, r3, #27
 801156a:	d407      	bmi.n	801157c <__swsetup_r+0x30>
 801156c:	2209      	movs	r2, #9
 801156e:	602a      	str	r2, [r5, #0]
 8011570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011574:	81a3      	strh	r3, [r4, #12]
 8011576:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801157a:	e033      	b.n	80115e4 <__swsetup_r+0x98>
 801157c:	0758      	lsls	r0, r3, #29
 801157e:	d512      	bpl.n	80115a6 <__swsetup_r+0x5a>
 8011580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011582:	b141      	cbz	r1, 8011596 <__swsetup_r+0x4a>
 8011584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011588:	4299      	cmp	r1, r3
 801158a:	d002      	beq.n	8011592 <__swsetup_r+0x46>
 801158c:	4628      	mov	r0, r5
 801158e:	f7fd f8e3 	bl	800e758 <_free_r>
 8011592:	2300      	movs	r3, #0
 8011594:	6363      	str	r3, [r4, #52]	@ 0x34
 8011596:	89a3      	ldrh	r3, [r4, #12]
 8011598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801159c:	81a3      	strh	r3, [r4, #12]
 801159e:	2300      	movs	r3, #0
 80115a0:	6063      	str	r3, [r4, #4]
 80115a2:	6923      	ldr	r3, [r4, #16]
 80115a4:	6023      	str	r3, [r4, #0]
 80115a6:	89a3      	ldrh	r3, [r4, #12]
 80115a8:	f043 0308 	orr.w	r3, r3, #8
 80115ac:	81a3      	strh	r3, [r4, #12]
 80115ae:	6923      	ldr	r3, [r4, #16]
 80115b0:	b94b      	cbnz	r3, 80115c6 <__swsetup_r+0x7a>
 80115b2:	89a3      	ldrh	r3, [r4, #12]
 80115b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80115b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115bc:	d003      	beq.n	80115c6 <__swsetup_r+0x7a>
 80115be:	4621      	mov	r1, r4
 80115c0:	4628      	mov	r0, r5
 80115c2:	f000 f883 	bl	80116cc <__smakebuf_r>
 80115c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115ca:	f013 0201 	ands.w	r2, r3, #1
 80115ce:	d00a      	beq.n	80115e6 <__swsetup_r+0x9a>
 80115d0:	2200      	movs	r2, #0
 80115d2:	60a2      	str	r2, [r4, #8]
 80115d4:	6962      	ldr	r2, [r4, #20]
 80115d6:	4252      	negs	r2, r2
 80115d8:	61a2      	str	r2, [r4, #24]
 80115da:	6922      	ldr	r2, [r4, #16]
 80115dc:	b942      	cbnz	r2, 80115f0 <__swsetup_r+0xa4>
 80115de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80115e2:	d1c5      	bne.n	8011570 <__swsetup_r+0x24>
 80115e4:	bd38      	pop	{r3, r4, r5, pc}
 80115e6:	0799      	lsls	r1, r3, #30
 80115e8:	bf58      	it	pl
 80115ea:	6962      	ldrpl	r2, [r4, #20]
 80115ec:	60a2      	str	r2, [r4, #8]
 80115ee:	e7f4      	b.n	80115da <__swsetup_r+0x8e>
 80115f0:	2000      	movs	r0, #0
 80115f2:	e7f7      	b.n	80115e4 <__swsetup_r+0x98>
 80115f4:	20000030 	.word	0x20000030

080115f8 <_raise_r>:
 80115f8:	291f      	cmp	r1, #31
 80115fa:	b538      	push	{r3, r4, r5, lr}
 80115fc:	4605      	mov	r5, r0
 80115fe:	460c      	mov	r4, r1
 8011600:	d904      	bls.n	801160c <_raise_r+0x14>
 8011602:	2316      	movs	r3, #22
 8011604:	6003      	str	r3, [r0, #0]
 8011606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801160a:	bd38      	pop	{r3, r4, r5, pc}
 801160c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801160e:	b112      	cbz	r2, 8011616 <_raise_r+0x1e>
 8011610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011614:	b94b      	cbnz	r3, 801162a <_raise_r+0x32>
 8011616:	4628      	mov	r0, r5
 8011618:	f000 f830 	bl	801167c <_getpid_r>
 801161c:	4622      	mov	r2, r4
 801161e:	4601      	mov	r1, r0
 8011620:	4628      	mov	r0, r5
 8011622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011626:	f000 b817 	b.w	8011658 <_kill_r>
 801162a:	2b01      	cmp	r3, #1
 801162c:	d00a      	beq.n	8011644 <_raise_r+0x4c>
 801162e:	1c59      	adds	r1, r3, #1
 8011630:	d103      	bne.n	801163a <_raise_r+0x42>
 8011632:	2316      	movs	r3, #22
 8011634:	6003      	str	r3, [r0, #0]
 8011636:	2001      	movs	r0, #1
 8011638:	e7e7      	b.n	801160a <_raise_r+0x12>
 801163a:	2100      	movs	r1, #0
 801163c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011640:	4620      	mov	r0, r4
 8011642:	4798      	blx	r3
 8011644:	2000      	movs	r0, #0
 8011646:	e7e0      	b.n	801160a <_raise_r+0x12>

08011648 <raise>:
 8011648:	4b02      	ldr	r3, [pc, #8]	@ (8011654 <raise+0xc>)
 801164a:	4601      	mov	r1, r0
 801164c:	6818      	ldr	r0, [r3, #0]
 801164e:	f7ff bfd3 	b.w	80115f8 <_raise_r>
 8011652:	bf00      	nop
 8011654:	20000030 	.word	0x20000030

08011658 <_kill_r>:
 8011658:	b538      	push	{r3, r4, r5, lr}
 801165a:	4d07      	ldr	r5, [pc, #28]	@ (8011678 <_kill_r+0x20>)
 801165c:	2300      	movs	r3, #0
 801165e:	4604      	mov	r4, r0
 8011660:	4608      	mov	r0, r1
 8011662:	4611      	mov	r1, r2
 8011664:	602b      	str	r3, [r5, #0]
 8011666:	f7f2 f9cf 	bl	8003a08 <_kill>
 801166a:	1c43      	adds	r3, r0, #1
 801166c:	d102      	bne.n	8011674 <_kill_r+0x1c>
 801166e:	682b      	ldr	r3, [r5, #0]
 8011670:	b103      	cbz	r3, 8011674 <_kill_r+0x1c>
 8011672:	6023      	str	r3, [r4, #0]
 8011674:	bd38      	pop	{r3, r4, r5, pc}
 8011676:	bf00      	nop
 8011678:	20001ca0 	.word	0x20001ca0

0801167c <_getpid_r>:
 801167c:	f7f2 b9bc 	b.w	80039f8 <_getpid>

08011680 <__swhatbuf_r>:
 8011680:	b570      	push	{r4, r5, r6, lr}
 8011682:	460c      	mov	r4, r1
 8011684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011688:	2900      	cmp	r1, #0
 801168a:	b096      	sub	sp, #88	@ 0x58
 801168c:	4615      	mov	r5, r2
 801168e:	461e      	mov	r6, r3
 8011690:	da0d      	bge.n	80116ae <__swhatbuf_r+0x2e>
 8011692:	89a3      	ldrh	r3, [r4, #12]
 8011694:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011698:	f04f 0100 	mov.w	r1, #0
 801169c:	bf14      	ite	ne
 801169e:	2340      	movne	r3, #64	@ 0x40
 80116a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80116a4:	2000      	movs	r0, #0
 80116a6:	6031      	str	r1, [r6, #0]
 80116a8:	602b      	str	r3, [r5, #0]
 80116aa:	b016      	add	sp, #88	@ 0x58
 80116ac:	bd70      	pop	{r4, r5, r6, pc}
 80116ae:	466a      	mov	r2, sp
 80116b0:	f000 f848 	bl	8011744 <_fstat_r>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	dbec      	blt.n	8011692 <__swhatbuf_r+0x12>
 80116b8:	9901      	ldr	r1, [sp, #4]
 80116ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80116be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80116c2:	4259      	negs	r1, r3
 80116c4:	4159      	adcs	r1, r3
 80116c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80116ca:	e7eb      	b.n	80116a4 <__swhatbuf_r+0x24>

080116cc <__smakebuf_r>:
 80116cc:	898b      	ldrh	r3, [r1, #12]
 80116ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116d0:	079d      	lsls	r5, r3, #30
 80116d2:	4606      	mov	r6, r0
 80116d4:	460c      	mov	r4, r1
 80116d6:	d507      	bpl.n	80116e8 <__smakebuf_r+0x1c>
 80116d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80116dc:	6023      	str	r3, [r4, #0]
 80116de:	6123      	str	r3, [r4, #16]
 80116e0:	2301      	movs	r3, #1
 80116e2:	6163      	str	r3, [r4, #20]
 80116e4:	b003      	add	sp, #12
 80116e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116e8:	ab01      	add	r3, sp, #4
 80116ea:	466a      	mov	r2, sp
 80116ec:	f7ff ffc8 	bl	8011680 <__swhatbuf_r>
 80116f0:	9f00      	ldr	r7, [sp, #0]
 80116f2:	4605      	mov	r5, r0
 80116f4:	4639      	mov	r1, r7
 80116f6:	4630      	mov	r0, r6
 80116f8:	f7fb f8c4 	bl	800c884 <_malloc_r>
 80116fc:	b948      	cbnz	r0, 8011712 <__smakebuf_r+0x46>
 80116fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011702:	059a      	lsls	r2, r3, #22
 8011704:	d4ee      	bmi.n	80116e4 <__smakebuf_r+0x18>
 8011706:	f023 0303 	bic.w	r3, r3, #3
 801170a:	f043 0302 	orr.w	r3, r3, #2
 801170e:	81a3      	strh	r3, [r4, #12]
 8011710:	e7e2      	b.n	80116d8 <__smakebuf_r+0xc>
 8011712:	89a3      	ldrh	r3, [r4, #12]
 8011714:	6020      	str	r0, [r4, #0]
 8011716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801171a:	81a3      	strh	r3, [r4, #12]
 801171c:	9b01      	ldr	r3, [sp, #4]
 801171e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011722:	b15b      	cbz	r3, 801173c <__smakebuf_r+0x70>
 8011724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011728:	4630      	mov	r0, r6
 801172a:	f000 f81d 	bl	8011768 <_isatty_r>
 801172e:	b128      	cbz	r0, 801173c <__smakebuf_r+0x70>
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f023 0303 	bic.w	r3, r3, #3
 8011736:	f043 0301 	orr.w	r3, r3, #1
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	89a3      	ldrh	r3, [r4, #12]
 801173e:	431d      	orrs	r5, r3
 8011740:	81a5      	strh	r5, [r4, #12]
 8011742:	e7cf      	b.n	80116e4 <__smakebuf_r+0x18>

08011744 <_fstat_r>:
 8011744:	b538      	push	{r3, r4, r5, lr}
 8011746:	4d07      	ldr	r5, [pc, #28]	@ (8011764 <_fstat_r+0x20>)
 8011748:	2300      	movs	r3, #0
 801174a:	4604      	mov	r4, r0
 801174c:	4608      	mov	r0, r1
 801174e:	4611      	mov	r1, r2
 8011750:	602b      	str	r3, [r5, #0]
 8011752:	f7f2 f9b9 	bl	8003ac8 <_fstat>
 8011756:	1c43      	adds	r3, r0, #1
 8011758:	d102      	bne.n	8011760 <_fstat_r+0x1c>
 801175a:	682b      	ldr	r3, [r5, #0]
 801175c:	b103      	cbz	r3, 8011760 <_fstat_r+0x1c>
 801175e:	6023      	str	r3, [r4, #0]
 8011760:	bd38      	pop	{r3, r4, r5, pc}
 8011762:	bf00      	nop
 8011764:	20001ca0 	.word	0x20001ca0

08011768 <_isatty_r>:
 8011768:	b538      	push	{r3, r4, r5, lr}
 801176a:	4d06      	ldr	r5, [pc, #24]	@ (8011784 <_isatty_r+0x1c>)
 801176c:	2300      	movs	r3, #0
 801176e:	4604      	mov	r4, r0
 8011770:	4608      	mov	r0, r1
 8011772:	602b      	str	r3, [r5, #0]
 8011774:	f7f2 f9b8 	bl	8003ae8 <_isatty>
 8011778:	1c43      	adds	r3, r0, #1
 801177a:	d102      	bne.n	8011782 <_isatty_r+0x1a>
 801177c:	682b      	ldr	r3, [r5, #0]
 801177e:	b103      	cbz	r3, 8011782 <_isatty_r+0x1a>
 8011780:	6023      	str	r3, [r4, #0]
 8011782:	bd38      	pop	{r3, r4, r5, pc}
 8011784:	20001ca0 	.word	0x20001ca0

08011788 <acos>:
 8011788:	b538      	push	{r3, r4, r5, lr}
 801178a:	ed2d 8b02 	vpush	{d8}
 801178e:	ec55 4b10 	vmov	r4, r5, d0
 8011792:	f000 f9e9 	bl	8011b68 <__ieee754_acos>
 8011796:	4622      	mov	r2, r4
 8011798:	462b      	mov	r3, r5
 801179a:	4620      	mov	r0, r4
 801179c:	4629      	mov	r1, r5
 801179e:	eeb0 8a40 	vmov.f32	s16, s0
 80117a2:	eef0 8a60 	vmov.f32	s17, s1
 80117a6:	f7ef f9e1 	bl	8000b6c <__aeabi_dcmpun>
 80117aa:	b9a8      	cbnz	r0, 80117d8 <acos+0x50>
 80117ac:	ec45 4b10 	vmov	d0, r4, r5
 80117b0:	f000 f8f0 	bl	8011994 <fabs>
 80117b4:	4b0c      	ldr	r3, [pc, #48]	@ (80117e8 <acos+0x60>)
 80117b6:	ec51 0b10 	vmov	r0, r1, d0
 80117ba:	2200      	movs	r2, #0
 80117bc:	f7ef f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 80117c0:	b150      	cbz	r0, 80117d8 <acos+0x50>
 80117c2:	f7fc f92d 	bl	800da20 <__errno>
 80117c6:	ecbd 8b02 	vpop	{d8}
 80117ca:	2321      	movs	r3, #33	@ 0x21
 80117cc:	6003      	str	r3, [r0, #0]
 80117ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117d2:	4806      	ldr	r0, [pc, #24]	@ (80117ec <acos+0x64>)
 80117d4:	f7ff b8fc 	b.w	80109d0 <nan>
 80117d8:	eeb0 0a48 	vmov.f32	s0, s16
 80117dc:	eef0 0a68 	vmov.f32	s1, s17
 80117e0:	ecbd 8b02 	vpop	{d8}
 80117e4:	bd38      	pop	{r3, r4, r5, pc}
 80117e6:	bf00      	nop
 80117e8:	3ff00000 	.word	0x3ff00000
 80117ec:	0801386e 	.word	0x0801386e

080117f0 <asin>:
 80117f0:	b538      	push	{r3, r4, r5, lr}
 80117f2:	ed2d 8b02 	vpush	{d8}
 80117f6:	ec55 4b10 	vmov	r4, r5, d0
 80117fa:	f000 fc11 	bl	8012020 <__ieee754_asin>
 80117fe:	4622      	mov	r2, r4
 8011800:	462b      	mov	r3, r5
 8011802:	4620      	mov	r0, r4
 8011804:	4629      	mov	r1, r5
 8011806:	eeb0 8a40 	vmov.f32	s16, s0
 801180a:	eef0 8a60 	vmov.f32	s17, s1
 801180e:	f7ef f9ad 	bl	8000b6c <__aeabi_dcmpun>
 8011812:	b9a8      	cbnz	r0, 8011840 <asin+0x50>
 8011814:	ec45 4b10 	vmov	d0, r4, r5
 8011818:	f000 f8bc 	bl	8011994 <fabs>
 801181c:	4b0c      	ldr	r3, [pc, #48]	@ (8011850 <asin+0x60>)
 801181e:	ec51 0b10 	vmov	r0, r1, d0
 8011822:	2200      	movs	r2, #0
 8011824:	f7ef f998 	bl	8000b58 <__aeabi_dcmpgt>
 8011828:	b150      	cbz	r0, 8011840 <asin+0x50>
 801182a:	f7fc f8f9 	bl	800da20 <__errno>
 801182e:	ecbd 8b02 	vpop	{d8}
 8011832:	2321      	movs	r3, #33	@ 0x21
 8011834:	6003      	str	r3, [r0, #0]
 8011836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801183a:	4806      	ldr	r0, [pc, #24]	@ (8011854 <asin+0x64>)
 801183c:	f7ff b8c8 	b.w	80109d0 <nan>
 8011840:	eeb0 0a48 	vmov.f32	s0, s16
 8011844:	eef0 0a68 	vmov.f32	s1, s17
 8011848:	ecbd 8b02 	vpop	{d8}
 801184c:	bd38      	pop	{r3, r4, r5, pc}
 801184e:	bf00      	nop
 8011850:	3ff00000 	.word	0x3ff00000
 8011854:	0801386e 	.word	0x0801386e

08011858 <atan2>:
 8011858:	f000 bde6 	b.w	8012428 <__ieee754_atan2>

0801185c <pow>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	ed2d 8b02 	vpush	{d8}
 8011862:	eeb0 8a40 	vmov.f32	s16, s0
 8011866:	eef0 8a60 	vmov.f32	s17, s1
 801186a:	ec55 4b11 	vmov	r4, r5, d1
 801186e:	f000 fea3 	bl	80125b8 <__ieee754_pow>
 8011872:	4622      	mov	r2, r4
 8011874:	462b      	mov	r3, r5
 8011876:	4620      	mov	r0, r4
 8011878:	4629      	mov	r1, r5
 801187a:	ec57 6b10 	vmov	r6, r7, d0
 801187e:	f7ef f975 	bl	8000b6c <__aeabi_dcmpun>
 8011882:	2800      	cmp	r0, #0
 8011884:	d13b      	bne.n	80118fe <pow+0xa2>
 8011886:	ec51 0b18 	vmov	r0, r1, d8
 801188a:	2200      	movs	r2, #0
 801188c:	2300      	movs	r3, #0
 801188e:	f7ef f93b 	bl	8000b08 <__aeabi_dcmpeq>
 8011892:	b1b8      	cbz	r0, 80118c4 <pow+0x68>
 8011894:	2200      	movs	r2, #0
 8011896:	2300      	movs	r3, #0
 8011898:	4620      	mov	r0, r4
 801189a:	4629      	mov	r1, r5
 801189c:	f7ef f934 	bl	8000b08 <__aeabi_dcmpeq>
 80118a0:	2800      	cmp	r0, #0
 80118a2:	d146      	bne.n	8011932 <pow+0xd6>
 80118a4:	ec45 4b10 	vmov	d0, r4, r5
 80118a8:	f000 f87c 	bl	80119a4 <finite>
 80118ac:	b338      	cbz	r0, 80118fe <pow+0xa2>
 80118ae:	2200      	movs	r2, #0
 80118b0:	2300      	movs	r3, #0
 80118b2:	4620      	mov	r0, r4
 80118b4:	4629      	mov	r1, r5
 80118b6:	f7ef f931 	bl	8000b1c <__aeabi_dcmplt>
 80118ba:	b300      	cbz	r0, 80118fe <pow+0xa2>
 80118bc:	f7fc f8b0 	bl	800da20 <__errno>
 80118c0:	2322      	movs	r3, #34	@ 0x22
 80118c2:	e01b      	b.n	80118fc <pow+0xa0>
 80118c4:	ec47 6b10 	vmov	d0, r6, r7
 80118c8:	f000 f86c 	bl	80119a4 <finite>
 80118cc:	b9e0      	cbnz	r0, 8011908 <pow+0xac>
 80118ce:	eeb0 0a48 	vmov.f32	s0, s16
 80118d2:	eef0 0a68 	vmov.f32	s1, s17
 80118d6:	f000 f865 	bl	80119a4 <finite>
 80118da:	b1a8      	cbz	r0, 8011908 <pow+0xac>
 80118dc:	ec45 4b10 	vmov	d0, r4, r5
 80118e0:	f000 f860 	bl	80119a4 <finite>
 80118e4:	b180      	cbz	r0, 8011908 <pow+0xac>
 80118e6:	4632      	mov	r2, r6
 80118e8:	463b      	mov	r3, r7
 80118ea:	4630      	mov	r0, r6
 80118ec:	4639      	mov	r1, r7
 80118ee:	f7ef f93d 	bl	8000b6c <__aeabi_dcmpun>
 80118f2:	2800      	cmp	r0, #0
 80118f4:	d0e2      	beq.n	80118bc <pow+0x60>
 80118f6:	f7fc f893 	bl	800da20 <__errno>
 80118fa:	2321      	movs	r3, #33	@ 0x21
 80118fc:	6003      	str	r3, [r0, #0]
 80118fe:	ecbd 8b02 	vpop	{d8}
 8011902:	ec47 6b10 	vmov	d0, r6, r7
 8011906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011908:	2200      	movs	r2, #0
 801190a:	2300      	movs	r3, #0
 801190c:	4630      	mov	r0, r6
 801190e:	4639      	mov	r1, r7
 8011910:	f7ef f8fa 	bl	8000b08 <__aeabi_dcmpeq>
 8011914:	2800      	cmp	r0, #0
 8011916:	d0f2      	beq.n	80118fe <pow+0xa2>
 8011918:	eeb0 0a48 	vmov.f32	s0, s16
 801191c:	eef0 0a68 	vmov.f32	s1, s17
 8011920:	f000 f840 	bl	80119a4 <finite>
 8011924:	2800      	cmp	r0, #0
 8011926:	d0ea      	beq.n	80118fe <pow+0xa2>
 8011928:	ec45 4b10 	vmov	d0, r4, r5
 801192c:	f000 f83a 	bl	80119a4 <finite>
 8011930:	e7c3      	b.n	80118ba <pow+0x5e>
 8011932:	4f01      	ldr	r7, [pc, #4]	@ (8011938 <pow+0xdc>)
 8011934:	2600      	movs	r6, #0
 8011936:	e7e2      	b.n	80118fe <pow+0xa2>
 8011938:	3ff00000 	.word	0x3ff00000

0801193c <sqrt>:
 801193c:	b538      	push	{r3, r4, r5, lr}
 801193e:	ed2d 8b02 	vpush	{d8}
 8011942:	ec55 4b10 	vmov	r4, r5, d0
 8011946:	f000 f839 	bl	80119bc <__ieee754_sqrt>
 801194a:	4622      	mov	r2, r4
 801194c:	462b      	mov	r3, r5
 801194e:	4620      	mov	r0, r4
 8011950:	4629      	mov	r1, r5
 8011952:	eeb0 8a40 	vmov.f32	s16, s0
 8011956:	eef0 8a60 	vmov.f32	s17, s1
 801195a:	f7ef f907 	bl	8000b6c <__aeabi_dcmpun>
 801195e:	b990      	cbnz	r0, 8011986 <sqrt+0x4a>
 8011960:	2200      	movs	r2, #0
 8011962:	2300      	movs	r3, #0
 8011964:	4620      	mov	r0, r4
 8011966:	4629      	mov	r1, r5
 8011968:	f7ef f8d8 	bl	8000b1c <__aeabi_dcmplt>
 801196c:	b158      	cbz	r0, 8011986 <sqrt+0x4a>
 801196e:	f7fc f857 	bl	800da20 <__errno>
 8011972:	2321      	movs	r3, #33	@ 0x21
 8011974:	6003      	str	r3, [r0, #0]
 8011976:	2200      	movs	r2, #0
 8011978:	2300      	movs	r3, #0
 801197a:	4610      	mov	r0, r2
 801197c:	4619      	mov	r1, r3
 801197e:	f7ee ff85 	bl	800088c <__aeabi_ddiv>
 8011982:	ec41 0b18 	vmov	d8, r0, r1
 8011986:	eeb0 0a48 	vmov.f32	s0, s16
 801198a:	eef0 0a68 	vmov.f32	s1, s17
 801198e:	ecbd 8b02 	vpop	{d8}
 8011992:	bd38      	pop	{r3, r4, r5, pc}

08011994 <fabs>:
 8011994:	ec51 0b10 	vmov	r0, r1, d0
 8011998:	4602      	mov	r2, r0
 801199a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801199e:	ec43 2b10 	vmov	d0, r2, r3
 80119a2:	4770      	bx	lr

080119a4 <finite>:
 80119a4:	b082      	sub	sp, #8
 80119a6:	ed8d 0b00 	vstr	d0, [sp]
 80119aa:	9801      	ldr	r0, [sp, #4]
 80119ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80119b0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80119b4:	0fc0      	lsrs	r0, r0, #31
 80119b6:	b002      	add	sp, #8
 80119b8:	4770      	bx	lr
	...

080119bc <__ieee754_sqrt>:
 80119bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	4a66      	ldr	r2, [pc, #408]	@ (8011b5c <__ieee754_sqrt+0x1a0>)
 80119c2:	ec55 4b10 	vmov	r4, r5, d0
 80119c6:	43aa      	bics	r2, r5
 80119c8:	462b      	mov	r3, r5
 80119ca:	4621      	mov	r1, r4
 80119cc:	d110      	bne.n	80119f0 <__ieee754_sqrt+0x34>
 80119ce:	4622      	mov	r2, r4
 80119d0:	4620      	mov	r0, r4
 80119d2:	4629      	mov	r1, r5
 80119d4:	f7ee fe30 	bl	8000638 <__aeabi_dmul>
 80119d8:	4602      	mov	r2, r0
 80119da:	460b      	mov	r3, r1
 80119dc:	4620      	mov	r0, r4
 80119de:	4629      	mov	r1, r5
 80119e0:	f7ee fc74 	bl	80002cc <__adddf3>
 80119e4:	4604      	mov	r4, r0
 80119e6:	460d      	mov	r5, r1
 80119e8:	ec45 4b10 	vmov	d0, r4, r5
 80119ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119f0:	2d00      	cmp	r5, #0
 80119f2:	dc0e      	bgt.n	8011a12 <__ieee754_sqrt+0x56>
 80119f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80119f8:	4322      	orrs	r2, r4
 80119fa:	d0f5      	beq.n	80119e8 <__ieee754_sqrt+0x2c>
 80119fc:	b19d      	cbz	r5, 8011a26 <__ieee754_sqrt+0x6a>
 80119fe:	4622      	mov	r2, r4
 8011a00:	4620      	mov	r0, r4
 8011a02:	4629      	mov	r1, r5
 8011a04:	f7ee fc60 	bl	80002c8 <__aeabi_dsub>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	f7ee ff3e 	bl	800088c <__aeabi_ddiv>
 8011a10:	e7e8      	b.n	80119e4 <__ieee754_sqrt+0x28>
 8011a12:	152a      	asrs	r2, r5, #20
 8011a14:	d115      	bne.n	8011a42 <__ieee754_sqrt+0x86>
 8011a16:	2000      	movs	r0, #0
 8011a18:	e009      	b.n	8011a2e <__ieee754_sqrt+0x72>
 8011a1a:	0acb      	lsrs	r3, r1, #11
 8011a1c:	3a15      	subs	r2, #21
 8011a1e:	0549      	lsls	r1, r1, #21
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d0fa      	beq.n	8011a1a <__ieee754_sqrt+0x5e>
 8011a24:	e7f7      	b.n	8011a16 <__ieee754_sqrt+0x5a>
 8011a26:	462a      	mov	r2, r5
 8011a28:	e7fa      	b.n	8011a20 <__ieee754_sqrt+0x64>
 8011a2a:	005b      	lsls	r3, r3, #1
 8011a2c:	3001      	adds	r0, #1
 8011a2e:	02dc      	lsls	r4, r3, #11
 8011a30:	d5fb      	bpl.n	8011a2a <__ieee754_sqrt+0x6e>
 8011a32:	1e44      	subs	r4, r0, #1
 8011a34:	1b12      	subs	r2, r2, r4
 8011a36:	f1c0 0420 	rsb	r4, r0, #32
 8011a3a:	fa21 f404 	lsr.w	r4, r1, r4
 8011a3e:	4323      	orrs	r3, r4
 8011a40:	4081      	lsls	r1, r0
 8011a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a46:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8011a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011a4e:	07d2      	lsls	r2, r2, #31
 8011a50:	bf5c      	itt	pl
 8011a52:	005b      	lslpl	r3, r3, #1
 8011a54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011a58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011a5c:	bf58      	it	pl
 8011a5e:	0049      	lslpl	r1, r1, #1
 8011a60:	2600      	movs	r6, #0
 8011a62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011a66:	107f      	asrs	r7, r7, #1
 8011a68:	0049      	lsls	r1, r1, #1
 8011a6a:	2016      	movs	r0, #22
 8011a6c:	4632      	mov	r2, r6
 8011a6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011a72:	1915      	adds	r5, r2, r4
 8011a74:	429d      	cmp	r5, r3
 8011a76:	bfde      	ittt	le
 8011a78:	192a      	addle	r2, r5, r4
 8011a7a:	1b5b      	suble	r3, r3, r5
 8011a7c:	1936      	addle	r6, r6, r4
 8011a7e:	0fcd      	lsrs	r5, r1, #31
 8011a80:	3801      	subs	r0, #1
 8011a82:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011a86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011a8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011a8e:	d1f0      	bne.n	8011a72 <__ieee754_sqrt+0xb6>
 8011a90:	4605      	mov	r5, r0
 8011a92:	2420      	movs	r4, #32
 8011a94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	eb0c 0e00 	add.w	lr, ip, r0
 8011a9e:	dc02      	bgt.n	8011aa6 <__ieee754_sqrt+0xea>
 8011aa0:	d113      	bne.n	8011aca <__ieee754_sqrt+0x10e>
 8011aa2:	458e      	cmp	lr, r1
 8011aa4:	d811      	bhi.n	8011aca <__ieee754_sqrt+0x10e>
 8011aa6:	f1be 0f00 	cmp.w	lr, #0
 8011aaa:	eb0e 000c 	add.w	r0, lr, ip
 8011aae:	da3f      	bge.n	8011b30 <__ieee754_sqrt+0x174>
 8011ab0:	2800      	cmp	r0, #0
 8011ab2:	db3d      	blt.n	8011b30 <__ieee754_sqrt+0x174>
 8011ab4:	f102 0801 	add.w	r8, r2, #1
 8011ab8:	1a9b      	subs	r3, r3, r2
 8011aba:	458e      	cmp	lr, r1
 8011abc:	bf88      	it	hi
 8011abe:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8011ac2:	eba1 010e 	sub.w	r1, r1, lr
 8011ac6:	4465      	add	r5, ip
 8011ac8:	4642      	mov	r2, r8
 8011aca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011ace:	3c01      	subs	r4, #1
 8011ad0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011ad4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011ad8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011adc:	d1dc      	bne.n	8011a98 <__ieee754_sqrt+0xdc>
 8011ade:	4319      	orrs	r1, r3
 8011ae0:	d01b      	beq.n	8011b1a <__ieee754_sqrt+0x15e>
 8011ae2:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8011b60 <__ieee754_sqrt+0x1a4>
 8011ae6:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8011b64 <__ieee754_sqrt+0x1a8>
 8011aea:	e9da 0100 	ldrd	r0, r1, [sl]
 8011aee:	e9db 2300 	ldrd	r2, r3, [fp]
 8011af2:	f7ee fbe9 	bl	80002c8 <__aeabi_dsub>
 8011af6:	e9da 8900 	ldrd	r8, r9, [sl]
 8011afa:	4602      	mov	r2, r0
 8011afc:	460b      	mov	r3, r1
 8011afe:	4640      	mov	r0, r8
 8011b00:	4649      	mov	r1, r9
 8011b02:	f7ef f815 	bl	8000b30 <__aeabi_dcmple>
 8011b06:	b140      	cbz	r0, 8011b1a <__ieee754_sqrt+0x15e>
 8011b08:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8011b0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011b10:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b14:	d10e      	bne.n	8011b34 <__ieee754_sqrt+0x178>
 8011b16:	3601      	adds	r6, #1
 8011b18:	4625      	mov	r5, r4
 8011b1a:	1073      	asrs	r3, r6, #1
 8011b1c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011b20:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011b24:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8011b28:	086b      	lsrs	r3, r5, #1
 8011b2a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8011b2e:	e759      	b.n	80119e4 <__ieee754_sqrt+0x28>
 8011b30:	4690      	mov	r8, r2
 8011b32:	e7c1      	b.n	8011ab8 <__ieee754_sqrt+0xfc>
 8011b34:	f7ee fbca 	bl	80002cc <__adddf3>
 8011b38:	e9da 8900 	ldrd	r8, r9, [sl]
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	460b      	mov	r3, r1
 8011b40:	4640      	mov	r0, r8
 8011b42:	4649      	mov	r1, r9
 8011b44:	f7ee ffea 	bl	8000b1c <__aeabi_dcmplt>
 8011b48:	b120      	cbz	r0, 8011b54 <__ieee754_sqrt+0x198>
 8011b4a:	1cab      	adds	r3, r5, #2
 8011b4c:	bf08      	it	eq
 8011b4e:	3601      	addeq	r6, #1
 8011b50:	3502      	adds	r5, #2
 8011b52:	e7e2      	b.n	8011b1a <__ieee754_sqrt+0x15e>
 8011b54:	1c6b      	adds	r3, r5, #1
 8011b56:	f023 0501 	bic.w	r5, r3, #1
 8011b5a:	e7de      	b.n	8011b1a <__ieee754_sqrt+0x15e>
 8011b5c:	7ff00000 	.word	0x7ff00000
 8011b60:	08013b30 	.word	0x08013b30
 8011b64:	08013b28 	.word	0x08013b28

08011b68 <__ieee754_acos>:
 8011b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b6c:	ec55 4b10 	vmov	r4, r5, d0
 8011b70:	49b7      	ldr	r1, [pc, #732]	@ (8011e50 <__ieee754_acos+0x2e8>)
 8011b72:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011b76:	428b      	cmp	r3, r1
 8011b78:	d919      	bls.n	8011bae <__ieee754_acos+0x46>
 8011b7a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8011b7e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8011b82:	4323      	orrs	r3, r4
 8011b84:	d106      	bne.n	8011b94 <__ieee754_acos+0x2c>
 8011b86:	2d00      	cmp	r5, #0
 8011b88:	f340 8210 	ble.w	8011fac <__ieee754_acos+0x444>
 8011b8c:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8011de0 <__ieee754_acos+0x278>
 8011b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b94:	4622      	mov	r2, r4
 8011b96:	462b      	mov	r3, r5
 8011b98:	4620      	mov	r0, r4
 8011b9a:	4629      	mov	r1, r5
 8011b9c:	f7ee fb94 	bl	80002c8 <__aeabi_dsub>
 8011ba0:	4602      	mov	r2, r0
 8011ba2:	460b      	mov	r3, r1
 8011ba4:	f7ee fe72 	bl	800088c <__aeabi_ddiv>
 8011ba8:	ec41 0b10 	vmov	d0, r0, r1
 8011bac:	e7f0      	b.n	8011b90 <__ieee754_acos+0x28>
 8011bae:	49a9      	ldr	r1, [pc, #676]	@ (8011e54 <__ieee754_acos+0x2ec>)
 8011bb0:	428b      	cmp	r3, r1
 8011bb2:	f200 8085 	bhi.w	8011cc0 <__ieee754_acos+0x158>
 8011bb6:	4aa8      	ldr	r2, [pc, #672]	@ (8011e58 <__ieee754_acos+0x2f0>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	f240 81fa 	bls.w	8011fb2 <__ieee754_acos+0x44a>
 8011bbe:	4622      	mov	r2, r4
 8011bc0:	462b      	mov	r3, r5
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	4629      	mov	r1, r5
 8011bc6:	f7ee fd37 	bl	8000638 <__aeabi_dmul>
 8011bca:	a387      	add	r3, pc, #540	@ (adr r3, 8011de8 <__ieee754_acos+0x280>)
 8011bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd0:	4606      	mov	r6, r0
 8011bd2:	460f      	mov	r7, r1
 8011bd4:	f7ee fd30 	bl	8000638 <__aeabi_dmul>
 8011bd8:	a385      	add	r3, pc, #532	@ (adr r3, 8011df0 <__ieee754_acos+0x288>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb75 	bl	80002cc <__adddf3>
 8011be2:	4632      	mov	r2, r6
 8011be4:	463b      	mov	r3, r7
 8011be6:	f7ee fd27 	bl	8000638 <__aeabi_dmul>
 8011bea:	a383      	add	r3, pc, #524	@ (adr r3, 8011df8 <__ieee754_acos+0x290>)
 8011bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf0:	f7ee fb6a 	bl	80002c8 <__aeabi_dsub>
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	463b      	mov	r3, r7
 8011bf8:	f7ee fd1e 	bl	8000638 <__aeabi_dmul>
 8011bfc:	a380      	add	r3, pc, #512	@ (adr r3, 8011e00 <__ieee754_acos+0x298>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee fb63 	bl	80002cc <__adddf3>
 8011c06:	4632      	mov	r2, r6
 8011c08:	463b      	mov	r3, r7
 8011c0a:	f7ee fd15 	bl	8000638 <__aeabi_dmul>
 8011c0e:	a37e      	add	r3, pc, #504	@ (adr r3, 8011e08 <__ieee754_acos+0x2a0>)
 8011c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c14:	f7ee fb58 	bl	80002c8 <__aeabi_dsub>
 8011c18:	4632      	mov	r2, r6
 8011c1a:	463b      	mov	r3, r7
 8011c1c:	f7ee fd0c 	bl	8000638 <__aeabi_dmul>
 8011c20:	a37b      	add	r3, pc, #492	@ (adr r3, 8011e10 <__ieee754_acos+0x2a8>)
 8011c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c26:	f7ee fb51 	bl	80002cc <__adddf3>
 8011c2a:	4632      	mov	r2, r6
 8011c2c:	463b      	mov	r3, r7
 8011c2e:	f7ee fd03 	bl	8000638 <__aeabi_dmul>
 8011c32:	a379      	add	r3, pc, #484	@ (adr r3, 8011e18 <__ieee754_acos+0x2b0>)
 8011c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c38:	4680      	mov	r8, r0
 8011c3a:	4689      	mov	r9, r1
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee fcfa 	bl	8000638 <__aeabi_dmul>
 8011c44:	a376      	add	r3, pc, #472	@ (adr r3, 8011e20 <__ieee754_acos+0x2b8>)
 8011c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4a:	f7ee fb3d 	bl	80002c8 <__aeabi_dsub>
 8011c4e:	4632      	mov	r2, r6
 8011c50:	463b      	mov	r3, r7
 8011c52:	f7ee fcf1 	bl	8000638 <__aeabi_dmul>
 8011c56:	a374      	add	r3, pc, #464	@ (adr r3, 8011e28 <__ieee754_acos+0x2c0>)
 8011c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5c:	f7ee fb36 	bl	80002cc <__adddf3>
 8011c60:	4632      	mov	r2, r6
 8011c62:	463b      	mov	r3, r7
 8011c64:	f7ee fce8 	bl	8000638 <__aeabi_dmul>
 8011c68:	a371      	add	r3, pc, #452	@ (adr r3, 8011e30 <__ieee754_acos+0x2c8>)
 8011c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6e:	f7ee fb2b 	bl	80002c8 <__aeabi_dsub>
 8011c72:	4632      	mov	r2, r6
 8011c74:	463b      	mov	r3, r7
 8011c76:	f7ee fcdf 	bl	8000638 <__aeabi_dmul>
 8011c7a:	4b78      	ldr	r3, [pc, #480]	@ (8011e5c <__ieee754_acos+0x2f4>)
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	f7ee fb25 	bl	80002cc <__adddf3>
 8011c82:	4602      	mov	r2, r0
 8011c84:	460b      	mov	r3, r1
 8011c86:	4640      	mov	r0, r8
 8011c88:	4649      	mov	r1, r9
 8011c8a:	f7ee fdff 	bl	800088c <__aeabi_ddiv>
 8011c8e:	4622      	mov	r2, r4
 8011c90:	462b      	mov	r3, r5
 8011c92:	f7ee fcd1 	bl	8000638 <__aeabi_dmul>
 8011c96:	4602      	mov	r2, r0
 8011c98:	460b      	mov	r3, r1
 8011c9a:	a167      	add	r1, pc, #412	@ (adr r1, 8011e38 <__ieee754_acos+0x2d0>)
 8011c9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ca0:	f7ee fb12 	bl	80002c8 <__aeabi_dsub>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4620      	mov	r0, r4
 8011caa:	4629      	mov	r1, r5
 8011cac:	f7ee fb0c 	bl	80002c8 <__aeabi_dsub>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	a162      	add	r1, pc, #392	@ (adr r1, 8011e40 <__ieee754_acos+0x2d8>)
 8011cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cba:	f7ee fb05 	bl	80002c8 <__aeabi_dsub>
 8011cbe:	e773      	b.n	8011ba8 <__ieee754_acos+0x40>
 8011cc0:	2d00      	cmp	r5, #0
 8011cc2:	f280 80cf 	bge.w	8011e64 <__ieee754_acos+0x2fc>
 8011cc6:	4b65      	ldr	r3, [pc, #404]	@ (8011e5c <__ieee754_acos+0x2f4>)
 8011cc8:	2200      	movs	r2, #0
 8011cca:	4620      	mov	r0, r4
 8011ccc:	4629      	mov	r1, r5
 8011cce:	f7ee fafd 	bl	80002cc <__adddf3>
 8011cd2:	4b63      	ldr	r3, [pc, #396]	@ (8011e60 <__ieee754_acos+0x2f8>)
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f7ee fcaf 	bl	8000638 <__aeabi_dmul>
 8011cda:	a343      	add	r3, pc, #268	@ (adr r3, 8011de8 <__ieee754_acos+0x280>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	460d      	mov	r5, r1
 8011ce4:	f7ee fca8 	bl	8000638 <__aeabi_dmul>
 8011ce8:	a341      	add	r3, pc, #260	@ (adr r3, 8011df0 <__ieee754_acos+0x288>)
 8011cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cee:	f7ee faed 	bl	80002cc <__adddf3>
 8011cf2:	4622      	mov	r2, r4
 8011cf4:	462b      	mov	r3, r5
 8011cf6:	f7ee fc9f 	bl	8000638 <__aeabi_dmul>
 8011cfa:	a33f      	add	r3, pc, #252	@ (adr r3, 8011df8 <__ieee754_acos+0x290>)
 8011cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d00:	f7ee fae2 	bl	80002c8 <__aeabi_dsub>
 8011d04:	4622      	mov	r2, r4
 8011d06:	462b      	mov	r3, r5
 8011d08:	f7ee fc96 	bl	8000638 <__aeabi_dmul>
 8011d0c:	a33c      	add	r3, pc, #240	@ (adr r3, 8011e00 <__ieee754_acos+0x298>)
 8011d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d12:	f7ee fadb 	bl	80002cc <__adddf3>
 8011d16:	4622      	mov	r2, r4
 8011d18:	462b      	mov	r3, r5
 8011d1a:	f7ee fc8d 	bl	8000638 <__aeabi_dmul>
 8011d1e:	a33a      	add	r3, pc, #232	@ (adr r3, 8011e08 <__ieee754_acos+0x2a0>)
 8011d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d24:	f7ee fad0 	bl	80002c8 <__aeabi_dsub>
 8011d28:	4622      	mov	r2, r4
 8011d2a:	462b      	mov	r3, r5
 8011d2c:	f7ee fc84 	bl	8000638 <__aeabi_dmul>
 8011d30:	a337      	add	r3, pc, #220	@ (adr r3, 8011e10 <__ieee754_acos+0x2a8>)
 8011d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d36:	f7ee fac9 	bl	80002cc <__adddf3>
 8011d3a:	4622      	mov	r2, r4
 8011d3c:	462b      	mov	r3, r5
 8011d3e:	f7ee fc7b 	bl	8000638 <__aeabi_dmul>
 8011d42:	a335      	add	r3, pc, #212	@ (adr r3, 8011e18 <__ieee754_acos+0x2b0>)
 8011d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d48:	4606      	mov	r6, r0
 8011d4a:	460f      	mov	r7, r1
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	4629      	mov	r1, r5
 8011d50:	f7ee fc72 	bl	8000638 <__aeabi_dmul>
 8011d54:	a332      	add	r3, pc, #200	@ (adr r3, 8011e20 <__ieee754_acos+0x2b8>)
 8011d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5a:	f7ee fab5 	bl	80002c8 <__aeabi_dsub>
 8011d5e:	4622      	mov	r2, r4
 8011d60:	462b      	mov	r3, r5
 8011d62:	f7ee fc69 	bl	8000638 <__aeabi_dmul>
 8011d66:	a330      	add	r3, pc, #192	@ (adr r3, 8011e28 <__ieee754_acos+0x2c0>)
 8011d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6c:	f7ee faae 	bl	80002cc <__adddf3>
 8011d70:	4622      	mov	r2, r4
 8011d72:	462b      	mov	r3, r5
 8011d74:	f7ee fc60 	bl	8000638 <__aeabi_dmul>
 8011d78:	a32d      	add	r3, pc, #180	@ (adr r3, 8011e30 <__ieee754_acos+0x2c8>)
 8011d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7e:	f7ee faa3 	bl	80002c8 <__aeabi_dsub>
 8011d82:	4622      	mov	r2, r4
 8011d84:	462b      	mov	r3, r5
 8011d86:	f7ee fc57 	bl	8000638 <__aeabi_dmul>
 8011d8a:	4b34      	ldr	r3, [pc, #208]	@ (8011e5c <__ieee754_acos+0x2f4>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	f7ee fa9d 	bl	80002cc <__adddf3>
 8011d92:	ec45 4b10 	vmov	d0, r4, r5
 8011d96:	4680      	mov	r8, r0
 8011d98:	4689      	mov	r9, r1
 8011d9a:	f7ff fe0f 	bl	80119bc <__ieee754_sqrt>
 8011d9e:	ec55 4b10 	vmov	r4, r5, d0
 8011da2:	4642      	mov	r2, r8
 8011da4:	464b      	mov	r3, r9
 8011da6:	4630      	mov	r0, r6
 8011da8:	4639      	mov	r1, r7
 8011daa:	f7ee fd6f 	bl	800088c <__aeabi_ddiv>
 8011dae:	4622      	mov	r2, r4
 8011db0:	462b      	mov	r3, r5
 8011db2:	f7ee fc41 	bl	8000638 <__aeabi_dmul>
 8011db6:	a320      	add	r3, pc, #128	@ (adr r3, 8011e38 <__ieee754_acos+0x2d0>)
 8011db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbc:	f7ee fa84 	bl	80002c8 <__aeabi_dsub>
 8011dc0:	4622      	mov	r2, r4
 8011dc2:	462b      	mov	r3, r5
 8011dc4:	f7ee fa82 	bl	80002cc <__adddf3>
 8011dc8:	4602      	mov	r2, r0
 8011dca:	460b      	mov	r3, r1
 8011dcc:	f7ee fa7e 	bl	80002cc <__adddf3>
 8011dd0:	4602      	mov	r2, r0
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	a11c      	add	r1, pc, #112	@ (adr r1, 8011e48 <__ieee754_acos+0x2e0>)
 8011dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011dda:	e76e      	b.n	8011cba <__ieee754_acos+0x152>
 8011ddc:	f3af 8000 	nop.w
	...
 8011de8:	0dfdf709 	.word	0x0dfdf709
 8011dec:	3f023de1 	.word	0x3f023de1
 8011df0:	7501b288 	.word	0x7501b288
 8011df4:	3f49efe0 	.word	0x3f49efe0
 8011df8:	b5688f3b 	.word	0xb5688f3b
 8011dfc:	3fa48228 	.word	0x3fa48228
 8011e00:	0e884455 	.word	0x0e884455
 8011e04:	3fc9c155 	.word	0x3fc9c155
 8011e08:	03eb6f7d 	.word	0x03eb6f7d
 8011e0c:	3fd4d612 	.word	0x3fd4d612
 8011e10:	55555555 	.word	0x55555555
 8011e14:	3fc55555 	.word	0x3fc55555
 8011e18:	b12e9282 	.word	0xb12e9282
 8011e1c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011e20:	1b8d0159 	.word	0x1b8d0159
 8011e24:	3fe6066c 	.word	0x3fe6066c
 8011e28:	9c598ac8 	.word	0x9c598ac8
 8011e2c:	40002ae5 	.word	0x40002ae5
 8011e30:	1c8a2d4b 	.word	0x1c8a2d4b
 8011e34:	40033a27 	.word	0x40033a27
 8011e38:	33145c07 	.word	0x33145c07
 8011e3c:	3c91a626 	.word	0x3c91a626
 8011e40:	54442d18 	.word	0x54442d18
 8011e44:	3ff921fb 	.word	0x3ff921fb
 8011e48:	54442d18 	.word	0x54442d18
 8011e4c:	400921fb 	.word	0x400921fb
 8011e50:	3fefffff 	.word	0x3fefffff
 8011e54:	3fdfffff 	.word	0x3fdfffff
 8011e58:	3c600000 	.word	0x3c600000
 8011e5c:	3ff00000 	.word	0x3ff00000
 8011e60:	3fe00000 	.word	0x3fe00000
 8011e64:	4622      	mov	r2, r4
 8011e66:	462b      	mov	r3, r5
 8011e68:	496b      	ldr	r1, [pc, #428]	@ (8012018 <__ieee754_acos+0x4b0>)
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	f7ee fa2c 	bl	80002c8 <__aeabi_dsub>
 8011e70:	4b6a      	ldr	r3, [pc, #424]	@ (801201c <__ieee754_acos+0x4b4>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	f7ee fbe0 	bl	8000638 <__aeabi_dmul>
 8011e78:	4604      	mov	r4, r0
 8011e7a:	460d      	mov	r5, r1
 8011e7c:	ec45 4b10 	vmov	d0, r4, r5
 8011e80:	f7ff fd9c 	bl	80119bc <__ieee754_sqrt>
 8011e84:	a34c      	add	r3, pc, #304	@ (adr r3, 8011fb8 <__ieee754_acos+0x450>)
 8011e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8a:	4620      	mov	r0, r4
 8011e8c:	4629      	mov	r1, r5
 8011e8e:	ec59 8b10 	vmov	r8, r9, d0
 8011e92:	f7ee fbd1 	bl	8000638 <__aeabi_dmul>
 8011e96:	a34a      	add	r3, pc, #296	@ (adr r3, 8011fc0 <__ieee754_acos+0x458>)
 8011e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e9c:	f7ee fa16 	bl	80002cc <__adddf3>
 8011ea0:	4622      	mov	r2, r4
 8011ea2:	462b      	mov	r3, r5
 8011ea4:	f7ee fbc8 	bl	8000638 <__aeabi_dmul>
 8011ea8:	a347      	add	r3, pc, #284	@ (adr r3, 8011fc8 <__ieee754_acos+0x460>)
 8011eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eae:	f7ee fa0b 	bl	80002c8 <__aeabi_dsub>
 8011eb2:	4622      	mov	r2, r4
 8011eb4:	462b      	mov	r3, r5
 8011eb6:	f7ee fbbf 	bl	8000638 <__aeabi_dmul>
 8011eba:	a345      	add	r3, pc, #276	@ (adr r3, 8011fd0 <__ieee754_acos+0x468>)
 8011ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec0:	f7ee fa04 	bl	80002cc <__adddf3>
 8011ec4:	4622      	mov	r2, r4
 8011ec6:	462b      	mov	r3, r5
 8011ec8:	f7ee fbb6 	bl	8000638 <__aeabi_dmul>
 8011ecc:	a342      	add	r3, pc, #264	@ (adr r3, 8011fd8 <__ieee754_acos+0x470>)
 8011ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed2:	f7ee f9f9 	bl	80002c8 <__aeabi_dsub>
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	462b      	mov	r3, r5
 8011eda:	f7ee fbad 	bl	8000638 <__aeabi_dmul>
 8011ede:	a340      	add	r3, pc, #256	@ (adr r3, 8011fe0 <__ieee754_acos+0x478>)
 8011ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee4:	f7ee f9f2 	bl	80002cc <__adddf3>
 8011ee8:	4622      	mov	r2, r4
 8011eea:	462b      	mov	r3, r5
 8011eec:	f7ee fba4 	bl	8000638 <__aeabi_dmul>
 8011ef0:	a33d      	add	r3, pc, #244	@ (adr r3, 8011fe8 <__ieee754_acos+0x480>)
 8011ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef6:	4682      	mov	sl, r0
 8011ef8:	468b      	mov	fp, r1
 8011efa:	4620      	mov	r0, r4
 8011efc:	4629      	mov	r1, r5
 8011efe:	f7ee fb9b 	bl	8000638 <__aeabi_dmul>
 8011f02:	a33b      	add	r3, pc, #236	@ (adr r3, 8011ff0 <__ieee754_acos+0x488>)
 8011f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f08:	f7ee f9de 	bl	80002c8 <__aeabi_dsub>
 8011f0c:	4622      	mov	r2, r4
 8011f0e:	462b      	mov	r3, r5
 8011f10:	f7ee fb92 	bl	8000638 <__aeabi_dmul>
 8011f14:	a338      	add	r3, pc, #224	@ (adr r3, 8011ff8 <__ieee754_acos+0x490>)
 8011f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f1a:	f7ee f9d7 	bl	80002cc <__adddf3>
 8011f1e:	4622      	mov	r2, r4
 8011f20:	462b      	mov	r3, r5
 8011f22:	f7ee fb89 	bl	8000638 <__aeabi_dmul>
 8011f26:	a336      	add	r3, pc, #216	@ (adr r3, 8012000 <__ieee754_acos+0x498>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	f7ee f9cc 	bl	80002c8 <__aeabi_dsub>
 8011f30:	4622      	mov	r2, r4
 8011f32:	462b      	mov	r3, r5
 8011f34:	f7ee fb80 	bl	8000638 <__aeabi_dmul>
 8011f38:	4b37      	ldr	r3, [pc, #220]	@ (8012018 <__ieee754_acos+0x4b0>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	f7ee f9c6 	bl	80002cc <__adddf3>
 8011f40:	4602      	mov	r2, r0
 8011f42:	460b      	mov	r3, r1
 8011f44:	4650      	mov	r0, sl
 8011f46:	4659      	mov	r1, fp
 8011f48:	f7ee fca0 	bl	800088c <__aeabi_ddiv>
 8011f4c:	4642      	mov	r2, r8
 8011f4e:	464b      	mov	r3, r9
 8011f50:	f7ee fb72 	bl	8000638 <__aeabi_dmul>
 8011f54:	2600      	movs	r6, #0
 8011f56:	4682      	mov	sl, r0
 8011f58:	468b      	mov	fp, r1
 8011f5a:	4632      	mov	r2, r6
 8011f5c:	464b      	mov	r3, r9
 8011f5e:	4630      	mov	r0, r6
 8011f60:	4649      	mov	r1, r9
 8011f62:	f7ee fb69 	bl	8000638 <__aeabi_dmul>
 8011f66:	4602      	mov	r2, r0
 8011f68:	460b      	mov	r3, r1
 8011f6a:	4620      	mov	r0, r4
 8011f6c:	4629      	mov	r1, r5
 8011f6e:	f7ee f9ab 	bl	80002c8 <__aeabi_dsub>
 8011f72:	4632      	mov	r2, r6
 8011f74:	4604      	mov	r4, r0
 8011f76:	460d      	mov	r5, r1
 8011f78:	464b      	mov	r3, r9
 8011f7a:	4640      	mov	r0, r8
 8011f7c:	4649      	mov	r1, r9
 8011f7e:	f7ee f9a5 	bl	80002cc <__adddf3>
 8011f82:	4602      	mov	r2, r0
 8011f84:	460b      	mov	r3, r1
 8011f86:	4620      	mov	r0, r4
 8011f88:	4629      	mov	r1, r5
 8011f8a:	f7ee fc7f 	bl	800088c <__aeabi_ddiv>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	460b      	mov	r3, r1
 8011f92:	4650      	mov	r0, sl
 8011f94:	4659      	mov	r1, fp
 8011f96:	f7ee f999 	bl	80002cc <__adddf3>
 8011f9a:	4632      	mov	r2, r6
 8011f9c:	464b      	mov	r3, r9
 8011f9e:	f7ee f995 	bl	80002cc <__adddf3>
 8011fa2:	4602      	mov	r2, r0
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	f7ee f991 	bl	80002cc <__adddf3>
 8011faa:	e5fd      	b.n	8011ba8 <__ieee754_acos+0x40>
 8011fac:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8012008 <__ieee754_acos+0x4a0>
 8011fb0:	e5ee      	b.n	8011b90 <__ieee754_acos+0x28>
 8011fb2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8012010 <__ieee754_acos+0x4a8>
 8011fb6:	e5eb      	b.n	8011b90 <__ieee754_acos+0x28>
 8011fb8:	0dfdf709 	.word	0x0dfdf709
 8011fbc:	3f023de1 	.word	0x3f023de1
 8011fc0:	7501b288 	.word	0x7501b288
 8011fc4:	3f49efe0 	.word	0x3f49efe0
 8011fc8:	b5688f3b 	.word	0xb5688f3b
 8011fcc:	3fa48228 	.word	0x3fa48228
 8011fd0:	0e884455 	.word	0x0e884455
 8011fd4:	3fc9c155 	.word	0x3fc9c155
 8011fd8:	03eb6f7d 	.word	0x03eb6f7d
 8011fdc:	3fd4d612 	.word	0x3fd4d612
 8011fe0:	55555555 	.word	0x55555555
 8011fe4:	3fc55555 	.word	0x3fc55555
 8011fe8:	b12e9282 	.word	0xb12e9282
 8011fec:	3fb3b8c5 	.word	0x3fb3b8c5
 8011ff0:	1b8d0159 	.word	0x1b8d0159
 8011ff4:	3fe6066c 	.word	0x3fe6066c
 8011ff8:	9c598ac8 	.word	0x9c598ac8
 8011ffc:	40002ae5 	.word	0x40002ae5
 8012000:	1c8a2d4b 	.word	0x1c8a2d4b
 8012004:	40033a27 	.word	0x40033a27
 8012008:	54442d18 	.word	0x54442d18
 801200c:	400921fb 	.word	0x400921fb
 8012010:	54442d18 	.word	0x54442d18
 8012014:	3ff921fb 	.word	0x3ff921fb
 8012018:	3ff00000 	.word	0x3ff00000
 801201c:	3fe00000 	.word	0x3fe00000

08012020 <__ieee754_asin>:
 8012020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	ec55 4b10 	vmov	r4, r5, d0
 8012028:	4bc7      	ldr	r3, [pc, #796]	@ (8012348 <__ieee754_asin+0x328>)
 801202a:	b087      	sub	sp, #28
 801202c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012030:	429e      	cmp	r6, r3
 8012032:	9501      	str	r5, [sp, #4]
 8012034:	d92d      	bls.n	8012092 <__ieee754_asin+0x72>
 8012036:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801203a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801203e:	4326      	orrs	r6, r4
 8012040:	d116      	bne.n	8012070 <__ieee754_asin+0x50>
 8012042:	a3a7      	add	r3, pc, #668	@ (adr r3, 80122e0 <__ieee754_asin+0x2c0>)
 8012044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012048:	4620      	mov	r0, r4
 801204a:	4629      	mov	r1, r5
 801204c:	f7ee faf4 	bl	8000638 <__aeabi_dmul>
 8012050:	a3a5      	add	r3, pc, #660	@ (adr r3, 80122e8 <__ieee754_asin+0x2c8>)
 8012052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012056:	4606      	mov	r6, r0
 8012058:	460f      	mov	r7, r1
 801205a:	4620      	mov	r0, r4
 801205c:	4629      	mov	r1, r5
 801205e:	f7ee faeb 	bl	8000638 <__aeabi_dmul>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	4630      	mov	r0, r6
 8012068:	4639      	mov	r1, r7
 801206a:	f7ee f92f 	bl	80002cc <__adddf3>
 801206e:	e009      	b.n	8012084 <__ieee754_asin+0x64>
 8012070:	4622      	mov	r2, r4
 8012072:	462b      	mov	r3, r5
 8012074:	4620      	mov	r0, r4
 8012076:	4629      	mov	r1, r5
 8012078:	f7ee f926 	bl	80002c8 <__aeabi_dsub>
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	f7ee fc04 	bl	800088c <__aeabi_ddiv>
 8012084:	4604      	mov	r4, r0
 8012086:	460d      	mov	r5, r1
 8012088:	ec45 4b10 	vmov	d0, r4, r5
 801208c:	b007      	add	sp, #28
 801208e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012092:	4bae      	ldr	r3, [pc, #696]	@ (801234c <__ieee754_asin+0x32c>)
 8012094:	429e      	cmp	r6, r3
 8012096:	d810      	bhi.n	80120ba <__ieee754_asin+0x9a>
 8012098:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801209c:	f080 80ad 	bcs.w	80121fa <__ieee754_asin+0x1da>
 80120a0:	a393      	add	r3, pc, #588	@ (adr r3, 80122f0 <__ieee754_asin+0x2d0>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	4620      	mov	r0, r4
 80120a8:	4629      	mov	r1, r5
 80120aa:	f7ee f90f 	bl	80002cc <__adddf3>
 80120ae:	4ba8      	ldr	r3, [pc, #672]	@ (8012350 <__ieee754_asin+0x330>)
 80120b0:	2200      	movs	r2, #0
 80120b2:	f7ee fd51 	bl	8000b58 <__aeabi_dcmpgt>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d1e6      	bne.n	8012088 <__ieee754_asin+0x68>
 80120ba:	ec45 4b10 	vmov	d0, r4, r5
 80120be:	f7ff fc69 	bl	8011994 <fabs>
 80120c2:	49a3      	ldr	r1, [pc, #652]	@ (8012350 <__ieee754_asin+0x330>)
 80120c4:	ec53 2b10 	vmov	r2, r3, d0
 80120c8:	2000      	movs	r0, #0
 80120ca:	f7ee f8fd 	bl	80002c8 <__aeabi_dsub>
 80120ce:	4ba1      	ldr	r3, [pc, #644]	@ (8012354 <__ieee754_asin+0x334>)
 80120d0:	2200      	movs	r2, #0
 80120d2:	f7ee fab1 	bl	8000638 <__aeabi_dmul>
 80120d6:	a388      	add	r3, pc, #544	@ (adr r3, 80122f8 <__ieee754_asin+0x2d8>)
 80120d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120dc:	4604      	mov	r4, r0
 80120de:	460d      	mov	r5, r1
 80120e0:	f7ee faaa 	bl	8000638 <__aeabi_dmul>
 80120e4:	a386      	add	r3, pc, #536	@ (adr r3, 8012300 <__ieee754_asin+0x2e0>)
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	f7ee f8ef 	bl	80002cc <__adddf3>
 80120ee:	4622      	mov	r2, r4
 80120f0:	462b      	mov	r3, r5
 80120f2:	f7ee faa1 	bl	8000638 <__aeabi_dmul>
 80120f6:	a384      	add	r3, pc, #528	@ (adr r3, 8012308 <__ieee754_asin+0x2e8>)
 80120f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fc:	f7ee f8e4 	bl	80002c8 <__aeabi_dsub>
 8012100:	4622      	mov	r2, r4
 8012102:	462b      	mov	r3, r5
 8012104:	f7ee fa98 	bl	8000638 <__aeabi_dmul>
 8012108:	a381      	add	r3, pc, #516	@ (adr r3, 8012310 <__ieee754_asin+0x2f0>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	f7ee f8dd 	bl	80002cc <__adddf3>
 8012112:	4622      	mov	r2, r4
 8012114:	462b      	mov	r3, r5
 8012116:	f7ee fa8f 	bl	8000638 <__aeabi_dmul>
 801211a:	a37f      	add	r3, pc, #508	@ (adr r3, 8012318 <__ieee754_asin+0x2f8>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	f7ee f8d2 	bl	80002c8 <__aeabi_dsub>
 8012124:	4622      	mov	r2, r4
 8012126:	462b      	mov	r3, r5
 8012128:	f7ee fa86 	bl	8000638 <__aeabi_dmul>
 801212c:	a37c      	add	r3, pc, #496	@ (adr r3, 8012320 <__ieee754_asin+0x300>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	f7ee f8cb 	bl	80002cc <__adddf3>
 8012136:	4622      	mov	r2, r4
 8012138:	462b      	mov	r3, r5
 801213a:	f7ee fa7d 	bl	8000638 <__aeabi_dmul>
 801213e:	a37a      	add	r3, pc, #488	@ (adr r3, 8012328 <__ieee754_asin+0x308>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012148:	4620      	mov	r0, r4
 801214a:	4629      	mov	r1, r5
 801214c:	f7ee fa74 	bl	8000638 <__aeabi_dmul>
 8012150:	a377      	add	r3, pc, #476	@ (adr r3, 8012330 <__ieee754_asin+0x310>)
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	f7ee f8b7 	bl	80002c8 <__aeabi_dsub>
 801215a:	4622      	mov	r2, r4
 801215c:	462b      	mov	r3, r5
 801215e:	f7ee fa6b 	bl	8000638 <__aeabi_dmul>
 8012162:	a375      	add	r3, pc, #468	@ (adr r3, 8012338 <__ieee754_asin+0x318>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	f7ee f8b0 	bl	80002cc <__adddf3>
 801216c:	4622      	mov	r2, r4
 801216e:	462b      	mov	r3, r5
 8012170:	f7ee fa62 	bl	8000638 <__aeabi_dmul>
 8012174:	a372      	add	r3, pc, #456	@ (adr r3, 8012340 <__ieee754_asin+0x320>)
 8012176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217a:	f7ee f8a5 	bl	80002c8 <__aeabi_dsub>
 801217e:	4622      	mov	r2, r4
 8012180:	462b      	mov	r3, r5
 8012182:	f7ee fa59 	bl	8000638 <__aeabi_dmul>
 8012186:	4b72      	ldr	r3, [pc, #456]	@ (8012350 <__ieee754_asin+0x330>)
 8012188:	2200      	movs	r2, #0
 801218a:	f7ee f89f 	bl	80002cc <__adddf3>
 801218e:	ec45 4b10 	vmov	d0, r4, r5
 8012192:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012196:	f7ff fc11 	bl	80119bc <__ieee754_sqrt>
 801219a:	4b6f      	ldr	r3, [pc, #444]	@ (8012358 <__ieee754_asin+0x338>)
 801219c:	429e      	cmp	r6, r3
 801219e:	ec5b ab10 	vmov	sl, fp, d0
 80121a2:	f240 80db 	bls.w	801235c <__ieee754_asin+0x33c>
 80121a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121ae:	f7ee fb6d 	bl	800088c <__aeabi_ddiv>
 80121b2:	4652      	mov	r2, sl
 80121b4:	465b      	mov	r3, fp
 80121b6:	f7ee fa3f 	bl	8000638 <__aeabi_dmul>
 80121ba:	4652      	mov	r2, sl
 80121bc:	465b      	mov	r3, fp
 80121be:	f7ee f885 	bl	80002cc <__adddf3>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	f7ee f881 	bl	80002cc <__adddf3>
 80121ca:	a347      	add	r3, pc, #284	@ (adr r3, 80122e8 <__ieee754_asin+0x2c8>)
 80121cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d0:	f7ee f87a 	bl	80002c8 <__aeabi_dsub>
 80121d4:	4602      	mov	r2, r0
 80121d6:	460b      	mov	r3, r1
 80121d8:	a141      	add	r1, pc, #260	@ (adr r1, 80122e0 <__ieee754_asin+0x2c0>)
 80121da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121de:	f7ee f873 	bl	80002c8 <__aeabi_dsub>
 80121e2:	9b01      	ldr	r3, [sp, #4]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	bfdc      	itt	le
 80121e8:	4602      	movle	r2, r0
 80121ea:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	bfdc      	itt	le
 80121f4:	4614      	movle	r4, r2
 80121f6:	461d      	movle	r5, r3
 80121f8:	e746      	b.n	8012088 <__ieee754_asin+0x68>
 80121fa:	4622      	mov	r2, r4
 80121fc:	462b      	mov	r3, r5
 80121fe:	4620      	mov	r0, r4
 8012200:	4629      	mov	r1, r5
 8012202:	f7ee fa19 	bl	8000638 <__aeabi_dmul>
 8012206:	a33c      	add	r3, pc, #240	@ (adr r3, 80122f8 <__ieee754_asin+0x2d8>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	4606      	mov	r6, r0
 801220e:	460f      	mov	r7, r1
 8012210:	f7ee fa12 	bl	8000638 <__aeabi_dmul>
 8012214:	a33a      	add	r3, pc, #232	@ (adr r3, 8012300 <__ieee754_asin+0x2e0>)
 8012216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221a:	f7ee f857 	bl	80002cc <__adddf3>
 801221e:	4632      	mov	r2, r6
 8012220:	463b      	mov	r3, r7
 8012222:	f7ee fa09 	bl	8000638 <__aeabi_dmul>
 8012226:	a338      	add	r3, pc, #224	@ (adr r3, 8012308 <__ieee754_asin+0x2e8>)
 8012228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801222c:	f7ee f84c 	bl	80002c8 <__aeabi_dsub>
 8012230:	4632      	mov	r2, r6
 8012232:	463b      	mov	r3, r7
 8012234:	f7ee fa00 	bl	8000638 <__aeabi_dmul>
 8012238:	a335      	add	r3, pc, #212	@ (adr r3, 8012310 <__ieee754_asin+0x2f0>)
 801223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801223e:	f7ee f845 	bl	80002cc <__adddf3>
 8012242:	4632      	mov	r2, r6
 8012244:	463b      	mov	r3, r7
 8012246:	f7ee f9f7 	bl	8000638 <__aeabi_dmul>
 801224a:	a333      	add	r3, pc, #204	@ (adr r3, 8012318 <__ieee754_asin+0x2f8>)
 801224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012250:	f7ee f83a 	bl	80002c8 <__aeabi_dsub>
 8012254:	4632      	mov	r2, r6
 8012256:	463b      	mov	r3, r7
 8012258:	f7ee f9ee 	bl	8000638 <__aeabi_dmul>
 801225c:	a330      	add	r3, pc, #192	@ (adr r3, 8012320 <__ieee754_asin+0x300>)
 801225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012262:	f7ee f833 	bl	80002cc <__adddf3>
 8012266:	4632      	mov	r2, r6
 8012268:	463b      	mov	r3, r7
 801226a:	f7ee f9e5 	bl	8000638 <__aeabi_dmul>
 801226e:	a32e      	add	r3, pc, #184	@ (adr r3, 8012328 <__ieee754_asin+0x308>)
 8012270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012274:	4680      	mov	r8, r0
 8012276:	4689      	mov	r9, r1
 8012278:	4630      	mov	r0, r6
 801227a:	4639      	mov	r1, r7
 801227c:	f7ee f9dc 	bl	8000638 <__aeabi_dmul>
 8012280:	a32b      	add	r3, pc, #172	@ (adr r3, 8012330 <__ieee754_asin+0x310>)
 8012282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012286:	f7ee f81f 	bl	80002c8 <__aeabi_dsub>
 801228a:	4632      	mov	r2, r6
 801228c:	463b      	mov	r3, r7
 801228e:	f7ee f9d3 	bl	8000638 <__aeabi_dmul>
 8012292:	a329      	add	r3, pc, #164	@ (adr r3, 8012338 <__ieee754_asin+0x318>)
 8012294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012298:	f7ee f818 	bl	80002cc <__adddf3>
 801229c:	4632      	mov	r2, r6
 801229e:	463b      	mov	r3, r7
 80122a0:	f7ee f9ca 	bl	8000638 <__aeabi_dmul>
 80122a4:	a326      	add	r3, pc, #152	@ (adr r3, 8012340 <__ieee754_asin+0x320>)
 80122a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122aa:	f7ee f80d 	bl	80002c8 <__aeabi_dsub>
 80122ae:	4632      	mov	r2, r6
 80122b0:	463b      	mov	r3, r7
 80122b2:	f7ee f9c1 	bl	8000638 <__aeabi_dmul>
 80122b6:	4b26      	ldr	r3, [pc, #152]	@ (8012350 <__ieee754_asin+0x330>)
 80122b8:	2200      	movs	r2, #0
 80122ba:	f7ee f807 	bl	80002cc <__adddf3>
 80122be:	4602      	mov	r2, r0
 80122c0:	460b      	mov	r3, r1
 80122c2:	4640      	mov	r0, r8
 80122c4:	4649      	mov	r1, r9
 80122c6:	f7ee fae1 	bl	800088c <__aeabi_ddiv>
 80122ca:	4622      	mov	r2, r4
 80122cc:	462b      	mov	r3, r5
 80122ce:	f7ee f9b3 	bl	8000638 <__aeabi_dmul>
 80122d2:	4602      	mov	r2, r0
 80122d4:	460b      	mov	r3, r1
 80122d6:	4620      	mov	r0, r4
 80122d8:	4629      	mov	r1, r5
 80122da:	e6c6      	b.n	801206a <__ieee754_asin+0x4a>
 80122dc:	f3af 8000 	nop.w
 80122e0:	54442d18 	.word	0x54442d18
 80122e4:	3ff921fb 	.word	0x3ff921fb
 80122e8:	33145c07 	.word	0x33145c07
 80122ec:	3c91a626 	.word	0x3c91a626
 80122f0:	8800759c 	.word	0x8800759c
 80122f4:	7e37e43c 	.word	0x7e37e43c
 80122f8:	0dfdf709 	.word	0x0dfdf709
 80122fc:	3f023de1 	.word	0x3f023de1
 8012300:	7501b288 	.word	0x7501b288
 8012304:	3f49efe0 	.word	0x3f49efe0
 8012308:	b5688f3b 	.word	0xb5688f3b
 801230c:	3fa48228 	.word	0x3fa48228
 8012310:	0e884455 	.word	0x0e884455
 8012314:	3fc9c155 	.word	0x3fc9c155
 8012318:	03eb6f7d 	.word	0x03eb6f7d
 801231c:	3fd4d612 	.word	0x3fd4d612
 8012320:	55555555 	.word	0x55555555
 8012324:	3fc55555 	.word	0x3fc55555
 8012328:	b12e9282 	.word	0xb12e9282
 801232c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012330:	1b8d0159 	.word	0x1b8d0159
 8012334:	3fe6066c 	.word	0x3fe6066c
 8012338:	9c598ac8 	.word	0x9c598ac8
 801233c:	40002ae5 	.word	0x40002ae5
 8012340:	1c8a2d4b 	.word	0x1c8a2d4b
 8012344:	40033a27 	.word	0x40033a27
 8012348:	3fefffff 	.word	0x3fefffff
 801234c:	3fdfffff 	.word	0x3fdfffff
 8012350:	3ff00000 	.word	0x3ff00000
 8012354:	3fe00000 	.word	0x3fe00000
 8012358:	3fef3332 	.word	0x3fef3332
 801235c:	4652      	mov	r2, sl
 801235e:	465b      	mov	r3, fp
 8012360:	4650      	mov	r0, sl
 8012362:	4659      	mov	r1, fp
 8012364:	f7ed ffb2 	bl	80002cc <__adddf3>
 8012368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801236c:	4606      	mov	r6, r0
 801236e:	460f      	mov	r7, r1
 8012370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012374:	f7ee fa8a 	bl	800088c <__aeabi_ddiv>
 8012378:	4602      	mov	r2, r0
 801237a:	460b      	mov	r3, r1
 801237c:	4630      	mov	r0, r6
 801237e:	4639      	mov	r1, r7
 8012380:	f7ee f95a 	bl	8000638 <__aeabi_dmul>
 8012384:	f04f 0800 	mov.w	r8, #0
 8012388:	4606      	mov	r6, r0
 801238a:	460f      	mov	r7, r1
 801238c:	4642      	mov	r2, r8
 801238e:	465b      	mov	r3, fp
 8012390:	4640      	mov	r0, r8
 8012392:	4659      	mov	r1, fp
 8012394:	f7ee f950 	bl	8000638 <__aeabi_dmul>
 8012398:	4602      	mov	r2, r0
 801239a:	460b      	mov	r3, r1
 801239c:	4620      	mov	r0, r4
 801239e:	4629      	mov	r1, r5
 80123a0:	f7ed ff92 	bl	80002c8 <__aeabi_dsub>
 80123a4:	4642      	mov	r2, r8
 80123a6:	4604      	mov	r4, r0
 80123a8:	460d      	mov	r5, r1
 80123aa:	465b      	mov	r3, fp
 80123ac:	4650      	mov	r0, sl
 80123ae:	4659      	mov	r1, fp
 80123b0:	f7ed ff8c 	bl	80002cc <__adddf3>
 80123b4:	4602      	mov	r2, r0
 80123b6:	460b      	mov	r3, r1
 80123b8:	4620      	mov	r0, r4
 80123ba:	4629      	mov	r1, r5
 80123bc:	f7ee fa66 	bl	800088c <__aeabi_ddiv>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	f7ed ff82 	bl	80002cc <__adddf3>
 80123c8:	4602      	mov	r2, r0
 80123ca:	460b      	mov	r3, r1
 80123cc:	a112      	add	r1, pc, #72	@ (adr r1, 8012418 <__ieee754_asin+0x3f8>)
 80123ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123d2:	f7ed ff79 	bl	80002c8 <__aeabi_dsub>
 80123d6:	4602      	mov	r2, r0
 80123d8:	460b      	mov	r3, r1
 80123da:	4630      	mov	r0, r6
 80123dc:	4639      	mov	r1, r7
 80123de:	f7ed ff73 	bl	80002c8 <__aeabi_dsub>
 80123e2:	4642      	mov	r2, r8
 80123e4:	4604      	mov	r4, r0
 80123e6:	460d      	mov	r5, r1
 80123e8:	465b      	mov	r3, fp
 80123ea:	4640      	mov	r0, r8
 80123ec:	4659      	mov	r1, fp
 80123ee:	f7ed ff6d 	bl	80002cc <__adddf3>
 80123f2:	4602      	mov	r2, r0
 80123f4:	460b      	mov	r3, r1
 80123f6:	a10a      	add	r1, pc, #40	@ (adr r1, 8012420 <__ieee754_asin+0x400>)
 80123f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123fc:	f7ed ff64 	bl	80002c8 <__aeabi_dsub>
 8012400:	4602      	mov	r2, r0
 8012402:	460b      	mov	r3, r1
 8012404:	4620      	mov	r0, r4
 8012406:	4629      	mov	r1, r5
 8012408:	f7ed ff5e 	bl	80002c8 <__aeabi_dsub>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	a103      	add	r1, pc, #12	@ (adr r1, 8012420 <__ieee754_asin+0x400>)
 8012412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012416:	e6e2      	b.n	80121de <__ieee754_asin+0x1be>
 8012418:	33145c07 	.word	0x33145c07
 801241c:	3c91a626 	.word	0x3c91a626
 8012420:	54442d18 	.word	0x54442d18
 8012424:	3fe921fb 	.word	0x3fe921fb

08012428 <__ieee754_atan2>:
 8012428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801242c:	ec57 6b11 	vmov	r6, r7, d1
 8012430:	4273      	negs	r3, r6
 8012432:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80125b0 <__ieee754_atan2+0x188>
 8012436:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801243a:	4333      	orrs	r3, r6
 801243c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012440:	4543      	cmp	r3, r8
 8012442:	ec51 0b10 	vmov	r0, r1, d0
 8012446:	4635      	mov	r5, r6
 8012448:	d809      	bhi.n	801245e <__ieee754_atan2+0x36>
 801244a:	4244      	negs	r4, r0
 801244c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012450:	4304      	orrs	r4, r0
 8012452:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8012456:	4544      	cmp	r4, r8
 8012458:	468e      	mov	lr, r1
 801245a:	4681      	mov	r9, r0
 801245c:	d907      	bls.n	801246e <__ieee754_atan2+0x46>
 801245e:	4632      	mov	r2, r6
 8012460:	463b      	mov	r3, r7
 8012462:	f7ed ff33 	bl	80002cc <__adddf3>
 8012466:	ec41 0b10 	vmov	d0, r0, r1
 801246a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801246e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8012472:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8012476:	4334      	orrs	r4, r6
 8012478:	d103      	bne.n	8012482 <__ieee754_atan2+0x5a>
 801247a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801247e:	f000 bde7 	b.w	8013050 <atan>
 8012482:	17bc      	asrs	r4, r7, #30
 8012484:	f004 0402 	and.w	r4, r4, #2
 8012488:	ea53 0909 	orrs.w	r9, r3, r9
 801248c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8012490:	d107      	bne.n	80124a2 <__ieee754_atan2+0x7a>
 8012492:	2c02      	cmp	r4, #2
 8012494:	d05f      	beq.n	8012556 <__ieee754_atan2+0x12e>
 8012496:	2c03      	cmp	r4, #3
 8012498:	d1e5      	bne.n	8012466 <__ieee754_atan2+0x3e>
 801249a:	a143      	add	r1, pc, #268	@ (adr r1, 80125a8 <__ieee754_atan2+0x180>)
 801249c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124a0:	e7e1      	b.n	8012466 <__ieee754_atan2+0x3e>
 80124a2:	4315      	orrs	r5, r2
 80124a4:	d106      	bne.n	80124b4 <__ieee754_atan2+0x8c>
 80124a6:	f1be 0f00 	cmp.w	lr, #0
 80124aa:	db5f      	blt.n	801256c <__ieee754_atan2+0x144>
 80124ac:	a136      	add	r1, pc, #216	@ (adr r1, 8012588 <__ieee754_atan2+0x160>)
 80124ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124b2:	e7d8      	b.n	8012466 <__ieee754_atan2+0x3e>
 80124b4:	4542      	cmp	r2, r8
 80124b6:	d10f      	bne.n	80124d8 <__ieee754_atan2+0xb0>
 80124b8:	4293      	cmp	r3, r2
 80124ba:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80124be:	d107      	bne.n	80124d0 <__ieee754_atan2+0xa8>
 80124c0:	2c02      	cmp	r4, #2
 80124c2:	d84c      	bhi.n	801255e <__ieee754_atan2+0x136>
 80124c4:	4b36      	ldr	r3, [pc, #216]	@ (80125a0 <__ieee754_atan2+0x178>)
 80124c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80124ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80124ce:	e7ca      	b.n	8012466 <__ieee754_atan2+0x3e>
 80124d0:	2c02      	cmp	r4, #2
 80124d2:	d848      	bhi.n	8012566 <__ieee754_atan2+0x13e>
 80124d4:	4b33      	ldr	r3, [pc, #204]	@ (80125a4 <__ieee754_atan2+0x17c>)
 80124d6:	e7f6      	b.n	80124c6 <__ieee754_atan2+0x9e>
 80124d8:	4543      	cmp	r3, r8
 80124da:	d0e4      	beq.n	80124a6 <__ieee754_atan2+0x7e>
 80124dc:	1a9b      	subs	r3, r3, r2
 80124de:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80124e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80124e6:	da1e      	bge.n	8012526 <__ieee754_atan2+0xfe>
 80124e8:	2f00      	cmp	r7, #0
 80124ea:	da01      	bge.n	80124f0 <__ieee754_atan2+0xc8>
 80124ec:	323c      	adds	r2, #60	@ 0x3c
 80124ee:	db1e      	blt.n	801252e <__ieee754_atan2+0x106>
 80124f0:	4632      	mov	r2, r6
 80124f2:	463b      	mov	r3, r7
 80124f4:	f7ee f9ca 	bl	800088c <__aeabi_ddiv>
 80124f8:	ec41 0b10 	vmov	d0, r0, r1
 80124fc:	f7ff fa4a 	bl	8011994 <fabs>
 8012500:	f000 fda6 	bl	8013050 <atan>
 8012504:	ec51 0b10 	vmov	r0, r1, d0
 8012508:	2c01      	cmp	r4, #1
 801250a:	d013      	beq.n	8012534 <__ieee754_atan2+0x10c>
 801250c:	2c02      	cmp	r4, #2
 801250e:	d015      	beq.n	801253c <__ieee754_atan2+0x114>
 8012510:	2c00      	cmp	r4, #0
 8012512:	d0a8      	beq.n	8012466 <__ieee754_atan2+0x3e>
 8012514:	a318      	add	r3, pc, #96	@ (adr r3, 8012578 <__ieee754_atan2+0x150>)
 8012516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251a:	f7ed fed5 	bl	80002c8 <__aeabi_dsub>
 801251e:	a318      	add	r3, pc, #96	@ (adr r3, 8012580 <__ieee754_atan2+0x158>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	e014      	b.n	8012550 <__ieee754_atan2+0x128>
 8012526:	a118      	add	r1, pc, #96	@ (adr r1, 8012588 <__ieee754_atan2+0x160>)
 8012528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801252c:	e7ec      	b.n	8012508 <__ieee754_atan2+0xe0>
 801252e:	2000      	movs	r0, #0
 8012530:	2100      	movs	r1, #0
 8012532:	e7e9      	b.n	8012508 <__ieee754_atan2+0xe0>
 8012534:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012538:	4619      	mov	r1, r3
 801253a:	e794      	b.n	8012466 <__ieee754_atan2+0x3e>
 801253c:	a30e      	add	r3, pc, #56	@ (adr r3, 8012578 <__ieee754_atan2+0x150>)
 801253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012542:	f7ed fec1 	bl	80002c8 <__aeabi_dsub>
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	a10d      	add	r1, pc, #52	@ (adr r1, 8012580 <__ieee754_atan2+0x158>)
 801254c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012550:	f7ed feba 	bl	80002c8 <__aeabi_dsub>
 8012554:	e787      	b.n	8012466 <__ieee754_atan2+0x3e>
 8012556:	a10a      	add	r1, pc, #40	@ (adr r1, 8012580 <__ieee754_atan2+0x158>)
 8012558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801255c:	e783      	b.n	8012466 <__ieee754_atan2+0x3e>
 801255e:	a10c      	add	r1, pc, #48	@ (adr r1, 8012590 <__ieee754_atan2+0x168>)
 8012560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012564:	e77f      	b.n	8012466 <__ieee754_atan2+0x3e>
 8012566:	2000      	movs	r0, #0
 8012568:	2100      	movs	r1, #0
 801256a:	e77c      	b.n	8012466 <__ieee754_atan2+0x3e>
 801256c:	a10a      	add	r1, pc, #40	@ (adr r1, 8012598 <__ieee754_atan2+0x170>)
 801256e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012572:	e778      	b.n	8012466 <__ieee754_atan2+0x3e>
 8012574:	f3af 8000 	nop.w
 8012578:	33145c07 	.word	0x33145c07
 801257c:	3ca1a626 	.word	0x3ca1a626
 8012580:	54442d18 	.word	0x54442d18
 8012584:	400921fb 	.word	0x400921fb
 8012588:	54442d18 	.word	0x54442d18
 801258c:	3ff921fb 	.word	0x3ff921fb
 8012590:	54442d18 	.word	0x54442d18
 8012594:	3fe921fb 	.word	0x3fe921fb
 8012598:	54442d18 	.word	0x54442d18
 801259c:	bff921fb 	.word	0xbff921fb
 80125a0:	08013b50 	.word	0x08013b50
 80125a4:	08013b38 	.word	0x08013b38
 80125a8:	54442d18 	.word	0x54442d18
 80125ac:	c00921fb 	.word	0xc00921fb
 80125b0:	7ff00000 	.word	0x7ff00000
 80125b4:	00000000 	.word	0x00000000

080125b8 <__ieee754_pow>:
 80125b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125bc:	b091      	sub	sp, #68	@ 0x44
 80125be:	ed8d 1b00 	vstr	d1, [sp]
 80125c2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80125c6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80125ca:	ea5a 0001 	orrs.w	r0, sl, r1
 80125ce:	ec57 6b10 	vmov	r6, r7, d0
 80125d2:	d113      	bne.n	80125fc <__ieee754_pow+0x44>
 80125d4:	19b3      	adds	r3, r6, r6
 80125d6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80125da:	4152      	adcs	r2, r2
 80125dc:	4298      	cmp	r0, r3
 80125de:	4b9a      	ldr	r3, [pc, #616]	@ (8012848 <__ieee754_pow+0x290>)
 80125e0:	4193      	sbcs	r3, r2
 80125e2:	f080 84ee 	bcs.w	8012fc2 <__ieee754_pow+0xa0a>
 80125e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125ea:	4630      	mov	r0, r6
 80125ec:	4639      	mov	r1, r7
 80125ee:	f7ed fe6d 	bl	80002cc <__adddf3>
 80125f2:	ec41 0b10 	vmov	d0, r0, r1
 80125f6:	b011      	add	sp, #68	@ 0x44
 80125f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125fc:	4a93      	ldr	r2, [pc, #588]	@ (801284c <__ieee754_pow+0x294>)
 80125fe:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8012602:	4295      	cmp	r5, r2
 8012604:	46b8      	mov	r8, r7
 8012606:	4633      	mov	r3, r6
 8012608:	d80a      	bhi.n	8012620 <__ieee754_pow+0x68>
 801260a:	d104      	bne.n	8012616 <__ieee754_pow+0x5e>
 801260c:	2e00      	cmp	r6, #0
 801260e:	d1ea      	bne.n	80125e6 <__ieee754_pow+0x2e>
 8012610:	45aa      	cmp	sl, r5
 8012612:	d8e8      	bhi.n	80125e6 <__ieee754_pow+0x2e>
 8012614:	e001      	b.n	801261a <__ieee754_pow+0x62>
 8012616:	4592      	cmp	sl, r2
 8012618:	d802      	bhi.n	8012620 <__ieee754_pow+0x68>
 801261a:	4592      	cmp	sl, r2
 801261c:	d10f      	bne.n	801263e <__ieee754_pow+0x86>
 801261e:	b171      	cbz	r1, 801263e <__ieee754_pow+0x86>
 8012620:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012624:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012628:	ea58 0803 	orrs.w	r8, r8, r3
 801262c:	d1db      	bne.n	80125e6 <__ieee754_pow+0x2e>
 801262e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012632:	18db      	adds	r3, r3, r3
 8012634:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012638:	4152      	adcs	r2, r2
 801263a:	4598      	cmp	r8, r3
 801263c:	e7cf      	b.n	80125de <__ieee754_pow+0x26>
 801263e:	f1b8 0f00 	cmp.w	r8, #0
 8012642:	46ab      	mov	fp, r5
 8012644:	da43      	bge.n	80126ce <__ieee754_pow+0x116>
 8012646:	4a82      	ldr	r2, [pc, #520]	@ (8012850 <__ieee754_pow+0x298>)
 8012648:	4592      	cmp	sl, r2
 801264a:	d856      	bhi.n	80126fa <__ieee754_pow+0x142>
 801264c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8012650:	4592      	cmp	sl, r2
 8012652:	f240 84c5 	bls.w	8012fe0 <__ieee754_pow+0xa28>
 8012656:	ea4f 522a 	mov.w	r2, sl, asr #20
 801265a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801265e:	2a14      	cmp	r2, #20
 8012660:	dd18      	ble.n	8012694 <__ieee754_pow+0xdc>
 8012662:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8012666:	fa21 f402 	lsr.w	r4, r1, r2
 801266a:	fa04 f202 	lsl.w	r2, r4, r2
 801266e:	428a      	cmp	r2, r1
 8012670:	f040 84b6 	bne.w	8012fe0 <__ieee754_pow+0xa28>
 8012674:	f004 0401 	and.w	r4, r4, #1
 8012678:	f1c4 0402 	rsb	r4, r4, #2
 801267c:	2900      	cmp	r1, #0
 801267e:	d159      	bne.n	8012734 <__ieee754_pow+0x17c>
 8012680:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8012684:	d148      	bne.n	8012718 <__ieee754_pow+0x160>
 8012686:	4632      	mov	r2, r6
 8012688:	463b      	mov	r3, r7
 801268a:	4630      	mov	r0, r6
 801268c:	4639      	mov	r1, r7
 801268e:	f7ed ffd3 	bl	8000638 <__aeabi_dmul>
 8012692:	e7ae      	b.n	80125f2 <__ieee754_pow+0x3a>
 8012694:	2900      	cmp	r1, #0
 8012696:	d14c      	bne.n	8012732 <__ieee754_pow+0x17a>
 8012698:	f1c2 0214 	rsb	r2, r2, #20
 801269c:	fa4a f402 	asr.w	r4, sl, r2
 80126a0:	fa04 f202 	lsl.w	r2, r4, r2
 80126a4:	4552      	cmp	r2, sl
 80126a6:	f040 8498 	bne.w	8012fda <__ieee754_pow+0xa22>
 80126aa:	f004 0401 	and.w	r4, r4, #1
 80126ae:	f1c4 0402 	rsb	r4, r4, #2
 80126b2:	4a68      	ldr	r2, [pc, #416]	@ (8012854 <__ieee754_pow+0x29c>)
 80126b4:	4592      	cmp	sl, r2
 80126b6:	d1e3      	bne.n	8012680 <__ieee754_pow+0xc8>
 80126b8:	f1b9 0f00 	cmp.w	r9, #0
 80126bc:	f280 8489 	bge.w	8012fd2 <__ieee754_pow+0xa1a>
 80126c0:	4964      	ldr	r1, [pc, #400]	@ (8012854 <__ieee754_pow+0x29c>)
 80126c2:	4632      	mov	r2, r6
 80126c4:	463b      	mov	r3, r7
 80126c6:	2000      	movs	r0, #0
 80126c8:	f7ee f8e0 	bl	800088c <__aeabi_ddiv>
 80126cc:	e791      	b.n	80125f2 <__ieee754_pow+0x3a>
 80126ce:	2400      	movs	r4, #0
 80126d0:	bb81      	cbnz	r1, 8012734 <__ieee754_pow+0x17c>
 80126d2:	4a5e      	ldr	r2, [pc, #376]	@ (801284c <__ieee754_pow+0x294>)
 80126d4:	4592      	cmp	sl, r2
 80126d6:	d1ec      	bne.n	80126b2 <__ieee754_pow+0xfa>
 80126d8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80126dc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80126e0:	431a      	orrs	r2, r3
 80126e2:	f000 846e 	beq.w	8012fc2 <__ieee754_pow+0xa0a>
 80126e6:	4b5c      	ldr	r3, [pc, #368]	@ (8012858 <__ieee754_pow+0x2a0>)
 80126e8:	429d      	cmp	r5, r3
 80126ea:	d908      	bls.n	80126fe <__ieee754_pow+0x146>
 80126ec:	f1b9 0f00 	cmp.w	r9, #0
 80126f0:	f280 846b 	bge.w	8012fca <__ieee754_pow+0xa12>
 80126f4:	2000      	movs	r0, #0
 80126f6:	2100      	movs	r1, #0
 80126f8:	e77b      	b.n	80125f2 <__ieee754_pow+0x3a>
 80126fa:	2402      	movs	r4, #2
 80126fc:	e7e8      	b.n	80126d0 <__ieee754_pow+0x118>
 80126fe:	f1b9 0f00 	cmp.w	r9, #0
 8012702:	f04f 0000 	mov.w	r0, #0
 8012706:	f04f 0100 	mov.w	r1, #0
 801270a:	f6bf af72 	bge.w	80125f2 <__ieee754_pow+0x3a>
 801270e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012712:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012716:	e76c      	b.n	80125f2 <__ieee754_pow+0x3a>
 8012718:	4a50      	ldr	r2, [pc, #320]	@ (801285c <__ieee754_pow+0x2a4>)
 801271a:	4591      	cmp	r9, r2
 801271c:	d10a      	bne.n	8012734 <__ieee754_pow+0x17c>
 801271e:	f1b8 0f00 	cmp.w	r8, #0
 8012722:	db07      	blt.n	8012734 <__ieee754_pow+0x17c>
 8012724:	ec47 6b10 	vmov	d0, r6, r7
 8012728:	b011      	add	sp, #68	@ 0x44
 801272a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272e:	f7ff b945 	b.w	80119bc <__ieee754_sqrt>
 8012732:	2400      	movs	r4, #0
 8012734:	ec47 6b10 	vmov	d0, r6, r7
 8012738:	9302      	str	r3, [sp, #8]
 801273a:	f7ff f92b 	bl	8011994 <fabs>
 801273e:	9b02      	ldr	r3, [sp, #8]
 8012740:	ec51 0b10 	vmov	r0, r1, d0
 8012744:	bb43      	cbnz	r3, 8012798 <__ieee754_pow+0x1e0>
 8012746:	4b43      	ldr	r3, [pc, #268]	@ (8012854 <__ieee754_pow+0x29c>)
 8012748:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801274c:	429a      	cmp	r2, r3
 801274e:	d000      	beq.n	8012752 <__ieee754_pow+0x19a>
 8012750:	bb15      	cbnz	r5, 8012798 <__ieee754_pow+0x1e0>
 8012752:	f1b9 0f00 	cmp.w	r9, #0
 8012756:	da05      	bge.n	8012764 <__ieee754_pow+0x1ac>
 8012758:	4602      	mov	r2, r0
 801275a:	460b      	mov	r3, r1
 801275c:	2000      	movs	r0, #0
 801275e:	493d      	ldr	r1, [pc, #244]	@ (8012854 <__ieee754_pow+0x29c>)
 8012760:	f7ee f894 	bl	800088c <__aeabi_ddiv>
 8012764:	f1b8 0f00 	cmp.w	r8, #0
 8012768:	f6bf af43 	bge.w	80125f2 <__ieee754_pow+0x3a>
 801276c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8012770:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8012774:	4325      	orrs	r5, r4
 8012776:	d108      	bne.n	801278a <__ieee754_pow+0x1d2>
 8012778:	4602      	mov	r2, r0
 801277a:	460b      	mov	r3, r1
 801277c:	4610      	mov	r0, r2
 801277e:	4619      	mov	r1, r3
 8012780:	f7ed fda2 	bl	80002c8 <__aeabi_dsub>
 8012784:	4602      	mov	r2, r0
 8012786:	460b      	mov	r3, r1
 8012788:	e79e      	b.n	80126c8 <__ieee754_pow+0x110>
 801278a:	2c01      	cmp	r4, #1
 801278c:	f47f af31 	bne.w	80125f2 <__ieee754_pow+0x3a>
 8012790:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012794:	4619      	mov	r1, r3
 8012796:	e72c      	b.n	80125f2 <__ieee754_pow+0x3a>
 8012798:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801279c:	3b01      	subs	r3, #1
 801279e:	ea53 0204 	orrs.w	r2, r3, r4
 80127a2:	d102      	bne.n	80127aa <__ieee754_pow+0x1f2>
 80127a4:	4632      	mov	r2, r6
 80127a6:	463b      	mov	r3, r7
 80127a8:	e7e8      	b.n	801277c <__ieee754_pow+0x1c4>
 80127aa:	3c01      	subs	r4, #1
 80127ac:	431c      	orrs	r4, r3
 80127ae:	d016      	beq.n	80127de <__ieee754_pow+0x226>
 80127b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012838 <__ieee754_pow+0x280>
 80127b4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80127b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127bc:	f240 8110 	bls.w	80129e0 <__ieee754_pow+0x428>
 80127c0:	4b27      	ldr	r3, [pc, #156]	@ (8012860 <__ieee754_pow+0x2a8>)
 80127c2:	459a      	cmp	sl, r3
 80127c4:	4b24      	ldr	r3, [pc, #144]	@ (8012858 <__ieee754_pow+0x2a0>)
 80127c6:	d916      	bls.n	80127f6 <__ieee754_pow+0x23e>
 80127c8:	429d      	cmp	r5, r3
 80127ca:	d80b      	bhi.n	80127e4 <__ieee754_pow+0x22c>
 80127cc:	f1b9 0f00 	cmp.w	r9, #0
 80127d0:	da0b      	bge.n	80127ea <__ieee754_pow+0x232>
 80127d2:	2000      	movs	r0, #0
 80127d4:	b011      	add	sp, #68	@ 0x44
 80127d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127da:	f000 be81 	b.w	80134e0 <__math_oflow>
 80127de:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8012840 <__ieee754_pow+0x288>
 80127e2:	e7e7      	b.n	80127b4 <__ieee754_pow+0x1fc>
 80127e4:	f1b9 0f00 	cmp.w	r9, #0
 80127e8:	dcf3      	bgt.n	80127d2 <__ieee754_pow+0x21a>
 80127ea:	2000      	movs	r0, #0
 80127ec:	b011      	add	sp, #68	@ 0x44
 80127ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127f2:	f000 be6d 	b.w	80134d0 <__math_uflow>
 80127f6:	429d      	cmp	r5, r3
 80127f8:	d20c      	bcs.n	8012814 <__ieee754_pow+0x25c>
 80127fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127fe:	2200      	movs	r2, #0
 8012800:	2300      	movs	r3, #0
 8012802:	f7ee f98b 	bl	8000b1c <__aeabi_dcmplt>
 8012806:	3800      	subs	r0, #0
 8012808:	bf18      	it	ne
 801280a:	2001      	movne	r0, #1
 801280c:	f1b9 0f00 	cmp.w	r9, #0
 8012810:	daec      	bge.n	80127ec <__ieee754_pow+0x234>
 8012812:	e7df      	b.n	80127d4 <__ieee754_pow+0x21c>
 8012814:	4b0f      	ldr	r3, [pc, #60]	@ (8012854 <__ieee754_pow+0x29c>)
 8012816:	429d      	cmp	r5, r3
 8012818:	f04f 0200 	mov.w	r2, #0
 801281c:	d922      	bls.n	8012864 <__ieee754_pow+0x2ac>
 801281e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012822:	2300      	movs	r3, #0
 8012824:	f7ee f97a 	bl	8000b1c <__aeabi_dcmplt>
 8012828:	3800      	subs	r0, #0
 801282a:	bf18      	it	ne
 801282c:	2001      	movne	r0, #1
 801282e:	f1b9 0f00 	cmp.w	r9, #0
 8012832:	dccf      	bgt.n	80127d4 <__ieee754_pow+0x21c>
 8012834:	e7da      	b.n	80127ec <__ieee754_pow+0x234>
 8012836:	bf00      	nop
 8012838:	00000000 	.word	0x00000000
 801283c:	3ff00000 	.word	0x3ff00000
 8012840:	00000000 	.word	0x00000000
 8012844:	bff00000 	.word	0xbff00000
 8012848:	fff00000 	.word	0xfff00000
 801284c:	7ff00000 	.word	0x7ff00000
 8012850:	433fffff 	.word	0x433fffff
 8012854:	3ff00000 	.word	0x3ff00000
 8012858:	3fefffff 	.word	0x3fefffff
 801285c:	3fe00000 	.word	0x3fe00000
 8012860:	43f00000 	.word	0x43f00000
 8012864:	4b5a      	ldr	r3, [pc, #360]	@ (80129d0 <__ieee754_pow+0x418>)
 8012866:	f7ed fd2f 	bl	80002c8 <__aeabi_dsub>
 801286a:	a351      	add	r3, pc, #324	@ (adr r3, 80129b0 <__ieee754_pow+0x3f8>)
 801286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012870:	4604      	mov	r4, r0
 8012872:	460d      	mov	r5, r1
 8012874:	f7ed fee0 	bl	8000638 <__aeabi_dmul>
 8012878:	a34f      	add	r3, pc, #316	@ (adr r3, 80129b8 <__ieee754_pow+0x400>)
 801287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801287e:	4606      	mov	r6, r0
 8012880:	460f      	mov	r7, r1
 8012882:	4620      	mov	r0, r4
 8012884:	4629      	mov	r1, r5
 8012886:	f7ed fed7 	bl	8000638 <__aeabi_dmul>
 801288a:	4b52      	ldr	r3, [pc, #328]	@ (80129d4 <__ieee754_pow+0x41c>)
 801288c:	4682      	mov	sl, r0
 801288e:	468b      	mov	fp, r1
 8012890:	2200      	movs	r2, #0
 8012892:	4620      	mov	r0, r4
 8012894:	4629      	mov	r1, r5
 8012896:	f7ed fecf 	bl	8000638 <__aeabi_dmul>
 801289a:	4602      	mov	r2, r0
 801289c:	460b      	mov	r3, r1
 801289e:	a148      	add	r1, pc, #288	@ (adr r1, 80129c0 <__ieee754_pow+0x408>)
 80128a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80128a4:	f7ed fd10 	bl	80002c8 <__aeabi_dsub>
 80128a8:	4622      	mov	r2, r4
 80128aa:	462b      	mov	r3, r5
 80128ac:	f7ed fec4 	bl	8000638 <__aeabi_dmul>
 80128b0:	4602      	mov	r2, r0
 80128b2:	460b      	mov	r3, r1
 80128b4:	2000      	movs	r0, #0
 80128b6:	4948      	ldr	r1, [pc, #288]	@ (80129d8 <__ieee754_pow+0x420>)
 80128b8:	f7ed fd06 	bl	80002c8 <__aeabi_dsub>
 80128bc:	4622      	mov	r2, r4
 80128be:	4680      	mov	r8, r0
 80128c0:	4689      	mov	r9, r1
 80128c2:	462b      	mov	r3, r5
 80128c4:	4620      	mov	r0, r4
 80128c6:	4629      	mov	r1, r5
 80128c8:	f7ed feb6 	bl	8000638 <__aeabi_dmul>
 80128cc:	4602      	mov	r2, r0
 80128ce:	460b      	mov	r3, r1
 80128d0:	4640      	mov	r0, r8
 80128d2:	4649      	mov	r1, r9
 80128d4:	f7ed feb0 	bl	8000638 <__aeabi_dmul>
 80128d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80129c8 <__ieee754_pow+0x410>)
 80128da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128de:	f7ed feab 	bl	8000638 <__aeabi_dmul>
 80128e2:	4602      	mov	r2, r0
 80128e4:	460b      	mov	r3, r1
 80128e6:	4650      	mov	r0, sl
 80128e8:	4659      	mov	r1, fp
 80128ea:	f7ed fced 	bl	80002c8 <__aeabi_dsub>
 80128ee:	4602      	mov	r2, r0
 80128f0:	460b      	mov	r3, r1
 80128f2:	4680      	mov	r8, r0
 80128f4:	4689      	mov	r9, r1
 80128f6:	4630      	mov	r0, r6
 80128f8:	4639      	mov	r1, r7
 80128fa:	f7ed fce7 	bl	80002cc <__adddf3>
 80128fe:	2400      	movs	r4, #0
 8012900:	4632      	mov	r2, r6
 8012902:	463b      	mov	r3, r7
 8012904:	4620      	mov	r0, r4
 8012906:	460d      	mov	r5, r1
 8012908:	f7ed fcde 	bl	80002c8 <__aeabi_dsub>
 801290c:	4602      	mov	r2, r0
 801290e:	460b      	mov	r3, r1
 8012910:	4640      	mov	r0, r8
 8012912:	4649      	mov	r1, r9
 8012914:	f7ed fcd8 	bl	80002c8 <__aeabi_dsub>
 8012918:	e9dd 2300 	ldrd	r2, r3, [sp]
 801291c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012920:	2300      	movs	r3, #0
 8012922:	9304      	str	r3, [sp, #16]
 8012924:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012928:	4606      	mov	r6, r0
 801292a:	460f      	mov	r7, r1
 801292c:	465b      	mov	r3, fp
 801292e:	4652      	mov	r2, sl
 8012930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012934:	f7ed fcc8 	bl	80002c8 <__aeabi_dsub>
 8012938:	4622      	mov	r2, r4
 801293a:	462b      	mov	r3, r5
 801293c:	f7ed fe7c 	bl	8000638 <__aeabi_dmul>
 8012940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012944:	4680      	mov	r8, r0
 8012946:	4689      	mov	r9, r1
 8012948:	4630      	mov	r0, r6
 801294a:	4639      	mov	r1, r7
 801294c:	f7ed fe74 	bl	8000638 <__aeabi_dmul>
 8012950:	4602      	mov	r2, r0
 8012952:	460b      	mov	r3, r1
 8012954:	4640      	mov	r0, r8
 8012956:	4649      	mov	r1, r9
 8012958:	f7ed fcb8 	bl	80002cc <__adddf3>
 801295c:	465b      	mov	r3, fp
 801295e:	4606      	mov	r6, r0
 8012960:	460f      	mov	r7, r1
 8012962:	4652      	mov	r2, sl
 8012964:	4620      	mov	r0, r4
 8012966:	4629      	mov	r1, r5
 8012968:	f7ed fe66 	bl	8000638 <__aeabi_dmul>
 801296c:	460b      	mov	r3, r1
 801296e:	4602      	mov	r2, r0
 8012970:	4680      	mov	r8, r0
 8012972:	4689      	mov	r9, r1
 8012974:	4630      	mov	r0, r6
 8012976:	4639      	mov	r1, r7
 8012978:	f7ed fca8 	bl	80002cc <__adddf3>
 801297c:	4b17      	ldr	r3, [pc, #92]	@ (80129dc <__ieee754_pow+0x424>)
 801297e:	4299      	cmp	r1, r3
 8012980:	4604      	mov	r4, r0
 8012982:	460d      	mov	r5, r1
 8012984:	468b      	mov	fp, r1
 8012986:	f340 820b 	ble.w	8012da0 <__ieee754_pow+0x7e8>
 801298a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801298e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8012992:	4303      	orrs	r3, r0
 8012994:	f000 81ea 	beq.w	8012d6c <__ieee754_pow+0x7b4>
 8012998:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801299c:	2200      	movs	r2, #0
 801299e:	2300      	movs	r3, #0
 80129a0:	f7ee f8bc 	bl	8000b1c <__aeabi_dcmplt>
 80129a4:	3800      	subs	r0, #0
 80129a6:	bf18      	it	ne
 80129a8:	2001      	movne	r0, #1
 80129aa:	e713      	b.n	80127d4 <__ieee754_pow+0x21c>
 80129ac:	f3af 8000 	nop.w
 80129b0:	60000000 	.word	0x60000000
 80129b4:	3ff71547 	.word	0x3ff71547
 80129b8:	f85ddf44 	.word	0xf85ddf44
 80129bc:	3e54ae0b 	.word	0x3e54ae0b
 80129c0:	55555555 	.word	0x55555555
 80129c4:	3fd55555 	.word	0x3fd55555
 80129c8:	652b82fe 	.word	0x652b82fe
 80129cc:	3ff71547 	.word	0x3ff71547
 80129d0:	3ff00000 	.word	0x3ff00000
 80129d4:	3fd00000 	.word	0x3fd00000
 80129d8:	3fe00000 	.word	0x3fe00000
 80129dc:	408fffff 	.word	0x408fffff
 80129e0:	4bd5      	ldr	r3, [pc, #852]	@ (8012d38 <__ieee754_pow+0x780>)
 80129e2:	ea08 0303 	and.w	r3, r8, r3
 80129e6:	2200      	movs	r2, #0
 80129e8:	b92b      	cbnz	r3, 80129f6 <__ieee754_pow+0x43e>
 80129ea:	4bd4      	ldr	r3, [pc, #848]	@ (8012d3c <__ieee754_pow+0x784>)
 80129ec:	f7ed fe24 	bl	8000638 <__aeabi_dmul>
 80129f0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80129f4:	468b      	mov	fp, r1
 80129f6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80129fa:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80129fe:	4413      	add	r3, r2
 8012a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a02:	4bcf      	ldr	r3, [pc, #828]	@ (8012d40 <__ieee754_pow+0x788>)
 8012a04:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012a08:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8012a0c:	459b      	cmp	fp, r3
 8012a0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012a12:	dd08      	ble.n	8012a26 <__ieee754_pow+0x46e>
 8012a14:	4bcb      	ldr	r3, [pc, #812]	@ (8012d44 <__ieee754_pow+0x78c>)
 8012a16:	459b      	cmp	fp, r3
 8012a18:	f340 81a5 	ble.w	8012d66 <__ieee754_pow+0x7ae>
 8012a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a1e:	3301      	adds	r3, #1
 8012a20:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a22:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012a26:	f04f 0a00 	mov.w	sl, #0
 8012a2a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012a2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a30:	4bc5      	ldr	r3, [pc, #788]	@ (8012d48 <__ieee754_pow+0x790>)
 8012a32:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a36:	ed93 7b00 	vldr	d7, [r3]
 8012a3a:	4629      	mov	r1, r5
 8012a3c:	ec53 2b17 	vmov	r2, r3, d7
 8012a40:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012a48:	f7ed fc3e 	bl	80002c8 <__aeabi_dsub>
 8012a4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012a50:	4606      	mov	r6, r0
 8012a52:	460f      	mov	r7, r1
 8012a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a58:	f7ed fc38 	bl	80002cc <__adddf3>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	460b      	mov	r3, r1
 8012a60:	2000      	movs	r0, #0
 8012a62:	49ba      	ldr	r1, [pc, #744]	@ (8012d4c <__ieee754_pow+0x794>)
 8012a64:	f7ed ff12 	bl	800088c <__aeabi_ddiv>
 8012a68:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8012a6c:	4602      	mov	r2, r0
 8012a6e:	460b      	mov	r3, r1
 8012a70:	4630      	mov	r0, r6
 8012a72:	4639      	mov	r1, r7
 8012a74:	f7ed fde0 	bl	8000638 <__aeabi_dmul>
 8012a78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a7c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8012a80:	106d      	asrs	r5, r5, #1
 8012a82:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8012a86:	f04f 0b00 	mov.w	fp, #0
 8012a8a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8012a8e:	4661      	mov	r1, ip
 8012a90:	2200      	movs	r2, #0
 8012a92:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012a96:	4658      	mov	r0, fp
 8012a98:	46e1      	mov	r9, ip
 8012a9a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8012a9e:	4614      	mov	r4, r2
 8012aa0:	461d      	mov	r5, r3
 8012aa2:	f7ed fdc9 	bl	8000638 <__aeabi_dmul>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	460b      	mov	r3, r1
 8012aaa:	4630      	mov	r0, r6
 8012aac:	4639      	mov	r1, r7
 8012aae:	f7ed fc0b 	bl	80002c8 <__aeabi_dsub>
 8012ab2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012ab6:	4606      	mov	r6, r0
 8012ab8:	460f      	mov	r7, r1
 8012aba:	4620      	mov	r0, r4
 8012abc:	4629      	mov	r1, r5
 8012abe:	f7ed fc03 	bl	80002c8 <__aeabi_dsub>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012aca:	f7ed fbfd 	bl	80002c8 <__aeabi_dsub>
 8012ace:	465a      	mov	r2, fp
 8012ad0:	464b      	mov	r3, r9
 8012ad2:	f7ed fdb1 	bl	8000638 <__aeabi_dmul>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	460b      	mov	r3, r1
 8012ada:	4630      	mov	r0, r6
 8012adc:	4639      	mov	r1, r7
 8012ade:	f7ed fbf3 	bl	80002c8 <__aeabi_dsub>
 8012ae2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012ae6:	f7ed fda7 	bl	8000638 <__aeabi_dmul>
 8012aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012aee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012af2:	4610      	mov	r0, r2
 8012af4:	4619      	mov	r1, r3
 8012af6:	f7ed fd9f 	bl	8000638 <__aeabi_dmul>
 8012afa:	a37d      	add	r3, pc, #500	@ (adr r3, 8012cf0 <__ieee754_pow+0x738>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	4604      	mov	r4, r0
 8012b02:	460d      	mov	r5, r1
 8012b04:	f7ed fd98 	bl	8000638 <__aeabi_dmul>
 8012b08:	a37b      	add	r3, pc, #492	@ (adr r3, 8012cf8 <__ieee754_pow+0x740>)
 8012b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b0e:	f7ed fbdd 	bl	80002cc <__adddf3>
 8012b12:	4622      	mov	r2, r4
 8012b14:	462b      	mov	r3, r5
 8012b16:	f7ed fd8f 	bl	8000638 <__aeabi_dmul>
 8012b1a:	a379      	add	r3, pc, #484	@ (adr r3, 8012d00 <__ieee754_pow+0x748>)
 8012b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b20:	f7ed fbd4 	bl	80002cc <__adddf3>
 8012b24:	4622      	mov	r2, r4
 8012b26:	462b      	mov	r3, r5
 8012b28:	f7ed fd86 	bl	8000638 <__aeabi_dmul>
 8012b2c:	a376      	add	r3, pc, #472	@ (adr r3, 8012d08 <__ieee754_pow+0x750>)
 8012b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b32:	f7ed fbcb 	bl	80002cc <__adddf3>
 8012b36:	4622      	mov	r2, r4
 8012b38:	462b      	mov	r3, r5
 8012b3a:	f7ed fd7d 	bl	8000638 <__aeabi_dmul>
 8012b3e:	a374      	add	r3, pc, #464	@ (adr r3, 8012d10 <__ieee754_pow+0x758>)
 8012b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b44:	f7ed fbc2 	bl	80002cc <__adddf3>
 8012b48:	4622      	mov	r2, r4
 8012b4a:	462b      	mov	r3, r5
 8012b4c:	f7ed fd74 	bl	8000638 <__aeabi_dmul>
 8012b50:	a371      	add	r3, pc, #452	@ (adr r3, 8012d18 <__ieee754_pow+0x760>)
 8012b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b56:	f7ed fbb9 	bl	80002cc <__adddf3>
 8012b5a:	4622      	mov	r2, r4
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	460f      	mov	r7, r1
 8012b60:	462b      	mov	r3, r5
 8012b62:	4620      	mov	r0, r4
 8012b64:	4629      	mov	r1, r5
 8012b66:	f7ed fd67 	bl	8000638 <__aeabi_dmul>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	4630      	mov	r0, r6
 8012b70:	4639      	mov	r1, r7
 8012b72:	f7ed fd61 	bl	8000638 <__aeabi_dmul>
 8012b76:	465a      	mov	r2, fp
 8012b78:	4604      	mov	r4, r0
 8012b7a:	460d      	mov	r5, r1
 8012b7c:	464b      	mov	r3, r9
 8012b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b82:	f7ed fba3 	bl	80002cc <__adddf3>
 8012b86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b8a:	f7ed fd55 	bl	8000638 <__aeabi_dmul>
 8012b8e:	4622      	mov	r2, r4
 8012b90:	462b      	mov	r3, r5
 8012b92:	f7ed fb9b 	bl	80002cc <__adddf3>
 8012b96:	465a      	mov	r2, fp
 8012b98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012b9c:	464b      	mov	r3, r9
 8012b9e:	4658      	mov	r0, fp
 8012ba0:	4649      	mov	r1, r9
 8012ba2:	f7ed fd49 	bl	8000638 <__aeabi_dmul>
 8012ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8012d50 <__ieee754_pow+0x798>)
 8012ba8:	2200      	movs	r2, #0
 8012baa:	4606      	mov	r6, r0
 8012bac:	460f      	mov	r7, r1
 8012bae:	f7ed fb8d 	bl	80002cc <__adddf3>
 8012bb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012bb6:	f7ed fb89 	bl	80002cc <__adddf3>
 8012bba:	46d8      	mov	r8, fp
 8012bbc:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012bc0:	460d      	mov	r5, r1
 8012bc2:	465a      	mov	r2, fp
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	4640      	mov	r0, r8
 8012bc8:	4649      	mov	r1, r9
 8012bca:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012bce:	f7ed fd33 	bl	8000638 <__aeabi_dmul>
 8012bd2:	465c      	mov	r4, fp
 8012bd4:	4680      	mov	r8, r0
 8012bd6:	4689      	mov	r9, r1
 8012bd8:	4b5d      	ldr	r3, [pc, #372]	@ (8012d50 <__ieee754_pow+0x798>)
 8012bda:	2200      	movs	r2, #0
 8012bdc:	4620      	mov	r0, r4
 8012bde:	4629      	mov	r1, r5
 8012be0:	f7ed fb72 	bl	80002c8 <__aeabi_dsub>
 8012be4:	4632      	mov	r2, r6
 8012be6:	463b      	mov	r3, r7
 8012be8:	f7ed fb6e 	bl	80002c8 <__aeabi_dsub>
 8012bec:	4602      	mov	r2, r0
 8012bee:	460b      	mov	r3, r1
 8012bf0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012bf4:	f7ed fb68 	bl	80002c8 <__aeabi_dsub>
 8012bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bfc:	f7ed fd1c 	bl	8000638 <__aeabi_dmul>
 8012c00:	4622      	mov	r2, r4
 8012c02:	4606      	mov	r6, r0
 8012c04:	460f      	mov	r7, r1
 8012c06:	462b      	mov	r3, r5
 8012c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c0c:	f7ed fd14 	bl	8000638 <__aeabi_dmul>
 8012c10:	4602      	mov	r2, r0
 8012c12:	460b      	mov	r3, r1
 8012c14:	4630      	mov	r0, r6
 8012c16:	4639      	mov	r1, r7
 8012c18:	f7ed fb58 	bl	80002cc <__adddf3>
 8012c1c:	4606      	mov	r6, r0
 8012c1e:	460f      	mov	r7, r1
 8012c20:	4602      	mov	r2, r0
 8012c22:	460b      	mov	r3, r1
 8012c24:	4640      	mov	r0, r8
 8012c26:	4649      	mov	r1, r9
 8012c28:	f7ed fb50 	bl	80002cc <__adddf3>
 8012c2c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012c30:	a33b      	add	r3, pc, #236	@ (adr r3, 8012d20 <__ieee754_pow+0x768>)
 8012c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c36:	4658      	mov	r0, fp
 8012c38:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012c3c:	460d      	mov	r5, r1
 8012c3e:	f7ed fcfb 	bl	8000638 <__aeabi_dmul>
 8012c42:	465c      	mov	r4, fp
 8012c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c48:	4642      	mov	r2, r8
 8012c4a:	464b      	mov	r3, r9
 8012c4c:	4620      	mov	r0, r4
 8012c4e:	4629      	mov	r1, r5
 8012c50:	f7ed fb3a 	bl	80002c8 <__aeabi_dsub>
 8012c54:	4602      	mov	r2, r0
 8012c56:	460b      	mov	r3, r1
 8012c58:	4630      	mov	r0, r6
 8012c5a:	4639      	mov	r1, r7
 8012c5c:	f7ed fb34 	bl	80002c8 <__aeabi_dsub>
 8012c60:	a331      	add	r3, pc, #196	@ (adr r3, 8012d28 <__ieee754_pow+0x770>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f7ed fce7 	bl	8000638 <__aeabi_dmul>
 8012c6a:	a331      	add	r3, pc, #196	@ (adr r3, 8012d30 <__ieee754_pow+0x778>)
 8012c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c70:	4606      	mov	r6, r0
 8012c72:	460f      	mov	r7, r1
 8012c74:	4620      	mov	r0, r4
 8012c76:	4629      	mov	r1, r5
 8012c78:	f7ed fcde 	bl	8000638 <__aeabi_dmul>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	460b      	mov	r3, r1
 8012c80:	4630      	mov	r0, r6
 8012c82:	4639      	mov	r1, r7
 8012c84:	f7ed fb22 	bl	80002cc <__adddf3>
 8012c88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012c8a:	4b32      	ldr	r3, [pc, #200]	@ (8012d54 <__ieee754_pow+0x79c>)
 8012c8c:	4413      	add	r3, r2
 8012c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c92:	f7ed fb1b 	bl	80002cc <__adddf3>
 8012c96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c9a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012c9c:	f7ed fc62 	bl	8000564 <__aeabi_i2d>
 8012ca0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8012d58 <__ieee754_pow+0x7a0>)
 8012ca4:	4413      	add	r3, r2
 8012ca6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012caa:	4606      	mov	r6, r0
 8012cac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cb0:	460f      	mov	r7, r1
 8012cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012cb6:	f7ed fb09 	bl	80002cc <__adddf3>
 8012cba:	4642      	mov	r2, r8
 8012cbc:	464b      	mov	r3, r9
 8012cbe:	f7ed fb05 	bl	80002cc <__adddf3>
 8012cc2:	4632      	mov	r2, r6
 8012cc4:	463b      	mov	r3, r7
 8012cc6:	f7ed fb01 	bl	80002cc <__adddf3>
 8012cca:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012cce:	4632      	mov	r2, r6
 8012cd0:	463b      	mov	r3, r7
 8012cd2:	4658      	mov	r0, fp
 8012cd4:	460d      	mov	r5, r1
 8012cd6:	f7ed faf7 	bl	80002c8 <__aeabi_dsub>
 8012cda:	4642      	mov	r2, r8
 8012cdc:	464b      	mov	r3, r9
 8012cde:	f7ed faf3 	bl	80002c8 <__aeabi_dsub>
 8012ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ce6:	f7ed faef 	bl	80002c8 <__aeabi_dsub>
 8012cea:	465c      	mov	r4, fp
 8012cec:	e036      	b.n	8012d5c <__ieee754_pow+0x7a4>
 8012cee:	bf00      	nop
 8012cf0:	4a454eef 	.word	0x4a454eef
 8012cf4:	3fca7e28 	.word	0x3fca7e28
 8012cf8:	93c9db65 	.word	0x93c9db65
 8012cfc:	3fcd864a 	.word	0x3fcd864a
 8012d00:	a91d4101 	.word	0xa91d4101
 8012d04:	3fd17460 	.word	0x3fd17460
 8012d08:	518f264d 	.word	0x518f264d
 8012d0c:	3fd55555 	.word	0x3fd55555
 8012d10:	db6fabff 	.word	0xdb6fabff
 8012d14:	3fdb6db6 	.word	0x3fdb6db6
 8012d18:	33333303 	.word	0x33333303
 8012d1c:	3fe33333 	.word	0x3fe33333
 8012d20:	e0000000 	.word	0xe0000000
 8012d24:	3feec709 	.word	0x3feec709
 8012d28:	dc3a03fd 	.word	0xdc3a03fd
 8012d2c:	3feec709 	.word	0x3feec709
 8012d30:	145b01f5 	.word	0x145b01f5
 8012d34:	be3e2fe0 	.word	0xbe3e2fe0
 8012d38:	7ff00000 	.word	0x7ff00000
 8012d3c:	43400000 	.word	0x43400000
 8012d40:	0003988e 	.word	0x0003988e
 8012d44:	000bb679 	.word	0x000bb679
 8012d48:	08013b88 	.word	0x08013b88
 8012d4c:	3ff00000 	.word	0x3ff00000
 8012d50:	40080000 	.word	0x40080000
 8012d54:	08013b68 	.word	0x08013b68
 8012d58:	08013b78 	.word	0x08013b78
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	460b      	mov	r3, r1
 8012d60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d64:	e5d6      	b.n	8012914 <__ieee754_pow+0x35c>
 8012d66:	f04f 0a01 	mov.w	sl, #1
 8012d6a:	e65e      	b.n	8012a2a <__ieee754_pow+0x472>
 8012d6c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8013044 <__ieee754_pow+0xa8c>)
 8012d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d72:	4630      	mov	r0, r6
 8012d74:	4639      	mov	r1, r7
 8012d76:	f7ed faa9 	bl	80002cc <__adddf3>
 8012d7a:	4642      	mov	r2, r8
 8012d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8012d80:	464b      	mov	r3, r9
 8012d82:	4620      	mov	r0, r4
 8012d84:	4629      	mov	r1, r5
 8012d86:	f7ed fa9f 	bl	80002c8 <__aeabi_dsub>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	460b      	mov	r3, r1
 8012d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d92:	f7ed fee1 	bl	8000b58 <__aeabi_dcmpgt>
 8012d96:	2800      	cmp	r0, #0
 8012d98:	f47f adfe 	bne.w	8012998 <__ieee754_pow+0x3e0>
 8012d9c:	4ba2      	ldr	r3, [pc, #648]	@ (8013028 <__ieee754_pow+0xa70>)
 8012d9e:	e022      	b.n	8012de6 <__ieee754_pow+0x82e>
 8012da0:	4ca2      	ldr	r4, [pc, #648]	@ (801302c <__ieee754_pow+0xa74>)
 8012da2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012da6:	42a3      	cmp	r3, r4
 8012da8:	d919      	bls.n	8012dde <__ieee754_pow+0x826>
 8012daa:	4ba1      	ldr	r3, [pc, #644]	@ (8013030 <__ieee754_pow+0xa78>)
 8012dac:	440b      	add	r3, r1
 8012dae:	4303      	orrs	r3, r0
 8012db0:	d009      	beq.n	8012dc6 <__ieee754_pow+0x80e>
 8012db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012db6:	2200      	movs	r2, #0
 8012db8:	2300      	movs	r3, #0
 8012dba:	f7ed feaf 	bl	8000b1c <__aeabi_dcmplt>
 8012dbe:	3800      	subs	r0, #0
 8012dc0:	bf18      	it	ne
 8012dc2:	2001      	movne	r0, #1
 8012dc4:	e512      	b.n	80127ec <__ieee754_pow+0x234>
 8012dc6:	4642      	mov	r2, r8
 8012dc8:	464b      	mov	r3, r9
 8012dca:	f7ed fa7d 	bl	80002c8 <__aeabi_dsub>
 8012dce:	4632      	mov	r2, r6
 8012dd0:	463b      	mov	r3, r7
 8012dd2:	f7ed feb7 	bl	8000b44 <__aeabi_dcmpge>
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d1eb      	bne.n	8012db2 <__ieee754_pow+0x7fa>
 8012dda:	4b96      	ldr	r3, [pc, #600]	@ (8013034 <__ieee754_pow+0xa7c>)
 8012ddc:	e003      	b.n	8012de6 <__ieee754_pow+0x82e>
 8012dde:	4a96      	ldr	r2, [pc, #600]	@ (8013038 <__ieee754_pow+0xa80>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	f240 80e7 	bls.w	8012fb4 <__ieee754_pow+0x9fc>
 8012de6:	151b      	asrs	r3, r3, #20
 8012de8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8012dec:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8012df0:	fa4a fa03 	asr.w	sl, sl, r3
 8012df4:	44da      	add	sl, fp
 8012df6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012dfa:	4890      	ldr	r0, [pc, #576]	@ (801303c <__ieee754_pow+0xa84>)
 8012dfc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012e00:	4108      	asrs	r0, r1
 8012e02:	ea00 030a 	and.w	r3, r0, sl
 8012e06:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012e0a:	f1c1 0114 	rsb	r1, r1, #20
 8012e0e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012e12:	fa4a fa01 	asr.w	sl, sl, r1
 8012e16:	f1bb 0f00 	cmp.w	fp, #0
 8012e1a:	4640      	mov	r0, r8
 8012e1c:	4649      	mov	r1, r9
 8012e1e:	f04f 0200 	mov.w	r2, #0
 8012e22:	bfb8      	it	lt
 8012e24:	f1ca 0a00 	rsblt	sl, sl, #0
 8012e28:	f7ed fa4e 	bl	80002c8 <__aeabi_dsub>
 8012e2c:	4680      	mov	r8, r0
 8012e2e:	4689      	mov	r9, r1
 8012e30:	4632      	mov	r2, r6
 8012e32:	463b      	mov	r3, r7
 8012e34:	4640      	mov	r0, r8
 8012e36:	4649      	mov	r1, r9
 8012e38:	f7ed fa48 	bl	80002cc <__adddf3>
 8012e3c:	2400      	movs	r4, #0
 8012e3e:	a36a      	add	r3, pc, #424	@ (adr r3, 8012fe8 <__ieee754_pow+0xa30>)
 8012e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e44:	4620      	mov	r0, r4
 8012e46:	460d      	mov	r5, r1
 8012e48:	f7ed fbf6 	bl	8000638 <__aeabi_dmul>
 8012e4c:	4642      	mov	r2, r8
 8012e4e:	e9cd 0100 	strd	r0, r1, [sp]
 8012e52:	464b      	mov	r3, r9
 8012e54:	4620      	mov	r0, r4
 8012e56:	4629      	mov	r1, r5
 8012e58:	f7ed fa36 	bl	80002c8 <__aeabi_dsub>
 8012e5c:	4602      	mov	r2, r0
 8012e5e:	460b      	mov	r3, r1
 8012e60:	4630      	mov	r0, r6
 8012e62:	4639      	mov	r1, r7
 8012e64:	f7ed fa30 	bl	80002c8 <__aeabi_dsub>
 8012e68:	a361      	add	r3, pc, #388	@ (adr r3, 8012ff0 <__ieee754_pow+0xa38>)
 8012e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e6e:	f7ed fbe3 	bl	8000638 <__aeabi_dmul>
 8012e72:	a361      	add	r3, pc, #388	@ (adr r3, 8012ff8 <__ieee754_pow+0xa40>)
 8012e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e78:	4680      	mov	r8, r0
 8012e7a:	4689      	mov	r9, r1
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fbda 	bl	8000638 <__aeabi_dmul>
 8012e84:	4602      	mov	r2, r0
 8012e86:	460b      	mov	r3, r1
 8012e88:	4640      	mov	r0, r8
 8012e8a:	4649      	mov	r1, r9
 8012e8c:	f7ed fa1e 	bl	80002cc <__adddf3>
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	4602      	mov	r2, r0
 8012e96:	460b      	mov	r3, r1
 8012e98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e9c:	f7ed fa16 	bl	80002cc <__adddf3>
 8012ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ea4:	4680      	mov	r8, r0
 8012ea6:	4689      	mov	r9, r1
 8012ea8:	f7ed fa0e 	bl	80002c8 <__aeabi_dsub>
 8012eac:	4602      	mov	r2, r0
 8012eae:	460b      	mov	r3, r1
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	f7ed fa08 	bl	80002c8 <__aeabi_dsub>
 8012eb8:	4642      	mov	r2, r8
 8012eba:	4606      	mov	r6, r0
 8012ebc:	460f      	mov	r7, r1
 8012ebe:	464b      	mov	r3, r9
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	4649      	mov	r1, r9
 8012ec4:	f7ed fbb8 	bl	8000638 <__aeabi_dmul>
 8012ec8:	a34d      	add	r3, pc, #308	@ (adr r3, 8013000 <__ieee754_pow+0xa48>)
 8012eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ece:	4604      	mov	r4, r0
 8012ed0:	460d      	mov	r5, r1
 8012ed2:	f7ed fbb1 	bl	8000638 <__aeabi_dmul>
 8012ed6:	a34c      	add	r3, pc, #304	@ (adr r3, 8013008 <__ieee754_pow+0xa50>)
 8012ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012edc:	f7ed f9f4 	bl	80002c8 <__aeabi_dsub>
 8012ee0:	4622      	mov	r2, r4
 8012ee2:	462b      	mov	r3, r5
 8012ee4:	f7ed fba8 	bl	8000638 <__aeabi_dmul>
 8012ee8:	a349      	add	r3, pc, #292	@ (adr r3, 8013010 <__ieee754_pow+0xa58>)
 8012eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eee:	f7ed f9ed 	bl	80002cc <__adddf3>
 8012ef2:	4622      	mov	r2, r4
 8012ef4:	462b      	mov	r3, r5
 8012ef6:	f7ed fb9f 	bl	8000638 <__aeabi_dmul>
 8012efa:	a347      	add	r3, pc, #284	@ (adr r3, 8013018 <__ieee754_pow+0xa60>)
 8012efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f00:	f7ed f9e2 	bl	80002c8 <__aeabi_dsub>
 8012f04:	4622      	mov	r2, r4
 8012f06:	462b      	mov	r3, r5
 8012f08:	f7ed fb96 	bl	8000638 <__aeabi_dmul>
 8012f0c:	a344      	add	r3, pc, #272	@ (adr r3, 8013020 <__ieee754_pow+0xa68>)
 8012f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f12:	f7ed f9db 	bl	80002cc <__adddf3>
 8012f16:	4622      	mov	r2, r4
 8012f18:	462b      	mov	r3, r5
 8012f1a:	f7ed fb8d 	bl	8000638 <__aeabi_dmul>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	460b      	mov	r3, r1
 8012f22:	4640      	mov	r0, r8
 8012f24:	4649      	mov	r1, r9
 8012f26:	f7ed f9cf 	bl	80002c8 <__aeabi_dsub>
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	460d      	mov	r5, r1
 8012f2e:	4602      	mov	r2, r0
 8012f30:	460b      	mov	r3, r1
 8012f32:	4640      	mov	r0, r8
 8012f34:	4649      	mov	r1, r9
 8012f36:	f7ed fb7f 	bl	8000638 <__aeabi_dmul>
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	e9cd 0100 	strd	r0, r1, [sp]
 8012f40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012f44:	4620      	mov	r0, r4
 8012f46:	4629      	mov	r1, r5
 8012f48:	f7ed f9be 	bl	80002c8 <__aeabi_dsub>
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	460b      	mov	r3, r1
 8012f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f54:	f7ed fc9a 	bl	800088c <__aeabi_ddiv>
 8012f58:	4632      	mov	r2, r6
 8012f5a:	4604      	mov	r4, r0
 8012f5c:	460d      	mov	r5, r1
 8012f5e:	463b      	mov	r3, r7
 8012f60:	4640      	mov	r0, r8
 8012f62:	4649      	mov	r1, r9
 8012f64:	f7ed fb68 	bl	8000638 <__aeabi_dmul>
 8012f68:	4632      	mov	r2, r6
 8012f6a:	463b      	mov	r3, r7
 8012f6c:	f7ed f9ae 	bl	80002cc <__adddf3>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4620      	mov	r0, r4
 8012f76:	4629      	mov	r1, r5
 8012f78:	f7ed f9a6 	bl	80002c8 <__aeabi_dsub>
 8012f7c:	4642      	mov	r2, r8
 8012f7e:	464b      	mov	r3, r9
 8012f80:	f7ed f9a2 	bl	80002c8 <__aeabi_dsub>
 8012f84:	460b      	mov	r3, r1
 8012f86:	4602      	mov	r2, r0
 8012f88:	492d      	ldr	r1, [pc, #180]	@ (8013040 <__ieee754_pow+0xa88>)
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	f7ed f99c 	bl	80002c8 <__aeabi_dsub>
 8012f90:	ec41 0b10 	vmov	d0, r0, r1
 8012f94:	ee10 3a90 	vmov	r3, s1
 8012f98:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012f9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fa0:	da0b      	bge.n	8012fba <__ieee754_pow+0xa02>
 8012fa2:	4650      	mov	r0, sl
 8012fa4:	f000 f9ec 	bl	8013380 <scalbn>
 8012fa8:	ec51 0b10 	vmov	r0, r1, d0
 8012fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012fb0:	f7ff bb6d 	b.w	801268e <__ieee754_pow+0xd6>
 8012fb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012fb8:	e73a      	b.n	8012e30 <__ieee754_pow+0x878>
 8012fba:	ec51 0b10 	vmov	r0, r1, d0
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	e7f4      	b.n	8012fac <__ieee754_pow+0x9f4>
 8012fc2:	491f      	ldr	r1, [pc, #124]	@ (8013040 <__ieee754_pow+0xa88>)
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	f7ff bb14 	b.w	80125f2 <__ieee754_pow+0x3a>
 8012fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fce:	f7ff bb10 	b.w	80125f2 <__ieee754_pow+0x3a>
 8012fd2:	4630      	mov	r0, r6
 8012fd4:	4639      	mov	r1, r7
 8012fd6:	f7ff bb0c 	b.w	80125f2 <__ieee754_pow+0x3a>
 8012fda:	460c      	mov	r4, r1
 8012fdc:	f7ff bb69 	b.w	80126b2 <__ieee754_pow+0xfa>
 8012fe0:	2400      	movs	r4, #0
 8012fe2:	f7ff bb4b 	b.w	801267c <__ieee754_pow+0xc4>
 8012fe6:	bf00      	nop
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	3fe62e43 	.word	0x3fe62e43
 8012ff0:	fefa39ef 	.word	0xfefa39ef
 8012ff4:	3fe62e42 	.word	0x3fe62e42
 8012ff8:	0ca86c39 	.word	0x0ca86c39
 8012ffc:	be205c61 	.word	0xbe205c61
 8013000:	72bea4d0 	.word	0x72bea4d0
 8013004:	3e663769 	.word	0x3e663769
 8013008:	c5d26bf1 	.word	0xc5d26bf1
 801300c:	3ebbbd41 	.word	0x3ebbbd41
 8013010:	af25de2c 	.word	0xaf25de2c
 8013014:	3f11566a 	.word	0x3f11566a
 8013018:	16bebd93 	.word	0x16bebd93
 801301c:	3f66c16c 	.word	0x3f66c16c
 8013020:	5555553e 	.word	0x5555553e
 8013024:	3fc55555 	.word	0x3fc55555
 8013028:	40900000 	.word	0x40900000
 801302c:	4090cbff 	.word	0x4090cbff
 8013030:	3f6f3400 	.word	0x3f6f3400
 8013034:	4090cc00 	.word	0x4090cc00
 8013038:	3fe00000 	.word	0x3fe00000
 801303c:	fff00000 	.word	0xfff00000
 8013040:	3ff00000 	.word	0x3ff00000
 8013044:	652b82fe 	.word	0x652b82fe
 8013048:	3c971547 	.word	0x3c971547
 801304c:	00000000 	.word	0x00000000

08013050 <atan>:
 8013050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013054:	ec55 4b10 	vmov	r4, r5, d0
 8013058:	4bbf      	ldr	r3, [pc, #764]	@ (8013358 <atan+0x308>)
 801305a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801305e:	429e      	cmp	r6, r3
 8013060:	46ab      	mov	fp, r5
 8013062:	d918      	bls.n	8013096 <atan+0x46>
 8013064:	4bbd      	ldr	r3, [pc, #756]	@ (801335c <atan+0x30c>)
 8013066:	429e      	cmp	r6, r3
 8013068:	d801      	bhi.n	801306e <atan+0x1e>
 801306a:	d109      	bne.n	8013080 <atan+0x30>
 801306c:	b144      	cbz	r4, 8013080 <atan+0x30>
 801306e:	4622      	mov	r2, r4
 8013070:	462b      	mov	r3, r5
 8013072:	4620      	mov	r0, r4
 8013074:	4629      	mov	r1, r5
 8013076:	f7ed f929 	bl	80002cc <__adddf3>
 801307a:	4604      	mov	r4, r0
 801307c:	460d      	mov	r5, r1
 801307e:	e006      	b.n	801308e <atan+0x3e>
 8013080:	f1bb 0f00 	cmp.w	fp, #0
 8013084:	f340 812b 	ble.w	80132de <atan+0x28e>
 8013088:	a597      	add	r5, pc, #604	@ (adr r5, 80132e8 <atan+0x298>)
 801308a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801308e:	ec45 4b10 	vmov	d0, r4, r5
 8013092:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013096:	4bb2      	ldr	r3, [pc, #712]	@ (8013360 <atan+0x310>)
 8013098:	429e      	cmp	r6, r3
 801309a:	d813      	bhi.n	80130c4 <atan+0x74>
 801309c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80130a0:	429e      	cmp	r6, r3
 80130a2:	d80c      	bhi.n	80130be <atan+0x6e>
 80130a4:	a392      	add	r3, pc, #584	@ (adr r3, 80132f0 <atan+0x2a0>)
 80130a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130aa:	4620      	mov	r0, r4
 80130ac:	4629      	mov	r1, r5
 80130ae:	f7ed f90d 	bl	80002cc <__adddf3>
 80130b2:	4bac      	ldr	r3, [pc, #688]	@ (8013364 <atan+0x314>)
 80130b4:	2200      	movs	r2, #0
 80130b6:	f7ed fd4f 	bl	8000b58 <__aeabi_dcmpgt>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d1e7      	bne.n	801308e <atan+0x3e>
 80130be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80130c2:	e029      	b.n	8013118 <atan+0xc8>
 80130c4:	f7fe fc66 	bl	8011994 <fabs>
 80130c8:	4ba7      	ldr	r3, [pc, #668]	@ (8013368 <atan+0x318>)
 80130ca:	429e      	cmp	r6, r3
 80130cc:	ec55 4b10 	vmov	r4, r5, d0
 80130d0:	f200 80bc 	bhi.w	801324c <atan+0x1fc>
 80130d4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80130d8:	429e      	cmp	r6, r3
 80130da:	f200 809e 	bhi.w	801321a <atan+0x1ca>
 80130de:	4622      	mov	r2, r4
 80130e0:	462b      	mov	r3, r5
 80130e2:	4620      	mov	r0, r4
 80130e4:	4629      	mov	r1, r5
 80130e6:	f7ed f8f1 	bl	80002cc <__adddf3>
 80130ea:	4b9e      	ldr	r3, [pc, #632]	@ (8013364 <atan+0x314>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	f7ed f8eb 	bl	80002c8 <__aeabi_dsub>
 80130f2:	2200      	movs	r2, #0
 80130f4:	4606      	mov	r6, r0
 80130f6:	460f      	mov	r7, r1
 80130f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80130fc:	4620      	mov	r0, r4
 80130fe:	4629      	mov	r1, r5
 8013100:	f7ed f8e4 	bl	80002cc <__adddf3>
 8013104:	4602      	mov	r2, r0
 8013106:	460b      	mov	r3, r1
 8013108:	4630      	mov	r0, r6
 801310a:	4639      	mov	r1, r7
 801310c:	f7ed fbbe 	bl	800088c <__aeabi_ddiv>
 8013110:	f04f 0a00 	mov.w	sl, #0
 8013114:	4604      	mov	r4, r0
 8013116:	460d      	mov	r5, r1
 8013118:	4622      	mov	r2, r4
 801311a:	462b      	mov	r3, r5
 801311c:	4620      	mov	r0, r4
 801311e:	4629      	mov	r1, r5
 8013120:	f7ed fa8a 	bl	8000638 <__aeabi_dmul>
 8013124:	4602      	mov	r2, r0
 8013126:	460b      	mov	r3, r1
 8013128:	4680      	mov	r8, r0
 801312a:	4689      	mov	r9, r1
 801312c:	f7ed fa84 	bl	8000638 <__aeabi_dmul>
 8013130:	a371      	add	r3, pc, #452	@ (adr r3, 80132f8 <atan+0x2a8>)
 8013132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013136:	4606      	mov	r6, r0
 8013138:	460f      	mov	r7, r1
 801313a:	f7ed fa7d 	bl	8000638 <__aeabi_dmul>
 801313e:	a370      	add	r3, pc, #448	@ (adr r3, 8013300 <atan+0x2b0>)
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	f7ed f8c2 	bl	80002cc <__adddf3>
 8013148:	4632      	mov	r2, r6
 801314a:	463b      	mov	r3, r7
 801314c:	f7ed fa74 	bl	8000638 <__aeabi_dmul>
 8013150:	a36d      	add	r3, pc, #436	@ (adr r3, 8013308 <atan+0x2b8>)
 8013152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013156:	f7ed f8b9 	bl	80002cc <__adddf3>
 801315a:	4632      	mov	r2, r6
 801315c:	463b      	mov	r3, r7
 801315e:	f7ed fa6b 	bl	8000638 <__aeabi_dmul>
 8013162:	a36b      	add	r3, pc, #428	@ (adr r3, 8013310 <atan+0x2c0>)
 8013164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013168:	f7ed f8b0 	bl	80002cc <__adddf3>
 801316c:	4632      	mov	r2, r6
 801316e:	463b      	mov	r3, r7
 8013170:	f7ed fa62 	bl	8000638 <__aeabi_dmul>
 8013174:	a368      	add	r3, pc, #416	@ (adr r3, 8013318 <atan+0x2c8>)
 8013176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317a:	f7ed f8a7 	bl	80002cc <__adddf3>
 801317e:	4632      	mov	r2, r6
 8013180:	463b      	mov	r3, r7
 8013182:	f7ed fa59 	bl	8000638 <__aeabi_dmul>
 8013186:	a366      	add	r3, pc, #408	@ (adr r3, 8013320 <atan+0x2d0>)
 8013188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318c:	f7ed f89e 	bl	80002cc <__adddf3>
 8013190:	4642      	mov	r2, r8
 8013192:	464b      	mov	r3, r9
 8013194:	f7ed fa50 	bl	8000638 <__aeabi_dmul>
 8013198:	a363      	add	r3, pc, #396	@ (adr r3, 8013328 <atan+0x2d8>)
 801319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319e:	4680      	mov	r8, r0
 80131a0:	4689      	mov	r9, r1
 80131a2:	4630      	mov	r0, r6
 80131a4:	4639      	mov	r1, r7
 80131a6:	f7ed fa47 	bl	8000638 <__aeabi_dmul>
 80131aa:	a361      	add	r3, pc, #388	@ (adr r3, 8013330 <atan+0x2e0>)
 80131ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b0:	f7ed f88a 	bl	80002c8 <__aeabi_dsub>
 80131b4:	4632      	mov	r2, r6
 80131b6:	463b      	mov	r3, r7
 80131b8:	f7ed fa3e 	bl	8000638 <__aeabi_dmul>
 80131bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8013338 <atan+0x2e8>)
 80131be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c2:	f7ed f881 	bl	80002c8 <__aeabi_dsub>
 80131c6:	4632      	mov	r2, r6
 80131c8:	463b      	mov	r3, r7
 80131ca:	f7ed fa35 	bl	8000638 <__aeabi_dmul>
 80131ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8013340 <atan+0x2f0>)
 80131d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d4:	f7ed f878 	bl	80002c8 <__aeabi_dsub>
 80131d8:	4632      	mov	r2, r6
 80131da:	463b      	mov	r3, r7
 80131dc:	f7ed fa2c 	bl	8000638 <__aeabi_dmul>
 80131e0:	a359      	add	r3, pc, #356	@ (adr r3, 8013348 <atan+0x2f8>)
 80131e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e6:	f7ed f86f 	bl	80002c8 <__aeabi_dsub>
 80131ea:	4632      	mov	r2, r6
 80131ec:	463b      	mov	r3, r7
 80131ee:	f7ed fa23 	bl	8000638 <__aeabi_dmul>
 80131f2:	4602      	mov	r2, r0
 80131f4:	460b      	mov	r3, r1
 80131f6:	4640      	mov	r0, r8
 80131f8:	4649      	mov	r1, r9
 80131fa:	f7ed f867 	bl	80002cc <__adddf3>
 80131fe:	4622      	mov	r2, r4
 8013200:	462b      	mov	r3, r5
 8013202:	f7ed fa19 	bl	8000638 <__aeabi_dmul>
 8013206:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 801320a:	4602      	mov	r2, r0
 801320c:	460b      	mov	r3, r1
 801320e:	d148      	bne.n	80132a2 <atan+0x252>
 8013210:	4620      	mov	r0, r4
 8013212:	4629      	mov	r1, r5
 8013214:	f7ed f858 	bl	80002c8 <__aeabi_dsub>
 8013218:	e72f      	b.n	801307a <atan+0x2a>
 801321a:	4b52      	ldr	r3, [pc, #328]	@ (8013364 <atan+0x314>)
 801321c:	2200      	movs	r2, #0
 801321e:	4620      	mov	r0, r4
 8013220:	4629      	mov	r1, r5
 8013222:	f7ed f851 	bl	80002c8 <__aeabi_dsub>
 8013226:	4b4f      	ldr	r3, [pc, #316]	@ (8013364 <atan+0x314>)
 8013228:	4606      	mov	r6, r0
 801322a:	460f      	mov	r7, r1
 801322c:	2200      	movs	r2, #0
 801322e:	4620      	mov	r0, r4
 8013230:	4629      	mov	r1, r5
 8013232:	f7ed f84b 	bl	80002cc <__adddf3>
 8013236:	4602      	mov	r2, r0
 8013238:	460b      	mov	r3, r1
 801323a:	4630      	mov	r0, r6
 801323c:	4639      	mov	r1, r7
 801323e:	f7ed fb25 	bl	800088c <__aeabi_ddiv>
 8013242:	f04f 0a01 	mov.w	sl, #1
 8013246:	4604      	mov	r4, r0
 8013248:	460d      	mov	r5, r1
 801324a:	e765      	b.n	8013118 <atan+0xc8>
 801324c:	4b47      	ldr	r3, [pc, #284]	@ (801336c <atan+0x31c>)
 801324e:	429e      	cmp	r6, r3
 8013250:	d21c      	bcs.n	801328c <atan+0x23c>
 8013252:	4b47      	ldr	r3, [pc, #284]	@ (8013370 <atan+0x320>)
 8013254:	2200      	movs	r2, #0
 8013256:	4620      	mov	r0, r4
 8013258:	4629      	mov	r1, r5
 801325a:	f7ed f835 	bl	80002c8 <__aeabi_dsub>
 801325e:	4b44      	ldr	r3, [pc, #272]	@ (8013370 <atan+0x320>)
 8013260:	4606      	mov	r6, r0
 8013262:	460f      	mov	r7, r1
 8013264:	2200      	movs	r2, #0
 8013266:	4620      	mov	r0, r4
 8013268:	4629      	mov	r1, r5
 801326a:	f7ed f9e5 	bl	8000638 <__aeabi_dmul>
 801326e:	4b3d      	ldr	r3, [pc, #244]	@ (8013364 <atan+0x314>)
 8013270:	2200      	movs	r2, #0
 8013272:	f7ed f82b 	bl	80002cc <__adddf3>
 8013276:	4602      	mov	r2, r0
 8013278:	460b      	mov	r3, r1
 801327a:	4630      	mov	r0, r6
 801327c:	4639      	mov	r1, r7
 801327e:	f7ed fb05 	bl	800088c <__aeabi_ddiv>
 8013282:	f04f 0a02 	mov.w	sl, #2
 8013286:	4604      	mov	r4, r0
 8013288:	460d      	mov	r5, r1
 801328a:	e745      	b.n	8013118 <atan+0xc8>
 801328c:	4622      	mov	r2, r4
 801328e:	462b      	mov	r3, r5
 8013290:	4938      	ldr	r1, [pc, #224]	@ (8013374 <atan+0x324>)
 8013292:	2000      	movs	r0, #0
 8013294:	f7ed fafa 	bl	800088c <__aeabi_ddiv>
 8013298:	f04f 0a03 	mov.w	sl, #3
 801329c:	4604      	mov	r4, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	e73a      	b.n	8013118 <atan+0xc8>
 80132a2:	4b35      	ldr	r3, [pc, #212]	@ (8013378 <atan+0x328>)
 80132a4:	4e35      	ldr	r6, [pc, #212]	@ (801337c <atan+0x32c>)
 80132a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ed f80b 	bl	80002c8 <__aeabi_dsub>
 80132b2:	4622      	mov	r2, r4
 80132b4:	462b      	mov	r3, r5
 80132b6:	f7ed f807 	bl	80002c8 <__aeabi_dsub>
 80132ba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80132be:	4602      	mov	r2, r0
 80132c0:	460b      	mov	r3, r1
 80132c2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80132c6:	f7ec ffff 	bl	80002c8 <__aeabi_dsub>
 80132ca:	f1bb 0f00 	cmp.w	fp, #0
 80132ce:	4604      	mov	r4, r0
 80132d0:	460d      	mov	r5, r1
 80132d2:	f6bf aedc 	bge.w	801308e <atan+0x3e>
 80132d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80132da:	461d      	mov	r5, r3
 80132dc:	e6d7      	b.n	801308e <atan+0x3e>
 80132de:	a51c      	add	r5, pc, #112	@ (adr r5, 8013350 <atan+0x300>)
 80132e0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80132e4:	e6d3      	b.n	801308e <atan+0x3e>
 80132e6:	bf00      	nop
 80132e8:	54442d18 	.word	0x54442d18
 80132ec:	3ff921fb 	.word	0x3ff921fb
 80132f0:	8800759c 	.word	0x8800759c
 80132f4:	7e37e43c 	.word	0x7e37e43c
 80132f8:	e322da11 	.word	0xe322da11
 80132fc:	3f90ad3a 	.word	0x3f90ad3a
 8013300:	24760deb 	.word	0x24760deb
 8013304:	3fa97b4b 	.word	0x3fa97b4b
 8013308:	a0d03d51 	.word	0xa0d03d51
 801330c:	3fb10d66 	.word	0x3fb10d66
 8013310:	c54c206e 	.word	0xc54c206e
 8013314:	3fb745cd 	.word	0x3fb745cd
 8013318:	920083ff 	.word	0x920083ff
 801331c:	3fc24924 	.word	0x3fc24924
 8013320:	5555550d 	.word	0x5555550d
 8013324:	3fd55555 	.word	0x3fd55555
 8013328:	2c6a6c2f 	.word	0x2c6a6c2f
 801332c:	bfa2b444 	.word	0xbfa2b444
 8013330:	52defd9a 	.word	0x52defd9a
 8013334:	3fadde2d 	.word	0x3fadde2d
 8013338:	af749a6d 	.word	0xaf749a6d
 801333c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013340:	fe231671 	.word	0xfe231671
 8013344:	3fbc71c6 	.word	0x3fbc71c6
 8013348:	9998ebc4 	.word	0x9998ebc4
 801334c:	3fc99999 	.word	0x3fc99999
 8013350:	54442d18 	.word	0x54442d18
 8013354:	bff921fb 	.word	0xbff921fb
 8013358:	440fffff 	.word	0x440fffff
 801335c:	7ff00000 	.word	0x7ff00000
 8013360:	3fdbffff 	.word	0x3fdbffff
 8013364:	3ff00000 	.word	0x3ff00000
 8013368:	3ff2ffff 	.word	0x3ff2ffff
 801336c:	40038000 	.word	0x40038000
 8013370:	3ff80000 	.word	0x3ff80000
 8013374:	bff00000 	.word	0xbff00000
 8013378:	08013b98 	.word	0x08013b98
 801337c:	08013bb8 	.word	0x08013bb8

08013380 <scalbn>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	ec55 4b10 	vmov	r4, r5, d0
 8013386:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801338a:	4606      	mov	r6, r0
 801338c:	462b      	mov	r3, r5
 801338e:	b991      	cbnz	r1, 80133b6 <scalbn+0x36>
 8013390:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013394:	4323      	orrs	r3, r4
 8013396:	d03b      	beq.n	8013410 <scalbn+0x90>
 8013398:	4b33      	ldr	r3, [pc, #204]	@ (8013468 <scalbn+0xe8>)
 801339a:	4620      	mov	r0, r4
 801339c:	4629      	mov	r1, r5
 801339e:	2200      	movs	r2, #0
 80133a0:	f7ed f94a 	bl	8000638 <__aeabi_dmul>
 80133a4:	4b31      	ldr	r3, [pc, #196]	@ (801346c <scalbn+0xec>)
 80133a6:	429e      	cmp	r6, r3
 80133a8:	4604      	mov	r4, r0
 80133aa:	460d      	mov	r5, r1
 80133ac:	da0f      	bge.n	80133ce <scalbn+0x4e>
 80133ae:	a326      	add	r3, pc, #152	@ (adr r3, 8013448 <scalbn+0xc8>)
 80133b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b4:	e01e      	b.n	80133f4 <scalbn+0x74>
 80133b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80133ba:	4291      	cmp	r1, r2
 80133bc:	d10b      	bne.n	80133d6 <scalbn+0x56>
 80133be:	4622      	mov	r2, r4
 80133c0:	4620      	mov	r0, r4
 80133c2:	4629      	mov	r1, r5
 80133c4:	f7ec ff82 	bl	80002cc <__adddf3>
 80133c8:	4604      	mov	r4, r0
 80133ca:	460d      	mov	r5, r1
 80133cc:	e020      	b.n	8013410 <scalbn+0x90>
 80133ce:	460b      	mov	r3, r1
 80133d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80133d4:	3936      	subs	r1, #54	@ 0x36
 80133d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80133da:	4296      	cmp	r6, r2
 80133dc:	dd0d      	ble.n	80133fa <scalbn+0x7a>
 80133de:	2d00      	cmp	r5, #0
 80133e0:	a11b      	add	r1, pc, #108	@ (adr r1, 8013450 <scalbn+0xd0>)
 80133e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e6:	da02      	bge.n	80133ee <scalbn+0x6e>
 80133e8:	a11b      	add	r1, pc, #108	@ (adr r1, 8013458 <scalbn+0xd8>)
 80133ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133ee:	a318      	add	r3, pc, #96	@ (adr r3, 8013450 <scalbn+0xd0>)
 80133f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133f4:	f7ed f920 	bl	8000638 <__aeabi_dmul>
 80133f8:	e7e6      	b.n	80133c8 <scalbn+0x48>
 80133fa:	1872      	adds	r2, r6, r1
 80133fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013400:	428a      	cmp	r2, r1
 8013402:	dcec      	bgt.n	80133de <scalbn+0x5e>
 8013404:	2a00      	cmp	r2, #0
 8013406:	dd06      	ble.n	8013416 <scalbn+0x96>
 8013408:	f36f 531e 	bfc	r3, #20, #11
 801340c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013410:	ec45 4b10 	vmov	d0, r4, r5
 8013414:	bd70      	pop	{r4, r5, r6, pc}
 8013416:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801341a:	da08      	bge.n	801342e <scalbn+0xae>
 801341c:	2d00      	cmp	r5, #0
 801341e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013448 <scalbn+0xc8>)
 8013420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013424:	dac3      	bge.n	80133ae <scalbn+0x2e>
 8013426:	a10e      	add	r1, pc, #56	@ (adr r1, 8013460 <scalbn+0xe0>)
 8013428:	e9d1 0100 	ldrd	r0, r1, [r1]
 801342c:	e7bf      	b.n	80133ae <scalbn+0x2e>
 801342e:	3236      	adds	r2, #54	@ 0x36
 8013430:	f36f 531e 	bfc	r3, #20, #11
 8013434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013438:	4620      	mov	r0, r4
 801343a:	4b0d      	ldr	r3, [pc, #52]	@ (8013470 <scalbn+0xf0>)
 801343c:	4629      	mov	r1, r5
 801343e:	2200      	movs	r2, #0
 8013440:	e7d8      	b.n	80133f4 <scalbn+0x74>
 8013442:	bf00      	nop
 8013444:	f3af 8000 	nop.w
 8013448:	c2f8f359 	.word	0xc2f8f359
 801344c:	01a56e1f 	.word	0x01a56e1f
 8013450:	8800759c 	.word	0x8800759c
 8013454:	7e37e43c 	.word	0x7e37e43c
 8013458:	8800759c 	.word	0x8800759c
 801345c:	fe37e43c 	.word	0xfe37e43c
 8013460:	c2f8f359 	.word	0xc2f8f359
 8013464:	81a56e1f 	.word	0x81a56e1f
 8013468:	43500000 	.word	0x43500000
 801346c:	ffff3cb0 	.word	0xffff3cb0
 8013470:	3c900000 	.word	0x3c900000

08013474 <with_errno>:
 8013474:	b510      	push	{r4, lr}
 8013476:	ed2d 8b02 	vpush	{d8}
 801347a:	eeb0 8a40 	vmov.f32	s16, s0
 801347e:	eef0 8a60 	vmov.f32	s17, s1
 8013482:	4604      	mov	r4, r0
 8013484:	f7fa facc 	bl	800da20 <__errno>
 8013488:	eeb0 0a48 	vmov.f32	s0, s16
 801348c:	eef0 0a68 	vmov.f32	s1, s17
 8013490:	ecbd 8b02 	vpop	{d8}
 8013494:	6004      	str	r4, [r0, #0]
 8013496:	bd10      	pop	{r4, pc}

08013498 <xflow>:
 8013498:	4603      	mov	r3, r0
 801349a:	b507      	push	{r0, r1, r2, lr}
 801349c:	ec51 0b10 	vmov	r0, r1, d0
 80134a0:	b183      	cbz	r3, 80134c4 <xflow+0x2c>
 80134a2:	4602      	mov	r2, r0
 80134a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80134a8:	e9cd 2300 	strd	r2, r3, [sp]
 80134ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134b0:	f7ed f8c2 	bl	8000638 <__aeabi_dmul>
 80134b4:	ec41 0b10 	vmov	d0, r0, r1
 80134b8:	2022      	movs	r0, #34	@ 0x22
 80134ba:	b003      	add	sp, #12
 80134bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80134c0:	f7ff bfd8 	b.w	8013474 <with_errno>
 80134c4:	4602      	mov	r2, r0
 80134c6:	460b      	mov	r3, r1
 80134c8:	e7ee      	b.n	80134a8 <xflow+0x10>
 80134ca:	0000      	movs	r0, r0
 80134cc:	0000      	movs	r0, r0
	...

080134d0 <__math_uflow>:
 80134d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80134d8 <__math_uflow+0x8>
 80134d4:	f7ff bfe0 	b.w	8013498 <xflow>
 80134d8:	00000000 	.word	0x00000000
 80134dc:	10000000 	.word	0x10000000

080134e0 <__math_oflow>:
 80134e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80134e8 <__math_oflow+0x8>
 80134e4:	f7ff bfd8 	b.w	8013498 <xflow>
 80134e8:	00000000 	.word	0x00000000
 80134ec:	70000000 	.word	0x70000000

080134f0 <_init>:
 80134f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134f2:	bf00      	nop
 80134f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134f6:	bc08      	pop	{r3}
 80134f8:	469e      	mov	lr, r3
 80134fa:	4770      	bx	lr

080134fc <_fini>:
 80134fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134fe:	bf00      	nop
 8013500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013502:	bc08      	pop	{r3}
 8013504:	469e      	mov	lr, r3
 8013506:	4770      	bx	lr
