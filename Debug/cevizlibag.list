
cevizlibag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013188  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  08013358  08013358  00014358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013948  08013948  000151f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013948  08013948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013950  08013950  000151f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013950  08013950  00014950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013954  08013954  00014954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08013958  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a6c  200001f0  08013b48  000151f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  08013b48  00015c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e977  00000000  00000000  00015220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf8  00000000  00000000  00033b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d8  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001354  00000000  00000000  0003a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a962  00000000  00000000  0003b4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026891  00000000  00000000  00065e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed291  00000000  00000000  0008c6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000824c  00000000  00000000  00179984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00181bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013340 	.word	0x08013340

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	08013340 	.word	0x08013340

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 ba09 	b.w	8001318 <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9be 	b.w	8001318 <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	468e      	mov	lr, r1
 8001028:	4604      	mov	r4, r0
 800102a:	4688      	mov	r8, r1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d14a      	bne.n	80010c6 <__udivmoddi4+0xa6>
 8001030:	428a      	cmp	r2, r1
 8001032:	4617      	mov	r7, r2
 8001034:	d962      	bls.n	80010fc <__udivmoddi4+0xdc>
 8001036:	fab2 f682 	clz	r6, r2
 800103a:	b14e      	cbz	r6, 8001050 <__udivmoddi4+0x30>
 800103c:	f1c6 0320 	rsb	r3, r6, #32
 8001040:	fa01 f806 	lsl.w	r8, r1, r6
 8001044:	fa20 f303 	lsr.w	r3, r0, r3
 8001048:	40b7      	lsls	r7, r6
 800104a:	ea43 0808 	orr.w	r8, r3, r8
 800104e:	40b4      	lsls	r4, r6
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	fa1f fc87 	uxth.w	ip, r7
 8001058:	fbb8 f1fe 	udiv	r1, r8, lr
 800105c:	0c23      	lsrs	r3, r4, #16
 800105e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001062:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001066:	fb01 f20c 	mul.w	r2, r1, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d909      	bls.n	8001082 <__udivmoddi4+0x62>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f101 30ff 	add.w	r0, r1, #4294967295
 8001074:	f080 80ea 	bcs.w	800124c <__udivmoddi4+0x22c>
 8001078:	429a      	cmp	r2, r3
 800107a:	f240 80e7 	bls.w	800124c <__udivmoddi4+0x22c>
 800107e:	3902      	subs	r1, #2
 8001080:	443b      	add	r3, r7
 8001082:	1a9a      	subs	r2, r3, r2
 8001084:	b2a3      	uxth	r3, r4
 8001086:	fbb2 f0fe 	udiv	r0, r2, lr
 800108a:	fb0e 2210 	mls	r2, lr, r0, r2
 800108e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001092:	fb00 fc0c 	mul.w	ip, r0, ip
 8001096:	459c      	cmp	ip, r3
 8001098:	d909      	bls.n	80010ae <__udivmoddi4+0x8e>
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	f100 32ff 	add.w	r2, r0, #4294967295
 80010a0:	f080 80d6 	bcs.w	8001250 <__udivmoddi4+0x230>
 80010a4:	459c      	cmp	ip, r3
 80010a6:	f240 80d3 	bls.w	8001250 <__udivmoddi4+0x230>
 80010aa:	443b      	add	r3, r7
 80010ac:	3802      	subs	r0, #2
 80010ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010b2:	eba3 030c 	sub.w	r3, r3, ip
 80010b6:	2100      	movs	r1, #0
 80010b8:	b11d      	cbz	r5, 80010c2 <__udivmoddi4+0xa2>
 80010ba:	40f3      	lsrs	r3, r6
 80010bc:	2200      	movs	r2, #0
 80010be:	e9c5 3200 	strd	r3, r2, [r5]
 80010c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c6:	428b      	cmp	r3, r1
 80010c8:	d905      	bls.n	80010d6 <__udivmoddi4+0xb6>
 80010ca:	b10d      	cbz	r5, 80010d0 <__udivmoddi4+0xb0>
 80010cc:	e9c5 0100 	strd	r0, r1, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	4608      	mov	r0, r1
 80010d4:	e7f5      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010d6:	fab3 f183 	clz	r1, r3
 80010da:	2900      	cmp	r1, #0
 80010dc:	d146      	bne.n	800116c <__udivmoddi4+0x14c>
 80010de:	4573      	cmp	r3, lr
 80010e0:	d302      	bcc.n	80010e8 <__udivmoddi4+0xc8>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	f200 8105 	bhi.w	80012f2 <__udivmoddi4+0x2d2>
 80010e8:	1a84      	subs	r4, r0, r2
 80010ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80010ee:	2001      	movs	r0, #1
 80010f0:	4690      	mov	r8, r2
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d0e5      	beq.n	80010c2 <__udivmoddi4+0xa2>
 80010f6:	e9c5 4800 	strd	r4, r8, [r5]
 80010fa:	e7e2      	b.n	80010c2 <__udivmoddi4+0xa2>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	f000 8090 	beq.w	8001222 <__udivmoddi4+0x202>
 8001102:	fab2 f682 	clz	r6, r2
 8001106:	2e00      	cmp	r6, #0
 8001108:	f040 80a4 	bne.w	8001254 <__udivmoddi4+0x234>
 800110c:	1a8a      	subs	r2, r1, r2
 800110e:	0c03      	lsrs	r3, r0, #16
 8001110:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001114:	b280      	uxth	r0, r0
 8001116:	b2bc      	uxth	r4, r7
 8001118:	2101      	movs	r1, #1
 800111a:	fbb2 fcfe 	udiv	ip, r2, lr
 800111e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001126:	fb04 f20c 	mul.w	r2, r4, ip
 800112a:	429a      	cmp	r2, r3
 800112c:	d907      	bls.n	800113e <__udivmoddi4+0x11e>
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001134:	d202      	bcs.n	800113c <__udivmoddi4+0x11c>
 8001136:	429a      	cmp	r2, r3
 8001138:	f200 80e0 	bhi.w	80012fc <__udivmoddi4+0x2dc>
 800113c:	46c4      	mov	ip, r8
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	fbb3 f2fe 	udiv	r2, r3, lr
 8001144:	fb0e 3312 	mls	r3, lr, r2, r3
 8001148:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800114c:	fb02 f404 	mul.w	r4, r2, r4
 8001150:	429c      	cmp	r4, r3
 8001152:	d907      	bls.n	8001164 <__udivmoddi4+0x144>
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	f102 30ff 	add.w	r0, r2, #4294967295
 800115a:	d202      	bcs.n	8001162 <__udivmoddi4+0x142>
 800115c:	429c      	cmp	r4, r3
 800115e:	f200 80ca 	bhi.w	80012f6 <__udivmoddi4+0x2d6>
 8001162:	4602      	mov	r2, r0
 8001164:	1b1b      	subs	r3, r3, r4
 8001166:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800116a:	e7a5      	b.n	80010b8 <__udivmoddi4+0x98>
 800116c:	f1c1 0620 	rsb	r6, r1, #32
 8001170:	408b      	lsls	r3, r1
 8001172:	fa22 f706 	lsr.w	r7, r2, r6
 8001176:	431f      	orrs	r7, r3
 8001178:	fa0e f401 	lsl.w	r4, lr, r1
 800117c:	fa20 f306 	lsr.w	r3, r0, r6
 8001180:	fa2e fe06 	lsr.w	lr, lr, r6
 8001184:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001188:	4323      	orrs	r3, r4
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	fa1f fc87 	uxth.w	ip, r7
 8001192:	fbbe f0f9 	udiv	r0, lr, r9
 8001196:	0c1c      	lsrs	r4, r3, #16
 8001198:	fb09 ee10 	mls	lr, r9, r0, lr
 800119c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80011a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80011a4:	45a6      	cmp	lr, r4
 80011a6:	fa02 f201 	lsl.w	r2, r2, r1
 80011aa:	d909      	bls.n	80011c0 <__udivmoddi4+0x1a0>
 80011ac:	193c      	adds	r4, r7, r4
 80011ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80011b2:	f080 809c 	bcs.w	80012ee <__udivmoddi4+0x2ce>
 80011b6:	45a6      	cmp	lr, r4
 80011b8:	f240 8099 	bls.w	80012ee <__udivmoddi4+0x2ce>
 80011bc:	3802      	subs	r0, #2
 80011be:	443c      	add	r4, r7
 80011c0:	eba4 040e 	sub.w	r4, r4, lr
 80011c4:	fa1f fe83 	uxth.w	lr, r3
 80011c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80011cc:	fb09 4413 	mls	r4, r9, r3, r4
 80011d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80011d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80011d8:	45a4      	cmp	ip, r4
 80011da:	d908      	bls.n	80011ee <__udivmoddi4+0x1ce>
 80011dc:	193c      	adds	r4, r7, r4
 80011de:	f103 3eff 	add.w	lr, r3, #4294967295
 80011e2:	f080 8082 	bcs.w	80012ea <__udivmoddi4+0x2ca>
 80011e6:	45a4      	cmp	ip, r4
 80011e8:	d97f      	bls.n	80012ea <__udivmoddi4+0x2ca>
 80011ea:	3b02      	subs	r3, #2
 80011ec:	443c      	add	r4, r7
 80011ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011f2:	eba4 040c 	sub.w	r4, r4, ip
 80011f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80011fa:	4564      	cmp	r4, ip
 80011fc:	4673      	mov	r3, lr
 80011fe:	46e1      	mov	r9, ip
 8001200:	d362      	bcc.n	80012c8 <__udivmoddi4+0x2a8>
 8001202:	d05f      	beq.n	80012c4 <__udivmoddi4+0x2a4>
 8001204:	b15d      	cbz	r5, 800121e <__udivmoddi4+0x1fe>
 8001206:	ebb8 0203 	subs.w	r2, r8, r3
 800120a:	eb64 0409 	sbc.w	r4, r4, r9
 800120e:	fa04 f606 	lsl.w	r6, r4, r6
 8001212:	fa22 f301 	lsr.w	r3, r2, r1
 8001216:	431e      	orrs	r6, r3
 8001218:	40cc      	lsrs	r4, r1
 800121a:	e9c5 6400 	strd	r6, r4, [r5]
 800121e:	2100      	movs	r1, #0
 8001220:	e74f      	b.n	80010c2 <__udivmoddi4+0xa2>
 8001222:	fbb1 fcf2 	udiv	ip, r1, r2
 8001226:	0c01      	lsrs	r1, r0, #16
 8001228:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800122c:	b280      	uxth	r0, r0
 800122e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001232:	463b      	mov	r3, r7
 8001234:	4638      	mov	r0, r7
 8001236:	463c      	mov	r4, r7
 8001238:	46b8      	mov	r8, r7
 800123a:	46be      	mov	lr, r7
 800123c:	2620      	movs	r6, #32
 800123e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001242:	eba2 0208 	sub.w	r2, r2, r8
 8001246:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800124a:	e766      	b.n	800111a <__udivmoddi4+0xfa>
 800124c:	4601      	mov	r1, r0
 800124e:	e718      	b.n	8001082 <__udivmoddi4+0x62>
 8001250:	4610      	mov	r0, r2
 8001252:	e72c      	b.n	80010ae <__udivmoddi4+0x8e>
 8001254:	f1c6 0220 	rsb	r2, r6, #32
 8001258:	fa2e f302 	lsr.w	r3, lr, r2
 800125c:	40b7      	lsls	r7, r6
 800125e:	40b1      	lsls	r1, r6
 8001260:	fa20 f202 	lsr.w	r2, r0, r2
 8001264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001268:	430a      	orrs	r2, r1
 800126a:	fbb3 f8fe 	udiv	r8, r3, lr
 800126e:	b2bc      	uxth	r4, r7
 8001270:	fb0e 3318 	mls	r3, lr, r8, r3
 8001274:	0c11      	lsrs	r1, r2, #16
 8001276:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800127a:	fb08 f904 	mul.w	r9, r8, r4
 800127e:	40b0      	lsls	r0, r6
 8001280:	4589      	cmp	r9, r1
 8001282:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001286:	b280      	uxth	r0, r0
 8001288:	d93e      	bls.n	8001308 <__udivmoddi4+0x2e8>
 800128a:	1879      	adds	r1, r7, r1
 800128c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001290:	d201      	bcs.n	8001296 <__udivmoddi4+0x276>
 8001292:	4589      	cmp	r9, r1
 8001294:	d81f      	bhi.n	80012d6 <__udivmoddi4+0x2b6>
 8001296:	eba1 0109 	sub.w	r1, r1, r9
 800129a:	fbb1 f9fe 	udiv	r9, r1, lr
 800129e:	fb09 f804 	mul.w	r8, r9, r4
 80012a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80012a6:	b292      	uxth	r2, r2
 80012a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012ac:	4542      	cmp	r2, r8
 80012ae:	d229      	bcs.n	8001304 <__udivmoddi4+0x2e4>
 80012b0:	18ba      	adds	r2, r7, r2
 80012b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80012b6:	d2c4      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012b8:	4542      	cmp	r2, r8
 80012ba:	d2c2      	bcs.n	8001242 <__udivmoddi4+0x222>
 80012bc:	f1a9 0102 	sub.w	r1, r9, #2
 80012c0:	443a      	add	r2, r7
 80012c2:	e7be      	b.n	8001242 <__udivmoddi4+0x222>
 80012c4:	45f0      	cmp	r8, lr
 80012c6:	d29d      	bcs.n	8001204 <__udivmoddi4+0x1e4>
 80012c8:	ebbe 0302 	subs.w	r3, lr, r2
 80012cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80012d0:	3801      	subs	r0, #1
 80012d2:	46e1      	mov	r9, ip
 80012d4:	e796      	b.n	8001204 <__udivmoddi4+0x1e4>
 80012d6:	eba7 0909 	sub.w	r9, r7, r9
 80012da:	4449      	add	r1, r9
 80012dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80012e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80012e4:	fb09 f804 	mul.w	r8, r9, r4
 80012e8:	e7db      	b.n	80012a2 <__udivmoddi4+0x282>
 80012ea:	4673      	mov	r3, lr
 80012ec:	e77f      	b.n	80011ee <__udivmoddi4+0x1ce>
 80012ee:	4650      	mov	r0, sl
 80012f0:	e766      	b.n	80011c0 <__udivmoddi4+0x1a0>
 80012f2:	4608      	mov	r0, r1
 80012f4:	e6fd      	b.n	80010f2 <__udivmoddi4+0xd2>
 80012f6:	443b      	add	r3, r7
 80012f8:	3a02      	subs	r2, #2
 80012fa:	e733      	b.n	8001164 <__udivmoddi4+0x144>
 80012fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8001300:	443b      	add	r3, r7
 8001302:	e71c      	b.n	800113e <__udivmoddi4+0x11e>
 8001304:	4649      	mov	r1, r9
 8001306:	e79c      	b.n	8001242 <__udivmoddi4+0x222>
 8001308:	eba1 0109 	sub.w	r1, r1, r9
 800130c:	46c4      	mov	ip, r8
 800130e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001312:	fb09 f804 	mul.w	r8, r9, r4
 8001316:	e7c4      	b.n	80012a2 <__udivmoddi4+0x282>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800132e:	4b21      	ldr	r3, [pc, #132]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001330:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <MX_ADC1_Init+0x9c>)
 8001332:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001334:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001336:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800133a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800135e:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <MX_ADC1_Init+0xa0>)
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001362:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001368:	4b12      	ldr	r3, [pc, #72]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800136a:	2201      	movs	r2, #1
 800136c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <MX_ADC1_Init+0x98>)
 8001378:	2201      	movs	r2, #1
 800137a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800137e:	f003 fd57 	bl	8004e30 <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001388:	f001 fbf4 	bl	8002b74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800138c:	230b      	movs	r3, #11
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_ADC1_Init+0x98>)
 800139e:	f003 fef5 	bl	800518c <HAL_ADC_ConfigChannel>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80013a8:	f001 fbe4 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	2000020c 	.word	0x2000020c
 80013b8:	40012000 	.word	0x40012000
 80013bc:	0f000001 	.word	0x0f000001

080013c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	@ (800145c <MX_ADC2_Init+0x9c>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_ADC2_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <MX_ADC2_Init+0xa0>)
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_ADC2_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_ADC2_Init+0x98>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001422:	f003 fd05 	bl	8004e30 <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800142c:	f001 fba2 	bl	8002b74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001430:	230c      	movs	r3, #12
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_ADC2_Init+0x98>)
 8001442:	f003 fea3 	bl	800518c <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800144c:	f001 fb92 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000254 	.word	0x20000254
 800145c:	40012100 	.word	0x40012100
 8001460:	0f000001 	.word	0x0f000001

08001464 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08c      	sub	sp, #48	@ 0x30
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a2e      	ldr	r2, [pc, #184]	@ (800153c <HAL_ADC_MspInit+0xd8>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d128      	bne.n	80014d8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a2c      	ldr	r2, [pc, #176]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a25      	ldr	r2, [pc, #148]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = ADC_V_Pin;
 80014be:	2302      	movs	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c2:	2303      	movs	r3, #3
 80014c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_V_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	481c      	ldr	r0, [pc, #112]	@ (8001544 <HAL_ADC_MspInit+0xe0>)
 80014d2:	f004 fe2d 	bl	8006130 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80014d6:	e02c      	b.n	8001532 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001548 <HAL_ADC_MspInit+0xe4>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d127      	bne.n	8001532 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <HAL_ADC_MspInit+0xdc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_C_Pin;
 800151a:	2304      	movs	r3, #4
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ADC_C_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_ADC_MspInit+0xe0>)
 800152e:	f004 fdff 	bl	8006130 <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	@ 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40012000 	.word	0x40012000
 8001540:	40023800 	.word	0x40023800
 8001544:	40020800 	.word	0x40020800
 8001548:	40012100 	.word	0x40012100

0800154c <reset_algorithm_status>:
	return pow(nmbr, 2);
}
*/

void reset_algorithm_status()
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	rocket_status = STAT_ROCKET_READY;
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <reset_algorithm_status+0x14>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]

}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	200002a8 	.word	0x200002a8

08001564 <algorithm_1_update>:
 * it works only with BME280 pressure sensor. Measures the vertical velocity.
 * it detects the first deploy
 * it detecets the second deploy via altitude
 */
void algorithm_1_update(flight_data_t *rocket)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]

	float velocity = 0.0;
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

	//velocity measuiring
	currentTime_1 = HAL_GetTick();
 8001572:	f003 fc2d 	bl	8004dd0 <HAL_GetTick>
 8001576:	4603      	mov	r3, r0
 8001578:	4a90      	ldr	r2, [pc, #576]	@ (80017bc <algorithm_1_update+0x258>)
 800157a:	6013      	str	r3, [r2, #0]
	uint32_t delta_time = currentTime_1 - lastTime_1;
 800157c:	4b8f      	ldr	r3, [pc, #572]	@ (80017bc <algorithm_1_update+0x258>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b8f      	ldr	r3, [pc, #572]	@ (80017c0 <algorithm_1_update+0x25c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	613b      	str	r3, [r7, #16]

  if(delta_time >= 90)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	2b59      	cmp	r3, #89	@ 0x59
 800158c:	d920      	bls.n	80015d0 <algorithm_1_update+0x6c>
  {
	  float currentAltitude = rocket->altitude;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]
	  velocity = (currentAltitude - lastAltitude_1) / ((float)(delta_time) / 1000);
 8001594:	4b8b      	ldr	r3, [pc, #556]	@ (80017c4 <algorithm_1_update+0x260>)
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ed97 7a03 	vldr	s14, [r7, #12]
 800159e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ac:	ed9f 6a86 	vldr	s12, [pc, #536]	@ 80017c8 <algorithm_1_update+0x264>
 80015b0:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80015b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b8:	edc7 7a05 	vstr	s15, [r7, #20]
	  lastAltitude_1 = currentAltitude;
 80015bc:	4a81      	ldr	r2, [pc, #516]	@ (80017c4 <algorithm_1_update+0x260>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6013      	str	r3, [r2, #0]

	  lastTime_1 = currentTime_1;
 80015c2:	4b7e      	ldr	r3, [pc, #504]	@ (80017bc <algorithm_1_update+0x258>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a7e      	ldr	r2, [pc, #504]	@ (80017c0 <algorithm_1_update+0x25c>)
 80015c8:	6013      	str	r3, [r2, #0]
	  is_updated = 1;
 80015ca:	4b80      	ldr	r3, [pc, #512]	@ (80017cc <algorithm_1_update+0x268>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
  }

  if(is_updated)
 80015d0:	4b7e      	ldr	r3, [pc, #504]	@ (80017cc <algorithm_1_update+0x268>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80ec 	beq.w	80017b2 <algorithm_1_update+0x24e>
  {
	  is_updated = 0;
 80015da:	4b7c      	ldr	r3, [pc, #496]	@ (80017cc <algorithm_1_update+0x268>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

	switch(rocket_status)
 80015e0:	4b7b      	ldr	r3, [pc, #492]	@ (80017d0 <algorithm_1_update+0x26c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b09      	cmp	r3, #9
 80015e6:	f200 80d9 	bhi.w	800179c <algorithm_1_update+0x238>
 80015ea:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <algorithm_1_update+0x8c>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001619 	.word	0x08001619
 80015f4:	08001669 	.word	0x08001669
 80015f8:	080016a7 	.word	0x080016a7
 80015fc:	080016e3 	.word	0x080016e3
 8001600:	0800179d 	.word	0x0800179d
 8001604:	0800179d 	.word	0x0800179d
 8001608:	0800175d 	.word	0x0800175d
 800160c:	0800179d 	.word	0x0800179d
 8001610:	0800179d 	.word	0x0800179d
 8001614:	0800179d 	.word	0x0800179d
	{
		case STAT_ROCKET_READY:						//rising detection
			if(velocity > RISING_VELOCITY_TRESHOLD || rocket->accel_Y > RISING_G_TRESHOLD)
 8001618:	edd7 7a05 	vldr	s15, [r7, #20]
 800161c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	dc09      	bgt.n	800163e <algorithm_1_update+0xda>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001630:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017d4 <algorithm_1_update+0x270>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	dd05      	ble.n	800164a <algorithm_1_update+0xe6>
			{
				counter++;
 800163e:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <algorithm_1_update+0x274>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3301      	adds	r3, #1
 8001644:	4a64      	ldr	r2, [pc, #400]	@ (80017d8 <algorithm_1_update+0x274>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e002      	b.n	8001650 <algorithm_1_update+0xec>
			}
			else
			{
				counter = 0;
 800164a:	4b63      	ldr	r3, [pc, #396]	@ (80017d8 <algorithm_1_update+0x274>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
			}

			if(counter == 2)
 8001650:	4b61      	ldr	r3, [pc, #388]	@ (80017d8 <algorithm_1_update+0x274>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	f040 80a3 	bne.w	80017a0 <algorithm_1_update+0x23c>
			{
				rocket_status = STAT_FLIGHT_STARTED;
 800165a:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <algorithm_1_update+0x26c>)
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001660:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <algorithm_1_update+0x274>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
				//serial_println("Fligth started", &TTL_HNDLR);

			}
			break;
 8001666:	e09b      	b.n	80017a0 <algorithm_1_update+0x23c>

		case STAT_FLIGHT_STARTED:					//Burnout detect
			if(rocket->accel_Y < BURNOUT_THRESHOLD)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a02 	vldr	s15, [r3, #8]
 800166e:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80017dc <algorithm_1_update+0x278>
 8001672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	d505      	bpl.n	8001688 <algorithm_1_update+0x124>
			{
				counter++;
 800167c:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <algorithm_1_update+0x274>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a55      	ldr	r2, [pc, #340]	@ (80017d8 <algorithm_1_update+0x274>)
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e002      	b.n	800168e <algorithm_1_update+0x12a>
			}
			else
			{
				counter = 0;
 8001688:	4b53      	ldr	r3, [pc, #332]	@ (80017d8 <algorithm_1_update+0x274>)
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
			}

			if(counter == 1)
 800168e:	4b52      	ldr	r3, [pc, #328]	@ (80017d8 <algorithm_1_update+0x274>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	f040 8086 	bne.w	80017a4 <algorithm_1_update+0x240>
			{
				rocket_status = STAT_MOTOR_BURNOUT;
 8001698:	4b4d      	ldr	r3, [pc, #308]	@ (80017d0 <algorithm_1_update+0x26c>)
 800169a:	2202      	movs	r2, #2
 800169c:	701a      	strb	r2, [r3, #0]
				counter = 0;
 800169e:	4b4e      	ldr	r3, [pc, #312]	@ (80017d8 <algorithm_1_update+0x274>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
				//serial_println("Burnout", &TTL_HNDLR);
			}
			break;
 80016a4:	e07e      	b.n	80017a4 <algorithm_1_update+0x240>

		case STAT_MOTOR_BURNOUT:					//Arming altitude achived
			if(rocket->altitude > ARMING_ALTITUDE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80017e0 <algorithm_1_update+0x27c>
 80016b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b8:	dd05      	ble.n	80016c6 <algorithm_1_update+0x162>
			{
				counter++;
 80016ba:	4b47      	ldr	r3, [pc, #284]	@ (80017d8 <algorithm_1_update+0x274>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	3301      	adds	r3, #1
 80016c0:	4a45      	ldr	r2, [pc, #276]	@ (80017d8 <algorithm_1_update+0x274>)
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e002      	b.n	80016cc <algorithm_1_update+0x168>
			}
			else
			{
				counter = 0;
 80016c6:	4b44      	ldr	r3, [pc, #272]	@ (80017d8 <algorithm_1_update+0x274>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 80016cc:	4b42      	ldr	r3, [pc, #264]	@ (80017d8 <algorithm_1_update+0x274>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d169      	bne.n	80017a8 <algorithm_1_update+0x244>
			{
				rocket_status = STAT_ARMING_DISABLE;
 80016d4:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <algorithm_1_update+0x26c>)
 80016d6:	2203      	movs	r2, #3
 80016d8:	701a      	strb	r2, [r3, #0]
				counter = 0;
 80016da:	4b3f      	ldr	r3, [pc, #252]	@ (80017d8 <algorithm_1_update+0x274>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
				//serial_println("Arming altitude achived", &TTL_HNDLR);
			}
			break;
 80016e0:	e062      	b.n	80017a8 <algorithm_1_update+0x244>

		case STAT_ARMING_DISABLE:					//Falling detection || First parachute
			if(velocity < FALLING_VELOCITY_TRESHOLD || rocket->angle_X > ANGLE_THRESHOLD || rocket->angle_Y > ANGLE_THRESHOLD || rocket->angle_Z > ANGLE_THRESHOLD)
 80016e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	d41d      	bmi.n	8001730 <algorithm_1_update+0x1cc>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80016fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80017e4 <algorithm_1_update+0x280>
 80016fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dc13      	bgt.n	8001730 <algorithm_1_update+0x1cc>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 7a05 	vldr	s15, [r3, #20]
 800170e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80017e4 <algorithm_1_update+0x280>
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	dc09      	bgt.n	8001730 <algorithm_1_update+0x1cc>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001722:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80017e4 <algorithm_1_update+0x280>
 8001726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172e:	dd05      	ble.n	800173c <algorithm_1_update+0x1d8>
			{
				counter++;
 8001730:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <algorithm_1_update+0x274>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <algorithm_1_update+0x274>)
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e002      	b.n	8001742 <algorithm_1_update+0x1de>
			}
			else
			{
				counter = 0;
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <algorithm_1_update+0x274>)
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 8001742:	4b25      	ldr	r3, [pc, #148]	@ (80017d8 <algorithm_1_update+0x274>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d130      	bne.n	80017ac <algorithm_1_update+0x248>
			{
				rocket_status = STAT_P1_OK_P2_NO;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <algorithm_1_update+0x26c>)
 800174c:	2206      	movs	r2, #6
 800174e:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001750:	4b21      	ldr	r3, [pc, #132]	@ (80017d8 <algorithm_1_update+0x274>)
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
				//serial_println("First parachute_deploy", &TTL_HNDLR);
				apoge_deploy();
 8001756:	f001 f9b1 	bl	8002abc <apoge_deploy>

			}
			break;
 800175a:	e027      	b.n	80017ac <algorithm_1_update+0x248>

		case STAT_P1_OK_P2_NO:							//Second parachute deploy
			if(rocket->altitude < SECOND_DEPLOY_ALTITUDE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017e8 <algorithm_1_update+0x284>
 8001766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d505      	bpl.n	800177c <algorithm_1_update+0x218>
			{
				counter++;
 8001770:	4b19      	ldr	r3, [pc, #100]	@ (80017d8 <algorithm_1_update+0x274>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	3301      	adds	r3, #1
 8001776:	4a18      	ldr	r2, [pc, #96]	@ (80017d8 <algorithm_1_update+0x274>)
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e002      	b.n	8001782 <algorithm_1_update+0x21e>
			}
			else
			{
				counter = 0;
 800177c:	4b16      	ldr	r3, [pc, #88]	@ (80017d8 <algorithm_1_update+0x274>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
			}

			if(counter == 3)
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <algorithm_1_update+0x274>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d112      	bne.n	80017b0 <algorithm_1_update+0x24c>
			{
				rocket_status = STAT_P1_OK_P2_OK;
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <algorithm_1_update+0x26c>)
 800178c:	2208      	movs	r2, #8
 800178e:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <algorithm_1_update+0x274>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
				//serial_println("Second parachute deploy", &TTL_HNDLR);
				main_deploy();
 8001796:	f001 f973 	bl	8002a80 <main_deploy>

			}
			break;
 800179a:	e009      	b.n	80017b0 <algorithm_1_update+0x24c>
		case STAT_TOUCH_DOWN:

			break;

		default:
			break;
 800179c:	bf00      	nop
 800179e:	e008      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017a0:	bf00      	nop
 80017a2:	e006      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017a4:	bf00      	nop
 80017a6:	e004      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017a8:	bf00      	nop
 80017aa:	e002      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017ac:	bf00      	nop
 80017ae:	e000      	b.n	80017b2 <algorithm_1_update+0x24e>
			break;
 80017b0:	bf00      	nop

	}

  }
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	2000029c 	.word	0x2000029c
 80017c0:	200002a0 	.word	0x200002a0
 80017c4:	200002a4 	.word	0x200002a4
 80017c8:	447a0000 	.word	0x447a0000
 80017cc:	200002b0 	.word	0x200002b0
 80017d0:	200002a8 	.word	0x200002a8
 80017d4:	44bb8000 	.word	0x44bb8000
 80017d8:	200002ac 	.word	0x200002ac
 80017dc:	c3fa0000 	.word	0xc3fa0000
 80017e0:	44fa0000 	.word	0x44fa0000
 80017e4:	42820000 	.word	0x42820000
 80017e8:	44098000 	.word	0x44098000

080017ec <calculateCRC>:

union DataPack veriler;
uint8_t bufferPrint[400];

static uint8_t calculateCRC()
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
	int check_sum = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 80017f6:	2301      	movs	r3, #1
 80017f8:	603b      	str	r3, [r7, #0]
 80017fa:	e00a      	b.n	8001812 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <calculateCRC+0x48>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4413      	add	r3, r2
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4413      	add	r3, r2
 800180a:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3301      	adds	r3, #1
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b3c      	cmp	r3, #60	@ 0x3c
 8001816:	d9f1      	bls.n	80017fc <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	425a      	negs	r2, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	bf58      	it	pl
 8001822:	4253      	negpl	r3, r2
 8001824:	b2db      	uxtb	r3, r3
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200002b4 	.word	0x200002b4

08001838 <packDatas>:
	HAL_UART_Transmit(&TTL_HNDLR, veriler.arr , sizeof(veriler.dataYapi), 50);

}

uint8_t* packDatas(bmi088_struct_t *bmi, bme280_struct_t *bme, S_GPS_L86_DATA* gps , power_t *power_s, uint16_t status)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6178      	str	r0, [r7, #20]
 8001840:	6139      	str	r1, [r7, #16]
 8001842:	60fa      	str	r2, [r7, #12]
 8001844:	60bb      	str	r3, [r7, #8]
	veriler.dataYapi.basla = 0xFF;
 8001846:	4bb1      	ldr	r3, [pc, #708]	@ (8001b0c <packDatas+0x2d4>)
 8001848:	22ff      	movs	r2, #255	@ 0xff
 800184a:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]
	uint8_t sec = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	77bb      	strb	r3, [r7, #30]
	int gpsTime = (int)gps->timeDateBuf;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	edd3 7a03 	vldr	s15, [r3, #12]
 800185a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185e:	ee17 3a90 	vmov	r3, s15
 8001862:	61bb      	str	r3, [r7, #24]
	sec = gpsTime % 100;
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	4aaa      	ldr	r2, [pc, #680]	@ (8001b10 <packDatas+0x2d8>)
 8001868:	fb82 1203 	smull	r1, r2, r2, r3
 800186c:	1151      	asrs	r1, r2, #5
 800186e:	17da      	asrs	r2, r3, #31
 8001870:	1a8a      	subs	r2, r1, r2
 8001872:	2164      	movs	r1, #100	@ 0x64
 8001874:	fb01 f202 	mul.w	r2, r1, r2
 8001878:	1a9a      	subs	r2, r3, r2
 800187a:	4613      	mov	r3, r2
 800187c:	77bb      	strb	r3, [r7, #30]
	gpsTime /= 100;
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	4aa3      	ldr	r2, [pc, #652]	@ (8001b10 <packDatas+0x2d8>)
 8001882:	fb82 1203 	smull	r1, r2, r2, r3
 8001886:	1152      	asrs	r2, r2, #5
 8001888:	17db      	asrs	r3, r3, #31
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	61bb      	str	r3, [r7, #24]
	min = gpsTime % 100;
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4a9f      	ldr	r2, [pc, #636]	@ (8001b10 <packDatas+0x2d8>)
 8001892:	fb82 1203 	smull	r1, r2, r2, r3
 8001896:	1151      	asrs	r1, r2, #5
 8001898:	17da      	asrs	r2, r3, #31
 800189a:	1a8a      	subs	r2, r1, r2
 800189c:	2164      	movs	r1, #100	@ 0x64
 800189e:	fb01 f202 	mul.w	r2, r1, r2
 80018a2:	1a9a      	subs	r2, r3, r2
 80018a4:	4613      	mov	r3, r2
 80018a6:	77fb      	strb	r3, [r7, #31]
	min = (min << 2) | (sec >> 4);
 80018a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	7fbb      	ldrb	r3, [r7, #30]
 80018b2:	091b      	lsrs	r3, r3, #4
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	b25b      	sxtb	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	77fb      	strb	r3, [r7, #31]
	sec = (sec << 4) | (status);
 80018be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	b25a      	sxtb	r2, r3
 80018c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	4313      	orrs	r3, r2
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	77bb      	strb	r3, [r7, #30]
	veriler.dataYapi.zaman = min;
 80018d0:	4a8e      	ldr	r2, [pc, #568]	@ (8001b0c <packDatas+0x2d4>)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 80018d6:	4a8d      	ldr	r2, [pc, #564]	@ (8001b0c <packDatas+0x2d4>)
 80018d8:	7fbb      	ldrb	r3, [r7, #30]
 80018da:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = (uint16_t)(int)(power_s->voltage * 100);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001b14 <packDatas+0x2dc>
 80018e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	ee17 3a90 	vmov	r3, s15
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	4b85      	ldr	r3, [pc, #532]	@ (8001b0c <packDatas+0x2d4>)
 80018f6:	809a      	strh	r2, [r3, #4]
	veriler.dataYapi.akim = (uint16_t)(int)(power_s->current);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80018fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001902:	ee17 3a90 	vmov	r3, s15
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b80      	ldr	r3, [pc, #512]	@ (8001b0c <packDatas+0x2d4>)
 800190a:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = (int8_t)(int)(bme->datas.temperature * 2);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001912:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191a:	edc7 7a01 	vstr	s15, [r7, #4]
 800191e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8001922:	4b7a      	ldr	r3, [pc, #488]	@ (8001b0c <packDatas+0x2d4>)
 8001924:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = (uint8_t)(int)(bme->datas.humidity);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	edd3 7a05 	vldr	s15, [r3, #20]
 800192c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001930:	edc7 7a01 	vstr	s15, [r7, #4]
 8001934:	793a      	ldrb	r2, [r7, #4]
 8001936:	4b75      	ldr	r3, [pc, #468]	@ (8001b0c <packDatas+0x2d4>)
 8001938:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	veriler.dataYapi.yukseklik_p = bme->datas.altitude;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	4a72      	ldr	r2, [pc, #456]	@ (8001b0c <packDatas+0x2d4>)
 8001942:	6093      	str	r3, [r2, #8]
#ifdef ROCKET_CARD
	veriler.dataYapi.maxAltitude = (int16_t)(int)bme->parameters->max_alt;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800194c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	b21a      	sxth	r2, r3
 8001956:	4b6d      	ldr	r3, [pc, #436]	@ (8001b0c <packDatas+0x2d4>)
 8001958:	875a      	strh	r2, [r3, #58]	@ 0x3a
#else
	veriler.dataYapi.maxAltitude = 0;
#endif
	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195e:	4a6b      	ldr	r2, [pc, #428]	@ (8001b0c <packDatas+0x2d4>)
 8001960:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a69      	ldr	r2, [pc, #420]	@ (8001b0c <packDatas+0x2d4>)
 8001968:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4a67      	ldr	r2, [pc, #412]	@ (8001b0c <packDatas+0x2d4>)
 8001970:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = -bmi->datas.gyro_x;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	edd3 7a06 	vldr	s15, [r3, #24]
 8001978:	eef1 7a67 	vneg.f32	s15, s15
 800197c:	4b63      	ldr	r3, [pc, #396]	@ (8001b0c <packDatas+0x2d4>)
 800197e:	edc3 7a06 	vstr	s15, [r3, #24]
	veriler.dataYapi.gyroY = -bmi->datas.gyro_z;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	edd3 7a08 	vldr	s15, [r3, #32]
 8001988:	eef1 7a67 	vneg.f32	s15, s15
 800198c:	4b5f      	ldr	r3, [pc, #380]	@ (8001b0c <packDatas+0x2d4>)
 800198e:	edc3 7a07 	vstr	s15, [r3, #28]
	veriler.dataYapi.gyroZ = -bmi->datas.gyro_y;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	edd3 7a07 	vldr	s15, [r3, #28]
 8001998:	eef1 7a67 	vneg.f32	s15, s15
 800199c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b0c <packDatas+0x2d4>)
 800199e:	edc3 7a08 	vstr	s15, [r3, #32]

	veriler.dataYapi.accX = bmi->datas.acc_x / 1000;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80019a8:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001b18 <packDatas+0x2e0>
 80019ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b0:	4b56      	ldr	r3, [pc, #344]	@ (8001b0c <packDatas+0x2d4>)
 80019b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	veriler.dataYapi.accY = bmi->datas.acc_z / 1000;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80019bc:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001b18 <packDatas+0x2e0>
 80019c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c4:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <packDatas+0x2d4>)
 80019c6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	veriler.dataYapi.accZ = (status > STAT_ROCKET_READY) ? (-bmi->datas.acc_y / 1000) - 1.0 : bmi->datas.acc_y / 1000;
 80019ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00d      	beq.n	80019ec <packDatas+0x1b4>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80019d6:	eeb1 7a67 	vneg.f32	s14, s15
 80019da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001b18 <packDatas+0x2e0>
 80019de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019ea:	e006      	b.n	80019fa <packDatas+0x1c2>
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80019f2:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001b18 <packDatas+0x2e0>
 80019f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019fa:	4b44      	ldr	r3, [pc, #272]	@ (8001b0c <packDatas+0x2d4>)
 80019fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) | (((int)euler[0] & 0x8000) >> 13) | (((int)euler[1] & 0x8000) >> 14) | (((int)euler[2] & 0x8000) >> 15);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	4b44      	ldr	r3, [pc, #272]	@ (8001b1c <packDatas+0x2e4>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a14:	ee17 3a90 	vmov	r3, s15
 8001a18:	135b      	asrs	r3, r3, #13
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	4313      	orrs	r3, r2
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	4b3d      	ldr	r3, [pc, #244]	@ (8001b1c <packDatas+0x2e4>)
 8001a28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a30:	ee17 3a90 	vmov	r3, s15
 8001a34:	139b      	asrs	r3, r3, #14
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	b25a      	sxtb	r2, r3
 8001a42:	4b36      	ldr	r3, [pc, #216]	@ (8001b1c <packDatas+0x2e4>)
 8001a44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 3a90 	vmov	r3, s15
 8001a50:	13db      	asrs	r3, r3, #15
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <packDatas+0x2d4>)
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	veriler.dataYapi.hiz = (int16_t)(int)(bme->datas.velocity * 10);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a6c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a78:	ee17 3a90 	vmov	r3, s15
 8001a7c:	b21a      	sxth	r2, r3
 8001a7e:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <packDatas+0x2d4>)
 8001a80:	871a      	strh	r2, [r3, #56]	@ 0x38

	veriler.dataYapi.aci = quaternionToTheta();
 8001a82:	f001 faf1 	bl	8003068 <quaternionToTheta>
 8001a86:	eef0 7a40 	vmov.f32	s15, s0
 8001a8a:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <packDatas+0x2d4>)
 8001a8c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	veriler.dataYapi.pitch = (uint8_t)((int)abs(euler[0]));
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <packDatas+0x2e4>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9a:	ee17 3a90 	vmov	r3, s15
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bfb8      	it	lt
 8001aa2:	425b      	neglt	r3, r3
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <packDatas+0x2d4>)
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	veriler.dataYapi.roll = (uint8_t)((int)abs(euler[1]));
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <packDatas+0x2e4>)
 8001aae:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab6:	ee17 3a90 	vmov	r3, s15
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bfb8      	it	lt
 8001abe:	425b      	neglt	r3, r3
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <packDatas+0x2d4>)
 8001ac4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	veriler.dataYapi.yaw = (uint8_t)((int)abs(euler[2]));
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <packDatas+0x2e4>)
 8001aca:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad2:	ee17 3a90 	vmov	r3, s15
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bfb8      	it	lt
 8001ada:	425b      	neglt	r3, r3
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <packDatas+0x2d4>)
 8001ae0:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8001ae4:	f7ff fe82 	bl	80017ec <calculateCRC>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <packDatas+0x2d4>)
 8001aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	veriler.dataYapi.CR	= '\r';
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <packDatas+0x2d4>)
 8001af4:	220d      	movs	r2, #13
 8001af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	veriler.dataYapi.LF	= '\n';
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <packDatas+0x2d4>)
 8001afc:	220a      	movs	r2, #10
 8001afe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	return veriler.arr;
 8001b02:	4b02      	ldr	r3, [pc, #8]	@ (8001b0c <packDatas+0x2d4>)
	}
#endif
#ifndef PRINT_DECODED
	printDatas();
#endif
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200002b4 	.word	0x200002b4
 8001b10:	51eb851f 	.word	0x51eb851f
 8001b14:	42c80000 	.word	0x42c80000
 8001b18:	447a0000 	.word	0x447a0000
 8001b1c:	200005a8 	.word	0x200005a8

08001b20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_DMA_Init+0x68>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a16      	ldr	r2, [pc, #88]	@ (8001b88 <MX_DMA_Init+0x68>)
 8001b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <MX_DMA_Init+0x68>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <MX_DMA_Init+0x68>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <MX_DMA_Init+0x68>)
 8001b4c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <MX_DMA_Init+0x68>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2100      	movs	r1, #0
 8001b62:	200c      	movs	r0, #12
 8001b64:	f003 fe3f 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b68:	200c      	movs	r0, #12
 8001b6a:	f003 fe58 	bl	800581e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2039      	movs	r0, #57	@ 0x39
 8001b74:	f003 fe37 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b78:	2039      	movs	r0, #57	@ 0x39
 8001b7a:	f003 fe50 	bl	800581e <HAL_NVIC_EnableIRQ>

}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 8001b96:	4b4d      	ldr	r3, [pc, #308]	@ (8001ccc <e22_init+0x140>)
 8001b98:	22c0      	movs	r2, #192	@ 0xc0
 8001b9a:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 8001b9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ccc <e22_init+0x140>)
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x04;	//6 bytes will be configured.
 8001ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <e22_init+0x140>)
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7c5b      	ldrb	r3, [r3, #17]
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7c1b      	ldrb	r3, [r3, #16]
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b25a      	sxtb	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7bdb      	ldrb	r3, [r3, #15]
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	015b      	lsls	r3, r3, #5
 8001bc4:	b25b      	sxtb	r3, r3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ccc <e22_init+0x140>)
 8001bce:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7d1b      	ldrb	r3, [r3, #20]
 8001bd4:	b25a      	sxtb	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7cdb      	ldrb	r3, [r3, #19]
 8001bda:	b25b      	sxtb	r3, r3
 8001bdc:	015b      	lsls	r3, r3, #5
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b25a      	sxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7c9b      	ldrb	r3, [r3, #18]
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	019b      	lsls	r3, r3, #6
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <e22_init+0x140>)
 8001bf6:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7d5a      	ldrb	r2, [r3, #21]
 8001bfc:	4b33      	ldr	r3, [pc, #204]	@ (8001ccc <e22_init+0x140>)
 8001bfe:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7edb      	ldrb	r3, [r3, #27]
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	7e9b      	ldrb	r3, [r3, #26]
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7e5b      	ldrb	r3, [r3, #25]
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b25a      	sxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7e1b      	ldrb	r3, [r3, #24]
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	015b      	lsls	r3, r3, #5
 8001c2a:	b25b      	sxtb	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b25a      	sxtb	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	7ddb      	ldrb	r3, [r3, #23]
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	019b      	lsls	r3, r3, #6
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7d9b      	ldrb	r3, [r3, #22]
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	01db      	lsls	r3, r3, #7
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <e22_init+0x140>)
 8001c50:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	8b9b      	ldrh	r3, [r3, #28]
 8001c56:	0a1b      	lsrs	r3, r3, #8
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <e22_init+0x140>)
 8001c5e:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	8b9b      	ldrh	r3, [r3, #28]
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <e22_init+0x140>)
 8001c68:	721a      	strb	r2, [r3, #8]


	//UART transmits the configuration datas.
	uint8_t response[7] = {0};
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	f8c3 2003 	str.w	r2, [r3, #3]
	for(int i = 0; i < 10; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e01d      	b.n	8001cb8 <e22_init+0x12c>
	{
		HAL_UART_Transmit(huart, data_packet, 7, 50);
 8001c7c:	2332      	movs	r3, #50	@ 0x32
 8001c7e:	2207      	movs	r2, #7
 8001c80:	4912      	ldr	r1, [pc, #72]	@ (8001ccc <e22_init+0x140>)
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f007 fdaa 	bl	80097dc <HAL_UART_Transmit>
		HAL_UART_Receive(huart, response, 7, 50);
 8001c88:	f107 010c 	add.w	r1, r7, #12
 8001c8c:	2332      	movs	r3, #50	@ 0x32
 8001c8e:	2207      	movs	r2, #7
 8001c90:	6838      	ldr	r0, [r7, #0]
 8001c92:	f007 fe2e 	bl	80098f2 <HAL_UART_Receive>
		if(memcmp(&response[1], &data_packet[1], 6) == 0)
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	490c      	ldr	r1, [pc, #48]	@ (8001cd0 <e22_init+0x144>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f00b fd5c 	bl	800d75e <memcmp>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <e22_init+0x134>
			break;
		HAL_Delay(10);
 8001cac:	200a      	movs	r0, #10
 8001cae:	f003 f89b 	bl	8004de8 <HAL_Delay>
	for(int i = 0; i < 10; i++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b09      	cmp	r3, #9
 8001cbc:	ddde      	ble.n	8001c7c <e22_init+0xf0>
	  }
	}
	*/


}
 8001cbe:	e000      	b.n	8001cc2 <e22_init+0x136>
			break;
 8001cc0:	bf00      	nop
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	200002f4 	.word	0x200002f4
 8001cd0:	200002f5 	.word	0x200002f5

08001cd4 <e22_transmit>:
  * @param  data: Pointer to the data string.
  * @param  huart: Pointer to the uart handler typedef.
  * @retval None
  */
void e22_transmit(e22_conf_struct_t *lora_conf_struct, uint8_t* data, UART_HandleTypeDef* huart, uint16_t len)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	807b      	strh	r3, [r7, #2]
	//For normal working mode M0 -> 0    M1 -> 0
	HAL_UART_Transmit(huart, data, len, 50);
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	2332      	movs	r3, #50	@ 0x32
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f007 fd77 	bl	80097dc <HAL_UART_Transmit>
}
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <e22_config_mode>:
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
}


void e22_config_mode(e22_conf_struct_t *lora_conf_struct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <e22_config_mode+0x28>)
 8001d08:	f004 fc9a 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <e22_config_mode+0x28>)
 8001d14:	f004 fc94 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020000 	.word	0x40020000

08001d24 <e22_transmit_mode>:

void e22_transmit_mode(e22_conf_struct_t *lora_conf_struct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d32:	4806      	ldr	r0, [pc, #24]	@ (8001d4c <e22_transmit_mode+0x28>)
 8001d34:	f004 fc84 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d3e:	4803      	ldr	r0, [pc, #12]	@ (8001d4c <e22_transmit_mode+0x28>)
 8001d40:	f004 fc7e 	bl	8006640 <HAL_GPIO_WritePin>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020000 	.word	0x40020000

08001d50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b75      	ldr	r3, [pc, #468]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a74      	ldr	r2, [pc, #464]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b72      	ldr	r3, [pc, #456]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b6e      	ldr	r3, [pc, #440]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a6d      	ldr	r2, [pc, #436]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b6b      	ldr	r3, [pc, #428]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b67      	ldr	r3, [pc, #412]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a66      	ldr	r2, [pc, #408]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b64      	ldr	r3, [pc, #400]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b60      	ldr	r3, [pc, #384]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dca:	4b5d      	ldr	r3, [pc, #372]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b59      	ldr	r3, [pc, #356]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a58      	ldr	r2, [pc, #352]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b56      	ldr	r3, [pc, #344]	@ (8001f40 <MX_GPIO_Init+0x1f0>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BUZZER_Pin|APOGE_STAT_DIS_Pin|APOGE_MOS_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f241 0109 	movw	r1, #4105	@ 0x1009
 8001df8:	4852      	ldr	r0, [pc, #328]	@ (8001f44 <MX_GPIO_Init+0x1f4>)
 8001dfa:	f004 fc21 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, APOGEE_LED_Pin|MAIN_LED_Pin|RF_M0_Pin|RF_M1_Pin, GPIO_PIN_SET);
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f641 0109 	movw	r1, #6153	@ 0x1809
 8001e04:	4850      	ldr	r0, [pc, #320]	@ (8001f48 <MX_GPIO_Init+0x1f8>)
 8001e06:	f004 fc1b 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENS_RES_Pin|USER_LED_Pin|SD_CS_Pin|FLASH_CS_Pin, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f248 0116 	movw	r1, #32790	@ 0x8016
 8001e10:	484d      	ldr	r0, [pc, #308]	@ (8001f48 <MX_GPIO_Init+0x1f8>)
 8001e12:	f004 fc15 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAIN_MOS_Pin|MAIN_STAT_DIS_Pin|IO_1_Pin|IO_0_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f246 0105 	movw	r1, #24581	@ 0x6005
 8001e1c:	484b      	ldr	r0, [pc, #300]	@ (8001f4c <MX_GPIO_Init+0x1fc>)
 8001e1e:	f004 fc0f 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_RES_GPIO_Port, FLASH_RES_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2104      	movs	r1, #4
 8001e26:	484a      	ldr	r0, [pc, #296]	@ (8001f50 <MX_GPIO_Init+0x200>)
 8001e28:	f004 fc0a 	bl	8006640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : APOGE_STAT_Pin SD_CD_Pin */
  GPIO_InitStruct.Pin = APOGE_STAT_Pin|SD_CD_Pin;
 8001e2c:	f242 0310 	movw	r3, #8208	@ 0x2010
 8001e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4840      	ldr	r0, [pc, #256]	@ (8001f44 <MX_GPIO_Init+0x1f4>)
 8001e42:	f004 f975 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin APOGE_STAT_DIS_Pin APOGE_MOS_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|APOGE_STAT_DIS_Pin|APOGE_MOS_Pin;
 8001e46:	f241 0309 	movw	r3, #4105	@ 0x1009
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4839      	ldr	r0, [pc, #228]	@ (8001f44 <MX_GPIO_Init+0x1f4>)
 8001e60:	f004 f966 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : APOGEE_LED_Pin SENS_RES_Pin USER_LED_Pin MAIN_LED_Pin
                           SD_CS_Pin RF_M0_Pin RF_M1_Pin FLASH_CS_Pin */
  GPIO_InitStruct.Pin = APOGEE_LED_Pin|SENS_RES_Pin|USER_LED_Pin|MAIN_LED_Pin
 8001e64:	f649 031f 	movw	r3, #38943	@ 0x981f
 8001e68:	617b      	str	r3, [r7, #20]
                          |SD_CS_Pin|RF_M0_Pin|RF_M1_Pin|FLASH_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4832      	ldr	r0, [pc, #200]	@ (8001f48 <MX_GPIO_Init+0x1f8>)
 8001e7e:	f004 f957 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_MOS_Pin MAIN_STAT_DIS_Pin IO_1_Pin IO_0_Pin */
  GPIO_InitStruct.Pin = MAIN_MOS_Pin|MAIN_STAT_DIS_Pin|IO_1_Pin|IO_0_Pin;
 8001e82:	f246 0305 	movw	r3, #24581	@ 0x6005
 8001e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	4619      	mov	r1, r3
 8001e9a:	482c      	ldr	r0, [pc, #176]	@ (8001f4c <MX_GPIO_Init+0x1fc>)
 8001e9c:	f004 f948 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_STAT_Pin GPS_LED_Pin FLASH_WP_Pin */
  GPIO_InitStruct.Pin = MAIN_STAT_Pin|GPS_LED_Pin|FLASH_WP_Pin;
 8001ea0:	f249 0302 	movw	r3, #36866	@ 0x9002
 8001ea4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4825      	ldr	r0, [pc, #148]	@ (8001f4c <MX_GPIO_Init+0x1fc>)
 8001eb6:	f004 f93b 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_GYRO_Pin */
  GPIO_InitStruct.Pin = INT_GYRO_Pin;
 8001eba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ebe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GYRO_GPIO_Port, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	481c      	ldr	r0, [pc, #112]	@ (8001f44 <MX_GPIO_Init+0x1f4>)
 8001ed2:	f004 f92d 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_ACC_Pin */
  GPIO_InitStruct.Pin = INT_ACC_Pin;
 8001ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001edc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ee0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_ACC_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4816      	ldr	r0, [pc, #88]	@ (8001f48 <MX_GPIO_Init+0x1f8>)
 8001eee:	f004 f91f 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_AUX_Pin */
  GPIO_InitStruct.Pin = RF_AUX_Pin;
 8001ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_AUX_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4810      	ldr	r0, [pc, #64]	@ (8001f48 <MX_GPIO_Init+0x1f8>)
 8001f08:	f004 f912 	bl	8006130 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_RES_Pin */
  GPIO_InitStruct.Pin = FLASH_RES_Pin;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_RES_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 0314 	add.w	r3, r7, #20
 8001f20:	4619      	mov	r1, r3
 8001f22:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <MX_GPIO_Init+0x200>)
 8001f24:	f004 f904 	bl	8006130 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2017      	movs	r0, #23
 8001f2e:	f003 fc5a 	bl	80057e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f32:	2017      	movs	r0, #23
 8001f34:	f003 fc73 	bl	800581e <HAL_NVIC_EnableIRQ>

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400
 8001f50:	40020c00 	.word	0x40020c00

08001f54 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f5a:	4a13      	ldr	r2, [pc, #76]	@ (8001fa8 <MX_I2C1_Init+0x54>)
 8001f5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <MX_I2C1_Init+0x58>)
 8001f62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f90:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <MX_I2C1_Init+0x50>)
 8001f92:	f004 fb87 	bl	80066a4 <HAL_I2C_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f9c:	f000 fdea 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000300 	.word	0x20000300
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	000186a0 	.word	0x000186a0

08001fb0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fb6:	4a13      	ldr	r2, [pc, #76]	@ (8002004 <MX_I2C3_Init+0x54>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001fba:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fbc:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <MX_I2C3_Init+0x58>)
 8001fbe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fd2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fec:	4804      	ldr	r0, [pc, #16]	@ (8002000 <MX_I2C3_Init+0x50>)
 8001fee:	f004 fb59 	bl	80066a4 <HAL_I2C_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ff8:	f000 fdbc 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000354 	.word	0x20000354
 8002004:	40005c00 	.word	0x40005c00
 8002008:	000186a0 	.word	0x000186a0

0800200c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	@ 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a42      	ldr	r2, [pc, #264]	@ (8002134 <HAL_I2C_MspInit+0x128>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d12d      	bne.n	800208a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a40      	ldr	r2, [pc, #256]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b3e      	ldr	r3, [pc, #248]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
 8002048:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800204a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002050:	2312      	movs	r3, #18
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800205c:	2304      	movs	r3, #4
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4835      	ldr	r0, [pc, #212]	@ (800213c <HAL_I2C_MspInit+0x130>)
 8002068:	f004 f862 	bl	8006130 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	4b31      	ldr	r3, [pc, #196]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a30      	ldr	r2, [pc, #192]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
 800207c:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002088:	e050      	b.n	800212c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2c      	ldr	r2, [pc, #176]	@ (8002140 <HAL_I2C_MspInit+0x134>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d14b      	bne.n	800212c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	4b27      	ldr	r3, [pc, #156]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 800209a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209c:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a4:	4b24      	ldr	r3, [pc, #144]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	4b20      	ldr	r3, [pc, #128]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d2:	2312      	movs	r3, #18
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020de:	2304      	movs	r3, #4
 80020e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e2:	f107 031c 	add.w	r3, r7, #28
 80020e6:	4619      	mov	r1, r3
 80020e8:	4816      	ldr	r0, [pc, #88]	@ (8002144 <HAL_I2C_MspInit+0x138>)
 80020ea:	f004 f821 	bl	8006130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f4:	2312      	movs	r3, #18
 80020f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002100:	2304      	movs	r3, #4
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 031c 	add.w	r3, r7, #28
 8002108:	4619      	mov	r1, r3
 800210a:	480f      	ldr	r0, [pc, #60]	@ (8002148 <HAL_I2C_MspInit+0x13c>)
 800210c:	f004 f810 	bl	8006130 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002118:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 800211a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800211e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_I2C_MspInit+0x12c>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
}
 800212c:	bf00      	nop
 800212e:	3730      	adds	r7, #48	@ 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40005400 	.word	0x40005400
 8002138:	40023800 	.word	0x40023800
 800213c:	40020400 	.word	0x40020400
 8002140:	40005c00 	.word	0x40005c00
 8002144:	40020800 	.word	0x40020800
 8002148:	40020000 	.word	0x40020000

0800214c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <HAL_I2C_MspDeInit+0x68>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d110      	bne.n	8002180 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800215e:	4b16      	ldr	r3, [pc, #88]	@ (80021b8 <HAL_I2C_MspDeInit+0x6c>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	4a15      	ldr	r2, [pc, #84]	@ (80021b8 <HAL_I2C_MspDeInit+0x6c>)
 8002164:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002168:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800216a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800216e:	4813      	ldr	r0, [pc, #76]	@ (80021bc <HAL_I2C_MspDeInit+0x70>)
 8002170:	f004 f972 	bl	8006458 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002178:	4810      	ldr	r0, [pc, #64]	@ (80021bc <HAL_I2C_MspDeInit+0x70>)
 800217a:	f004 f96d 	bl	8006458 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800217e:	e014      	b.n	80021aa <HAL_I2C_MspDeInit+0x5e>
  else if(i2cHandle->Instance==I2C3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0e      	ldr	r2, [pc, #56]	@ (80021c0 <HAL_I2C_MspDeInit+0x74>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10f      	bne.n	80021aa <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800218a:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <HAL_I2C_MspDeInit+0x6c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	4a0a      	ldr	r2, [pc, #40]	@ (80021b8 <HAL_I2C_MspDeInit+0x6c>)
 8002190:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002194:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8002196:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800219a:	480a      	ldr	r0, [pc, #40]	@ (80021c4 <HAL_I2C_MspDeInit+0x78>)
 800219c:	f004 f95c 	bl	8006458 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80021a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021a4:	4808      	ldr	r0, [pc, #32]	@ (80021c8 <HAL_I2C_MspDeInit+0x7c>)
 80021a6:	f004 f957 	bl	8006458 <HAL_GPIO_DeInit>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40005400 	.word	0x40005400
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	40005c00 	.word	0x40005c00
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	00000000 	.word	0x00000000

080021d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d6:	f002 fd95 	bl	8004d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021da:	f000 f99d 	bl	8002518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021de:	f7ff fdb7 	bl	8001d50 <MX_GPIO_Init>
  MX_DMA_Init();
 80021e2:	f7ff fc9d 	bl	8001b20 <MX_DMA_Init>
  MX_I2C1_Init();
 80021e6:	f7ff feb5 	bl	8001f54 <MX_I2C1_Init>
  MX_I2C3_Init();
 80021ea:	f7ff fee1 	bl	8001fb0 <MX_I2C3_Init>
  MX_SPI1_Init();
 80021ee:	f001 f967 	bl	80034c0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80021f2:	f001 f99b 	bl	800352c <MX_SPI3_Init>
  MX_UART4_Init();
 80021f6:	f002 f8c3 	bl	8004380 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80021fa:	f002 f8eb 	bl	80043d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80021fe:	f002 f913 	bl	8004428 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002202:	f002 f93b 	bl	800447c <MX_USART6_UART_Init>
  MX_RTC_Init();
 8002206:	f001 f90b 	bl	8003420 <MX_RTC_Init>
  MX_TIM3_Init();
 800220a:	f001 fc0f 	bl	8003a2c <MX_TIM3_Init>
  MX_TIM4_Init();
 800220e:	f001 fc5b 	bl	8003ac8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002212:	f001 fca7 	bl	8003b64 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002216:	f001 fcf3 	bl	8003c00 <MX_TIM6_Init>
  MX_TIM7_Init();
 800221a:	f001 fd27 	bl	8003c6c <MX_TIM7_Init>
  MX_TIM9_Init();
 800221e:	f001 fd5b 	bl	8003cd8 <MX_TIM9_Init>
  MX_ADC1_Init();
 8002222:	f7ff f87b 	bl	800131c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002226:	f7ff f8cb 	bl	80013c0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_PWR_EnableBkUpAccess();
 800222a:	f005 fa8f 	bl	800774c <HAL_PWR_EnableBkUpAccess>
  RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 800222e:	4b9a      	ldr	r3, [pc, #616]	@ (8002498 <main+0x2c8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a99      	ldr	r2, [pc, #612]	@ (8002498 <main+0x2c8>)
 8002234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
  HAL_PWR_EnableBkUpReg();
 800223a:	f005 fa9b 	bl	8007774 <HAL_PWREx_EnableBkUpReg>

  HAL_GPIO_WritePin(SENS_RES_GPIO_Port, SENS_RES_Pin, GPIO_PIN_SET);
 800223e:	2201      	movs	r2, #1
 8002240:	2102      	movs	r1, #2
 8002242:	4896      	ldr	r0, [pc, #600]	@ (800249c <main+0x2cc>)
 8002244:	f004 f9fc 	bl	8006640 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002248:	2032      	movs	r0, #50	@ 0x32
 800224a:	f002 fdcd 	bl	8004de8 <HAL_Delay>
  HAL_GPIO_WritePin(SENS_RES_GPIO_Port, SENS_RES_Pin, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	2102      	movs	r1, #2
 8002252:	4892      	ldr	r0, [pc, #584]	@ (800249c <main+0x2cc>)
 8002254:	f004 f9f4 	bl	8006640 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8002258:	2032      	movs	r0, #50	@ 0x32
 800225a:	f002 fdc5 	bl	8004de8 <HAL_Delay>

  uint8_t bme_ret = bme280_begin();
 800225e:	f000 f9cf 	bl	8002600 <bme280_begin>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
  if(bme_ret)
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <main+0xa4>
  {
	  serial_println("bme sensor fail", &TTL_HNDLR);
 800226c:	498c      	ldr	r1, [pc, #560]	@ (80024a0 <main+0x2d0>)
 800226e:	488d      	ldr	r0, [pc, #564]	@ (80024a4 <main+0x2d4>)
 8002270:	f000 fa96 	bl	80027a0 <serial_println>
  else
  {
	  //serial_println("bme sensor success", &TTL_HNDLR);
  }

  bme280_config(&bme_sensor_s);
 8002274:	488c      	ldr	r0, [pc, #560]	@ (80024a8 <main+0x2d8>)
 8002276:	f008 fe4f 	bl	800af18 <bme280_config>

  uint8_t bmi_ret = bmi088_begin();
 800227a:	f000 fa5b 	bl	8002734 <bmi088_begin>
 800227e:	4603      	mov	r3, r0
 8002280:	73bb      	strb	r3, [r7, #14]
  if(bmi_ret)
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d01d      	beq.n	80022c4 <main+0xf4>
  {
	  serial_println("bmi fail", &TTL_HNDLR);
 8002288:	4985      	ldr	r1, [pc, #532]	@ (80024a0 <main+0x2d0>)
 800228a:	4888      	ldr	r0, [pc, #544]	@ (80024ac <main+0x2dc>)
 800228c:	f000 fa88 	bl	80027a0 <serial_println>
      if((bmi_ret & 0x01) == 0x01)
 8002290:	7bbb      	ldrb	r3, [r7, #14]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <main+0xda>
      {
        sprintf((char*)str, "error in accel");
 800229a:	4985      	ldr	r1, [pc, #532]	@ (80024b0 <main+0x2e0>)
 800229c:	4885      	ldr	r0, [pc, #532]	@ (80024b4 <main+0x2e4>)
 800229e:	f00b f9cb 	bl	800d638 <siprintf>
        serial_println((char*) str, &TTL_HNDLR);
 80022a2:	497f      	ldr	r1, [pc, #508]	@ (80024a0 <main+0x2d0>)
 80022a4:	4883      	ldr	r0, [pc, #524]	@ (80024b4 <main+0x2e4>)
 80022a6:	f000 fa7b 	bl	80027a0 <serial_println>
      }
      if((bmi_ret & 0x02) == 0x02)
 80022aa:	7bbb      	ldrb	r3, [r7, #14]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d007      	beq.n	80022c4 <main+0xf4>
      {
        sprintf((char*)str, "error in gyro");
 80022b4:	4980      	ldr	r1, [pc, #512]	@ (80024b8 <main+0x2e8>)
 80022b6:	487f      	ldr	r0, [pc, #508]	@ (80024b4 <main+0x2e4>)
 80022b8:	f00b f9be 	bl	800d638 <siprintf>
        serial_println((char*) str, &TTL_HNDLR);
 80022bc:	4978      	ldr	r1, [pc, #480]	@ (80024a0 <main+0x2d0>)
 80022be:	487d      	ldr	r0, [pc, #500]	@ (80024b4 <main+0x2e4>)
 80022c0:	f000 fa6e 	bl	80027a0 <serial_println>
  else
  {
	  //serial_println("bmi success", &TTL_HNDLR);
  }

    bmi088_config(&bmi_imu_s);
 80022c4:	487d      	ldr	r0, [pc, #500]	@ (80024bc <main+0x2ec>)
 80022c6:	f009 fc07 	bl	800bad8 <bmi088_config>
    get_offset(&bmi_imu_s);
 80022ca:	487c      	ldr	r0, [pc, #496]	@ (80024bc <main+0x2ec>)
 80022cc:	f00a f950 	bl	800c570 <get_offset>

    ukb_test_init(&test_datas);
 80022d0:	487b      	ldr	r0, [pc, #492]	@ (80024c0 <main+0x2f0>)
 80022d2:	f001 fdf9 	bl	8003ec8 <ukb_test_init>
    quaternon_init(backup_datas->q);
 80022d6:	4b7b      	ldr	r3, [pc, #492]	@ (80024c4 <main+0x2f4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	3344      	adds	r3, #68	@ 0x44
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fc4f 	bl	8002b80 <quaternon_init>
    bmi088_update(&bmi_imu_s);
 80022e2:	4876      	ldr	r0, [pc, #472]	@ (80024bc <main+0x2ec>)
 80022e4:	f009 fdf8 	bl	800bed8 <bmi088_update>
    getInitialQuaternion(bmi_imu_s.datas.acc_x, bmi_imu_s.datas.acc_y, bmi_imu_s.datas.acc_z);
 80022e8:	4b74      	ldr	r3, [pc, #464]	@ (80024bc <main+0x2ec>)
 80022ea:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80022ee:	4b73      	ldr	r3, [pc, #460]	@ (80024bc <main+0x2ec>)
 80022f0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80022f4:	4b71      	ldr	r3, [pc, #452]	@ (80024bc <main+0x2ec>)
 80022f6:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 80022fa:	eeb0 1a66 	vmov.f32	s2, s13
 80022fe:	eef0 0a47 	vmov.f32	s1, s14
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	f000 ff7b 	bl	8003200 <getInitialQuaternion>


    // GNSS config baud rate 57600 with PMTK command.
    serial_println("$PMTK251,57600*2C", &GPS_UART_HNDLR);	// GNSS baud set 57600
 800230a:	496f      	ldr	r1, [pc, #444]	@ (80024c8 <main+0x2f8>)
 800230c:	486f      	ldr	r0, [pc, #444]	@ (80024cc <main+0x2fc>)
 800230e:	f000 fa47 	bl	80027a0 <serial_println>
    HAL_UART_DeInit(&GPS_UART_HNDLR);
 8002312:	486d      	ldr	r0, [pc, #436]	@ (80024c8 <main+0x2f8>)
 8002314:	f007 fa30 	bl	8009778 <HAL_UART_DeInit>
    GPS_UART_HNDLR.Init.BaudRate = 57600;
 8002318:	4b6b      	ldr	r3, [pc, #428]	@ (80024c8 <main+0x2f8>)
 800231a:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800231e:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&GPS_UART_HNDLR);
 8002320:	4869      	ldr	r0, [pc, #420]	@ (80024c8 <main+0x2f8>)
 8002322:	f007 f9d9 	bl	80096d8 <HAL_UART_Init>
    UsrGpsL86Init(&GPS_UART_HNDLR);
 8002326:	4868      	ldr	r0, [pc, #416]	@ (80024c8 <main+0x2f8>)
 8002328:	f002 fac8 	bl	80048bc <UsrGpsL86Init>
    //VIEW_GPS()											// Read and write to TTL raw GNSS raw value.

    // Lora module config.
    e22_config_mode(&lora_1);
 800232c:	4868      	ldr	r0, [pc, #416]	@ (80024d0 <main+0x300>)
 800232e:	f7ff fce3 	bl	8001cf8 <e22_config_mode>
    HAL_Delay(20);
 8002332:	2014      	movs	r0, #20
 8002334:	f002 fd58 	bl	8004de8 <HAL_Delay>
    lora_init();
 8002338:	f000 fbde 	bl	8002af8 <lora_init>

    // Config phase finished beep.
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 800233c:	2201      	movs	r2, #1
 800233e:	2101      	movs	r1, #1
 8002340:	4864      	ldr	r0, [pc, #400]	@ (80024d4 <main+0x304>)
 8002342:	f004 f97d 	bl	8006640 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8002346:	2064      	movs	r0, #100	@ 0x64
 8002348:	f002 fd4e 	bl	8004de8 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	2101      	movs	r1, #1
 8002350:	4860      	ldr	r0, [pc, #384]	@ (80024d4 <main+0x304>)
 8002352:	f004 f975 	bl	8006640 <HAL_GPIO_WritePin>

    // Start timer interrupts.
    HAL_TIM_Base_Start_IT(&htim5);
 8002356:	4860      	ldr	r0, [pc, #384]	@ (80024d8 <main+0x308>)
 8002358:	f006 fd70 	bl	8008e3c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 800235c:	485f      	ldr	r0, [pc, #380]	@ (80024dc <main+0x30c>)
 800235e:	f006 fd6d 	bl	8008e3c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8002362:	485f      	ldr	r0, [pc, #380]	@ (80024e0 <main+0x310>)
 8002364:	f006 fd6a 	bl	8008e3c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim9);
 8002368:	485e      	ldr	r0, [pc, #376]	@ (80024e4 <main+0x314>)
 800236a:	f006 fd67 	bl	8008e3c <HAL_TIM_Base_Start_IT>

    // Start receiving DMA form GNSS UART.
    HAL_UART_Receive_DMA(&RS232_HNDLR, dma_rx_buf, RX_BUFFER_LEN + 6);
 800236e:	4b5e      	ldr	r3, [pc, #376]	@ (80024e8 <main+0x318>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	222a      	movs	r2, #42	@ 0x2a
 8002374:	4619      	mov	r1, r3
 8002376:	485d      	ldr	r0, [pc, #372]	@ (80024ec <main+0x31c>)
 8002378:	f007 fb52 	bl	8009a20 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(&RS232_HNDLR, UART_IT_IDLE);
 800237c:	4b5b      	ldr	r3, [pc, #364]	@ (80024ec <main+0x31c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	4b5a      	ldr	r3, [pc, #360]	@ (80024ec <main+0x31c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0210 	orr.w	r2, r2, #16
 800238a:	60da      	str	r2, [r3, #12]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  bme280_update(&bme_sensor_s);
 800238c:	4846      	ldr	r0, [pc, #280]	@ (80024a8 <main+0x2d8>)
 800238e:	f008 ff77 	bl	800b280 <bme280_update>
	  bmi088_update(&bmi_imu_s);
 8002392:	484a      	ldr	r0, [pc, #296]	@ (80024bc <main+0x2ec>)
 8002394:	f009 fda0 	bl	800bed8 <bmi088_update>

	  if(get_test_mode() != last_mode)
 8002398:	f001 ff96 	bl	80042c8 <get_test_mode>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	4b53      	ldr	r3, [pc, #332]	@ (80024f0 <main+0x320>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d029      	beq.n	80023fc <main+0x22c>
	  {
		  last_mode = get_test_mode();
 80023a8:	f001 ff8e 	bl	80042c8 <get_test_mode>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	4b4f      	ldr	r3, [pc, #316]	@ (80024f0 <main+0x320>)
 80023b2:	701a      	strb	r2, [r3, #0]
		  switch(get_test_mode())
 80023b4:	f001 ff88 	bl	80042c8 <get_test_mode>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d017      	beq.n	80023ee <main+0x21e>
 80023be:	2b02      	cmp	r3, #2
 80023c0:	dc1c      	bgt.n	80023fc <main+0x22c>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <main+0x1fc>
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d00a      	beq.n	80023e0 <main+0x210>
 80023ca:	e017      	b.n	80023fc <main+0x22c>
		  {
		  case 0:
			  HAL_TIM_Base_Stop_IT(&htim4);
 80023cc:	4849      	ldr	r0, [pc, #292]	@ (80024f4 <main+0x324>)
 80023ce:	f006 fda5 	bl	8008f1c <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Stop_IT(&htim3);
 80023d2:	4849      	ldr	r0, [pc, #292]	@ (80024f8 <main+0x328>)
 80023d4:	f006 fda2 	bl	8008f1c <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Start_IT(&htim5);
 80023d8:	483f      	ldr	r0, [pc, #252]	@ (80024d8 <main+0x308>)
 80023da:	f006 fd2f 	bl	8008e3c <HAL_TIM_Base_Start_IT>
			  break;
 80023de:	e00d      	b.n	80023fc <main+0x22c>

		  case 1:
			  HAL_TIM_Base_Stop_IT(&htim5);
 80023e0:	483d      	ldr	r0, [pc, #244]	@ (80024d8 <main+0x308>)
 80023e2:	f006 fd9b 	bl	8008f1c <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Start_IT(&htim3);
 80023e6:	4844      	ldr	r0, [pc, #272]	@ (80024f8 <main+0x328>)
 80023e8:	f006 fd28 	bl	8008e3c <HAL_TIM_Base_Start_IT>
			  break;
 80023ec:	e006      	b.n	80023fc <main+0x22c>

		  case 2:
			  HAL_TIM_Base_Stop_IT(&htim5);
 80023ee:	483a      	ldr	r0, [pc, #232]	@ (80024d8 <main+0x308>)
 80023f0:	f006 fd94 	bl	8008f1c <HAL_TIM_Base_Stop_IT>
			  HAL_TIM_Base_Start_IT(&htim4);
 80023f4:	483f      	ldr	r0, [pc, #252]	@ (80024f4 <main+0x324>)
 80023f6:	f006 fd21 	bl	8008e3c <HAL_TIM_Base_Start_IT>
			  break;
 80023fa:	bf00      	nop
		  }
	  }
	  if(is_1second)	// This condition works at 1Hz.
 80023fc:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <main+0x32c>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0c3      	beq.n	800238c <main+0x1bc>
	  {
		  is_1second = 0;
 8002404:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <main+0x32c>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
		  Usr_GpsL86GetValues(&gps_s, &GPS_UART_HNDLR);
 800240a:	492f      	ldr	r1, [pc, #188]	@ (80024c8 <main+0x2f8>)
 800240c:	483c      	ldr	r0, [pc, #240]	@ (8002500 <main+0x330>)
 800240e:	f002 fa7b 	bl	8004908 <Usr_GpsL86GetValues>

		  HAL_ADC_Start(&hadc1);
 8002412:	483c      	ldr	r0, [pc, #240]	@ (8002504 <main+0x334>)
 8002414:	f002 fd50 	bl	8004eb8 <HAL_ADC_Start>
		  HAL_ADC_Start(&hadc2);
 8002418:	483b      	ldr	r0, [pc, #236]	@ (8002508 <main+0x338>)
 800241a:	f002 fd4d 	bl	8004eb8 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 2);
 800241e:	2102      	movs	r1, #2
 8002420:	4838      	ldr	r0, [pc, #224]	@ (8002504 <main+0x334>)
 8002422:	f002 fe1b 	bl	800505c <HAL_ADC_PollForConversion>
		  HAL_ADC_PollForConversion(&hadc2, 2);
 8002426:	2102      	movs	r1, #2
 8002428:	4837      	ldr	r0, [pc, #220]	@ (8002508 <main+0x338>)
 800242a:	f002 fe17 	bl	800505c <HAL_ADC_PollForConversion>
		  float volt = (float)HAL_ADC_GetValue(&hadc1) * VOLT_COEF;
 800242e:	4835      	ldr	r0, [pc, #212]	@ (8002504 <main+0x334>)
 8002430:	f002 fe9f 	bl	8005172 <HAL_ADC_GetValue>
 8002434:	ee07 0a90 	vmov	s15, r0
 8002438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800250c <main+0x33c>
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	edc7 7a02 	vstr	s15, [r7, #8]
		  float current = (float)HAL_ADC_GetValue(&hadc2) * CRNT_COEF;
 8002448:	482f      	ldr	r0, [pc, #188]	@ (8002508 <main+0x338>)
 800244a:	f002 fe92 	bl	8005172 <HAL_ADC_GetValue>
 800244e:	ee07 0a90 	vmov	s15, r0
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002510 <main+0x340>
 800245a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245e:	edc7 7a01 	vstr	s15, [r7, #4]
		  power_s.voltage = volt + 0.05; // Offset val added.
 8002462:	68b8      	ldr	r0, [r7, #8]
 8002464:	f7fe f890 	bl	8000588 <__aeabi_f2d>
 8002468:	a309      	add	r3, pc, #36	@ (adr r3, 8002490 <main+0x2c0>)
 800246a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246e:	f7fd ff2d 	bl	80002cc <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fbd5 	bl	8000c28 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	4a24      	ldr	r2, [pc, #144]	@ (8002514 <main+0x344>)
 8002482:	6013      	str	r3, [r2, #0]
		  power_s.current = current;
 8002484:	4a23      	ldr	r2, [pc, #140]	@ (8002514 <main+0x344>)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6053      	str	r3, [r2, #4]
	  bme280_update(&bme_sensor_s);
 800248a:	e77f      	b.n	800238c <main+0x1bc>
 800248c:	f3af 8000 	nop.w
 8002490:	9999999a 	.word	0x9999999a
 8002494:	3fa99999 	.word	0x3fa99999
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000
 80024a0:	200008c0 	.word	0x200008c0
 80024a4:	08013358 	.word	0x08013358
 80024a8:	200003a8 	.word	0x200003a8
 80024ac:	08013368 	.word	0x08013368
 80024b0:	08013374 	.word	0x08013374
 80024b4:	20000438 	.word	0x20000438
 80024b8:	08013384 	.word	0x08013384
 80024bc:	200003d0 	.word	0x200003d0
 80024c0:	20000500 	.word	0x20000500
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000950 	.word	0x20000950
 80024cc:	08013394 	.word	0x08013394
 80024d0:	2000057c 	.word	0x2000057c
 80024d4:	40020800 	.word	0x40020800
 80024d8:	2000074c 	.word	0x2000074c
 80024dc:	20000794 	.word	0x20000794
 80024e0:	200007dc 	.word	0x200007dc
 80024e4:	20000824 	.word	0x20000824
 80024e8:	20000688 	.word	0x20000688
 80024ec:	20000908 	.word	0x20000908
 80024f0:	2000053c 	.word	0x2000053c
 80024f4:	20000704 	.word	0x20000704
 80024f8:	200006bc 	.word	0x200006bc
 80024fc:	20000570 	.word	0x20000570
 8002500:	20000540 	.word	0x20000540
 8002504:	2000020c 	.word	0x2000020c
 8002508:	20000254 	.word	0x20000254
 800250c:	3b533333 	.word	0x3b533333
 8002510:	3a533334 	.word	0x3a533334
 8002514:	200005a0 	.word	0x200005a0

08002518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b094      	sub	sp, #80	@ 0x50
 800251c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	2234      	movs	r2, #52	@ 0x34
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f00b f929 	bl	800d77e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800252c:	f107 0308 	add.w	r3, r7, #8
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	2300      	movs	r3, #0
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	4b2d      	ldr	r3, [pc, #180]	@ (80025f8 <SystemClock_Config+0xe0>)
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <SystemClock_Config+0xe0>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254a:	6413      	str	r3, [r2, #64]	@ 0x40
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <SystemClock_Config+0xe0>)
 800254e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002558:	2300      	movs	r3, #0
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <SystemClock_Config+0xe4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a26      	ldr	r2, [pc, #152]	@ (80025fc <SystemClock_Config+0xe4>)
 8002562:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b24      	ldr	r3, [pc, #144]	@ (80025fc <SystemClock_Config+0xe4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002570:	603b      	str	r3, [r7, #0]
 8002572:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002574:	2306      	movs	r3, #6
 8002576:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257c:	2301      	movs	r3, #1
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002580:	2310      	movs	r3, #16
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002584:	2302      	movs	r3, #2
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002588:	2300      	movs	r3, #0
 800258a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800258c:	2308      	movs	r3, #8
 800258e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002590:	23b4      	movs	r3, #180	@ 0xb4
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002594:	2302      	movs	r3, #2
 8002596:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002598:	2302      	movs	r3, #2
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800259c:	2302      	movs	r3, #2
 800259e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4618      	mov	r0, r3
 80025a6:	f005 ffcf 	bl	8008548 <HAL_RCC_OscConfig>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80025b0:	f000 fae0 	bl	8002b74 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80025b4:	f005 f904 	bl	80077c0 <HAL_PWREx_EnableOverDrive>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80025be:	f000 fad9 	bl	8002b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c2:	230f      	movs	r3, #15
 80025c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c6:	2302      	movs	r3, #2
 80025c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025da:	f107 0308 	add.w	r3, r7, #8
 80025de:	2105      	movs	r1, #5
 80025e0:	4618      	mov	r0, r3
 80025e2:	f005 f93d 	bl	8007860 <HAL_RCC_ClockConfig>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80025ec:	f000 fac2 	bl	8002b74 <Error_Handler>
  }
}
 80025f0:	bf00      	nop
 80025f2:	3750      	adds	r7, #80	@ 0x50
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000

08002600 <bme280_begin>:

/* USER CODE BEGIN 4 */
uint8_t bme280_begin()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	bme_sensor_s.device_config.filter = BME280_FILTER_8;
 8002604:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <bme280_begin+0x38>)
 8002606:	2203      	movs	r2, #3
 8002608:	719a      	strb	r2, [r3, #6]
	bme_sensor_s.device_config.mode = BME280_MODE_NORMAL;
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <bme280_begin+0x38>)
 800260c:	2203      	movs	r2, #3
 800260e:	711a      	strb	r2, [r3, #4]
	bme_sensor_s.device_config.over_sampling = BME280_OS_8;
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <bme280_begin+0x38>)
 8002612:	2204      	movs	r2, #4
 8002614:	715a      	strb	r2, [r3, #5]
	bme_sensor_s.device_config.period = BME280_PERIOD_05;
 8002616:	4b08      	ldr	r3, [pc, #32]	@ (8002638 <bme280_begin+0x38>)
 8002618:	2200      	movs	r2, #0
 800261a:	71da      	strb	r2, [r3, #7]
	bme_sensor_s.device_config.BME_I2C = &BAR_I2C_HNDLR;
 800261c:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <bme280_begin+0x38>)
 800261e:	4a07      	ldr	r2, [pc, #28]	@ (800263c <bme280_begin+0x3c>)
 8002620:	609a      	str	r2, [r3, #8]
	bme_sensor_s.parameters = &backup_datas->bme_params; //if no backup data, write NULL
 8002622:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <bme280_begin+0x40>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	4b03      	ldr	r3, [pc, #12]	@ (8002638 <bme280_begin+0x38>)
 800262a:	601a      	str	r2, [r3, #0]
	return bme280_init(&bme_sensor_s);
 800262c:	4802      	ldr	r0, [pc, #8]	@ (8002638 <bme280_begin+0x38>)
 800262e:	f008 fe00 	bl	800b232 <bme280_init>
 8002632:	4603      	mov	r3, r0
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200003a8 	.word	0x200003a8
 800263c:	20000300 	.word	0x20000300
 8002640:	20000000 	.word	0x20000000
 8002644:	00000000 	.word	0x00000000

08002648 <bmi_callback>:

void bmi_callback(bmi088_struct_t *BMI)
{
 8002648:	b5b0      	push	{r4, r5, r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	updateQuaternion(-BMI->datas.gyro_z * M_PI / 180.0, BMI->datas.gyro_x * M_PI / 180.0, -BMI->datas.gyro_y * M_PI / 180.0, BMI->datas.delta_time);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	edd3 7a08 	vldr	s15, [r3, #32]
 8002656:	eef1 7a67 	vneg.f32	s15, s15
 800265a:	ee17 3a90 	vmov	r3, s15
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff92 	bl	8000588 <__aeabi_f2d>
 8002664:	a330      	add	r3, pc, #192	@ (adr r3, 8002728 <bmi_callback+0xe0>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffe5 	bl	8000638 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b2d      	ldr	r3, [pc, #180]	@ (8002730 <bmi_callback+0xe8>)
 800267c:	f7fe f906 	bl	800088c <__aeabi_ddiv>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe face 	bl	8000c28 <__aeabi_d2f>
 800268c:	4604      	mov	r4, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff78 	bl	8000588 <__aeabi_f2d>
 8002698:	a323      	add	r3, pc, #140	@ (adr r3, 8002728 <bmi_callback+0xe0>)
 800269a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269e:	f7fd ffcb 	bl	8000638 <__aeabi_dmul>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4610      	mov	r0, r2
 80026a8:	4619      	mov	r1, r3
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	4b20      	ldr	r3, [pc, #128]	@ (8002730 <bmi_callback+0xe8>)
 80026b0:	f7fe f8ec 	bl	800088c <__aeabi_ddiv>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4610      	mov	r0, r2
 80026ba:	4619      	mov	r1, r3
 80026bc:	f7fe fab4 	bl	8000c28 <__aeabi_d2f>
 80026c0:	4605      	mov	r5, r0
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80026c8:	eef1 7a67 	vneg.f32	s15, s15
 80026cc:	ee17 3a90 	vmov	r3, s15
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff59 	bl	8000588 <__aeabi_f2d>
 80026d6:	a314      	add	r3, pc, #80	@ (adr r3, 8002728 <bmi_callback+0xe0>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ffac 	bl	8000638 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	4b10      	ldr	r3, [pc, #64]	@ (8002730 <bmi_callback+0xe8>)
 80026ee:	f7fe f8cd 	bl	800088c <__aeabi_ddiv>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fa95 	bl	8000c28 <__aeabi_d2f>
 80026fe:	4602      	mov	r2, r0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002706:	eef0 1a67 	vmov.f32	s3, s15
 800270a:	ee01 2a10 	vmov	s2, r2
 800270e:	ee00 5a90 	vmov	s1, r5
 8002712:	ee00 4a10 	vmov	s0, r4
 8002716:	f000 fa43 	bl	8002ba0 <updateQuaternion>
	quaternionToEuler();
 800271a:	f000 fba9 	bl	8002e70 <quaternionToEuler>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bdb0      	pop	{r4, r5, r7, pc}
 8002726:	bf00      	nop
 8002728:	54442d18 	.word	0x54442d18
 800272c:	400921fb 	.word	0x400921fb
 8002730:	40668000 	.word	0x40668000

08002734 <bmi088_begin>:
uint8_t bmi088_begin(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	//Acc config
	bmi_imu_s.device_config.acc_bandwith = ACC_BWP_OSR4;
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <bmi088_begin+0x5c>)
 800273a:	2208      	movs	r2, #8
 800273c:	719a      	strb	r2, [r3, #6]
	bmi_imu_s.device_config.acc_outputDateRate = ACC_ODR_200;
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <bmi088_begin+0x5c>)
 8002740:	2209      	movs	r2, #9
 8002742:	71da      	strb	r2, [r3, #7]
	bmi_imu_s.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <bmi088_begin+0x5c>)
 8002746:	2200      	movs	r2, #0
 8002748:	711a      	strb	r2, [r3, #4]
	bmi_imu_s.device_config.acc_range = ACC_RANGE_24G;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <bmi088_begin+0x5c>)
 800274c:	2203      	movs	r2, #3
 800274e:	715a      	strb	r2, [r3, #5]

	// Gyro config
	bmi_imu_s.device_config.gyro_bandWidth = GYRO_BW_116;
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <bmi088_begin+0x5c>)
 8002752:	2202      	movs	r2, #2
 8002754:	725a      	strb	r2, [r3, #9]
	bmi_imu_s.device_config.gyro_range = GYRO_RANGE_2000;
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <bmi088_begin+0x5c>)
 8002758:	2200      	movs	r2, #0
 800275a:	729a      	strb	r2, [r3, #10]
	bmi_imu_s.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <bmi088_begin+0x5c>)
 800275e:	2200      	movs	r2, #0
 8002760:	721a      	strb	r2, [r3, #8]

	//Device config
	bmi_imu_s.device_config.acc_IRQ = ACC_IRQ;
 8002762:	4b0b      	ldr	r3, [pc, #44]	@ (8002790 <bmi088_begin+0x5c>)
 8002764:	2217      	movs	r2, #23
 8002766:	741a      	strb	r2, [r3, #16]
	bmi_imu_s.device_config.gyro_IRQ = GYRO_IRQ;
 8002768:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <bmi088_begin+0x5c>)
 800276a:	2217      	movs	r2, #23
 800276c:	745a      	strb	r2, [r3, #17]
	bmi_imu_s.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <bmi088_begin+0x5c>)
 8002770:	4a08      	ldr	r2, [pc, #32]	@ (8002794 <bmi088_begin+0x60>)
 8002772:	60da      	str	r2, [r3, #12]
	bmi_imu_s.device_config.offsets = &backup_datas->bmi_offsets;	//Offset datas stored in backup sram for saving them unwanted reset.
 8002774:	4b08      	ldr	r3, [pc, #32]	@ (8002798 <bmi088_begin+0x64>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	332c      	adds	r3, #44	@ 0x2c
 800277a:	4a05      	ldr	r2, [pc, #20]	@ (8002790 <bmi088_begin+0x5c>)
 800277c:	6153      	str	r3, [r2, #20]
	bmi_imu_s.IMU_callback = bmi_callback;
 800277e:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <bmi088_begin+0x5c>)
 8002780:	4a06      	ldr	r2, [pc, #24]	@ (800279c <bmi088_begin+0x68>)
 8002782:	665a      	str	r2, [r3, #100]	@ 0x64
	return	bmi088_init(&bmi_imu_s);
 8002784:	4802      	ldr	r0, [pc, #8]	@ (8002790 <bmi088_begin+0x5c>)
 8002786:	f009 f94f 	bl	800ba28 <bmi088_init>
 800278a:	4603      	mov	r3, r0
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200003d0 	.word	0x200003d0
 8002794:	20000354 	.word	0x20000354
 8002798:	20000000 	.word	0x20000000
 800279c:	08002649 	.word	0x08002649

080027a0 <serial_println>:

void serial_println(char* str, UART_HandleTypeDef *huart_disp)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]

	HAL_UART_Transmit(huart_disp, (uint8_t*)str, strlen(str), 50);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7fd fd80 	bl	80002b0 <strlen>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2332      	movs	r3, #50	@ 0x32
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	6838      	ldr	r0, [r7, #0]
 80027ba:	f007 f80f 	bl	80097dc <HAL_UART_Transmit>
	HAL_UART_Transmit(huart_disp, (uint8_t*)"\r\n", 2, 50);
 80027be:	2332      	movs	r3, #50	@ 0x32
 80027c0:	2202      	movs	r2, #2
 80027c2:	4904      	ldr	r1, [pc, #16]	@ (80027d4 <serial_println+0x34>)
 80027c4:	6838      	ldr	r0, [r7, #0]
 80027c6:	f007 f809 	bl	80097dc <HAL_UART_Transmit>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	080133a8 	.word	0x080133a8

080027d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == INT_ACC_Pin)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e8:	d102      	bne.n	80027f0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		bmi088_set_accel_INT(&bmi_imu_s);
 80027ea:	4807      	ldr	r0, [pc, #28]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30>)
 80027ec:	f009 fea6 	bl	800c53c <bmi088_set_accel_INT>
	}
	if(GPIO_Pin == INT_GYRO_Pin)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027f6:	d102      	bne.n	80027fe <HAL_GPIO_EXTI_Callback+0x26>
	{
		bmi088_set_gyro_INT(&bmi_imu_s);
 80027f8:	4803      	ldr	r0, [pc, #12]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x30>)
 80027fa:	f009 feac 	bl	800c556 <bmi088_set_gyro_INT>
	}
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200003d0 	.word	0x200003d0

0800280c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08e      	sub	sp, #56	@ 0x38
 8002810:	af02      	add	r7, sp, #8
 8002812:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a7f      	ldr	r2, [pc, #508]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d123      	bne.n	8002866 <HAL_TIM_PeriodElapsedCallback+0x5a>
    {
		rocket_flight_datas.altitude = test_datas.altitude;
 800281e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7f      	ldr	r2, [pc, #508]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002824:	6013      	str	r3, [r2, #0]
		rocket_flight_datas.accel_X = test_datas.accel_X;
 8002826:	4b7d      	ldr	r3, [pc, #500]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800282c:	6053      	str	r3, [r2, #4]
		rocket_flight_datas.accel_Y = test_datas.accel_Y;
 800282e:	4b7b      	ldr	r3, [pc, #492]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	4a7b      	ldr	r2, [pc, #492]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002834:	6093      	str	r3, [r2, #8]
		rocket_flight_datas.accel_Z = test_datas.accel_Z;
 8002836:	4b79      	ldr	r3, [pc, #484]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	4a79      	ldr	r2, [pc, #484]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800283c:	60d3      	str	r3, [r2, #12]
		rocket_flight_datas.angle_X = test_datas.angle_X;
 800283e:	4b77      	ldr	r3, [pc, #476]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	4a77      	ldr	r2, [pc, #476]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002844:	6113      	str	r3, [r2, #16]
		rocket_flight_datas.angle_Y = test_datas.angle_Y;
 8002846:	4b75      	ldr	r3, [pc, #468]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	4a75      	ldr	r2, [pc, #468]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800284c:	6153      	str	r3, [r2, #20]
		rocket_flight_datas.angle_Z = test_datas.angle_Z;
 800284e:	4b73      	ldr	r3, [pc, #460]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	4a73      	ldr	r2, [pc, #460]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002854:	6193      	str	r3, [r2, #24]
		algorithm_1_update(&rocket_flight_datas);
 8002856:	4872      	ldr	r0, [pc, #456]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002858:	f7fe fe84 	bl	8001564 <algorithm_1_update>
		ukb_test_stat_update(rocket_status);
 800285c:	4b71      	ldr	r3, [pc, #452]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f001 fd3d 	bl	80042e0 <ukb_test_stat_update>
    }
    if (htim->Instance == TIM4)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d13e      	bne.n	80028ee <HAL_TIM_PeriodElapsedCallback+0xe2>
    {
		test_datas.altitude = bme_sensor_s.datas.height;
 8002870:	4b6e      	ldr	r3, [pc, #440]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a69      	ldr	r2, [pc, #420]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002876:	6013      	str	r3, [r2, #0]
		test_datas.pressure = bme_sensor_s.datas.pressure;
 8002878:	4b6c      	ldr	r3, [pc, #432]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x220>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4a67      	ldr	r2, [pc, #412]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800287e:	6053      	str	r3, [r2, #4]
		test_datas.accel_X 	= bmi_imu_s.datas.acc_x * TO_SI;
 8002880:	4b6b      	ldr	r3, [pc, #428]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002882:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002886:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8002a34 <HAL_TIM_PeriodElapsedCallback+0x228>
 800288a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800288e:	4b63      	ldr	r3, [pc, #396]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002890:	edc3 7a02 	vstr	s15, [r3, #8]
		test_datas.accel_Y 	= bmi_imu_s.datas.acc_z * TO_SI;
 8002894:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002896:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800289a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002a34 <HAL_TIM_PeriodElapsedCallback+0x228>
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	4b5e      	ldr	r3, [pc, #376]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80028a4:	edc3 7a03 	vstr	s15, [r3, #12]
		test_datas.accel_Z 	= bmi_imu_s.datas.acc_y * TO_SI;
 80028a8:	4b61      	ldr	r3, [pc, #388]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80028aa:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80028ae:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8002a34 <HAL_TIM_PeriodElapsedCallback+0x228>
 80028b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b6:	4b59      	ldr	r3, [pc, #356]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80028b8:	edc3 7a04 	vstr	s15, [r3, #16]
		test_datas.angle_X 	= euler[0];	//bmi_imu_s.datas.gyro_x_angle;
 80028bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a56      	ldr	r2, [pc, #344]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80028c2:	6153      	str	r3, [r2, #20]
		test_datas.angle_Y 	= bmi_imu_s.datas.gyro_z_angle;
 80028c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	4a54      	ldr	r2, [pc, #336]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80028ca:	6193      	str	r3, [r2, #24]
		test_datas.angle_Z 	= euler[2]; //bmi_imu_s.datas.gyro_z_angle;
 80028cc:	4b5a      	ldr	r3, [pc, #360]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4a52      	ldr	r2, [pc, #328]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80028d2:	61d3      	str	r3, [r2, #28]
    	uint8_t datas_packed[36];
    	pack_datas_for_test(datas_packed, &test_datas);
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	4950      	ldr	r1, [pc, #320]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80028da:	4618      	mov	r0, r3
 80028dc:	f001 fc3e 	bl	800415c <pack_datas_for_test>
    	HAL_UART_Transmit(&RS232_HNDLR, datas_packed, 36, 50);
 80028e0:	f107 010c 	add.w	r1, r7, #12
 80028e4:	2332      	movs	r3, #50	@ 0x32
 80028e6:	2224      	movs	r2, #36	@ 0x24
 80028e8:	4854      	ldr	r0, [pc, #336]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80028ea:	f006 ff77 	bl	80097dc <HAL_UART_Transmit>
    }
    if(htim->Instance == TIM5)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a53      	ldr	r2, [pc, #332]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d12c      	bne.n	8002952 <HAL_TIM_PeriodElapsedCallback+0x146>
    {
		rocket_flight_datas.altitude = bme_sensor_s.datas.altitude;
 80028f8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	4a48      	ldr	r2, [pc, #288]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80028fe:	6013      	str	r3, [r2, #0]
		rocket_flight_datas.accel_X = bmi_imu_s.datas.acc_x;
 8002900:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002904:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002906:	6053      	str	r3, [r2, #4]
		rocket_flight_datas.accel_Y = bmi_imu_s.datas.acc_y;
 8002908:	4b49      	ldr	r3, [pc, #292]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	4a44      	ldr	r2, [pc, #272]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800290e:	6093      	str	r3, [r2, #8]
		rocket_flight_datas.accel_Z = bmi_imu_s.datas.acc_z;
 8002910:	4b47      	ldr	r3, [pc, #284]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	4a42      	ldr	r2, [pc, #264]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002916:	60d3      	str	r3, [r2, #12]
		rocket_flight_datas.angle_X = euler[0];	//bmi_imu_s.datas.gyro_x_angle;
 8002918:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a40      	ldr	r2, [pc, #256]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800291e:	6113      	str	r3, [r2, #16]
		rocket_flight_datas.angle_Y = euler[1];	//bmi_imu_s.datas.gyro_y_angle;
 8002920:	4b45      	ldr	r3, [pc, #276]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a3e      	ldr	r2, [pc, #248]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002926:	6153      	str	r3, [r2, #20]
		rocket_flight_datas.angle_Z = euler[2];	//bmi_imu_s.datas.gyro_z_angle;
 8002928:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800292e:	6193      	str	r3, [r2, #24]

		packed_datas_p = packDatas(&bmi_imu_s, &bme_sensor_s, &gps_s, &power_s, rocket_status + 1);
 8002930:	4b3c      	ldr	r3, [pc, #240]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	3301      	adds	r3, #1
 8002936:	b29b      	uxth	r3, r3
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4b42      	ldr	r3, [pc, #264]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800293c:	4a42      	ldr	r2, [pc, #264]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800293e:	493b      	ldr	r1, [pc, #236]	@ (8002a2c <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002940:	483b      	ldr	r0, [pc, #236]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002942:	f7fe ff79 	bl	8001838 <packDatas>
 8002946:	4603      	mov	r3, r0
 8002948:	4a40      	ldr	r2, [pc, #256]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800294a:	6013      	str	r3, [r2, #0]
		algorithm_1_update(&rocket_flight_datas);
 800294c:	4834      	ldr	r0, [pc, #208]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800294e:	f7fe fe09 	bl	8001564 <algorithm_1_update>
    }
    if(htim->Instance == TIM6)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a3e      	ldr	r2, [pc, #248]	@ (8002a50 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d102      	bne.n	8002962 <HAL_TIM_PeriodElapsedCallback+0x156>
    {
    	//packDatas(&bmi_imu_s, &bme_sensor_s, 0, 0, 0);
    	is_1second = 1;
 800295c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a54 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
    }
    if(htim->Instance == TIM7)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3c      	ldr	r2, [pc, #240]	@ (8002a58 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d130      	bne.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x1c2>
    {
    	if(!(--main_mos_counter))
 800296c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x250>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	4a3a      	ldr	r2, [pc, #232]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10e      	bne.n	800299c <HAL_TIM_PeriodElapsedCallback+0x190>
    	{
    		HAL_GPIO_WritePin(MAIN_MOS_GPIO_Port, MAIN_MOS_Pin, GPIO_PIN_RESET);
 800297e:	2200      	movs	r2, #0
 8002980:	2101      	movs	r1, #1
 8002982:	4837      	ldr	r0, [pc, #220]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002984:	f003 fe5c 	bl	8006640 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	2101      	movs	r1, #1
 800298c:	4835      	ldr	r0, [pc, #212]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800298e:	f003 fe57 	bl	8006640 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(MAIN_LED_GPIO_Port, MAIN_LED_Pin, GPIO_PIN_SET);
 8002992:	2201      	movs	r2, #1
 8002994:	2108      	movs	r1, #8
 8002996:	4834      	ldr	r0, [pc, #208]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002998:	f003 fe52 	bl	8006640 <HAL_GPIO_WritePin>
    	}
    	if(!(--apoge_mos_counter))
 800299c:	4b33      	ldr	r3, [pc, #204]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x260>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	4a32      	ldr	r2, [pc, #200]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b31      	ldr	r3, [pc, #196]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x1c2>
    	{
    		HAL_GPIO_WritePin(APOGE_MOS_GPIO_Port, APOGE_MOS_Pin, GPIO_PIN_RESET);
 80029ae:	2200      	movs	r2, #0
 80029b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029b4:	482b      	ldr	r0, [pc, #172]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80029b6:	f003 fe43 	bl	8006640 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2101      	movs	r1, #1
 80029be:	4829      	ldr	r0, [pc, #164]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80029c0:	f003 fe3e 	bl	8006640 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(APOGEE_LED_GPIO_Port, APOGEE_LED_Pin, GPIO_PIN_SET);
 80029c4:	2201      	movs	r2, #1
 80029c6:	2101      	movs	r1, #1
 80029c8:	4827      	ldr	r0, [pc, #156]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80029ca:	f003 fe39 	bl	8006640 <HAL_GPIO_WritePin>
    	}
    }
    if(htim->Instance == TIM9)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d11a      	bne.n	8002a0e <HAL_TIM_PeriodElapsedCallback+0x202>
    {
		  if(power_s.voltage > 7.0)
 80029d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80029e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ea:	dd09      	ble.n	8002a00 <HAL_TIM_PeriodElapsedCallback+0x1f4>
		  {
			  e22_transmit_mode(&lora_1);
 80029ec:	4821      	ldr	r0, [pc, #132]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80029ee:	f7ff f999 	bl	8001d24 <e22_transmit_mode>
			  e22_transmit(&lora_1, packed_datas_p, &TELEM_UART_HNDLR, 64);
 80029f2:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80029f4:	6819      	ldr	r1, [r3, #0]
 80029f6:	2340      	movs	r3, #64	@ 0x40
 80029f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a78 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80029fa:	481e      	ldr	r0, [pc, #120]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80029fc:	f7ff f96a 	bl	8001cd4 <e22_transmit>

		  }
		  e22_transmit(&lora_1, packed_datas_p, &TTL_HNDLR, 64);
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	2340      	movs	r3, #64	@ 0x40
 8002a06:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002a08:	481a      	ldr	r0, [pc, #104]	@ (8002a74 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002a0a:	f7ff f963 	bl	8001cd4 <e22_transmit>
    }

}
 8002a0e:	bf00      	nop
 8002a10:	3730      	adds	r7, #48	@ 0x30
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	20000500 	.word	0x20000500
 8002a20:	20000520 	.word	0x20000520
 8002a24:	200002a8 	.word	0x200002a8
 8002a28:	40000800 	.word	0x40000800
 8002a2c:	200003a8 	.word	0x200003a8
 8002a30:	200003d0 	.word	0x200003d0
 8002a34:	3c20ba1f 	.word	0x3c20ba1f
 8002a38:	200005a8 	.word	0x200005a8
 8002a3c:	20000908 	.word	0x20000908
 8002a40:	40000c00 	.word	0x40000c00
 8002a44:	200005a0 	.word	0x200005a0
 8002a48:	20000540 	.word	0x20000540
 8002a4c:	2000059c 	.word	0x2000059c
 8002a50:	40001000 	.word	0x40001000
 8002a54:	20000570 	.word	0x20000570
 8002a58:	40001400 	.word	0x40001400
 8002a5c:	20000574 	.word	0x20000574
 8002a60:	40020400 	.word	0x40020400
 8002a64:	40020800 	.word	0x40020800
 8002a68:	40020000 	.word	0x40020000
 8002a6c:	20000578 	.word	0x20000578
 8002a70:	40014000 	.word	0x40014000
 8002a74:	2000057c 	.word	0x2000057c
 8002a78:	20000878 	.word	0x20000878
 8002a7c:	200008c0 	.word	0x200008c0

08002a80 <main_deploy>:

void main_deploy()
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MAIN_MOS_GPIO_Port, MAIN_MOS_Pin, GPIO_PIN_SET);
 8002a84:	2201      	movs	r2, #1
 8002a86:	2101      	movs	r1, #1
 8002a88:	4808      	ldr	r0, [pc, #32]	@ (8002aac <main_deploy+0x2c>)
 8002a8a:	f003 fdd9 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2101      	movs	r1, #1
 8002a92:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <main_deploy+0x30>)
 8002a94:	f003 fdd4 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MAIN_LED_GPIO_Port, MAIN_LED_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	4805      	ldr	r0, [pc, #20]	@ (8002ab4 <main_deploy+0x34>)
 8002a9e:	f003 fdcf 	bl	8006640 <HAL_GPIO_WritePin>
	main_mos_counter = 50;
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <main_deploy+0x38>)
 8002aa4:	2232      	movs	r2, #50	@ 0x32
 8002aa6:	601a      	str	r2, [r3, #0]
}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	20000574 	.word	0x20000574

08002abc <apoge_deploy>:
void apoge_deploy()
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(APOGE_MOS_GPIO_Port, APOGE_MOS_Pin, GPIO_PIN_SET);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ac6:	4809      	ldr	r0, [pc, #36]	@ (8002aec <apoge_deploy+0x30>)
 8002ac8:	f003 fdba 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002acc:	2201      	movs	r2, #1
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4806      	ldr	r0, [pc, #24]	@ (8002aec <apoge_deploy+0x30>)
 8002ad2:	f003 fdb5 	bl	8006640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(APOGEE_LED_GPIO_Port, APOGEE_LED_Pin, GPIO_PIN_RESET);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4805      	ldr	r0, [pc, #20]	@ (8002af0 <apoge_deploy+0x34>)
 8002adc:	f003 fdb0 	bl	8006640 <HAL_GPIO_WritePin>
	apoge_mos_counter = 50;
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <apoge_deploy+0x38>)
 8002ae2:	2232      	movs	r2, #50	@ 0x32
 8002ae4:	601a      	str	r2, [r3, #0]
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	20000578 	.word	0x20000578

08002af8 <lora_init>:

void lora_init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 8002afc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <lora_init+0x74>)
 8002afe:	2207      	movs	r2, #7
 8002b00:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <lora_init+0x74>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <lora_init+0x74>)
 8002b0a:	2206      	movs	r2, #6
 8002b0c:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 8002b0e:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <lora_init+0x74>)
 8002b10:	2202      	movs	r2, #2
 8002b12:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <lora_init+0x74>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	@ (8002b6c <lora_init+0x74>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <lora_init+0x74>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <lora_init+0x74>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <lora_init+0x74>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <lora_init+0x74>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <lora_init+0x74>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <lora_init+0x74>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	25;
 8002b44:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <lora_init+0x74>)
 8002b46:	2219      	movs	r2, #25
 8002b48:	755a      	strb	r2, [r3, #21]

	e22_init(&lora_1, &TELEM_UART_HNDLR);
 8002b4a:	4909      	ldr	r1, [pc, #36]	@ (8002b70 <lora_init+0x78>)
 8002b4c:	4807      	ldr	r0, [pc, #28]	@ (8002b6c <lora_init+0x74>)
 8002b4e:	f7ff f81d 	bl	8001b8c <e22_init>

	HAL_UART_DeInit(&TELEM_UART_HNDLR);
 8002b52:	4807      	ldr	r0, [pc, #28]	@ (8002b70 <lora_init+0x78>)
 8002b54:	f006 fe10 	bl	8009778 <HAL_UART_DeInit>
	TELEM_UART_HNDLR.Init.BaudRate = 115200;
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <lora_init+0x78>)
 8002b5a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b5e:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(&TELEM_UART_HNDLR);
 8002b60:	4803      	ldr	r0, [pc, #12]	@ (8002b70 <lora_init+0x78>)
 8002b62:	f006 fdb9 	bl	80096d8 <HAL_UART_Init>

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000057c 	.word	0x2000057c
 8002b70:	20000878 	.word	0x20000878

08002b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b78:	b672      	cpsid	i
}
 8002b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <Error_Handler+0x8>

08002b80 <quaternon_init>:

float euler[3];		//pitch roll yaw
float *saved_q;

void quaternon_init(float *backup_datas)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	saved_q = backup_datas;
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <quaternon_init+0x1c>)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6013      	str	r3, [r2, #0]
	quaternionSet_zero();
 8002b8e:	f000 fc27 	bl	80033e0 <quaternionSet_zero>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200005b4 	.word	0x200005b4

08002ba0 <updateQuaternion>:
void updateQuaternion(float gx, float gy, float gz, float dt) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002baa:	edc7 0a02 	vstr	s1, [r7, #8]
 8002bae:	ed87 1a01 	vstr	s2, [r7, #4]
 8002bb2:	edc7 1a00 	vstr	s3, [r7]
  // Convert angular velocities to quaternion rates of change
  float qDot1 = 0.5f * (-saved_q[1] * gx - saved_q[2] * gy - saved_q[3] * gz);
 8002bb6:	4bac      	ldr	r3, [pc, #688]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	eeb1 7a67 	vneg.f32	s14, s15
 8002bc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bcc:	4ba6      	ldr	r3, [pc, #664]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	edd3 6a00 	vldr	s13, [r3]
 8002bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002be2:	4ba1      	ldr	r3, [pc, #644]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	edd3 6a00 	vldr	s13, [r3]
 8002bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c00:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  float qDot2 = 0.5f * (saved_q[0] * gx + saved_q[2] * gz - saved_q[3] * gy);
 8002c04:	4b98      	ldr	r3, [pc, #608]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c14:	4b94      	ldr	r3, [pc, #592]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3308      	adds	r3, #8
 8002c1a:	edd3 6a00 	vldr	s13, [r3]
 8002c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	330c      	adds	r3, #12
 8002c30:	edd3 6a00 	vldr	s13, [r3]
 8002c34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c40:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c48:	edc7 7a08 	vstr	s15, [r7, #32]
  float qDot3 = 0.5f * (saved_q[0] * gy - saved_q[1] * gz + saved_q[3] * gx);
 8002c4c:	4b86      	ldr	r3, [pc, #536]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	ed93 7a00 	vldr	s14, [r3]
 8002c54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5c:	4b82      	ldr	r3, [pc, #520]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3304      	adds	r3, #4
 8002c62:	edd3 6a00 	vldr	s13, [r3]
 8002c66:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c72:	4b7d      	ldr	r3, [pc, #500]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	330c      	adds	r3, #12
 8002c78:	edd3 6a00 	vldr	s13, [r3]
 8002c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c90:	edc7 7a07 	vstr	s15, [r7, #28]
  float qDot4 = 0.5f * (saved_q[0] * gz + saved_q[1] * gy - saved_q[2] * gx);
 8002c94:	4b74      	ldr	r3, [pc, #464]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	ed93 7a00 	vldr	s14, [r3]
 8002c9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca4:	4b70      	ldr	r3, [pc, #448]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	edd3 6a00 	vldr	s13, [r3]
 8002cae:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cba:	4b6b      	ldr	r3, [pc, #428]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3308      	adds	r3, #8
 8002cc0:	edd3 6a00 	vldr	s13, [r3]
 8002cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cd8:	edc7 7a06 	vstr	s15, [r7, #24]

  // Integrate to get new quaternion values
  saved_q[0] += qDot1 * dt;
 8002cdc:	4b62      	ldr	r3, [pc, #392]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	ed93 7a00 	vldr	s14, [r3]
 8002ce4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8002ce8:	edd7 7a00 	vldr	s15, [r7]
 8002cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf8:	edc3 7a00 	vstr	s15, [r3]
  saved_q[1] += qDot2 * dt;
 8002cfc:	4b5a      	ldr	r3, [pc, #360]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3304      	adds	r3, #4
 8002d02:	ed93 7a00 	vldr	s14, [r3]
 8002d06:	edd7 6a08 	vldr	s13, [r7, #32]
 8002d0a:	edd7 7a00 	vldr	s15, [r7]
 8002d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d12:	4b55      	ldr	r3, [pc, #340]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3304      	adds	r3, #4
 8002d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1c:	edc3 7a00 	vstr	s15, [r3]
  saved_q[2] += qDot3 * dt;
 8002d20:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3308      	adds	r3, #8
 8002d26:	ed93 7a00 	vldr	s14, [r3]
 8002d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d2e:	edd7 7a00 	vldr	s15, [r7]
 8002d32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d36:	4b4c      	ldr	r3, [pc, #304]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d40:	edc3 7a00 	vstr	s15, [r3]
  saved_q[3] += qDot4 * dt;
 8002d44:	4b48      	ldr	r3, [pc, #288]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	ed93 7a00 	vldr	s14, [r3]
 8002d4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d52:	edd7 7a00 	vldr	s15, [r7]
 8002d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5a:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d64:	edc3 7a00 	vstr	s15, [r3]

  // Normalize quaternion to prevent drift
  float norm = sqrt(saved_q[0] * saved_q[0] + saved_q[1] * saved_q[1] + saved_q[2] * saved_q[2] + saved_q[3] * saved_q[3]);
 8002d68:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	ed93 7a00 	vldr	s14, [r3]
 8002d70:	4b3d      	ldr	r3, [pc, #244]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3304      	adds	r3, #4
 8002d82:	edd3 6a00 	vldr	s13, [r3]
 8002d86:	4b38      	ldr	r3, [pc, #224]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	edd3 6a00 	vldr	s13, [r3]
 8002da2:	4b31      	ldr	r3, [pc, #196]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3308      	adds	r3, #8
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002db0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	edd3 6a00 	vldr	s13, [r3]
 8002dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd0:	ee17 0a90 	vmov	r0, s15
 8002dd4:	f7fd fbd8 	bl	8000588 <__aeabi_f2d>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	ec43 2b10 	vmov	d0, r2, r3
 8002de0:	f00e fcd4 	bl	801178c <sqrt>
 8002de4:	ec53 2b10 	vmov	r2, r3, d0
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd ff1c 	bl	8000c28 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	617b      	str	r3, [r7, #20]
  saved_q[0] /= norm;
 8002df4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	edd3 6a00 	vldr	s13, [r3]
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e08:	edc3 7a00 	vstr	s15, [r3]
  saved_q[1] /= norm;
 8002e0c:	4b16      	ldr	r3, [pc, #88]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3304      	adds	r3, #4
 8002e12:	edd3 6a00 	vldr	s13, [r3]
 8002e16:	4b14      	ldr	r3, [pc, #80]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e24:	edc3 7a00 	vstr	s15, [r3]
  saved_q[2] /= norm;
 8002e28:	4b0f      	ldr	r3, [pc, #60]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	edd3 6a00 	vldr	s13, [r3]
 8002e32:	4b0d      	ldr	r3, [pc, #52]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3308      	adds	r3, #8
 8002e38:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e40:	edc3 7a00 	vstr	s15, [r3]
  saved_q[3] /= norm;
 8002e44:	4b08      	ldr	r3, [pc, #32]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	edd3 6a00 	vldr	s13, [r3]
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <updateQuaternion+0x2c8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e5c:	edc3 7a00 	vstr	s15, [r3]
}
 8002e60:	bf00      	nop
 8002e62:	3728      	adds	r7, #40	@ 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200005b4 	.word	0x200005b4
 8002e6c:	00000000 	.word	0x00000000

08002e70 <quaternionToEuler>:

void quaternionToEuler(void) {
 8002e70:	b5b0      	push	{r4, r5, r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  euler[1] = atan2(2.0f * (saved_q[0] * saved_q[1] + saved_q[2] * saved_q[3]), 1.0f - 2.0f * (saved_q[1] * saved_q[1] + saved_q[2] * saved_q[2])) * (180.0 / M_PI);
 8002e74:	4b7a      	ldr	r3, [pc, #488]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	ed93 7a00 	vldr	s14, [r3]
 8002e7c:	4b78      	ldr	r3, [pc, #480]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3304      	adds	r3, #4
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e8a:	4b75      	ldr	r3, [pc, #468]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	edd3 6a00 	vldr	s13, [r3]
 8002e94:	4b72      	ldr	r3, [pc, #456]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002eaa:	ee17 0a90 	vmov	r0, s15
 8002eae:	f7fd fb6b 	bl	8000588 <__aeabi_f2d>
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	460d      	mov	r5, r1
 8002eb6:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	ed93 7a00 	vldr	s14, [r3]
 8002ec0:	4b67      	ldr	r3, [pc, #412]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ece:	4b64      	ldr	r3, [pc, #400]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	edd3 6a00 	vldr	s13, [r3]
 8002ed8:	4b61      	ldr	r3, [pc, #388]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3308      	adds	r3, #8
 8002ede:	edd3 7a00 	vldr	s15, [r3]
 8002ee2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef6:	ee17 0a90 	vmov	r0, s15
 8002efa:	f7fd fb45 	bl	8000588 <__aeabi_f2d>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	ec43 2b11 	vmov	d1, r2, r3
 8002f06:	ec45 4b10 	vmov	d0, r4, r5
 8002f0a:	f00e fbcd 	bl	80116a8 <atan2>
 8002f0e:	ec51 0b10 	vmov	r0, r1, d0
 8002f12:	a351      	add	r3, pc, #324	@ (adr r3, 8003058 <quaternionToEuler+0x1e8>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fb8e 	bl	8000638 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f7fd fe80 	bl	8000c28 <__aeabi_d2f>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003064 <quaternionToEuler+0x1f4>)
 8002f2c:	6053      	str	r3, [r2, #4]
  euler[0] = asin(2.0f * (saved_q[0] * saved_q[2] - saved_q[3] * saved_q[1])) * (180.0 / M_PI);
 8002f2e:	4b4c      	ldr	r3, [pc, #304]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	ed93 7a00 	vldr	s14, [r3]
 8002f36:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	edd3 7a00 	vldr	s15, [r3]
 8002f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f44:	4b46      	ldr	r3, [pc, #280]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	edd3 6a00 	vldr	s13, [r3]
 8002f4e:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3304      	adds	r3, #4
 8002f54:	edd3 7a00 	vldr	s15, [r3]
 8002f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f64:	ee17 0a90 	vmov	r0, s15
 8002f68:	f7fd fb0e 	bl	8000588 <__aeabi_f2d>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	ec43 2b10 	vmov	d0, r2, r3
 8002f74:	f00e fb64 	bl	8011640 <asin>
 8002f78:	ec51 0b10 	vmov	r0, r1, d0
 8002f7c:	a336      	add	r3, pc, #216	@ (adr r3, 8003058 <quaternionToEuler+0x1e8>)
 8002f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f82:	f7fd fb59 	bl	8000638 <__aeabi_dmul>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fe4b 	bl	8000c28 <__aeabi_d2f>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4a33      	ldr	r2, [pc, #204]	@ (8003064 <quaternionToEuler+0x1f4>)
 8002f96:	6013      	str	r3, [r2, #0]
  euler[2] = atan2(2.0f * (saved_q[0] * saved_q[3] + saved_q[1] * saved_q[2]), 1.0f - 2.0f * (saved_q[2] * saved_q[2] + saved_q[3] * saved_q[3])) * (180.0 / M_PI);
 8002f98:	4b31      	ldr	r3, [pc, #196]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	edd3 7a00 	vldr	s15, [r3]
 8002faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fae:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	edd3 6a00 	vldr	s13, [r3]
 8002fb8:	4b29      	ldr	r3, [pc, #164]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fce:	ee17 0a90 	vmov	r0, s15
 8002fd2:	f7fd fad9 	bl	8000588 <__aeabi_f2d>
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	460d      	mov	r5, r1
 8002fda:	4b21      	ldr	r3, [pc, #132]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	ed93 7a00 	vldr	s14, [r3]
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3308      	adds	r3, #8
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	edd3 6a00 	vldr	s13, [r3]
 8002ffc:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <quaternionToEuler+0x1f0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800300a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003012:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800301a:	ee17 0a90 	vmov	r0, s15
 800301e:	f7fd fab3 	bl	8000588 <__aeabi_f2d>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	ec43 2b11 	vmov	d1, r2, r3
 800302a:	ec45 4b10 	vmov	d0, r4, r5
 800302e:	f00e fb3b 	bl	80116a8 <atan2>
 8003032:	ec51 0b10 	vmov	r0, r1, d0
 8003036:	a308      	add	r3, pc, #32	@ (adr r3, 8003058 <quaternionToEuler+0x1e8>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fafc 	bl	8000638 <__aeabi_dmul>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f7fd fdee 	bl	8000c28 <__aeabi_d2f>
 800304c:	4603      	mov	r3, r0
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <quaternionToEuler+0x1f4>)
 8003050:	6093      	str	r3, [r2, #8]
}
 8003052:	bf00      	nop
 8003054:	bdb0      	pop	{r4, r5, r7, pc}
 8003056:	bf00      	nop
 8003058:	1a63c1f8 	.word	0x1a63c1f8
 800305c:	404ca5dc 	.word	0x404ca5dc
 8003060:	200005b4 	.word	0x200005b4
 8003064:	200005a8 	.word	0x200005a8

08003068 <quaternionToTheta>:


float quaternionToTheta(){
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	@ 0x28
 800306c:	af00      	add	r7, sp, #0

	float theta = 0.0;
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24

	float r13 = 2 * saved_q[1] * saved_q[3] + 2 * saved_q[2] * saved_q[0];
 8003074:	4b60      	ldr	r3, [pc, #384]	@ (80031f8 <quaternionToTheta+0x190>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3304      	adds	r3, #4
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003082:	4b5d      	ldr	r3, [pc, #372]	@ (80031f8 <quaternionToTheta+0x190>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	330c      	adds	r3, #12
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003090:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <quaternionToTheta+0x190>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	3308      	adds	r3, #8
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800309e:	4b56      	ldr	r3, [pc, #344]	@ (80031f8 <quaternionToTheta+0x190>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ae:	edc7 7a08 	vstr	s15, [r7, #32]
	float r23 = 2 * saved_q[2] * saved_q[3] - 2 * saved_q[1] * saved_q[0];
 80030b2:	4b51      	ldr	r3, [pc, #324]	@ (80031f8 <quaternionToTheta+0x190>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3308      	adds	r3, #8
 80030b8:	edd3 7a00 	vldr	s15, [r3]
 80030bc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030c0:	4b4d      	ldr	r3, [pc, #308]	@ (80031f8 <quaternionToTheta+0x190>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ce:	4b4a      	ldr	r3, [pc, #296]	@ (80031f8 <quaternionToTheta+0x190>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3304      	adds	r3, #4
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80030dc:	4b46      	ldr	r3, [pc, #280]	@ (80031f8 <quaternionToTheta+0x190>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ec:	edc7 7a07 	vstr	s15, [r7, #28]
	float r33 = 1 - 2 * saved_q[1] * saved_q[1] - 2 * saved_q[2] * saved_q[2];
 80030f0:	4b41      	ldr	r3, [pc, #260]	@ (80031f8 <quaternionToTheta+0x190>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3304      	adds	r3, #4
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030fe:	4b3e      	ldr	r3, [pc, #248]	@ (80031f8 <quaternionToTheta+0x190>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3304      	adds	r3, #4
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003110:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003114:	4b38      	ldr	r3, [pc, #224]	@ (80031f8 <quaternionToTheta+0x190>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	3308      	adds	r3, #8
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003122:	4b35      	ldr	r3, [pc, #212]	@ (80031f8 <quaternionToTheta+0x190>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3308      	adds	r3, #8
 8003128:	edd3 7a00 	vldr	s15, [r3]
 800312c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003134:	edc7 7a06 	vstr	s15, [r7, #24]

	float z_x = r13;
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	617b      	str	r3, [r7, #20]
	float z_y = r23;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	613b      	str	r3, [r7, #16]
	float z_z = r33;
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	60fb      	str	r3, [r7, #12]

	float dotProduct = z_z;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	60bb      	str	r3, [r7, #8]
	float magnitude = sqrt(z_x * z_x + z_y * z_y + z_z * z_z);
 8003148:	edd7 7a05 	vldr	s15, [r7, #20]
 800314c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003150:	edd7 7a04 	vldr	s15, [r7, #16]
 8003154:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003158:	ee37 7a27 	vadd.f32	s14, s14, s15
 800315c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003160:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003168:	ee17 0a90 	vmov	r0, s15
 800316c:	f7fd fa0c 	bl	8000588 <__aeabi_f2d>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	ec43 2b10 	vmov	d0, r2, r3
 8003178:	f00e fb08 	bl	801178c <sqrt>
 800317c:	ec53 2b10 	vmov	r2, r3, d0
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fd50 	bl	8000c28 <__aeabi_d2f>
 8003188:	4603      	mov	r3, r0
 800318a:	607b      	str	r3, [r7, #4]

	theta = acos(dotProduct / magnitude) * 180.0 / 3.14;
 800318c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003190:	edd7 7a01 	vldr	s15, [r7, #4]
 8003194:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003198:	ee16 0a90 	vmov	r0, s13
 800319c:	f7fd f9f4 	bl	8000588 <__aeabi_f2d>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	ec43 2b10 	vmov	d0, r2, r3
 80031a8:	f00e fa16 	bl	80115d8 <acos>
 80031ac:	ec51 0b10 	vmov	r0, r1, d0
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <quaternionToTheta+0x194>)
 80031b6:	f7fd fa3f 	bl	8000638 <__aeabi_dmul>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	a30b      	add	r3, pc, #44	@ (adr r3, 80031f0 <quaternionToTheta+0x188>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd fb60 	bl	800088c <__aeabi_ddiv>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4610      	mov	r0, r2
 80031d2:	4619      	mov	r1, r3
 80031d4:	f7fd fd28 	bl	8000c28 <__aeabi_d2f>
 80031d8:	4603      	mov	r3, r0
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
	return theta;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	ee07 3a90 	vmov	s15, r3
}
 80031e2:	eeb0 0a67 	vmov.f32	s0, s15
 80031e6:	3728      	adds	r7, #40	@ 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	f3af 8000 	nop.w
 80031f0:	51eb851f 	.word	0x51eb851f
 80031f4:	40091eb8 	.word	0x40091eb8
 80031f8:	200005b4 	.word	0x200005b4
 80031fc:	40668000 	.word	0x40668000

08003200 <getInitialQuaternion>:

// İvmeölçerden başlangıç quaternioni hesaplama
void getInitialQuaternion(float acc_x, float acc_y, float acc_z) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	@ 0x38
 8003204:	af00      	add	r7, sp, #0
 8003206:	ed87 0a03 	vstr	s0, [r7, #12]
 800320a:	edc7 0a02 	vstr	s1, [r7, #8]
 800320e:	ed87 1a01 	vstr	s2, [r7, #4]

    float norm = sqrt(acc_z * acc_z + acc_x * acc_x + acc_y * acc_y);
 8003212:	edd7 7a01 	vldr	s15, [r7, #4]
 8003216:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800321a:	edd7 7a03 	vldr	s15, [r7, #12]
 800321e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003226:	edd7 7a02 	vldr	s15, [r7, #8]
 800322a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800322e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003232:	ee17 0a90 	vmov	r0, s15
 8003236:	f7fd f9a7 	bl	8000588 <__aeabi_f2d>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	ec43 2b10 	vmov	d0, r2, r3
 8003242:	f00e faa3 	bl	801178c <sqrt>
 8003246:	ec53 2b10 	vmov	r2, r3, d0
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f7fd fceb 	bl	8000c28 <__aeabi_d2f>
 8003252:	4603      	mov	r3, r0
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
    float accel_temp[3];

    accel_temp[0] = acc_x;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
    accel_temp[1] = acc_y;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
    accel_temp[2] = acc_z;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c

    accel_temp[0] /= norm;
 8003262:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8003266:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800326a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    accel_temp[1] /= norm;
 8003272:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003276:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800327a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8003282:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8003286:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800328a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    float q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f977 	bl	8000588 <__aeabi_f2d>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	f04f 0000 	mov.w	r0, #0
 80032a2:	494c      	ldr	r1, [pc, #304]	@ (80033d4 <getInitialQuaternion+0x1d4>)
 80032a4:	f7fd f810 	bl	80002c8 <__aeabi_dsub>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	ec43 2b17 	vmov	d7, r2, r3
 80032b0:	eeb0 0a47 	vmov.f32	s0, s14
 80032b4:	eef0 0a67 	vmov.f32	s1, s15
 80032b8:	f00e fa68 	bl	801178c <sqrt>
 80032bc:	ec51 0b10 	vmov	r0, r1, d0
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	4b44      	ldr	r3, [pc, #272]	@ (80033d8 <getInitialQuaternion+0x1d8>)
 80032c6:	f7fd f9b7 	bl	8000638 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	f7fd fca9 	bl	8000c28 <__aeabi_d2f>
 80032d6:	4603      	mov	r3, r0
 80032d8:	617b      	str	r3, [r7, #20]
    float k = 0.5 / q_temp[0];
 80032da:	ed97 7a05 	vldr	s14, [r7, #20]
 80032de:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80032e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_temp[1] = accel_temp[0] * k * 0.5;
 80032ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80032ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fe:	edc7 7a06 	vstr	s15, [r7, #24]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8003302:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003306:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003316:	edc7 7a07 	vstr	s15, [r7, #28]
    q_temp[3] = 0.0;
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	623b      	str	r3, [r7, #32]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8003320:	ed97 7a05 	vldr	s14, [r7, #20]
 8003324:	edd7 7a05 	vldr	s15, [r7, #20]
 8003328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800332c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003330:	edd7 7a06 	vldr	s15, [r7, #24]
 8003334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003338:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003340:	edd7 7a07 	vldr	s15, [r7, #28]
 8003344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800334c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003350:	edd7 7a08 	vldr	s15, [r7, #32]
 8003354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	ee17 0a90 	vmov	r0, s15
 8003360:	f7fd f912 	bl	8000588 <__aeabi_f2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	ec43 2b10 	vmov	d0, r2, r3
 800336c:	f00e fa0e 	bl	801178c <sqrt>
 8003370:	ec53 2b10 	vmov	r2, r3, d0
 8003374:	4610      	mov	r0, r2
 8003376:	4619      	mov	r1, r3
 8003378:	f7fd fc56 	bl	8000c28 <__aeabi_d2f>
 800337c:	4603      	mov	r3, r0
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34

    saved_q[0] = q_temp[0] / norm;
 8003380:	edd7 6a05 	vldr	s13, [r7, #20]
 8003384:	4b15      	ldr	r3, [pc, #84]	@ (80033dc <getInitialQuaternion+0x1dc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800338c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003390:	edc3 7a00 	vstr	s15, [r3]
    saved_q[1] = q_temp[1] / norm;
 8003394:	edd7 6a06 	vldr	s13, [r7, #24]
 8003398:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <getInitialQuaternion+0x1dc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3304      	adds	r3, #4
 800339e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80033a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a6:	edc3 7a00 	vstr	s15, [r3]
    saved_q[2] = q_temp[2] / norm;
 80033aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <getInitialQuaternion+0x1dc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3308      	adds	r3, #8
 80033b4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80033b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033bc:	edc3 7a00 	vstr	s15, [r3]
    saved_q[3] = 0.0f;
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <getInitialQuaternion+0x1dc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	330c      	adds	r3, #12
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	bf00      	nop
 80033ce:	3738      	adds	r7, #56	@ 0x38
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	3ff00000 	.word	0x3ff00000
 80033d8:	3fe00000 	.word	0x3fe00000
 80033dc:	200005b4 	.word	0x200005b4

080033e0 <quaternionSet_zero>:

void quaternionSet_zero(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	saved_q[0] = 1.0;
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <quaternionSet_zero+0x3c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033ec:	601a      	str	r2, [r3, #0]
	saved_q[1] = 0.0;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <quaternionSet_zero+0x3c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3304      	adds	r3, #4
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
	saved_q[2] = 0.0;
 80033fa:	4b08      	ldr	r3, [pc, #32]	@ (800341c <quaternionSet_zero+0x3c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3308      	adds	r3, #8
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
	saved_q[3] = 0.0;
 8003406:	4b05      	ldr	r3, [pc, #20]	@ (800341c <quaternionSet_zero+0x3c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	200005b4 	.word	0x200005b4

08003420 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003424:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <MX_RTC_Init+0x44>)
 8003426:	4a10      	ldr	r2, [pc, #64]	@ (8003468 <MX_RTC_Init+0x48>)
 8003428:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800342a:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <MX_RTC_Init+0x44>)
 800342c:	2200      	movs	r2, #0
 800342e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <MX_RTC_Init+0x44>)
 8003432:	227f      	movs	r2, #127	@ 0x7f
 8003434:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003436:	4b0b      	ldr	r3, [pc, #44]	@ (8003464 <MX_RTC_Init+0x44>)
 8003438:	22ff      	movs	r2, #255	@ 0xff
 800343a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <MX_RTC_Init+0x44>)
 800343e:	2200      	movs	r2, #0
 8003440:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003442:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <MX_RTC_Init+0x44>)
 8003444:	2200      	movs	r2, #0
 8003446:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003448:	4b06      	ldr	r3, [pc, #24]	@ (8003464 <MX_RTC_Init+0x44>)
 800344a:	2200      	movs	r2, #0
 800344c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800344e:	4805      	ldr	r0, [pc, #20]	@ (8003464 <MX_RTC_Init+0x44>)
 8003450:	f005 fb18 	bl	8008a84 <HAL_RTC_Init>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800345a:	f7ff fb8b 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200005b8 	.word	0x200005b8
 8003468:	40002800 	.word	0x40002800

0800346c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b09a      	sub	sp, #104	@ 0x68
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	225c      	movs	r2, #92	@ 0x5c
 800347a:	2100      	movs	r1, #0
 800347c:	4618      	mov	r0, r3
 800347e:	f00a f97e 	bl	800d77e <memset>
  if(rtcHandle->Instance==RTC)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a0c      	ldr	r2, [pc, #48]	@ (80034b8 <HAL_RTC_MspInit+0x4c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800348c:	2320      	movs	r3, #32
 800348e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003494:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003496:	f107 030c 	add.w	r3, r7, #12
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fafa 	bl	8007a94 <HAL_RCCEx_PeriphCLKConfig>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80034a6:	f7ff fb65 	bl	8002b74 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034aa:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <HAL_RTC_MspInit+0x50>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80034b0:	bf00      	nop
 80034b2:	3768      	adds	r7, #104	@ 0x68
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40002800 	.word	0x40002800
 80034bc:	42470e3c 	.word	0x42470e3c

080034c0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80034c4:	4b17      	ldr	r3, [pc, #92]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034c6:	4a18      	ldr	r2, [pc, #96]	@ (8003528 <MX_SPI1_Init+0x68>)
 80034c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80034ca:	4b16      	ldr	r3, [pc, #88]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80034d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80034d2:	4b14      	ldr	r3, [pc, #80]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80034d8:	4b12      	ldr	r3, [pc, #72]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034de:	4b11      	ldr	r3, [pc, #68]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <MX_SPI1_Init+0x64>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034fe:	4b09      	ldr	r3, [pc, #36]	@ (8003524 <MX_SPI1_Init+0x64>)
 8003500:	2200      	movs	r2, #0
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003504:	4b07      	ldr	r3, [pc, #28]	@ (8003524 <MX_SPI1_Init+0x64>)
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <MX_SPI1_Init+0x64>)
 800350c:	220a      	movs	r2, #10
 800350e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003510:	4804      	ldr	r0, [pc, #16]	@ (8003524 <MX_SPI1_Init+0x64>)
 8003512:	f005 fbbb 	bl	8008c8c <HAL_SPI_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800351c:	f7ff fb2a 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200005d8 	.word	0x200005d8
 8003528:	40013000 	.word	0x40013000

0800352c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003530:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003532:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <MX_SPI3_Init+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003536:	4b16      	ldr	r3, [pc, #88]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003538:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800353c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800353e:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003540:	2200      	movs	r2, #0
 8003542:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003544:	4b12      	ldr	r3, [pc, #72]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <MX_SPI3_Init+0x64>)
 800354c:	2200      	movs	r2, #0
 800354e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003550:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003552:	2200      	movs	r2, #0
 8003554:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003556:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003558:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800355c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800355e:	4b0c      	ldr	r3, [pc, #48]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003560:	2200      	movs	r2, #0
 8003562:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003564:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800356a:	4b09      	ldr	r3, [pc, #36]	@ (8003590 <MX_SPI3_Init+0x64>)
 800356c:	2200      	movs	r2, #0
 800356e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003570:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003572:	2200      	movs	r2, #0
 8003574:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003576:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <MX_SPI3_Init+0x64>)
 8003578:	220a      	movs	r2, #10
 800357a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800357c:	4804      	ldr	r0, [pc, #16]	@ (8003590 <MX_SPI3_Init+0x64>)
 800357e:	f005 fb85 	bl	8008c8c <HAL_SPI_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003588:	f7ff faf4 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000630 	.word	0x20000630
 8003594:	40003c00 	.word	0x40003c00

08003598 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	@ 0x30
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a32      	ldr	r2, [pc, #200]	@ (8003680 <HAL_SPI_MspInit+0xe8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d12c      	bne.n	8003614 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	4a30      	ldr	r2, [pc, #192]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 80035c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	4b2a      	ldr	r3, [pc, #168]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	4a29      	ldr	r2, [pc, #164]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e6:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035f2:	23e0      	movs	r3, #224	@ 0xe0
 80035f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f6:	2302      	movs	r3, #2
 80035f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035fe:	2303      	movs	r3, #3
 8003600:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003602:	2305      	movs	r3, #5
 8003604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003606:	f107 031c 	add.w	r3, r7, #28
 800360a:	4619      	mov	r1, r3
 800360c:	481e      	ldr	r0, [pc, #120]	@ (8003688 <HAL_SPI_MspInit+0xf0>)
 800360e:	f002 fd8f 	bl	8006130 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003612:	e030      	b.n	8003676 <HAL_SPI_MspInit+0xde>
  else if(spiHandle->Instance==SPI3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1c      	ldr	r2, [pc, #112]	@ (800368c <HAL_SPI_MspInit+0xf4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d12b      	bne.n	8003676 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	4b18      	ldr	r3, [pc, #96]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	4a17      	ldr	r2, [pc, #92]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 8003628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800362c:	6413      	str	r3, [r2, #64]	@ 0x40
 800362e:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003636:	613b      	str	r3, [r7, #16]
 8003638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	4b11      	ldr	r3, [pc, #68]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a10      	ldr	r2, [pc, #64]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b0e      	ldr	r3, [pc, #56]	@ (8003684 <HAL_SPI_MspInit+0xec>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003656:	2338      	movs	r3, #56	@ 0x38
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003662:	2303      	movs	r3, #3
 8003664:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003666:	2306      	movs	r3, #6
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	4807      	ldr	r0, [pc, #28]	@ (8003690 <HAL_SPI_MspInit+0xf8>)
 8003672:	f002 fd5d 	bl	8006130 <HAL_GPIO_Init>
}
 8003676:	bf00      	nop
 8003678:	3730      	adds	r7, #48	@ 0x30
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	40013000 	.word	0x40013000
 8003684:	40023800 	.word	0x40023800
 8003688:	40020000 	.word	0x40020000
 800368c:	40003c00 	.word	0x40003c00
 8003690:	40020400 	.word	0x40020400

08003694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	4a0f      	ldr	r2, [pc, #60]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	4a08      	ldr	r2, [pc, #32]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <HAL_MspInit+0x4c>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800

080036e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <NMI_Handler+0x4>

080036ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <HardFault_Handler+0x4>

080036f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <MemManage_Handler+0x4>

080036fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <BusFault_Handler+0x4>

08003704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <UsageFault_Handler+0x4>

0800370c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800373a:	f001 fb35 	bl	8004da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <DMA1_Stream1_IRQHandler+0x10>)
 800374a:	f002 fa87 	bl	8005c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000998 	.word	0x20000998

08003758 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_GYRO_Pin);
 800375c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003760:	f002 ff88 	bl	8006674 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INT_ACC_Pin);
 8003764:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003768:	f002 ff84 	bl	8006674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800376c:	bf00      	nop
 800376e:	bd80      	pop	{r7, pc}

08003770 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003774:	4802      	ldr	r0, [pc, #8]	@ (8003780 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003776:	f005 fc00 	bl	8008f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000824 	.word	0x20000824

08003784 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003788:	4802      	ldr	r0, [pc, #8]	@ (8003794 <TIM3_IRQHandler+0x10>)
 800378a:	f005 fbf6 	bl	8008f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200006bc 	.word	0x200006bc

08003798 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800379c:	4802      	ldr	r0, [pc, #8]	@ (80037a8 <TIM4_IRQHandler+0x10>)
 800379e:	f005 fbec 	bl	8008f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000704 	.word	0x20000704

080037ac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&RS232_HNDLR, UART_FLAG_IDLE))
 80037b2:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <USART3_IRQHandler+0x50>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d115      	bne.n	80037ec <USART3_IRQHandler+0x40>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&RS232_HNDLR);
 80037c0:	2300      	movs	r3, #0
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <USART3_IRQHandler+0x50>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <USART3_IRQHandler+0x50>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	607b      	str	r3, [r7, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
		HAL_UART_DMAStop(&RS232_HNDLR);
 80037d6:	4809      	ldr	r0, [pc, #36]	@ (80037fc <USART3_IRQHandler+0x50>)
 80037d8:	f006 f947 	bl	8009a6a <HAL_UART_DMAStop>
		process_received_datas(dma_rx_buf);
 80037dc:	4808      	ldr	r0, [pc, #32]	@ (8003800 <USART3_IRQHandler+0x54>)
 80037de:	f000 fb87 	bl	8003ef0 <process_received_datas>
		HAL_UART_Receive_DMA(&RS232_HNDLR, dma_rx_buf, RX_BUFFER_LEN + 6);
 80037e2:	222a      	movs	r2, #42	@ 0x2a
 80037e4:	4906      	ldr	r1, [pc, #24]	@ (8003800 <USART3_IRQHandler+0x54>)
 80037e6:	4805      	ldr	r0, [pc, #20]	@ (80037fc <USART3_IRQHandler+0x50>)
 80037e8:	f006 f91a 	bl	8009a20 <HAL_UART_Receive_DMA>
	}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037ec:	4803      	ldr	r0, [pc, #12]	@ (80037fc <USART3_IRQHandler+0x50>)
 80037ee:	f006 f9bb 	bl	8009b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000908 	.word	0x20000908
 8003800:	20000688 	.word	0x20000688

08003804 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003808:	4802      	ldr	r0, [pc, #8]	@ (8003814 <TIM5_IRQHandler+0x10>)
 800380a:	f005 fbb6 	bl	8008f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800380e:	bf00      	nop
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000074c 	.word	0x2000074c

08003818 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800381c:	4802      	ldr	r0, [pc, #8]	@ (8003828 <UART4_IRQHandler+0x10>)
 800381e:	f006 f9a3 	bl	8009b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000878 	.word	0x20000878

0800382c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003830:	4802      	ldr	r0, [pc, #8]	@ (800383c <TIM6_DAC_IRQHandler+0x10>)
 8003832:	f005 fba2 	bl	8008f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000794 	.word	0x20000794

08003840 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003844:	4802      	ldr	r0, [pc, #8]	@ (8003850 <TIM7_IRQHandler+0x10>)
 8003846:	f005 fb98 	bl	8008f7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	200007dc 	.word	0x200007dc

08003854 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8003858:	4802      	ldr	r0, [pc, #8]	@ (8003864 <DMA2_Stream1_IRQHandler+0x10>)
 800385a:	f002 f9ff 	bl	8005c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200009f8 	.word	0x200009f8

08003868 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800386c:	4802      	ldr	r0, [pc, #8]	@ (8003878 <USART6_IRQHandler+0x10>)
 800386e:	f006 f97b 	bl	8009b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000950 	.word	0x20000950

0800387c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return 1;
 8003880:	2301      	movs	r3, #1
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_kill>:

int _kill(int pid, int sig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003896:	f009 ffeb 	bl	800d870 <__errno>
 800389a:	4603      	mov	r3, r0
 800389c:	2216      	movs	r2, #22
 800389e:	601a      	str	r2, [r3, #0]
  return -1;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_exit>:

void _exit (int status)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ffe7 	bl	800388c <_kill>
  while (1) {}    /* Make sure we hang here */
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <_exit+0x12>

080038c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e00a      	b.n	80038ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038d4:	f3af 8000 	nop.w
 80038d8:	4601      	mov	r1, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	60ba      	str	r2, [r7, #8]
 80038e0:	b2ca      	uxtb	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbf0      	blt.n	80038d4 <_read+0x12>
  }

  return len;
 80038f2:	687b      	ldr	r3, [r7, #4]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e009      	b.n	8003922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	60ba      	str	r2, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	dbf1      	blt.n	800390e <_write+0x12>
  }
  return len;
 800392a:	687b      	ldr	r3, [r7, #4]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_close>:

int _close(int file)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800395c:	605a      	str	r2, [r3, #4]
  return 0;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <_isatty>:

int _isatty(int file)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <_sbrk+0x5c>)
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <_sbrk+0x60>)
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039b0:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <_sbrk+0x64>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <_sbrk+0x64>)
 80039ba:	4a12      	ldr	r2, [pc, #72]	@ (8003a04 <_sbrk+0x68>)
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039be:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <_sbrk+0x64>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d207      	bcs.n	80039dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039cc:	f009 ff50 	bl	800d870 <__errno>
 80039d0:	4603      	mov	r3, r0
 80039d2:	220c      	movs	r2, #12
 80039d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	e009      	b.n	80039f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <_sbrk+0x64>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <_sbrk+0x64>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <_sbrk+0x64>)
 80039ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20020000 	.word	0x20020000
 80039fc:	00000400 	.word	0x00000400
 8003a00:	200006b8 	.word	0x200006b8
 8003a04:	20001c60 	.word	0x20001c60

08003a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <SystemInit+0x20>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a12:	4a05      	ldr	r2, [pc, #20]	@ (8003a28 <SystemInit+0x20>)
 8003a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a40:	463b      	mov	r3, r7
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a48:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac4 <MX_TIM3_Init+0x98>)
 8003a4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8999;
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a50:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003a54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a56:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8003a5c:	4b18      	ldr	r3, [pc, #96]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003a62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a64:	4b16      	ldr	r3, [pc, #88]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a70:	4813      	ldr	r0, [pc, #76]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a72:	f005 f994 	bl	8008d9e <HAL_TIM_Base_Init>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003a7c:	f7ff f87a 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a86:	f107 0308 	add.w	r3, r7, #8
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	480c      	ldr	r0, [pc, #48]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003a8e:	f005 fb64 	bl	800915a <HAL_TIM_ConfigClockSource>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003a98:	f7ff f86c 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003aa4:	463b      	mov	r3, r7
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4805      	ldr	r0, [pc, #20]	@ (8003ac0 <MX_TIM3_Init+0x94>)
 8003aaa:	f005 fd85 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ab4:	f7ff f85e 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200006bc 	.word	0x200006bc
 8003ac4:	40000400 	.word	0x40000400

08003ac8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003adc:	463b      	mov	r3, r7
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8003b60 <MX_TIM4_Init+0x98>)
 8003ae8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8999;
 8003aea:	4b1c      	ldr	r3, [pc, #112]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003aec:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003af0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8003af8:	4b18      	ldr	r3, [pc, #96]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003afa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003afe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b00:	4b16      	ldr	r3, [pc, #88]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b0c:	4813      	ldr	r0, [pc, #76]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003b0e:	f005 f946 	bl	8008d9e <HAL_TIM_Base_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003b18:	f7ff f82c 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4619      	mov	r1, r3
 8003b28:	480c      	ldr	r0, [pc, #48]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003b2a:	f005 fb16 	bl	800915a <HAL_TIM_ConfigClockSource>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003b34:	f7ff f81e 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b40:	463b      	mov	r3, r7
 8003b42:	4619      	mov	r1, r3
 8003b44:	4805      	ldr	r0, [pc, #20]	@ (8003b5c <MX_TIM4_Init+0x94>)
 8003b46:	f005 fd37 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003b50:	f7ff f810 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b54:	bf00      	nop
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000704 	.word	0x20000704
 8003b60:	40000800 	.word	0x40000800

08003b64 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b6a:	f107 0308 	add.w	r3, r7, #8
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b78:	463b      	mov	r3, r7
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003b82:	4a1e      	ldr	r2, [pc, #120]	@ (8003bfc <MX_TIM5_Init+0x98>)
 8003b84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8999;
 8003b86:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003b88:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003b8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8003b94:	4b18      	ldr	r3, [pc, #96]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003b96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b9c:	4b16      	ldr	r3, [pc, #88]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba2:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ba8:	4813      	ldr	r0, [pc, #76]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003baa:	f005 f8f8 	bl	8008d9e <HAL_TIM_Base_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003bb4:	f7fe ffde 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	480c      	ldr	r0, [pc, #48]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003bc6:	f005 fac8 	bl	800915a <HAL_TIM_ConfigClockSource>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003bd0:	f7fe ffd0 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bdc:	463b      	mov	r3, r7
 8003bde:	4619      	mov	r1, r3
 8003be0:	4805      	ldr	r0, [pc, #20]	@ (8003bf8 <MX_TIM5_Init+0x94>)
 8003be2:	f005 fce9 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003bec:	f7fe ffc2 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000074c 	.word	0x2000074c
 8003bfc:	40000c00 	.word	0x40000c00

08003c00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c06:	463b      	mov	r3, r7
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c0e:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c10:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <MX_TIM6_Init+0x68>)
 8003c12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8999;
 8003c14:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c16:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003c1a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003c22:	4b10      	ldr	r3, [pc, #64]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c24:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003c28:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c30:	480c      	ldr	r0, [pc, #48]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c32:	f005 f8b4 	bl	8008d9e <HAL_TIM_Base_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003c3c:	f7fe ff9a 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c40:	2300      	movs	r3, #0
 8003c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003c48:	463b      	mov	r3, r7
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4805      	ldr	r0, [pc, #20]	@ (8003c64 <MX_TIM6_Init+0x64>)
 8003c4e:	f005 fcb3 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003c58:	f7fe ff8c 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000794 	.word	0x20000794
 8003c68:	40001000 	.word	0x40001000

08003c6c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c72:	463b      	mov	r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003c7c:	4a15      	ldr	r2, [pc, #84]	@ (8003cd4 <MX_TIM7_Init+0x68>)
 8003c7e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8003c80:	4b13      	ldr	r3, [pc, #76]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003c82:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003c86:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003c90:	2263      	movs	r2, #99	@ 0x63
 8003c92:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c94:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c9a:	480d      	ldr	r0, [pc, #52]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003c9c:	f005 f87f 	bl	8008d9e <HAL_TIM_Base_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003ca6:	f7fe ff65 	bl	8002b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003caa:	2300      	movs	r3, #0
 8003cac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4806      	ldr	r0, [pc, #24]	@ (8003cd0 <MX_TIM7_Init+0x64>)
 8003cb8:	f005 fc7e 	bl	80095b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003cc2:	f7fe ff57 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200007dc 	.word	0x200007dc
 8003cd4:	40001400 	.word	0x40001400

08003cd8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cde:	463b      	mov	r3, r7
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003cea:	4b16      	ldr	r3, [pc, #88]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003cec:	4a16      	ldr	r2, [pc, #88]	@ (8003d48 <MX_TIM9_Init+0x70>)
 8003cee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8999;
 8003cf0:	4b14      	ldr	r3, [pc, #80]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003cf2:	f242 3227 	movw	r2, #8999	@ 0x2327
 8003cf6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf8:	4b12      	ldr	r3, [pc, #72]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 6999;
 8003cfe:	4b11      	ldr	r3, [pc, #68]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003d00:	f641 3257 	movw	r2, #6999	@ 0x1b57
 8003d04:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d06:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003d12:	480c      	ldr	r0, [pc, #48]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003d14:	f005 f843 	bl	8008d9e <HAL_TIM_Base_Init>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8003d1e:	f7fe ff29 	bl	8002b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d26:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003d28:	463b      	mov	r3, r7
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4805      	ldr	r0, [pc, #20]	@ (8003d44 <MX_TIM9_Init+0x6c>)
 8003d2e:	f005 fa14 	bl	800915a <HAL_TIM_ConfigClockSource>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8003d38:	f7fe ff1c 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000824 	.word	0x20000824
 8003d48:	40014000 	.word	0x40014000

08003d4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a54      	ldr	r2, [pc, #336]	@ (8003eac <HAL_TIM_Base_MspInit+0x160>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d116      	bne.n	8003d8c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003d68:	f043 0302 	orr.w	r3, r3, #2
 8003d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d6e:	4b50      	ldr	r3, [pc, #320]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	69fb      	ldr	r3, [r7, #28]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	201d      	movs	r0, #29
 8003d80:	f001 fd31 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d84:	201d      	movs	r0, #29
 8003d86:	f001 fd4a 	bl	800581e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003d8a:	e08a      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM4)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a48      	ldr	r2, [pc, #288]	@ (8003eb4 <HAL_TIM_Base_MspInit+0x168>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d116      	bne.n	8003dc4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	4b45      	ldr	r3, [pc, #276]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	4a44      	ldr	r2, [pc, #272]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da6:	4b42      	ldr	r3, [pc, #264]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	201e      	movs	r0, #30
 8003db8:	f001 fd15 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003dbc:	201e      	movs	r0, #30
 8003dbe:	f001 fd2e 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 8003dc2:	e06e      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM5)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb8 <HAL_TIM_Base_MspInit+0x16c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d116      	bne.n	8003dfc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	4b37      	ldr	r3, [pc, #220]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	4a36      	ldr	r2, [pc, #216]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dde:	4b34      	ldr	r3, [pc, #208]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003dea:	2200      	movs	r2, #0
 8003dec:	2100      	movs	r1, #0
 8003dee:	2032      	movs	r0, #50	@ 0x32
 8003df0:	f001 fcf9 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003df4:	2032      	movs	r0, #50	@ 0x32
 8003df6:	f001 fd12 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 8003dfa:	e052      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM6)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2e      	ldr	r2, [pc, #184]	@ (8003ebc <HAL_TIM_Base_MspInit+0x170>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d116      	bne.n	8003e34 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	4a28      	ldr	r2, [pc, #160]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e16:	4b26      	ldr	r3, [pc, #152]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e22:	2200      	movs	r2, #0
 8003e24:	2100      	movs	r1, #0
 8003e26:	2036      	movs	r0, #54	@ 0x36
 8003e28:	f001 fcdd 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e2c:	2036      	movs	r0, #54	@ 0x36
 8003e2e:	f001 fcf6 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 8003e32:	e036      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM7)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a21      	ldr	r2, [pc, #132]	@ (8003ec0 <HAL_TIM_Base_MspInit+0x174>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d116      	bne.n	8003e6c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e48:	f043 0320 	orr.w	r3, r3, #32
 8003e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e4e:	4b18      	ldr	r3, [pc, #96]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	2037      	movs	r0, #55	@ 0x37
 8003e60:	f001 fcc1 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003e64:	2037      	movs	r0, #55	@ 0x37
 8003e66:	f001 fcda 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 8003e6a:	e01a      	b.n	8003ea2 <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM9)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <HAL_TIM_Base_MspInit+0x178>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d115      	bne.n	8003ea2 <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <HAL_TIM_Base_MspInit+0x164>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003e92:	2200      	movs	r2, #0
 8003e94:	2100      	movs	r1, #0
 8003e96:	2018      	movs	r0, #24
 8003e98:	f001 fca5 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003e9c:	2018      	movs	r0, #24
 8003e9e:	f001 fcbe 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40001000 	.word	0x40001000
 8003ec0:	40001400 	.word	0x40001400
 8003ec4:	40014000 	.word	0x40014000

08003ec8 <ukb_test_init>:
  ukb_test_s.angle_X  =
  ukb_test_s.angle_Y  =
  ukb_test_s.angle_Z  =
 */
void ukb_test_init(UKB_test_t *UKB_datas)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	ukb_s = UKB_datas;
 8003ed0:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <ukb_test_init+0x20>)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6013      	str	r3, [r2, #0]
	status_data.data16 = 0;
 8003ed6:	4b05      	ldr	r3, [pc, #20]	@ (8003eec <ukb_test_init+0x24>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	801a      	strh	r2, [r3, #0]
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	20000870 	.word	0x20000870
 8003eec:	20000874 	.word	0x20000874

08003ef0 <process_received_datas>:

void process_received_datas(uint8_t *data)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	@ 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	uint8_t packet[37] = {0};
 8003ef8:	f107 0308 	add.w	r3, r7, #8
 8003efc:	2225      	movs	r2, #37	@ 0x25
 8003efe:	2100      	movs	r1, #0
 8003f00:	4618      	mov	r0, r3
 8003f02:	f009 fc3c 	bl	800d77e <memset>
	memcpy(packet, data, 36);
 8003f06:	f107 0308 	add.w	r3, r7, #8
 8003f0a:	2224      	movs	r2, #36	@ 0x24
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f009 fcdb 	bl	800d8ca <memcpy>
	packet[36] = '\0';
 8003f14:	2300      	movs	r3, #0
 8003f16:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	if(mode == 0)
 8003f1a:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <process_received_datas+0xc0>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d123      	bne.n	8003f6a <process_received_datas+0x7a>
	{
		if(!memcmp(packet, sut_start, 5))
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	2205      	movs	r2, #5
 8003f28:	4922      	ldr	r1, [pc, #136]	@ (8003fb4 <process_received_datas+0xc4>)
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f009 fc17 	bl	800d75e <memcmp>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d107      	bne.n	8003f46 <process_received_datas+0x56>
		{
			serial_println("sut start", &TTL_HNDLR);
 8003f36:	4920      	ldr	r1, [pc, #128]	@ (8003fb8 <process_received_datas+0xc8>)
 8003f38:	4820      	ldr	r0, [pc, #128]	@ (8003fbc <process_received_datas+0xcc>)
 8003f3a:	f7fe fc31 	bl	80027a0 <serial_println>
			mode = 1;
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <process_received_datas+0xc0>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	701a      	strb	r2, [r3, #0]
			{

			}
		}
	}
}
 8003f44:	e030      	b.n	8003fa8 <process_received_datas+0xb8>
		else if(!memcmp(packet, sit_start, 5))
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	491c      	ldr	r1, [pc, #112]	@ (8003fc0 <process_received_datas+0xd0>)
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f009 fc05 	bl	800d75e <memcmp>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d126      	bne.n	8003fa8 <process_received_datas+0xb8>
			serial_println("sit start", &TTL_HNDLR);
 8003f5a:	4917      	ldr	r1, [pc, #92]	@ (8003fb8 <process_received_datas+0xc8>)
 8003f5c:	4819      	ldr	r0, [pc, #100]	@ (8003fc4 <process_received_datas+0xd4>)
 8003f5e:	f7fe fc1f 	bl	80027a0 <serial_println>
			mode = 2;
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <process_received_datas+0xc0>)
 8003f64:	2202      	movs	r2, #2
 8003f66:	701a      	strb	r2, [r3, #0]
}
 8003f68:	e01e      	b.n	8003fa8 <process_received_datas+0xb8>
		if(!memcmp(packet, test_stop, 5))
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	2205      	movs	r2, #5
 8003f70:	4915      	ldr	r1, [pc, #84]	@ (8003fc8 <process_received_datas+0xd8>)
 8003f72:	4618      	mov	r0, r3
 8003f74:	f009 fbf3 	bl	800d75e <memcmp>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <process_received_datas+0xa8>
			serial_println("test stop", &TTL_HNDLR);
 8003f7e:	490e      	ldr	r1, [pc, #56]	@ (8003fb8 <process_received_datas+0xc8>)
 8003f80:	4812      	ldr	r0, [pc, #72]	@ (8003fcc <process_received_datas+0xdc>)
 8003f82:	f7fe fc0d 	bl	80027a0 <serial_println>
			mode = 0;
 8003f86:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb0 <process_received_datas+0xc0>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
			reset_algorithm_status();
 8003f8c:	f7fd fade 	bl	800154c <reset_algorithm_status>
			status_data.data16 = 0;
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <process_received_datas+0xe0>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	801a      	strh	r2, [r3, #0]
}
 8003f96:	e007      	b.n	8003fa8 <process_received_datas+0xb8>
			if(!unpack_datas_for_test(packet, ukb_s))
 8003f98:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd4 <process_received_datas+0xe4>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f818 	bl	8003fd8 <unpack_datas_for_test>
}
 8003fa8:	bf00      	nop
 8003faa:	3730      	adds	r7, #48	@ 0x30
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	2000086c 	.word	0x2000086c
 8003fb4:	20000010 	.word	0x20000010
 8003fb8:	200008c0 	.word	0x200008c0
 8003fbc:	080133ac 	.word	0x080133ac
 8003fc0:	20000008 	.word	0x20000008
 8003fc4:	080133b8 	.word	0x080133b8
 8003fc8:	20000018 	.word	0x20000018
 8003fcc:	080133c4 	.word	0x080133c4
 8003fd0:	20000874 	.word	0x20000874
 8003fd4:	20000870 	.word	0x20000870

08003fd8 <unpack_datas_for_test>:

int unpack_datas_for_test(uint8_t *packed_datas, UKB_test_t *ukb_s)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  union float_to_UINT8_converter var;
  if(packed_datas[0] == 0xAB && packed_datas[34] == 0x0D && packed_datas[35] == 0x0A && calc_checksum(packed_datas, 33) == packed_datas[33])
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2bab      	cmp	r3, #171	@ 0xab
 8003fe8:	f040 80b1 	bne.w	800414e <unpack_datas_for_test+0x176>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3322      	adds	r3, #34	@ 0x22
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b0d      	cmp	r3, #13
 8003ff4:	f040 80ab 	bne.w	800414e <unpack_datas_for_test+0x176>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3323      	adds	r3, #35	@ 0x23
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b0a      	cmp	r3, #10
 8004000:	f040 80a5 	bne.w	800414e <unpack_datas_for_test+0x176>
 8004004:	2121      	movs	r1, #33	@ 0x21
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f998 	bl	800433c <calc_checksum>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3321      	adds	r3, #33	@ 0x21
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	f040 8099 	bne.w	800414e <unpack_datas_for_test+0x176>
  {
    var.array[arr_0] = packed_datas[1];
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[2];
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	789b      	ldrb	r3, [r3, #2]
 8004026:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[3];
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	78db      	ldrb	r3, [r3, #3]
 800402c:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[4];
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	791b      	ldrb	r3, [r3, #4]
 8004032:	733b      	strb	r3, [r7, #12]
    ukb_s->altitude = var.num;
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	601a      	str	r2, [r3, #0]

    var.array[arr_0] = packed_datas[5];
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	795b      	ldrb	r3, [r3, #5]
 800403e:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[6];
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	799b      	ldrb	r3, [r3, #6]
 8004044:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[7];
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	79db      	ldrb	r3, [r3, #7]
 800404a:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[8];
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	7a1b      	ldrb	r3, [r3, #8]
 8004050:	733b      	strb	r3, [r7, #12]
    ukb_s->pressure = var.num;
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	605a      	str	r2, [r3, #4]

    var.array[arr_0] = packed_datas[9];
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	7a5b      	ldrb	r3, [r3, #9]
 800405c:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[10];
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	7a9b      	ldrb	r3, [r3, #10]
 8004062:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[11];
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7adb      	ldrb	r3, [r3, #11]
 8004068:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[12];
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7b1b      	ldrb	r3, [r3, #12]
 800406e:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_X = var.num;
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	609a      	str	r2, [r3, #8]
    ukb_s->accel_X *= TO_MG;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	edd3 7a02 	vldr	s15, [r3, #8]
 800407c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8004158 <unpack_datas_for_test+0x180>
 8004080:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	edc3 7a02 	vstr	s15, [r3, #8]

    var.array[arr_0] = packed_datas[13];
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	7b5b      	ldrb	r3, [r3, #13]
 800408e:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[14];
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7b9b      	ldrb	r3, [r3, #14]
 8004094:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[15];
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	7bdb      	ldrb	r3, [r3, #15]
 800409a:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[16];
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	7c1b      	ldrb	r3, [r3, #16]
 80040a0:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_Y = var.num;
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	60da      	str	r2, [r3, #12]
    ukb_s->accel_Y *= TO_MG;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80040ae:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8004158 <unpack_datas_for_test+0x180>
 80040b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	edc3 7a03 	vstr	s15, [r3, #12]

    var.array[arr_0] = packed_datas[17];
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7c5b      	ldrb	r3, [r3, #17]
 80040c0:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[18];
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	7c9b      	ldrb	r3, [r3, #18]
 80040c6:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[19];
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7cdb      	ldrb	r3, [r3, #19]
 80040cc:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[20];
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7d1b      	ldrb	r3, [r3, #20]
 80040d2:	733b      	strb	r3, [r7, #12]
    ukb_s->accel_Z = var.num;
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	611a      	str	r2, [r3, #16]
    ukb_s->accel_Z *= TO_MG;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80040e0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8004158 <unpack_datas_for_test+0x180>
 80040e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	edc3 7a04 	vstr	s15, [r3, #16]

    var.array[arr_0] = packed_datas[21];
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7d5b      	ldrb	r3, [r3, #21]
 80040f2:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[22];
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7d9b      	ldrb	r3, [r3, #22]
 80040f8:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[23];
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7ddb      	ldrb	r3, [r3, #23]
 80040fe:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[24];
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7e1b      	ldrb	r3, [r3, #24]
 8004104:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_X = var.num;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	615a      	str	r2, [r3, #20]

    var.array[arr_0] = packed_datas[25];
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	7e5b      	ldrb	r3, [r3, #25]
 8004110:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[26];
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7e9b      	ldrb	r3, [r3, #26]
 8004116:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[27];
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	7edb      	ldrb	r3, [r3, #27]
 800411c:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[28];
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7f1b      	ldrb	r3, [r3, #28]
 8004122:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_Y = var.num;
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	619a      	str	r2, [r3, #24]

    var.array[arr_0] = packed_datas[29];
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	7f5b      	ldrb	r3, [r3, #29]
 800412e:	73fb      	strb	r3, [r7, #15]
    var.array[arr_1] = packed_datas[30];
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7f9b      	ldrb	r3, [r3, #30]
 8004134:	73bb      	strb	r3, [r7, #14]
    var.array[arr_2] = packed_datas[31];
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	7fdb      	ldrb	r3, [r3, #31]
 800413a:	737b      	strb	r3, [r7, #13]
    var.array[arr_3] = packed_datas[32];
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004142:	733b      	strb	r3, [r7, #12]
    ukb_s->angle_Z = var.num;
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	61da      	str	r2, [r3, #28]

    return 0;
 800414a:	2300      	movs	r3, #0
 800414c:	e000      	b.n	8004150 <unpack_datas_for_test+0x178>
  }
  return 1;
 800414e:	2301      	movs	r3, #1
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	42cbe148 	.word	0x42cbe148

0800415c <pack_datas_for_test>:

void pack_datas_for_test(uint8_t *packed_datas, UKB_test_t *ukb_s)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  union float_to_UINT8_converter var;
  packed_datas[0] = 0xAB;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	22ab      	movs	r2, #171	@ 0xab
 800416a:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->altitude;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60fb      	str	r3, [r7, #12]
  packed_datas[1] = var.array[arr_0];
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3301      	adds	r3, #1
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	701a      	strb	r2, [r3, #0]
  packed_datas[2] = var.array[arr_1];
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3302      	adds	r3, #2
 800417e:	7bba      	ldrb	r2, [r7, #14]
 8004180:	701a      	strb	r2, [r3, #0]
  packed_datas[3] = var.array[arr_2];
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3303      	adds	r3, #3
 8004186:	7b7a      	ldrb	r2, [r7, #13]
 8004188:	701a      	strb	r2, [r3, #0]
  packed_datas[4] = var.array[arr_3];
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	7b3a      	ldrb	r2, [r7, #12]
 8004190:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->pressure;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]
  packed_datas[5] = var.array[arr_0];
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3305      	adds	r3, #5
 800419c:	7bfa      	ldrb	r2, [r7, #15]
 800419e:	701a      	strb	r2, [r3, #0]
  packed_datas[6] = var.array[arr_1];
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3306      	adds	r3, #6
 80041a4:	7bba      	ldrb	r2, [r7, #14]
 80041a6:	701a      	strb	r2, [r3, #0]
  packed_datas[7] = var.array[arr_2];
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3307      	adds	r3, #7
 80041ac:	7b7a      	ldrb	r2, [r7, #13]
 80041ae:	701a      	strb	r2, [r3, #0]
  packed_datas[8] = var.array[arr_3];
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3308      	adds	r3, #8
 80041b4:	7b3a      	ldrb	r2, [r7, #12]
 80041b6:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_X;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	60fb      	str	r3, [r7, #12]
  packed_datas[9] = var.array[arr_0];
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3309      	adds	r3, #9
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	701a      	strb	r2, [r3, #0]
  packed_datas[10] = var.array[arr_1];
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	330a      	adds	r3, #10
 80041ca:	7bba      	ldrb	r2, [r7, #14]
 80041cc:	701a      	strb	r2, [r3, #0]
  packed_datas[11] = var.array[arr_2];
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	330b      	adds	r3, #11
 80041d2:	7b7a      	ldrb	r2, [r7, #13]
 80041d4:	701a      	strb	r2, [r3, #0]
  packed_datas[12] = var.array[arr_3];
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	330c      	adds	r3, #12
 80041da:	7b3a      	ldrb	r2, [r7, #12]
 80041dc:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_Y;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	60fb      	str	r3, [r7, #12]
  packed_datas[13] = var.array[arr_0];
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	330d      	adds	r3, #13
 80041e8:	7bfa      	ldrb	r2, [r7, #15]
 80041ea:	701a      	strb	r2, [r3, #0]
  packed_datas[14] = var.array[arr_1];
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	330e      	adds	r3, #14
 80041f0:	7bba      	ldrb	r2, [r7, #14]
 80041f2:	701a      	strb	r2, [r3, #0]
  packed_datas[15] = var.array[arr_2];
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	330f      	adds	r3, #15
 80041f8:	7b7a      	ldrb	r2, [r7, #13]
 80041fa:	701a      	strb	r2, [r3, #0]
  packed_datas[16] = var.array[arr_3];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3310      	adds	r3, #16
 8004200:	7b3a      	ldrb	r2, [r7, #12]
 8004202:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->accel_Z;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	60fb      	str	r3, [r7, #12]
  packed_datas[17] = var.array[arr_0];
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3311      	adds	r3, #17
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	701a      	strb	r2, [r3, #0]
  packed_datas[18] = var.array[arr_1];
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3312      	adds	r3, #18
 8004216:	7bba      	ldrb	r2, [r7, #14]
 8004218:	701a      	strb	r2, [r3, #0]
  packed_datas[19] = var.array[arr_2];
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3313      	adds	r3, #19
 800421e:	7b7a      	ldrb	r2, [r7, #13]
 8004220:	701a      	strb	r2, [r3, #0]
  packed_datas[20] = var.array[arr_3];
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3314      	adds	r3, #20
 8004226:	7b3a      	ldrb	r2, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_X;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	60fb      	str	r3, [r7, #12]
  packed_datas[21] = var.array[arr_0];
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3315      	adds	r3, #21
 8004234:	7bfa      	ldrb	r2, [r7, #15]
 8004236:	701a      	strb	r2, [r3, #0]
  packed_datas[22] = var.array[arr_1];
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3316      	adds	r3, #22
 800423c:	7bba      	ldrb	r2, [r7, #14]
 800423e:	701a      	strb	r2, [r3, #0]
  packed_datas[23] = var.array[arr_2];
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3317      	adds	r3, #23
 8004244:	7b7a      	ldrb	r2, [r7, #13]
 8004246:	701a      	strb	r2, [r3, #0]
  packed_datas[24] = var.array[arr_3];
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3318      	adds	r3, #24
 800424c:	7b3a      	ldrb	r2, [r7, #12]
 800424e:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_Y;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	60fb      	str	r3, [r7, #12]
  packed_datas[25] = var.array[arr_0];
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	3319      	adds	r3, #25
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	701a      	strb	r2, [r3, #0]
  packed_datas[26] = var.array[arr_1];
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	331a      	adds	r3, #26
 8004262:	7bba      	ldrb	r2, [r7, #14]
 8004264:	701a      	strb	r2, [r3, #0]
  packed_datas[27] = var.array[arr_2];
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	331b      	adds	r3, #27
 800426a:	7b7a      	ldrb	r2, [r7, #13]
 800426c:	701a      	strb	r2, [r3, #0]
  packed_datas[28] = var.array[arr_3];
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	331c      	adds	r3, #28
 8004272:	7b3a      	ldrb	r2, [r7, #12]
 8004274:	701a      	strb	r2, [r3, #0]

  var.num = ukb_s->angle_Z;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	60fb      	str	r3, [r7, #12]
  packed_datas[29] = var.array[arr_0];
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	331d      	adds	r3, #29
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	701a      	strb	r2, [r3, #0]
  packed_datas[30] = var.array[arr_1];
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	331e      	adds	r3, #30
 8004288:	7bba      	ldrb	r2, [r7, #14]
 800428a:	701a      	strb	r2, [r3, #0]
  packed_datas[31] = var.array[arr_2];
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	331f      	adds	r3, #31
 8004290:	7b7a      	ldrb	r2, [r7, #13]
 8004292:	701a      	strb	r2, [r3, #0]
  packed_datas[32] = var.array[arr_3];
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3320      	adds	r3, #32
 8004298:	7b3a      	ldrb	r2, [r7, #12]
 800429a:	701a      	strb	r2, [r3, #0]

  packed_datas[33] = calc_checksum(packed_datas, 33);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0421 	add.w	r4, r3, #33	@ 0x21
 80042a2:	2121      	movs	r1, #33	@ 0x21
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f849 	bl	800433c <calc_checksum>
 80042aa:	4603      	mov	r3, r0
 80042ac:	7023      	strb	r3, [r4, #0]

  packed_datas[34] = 0x0D;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3322      	adds	r3, #34	@ 0x22
 80042b2:	220d      	movs	r2, #13
 80042b4:	701a      	strb	r2, [r3, #0]
  packed_datas[35] = 0x0A;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3323      	adds	r3, #35	@ 0x23
 80042ba:	220a      	movs	r2, #10
 80042bc:	701a      	strb	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd90      	pop	{r4, r7, pc}
	...

080042c8 <get_test_mode>:

UKB_test_mode_t get_test_mode()
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	return mode;
 80042cc:	4b03      	ldr	r3, [pc, #12]	@ (80042dc <get_test_mode+0x14>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	2000086c 	.word	0x2000086c

080042e0 <ukb_test_stat_update>:
	STAT_TOUCH_DOWN		=	(uint8_t)0x08,
	STAT_P1_NO_P2_OK	=	(uint8_t)0x09,
 */

void ukb_test_stat_update(flight_states_e status)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	71fb      	strb	r3, [r7, #7]

	status_data.data16 = ((1 << (status)) - 1) | status;
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	2201      	movs	r2, #1
 80042ee:	fa02 f303 	lsl.w	r3, r2, r3
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	b21a      	sxth	r2, r3
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	b21b      	sxth	r3, r3
 80042fe:	4313      	orrs	r3, r2
 8004300:	b21b      	sxth	r3, r3
 8004302:	b29a      	uxth	r2, r3
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <ukb_test_stat_update+0x58>)
 8004306:	801a      	strh	r2, [r3, #0]
	uint8_t data[7];

	data[0] = 0xaa;
 8004308:	23aa      	movs	r3, #170	@ 0xaa
 800430a:	723b      	strb	r3, [r7, #8]
	data[1] = status_data.data8[0];
 800430c:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <ukb_test_stat_update+0x58>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	727b      	strb	r3, [r7, #9]
	data[2] = status_data.data8[1];
 8004312:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <ukb_test_stat_update+0x58>)
 8004314:	785b      	ldrb	r3, [r3, #1]
 8004316:	72bb      	strb	r3, [r7, #10]
	data[3] = calc_checksum(data, 3);
 8004318:	f107 0308 	add.w	r3, r7, #8
 800431c:	2103      	movs	r1, #3
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f80c 	bl	800433c <calc_checksum>
 8004324:	4603      	mov	r3, r0
 8004326:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x0d;
 8004328:	230d      	movs	r3, #13
 800432a:	733b      	strb	r3, [r7, #12]
	data[5] = 0x0a;
 800432c:	230a      	movs	r3, #10
 800432e:	737b      	strb	r3, [r7, #13]

	//HAL_UART_Transmit(&RS232_HNDLR, data, 6, 30);
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000874 	.word	0x20000874

0800433c <calc_checksum>:
uint8_t calc_checksum(uint8_t *packed_datas, uint16_t len)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	460b      	mov	r3, r1
 8004346:	807b      	strh	r3, [r7, #2]
  uint32_t sum = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < len; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	e00a      	b.n	8004368 <calc_checksum+0x2c>
  {
    sum += packed_datas[i];
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4413      	add	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  for(int i = 0; i < len; i++)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	3301      	adds	r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	dbf0      	blt.n	8004352 <calc_checksum+0x16>
  }
  return (uint8_t)(sum % 256);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	b2db      	uxtb	r3, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004384:	4b11      	ldr	r3, [pc, #68]	@ (80043cc <MX_UART4_Init+0x4c>)
 8004386:	4a12      	ldr	r2, [pc, #72]	@ (80043d0 <MX_UART4_Init+0x50>)
 8004388:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800438a:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <MX_UART4_Init+0x4c>)
 800438c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8004390:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004392:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <MX_UART4_Init+0x4c>)
 8004394:	2200      	movs	r2, #0
 8004396:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004398:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <MX_UART4_Init+0x4c>)
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <MX_UART4_Init+0x4c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <MX_UART4_Init+0x4c>)
 80043a6:	220c      	movs	r2, #12
 80043a8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043aa:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <MX_UART4_Init+0x4c>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <MX_UART4_Init+0x4c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80043b6:	4805      	ldr	r0, [pc, #20]	@ (80043cc <MX_UART4_Init+0x4c>)
 80043b8:	f005 f98e 	bl	80096d8 <HAL_UART_Init>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80043c2:	f7fe fbd7 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80043c6:	bf00      	nop
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000878 	.word	0x20000878
 80043d0:	40004c00 	.word	0x40004c00

080043d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80043d8:	4b11      	ldr	r3, [pc, #68]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 80043da:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <MX_USART1_UART_Init+0x50>)
 80043dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80043de:	4b10      	ldr	r3, [pc, #64]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 80043e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80043e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 80043fa:	220c      	movs	r2, #12
 80043fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 8004400:	2200      	movs	r2, #0
 8004402:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004404:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 8004406:	2200      	movs	r2, #0
 8004408:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800440a:	4805      	ldr	r0, [pc, #20]	@ (8004420 <MX_USART1_UART_Init+0x4c>)
 800440c:	f005 f964 	bl	80096d8 <HAL_UART_Init>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004416:	f7fe fbad 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800441a:	bf00      	nop
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	200008c0 	.word	0x200008c0
 8004424:	40011000 	.word	0x40011000

08004428 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800442c:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 800442e:	4a12      	ldr	r2, [pc, #72]	@ (8004478 <MX_USART3_UART_Init+0x50>)
 8004430:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 8004434:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004438:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800443a:	4b0e      	ldr	r3, [pc, #56]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 8004442:	2200      	movs	r2, #0
 8004444:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004446:	4b0b      	ldr	r3, [pc, #44]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 800444e:	220c      	movs	r2, #12
 8004450:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004452:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 8004454:	2200      	movs	r2, #0
 8004456:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004458:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800445e:	4805      	ldr	r0, [pc, #20]	@ (8004474 <MX_USART3_UART_Init+0x4c>)
 8004460:	f005 f93a 	bl	80096d8 <HAL_UART_Init>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800446a:	f7fe fb83 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000908 	.word	0x20000908
 8004478:	40004800 	.word	0x40004800

0800447c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004480:	4b11      	ldr	r3, [pc, #68]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 8004482:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <MX_USART6_UART_Init+0x50>)
 8004484:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 8004488:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800448c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800448e:	4b0e      	ldr	r3, [pc, #56]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 8004490:	2200      	movs	r2, #0
 8004492:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 8004496:	2200      	movs	r2, #0
 8004498:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800449a:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 800449c:	2200      	movs	r2, #0
 800449e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80044a0:	4b09      	ldr	r3, [pc, #36]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 80044a2:	220c      	movs	r2, #12
 80044a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044a6:	4b08      	ldr	r3, [pc, #32]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80044b2:	4805      	ldr	r0, [pc, #20]	@ (80044c8 <MX_USART6_UART_Init+0x4c>)
 80044b4:	f005 f910 	bl	80096d8 <HAL_UART_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80044be:	f7fe fb59 	bl	8002b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000950 	.word	0x20000950
 80044cc:	40011400 	.word	0x40011400

080044d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b090      	sub	sp, #64	@ 0x40
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	609a      	str	r2, [r3, #8]
 80044e4:	60da      	str	r2, [r3, #12]
 80044e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a79      	ldr	r2, [pc, #484]	@ (80046d4 <HAL_UART_MspInit+0x204>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d135      	bne.n	800455e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044f6:	4b78      	ldr	r3, [pc, #480]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	4a77      	ldr	r2, [pc, #476]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80044fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004500:	6413      	str	r3, [r2, #64]	@ 0x40
 8004502:	4b75      	ldr	r3, [pc, #468]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
 8004512:	4b71      	ldr	r3, [pc, #452]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	4a70      	ldr	r2, [pc, #448]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004518:	f043 0304 	orr.w	r3, r3, #4
 800451c:	6313      	str	r3, [r2, #48]	@ 0x30
 800451e:	4b6e      	ldr	r3, [pc, #440]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800452a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800452e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2302      	movs	r3, #2
 8004532:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004538:	2303      	movs	r3, #3
 800453a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800453c:	2308      	movs	r3, #8
 800453e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004544:	4619      	mov	r1, r3
 8004546:	4865      	ldr	r0, [pc, #404]	@ (80046dc <HAL_UART_MspInit+0x20c>)
 8004548:	f001 fdf2 	bl	8006130 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	2100      	movs	r1, #0
 8004550:	2034      	movs	r0, #52	@ 0x34
 8004552:	f001 f948 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004556:	2034      	movs	r0, #52	@ 0x34
 8004558:	f001 f961 	bl	800581e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800455c:	e131      	b.n	80047c2 <HAL_UART_MspInit+0x2f2>
  else if(uartHandle->Instance==USART1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5f      	ldr	r2, [pc, #380]	@ (80046e0 <HAL_UART_MspInit+0x210>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d12c      	bne.n	80045c2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004568:	2300      	movs	r3, #0
 800456a:	623b      	str	r3, [r7, #32]
 800456c:	4b5a      	ldr	r3, [pc, #360]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	4a59      	ldr	r2, [pc, #356]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004572:	f043 0310 	orr.w	r3, r3, #16
 8004576:	6453      	str	r3, [r2, #68]	@ 0x44
 8004578:	4b57      	ldr	r3, [pc, #348]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 800457a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	4b53      	ldr	r3, [pc, #332]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	4a52      	ldr	r2, [pc, #328]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 800458e:	f043 0302 	orr.w	r3, r3, #2
 8004592:	6313      	str	r3, [r2, #48]	@ 0x30
 8004594:	4b50      	ldr	r3, [pc, #320]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80045a0:	23c0      	movs	r3, #192	@ 0xc0
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a4:	2302      	movs	r3, #2
 80045a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ac:	2303      	movs	r3, #3
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045b0:	2307      	movs	r3, #7
 80045b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80045b8:	4619      	mov	r1, r3
 80045ba:	484a      	ldr	r0, [pc, #296]	@ (80046e4 <HAL_UART_MspInit+0x214>)
 80045bc:	f001 fdb8 	bl	8006130 <HAL_GPIO_Init>
}
 80045c0:	e0ff      	b.n	80047c2 <HAL_UART_MspInit+0x2f2>
  else if(uartHandle->Instance==USART3)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a48      	ldr	r2, [pc, #288]	@ (80046e8 <HAL_UART_MspInit+0x218>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	f040 8093 	bne.w	80046f4 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
 80045d2:	4b41      	ldr	r3, [pc, #260]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	4a40      	ldr	r2, [pc, #256]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045de:	4b3e      	ldr	r3, [pc, #248]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e6:	61bb      	str	r3, [r7, #24]
 80045e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	4b3a      	ldr	r3, [pc, #232]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	4a39      	ldr	r2, [pc, #228]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045f4:	f043 0304 	orr.w	r3, r3, #4
 80045f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80045fa:	4b37      	ldr	r3, [pc, #220]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	4b33      	ldr	r3, [pc, #204]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	4a32      	ldr	r2, [pc, #200]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	@ 0x30
 8004616:	4b30      	ldr	r3, [pc, #192]	@ (80046d8 <HAL_UART_MspInit+0x208>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004622:	2320      	movs	r3, #32
 8004624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004626:	2302      	movs	r3, #2
 8004628:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462a:	2300      	movs	r3, #0
 800462c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004632:	2307      	movs	r3, #7
 8004634:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004636:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800463a:	4619      	mov	r1, r3
 800463c:	4827      	ldr	r0, [pc, #156]	@ (80046dc <HAL_UART_MspInit+0x20c>)
 800463e:	f001 fd77 	bl	8006130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004642:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004650:	2303      	movs	r3, #3
 8004652:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004654:	2307      	movs	r3, #7
 8004656:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004658:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800465c:	4619      	mov	r1, r3
 800465e:	4821      	ldr	r0, [pc, #132]	@ (80046e4 <HAL_UART_MspInit+0x214>)
 8004660:	f001 fd66 	bl	8006130 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004664:	4b21      	ldr	r3, [pc, #132]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 8004666:	4a22      	ldr	r2, [pc, #136]	@ (80046f0 <HAL_UART_MspInit+0x220>)
 8004668:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800466a:	4b20      	ldr	r3, [pc, #128]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 800466c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004670:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004672:	4b1e      	ldr	r3, [pc, #120]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 8004674:	2200      	movs	r2, #0
 8004676:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004678:	4b1c      	ldr	r3, [pc, #112]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 800467a:	2200      	movs	r2, #0
 800467c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800467e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 8004680:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004684:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004686:	4b19      	ldr	r3, [pc, #100]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 800468e:	2200      	movs	r2, #0
 8004690:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004692:	4b16      	ldr	r3, [pc, #88]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 8004694:	2200      	movs	r2, #0
 8004696:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004698:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 800469a:	2200      	movs	r2, #0
 800469c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800469e:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80046a4:	4811      	ldr	r0, [pc, #68]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 80046a6:	f001 f8e3 	bl	8005870 <HAL_DMA_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 80046b0:	f7fe fa60 	bl	8002b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a0d      	ldr	r2, [pc, #52]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 80046b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <HAL_UART_MspInit+0x21c>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80046c0:	2200      	movs	r2, #0
 80046c2:	2100      	movs	r1, #0
 80046c4:	2027      	movs	r0, #39	@ 0x27
 80046c6:	f001 f88e 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80046ca:	2027      	movs	r0, #39	@ 0x27
 80046cc:	f001 f8a7 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 80046d0:	e077      	b.n	80047c2 <HAL_UART_MspInit+0x2f2>
 80046d2:	bf00      	nop
 80046d4:	40004c00 	.word	0x40004c00
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40020800 	.word	0x40020800
 80046e0:	40011000 	.word	0x40011000
 80046e4:	40020400 	.word	0x40020400
 80046e8:	40004800 	.word	0x40004800
 80046ec:	20000998 	.word	0x20000998
 80046f0:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a34      	ldr	r2, [pc, #208]	@ (80047cc <HAL_UART_MspInit+0x2fc>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d161      	bne.n	80047c2 <HAL_UART_MspInit+0x2f2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <HAL_UART_MspInit+0x300>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	4a32      	ldr	r2, [pc, #200]	@ (80047d0 <HAL_UART_MspInit+0x300>)
 8004708:	f043 0320 	orr.w	r3, r3, #32
 800470c:	6453      	str	r3, [r2, #68]	@ 0x44
 800470e:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <HAL_UART_MspInit+0x300>)
 8004710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <HAL_UART_MspInit+0x300>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	4a2b      	ldr	r2, [pc, #172]	@ (80047d0 <HAL_UART_MspInit+0x300>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6313      	str	r3, [r2, #48]	@ 0x30
 800472a:	4b29      	ldr	r3, [pc, #164]	@ (80047d0 <HAL_UART_MspInit+0x300>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	60bb      	str	r3, [r7, #8]
 8004734:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004736:	23c0      	movs	r3, #192	@ 0xc0
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800473a:	2302      	movs	r3, #2
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473e:	2300      	movs	r3, #0
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004742:	2303      	movs	r3, #3
 8004744:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004746:	2308      	movs	r3, #8
 8004748:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800474a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800474e:	4619      	mov	r1, r3
 8004750:	4820      	ldr	r0, [pc, #128]	@ (80047d4 <HAL_UART_MspInit+0x304>)
 8004752:	f001 fced 	bl	8006130 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004756:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004758:	4a20      	ldr	r2, [pc, #128]	@ (80047dc <HAL_UART_MspInit+0x30c>)
 800475a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800475c:	4b1e      	ldr	r3, [pc, #120]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 800475e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004762:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004764:	4b1c      	ldr	r3, [pc, #112]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004766:	2200      	movs	r2, #0
 8004768:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 800476c:	2200      	movs	r2, #0
 800476e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004776:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004778:	4b17      	ldr	r3, [pc, #92]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 800477a:	2200      	movs	r2, #0
 800477c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800477e:	4b16      	ldr	r3, [pc, #88]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004780:	2200      	movs	r2, #0
 8004782:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004784:	4b14      	ldr	r3, [pc, #80]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800478a:	4b13      	ldr	r3, [pc, #76]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 800478c:	2200      	movs	r2, #0
 800478e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004790:	4b11      	ldr	r3, [pc, #68]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004792:	2200      	movs	r2, #0
 8004794:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004796:	4810      	ldr	r0, [pc, #64]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 8004798:	f001 f86a 	bl	8005870 <HAL_DMA_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <HAL_UART_MspInit+0x2d6>
      Error_Handler();
 80047a2:	f7fe f9e7 	bl	8002b74 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a0b      	ldr	r2, [pc, #44]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 80047aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80047ac:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <HAL_UART_MspInit+0x308>)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80047b2:	2200      	movs	r2, #0
 80047b4:	2100      	movs	r1, #0
 80047b6:	2047      	movs	r0, #71	@ 0x47
 80047b8:	f001 f815 	bl	80057e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80047bc:	2047      	movs	r0, #71	@ 0x47
 80047be:	f001 f82e 	bl	800581e <HAL_NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3740      	adds	r7, #64	@ 0x40
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40011400 	.word	0x40011400
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40020800 	.word	0x40020800
 80047d8:	200009f8 	.word	0x200009f8
 80047dc:	40026428 	.word	0x40026428

080047e0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a2c      	ldr	r2, [pc, #176]	@ (80048a0 <HAL_UART_MspDeInit+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10e      	bne.n	8004810 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80047f2:	4b2c      	ldr	r3, [pc, #176]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f6:	4a2b      	ldr	r2, [pc, #172]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 80047f8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80047fc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 80047fe:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8004802:	4829      	ldr	r0, [pc, #164]	@ (80048a8 <HAL_UART_MspDeInit+0xc8>)
 8004804:	f001 fe28 	bl	8006458 <HAL_GPIO_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8004808:	2034      	movs	r0, #52	@ 0x34
 800480a:	f001 f816 	bl	800583a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 800480e:	e043      	b.n	8004898 <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_UART_MspDeInit+0xcc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10a      	bne.n	8004830 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART1_CLK_DISABLE();
 800481a:	4b22      	ldr	r3, [pc, #136]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	4a21      	ldr	r2, [pc, #132]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 8004820:	f023 0310 	bic.w	r3, r3, #16
 8004824:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8004826:	21c0      	movs	r1, #192	@ 0xc0
 8004828:	4821      	ldr	r0, [pc, #132]	@ (80048b0 <HAL_UART_MspDeInit+0xd0>)
 800482a:	f001 fe15 	bl	8006458 <HAL_GPIO_DeInit>
}
 800482e:	e033      	b.n	8004898 <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART3)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1f      	ldr	r2, [pc, #124]	@ (80048b4 <HAL_UART_MspDeInit+0xd4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d117      	bne.n	800486a <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800483a:	4b1a      	ldr	r3, [pc, #104]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 8004840:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004844:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8004846:	2120      	movs	r1, #32
 8004848:	4817      	ldr	r0, [pc, #92]	@ (80048a8 <HAL_UART_MspDeInit+0xc8>)
 800484a:	f001 fe05 	bl	8006458 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800484e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004852:	4817      	ldr	r0, [pc, #92]	@ (80048b0 <HAL_UART_MspDeInit+0xd0>)
 8004854:	f001 fe00 	bl	8006458 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	4618      	mov	r0, r3
 800485e:	f001 f8b5 	bl	80059cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8004862:	2027      	movs	r0, #39	@ 0x27
 8004864:	f000 ffe9 	bl	800583a <HAL_NVIC_DisableIRQ>
}
 8004868:	e016      	b.n	8004898 <HAL_UART_MspDeInit+0xb8>
  else if(uartHandle->Instance==USART6)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a12      	ldr	r2, [pc, #72]	@ (80048b8 <HAL_UART_MspDeInit+0xd8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d111      	bne.n	8004898 <HAL_UART_MspDeInit+0xb8>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004874:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 8004876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004878:	4a0a      	ldr	r2, [pc, #40]	@ (80048a4 <HAL_UART_MspDeInit+0xc4>)
 800487a:	f023 0320 	bic.w	r3, r3, #32
 800487e:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8004880:	21c0      	movs	r1, #192	@ 0xc0
 8004882:	4809      	ldr	r0, [pc, #36]	@ (80048a8 <HAL_UART_MspDeInit+0xc8>)
 8004884:	f001 fde8 	bl	8006458 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	4618      	mov	r0, r3
 800488e:	f001 f89d 	bl	80059cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004892:	2047      	movs	r0, #71	@ 0x47
 8004894:	f000 ffd1 	bl	800583a <HAL_NVIC_DisableIRQ>
}
 8004898:	bf00      	nop
 800489a:	3708      	adds	r7, #8
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40004c00 	.word	0x40004c00
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020800 	.word	0x40020800
 80048ac:	40011000 	.word	0x40011000
 80048b0:	40020400 	.word	0x40020400
 80048b4:	40004800 	.word	0x40004800
 80048b8:	40011400 	.word	0x40011400

080048bc <UsrGpsL86Init>:



//============================= Initial section
void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 80048c4:	f240 228a 	movw	r2, #650	@ 0x28a
 80048c8:	4903      	ldr	r1, [pc, #12]	@ (80048d8 <UsrGpsL86Init+0x1c>)
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f005 f8a8 	bl	8009a20 <HAL_UART_Receive_DMA>
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	20000b2c 	.word	0x20000b2c

080048dc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	if(huart == &GPS_UART_HNDLR)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a06      	ldr	r2, [pc, #24]	@ (8004900 <HAL_UART_RxCpltCallback+0x24>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d102      	bne.n	80048f2 <HAL_UART_RxCpltCallback+0x16>
	{
		g_openFixedDataTransmition = true;
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_UART_RxCpltCallback+0x28>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	701a      	strb	r2, [r3, #0]
	}
	//HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000950 	.word	0x20000950
 8004904:	20000a58 	.word	0x20000a58

08004908 <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_, UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
    getRmc();
 8004912:	f000 f839 	bl	8004988 <getRmc>
    getGGA();
 8004916:	f000 f945 	bl	8004ba4 <getGGA>
    if (rmcValidFlag)
 800491a:	4b18      	ldr	r3, [pc, #96]	@ (800497c <Usr_GpsL86GetValues+0x74>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <Usr_GpsL86GetValues+0x22>
    {
        rmcValidFlag = false;
 8004924:	4b15      	ldr	r3, [pc, #84]	@ (800497c <Usr_GpsL86GetValues+0x74>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 800492a:	f000 f8cd 	bl	8004ac8 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 8004936:	4b12      	ldr	r3, [pc, #72]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 800493e:	4b10      	ldr	r3, [pc, #64]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	@ 0x24
    gpsData_->speedKN = gpsData.speedKN;
 8004946:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 800494e:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004950:	6a1a      	ldr	r2, [r3, #32]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 8004956:	4b0a      	ldr	r3, [pc, #40]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 800495e:	4b08      	ldr	r3, [pc, #32]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004960:	69da      	ldr	r2, [r3, #28]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <Usr_GpsL86GetValues+0x78>)
 8004968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	629a      	str	r2, [r3, #40]	@ 0x28
    UsrGpsL86Init(&GPS_UART_HNDLR);
 800496e:	4805      	ldr	r0, [pc, #20]	@ (8004984 <Usr_GpsL86GetValues+0x7c>)
 8004970:	f7ff ffa4 	bl	80048bc <UsrGpsL86Init>
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	20000a59 	.word	0x20000a59
 8004980:	20001ad4 	.word	0x20001ad4
 8004984:	20000950 	.word	0x20000950

08004988 <getRmc>:

//============================= Statics

_io void getRmc()
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af02      	add	r7, sp, #8

	        MsgIndex = 0;
 800498e:	4b40      	ldr	r3, [pc, #256]	@ (8004a90 <getRmc+0x108>)
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
	        memcpy(m_gpsTransmitBuf, (char *)(m_rxData), 1000);
 8004994:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004998:	493e      	ldr	r1, [pc, #248]	@ (8004a94 <getRmc+0x10c>)
 800499a:	483f      	ldr	r0, [pc, #252]	@ (8004a98 <getRmc+0x110>)
 800499c:	f008 ff95 	bl	800d8ca <memcpy>
	        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 80049a0:	493e      	ldr	r1, [pc, #248]	@ (8004a9c <getRmc+0x114>)
 80049a2:	483d      	ldr	r0, [pc, #244]	@ (8004a98 <getRmc+0x110>)
 80049a4:	f008 fef3 	bl	800d78e <strstr>
 80049a8:	4603      	mov	r3, r0
 80049aa:	4a3d      	ldr	r2, [pc, #244]	@ (8004aa0 <getRmc+0x118>)
 80049ac:	6013      	str	r3, [r2, #0]

	        if (*ptr == 'G')
 80049ae:	4b3c      	ldr	r3, [pc, #240]	@ (8004aa0 <getRmc+0x118>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b47      	cmp	r3, #71	@ 0x47
 80049b6:	d167      	bne.n	8004a88 <getRmc+0x100>
	        {
	            while (1)
	            {
	                gpsPayload[MsgIndex] = *ptr;
 80049b8:	4b39      	ldr	r3, [pc, #228]	@ (8004aa0 <getRmc+0x118>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b34      	ldr	r3, [pc, #208]	@ (8004a90 <getRmc+0x108>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	7811      	ldrb	r1, [r2, #0]
 80049c2:	4a38      	ldr	r2, [pc, #224]	@ (8004aa4 <getRmc+0x11c>)
 80049c4:	54d1      	strb	r1, [r2, r3]
	                MsgIndex++;
 80049c6:	4b32      	ldr	r3, [pc, #200]	@ (8004a90 <getRmc+0x108>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	4a30      	ldr	r2, [pc, #192]	@ (8004a90 <getRmc+0x108>)
 80049ce:	6013      	str	r3, [r2, #0]
	                *ptr = *(ptr + MsgIndex);
 80049d0:	4b33      	ldr	r3, [pc, #204]	@ (8004aa0 <getRmc+0x118>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a90 <getRmc+0x108>)
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	441a      	add	r2, r3
 80049da:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <getRmc+0x118>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	701a      	strb	r2, [r3, #0]
	                if (*ptr == '\n' || MsgIndex > _max_message_size)
 80049e2:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa0 <getRmc+0x118>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b0a      	cmp	r3, #10
 80049ea:	d003      	beq.n	80049f4 <getRmc+0x6c>
 80049ec:	4b28      	ldr	r3, [pc, #160]	@ (8004a90 <getRmc+0x108>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b5a      	cmp	r3, #90	@ 0x5a
 80049f2:	dde1      	ble.n	80049b8 <getRmc+0x30>
	                {
	                    MsgIndex = 0;
 80049f4:	4b26      	ldr	r3, [pc, #152]	@ (8004a90 <getRmc+0x108>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]

	                    for (int i = 0; i < 100; i++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	607b      	str	r3, [r7, #4]
 80049fe:	e014      	b.n	8004a2a <getRmc+0xa2>
	                    {
	                        if (gpsPayload[i] == 'N')
 8004a00:	4a28      	ldr	r2, [pc, #160]	@ (8004aa4 <getRmc+0x11c>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b4e      	cmp	r3, #78	@ 0x4e
 8004a0a:	d102      	bne.n	8004a12 <getRmc+0x8a>
	                            f_northFlag = true;
 8004a0c:	4b26      	ldr	r3, [pc, #152]	@ (8004aa8 <getRmc+0x120>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
	                        if (gpsPayload[i] == 'E')
 8004a12:	4a24      	ldr	r2, [pc, #144]	@ (8004aa4 <getRmc+0x11c>)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b45      	cmp	r3, #69	@ 0x45
 8004a1c:	d102      	bne.n	8004a24 <getRmc+0x9c>
	                            f_eastFlag = true;
 8004a1e:	4b23      	ldr	r3, [pc, #140]	@ (8004aac <getRmc+0x124>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	701a      	strb	r2, [r3, #0]
	                    for (int i = 0; i < 100; i++)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3301      	adds	r3, #1
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b63      	cmp	r3, #99	@ 0x63
 8004a2e:	dde7      	ble.n	8004a00 <getRmc+0x78>
	                    }
	                    if (strlen(gpsPayload) > 10)
 8004a30:	481c      	ldr	r0, [pc, #112]	@ (8004aa4 <getRmc+0x11c>)
 8004a32:	f7fb fc3d 	bl	80002b0 <strlen>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b0a      	cmp	r3, #10
 8004a3a:	d91f      	bls.n	8004a7c <getRmc+0xf4>
	                    {
	                        if (f_eastFlag && f_northFlag)
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <getRmc+0x124>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01f      	beq.n	8004a86 <getRmc+0xfe>
 8004a46:	4b18      	ldr	r3, [pc, #96]	@ (8004aa8 <getRmc+0x120>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01a      	beq.n	8004a86 <getRmc+0xfe>
	                        {
	                            f_northFlag = false;
 8004a50:	4b15      	ldr	r3, [pc, #84]	@ (8004aa8 <getRmc+0x120>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
	                            f_eastFlag = false;
 8004a56:	4b15      	ldr	r3, [pc, #84]	@ (8004aac <getRmc+0x124>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
	                            //&gpsData.lat
	                            sscanf(gpsPayload, "GNRMC,%f,A,%f,N,%f,E,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &m_nonFormattedLon, &gpsData.speedKN);
 8004a5c:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <getRmc+0x128>)
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <getRmc+0x12c>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	4b14      	ldr	r3, [pc, #80]	@ (8004ab8 <getRmc+0x130>)
 8004a66:	4a15      	ldr	r2, [pc, #84]	@ (8004abc <getRmc+0x134>)
 8004a68:	4915      	ldr	r1, [pc, #84]	@ (8004ac0 <getRmc+0x138>)
 8004a6a:	480e      	ldr	r0, [pc, #56]	@ (8004aa4 <getRmc+0x11c>)
 8004a6c:	f008 fe06 	bl	800d67c <siscanf>
	                            rmcValidFlag = true;
 8004a70:	4b14      	ldr	r3, [pc, #80]	@ (8004ac4 <getRmc+0x13c>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
	                            formatLatLong();
 8004a76:	f000 f827 	bl	8004ac8 <formatLatLong>
	                    {
	                        // dataErr Log
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
	                    }

	                    break;
 8004a7a:	e004      	b.n	8004a86 <getRmc+0xfe>
	                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8004a7c:	2264      	movs	r2, #100	@ 0x64
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4808      	ldr	r0, [pc, #32]	@ (8004aa4 <getRmc+0x11c>)
 8004a82:	f008 fe7c 	bl	800d77e <memset>
	                    break;
 8004a86:	bf00      	nop
	                }
	            }
	        }

}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000a5c 	.word	0x20000a5c
 8004a94:	20000b2c 	.word	0x20000b2c
 8004a98:	200012fc 	.word	0x200012fc
 8004a9c:	080133d0 	.word	0x080133d0
 8004aa0:	20000a60 	.word	0x20000a60
 8004aa4:	20000a64 	.word	0x20000a64
 8004aa8:	20000a5a 	.word	0x20000a5a
 8004aac:	20000a5b 	.word	0x20000a5b
 8004ab0:	20001adc 	.word	0x20001adc
 8004ab4:	20001ad0 	.word	0x20001ad0
 8004ab8:	20001acc 	.word	0x20001acc
 8004abc:	20001ae0 	.word	0x20001ae0
 8004ac0:	080133d8 	.word	0x080133d8
 8004ac4:	20000a59 	.word	0x20000a59

08004ac8 <formatLatLong>:

_io void formatLatLong(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 8004ace:	4b30      	ldr	r3, [pc, #192]	@ (8004b90 <formatLatLong+0xc8>)
 8004ad0:	edd3 7a00 	vldr	s15, [r3]
 8004ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad8:	ee17 1a90 	vmov	r1, s15
 8004adc:	4b2d      	ldr	r3, [pc, #180]	@ (8004b94 <formatLatLong+0xcc>)
 8004ade:	fb83 2301 	smull	r2, r3, r3, r1
 8004ae2:	115a      	asrs	r2, r3, #5
 8004ae4:	17cb      	asrs	r3, r1, #31
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 8004aea:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <formatLatLong+0xc8>)
 8004aec:	ed93 7a00 	vldr	s14, [r3]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2264      	movs	r2, #100	@ 0x64
 8004af4:	fb02 f303 	mul.w	r3, r2, r3
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b04:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b12:	edd7 6a00 	vldr	s13, [r7]
 8004b16:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8004b98 <formatLatLong+0xd0>
 8004b1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b22:	4b1e      	ldr	r3, [pc, #120]	@ (8004b9c <formatLatLong+0xd4>)
 8004b24:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba0 <formatLatLong+0xd8>)
 8004b2a:	edd3 7a00 	vldr	s15, [r3]
 8004b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b32:	ee17 1a90 	vmov	r1, s15
 8004b36:	4b17      	ldr	r3, [pc, #92]	@ (8004b94 <formatLatLong+0xcc>)
 8004b38:	fb83 2301 	smull	r2, r3, r3, r1
 8004b3c:	115a      	asrs	r2, r3, #5
 8004b3e:	17cb      	asrs	r3, r1, #31
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8004b44:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <formatLatLong+0xd8>)
 8004b46:	ed93 7a00 	vldr	s14, [r3]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2264      	movs	r2, #100	@ 0x64
 8004b4e:	fb02 f303 	mul.w	r3, r2, r3
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b5e:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	ee07 3a90 	vmov	s15, r3
 8004b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b6c:	edd7 6a00 	vldr	s13, [r7]
 8004b70:	ed9f 6a09 	vldr	s12, [pc, #36]	@ 8004b98 <formatLatLong+0xd0>
 8004b74:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <formatLatLong+0xd4>)
 8004b7e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20001acc 	.word	0x20001acc
 8004b94:	51eb851f 	.word	0x51eb851f
 8004b98:	42700000 	.word	0x42700000
 8004b9c:	20001ad4 	.word	0x20001ad4
 8004ba0:	20001ad0 	.word	0x20001ad0

08004ba4 <getGGA>:

_io void getGGA(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af06      	add	r7, sp, #24

        MsgIndex = 0;
 8004baa:	4b30      	ldr	r3, [pc, #192]	@ (8004c6c <getGGA+0xc8>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
//        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 8004bb0:	492f      	ldr	r1, [pc, #188]	@ (8004c70 <getGGA+0xcc>)
 8004bb2:	4830      	ldr	r0, [pc, #192]	@ (8004c74 <getGGA+0xd0>)
 8004bb4:	f008 fdeb 	bl	800d78e <strstr>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4a2f      	ldr	r2, [pc, #188]	@ (8004c78 <getGGA+0xd4>)
 8004bbc:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8004bbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004c78 <getGGA+0xd4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b47      	cmp	r3, #71	@ 0x47
 8004bc6:	d14a      	bne.n	8004c5e <getGGA+0xba>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c78 <getGGA+0xd4>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b27      	ldr	r3, [pc, #156]	@ (8004c6c <getGGA+0xc8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	7811      	ldrb	r1, [r2, #0]
 8004bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c7c <getGGA+0xd8>)
 8004bd4:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8004bd6:	4b25      	ldr	r3, [pc, #148]	@ (8004c6c <getGGA+0xc8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <getGGA+0xc8>)
 8004bde:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <getGGA+0xd4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a21      	ldr	r2, [pc, #132]	@ (8004c6c <getGGA+0xc8>)
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	441a      	add	r2, r3
 8004bea:	4b23      	ldr	r3, [pc, #140]	@ (8004c78 <getGGA+0xd4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 8004bf2:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <getGGA+0xd4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b0a      	cmp	r3, #10
 8004bfa:	d003      	beq.n	8004c04 <getGGA+0x60>
 8004bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c6c <getGGA+0xc8>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b5a      	cmp	r3, #90	@ 0x5a
 8004c02:	dde1      	ble.n	8004bc8 <getGGA+0x24>
                {
                    MsgIndex = 0;
 8004c04:	4b19      	ldr	r3, [pc, #100]	@ (8004c6c <getGGA+0xc8>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8004c0a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4818      	ldr	r0, [pc, #96]	@ (8004c74 <getGGA+0xd0>)
 8004c12:	f008 fdb4 	bl	800d77e <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8004c16:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4818      	ldr	r0, [pc, #96]	@ (8004c80 <getGGA+0xdc>)
 8004c1e:	f008 fdae 	bl	800d77e <memset>

                    if (strlen(gpsGGAPayload) > 10)
 8004c22:	4816      	ldr	r0, [pc, #88]	@ (8004c7c <getGGA+0xd8>)
 8004c24:	f7fb fb44 	bl	80002b0 <strlen>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b0a      	cmp	r3, #10
 8004c2c:	d912      	bls.n	8004c54 <getGGA+0xb0>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,E,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8004c2e:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <getGGA+0xe0>)
 8004c30:	9305      	str	r3, [sp, #20]
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <getGGA+0xe4>)
 8004c34:	9304      	str	r3, [sp, #16]
 8004c36:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <getGGA+0xe8>)
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <getGGA+0xec>)
 8004c3c:	9302      	str	r3, [sp, #8]
 8004c3e:	4b15      	ldr	r3, [pc, #84]	@ (8004c94 <getGGA+0xf0>)
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <getGGA+0xf4>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <getGGA+0xf8>)
 8004c48:	4a15      	ldr	r2, [pc, #84]	@ (8004ca0 <getGGA+0xfc>)
 8004c4a:	4916      	ldr	r1, [pc, #88]	@ (8004ca4 <getGGA+0x100>)
 8004c4c:	480b      	ldr	r0, [pc, #44]	@ (8004c7c <getGGA+0xd8>)
 8004c4e:	f008 fd15 	bl	800d67c <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 8004c52:	e004      	b.n	8004c5e <getGGA+0xba>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 8004c54:	2264      	movs	r2, #100	@ 0x64
 8004c56:	2100      	movs	r1, #0
 8004c58:	4813      	ldr	r0, [pc, #76]	@ (8004ca8 <getGGA+0x104>)
 8004c5a:	f008 fd90 	bl	800d77e <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <getGGA+0x108>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
        //UsrGpsL86Init(&huart2);

}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000a5c 	.word	0x20000a5c
 8004c70:	080133f4 	.word	0x080133f4
 8004c74:	200012fc 	.word	0x200012fc
 8004c78:	20000a60 	.word	0x20000a60
 8004c7c:	20000ac8 	.word	0x20000ac8
 8004c80:	20000b2c 	.word	0x20000b2c
 8004c84:	20001b00 	.word	0x20001b00
 8004c88:	20001afc 	.word	0x20001afc
 8004c8c:	20001af8 	.word	0x20001af8
 8004c90:	20001af4 	.word	0x20001af4
 8004c94:	20001af0 	.word	0x20001af0
 8004c98:	20001aec 	.word	0x20001aec
 8004c9c:	20001ae8 	.word	0x20001ae8
 8004ca0:	20001ae4 	.word	0x20001ae4
 8004ca4:	080133fc 	.word	0x080133fc
 8004ca8:	20000a64 	.word	0x20000a64
 8004cac:	20000a58 	.word	0x20000a58

08004cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004cb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ce8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cb4:	f7fe fea8 	bl	8003a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cb8:	480c      	ldr	r0, [pc, #48]	@ (8004cec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cba:	490d      	ldr	r1, [pc, #52]	@ (8004cf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cc0:	e002      	b.n	8004cc8 <LoopCopyDataInit>

08004cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cc6:	3304      	adds	r3, #4

08004cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ccc:	d3f9      	bcc.n	8004cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cce:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8004cfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd4:	e001      	b.n	8004cda <LoopFillZerobss>

08004cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cd8:	3204      	adds	r2, #4

08004cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cdc:	d3fb      	bcc.n	8004cd6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004cde:	f008 fdcd 	bl	800d87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ce2:	f7fd fa75 	bl	80021d0 <main>
  bx  lr    
 8004ce6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cf0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004cf4:	08013958 	.word	0x08013958
  ldr r2, =_sbss
 8004cf8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004cfc:	20001c5c 	.word	0x20001c5c

08004d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d00:	e7fe      	b.n	8004d00 <ADC_IRQHandler>
	...

08004d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004d08:	4b0e      	ldr	r3, [pc, #56]	@ (8004d44 <HAL_Init+0x40>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d44 <HAL_Init+0x40>)
 8004d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <HAL_Init+0x40>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a0a      	ldr	r2, [pc, #40]	@ (8004d44 <HAL_Init+0x40>)
 8004d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d20:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <HAL_Init+0x40>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a07      	ldr	r2, [pc, #28]	@ (8004d44 <HAL_Init+0x40>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d2c:	2003      	movs	r0, #3
 8004d2e:	f000 fd4f 	bl	80057d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d32:	200f      	movs	r0, #15
 8004d34:	f000 f808 	bl	8004d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d38:	f7fe fcac 	bl	8003694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40023c00 	.word	0x40023c00

08004d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d50:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <HAL_InitTick+0x54>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b12      	ldr	r3, [pc, #72]	@ (8004da0 <HAL_InitTick+0x58>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	4619      	mov	r1, r3
 8004d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fd75 	bl	8005856 <HAL_SYSTICK_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e00e      	b.n	8004d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b0f      	cmp	r3, #15
 8004d7a:	d80a      	bhi.n	8004d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	f000 fd2f 	bl	80057e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d88:	4a06      	ldr	r2, [pc, #24]	@ (8004da4 <HAL_InitTick+0x5c>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e000      	b.n	8004d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000004 	.word	0x20000004
 8004da0:	20000024 	.word	0x20000024
 8004da4:	20000020 	.word	0x20000020

08004da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <HAL_IncTick+0x20>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b06      	ldr	r3, [pc, #24]	@ (8004dcc <HAL_IncTick+0x24>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4413      	add	r3, r2
 8004db8:	4a04      	ldr	r2, [pc, #16]	@ (8004dcc <HAL_IncTick+0x24>)
 8004dba:	6013      	str	r3, [r2, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	20000024 	.word	0x20000024
 8004dcc:	20001b04 	.word	0x20001b04

08004dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8004dd4:	4b03      	ldr	r3, [pc, #12]	@ (8004de4 <HAL_GetTick+0x14>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	20001b04 	.word	0x20001b04

08004de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004df0:	f7ff ffee 	bl	8004dd0 <HAL_GetTick>
 8004df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e00:	d005      	beq.n	8004e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <HAL_Delay+0x44>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004e0e:	bf00      	nop
 8004e10:	f7ff ffde 	bl	8004dd0 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d8f7      	bhi.n	8004e10 <HAL_Delay+0x28>
  {
  }
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20000024 	.word	0x20000024

08004e30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e033      	b.n	8004eae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fc fb08 	bl	8001464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d118      	bne.n	8004ea0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004e76:	f023 0302 	bic.w	r3, r3, #2
 8004e7a:	f043 0202 	orr.w	r2, r3, #2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fab4 	bl	80053f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e9e:	e001      	b.n	8004ea4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_ADC_Start+0x1a>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0b2      	b.n	8005038 <HAL_ADC_Start+0x180>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d018      	beq.n	8004f1a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ef8:	4b52      	ldr	r3, [pc, #328]	@ (8005044 <HAL_ADC_Start+0x18c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a52      	ldr	r2, [pc, #328]	@ (8005048 <HAL_ADC_Start+0x190>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	0c9a      	lsrs	r2, r3, #18
 8004f04:	4613      	mov	r3, r2
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4413      	add	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004f0c:	e002      	b.n	8004f14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f9      	bne.n	8004f0e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d17a      	bne.n	800501e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004f52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f66:	d106      	bne.n	8004f76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f6c:	f023 0206 	bic.w	r2, r3, #6
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	645a      	str	r2, [r3, #68]	@ 0x44
 8004f74:	e002      	b.n	8004f7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f84:	4b31      	ldr	r3, [pc, #196]	@ (800504c <HAL_ADC_Start+0x194>)
 8004f86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004f90:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d12a      	bne.n	8004ff4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8005050 <HAL_ADC_Start+0x198>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d015      	beq.n	8004fd4 <HAL_ADC_Start+0x11c>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a29      	ldr	r2, [pc, #164]	@ (8005054 <HAL_ADC_Start+0x19c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d105      	bne.n	8004fbe <HAL_ADC_Start+0x106>
 8004fb2:	4b26      	ldr	r3, [pc, #152]	@ (800504c <HAL_ADC_Start+0x194>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 031f 	and.w	r3, r3, #31
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a25      	ldr	r2, [pc, #148]	@ (8005058 <HAL_ADC_Start+0x1a0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d136      	bne.n	8005036 <HAL_ADC_Start+0x17e>
 8004fc8:	4b20      	ldr	r3, [pc, #128]	@ (800504c <HAL_ADC_Start+0x194>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d130      	bne.n	8005036 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d129      	bne.n	8005036 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	e020      	b.n	8005036 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <HAL_ADC_Start+0x198>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d11b      	bne.n	8005036 <HAL_ADC_Start+0x17e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d114      	bne.n	8005036 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e00b      	b.n	8005036 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f043 0210 	orr.w	r2, r3, #16
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502e:	f043 0201 	orr.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20000004 	.word	0x20000004
 8005048:	431bde83 	.word	0x431bde83
 800504c:	40012300 	.word	0x40012300
 8005050:	40012000 	.word	0x40012000
 8005054:	40012100 	.word	0x40012100
 8005058:	40012200 	.word	0x40012200

0800505c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005078:	d113      	bne.n	80050a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005088:	d10b      	bne.n	80050a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e063      	b.n	800516a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a2:	f7ff fe95 	bl	8004dd0 <HAL_GetTick>
 80050a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050a8:	e021      	b.n	80050ee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b0:	d01d      	beq.n	80050ee <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <HAL_ADC_PollForConversion+0x6c>
 80050b8:	f7ff fe8a 	bl	8004dd0 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d212      	bcs.n	80050ee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d00b      	beq.n	80050ee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050da:	f043 0204 	orr.w	r2, r3, #4
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e03d      	b.n	800516a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d1d6      	bne.n	80050aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0212 	mvn.w	r2, #18
 8005104:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d123      	bne.n	8005168 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11f      	bne.n	8005168 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005140:	2b00      	cmp	r3, #0
 8005142:	d111      	bne.n	8005168 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d105      	bne.n	8005168 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005172:	b480      	push	{r7}
 8005174:	b083      	sub	sp, #12
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x1c>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e113      	b.n	80053d0 <HAL_ADC_ConfigChannel+0x244>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d925      	bls.n	8005204 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68d9      	ldr	r1, [r3, #12]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	3b1e      	subs	r3, #30
 80051ce:	2207      	movs	r2, #7
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43da      	mvns	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	400a      	ands	r2, r1
 80051dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4618      	mov	r0, r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4403      	add	r3, r0
 80051f6:	3b1e      	subs	r3, #30
 80051f8:	409a      	lsls	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e022      	b.n	800524a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6919      	ldr	r1, [r3, #16]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	4613      	mov	r3, r2
 8005214:	005b      	lsls	r3, r3, #1
 8005216:	4413      	add	r3, r2
 8005218:	2207      	movs	r2, #7
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43da      	mvns	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	400a      	ands	r2, r1
 8005226:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6919      	ldr	r1, [r3, #16]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	b29b      	uxth	r3, r3
 8005238:	4618      	mov	r0, r3
 800523a:	4603      	mov	r3, r0
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4403      	add	r3, r0
 8005240:	409a      	lsls	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b06      	cmp	r3, #6
 8005250:	d824      	bhi.n	800529c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	3b05      	subs	r3, #5
 8005264:	221f      	movs	r2, #31
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43da      	mvns	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	400a      	ands	r2, r1
 8005272:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	b29b      	uxth	r3, r3
 8005280:	4618      	mov	r0, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	3b05      	subs	r3, #5
 800528e:	fa00 f203 	lsl.w	r2, r0, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	635a      	str	r2, [r3, #52]	@ 0x34
 800529a:	e04c      	b.n	8005336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b0c      	cmp	r3, #12
 80052a2:	d824      	bhi.n	80052ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	3b23      	subs	r3, #35	@ 0x23
 80052b6:	221f      	movs	r2, #31
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43da      	mvns	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	400a      	ands	r2, r1
 80052c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4618      	mov	r0, r3
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	3b23      	subs	r3, #35	@ 0x23
 80052e0:	fa00 f203 	lsl.w	r2, r0, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80052ec:	e023      	b.n	8005336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4413      	add	r3, r2
 80052fe:	3b41      	subs	r3, #65	@ 0x41
 8005300:	221f      	movs	r2, #31
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43da      	mvns	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	400a      	ands	r2, r1
 800530e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	4618      	mov	r0, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	3b41      	subs	r3, #65	@ 0x41
 800532a:	fa00 f203 	lsl.w	r2, r0, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005336:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <HAL_ADC_ConfigChannel+0x250>)
 8005338:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a28      	ldr	r2, [pc, #160]	@ (80053e0 <HAL_ADC_ConfigChannel+0x254>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d10f      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x1d8>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b12      	cmp	r3, #18
 800534a:	d10b      	bne.n	8005364 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a1d      	ldr	r2, [pc, #116]	@ (80053e0 <HAL_ADC_ConfigChannel+0x254>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d12b      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_ADC_ConfigChannel+0x258>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <HAL_ADC_ConfigChannel+0x1f4>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b11      	cmp	r3, #17
 800537e:	d122      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a11      	ldr	r2, [pc, #68]	@ (80053e4 <HAL_ADC_ConfigChannel+0x258>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d111      	bne.n	80053c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053a2:	4b11      	ldr	r3, [pc, #68]	@ (80053e8 <HAL_ADC_ConfigChannel+0x25c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a11      	ldr	r2, [pc, #68]	@ (80053ec <HAL_ADC_ConfigChannel+0x260>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	0c9a      	lsrs	r2, r3, #18
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053b8:	e002      	b.n	80053c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3b01      	subs	r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f9      	bne.n	80053ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	40012300 	.word	0x40012300
 80053e0:	40012000 	.word	0x40012000
 80053e4:	10000012 	.word	0x10000012
 80053e8:	20000004 	.word	0x20000004
 80053ec:	431bde83 	.word	0x431bde83

080053f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80053f8:	4b79      	ldr	r3, [pc, #484]	@ (80055e0 <ADC_Init+0x1f0>)
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	431a      	orrs	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	021a      	lsls	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800546a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6899      	ldr	r1, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005482:	4a58      	ldr	r2, [pc, #352]	@ (80055e4 <ADC_Init+0x1f4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e00f      	b.n	80054ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0202 	bic.w	r2, r2, #2
 80054fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	7e1b      	ldrb	r3, [r3, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800552a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800553a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	3b01      	subs	r3, #1
 8005548:	035a      	lsls	r2, r3, #13
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e007      	b.n	8005564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	3b01      	subs	r3, #1
 8005580:	051a      	lsls	r2, r3, #20
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055a6:	025a      	lsls	r2, r3, #9
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6899      	ldr	r1, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	029a      	lsls	r2, r3, #10
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012300 	.word	0x40012300
 80055e4:	0f000001 	.word	0x0f000001

080055e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055f8:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <__NVIC_SetPriorityGrouping+0x44>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005604:	4013      	ands	r3, r2
 8005606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800561a:	4a04      	ldr	r2, [pc, #16]	@ (800562c <__NVIC_SetPriorityGrouping+0x44>)
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	60d3      	str	r3, [r2, #12]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	e000ed00 	.word	0xe000ed00

08005630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005634:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <__NVIC_GetPriorityGrouping+0x18>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	f003 0307 	and.w	r3, r3, #7
}
 800563e:	4618      	mov	r0, r3
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	2b00      	cmp	r3, #0
 800565c:	db0b      	blt.n	8005676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800565e:	79fb      	ldrb	r3, [r7, #7]
 8005660:	f003 021f 	and.w	r2, r3, #31
 8005664:	4907      	ldr	r1, [pc, #28]	@ (8005684 <__NVIC_EnableIRQ+0x38>)
 8005666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2001      	movs	r0, #1
 800566e:	fa00 f202 	lsl.w	r2, r0, r2
 8005672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	e000e100 	.word	0xe000e100

08005688 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005696:	2b00      	cmp	r3, #0
 8005698:	db12      	blt.n	80056c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	f003 021f 	and.w	r2, r3, #31
 80056a0:	490a      	ldr	r1, [pc, #40]	@ (80056cc <__NVIC_DisableIRQ+0x44>)
 80056a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	2001      	movs	r0, #1
 80056aa:	fa00 f202 	lsl.w	r2, r0, r2
 80056ae:	3320      	adds	r3, #32
 80056b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80056b4:	f3bf 8f4f 	dsb	sy
}
 80056b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80056ba:	f3bf 8f6f 	isb	sy
}
 80056be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	e000e100 	.word	0xe000e100

080056d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	db0a      	blt.n	80056fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	490c      	ldr	r1, [pc, #48]	@ (800571c <__NVIC_SetPriority+0x4c>)
 80056ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ee:	0112      	lsls	r2, r2, #4
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	440b      	add	r3, r1
 80056f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056f8:	e00a      	b.n	8005710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	4908      	ldr	r1, [pc, #32]	@ (8005720 <__NVIC_SetPriority+0x50>)
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	3b04      	subs	r3, #4
 8005708:	0112      	lsls	r2, r2, #4
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	440b      	add	r3, r1
 800570e:	761a      	strb	r2, [r3, #24]
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000e100 	.word	0xe000e100
 8005720:	e000ed00 	.word	0xe000ed00

08005724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005724:	b480      	push	{r7}
 8005726:	b089      	sub	sp, #36	@ 0x24
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f1c3 0307 	rsb	r3, r3, #7
 800573e:	2b04      	cmp	r3, #4
 8005740:	bf28      	it	cs
 8005742:	2304      	movcs	r3, #4
 8005744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3304      	adds	r3, #4
 800574a:	2b06      	cmp	r3, #6
 800574c:	d902      	bls.n	8005754 <NVIC_EncodePriority+0x30>
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	3b03      	subs	r3, #3
 8005752:	e000      	b.n	8005756 <NVIC_EncodePriority+0x32>
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005758:	f04f 32ff 	mov.w	r2, #4294967295
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	43da      	mvns	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	401a      	ands	r2, r3
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800576c:	f04f 31ff 	mov.w	r1, #4294967295
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	43d9      	mvns	r1, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	4313      	orrs	r3, r2
         );
}
 800577e:	4618      	mov	r0, r3
 8005780:	3724      	adds	r7, #36	@ 0x24
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800579c:	d301      	bcc.n	80057a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800579e:	2301      	movs	r3, #1
 80057a0:	e00f      	b.n	80057c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057a2:	4a0a      	ldr	r2, [pc, #40]	@ (80057cc <SysTick_Config+0x40>)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057aa:	210f      	movs	r1, #15
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	f7ff ff8e 	bl	80056d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <SysTick_Config+0x40>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ba:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <SysTick_Config+0x40>)
 80057bc:	2207      	movs	r2, #7
 80057be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	e000e010 	.word	0xe000e010

080057d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ff05 	bl	80055e8 <__NVIC_SetPriorityGrouping>
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b086      	sub	sp, #24
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	4603      	mov	r3, r0
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057f8:	f7ff ff1a 	bl	8005630 <__NVIC_GetPriorityGrouping>
 80057fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	6978      	ldr	r0, [r7, #20]
 8005804:	f7ff ff8e 	bl	8005724 <NVIC_EncodePriority>
 8005808:	4602      	mov	r2, r0
 800580a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580e:	4611      	mov	r1, r2
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff ff5d 	bl	80056d0 <__NVIC_SetPriority>
}
 8005816:	bf00      	nop
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	4603      	mov	r3, r0
 8005826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff ff0d 	bl	800564c <__NVIC_EnableIRQ>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	4603      	mov	r3, r0
 8005842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff ff1d 	bl	8005688 <__NVIC_DisableIRQ>
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7ff ff94 	bl	800578c <SysTick_Config>
 8005864:	4603      	mov	r3, r0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800587c:	f7ff faa8 	bl	8004dd0 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e099      	b.n	80059c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0201 	bic.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ac:	e00f      	b.n	80058ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058ae:	f7ff fa8f 	bl	8004dd0 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b05      	cmp	r3, #5
 80058ba:	d908      	bls.n	80058ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2203      	movs	r2, #3
 80058c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e078      	b.n	80059c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e8      	bne.n	80058ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	4b38      	ldr	r3, [pc, #224]	@ (80059c8 <HAL_DMA_Init+0x158>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	2b04      	cmp	r3, #4
 8005926:	d107      	bne.n	8005938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005930:	4313      	orrs	r3, r2
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0307 	bic.w	r3, r3, #7
 800594e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	2b04      	cmp	r3, #4
 8005960:	d117      	bne.n	8005992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00e      	beq.n	8005992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fb5f 	bl	8006038 <DMA_CheckFifoParam>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2240      	movs	r2, #64	@ 0x40
 8005984:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800598e:	2301      	movs	r3, #1
 8005990:	e016      	b.n	80059c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb16 	bl	8005fcc <DMA_CalcBaseAndBitshift>
 80059a0:	4603      	mov	r3, r0
 80059a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a8:	223f      	movs	r2, #63	@ 0x3f
 80059aa:	409a      	lsls	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	f010803f 	.word	0xf010803f

080059cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e050      	b.n	8005a80 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d101      	bne.n	80059ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
 80059ec:	e048      	b.n	8005a80 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2221      	movs	r2, #33	@ 0x21
 8005a2c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 facc 	bl	8005fcc <DMA_CalcBaseAndBitshift>
 8005a34:	4603      	mov	r3, r0
 8005a36:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a60:	223f      	movs	r2, #63	@ 0x3f
 8005a62:	409a      	lsls	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_DMA_Start_IT+0x26>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e040      	b.n	8005b30 <HAL_DMA_Start_IT+0xa8>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d12f      	bne.n	8005b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 fa4a 	bl	8005f70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae0:	223f      	movs	r2, #63	@ 0x3f
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0216 	orr.w	r2, r2, #22
 8005af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0208 	orr.w	r2, r2, #8
 8005b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e005      	b.n	8005b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005b46:	f7ff f943 	bl	8004dd0 <HAL_GetTick>
 8005b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d008      	beq.n	8005b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2280      	movs	r2, #128	@ 0x80
 8005b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e052      	b.n	8005c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0216 	bic.w	r2, r2, #22
 8005b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695a      	ldr	r2, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d103      	bne.n	8005b9a <HAL_DMA_Abort+0x62>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f022 0208 	bic.w	r2, r2, #8
 8005ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bba:	e013      	b.n	8005be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bbc:	f7ff f908 	bl	8004dd0 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d90c      	bls.n	8005be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e015      	b.n	8005c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e4      	bne.n	8005bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bf6:	223f      	movs	r2, #63	@ 0x3f
 8005bf8:	409a      	lsls	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d004      	beq.n	8005c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2280      	movs	r2, #128	@ 0x80
 8005c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e00c      	b.n	8005c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2205      	movs	r2, #5
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c68:	4b8e      	ldr	r3, [pc, #568]	@ (8005ea4 <HAL_DMA_IRQHandler+0x248>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8005ea8 <HAL_DMA_IRQHandler+0x24c>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	0a9b      	lsrs	r3, r3, #10
 8005c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c86:	2208      	movs	r2, #8
 8005c88:	409a      	lsls	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01a      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0304 	and.w	r3, r3, #4
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d013      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc0:	f043 0201 	orr.w	r2, r3, #1
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ccc:	2201      	movs	r2, #1
 8005cce:	409a      	lsls	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d012      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cea:	2201      	movs	r2, #1
 8005cec:	409a      	lsls	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf6:	f043 0202 	orr.w	r2, r3, #2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d02:	2204      	movs	r2, #4
 8005d04:	409a      	lsls	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d012      	beq.n	8005d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d20:	2204      	movs	r2, #4
 8005d22:	409a      	lsls	r2, r3
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2c:	f043 0204 	orr.w	r2, r3, #4
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	2210      	movs	r2, #16
 8005d3a:	409a      	lsls	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d043      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03c      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d56:	2210      	movs	r2, #16
 8005d58:	409a      	lsls	r2, r3
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d018      	beq.n	8005d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d108      	bne.n	8005d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d024      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	4798      	blx	r3
 8005d8a:	e01f      	b.n	8005dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4798      	blx	r3
 8005d9c:	e016      	b.n	8005dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0208 	bic.w	r2, r2, #8
 8005dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	409a      	lsls	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 808f 	beq.w	8005efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8087 	beq.w	8005efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df2:	2220      	movs	r2, #32
 8005df4:	409a      	lsls	r2, r3
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b05      	cmp	r3, #5
 8005e04:	d136      	bne.n	8005e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0216 	bic.w	r2, r2, #22
 8005e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <HAL_DMA_IRQHandler+0x1da>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 0208 	bic.w	r2, r2, #8
 8005e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4a:	223f      	movs	r2, #63	@ 0x3f
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d07e      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	4798      	blx	r3
        }
        return;
 8005e72:	e079      	b.n	8005f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d01d      	beq.n	8005ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10d      	bne.n	8005eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d031      	beq.n	8005efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
 8005ea0:	e02c      	b.n	8005efc <HAL_DMA_IRQHandler+0x2a0>
 8005ea2:	bf00      	nop
 8005ea4:	20000004 	.word	0x20000004
 8005ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d023      	beq.n	8005efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
 8005ebc:	e01e      	b.n	8005efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10f      	bne.n	8005eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0210 	bic.w	r2, r2, #16
 8005eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d003      	beq.n	8005efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d032      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d022      	beq.n	8005f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2205      	movs	r2, #5
 8005f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d307      	bcc.n	8005f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0301 	and.w	r3, r3, #1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f2      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x2cc>
 8005f42:	e000      	b.n	8005f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d005      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
 8005f66:	e000      	b.n	8005f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f68:	bf00      	nop
    }
  }
}
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005f8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	2b40      	cmp	r3, #64	@ 0x40
 8005f9c:	d108      	bne.n	8005fb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fae:	e007      	b.n	8005fc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68ba      	ldr	r2, [r7, #8]
 8005fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	3b10      	subs	r3, #16
 8005fdc:	4a14      	ldr	r2, [pc, #80]	@ (8006030 <DMA_CalcBaseAndBitshift+0x64>)
 8005fde:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe2:	091b      	lsrs	r3, r3, #4
 8005fe4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fe6:	4a13      	ldr	r2, [pc, #76]	@ (8006034 <DMA_CalcBaseAndBitshift+0x68>)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d909      	bls.n	800600e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006002:	f023 0303 	bic.w	r3, r3, #3
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	659a      	str	r2, [r3, #88]	@ 0x58
 800600c:	e007      	b.n	800601e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	aaaaaaab 	.word	0xaaaaaaab
 8006034:	08013448 	.word	0x08013448

08006038 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d11f      	bne.n	8006092 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b03      	cmp	r3, #3
 8006056:	d856      	bhi.n	8006106 <DMA_CheckFifoParam+0xce>
 8006058:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <DMA_CheckFifoParam+0x28>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006071 	.word	0x08006071
 8006064:	08006083 	.word	0x08006083
 8006068:	08006071 	.word	0x08006071
 800606c:	08006107 	.word	0x08006107
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d046      	beq.n	800610a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006080:	e043      	b.n	800610a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800608a:	d140      	bne.n	800610e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006090:	e03d      	b.n	800610e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800609a:	d121      	bne.n	80060e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d837      	bhi.n	8006112 <DMA_CheckFifoParam+0xda>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <DMA_CheckFifoParam+0x70>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060b9 	.word	0x080060b9
 80060ac:	080060bf 	.word	0x080060bf
 80060b0:	080060b9 	.word	0x080060b9
 80060b4:	080060d1 	.word	0x080060d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      break;
 80060bc:	e030      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d025      	beq.n	8006116 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ce:	e022      	b.n	8006116 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060d8:	d11f      	bne.n	800611a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060de:	e01c      	b.n	800611a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d903      	bls.n	80060ee <DMA_CheckFifoParam+0xb6>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d003      	beq.n	80060f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060ec:	e018      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
      break;
 80060f2:	e015      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00e      	beq.n	800611e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      break;
 8006104:	e00b      	b.n	800611e <DMA_CheckFifoParam+0xe6>
      break;
 8006106:	bf00      	nop
 8006108:	e00a      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      break;
 800610a:	bf00      	nop
 800610c:	e008      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      break;
 800610e:	bf00      	nop
 8006110:	e006      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      break;
 8006112:	bf00      	nop
 8006114:	e004      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      break;
 8006116:	bf00      	nop
 8006118:	e002      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      break;   
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
    }
  } 
  
  return status; 
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop

08006130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	@ 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e165      	b.n	8006418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800614c:	2201      	movs	r2, #1
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	429a      	cmp	r2, r3
 8006166:	f040 8154 	bne.w	8006412 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b01      	cmp	r3, #1
 8006174:	d005      	beq.n	8006182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800617e:	2b02      	cmp	r3, #2
 8006180:	d130      	bne.n	80061e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	2203      	movs	r2, #3
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	4013      	ands	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061b8:	2201      	movs	r2, #1
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	091b      	lsrs	r3, r3, #4
 80061ce:	f003 0201 	and.w	r2, r3, #1
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	fa02 f303 	lsl.w	r3, r2, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d017      	beq.n	8006220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	2203      	movs	r2, #3
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	4313      	orrs	r3, r2
 8006218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f003 0303 	and.w	r3, r3, #3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d123      	bne.n	8006274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	08da      	lsrs	r2, r3, #3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3208      	adds	r2, #8
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	220f      	movs	r2, #15
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	43db      	mvns	r3, r3
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4013      	ands	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4313      	orrs	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	08da      	lsrs	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	3208      	adds	r2, #8
 800626e:	69b9      	ldr	r1, [r7, #24]
 8006270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	2203      	movs	r2, #3
 8006280:	fa02 f303 	lsl.w	r3, r2, r3
 8006284:	43db      	mvns	r3, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f003 0203 	and.w	r2, r3, #3
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	4313      	orrs	r3, r2
 80062a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80ae 	beq.w	8006412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	4b5d      	ldr	r3, [pc, #372]	@ (8006430 <HAL_GPIO_Init+0x300>)
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	4a5c      	ldr	r2, [pc, #368]	@ (8006430 <HAL_GPIO_Init+0x300>)
 80062c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80062c6:	4b5a      	ldr	r3, [pc, #360]	@ (8006430 <HAL_GPIO_Init+0x300>)
 80062c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062d2:	4a58      	ldr	r2, [pc, #352]	@ (8006434 <HAL_GPIO_Init+0x304>)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	3302      	adds	r3, #2
 80062da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	220f      	movs	r2, #15
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006438 <HAL_GPIO_Init+0x308>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d025      	beq.n	800634a <HAL_GPIO_Init+0x21a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a4e      	ldr	r2, [pc, #312]	@ (800643c <HAL_GPIO_Init+0x30c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01f      	beq.n	8006346 <HAL_GPIO_Init+0x216>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a4d      	ldr	r2, [pc, #308]	@ (8006440 <HAL_GPIO_Init+0x310>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d019      	beq.n	8006342 <HAL_GPIO_Init+0x212>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a4c      	ldr	r2, [pc, #304]	@ (8006444 <HAL_GPIO_Init+0x314>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d013      	beq.n	800633e <HAL_GPIO_Init+0x20e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a4b      	ldr	r2, [pc, #300]	@ (8006448 <HAL_GPIO_Init+0x318>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00d      	beq.n	800633a <HAL_GPIO_Init+0x20a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <HAL_GPIO_Init+0x31c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <HAL_GPIO_Init+0x206>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a49      	ldr	r2, [pc, #292]	@ (8006450 <HAL_GPIO_Init+0x320>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d101      	bne.n	8006332 <HAL_GPIO_Init+0x202>
 800632e:	2306      	movs	r3, #6
 8006330:	e00c      	b.n	800634c <HAL_GPIO_Init+0x21c>
 8006332:	2307      	movs	r3, #7
 8006334:	e00a      	b.n	800634c <HAL_GPIO_Init+0x21c>
 8006336:	2305      	movs	r3, #5
 8006338:	e008      	b.n	800634c <HAL_GPIO_Init+0x21c>
 800633a:	2304      	movs	r3, #4
 800633c:	e006      	b.n	800634c <HAL_GPIO_Init+0x21c>
 800633e:	2303      	movs	r3, #3
 8006340:	e004      	b.n	800634c <HAL_GPIO_Init+0x21c>
 8006342:	2302      	movs	r3, #2
 8006344:	e002      	b.n	800634c <HAL_GPIO_Init+0x21c>
 8006346:	2301      	movs	r3, #1
 8006348:	e000      	b.n	800634c <HAL_GPIO_Init+0x21c>
 800634a:	2300      	movs	r3, #0
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	f002 0203 	and.w	r2, r2, #3
 8006352:	0092      	lsls	r2, r2, #2
 8006354:	4093      	lsls	r3, r2
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800635c:	4935      	ldr	r1, [pc, #212]	@ (8006434 <HAL_GPIO_Init+0x304>)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	3302      	adds	r3, #2
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800636a:	4b3a      	ldr	r3, [pc, #232]	@ (8006454 <HAL_GPIO_Init+0x324>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	43db      	mvns	r3, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4013      	ands	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800638e:	4a31      	ldr	r2, [pc, #196]	@ (8006454 <HAL_GPIO_Init+0x324>)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006394:	4b2f      	ldr	r3, [pc, #188]	@ (8006454 <HAL_GPIO_Init+0x324>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	43db      	mvns	r3, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4013      	ands	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063b8:	4a26      	ldr	r2, [pc, #152]	@ (8006454 <HAL_GPIO_Init+0x324>)
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063be:	4b25      	ldr	r3, [pc, #148]	@ (8006454 <HAL_GPIO_Init+0x324>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69ba      	ldr	r2, [r7, #24]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006454 <HAL_GPIO_Init+0x324>)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006454 <HAL_GPIO_Init+0x324>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	4013      	ands	r3, r2
 80063f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d003      	beq.n	800640c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800640c:	4a11      	ldr	r2, [pc, #68]	@ (8006454 <HAL_GPIO_Init+0x324>)
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	3301      	adds	r3, #1
 8006416:	61fb      	str	r3, [r7, #28]
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b0f      	cmp	r3, #15
 800641c:	f67f ae96 	bls.w	800614c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006420:	bf00      	nop
 8006422:	bf00      	nop
 8006424:	3724      	adds	r7, #36	@ 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800
 8006434:	40013800 	.word	0x40013800
 8006438:	40020000 	.word	0x40020000
 800643c:	40020400 	.word	0x40020400
 8006440:	40020800 	.word	0x40020800
 8006444:	40020c00 	.word	0x40020c00
 8006448:	40021000 	.word	0x40021000
 800644c:	40021400 	.word	0x40021400
 8006450:	40021800 	.word	0x40021800
 8006454:	40013c00 	.word	0x40013c00

08006458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800646a:	2300      	movs	r3, #0
 800646c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
 8006472:	e0c7      	b.n	8006604 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006474:	2201      	movs	r2, #1
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	fa02 f303 	lsl.w	r3, r2, r3
 800647c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	4013      	ands	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	429a      	cmp	r2, r3
 800648c:	f040 80b7 	bne.w	80065fe <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006490:	4a62      	ldr	r2, [pc, #392]	@ (800661c <HAL_GPIO_DeInit+0x1c4>)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	089b      	lsrs	r3, r3, #2
 8006496:	3302      	adds	r3, #2
 8006498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	220f      	movs	r2, #15
 80064a8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	4013      	ands	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a5a      	ldr	r2, [pc, #360]	@ (8006620 <HAL_GPIO_DeInit+0x1c8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d025      	beq.n	8006506 <HAL_GPIO_DeInit+0xae>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a59      	ldr	r2, [pc, #356]	@ (8006624 <HAL_GPIO_DeInit+0x1cc>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01f      	beq.n	8006502 <HAL_GPIO_DeInit+0xaa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a58      	ldr	r2, [pc, #352]	@ (8006628 <HAL_GPIO_DeInit+0x1d0>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d019      	beq.n	80064fe <HAL_GPIO_DeInit+0xa6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a57      	ldr	r2, [pc, #348]	@ (800662c <HAL_GPIO_DeInit+0x1d4>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <HAL_GPIO_DeInit+0xa2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a56      	ldr	r2, [pc, #344]	@ (8006630 <HAL_GPIO_DeInit+0x1d8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00d      	beq.n	80064f6 <HAL_GPIO_DeInit+0x9e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a55      	ldr	r2, [pc, #340]	@ (8006634 <HAL_GPIO_DeInit+0x1dc>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d007      	beq.n	80064f2 <HAL_GPIO_DeInit+0x9a>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a54      	ldr	r2, [pc, #336]	@ (8006638 <HAL_GPIO_DeInit+0x1e0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d101      	bne.n	80064ee <HAL_GPIO_DeInit+0x96>
 80064ea:	2306      	movs	r3, #6
 80064ec:	e00c      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 80064ee:	2307      	movs	r3, #7
 80064f0:	e00a      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 80064f2:	2305      	movs	r3, #5
 80064f4:	e008      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 80064f6:	2304      	movs	r3, #4
 80064f8:	e006      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 80064fa:	2303      	movs	r3, #3
 80064fc:	e004      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 80064fe:	2302      	movs	r3, #2
 8006500:	e002      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <HAL_GPIO_DeInit+0xb0>
 8006506:	2300      	movs	r3, #0
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	f002 0203 	and.w	r2, r2, #3
 800650e:	0092      	lsls	r2, r2, #2
 8006510:	4093      	lsls	r3, r2
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d132      	bne.n	800657e <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006518:	4b48      	ldr	r3, [pc, #288]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	43db      	mvns	r3, r3
 8006520:	4946      	ldr	r1, [pc, #280]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 8006522:	4013      	ands	r3, r2
 8006524:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006526:	4b45      	ldr	r3, [pc, #276]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	43db      	mvns	r3, r3
 800652e:	4943      	ldr	r1, [pc, #268]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 8006530:	4013      	ands	r3, r2
 8006532:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006534:	4b41      	ldr	r3, [pc, #260]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	43db      	mvns	r3, r3
 800653c:	493f      	ldr	r1, [pc, #252]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 800653e:	4013      	ands	r3, r2
 8006540:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006542:	4b3e      	ldr	r3, [pc, #248]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	43db      	mvns	r3, r3
 800654a:	493c      	ldr	r1, [pc, #240]	@ (800663c <HAL_GPIO_DeInit+0x1e4>)
 800654c:	4013      	ands	r3, r2
 800654e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f003 0303 	and.w	r3, r3, #3
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	220f      	movs	r2, #15
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006560:	4a2e      	ldr	r2, [pc, #184]	@ (800661c <HAL_GPIO_DeInit+0x1c4>)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	089b      	lsrs	r3, r3, #2
 8006566:	3302      	adds	r3, #2
 8006568:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	43da      	mvns	r2, r3
 8006570:	482a      	ldr	r0, [pc, #168]	@ (800661c <HAL_GPIO_DeInit+0x1c4>)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	089b      	lsrs	r3, r3, #2
 8006576:	400a      	ands	r2, r1
 8006578:	3302      	adds	r3, #2
 800657a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2103      	movs	r1, #3
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	401a      	ands	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	08da      	lsrs	r2, r3, #3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	3208      	adds	r2, #8
 800659c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	220f      	movs	r2, #15
 80065aa:	fa02 f303 	lsl.w	r3, r2, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	08d2      	lsrs	r2, r2, #3
 80065b4:	4019      	ands	r1, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3208      	adds	r2, #8
 80065ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	005b      	lsls	r3, r3, #1
 80065c6:	2103      	movs	r1, #3
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	401a      	ands	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	2101      	movs	r1, #1
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	fa01 f303 	lsl.w	r3, r1, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	401a      	ands	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	2103      	movs	r1, #3
 80065f2:	fa01 f303 	lsl.w	r3, r1, r3
 80065f6:	43db      	mvns	r3, r3
 80065f8:	401a      	ands	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	3301      	adds	r3, #1
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b0f      	cmp	r3, #15
 8006608:	f67f af34 	bls.w	8006474 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40013800 	.word	0x40013800
 8006620:	40020000 	.word	0x40020000
 8006624:	40020400 	.word	0x40020400
 8006628:	40020800 	.word	0x40020800
 800662c:	40020c00 	.word	0x40020c00
 8006630:	40021000 	.word	0x40021000
 8006634:	40021400 	.word	0x40021400
 8006638:	40021800 	.word	0x40021800
 800663c:	40013c00 	.word	0x40013c00

08006640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	807b      	strh	r3, [r7, #2]
 800664c:	4613      	mov	r3, r2
 800664e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006650:	787b      	ldrb	r3, [r7, #1]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d003      	beq.n	800665e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006656:	887a      	ldrh	r2, [r7, #2]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800665c:	e003      	b.n	8006666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800665e:	887b      	ldrh	r3, [r7, #2]
 8006660:	041a      	lsls	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	619a      	str	r2, [r3, #24]
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800667e:	4b08      	ldr	r3, [pc, #32]	@ (80066a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	4013      	ands	r3, r2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d006      	beq.n	8006698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800668a:	4a05      	ldr	r2, [pc, #20]	@ (80066a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	4618      	mov	r0, r3
 8006694:	f7fc f8a0 	bl	80027d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40013c00 	.word	0x40013c00

080066a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e12b      	b.n	800690e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d106      	bne.n	80066d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fb fc9e 	bl	800200c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2224      	movs	r2, #36	@ 0x24
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0201 	bic.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006708:	f001 f99c 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800670c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	4a81      	ldr	r2, [pc, #516]	@ (8006918 <HAL_I2C_Init+0x274>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d807      	bhi.n	8006728 <HAL_I2C_Init+0x84>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4a80      	ldr	r2, [pc, #512]	@ (800691c <HAL_I2C_Init+0x278>)
 800671c:	4293      	cmp	r3, r2
 800671e:	bf94      	ite	ls
 8006720:	2301      	movls	r3, #1
 8006722:	2300      	movhi	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e006      	b.n	8006736 <HAL_I2C_Init+0x92>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a7d      	ldr	r2, [pc, #500]	@ (8006920 <HAL_I2C_Init+0x27c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	bf94      	ite	ls
 8006730:	2301      	movls	r3, #1
 8006732:	2300      	movhi	r3, #0
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e0e7      	b.n	800690e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a78      	ldr	r2, [pc, #480]	@ (8006924 <HAL_I2C_Init+0x280>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	0c9b      	lsrs	r3, r3, #18
 8006748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	430a      	orrs	r2, r1
 800675c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	4a6a      	ldr	r2, [pc, #424]	@ (8006918 <HAL_I2C_Init+0x274>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d802      	bhi.n	8006778 <HAL_I2C_Init+0xd4>
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	3301      	adds	r3, #1
 8006776:	e009      	b.n	800678c <HAL_I2C_Init+0xe8>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	4a69      	ldr	r2, [pc, #420]	@ (8006928 <HAL_I2C_Init+0x284>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	099b      	lsrs	r3, r3, #6
 800678a:	3301      	adds	r3, #1
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6812      	ldr	r2, [r2, #0]
 8006790:	430b      	orrs	r3, r1
 8006792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800679e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	495c      	ldr	r1, [pc, #368]	@ (8006918 <HAL_I2C_Init+0x274>)
 80067a8:	428b      	cmp	r3, r1
 80067aa:	d819      	bhi.n	80067e0 <HAL_I2C_Init+0x13c>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e59      	subs	r1, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80067ba:	1c59      	adds	r1, r3, #1
 80067bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067c0:	400b      	ands	r3, r1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00a      	beq.n	80067dc <HAL_I2C_Init+0x138>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1e59      	subs	r1, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80067d4:	3301      	adds	r3, #1
 80067d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067da:	e051      	b.n	8006880 <HAL_I2C_Init+0x1dc>
 80067dc:	2304      	movs	r3, #4
 80067de:	e04f      	b.n	8006880 <HAL_I2C_Init+0x1dc>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d111      	bne.n	800680c <HAL_I2C_Init+0x168>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	1e58      	subs	r0, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6859      	ldr	r1, [r3, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	440b      	add	r3, r1
 80067f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80067fa:	3301      	adds	r3, #1
 80067fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	e012      	b.n	8006832 <HAL_I2C_Init+0x18e>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	1e58      	subs	r0, r3, #1
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6859      	ldr	r1, [r3, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	0099      	lsls	r1, r3, #2
 800681c:	440b      	add	r3, r1
 800681e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006822:	3301      	adds	r3, #1
 8006824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006828:	2b00      	cmp	r3, #0
 800682a:	bf0c      	ite	eq
 800682c:	2301      	moveq	r3, #1
 800682e:	2300      	movne	r3, #0
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_I2C_Init+0x196>
 8006836:	2301      	movs	r3, #1
 8006838:	e022      	b.n	8006880 <HAL_I2C_Init+0x1dc>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10e      	bne.n	8006860 <HAL_I2C_Init+0x1bc>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1e58      	subs	r0, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6859      	ldr	r1, [r3, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	440b      	add	r3, r1
 8006850:	fbb0 f3f3 	udiv	r3, r0, r3
 8006854:	3301      	adds	r3, #1
 8006856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800685e:	e00f      	b.n	8006880 <HAL_I2C_Init+0x1dc>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	1e58      	subs	r0, r3, #1
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6859      	ldr	r1, [r3, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	0099      	lsls	r1, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	fbb0 f3f3 	udiv	r3, r0, r3
 8006876:	3301      	adds	r3, #1
 8006878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800687c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	6809      	ldr	r1, [r1, #0]
 8006884:	4313      	orrs	r3, r2
 8006886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80068ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	6911      	ldr	r1, [r2, #16]
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	68d2      	ldr	r2, [r2, #12]
 80068ba:	4311      	orrs	r1, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0201 	orr.w	r2, r2, #1
 80068ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2220      	movs	r2, #32
 80068fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	000186a0 	.word	0x000186a0
 800691c:	001e847f 	.word	0x001e847f
 8006920:	003d08ff 	.word	0x003d08ff
 8006924:	431bde83 	.word	0x431bde83
 8006928:	10624dd3 	.word	0x10624dd3

0800692c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e021      	b.n	8006982 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2224      	movs	r2, #36	@ 0x24
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7fb fbf8 	bl	800214c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b088      	sub	sp, #32
 8006990:	af02      	add	r7, sp, #8
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	461a      	mov	r2, r3
 800699a:	4603      	mov	r3, r0
 800699c:	817b      	strh	r3, [r7, #10]
 800699e:	460b      	mov	r3, r1
 80069a0:	813b      	strh	r3, [r7, #8]
 80069a2:	4613      	mov	r3, r2
 80069a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069a6:	f7fe fa13 	bl	8004dd0 <HAL_GetTick>
 80069aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	f040 80d9 	bne.w	8006b6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	2319      	movs	r3, #25
 80069c0:	2201      	movs	r2, #1
 80069c2:	496d      	ldr	r1, [pc, #436]	@ (8006b78 <HAL_I2C_Mem_Write+0x1ec>)
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fc8b 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0cc      	b.n	8006b6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_I2C_Mem_Write+0x56>
 80069de:	2302      	movs	r3, #2
 80069e0:	e0c5      	b.n	8006b6e <HAL_I2C_Mem_Write+0x1e2>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d007      	beq.n	8006a08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2221      	movs	r2, #33	@ 0x21
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2240      	movs	r2, #64	@ 0x40
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a3a      	ldr	r2, [r7, #32]
 8006a32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a4d      	ldr	r2, [pc, #308]	@ (8006b7c <HAL_I2C_Mem_Write+0x1f0>)
 8006a48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a4a:	88f8      	ldrh	r0, [r7, #6]
 8006a4c:	893a      	ldrh	r2, [r7, #8]
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fac2 	bl	8006fe4 <I2C_RequestMemoryWrite>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d052      	beq.n	8006b0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e081      	b.n	8006b6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 fd50 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d107      	bne.n	8006a92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e06b      	b.n	8006b6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9a:	781a      	ldrb	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d11b      	bne.n	8006b0c <HAL_I2C_Mem_Write+0x180>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d017      	beq.n	8006b0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	781a      	ldrb	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1aa      	bne.n	8006a6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	f000 fd43 	bl	80075a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d107      	bne.n	8006b3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e016      	b.n	8006b6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	e000      	b.n	8006b6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
  }
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	00100002 	.word	0x00100002
 8006b7c:	ffff0000 	.word	0xffff0000

08006b80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08c      	sub	sp, #48	@ 0x30
 8006b84:	af02      	add	r7, sp, #8
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	817b      	strh	r3, [r7, #10]
 8006b92:	460b      	mov	r3, r1
 8006b94:	813b      	strh	r3, [r7, #8]
 8006b96:	4613      	mov	r3, r2
 8006b98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b9a:	f7fe f919 	bl	8004dd0 <HAL_GetTick>
 8006b9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	f040 8214 	bne.w	8006fd6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	2319      	movs	r3, #25
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	497b      	ldr	r1, [pc, #492]	@ (8006da4 <HAL_I2C_Mem_Read+0x224>)
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fb91 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e207      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_I2C_Mem_Read+0x56>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e200      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d007      	beq.n	8006bfc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2222      	movs	r2, #34	@ 0x22
 8006c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2240      	movs	r2, #64	@ 0x40
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8006da8 <HAL_I2C_Mem_Read+0x228>)
 8006c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c3e:	88f8      	ldrh	r0, [r7, #6]
 8006c40:	893a      	ldrh	r2, [r7, #8]
 8006c42:	8979      	ldrh	r1, [r7, #10]
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fa5e 	bl	8007110 <I2C_RequestMemoryRead>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e1bc      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d113      	bne.n	8006c8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c66:	2300      	movs	r3, #0
 8006c68:	623b      	str	r3, [r7, #32]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	623b      	str	r3, [r7, #32]
 8006c7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e190      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d11b      	bne.n	8006cce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ca4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e170      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d11b      	bne.n	8006d0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ce4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	e150      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d24:	e144      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	f200 80f1 	bhi.w	8006f12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d123      	bne.n	8006d80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 fc79 	bl	8007634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e145      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d7e:	e117      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d14e      	bne.n	8006e26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	2200      	movs	r2, #0
 8006d90:	4906      	ldr	r1, [pc, #24]	@ (8006dac <HAL_I2C_Mem_Read+0x22c>)
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 faa4 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d008      	beq.n	8006db0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e11a      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
 8006da2:	bf00      	nop
 8006da4:	00100002 	.word	0x00100002
 8006da8:	ffff0000 	.word	0xffff0000
 8006dac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e24:	e0c4      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	496c      	ldr	r1, [pc, #432]	@ (8006fe0 <HAL_I2C_Mem_Read+0x460>)
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fa55 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e0cb      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5a:	b2d2      	uxtb	r2, r2
 8006e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	2200      	movs	r2, #0
 8006e8a:	4955      	ldr	r1, [pc, #340]	@ (8006fe0 <HAL_I2C_Mem_Read+0x460>)
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 fa27 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e09d      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691a      	ldr	r2, [r3, #16]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f10:	e04e      	b.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fb8c 	bl	8007634 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e058      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f30:	b2d2      	uxtb	r2, r2
 8006f32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d124      	bne.n	8006fb0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d107      	bne.n	8006f7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	1c5a      	adds	r2, r3, #1
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f47f aeb6 	bne.w	8006d26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	e000      	b.n	8006fd8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006fd6:	2302      	movs	r3, #2
  }
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3728      	adds	r7, #40	@ 0x28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	00010004 	.word	0x00010004

08006fe4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	817b      	strh	r3, [r7, #10]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	813b      	strh	r3, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800700c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800700e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	2200      	movs	r2, #0
 8007016:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f960 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007034:	d103      	bne.n	800703e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800703c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e05f      	b.n	8007102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007042:	897b      	ldrh	r3, [r7, #10]
 8007044:	b2db      	uxtb	r3, r3
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007050:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	492d      	ldr	r1, [pc, #180]	@ (800710c <I2C_RequestMemoryWrite+0x128>)
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f9bb 	bl	80073d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e04c      	b.n	8007102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800707e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007080:	6a39      	ldr	r1, [r7, #32]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 fa46 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00d      	beq.n	80070aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007092:	2b04      	cmp	r3, #4
 8007094:	d107      	bne.n	80070a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e02b      	b.n	8007102 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d105      	bne.n	80070bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070b0:	893b      	ldrh	r3, [r7, #8]
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	611a      	str	r2, [r3, #16]
 80070ba:	e021      	b.n	8007100 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070bc:	893b      	ldrh	r3, [r7, #8]
 80070be:	0a1b      	lsrs	r3, r3, #8
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070cc:	6a39      	ldr	r1, [r7, #32]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fa20 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00d      	beq.n	80070f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d107      	bne.n	80070f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e005      	b.n	8007102 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070f6:	893b      	ldrh	r3, [r7, #8]
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	00010002 	.word	0x00010002

08007110 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	461a      	mov	r2, r3
 800711e:	4603      	mov	r3, r0
 8007120:	817b      	strh	r3, [r7, #10]
 8007122:	460b      	mov	r3, r1
 8007124:	813b      	strh	r3, [r7, #8]
 8007126:	4613      	mov	r3, r2
 8007128:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007138:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007148:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	2200      	movs	r2, #0
 8007152:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 f8c2 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007170:	d103      	bne.n	800717a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007178:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e0aa      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800717e:	897b      	ldrh	r3, [r7, #10]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	461a      	mov	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800718c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800718e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	4952      	ldr	r1, [pc, #328]	@ (80072dc <I2C_RequestMemoryRead+0x1cc>)
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f91d 	bl	80073d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e097      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071bc:	6a39      	ldr	r1, [r7, #32]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f9a8 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00d      	beq.n	80071e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d107      	bne.n	80071e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e076      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071ec:	893b      	ldrh	r3, [r7, #8]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	611a      	str	r2, [r3, #16]
 80071f6:	e021      	b.n	800723c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071f8:	893b      	ldrh	r3, [r7, #8]
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007208:	6a39      	ldr	r1, [r7, #32]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f982 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00d      	beq.n	8007232 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721a:	2b04      	cmp	r3, #4
 800721c:	d107      	bne.n	800722e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800722c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e050      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007232:	893b      	ldrh	r3, [r7, #8]
 8007234:	b2da      	uxtb	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800723c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800723e:	6a39      	ldr	r1, [r7, #32]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f967 	bl	8007514 <I2C_WaitOnTXEFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00d      	beq.n	8007268 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007250:	2b04      	cmp	r3, #4
 8007252:	d107      	bne.n	8007264 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007262:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e035      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007276:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	2200      	movs	r2, #0
 8007280:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f82b 	bl	80072e0 <I2C_WaitOnFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00d      	beq.n	80072ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729e:	d103      	bne.n	80072a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e013      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072ac:	897b      	ldrh	r3, [r7, #10]
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f043 0301 	orr.w	r3, r3, #1
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	6a3a      	ldr	r2, [r7, #32]
 80072c0:	4906      	ldr	r1, [pc, #24]	@ (80072dc <I2C_RequestMemoryRead+0x1cc>)
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f886 	bl	80073d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	00010002 	.word	0x00010002

080072e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072f0:	e048      	b.n	8007384 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d044      	beq.n	8007384 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fa:	f7fd fd69 	bl	8004dd0 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <I2C_WaitOnFlagUntilTimeout+0x30>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d139      	bne.n	8007384 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	0c1b      	lsrs	r3, r3, #16
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10d      	bne.n	8007336 <I2C_WaitOnFlagUntilTimeout+0x56>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	43da      	mvns	r2, r3
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	4013      	ands	r3, r2
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	bf0c      	ite	eq
 800732c:	2301      	moveq	r3, #1
 800732e:	2300      	movne	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	461a      	mov	r2, r3
 8007334:	e00c      	b.n	8007350 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	43da      	mvns	r2, r3
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	4013      	ands	r3, r2
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf0c      	ite	eq
 8007348:	2301      	moveq	r3, #1
 800734a:	2300      	movne	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	461a      	mov	r2, r3
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	429a      	cmp	r2, r3
 8007354:	d116      	bne.n	8007384 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	f043 0220 	orr.w	r2, r3, #32
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e023      	b.n	80073cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	0c1b      	lsrs	r3, r3, #16
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10d      	bne.n	80073aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	43da      	mvns	r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4013      	ands	r3, r2
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
 80073a8:	e00c      	b.n	80073c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	43da      	mvns	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4013      	ands	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	bf0c      	ite	eq
 80073bc:	2301      	moveq	r3, #1
 80073be:	2300      	movne	r3, #0
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	461a      	mov	r2, r3
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d093      	beq.n	80072f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073e2:	e071      	b.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073f2:	d123      	bne.n	800743c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007402:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800740c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007428:	f043 0204 	orr.w	r2, r3, #4
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e067      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d041      	beq.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007444:	f7fd fcc4 	bl	8004dd0 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d302      	bcc.n	800745a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d136      	bne.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10c      	bne.n	800747e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	43da      	mvns	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4013      	ands	r3, r2
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	bf14      	ite	ne
 8007476:	2301      	movne	r3, #1
 8007478:	2300      	moveq	r3, #0
 800747a:	b2db      	uxtb	r3, r3
 800747c:	e00b      	b.n	8007496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	43da      	mvns	r2, r3
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	4013      	ands	r3, r2
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d016      	beq.n	80074c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	f043 0220 	orr.w	r2, r3, #32
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e021      	b.n	800750c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	0c1b      	lsrs	r3, r3, #16
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d10c      	bne.n	80074ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	43da      	mvns	r2, r3
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4013      	ands	r3, r2
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	bf14      	ite	ne
 80074e4:	2301      	movne	r3, #1
 80074e6:	2300      	moveq	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	e00b      	b.n	8007504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	43da      	mvns	r2, r3
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4013      	ands	r3, r2
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	bf14      	ite	ne
 80074fe:	2301      	movne	r3, #1
 8007500:	2300      	moveq	r3, #0
 8007502:	b2db      	uxtb	r3, r3
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f af6d 	bne.w	80073e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007520:	e034      	b.n	800758c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f8e3 	bl	80076ee <I2C_IsAcknowledgeFailed>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e034      	b.n	800759c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d028      	beq.n	800758c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800753a:	f7fd fc49 	bl	8004dd0 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	68ba      	ldr	r2, [r7, #8]
 8007546:	429a      	cmp	r2, r3
 8007548:	d302      	bcc.n	8007550 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11d      	bne.n	800758c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800755a:	2b80      	cmp	r3, #128	@ 0x80
 800755c:	d016      	beq.n	800758c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007578:	f043 0220 	orr.w	r2, r3, #32
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e007      	b.n	800759c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007596:	2b80      	cmp	r3, #128	@ 0x80
 8007598:	d1c3      	bne.n	8007522 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80075b0:	e034      	b.n	800761c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f000 f89b 	bl	80076ee <I2C_IsAcknowledgeFailed>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e034      	b.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d028      	beq.n	800761c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ca:	f7fd fc01 	bl	8004dd0 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d302      	bcc.n	80075e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d11d      	bne.n	800761c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d016      	beq.n	800761c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	f043 0220 	orr.w	r2, r3, #32
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e007      	b.n	800762c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0304 	and.w	r3, r3, #4
 8007626:	2b04      	cmp	r3, #4
 8007628:	d1c3      	bne.n	80075b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007640:	e049      	b.n	80076d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b10      	cmp	r3, #16
 800764e:	d119      	bne.n	8007684 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f06f 0210 	mvn.w	r2, #16
 8007658:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e030      	b.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007684:	f7fd fba4 	bl	8004dd0 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	429a      	cmp	r2, r3
 8007692:	d302      	bcc.n	800769a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d11d      	bne.n	80076d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a4:	2b40      	cmp	r3, #64	@ 0x40
 80076a6:	d016      	beq.n	80076d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	f043 0220 	orr.w	r2, r3, #32
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e007      	b.n	80076e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e0:	2b40      	cmp	r3, #64	@ 0x40
 80076e2:	d1ae      	bne.n	8007642 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007704:	d11b      	bne.n	800773e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800770e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	f043 0204 	orr.w	r2, r3, #4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <HAL_PWR_EnableBkUpAccess+0x20>)
 8007754:	2201      	movs	r2, #1
 8007756:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8007758:	4b05      	ldr	r3, [pc, #20]	@ (8007770 <HAL_PWR_EnableBkUpAccess+0x24>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800775e:	687b      	ldr	r3, [r7, #4]
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	420e0020 	.word	0x420e0020
 8007770:	40007000 	.word	0x40007000

08007774 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800777e:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <HAL_PWREx_EnableBkUpReg+0x44>)
 8007780:	2201      	movs	r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007784:	f7fd fb24 	bl	8004dd0 <HAL_GetTick>
 8007788:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800778a:	e009      	b.n	80077a0 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800778c:	f7fd fb20 	bl	8004dd0 <HAL_GetTick>
 8007790:	4602      	mov	r2, r0
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800779a:	d901      	bls.n	80077a0 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e006      	b.n	80077ae <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <HAL_PWREx_EnableBkUpReg+0x48>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 0308 	and.w	r3, r3, #8
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d1ef      	bne.n	800778c <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	420e00a4 	.word	0x420e00a4
 80077bc:	40007000 	.word	0x40007000

080077c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80077ca:	2300      	movs	r3, #0
 80077cc:	603b      	str	r3, [r7, #0]
 80077ce:	4b20      	ldr	r3, [pc, #128]	@ (8007850 <HAL_PWREx_EnableOverDrive+0x90>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d2:	4a1f      	ldr	r2, [pc, #124]	@ (8007850 <HAL_PWREx_EnableOverDrive+0x90>)
 80077d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80077da:	4b1d      	ldr	r3, [pc, #116]	@ (8007850 <HAL_PWREx_EnableOverDrive+0x90>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007854 <HAL_PWREx_EnableOverDrive+0x94>)
 80077e8:	2201      	movs	r2, #1
 80077ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077ec:	f7fd faf0 	bl	8004dd0 <HAL_GetTick>
 80077f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077f2:	e009      	b.n	8007808 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077f4:	f7fd faec 	bl	8004dd0 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007802:	d901      	bls.n	8007808 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e01f      	b.n	8007848 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007808:	4b13      	ldr	r3, [pc, #76]	@ (8007858 <HAL_PWREx_EnableOverDrive+0x98>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007814:	d1ee      	bne.n	80077f4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007816:	4b11      	ldr	r3, [pc, #68]	@ (800785c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007818:	2201      	movs	r2, #1
 800781a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800781c:	f7fd fad8 	bl	8004dd0 <HAL_GetTick>
 8007820:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007822:	e009      	b.n	8007838 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007824:	f7fd fad4 	bl	8004dd0 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007832:	d901      	bls.n	8007838 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e007      	b.n	8007848 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007838:	4b07      	ldr	r3, [pc, #28]	@ (8007858 <HAL_PWREx_EnableOverDrive+0x98>)
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007844:	d1ee      	bne.n	8007824 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40023800 	.word	0x40023800
 8007854:	420e0040 	.word	0x420e0040
 8007858:	40007000 	.word	0x40007000
 800785c:	420e0044 	.word	0x420e0044

08007860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e0cc      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007874:	4b68      	ldr	r3, [pc, #416]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d90c      	bls.n	800789c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007882:	4b65      	ldr	r3, [pc, #404]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	b2d2      	uxtb	r2, r2
 8007888:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800788a:	4b63      	ldr	r3, [pc, #396]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 030f 	and.w	r3, r3, #15
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d001      	beq.n	800789c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e0b8      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d020      	beq.n	80078ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078b4:	4b59      	ldr	r3, [pc, #356]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4a58      	ldr	r2, [pc, #352]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80078be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078cc:	4b53      	ldr	r3, [pc, #332]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4a52      	ldr	r2, [pc, #328]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80078d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078d8:	4b50      	ldr	r3, [pc, #320]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	494d      	ldr	r1, [pc, #308]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d044      	beq.n	8007980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d107      	bne.n	800790e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fe:	4b47      	ldr	r3, [pc, #284]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d119      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e07f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b02      	cmp	r3, #2
 8007914:	d003      	beq.n	800791e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800791a:	2b03      	cmp	r3, #3
 800791c:	d107      	bne.n	800792e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800791e:	4b3f      	ldr	r3, [pc, #252]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e06f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800792e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e067      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800793e:	4b37      	ldr	r3, [pc, #220]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f023 0203 	bic.w	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	4934      	ldr	r1, [pc, #208]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007950:	f7fd fa3e 	bl	8004dd0 <HAL_GetTick>
 8007954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007956:	e00a      	b.n	800796e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007958:	f7fd fa3a 	bl	8004dd0 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e04f      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800796e:	4b2b      	ldr	r3, [pc, #172]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f003 020c 	and.w	r2, r3, #12
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	429a      	cmp	r2, r3
 800797e:	d1eb      	bne.n	8007958 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007980:	4b25      	ldr	r3, [pc, #148]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d20c      	bcs.n	80079a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800798e:	4b22      	ldr	r3, [pc, #136]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007996:	4b20      	ldr	r3, [pc, #128]	@ (8007a18 <HAL_RCC_ClockConfig+0x1b8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 030f 	and.w	r3, r3, #15
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d001      	beq.n	80079a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	e032      	b.n	8007a0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d008      	beq.n	80079c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079b4:	4b19      	ldr	r3, [pc, #100]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4916      	ldr	r1, [pc, #88]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079d2:	4b12      	ldr	r3, [pc, #72]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	490e      	ldr	r1, [pc, #56]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079e6:	f000 fb7f 	bl	80080e8 <HAL_RCC_GetSysClockFreq>
 80079ea:	4602      	mov	r2, r0
 80079ec:	4b0b      	ldr	r3, [pc, #44]	@ (8007a1c <HAL_RCC_ClockConfig+0x1bc>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	490a      	ldr	r1, [pc, #40]	@ (8007a20 <HAL_RCC_ClockConfig+0x1c0>)
 80079f8:	5ccb      	ldrb	r3, [r1, r3]
 80079fa:	fa22 f303 	lsr.w	r3, r2, r3
 80079fe:	4a09      	ldr	r2, [pc, #36]	@ (8007a24 <HAL_RCC_ClockConfig+0x1c4>)
 8007a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007a02:	4b09      	ldr	r3, [pc, #36]	@ (8007a28 <HAL_RCC_ClockConfig+0x1c8>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd f99e 	bl	8004d48 <HAL_InitTick>

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	40023c00 	.word	0x40023c00
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	08013430 	.word	0x08013430
 8007a24:	20000004 	.word	0x20000004
 8007a28:	20000020 	.word	0x20000020

08007a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a30:	4b03      	ldr	r3, [pc, #12]	@ (8007a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a32:	681b      	ldr	r3, [r3, #0]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	20000004 	.word	0x20000004

08007a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a48:	f7ff fff0 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4b05      	ldr	r3, [pc, #20]	@ (8007a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0a9b      	lsrs	r3, r3, #10
 8007a54:	f003 0307 	and.w	r3, r3, #7
 8007a58:	4903      	ldr	r1, [pc, #12]	@ (8007a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a5a:	5ccb      	ldrb	r3, [r1, r3]
 8007a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40023800 	.word	0x40023800
 8007a68:	08013440 	.word	0x08013440

08007a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a70:	f7ff ffdc 	bl	8007a2c <HAL_RCC_GetHCLKFreq>
 8007a74:	4602      	mov	r2, r0
 8007a76:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	0b5b      	lsrs	r3, r3, #13
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	4903      	ldr	r1, [pc, #12]	@ (8007a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a82:	5ccb      	ldrb	r3, [r1, r3]
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	08013440 	.word	0x08013440

08007a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08c      	sub	sp, #48	@ 0x30
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d010      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007acc:	4b6f      	ldr	r3, [pc, #444]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ad2:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	496c      	ldr	r1, [pc, #432]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007aea:	2301      	movs	r3, #1
 8007aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0302 	and.w	r3, r3, #2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d010      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007afa:	4b64      	ldr	r3, [pc, #400]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b00:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b08:	4960      	ldr	r1, [pc, #384]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d017      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b28:	4b58      	ldr	r3, [pc, #352]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b36:	4955      	ldr	r1, [pc, #340]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b46:	d101      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007b54:	2301      	movs	r3, #1
 8007b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0308 	and.w	r3, r3, #8
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d017      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007b64:	4b49      	ldr	r3, [pc, #292]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b72:	4946      	ldr	r1, [pc, #280]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b82:	d101      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007b84:	2301      	movs	r3, #1
 8007b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007b90:	2301      	movs	r3, #1
 8007b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0320 	and.w	r3, r3, #32
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 808a 	beq.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	4b39      	ldr	r3, [pc, #228]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007baa:	4a38      	ldr	r2, [pc, #224]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bb2:	4b36      	ldr	r3, [pc, #216]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bba:	60bb      	str	r3, [r7, #8]
 8007bbc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bbe:	4b34      	ldr	r3, [pc, #208]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a33      	ldr	r2, [pc, #204]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bca:	f7fd f901 	bl	8004dd0 <HAL_GetTick>
 8007bce:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007bd0:	e008      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd2:	f7fd f8fd 	bl	8004dd0 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e278      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007be4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bf0:	4b26      	ldr	r3, [pc, #152]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bf8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d02f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c08:	6a3a      	ldr	r2, [r7, #32]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d028      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c16:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c18:	4b1e      	ldr	r3, [pc, #120]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c24:	4a19      	ldr	r2, [pc, #100]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c2a:	4b18      	ldr	r3, [pc, #96]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d114      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c36:	f7fd f8cb 	bl	8004dd0 <HAL_GetTick>
 8007c3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3c:	e00a      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c3e:	f7fd f8c7 	bl	8004dd0 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e240      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c54:	4b0d      	ldr	r3, [pc, #52]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0ee      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c6c:	d114      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007c6e:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c82:	4902      	ldr	r1, [pc, #8]	@ (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
 8007c88:	e00c      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40007000 	.word	0x40007000
 8007c94:	42470e40 	.word	0x42470e40
 8007c98:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	4a49      	ldr	r2, [pc, #292]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007c9e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007ca2:	6093      	str	r3, [r2, #8]
 8007ca4:	4b47      	ldr	r3, [pc, #284]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ca6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb0:	4944      	ldr	r1, [pc, #272]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8007cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007cca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce6:	4937      	ldr	r1, [pc, #220]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cfa:	4b32      	ldr	r3, [pc, #200]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d00:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d08:	492e      	ldr	r1, [pc, #184]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d011      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d1c:	4b29      	ldr	r3, [pc, #164]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d22:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	4926      	ldr	r1, [pc, #152]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d3a:	d101      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d52:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d5a:	491a      	ldr	r1, [pc, #104]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d011      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007d6e:	4b15      	ldr	r3, [pc, #84]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d74:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d7c:	4911      	ldr	r1, [pc, #68]	@ (8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d8c:	d101      	bne.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d005      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007da0:	f040 80ff 	bne.w	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007da4:	4b09      	ldr	r3, [pc, #36]	@ (8007dcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007daa:	f7fd f811 	bl	8004dd0 <HAL_GetTick>
 8007dae:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007db0:	e00e      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007db2:	f7fd f80d 	bl	8004dd0 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d907      	bls.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e188      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	424711e0 	.word	0x424711e0
 8007dcc:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007dd0:	4b7e      	ldr	r3, [pc, #504]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ea      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d028      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d124      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e04:	4b71      	ldr	r3, [pc, #452]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e0a:	0c1b      	lsrs	r3, r3, #16
 8007e0c:	f003 0303 	and.w	r3, r3, #3
 8007e10:	3301      	adds	r3, #1
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e16:	4b6d      	ldr	r3, [pc, #436]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e1c:	0e1b      	lsrs	r3, r3, #24
 8007e1e:	f003 030f 	and.w	r3, r3, #15
 8007e22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	019b      	lsls	r3, r3, #6
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	3b01      	subs	r3, #1
 8007e36:	041b      	lsls	r3, r3, #16
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	061b      	lsls	r3, r3, #24
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	071b      	lsls	r3, r3, #28
 8007e46:	4961      	ldr	r1, [pc, #388]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d004      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e62:	d00a      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d035      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e78:	d130      	bne.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e7a:	4b54      	ldr	r3, [pc, #336]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	f003 0303 	and.w	r3, r3, #3
 8007e86:	3301      	adds	r3, #1
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e92:	0f1b      	lsrs	r3, r3, #28
 8007e94:	f003 0307 	and.w	r3, r3, #7
 8007e98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	019b      	lsls	r3, r3, #6
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	041b      	lsls	r3, r3, #16
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	061b      	lsls	r3, r3, #24
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	071b      	lsls	r3, r3, #28
 8007ebc:	4943      	ldr	r1, [pc, #268]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ec4:	4b41      	ldr	r3, [pc, #260]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007eca:	f023 021f 	bic.w	r2, r3, #31
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	493d      	ldr	r1, [pc, #244]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d029      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ef0:	d124      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007ef2:	4b36      	ldr	r3, [pc, #216]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ef8:	0c1b      	lsrs	r3, r3, #16
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	3301      	adds	r3, #1
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f04:	4b31      	ldr	r3, [pc, #196]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f0a:	0f1b      	lsrs	r3, r3, #28
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	019b      	lsls	r3, r3, #6
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	3b01      	subs	r3, #1
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	061b      	lsls	r3, r3, #24
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	071b      	lsls	r3, r3, #28
 8007f34:	4925      	ldr	r1, [pc, #148]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d016      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	019b      	lsls	r3, r3, #6
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	041b      	lsls	r3, r3, #16
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	061b      	lsls	r3, r3, #24
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	4917      	ldr	r1, [pc, #92]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f76:	4b16      	ldr	r3, [pc, #88]	@ (8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f7c:	f7fc ff28 	bl	8004dd0 <HAL_GetTick>
 8007f80:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007f84:	f7fc ff24 	bl	8004dd0 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d901      	bls.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e09f      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0f0      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	f040 8095 	bne.w	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007faa:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fb0:	f7fc ff0e 	bl	8004dd0 <HAL_GetTick>
 8007fb4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fb6:	e00f      	b.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fb8:	f7fc ff0a 	bl	8004dd0 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d908      	bls.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e085      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007fca:	bf00      	nop
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	42470068 	.word	0x42470068
 8007fd4:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fd8:	4b41      	ldr	r3, [pc, #260]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe4:	d0e8      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008002:	2b00      	cmp	r3, #0
 8008004:	d02b      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800800a:	2b00      	cmp	r3, #0
 800800c:	d127      	bne.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800800e:	4b34      	ldr	r3, [pc, #208]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	3301      	adds	r3, #1
 800801c:	005b      	lsls	r3, r3, #1
 800801e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	019b      	lsls	r3, r3, #6
 800802a:	431a      	orrs	r2, r3
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	085b      	lsrs	r3, r3, #1
 8008030:	3b01      	subs	r3, #1
 8008032:	041b      	lsls	r3, r3, #16
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	061b      	lsls	r3, r3, #24
 800803c:	4928      	ldr	r1, [pc, #160]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800803e:	4313      	orrs	r3, r2
 8008040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008044:	4b26      	ldr	r3, [pc, #152]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008046:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800804a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008052:	3b01      	subs	r3, #1
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	4922      	ldr	r1, [pc, #136]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01d      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008072:	d118      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008074:	4b1a      	ldr	r3, [pc, #104]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807a:	0e1b      	lsrs	r3, r3, #24
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699a      	ldr	r2, [r3, #24]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	019b      	lsls	r3, r3, #6
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	3b01      	subs	r3, #1
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	431a      	orrs	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	061b      	lsls	r3, r3, #24
 800809e:	4910      	ldr	r1, [pc, #64]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80080a6:	4b0f      	ldr	r3, [pc, #60]	@ (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80080ac:	f7fc fe90 	bl	8004dd0 <HAL_GetTick>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080b2:	e008      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80080b4:	f7fc fe8c 	bl	8004dd0 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e007      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80080c6:	4b06      	ldr	r3, [pc, #24]	@ (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080d2:	d1ef      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3730      	adds	r7, #48	@ 0x30
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	40023800 	.word	0x40023800
 80080e4:	42470070 	.word	0x42470070

080080e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ec:	b0ae      	sub	sp, #184	@ 0xb8
 80080ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800810e:	4bcb      	ldr	r3, [pc, #812]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 030c 	and.w	r3, r3, #12
 8008116:	2b0c      	cmp	r3, #12
 8008118:	f200 8206 	bhi.w	8008528 <HAL_RCC_GetSysClockFreq+0x440>
 800811c:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <HAL_RCC_GetSysClockFreq+0x3c>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	08008159 	.word	0x08008159
 8008128:	08008529 	.word	0x08008529
 800812c:	08008529 	.word	0x08008529
 8008130:	08008529 	.word	0x08008529
 8008134:	08008161 	.word	0x08008161
 8008138:	08008529 	.word	0x08008529
 800813c:	08008529 	.word	0x08008529
 8008140:	08008529 	.word	0x08008529
 8008144:	08008169 	.word	0x08008169
 8008148:	08008529 	.word	0x08008529
 800814c:	08008529 	.word	0x08008529
 8008150:	08008529 	.word	0x08008529
 8008154:	08008359 	.word	0x08008359
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008158:	4bb9      	ldr	r3, [pc, #740]	@ (8008440 <HAL_RCC_GetSysClockFreq+0x358>)
 800815a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800815e:	e1e7      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008160:	4bb8      	ldr	r3, [pc, #736]	@ (8008444 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008166:	e1e3      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008168:	4bb4      	ldr	r3, [pc, #720]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008174:	4bb1      	ldr	r3, [pc, #708]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d071      	beq.n	8008264 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008180:	4bae      	ldr	r3, [pc, #696]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	099b      	lsrs	r3, r3, #6
 8008186:	2200      	movs	r2, #0
 8008188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800818c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008190:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800819c:	2300      	movs	r3, #0
 800819e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80081a6:	4622      	mov	r2, r4
 80081a8:	462b      	mov	r3, r5
 80081aa:	f04f 0000 	mov.w	r0, #0
 80081ae:	f04f 0100 	mov.w	r1, #0
 80081b2:	0159      	lsls	r1, r3, #5
 80081b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081b8:	0150      	lsls	r0, r2, #5
 80081ba:	4602      	mov	r2, r0
 80081bc:	460b      	mov	r3, r1
 80081be:	4621      	mov	r1, r4
 80081c0:	1a51      	subs	r1, r2, r1
 80081c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80081c4:	4629      	mov	r1, r5
 80081c6:	eb63 0301 	sbc.w	r3, r3, r1
 80081ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80081d8:	4649      	mov	r1, r9
 80081da:	018b      	lsls	r3, r1, #6
 80081dc:	4641      	mov	r1, r8
 80081de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081e2:	4641      	mov	r1, r8
 80081e4:	018a      	lsls	r2, r1, #6
 80081e6:	4641      	mov	r1, r8
 80081e8:	1a51      	subs	r1, r2, r1
 80081ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80081ec:	4649      	mov	r1, r9
 80081ee:	eb63 0301 	sbc.w	r3, r3, r1
 80081f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008200:	4649      	mov	r1, r9
 8008202:	00cb      	lsls	r3, r1, #3
 8008204:	4641      	mov	r1, r8
 8008206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800820a:	4641      	mov	r1, r8
 800820c:	00ca      	lsls	r2, r1, #3
 800820e:	4610      	mov	r0, r2
 8008210:	4619      	mov	r1, r3
 8008212:	4603      	mov	r3, r0
 8008214:	4622      	mov	r2, r4
 8008216:	189b      	adds	r3, r3, r2
 8008218:	633b      	str	r3, [r7, #48]	@ 0x30
 800821a:	462b      	mov	r3, r5
 800821c:	460a      	mov	r2, r1
 800821e:	eb42 0303 	adc.w	r3, r2, r3
 8008222:	637b      	str	r3, [r7, #52]	@ 0x34
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008230:	4629      	mov	r1, r5
 8008232:	024b      	lsls	r3, r1, #9
 8008234:	4621      	mov	r1, r4
 8008236:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800823a:	4621      	mov	r1, r4
 800823c:	024a      	lsls	r2, r1, #9
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800824c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008250:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008254:	f7f8 fe96 	bl	8000f84 <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4613      	mov	r3, r2
 800825e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008262:	e067      	b.n	8008334 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008264:	4b75      	ldr	r3, [pc, #468]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	099b      	lsrs	r3, r3, #6
 800826a:	2200      	movs	r2, #0
 800826c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008270:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800827e:	2300      	movs	r3, #0
 8008280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008282:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008286:	4622      	mov	r2, r4
 8008288:	462b      	mov	r3, r5
 800828a:	f04f 0000 	mov.w	r0, #0
 800828e:	f04f 0100 	mov.w	r1, #0
 8008292:	0159      	lsls	r1, r3, #5
 8008294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008298:	0150      	lsls	r0, r2, #5
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4621      	mov	r1, r4
 80082a0:	1a51      	subs	r1, r2, r1
 80082a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80082a4:	4629      	mov	r1, r5
 80082a6:	eb63 0301 	sbc.w	r3, r3, r1
 80082aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	f04f 0300 	mov.w	r3, #0
 80082b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80082b8:	4649      	mov	r1, r9
 80082ba:	018b      	lsls	r3, r1, #6
 80082bc:	4641      	mov	r1, r8
 80082be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80082c2:	4641      	mov	r1, r8
 80082c4:	018a      	lsls	r2, r1, #6
 80082c6:	4641      	mov	r1, r8
 80082c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80082cc:	4649      	mov	r1, r9
 80082ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082e6:	4692      	mov	sl, r2
 80082e8:	469b      	mov	fp, r3
 80082ea:	4623      	mov	r3, r4
 80082ec:	eb1a 0303 	adds.w	r3, sl, r3
 80082f0:	623b      	str	r3, [r7, #32]
 80082f2:	462b      	mov	r3, r5
 80082f4:	eb4b 0303 	adc.w	r3, fp, r3
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	f04f 0300 	mov.w	r3, #0
 8008302:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8008306:	4629      	mov	r1, r5
 8008308:	028b      	lsls	r3, r1, #10
 800830a:	4621      	mov	r1, r4
 800830c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008310:	4621      	mov	r1, r4
 8008312:	028a      	lsls	r2, r1, #10
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800831c:	2200      	movs	r2, #0
 800831e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008320:	677a      	str	r2, [r7, #116]	@ 0x74
 8008322:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008326:	f7f8 fe2d 	bl	8000f84 <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4613      	mov	r3, r2
 8008330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008334:	4b41      	ldr	r3, [pc, #260]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	f003 0303 	and.w	r3, r3, #3
 800833e:	3301      	adds	r3, #1
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8008346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800834a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800834e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008352:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008356:	e0eb      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008358:	4b38      	ldr	r3, [pc, #224]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008360:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008364:	4b35      	ldr	r3, [pc, #212]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d06b      	beq.n	8008448 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008370:	4b32      	ldr	r3, [pc, #200]	@ (800843c <HAL_RCC_GetSysClockFreq+0x354>)
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	099b      	lsrs	r3, r3, #6
 8008376:	2200      	movs	r2, #0
 8008378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800837a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800837c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	663b      	str	r3, [r7, #96]	@ 0x60
 8008384:	2300      	movs	r3, #0
 8008386:	667b      	str	r3, [r7, #100]	@ 0x64
 8008388:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800838c:	4622      	mov	r2, r4
 800838e:	462b      	mov	r3, r5
 8008390:	f04f 0000 	mov.w	r0, #0
 8008394:	f04f 0100 	mov.w	r1, #0
 8008398:	0159      	lsls	r1, r3, #5
 800839a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800839e:	0150      	lsls	r0, r2, #5
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4621      	mov	r1, r4
 80083a6:	1a51      	subs	r1, r2, r1
 80083a8:	61b9      	str	r1, [r7, #24]
 80083aa:	4629      	mov	r1, r5
 80083ac:	eb63 0301 	sbc.w	r3, r3, r1
 80083b0:	61fb      	str	r3, [r7, #28]
 80083b2:	f04f 0200 	mov.w	r2, #0
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80083be:	4659      	mov	r1, fp
 80083c0:	018b      	lsls	r3, r1, #6
 80083c2:	4651      	mov	r1, sl
 80083c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083c8:	4651      	mov	r1, sl
 80083ca:	018a      	lsls	r2, r1, #6
 80083cc:	4651      	mov	r1, sl
 80083ce:	ebb2 0801 	subs.w	r8, r2, r1
 80083d2:	4659      	mov	r1, fp
 80083d4:	eb63 0901 	sbc.w	r9, r3, r1
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083ec:	4690      	mov	r8, r2
 80083ee:	4699      	mov	r9, r3
 80083f0:	4623      	mov	r3, r4
 80083f2:	eb18 0303 	adds.w	r3, r8, r3
 80083f6:	613b      	str	r3, [r7, #16]
 80083f8:	462b      	mov	r3, r5
 80083fa:	eb49 0303 	adc.w	r3, r9, r3
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f04f 0300 	mov.w	r3, #0
 8008408:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800840c:	4629      	mov	r1, r5
 800840e:	024b      	lsls	r3, r1, #9
 8008410:	4621      	mov	r1, r4
 8008412:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008416:	4621      	mov	r1, r4
 8008418:	024a      	lsls	r2, r1, #9
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008422:	2200      	movs	r2, #0
 8008424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008426:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8008428:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800842c:	f7f8 fdaa 	bl	8000f84 <__aeabi_uldivmod>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4613      	mov	r3, r2
 8008436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800843a:	e065      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x420>
 800843c:	40023800 	.word	0x40023800
 8008440:	00f42400 	.word	0x00f42400
 8008444:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008448:	4b3d      	ldr	r3, [pc, #244]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x458>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	099b      	lsrs	r3, r3, #6
 800844e:	2200      	movs	r2, #0
 8008450:	4618      	mov	r0, r3
 8008452:	4611      	mov	r1, r2
 8008454:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008458:	653b      	str	r3, [r7, #80]	@ 0x50
 800845a:	2300      	movs	r3, #0
 800845c:	657b      	str	r3, [r7, #84]	@ 0x54
 800845e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8008462:	4642      	mov	r2, r8
 8008464:	464b      	mov	r3, r9
 8008466:	f04f 0000 	mov.w	r0, #0
 800846a:	f04f 0100 	mov.w	r1, #0
 800846e:	0159      	lsls	r1, r3, #5
 8008470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008474:	0150      	lsls	r0, r2, #5
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4641      	mov	r1, r8
 800847c:	1a51      	subs	r1, r2, r1
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	4649      	mov	r1, r9
 8008482:	eb63 0301 	sbc.w	r3, r3, r1
 8008486:	60fb      	str	r3, [r7, #12]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8008494:	4659      	mov	r1, fp
 8008496:	018b      	lsls	r3, r1, #6
 8008498:	4651      	mov	r1, sl
 800849a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800849e:	4651      	mov	r1, sl
 80084a0:	018a      	lsls	r2, r1, #6
 80084a2:	4651      	mov	r1, sl
 80084a4:	1a54      	subs	r4, r2, r1
 80084a6:	4659      	mov	r1, fp
 80084a8:	eb63 0501 	sbc.w	r5, r3, r1
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	00eb      	lsls	r3, r5, #3
 80084b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80084ba:	00e2      	lsls	r2, r4, #3
 80084bc:	4614      	mov	r4, r2
 80084be:	461d      	mov	r5, r3
 80084c0:	4643      	mov	r3, r8
 80084c2:	18e3      	adds	r3, r4, r3
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	464b      	mov	r3, r9
 80084c8:	eb45 0303 	adc.w	r3, r5, r3
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	f04f 0200 	mov.w	r2, #0
 80084d2:	f04f 0300 	mov.w	r3, #0
 80084d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084da:	4629      	mov	r1, r5
 80084dc:	028b      	lsls	r3, r1, #10
 80084de:	4621      	mov	r1, r4
 80084e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084e4:	4621      	mov	r1, r4
 80084e6:	028a      	lsls	r2, r1, #10
 80084e8:	4610      	mov	r0, r2
 80084ea:	4619      	mov	r1, r3
 80084ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80084f0:	2200      	movs	r2, #0
 80084f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80084f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084fa:	f7f8 fd43 	bl	8000f84 <__aeabi_uldivmod>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4613      	mov	r3, r2
 8008504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008508:	4b0d      	ldr	r3, [pc, #52]	@ (8008540 <HAL_RCC_GetSysClockFreq+0x458>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	0f1b      	lsrs	r3, r3, #28
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8008516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800851a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800851e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008522:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008526:	e003      	b.n	8008530 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <HAL_RCC_GetSysClockFreq+0x45c>)
 800852a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800852e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008530:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8008534:	4618      	mov	r0, r3
 8008536:	37b8      	adds	r7, #184	@ 0xb8
 8008538:	46bd      	mov	sp, r7
 800853a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800853e:	bf00      	nop
 8008540:	40023800 	.word	0x40023800
 8008544:	00f42400 	.word	0x00f42400

08008548 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d101      	bne.n	800855a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e28d      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8083 	beq.w	800866e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008568:	4b94      	ldr	r3, [pc, #592]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 030c 	and.w	r3, r3, #12
 8008570:	2b04      	cmp	r3, #4
 8008572:	d019      	beq.n	80085a8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008574:	4b91      	ldr	r3, [pc, #580]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 030c 	and.w	r3, r3, #12
        || \
 800857c:	2b08      	cmp	r3, #8
 800857e:	d106      	bne.n	800858e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008580:	4b8e      	ldr	r3, [pc, #568]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800858c:	d00c      	beq.n	80085a8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800858e:	4b8b      	ldr	r3, [pc, #556]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8008596:	2b0c      	cmp	r3, #12
 8008598:	d112      	bne.n	80085c0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800859a:	4b88      	ldr	r3, [pc, #544]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80085a6:	d10b      	bne.n	80085c0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a8:	4b84      	ldr	r3, [pc, #528]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d05b      	beq.n	800866c <HAL_RCC_OscConfig+0x124>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d157      	bne.n	800866c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e25a      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c8:	d106      	bne.n	80085d8 <HAL_RCC_OscConfig+0x90>
 80085ca:	4b7c      	ldr	r3, [pc, #496]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7b      	ldr	r2, [pc, #492]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e01d      	b.n	8008614 <HAL_RCC_OscConfig+0xcc>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085e0:	d10c      	bne.n	80085fc <HAL_RCC_OscConfig+0xb4>
 80085e2:	4b76      	ldr	r3, [pc, #472]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a75      	ldr	r2, [pc, #468]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4b73      	ldr	r3, [pc, #460]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a72      	ldr	r2, [pc, #456]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	e00b      	b.n	8008614 <HAL_RCC_OscConfig+0xcc>
 80085fc:	4b6f      	ldr	r3, [pc, #444]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a6e      	ldr	r2, [pc, #440]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	4b6c      	ldr	r3, [pc, #432]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a6b      	ldr	r2, [pc, #428]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800860e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d013      	beq.n	8008644 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7fc fbd8 	bl	8004dd0 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008622:	e008      	b.n	8008636 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008624:	f7fc fbd4 	bl	8004dd0 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b64      	cmp	r3, #100	@ 0x64
 8008630:	d901      	bls.n	8008636 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e21f      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008636:	4b61      	ldr	r3, [pc, #388]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f0      	beq.n	8008624 <HAL_RCC_OscConfig+0xdc>
 8008642:	e014      	b.n	800866e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fc fbc4 	bl	8004dd0 <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800864c:	f7fc fbc0 	bl	8004dd0 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b64      	cmp	r3, #100	@ 0x64
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e20b      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800865e:	4b57      	ldr	r3, [pc, #348]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f0      	bne.n	800864c <HAL_RCC_OscConfig+0x104>
 800866a:	e000      	b.n	800866e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800866c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d06f      	beq.n	800875a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800867a:	4b50      	ldr	r3, [pc, #320]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
 8008682:	2b00      	cmp	r3, #0
 8008684:	d017      	beq.n	80086b6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008686:	4b4d      	ldr	r3, [pc, #308]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 030c 	and.w	r3, r3, #12
        || \
 800868e:	2b08      	cmp	r3, #8
 8008690:	d105      	bne.n	800869e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8008692:	4b4a      	ldr	r3, [pc, #296]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800869e:	4b47      	ldr	r3, [pc, #284]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d11c      	bne.n	80086e4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086aa:	4b44      	ldr	r3, [pc, #272]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d116      	bne.n	80086e4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086b6:	4b41      	ldr	r3, [pc, #260]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <HAL_RCC_OscConfig+0x186>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d001      	beq.n	80086ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e1d3      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086ce:	4b3b      	ldr	r3, [pc, #236]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4937      	ldr	r1, [pc, #220]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086e2:	e03a      	b.n	800875a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d020      	beq.n	800872e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086ec:	4b34      	ldr	r3, [pc, #208]	@ (80087c0 <HAL_RCC_OscConfig+0x278>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f2:	f7fc fb6d 	bl	8004dd0 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086f8:	e008      	b.n	800870c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086fa:	f7fc fb69 	bl	8004dd0 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e1b4      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870c:	4b2b      	ldr	r3, [pc, #172]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0f0      	beq.n	80086fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008718:	4b28      	ldr	r3, [pc, #160]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4925      	ldr	r1, [pc, #148]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008728:	4313      	orrs	r3, r2
 800872a:	600b      	str	r3, [r1, #0]
 800872c:	e015      	b.n	800875a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800872e:	4b24      	ldr	r3, [pc, #144]	@ (80087c0 <HAL_RCC_OscConfig+0x278>)
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fc fb4c 	bl	8004dd0 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800873c:	f7fc fb48 	bl	8004dd0 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e193      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874e:	4b1b      	ldr	r3, [pc, #108]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0302 	and.w	r3, r3, #2
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b00      	cmp	r3, #0
 8008764:	d036      	beq.n	80087d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	695b      	ldr	r3, [r3, #20]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800876e:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <HAL_RCC_OscConfig+0x27c>)
 8008770:	2201      	movs	r2, #1
 8008772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008774:	f7fc fb2c 	bl	8004dd0 <HAL_GetTick>
 8008778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800877c:	f7fc fb28 	bl	8004dd0 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e173      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800878e:	4b0b      	ldr	r3, [pc, #44]	@ (80087bc <HAL_RCC_OscConfig+0x274>)
 8008790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0x234>
 800879a:	e01b      	b.n	80087d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800879c:	4b09      	ldr	r3, [pc, #36]	@ (80087c4 <HAL_RCC_OscConfig+0x27c>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a2:	f7fc fb15 	bl	8004dd0 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087a8:	e00e      	b.n	80087c8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087aa:	f7fc fb11 	bl	8004dd0 <HAL_GetTick>
 80087ae:	4602      	mov	r2, r0
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d907      	bls.n	80087c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e15c      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
 80087bc:	40023800 	.word	0x40023800
 80087c0:	42470000 	.word	0x42470000
 80087c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087c8:	4b8a      	ldr	r3, [pc, #552]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ea      	bne.n	80087aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8097 	beq.w	8008910 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087e2:	2300      	movs	r3, #0
 80087e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087e6:	4b83      	ldr	r3, [pc, #524]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	4b7f      	ldr	r3, [pc, #508]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087fa:	4a7e      	ldr	r2, [pc, #504]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80087fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008800:	6413      	str	r3, [r2, #64]	@ 0x40
 8008802:	4b7c      	ldr	r3, [pc, #496]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800880a:	60bb      	str	r3, [r7, #8]
 800880c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008812:	4b79      	ldr	r3, [pc, #484]	@ (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d118      	bne.n	8008850 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800881e:	4b76      	ldr	r3, [pc, #472]	@ (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a75      	ldr	r2, [pc, #468]	@ (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800882a:	f7fc fad1 	bl	8004dd0 <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008832:	f7fc facd 	bl	8004dd0 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e118      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008844:	4b6c      	ldr	r3, [pc, #432]	@ (80089f8 <HAL_RCC_OscConfig+0x4b0>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b01      	cmp	r3, #1
 8008856:	d106      	bne.n	8008866 <HAL_RCC_OscConfig+0x31e>
 8008858:	4b66      	ldr	r3, [pc, #408]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800885c:	4a65      	ldr	r2, [pc, #404]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800885e:	f043 0301 	orr.w	r3, r3, #1
 8008862:	6713      	str	r3, [r2, #112]	@ 0x70
 8008864:	e01c      	b.n	80088a0 <HAL_RCC_OscConfig+0x358>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	2b05      	cmp	r3, #5
 800886c:	d10c      	bne.n	8008888 <HAL_RCC_OscConfig+0x340>
 800886e:	4b61      	ldr	r3, [pc, #388]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008872:	4a60      	ldr	r2, [pc, #384]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008874:	f043 0304 	orr.w	r3, r3, #4
 8008878:	6713      	str	r3, [r2, #112]	@ 0x70
 800887a:	4b5e      	ldr	r3, [pc, #376]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800887c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800887e:	4a5d      	ldr	r2, [pc, #372]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	6713      	str	r3, [r2, #112]	@ 0x70
 8008886:	e00b      	b.n	80088a0 <HAL_RCC_OscConfig+0x358>
 8008888:	4b5a      	ldr	r3, [pc, #360]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800888c:	4a59      	ldr	r2, [pc, #356]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	6713      	str	r3, [r2, #112]	@ 0x70
 8008894:	4b57      	ldr	r3, [pc, #348]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008898:	4a56      	ldr	r2, [pc, #344]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800889a:	f023 0304 	bic.w	r3, r3, #4
 800889e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d015      	beq.n	80088d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088a8:	f7fc fa92 	bl	8004dd0 <HAL_GetTick>
 80088ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088ae:	e00a      	b.n	80088c6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088b0:	f7fc fa8e 	bl	8004dd0 <HAL_GetTick>
 80088b4:	4602      	mov	r2, r0
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088be:	4293      	cmp	r3, r2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e0d7      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088c6:	4b4b      	ldr	r3, [pc, #300]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80088c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ee      	beq.n	80088b0 <HAL_RCC_OscConfig+0x368>
 80088d2:	e014      	b.n	80088fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d4:	f7fc fa7c 	bl	8004dd0 <HAL_GetTick>
 80088d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088da:	e00a      	b.n	80088f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088dc:	f7fc fa78 	bl	8004dd0 <HAL_GetTick>
 80088e0:	4602      	mov	r2, r0
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e0c1      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088f2:	4b40      	ldr	r3, [pc, #256]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80088f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1ee      	bne.n	80088dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d105      	bne.n	8008910 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008904:	4b3b      	ldr	r3, [pc, #236]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008908:	4a3a      	ldr	r2, [pc, #232]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800890a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800890e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80ad 	beq.w	8008a74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800891a:	4b36      	ldr	r3, [pc, #216]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f003 030c 	and.w	r3, r3, #12
 8008922:	2b08      	cmp	r3, #8
 8008924:	d060      	beq.n	80089e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b02      	cmp	r3, #2
 800892c:	d145      	bne.n	80089ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800892e:	4b33      	ldr	r3, [pc, #204]	@ (80089fc <HAL_RCC_OscConfig+0x4b4>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fc fa4c 	bl	8004dd0 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800893c:	f7fc fa48 	bl	8004dd0 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b02      	cmp	r3, #2
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e093      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800894e:	4b29      	ldr	r3, [pc, #164]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1f0      	bne.n	800893c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69da      	ldr	r2, [r3, #28]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008968:	019b      	lsls	r3, r3, #6
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008970:	085b      	lsrs	r3, r3, #1
 8008972:	3b01      	subs	r3, #1
 8008974:	041b      	lsls	r3, r3, #16
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897c:	061b      	lsls	r3, r3, #24
 800897e:	431a      	orrs	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008984:	071b      	lsls	r3, r3, #28
 8008986:	491b      	ldr	r1, [pc, #108]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 8008988:	4313      	orrs	r3, r2
 800898a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800898c:	4b1b      	ldr	r3, [pc, #108]	@ (80089fc <HAL_RCC_OscConfig+0x4b4>)
 800898e:	2201      	movs	r2, #1
 8008990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008992:	f7fc fa1d 	bl	8004dd0 <HAL_GetTick>
 8008996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008998:	e008      	b.n	80089ac <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800899a:	f7fc fa19 	bl	8004dd0 <HAL_GetTick>
 800899e:	4602      	mov	r2, r0
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d901      	bls.n	80089ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80089a8:	2303      	movs	r3, #3
 80089aa:	e064      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089ac:	4b11      	ldr	r3, [pc, #68]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0f0      	beq.n	800899a <HAL_RCC_OscConfig+0x452>
 80089b8:	e05c      	b.n	8008a74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ba:	4b10      	ldr	r3, [pc, #64]	@ (80089fc <HAL_RCC_OscConfig+0x4b4>)
 80089bc:	2200      	movs	r2, #0
 80089be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089c0:	f7fc fa06 	bl	8004dd0 <HAL_GetTick>
 80089c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089c6:	e008      	b.n	80089da <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089c8:	f7fc fa02 	bl	8004dd0 <HAL_GetTick>
 80089cc:	4602      	mov	r2, r0
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d901      	bls.n	80089da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e04d      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089da:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <HAL_RCC_OscConfig+0x4ac>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1f0      	bne.n	80089c8 <HAL_RCC_OscConfig+0x480>
 80089e6:	e045      	b.n	8008a74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	699b      	ldr	r3, [r3, #24]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d107      	bne.n	8008a00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e040      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
 80089f4:	40023800 	.word	0x40023800
 80089f8:	40007000 	.word	0x40007000
 80089fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a00:	4b1f      	ldr	r3, [pc, #124]	@ (8008a80 <HAL_RCC_OscConfig+0x538>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d030      	beq.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d129      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d122      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008a30:	4013      	ands	r3, r2
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d119      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a46:	085b      	lsrs	r3, r3, #1
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d10f      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d001      	beq.n	8008a74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e000      	b.n	8008a76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023800 	.word	0x40023800

08008a84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e073      	b.n	8008b7e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7f5b      	ldrb	r3, [r3, #29]
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d105      	bne.n	8008aac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fa fce0 	bl	800346c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b10      	cmp	r3, #16
 8008abe:	d055      	beq.n	8008b6c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	22ca      	movs	r2, #202	@ 0xca
 8008ac6:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2253      	movs	r2, #83	@ 0x53
 8008ace:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f87f 	bl	8008bd4 <RTC_EnterInitMode>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d12c      	bne.n	8008b3a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6812      	ldr	r2, [r2, #0]
 8008aea:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008aee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6899      	ldr	r1, [r3, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685a      	ldr	r2, [r3, #4]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	68d2      	ldr	r2, [r2, #12]
 8008b1a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6919      	ldr	r1, [r3, #16]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	041a      	lsls	r2, r3, #16
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	430a      	orrs	r2, r1
 8008b2e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f886 	bl	8008c42 <RTC_ExitInitMode>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d110      	bne.n	8008b62 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b4e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	22ff      	movs	r2, #255	@ 0xff
 8008b68:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b6a:	e001      	b.n	8008b70 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d102      	bne.n	8008b7c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
	...

08008b88 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd0 <HAL_RTC_WaitForSynchro+0x48>)
 8008b9a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b9c:	f7fc f918 	bl	8004dd0 <HAL_GetTick>
 8008ba0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ba2:	e009      	b.n	8008bb8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ba4:	f7fc f914 	bl	8004dd0 <HAL_GetTick>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bb2:	d901      	bls.n	8008bb8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e007      	b.n	8008bc8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0ee      	beq.n	8008ba4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	00017f5f 	.word	0x00017f5f

08008bd4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d122      	bne.n	8008c38 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008c00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c02:	f7fc f8e5 	bl	8004dd0 <HAL_GetTick>
 8008c06:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008c08:	e00c      	b.n	8008c24 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c0a:	f7fc f8e1 	bl	8004dd0 <HAL_GetTick>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c18:	d904      	bls.n	8008c24 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2204      	movs	r2, #4
 8008c1e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d102      	bne.n	8008c38 <RTC_EnterInitMode+0x64>
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d1e8      	bne.n	8008c0a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c5c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7ff ff8b 	bl	8008b88 <HAL_RTC_WaitForSynchro>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d004      	beq.n	8008c82 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2204      	movs	r2, #4
 8008c7c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e07b      	b.n	8008d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d108      	bne.n	8008cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cae:	d009      	beq.n	8008cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	61da      	str	r2, [r3, #28]
 8008cb6:	e005      	b.n	8008cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d106      	bne.n	8008ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fa fc5a 	bl	8003598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	431a      	orrs	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	431a      	orrs	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d3e:	431a      	orrs	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d48:	ea42 0103 	orr.w	r1, r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	0c1b      	lsrs	r3, r3, #16
 8008d62:	f003 0104 	and.w	r1, r3, #4
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6a:	f003 0210 	and.w	r2, r3, #16
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69da      	ldr	r2, [r3, #28]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d101      	bne.n	8008db0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e041      	b.n	8008e34 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d106      	bne.n	8008dca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7fa ffc1 	bl	8003d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f000 faab 	bl	8009338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d001      	beq.n	8008e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e04e      	b.n	8008ef2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0201 	orr.w	r2, r2, #1
 8008e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a23      	ldr	r2, [pc, #140]	@ (8008f00 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d022      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e7e:	d01d      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1f      	ldr	r2, [pc, #124]	@ (8008f04 <HAL_TIM_Base_Start_IT+0xc8>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8008f08 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1c      	ldr	r2, [pc, #112]	@ (8008f0c <HAL_TIM_Base_Start_IT+0xd0>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8008f10 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a19      	ldr	r2, [pc, #100]	@ (8008f14 <HAL_TIM_Base_Start_IT+0xd8>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIM_Base_Start_IT+0x80>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a18      	ldr	r2, [pc, #96]	@ (8008f18 <HAL_TIM_Base_Start_IT+0xdc>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d111      	bne.n	8008ee0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d010      	beq.n	8008ef0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0201 	orr.w	r2, r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ede:	e007      	b.n	8008ef0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0201 	orr.w	r2, r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40010000 	.word	0x40010000
 8008f04:	40000400 	.word	0x40000400
 8008f08:	40000800 	.word	0x40000800
 8008f0c:	40000c00 	.word	0x40000c00
 8008f10:	40010400 	.word	0x40010400
 8008f14:	40014000 	.word	0x40014000
 8008f18:	40001800 	.word	0x40001800

08008f1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
 8008f32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6a1a      	ldr	r2, [r3, #32]
 8008f3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008f3e:	4013      	ands	r3, r2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10f      	bne.n	8008f64 <HAL_TIM_Base_Stop_IT+0x48>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6a1a      	ldr	r2, [r3, #32]
 8008f4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8008f4e:	4013      	ands	r3, r2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <HAL_TIM_Base_Stop_IT+0x48>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0201 	bic.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	f003 0302 	and.w	r3, r3, #2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d020      	beq.n	8008fde <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01b      	beq.n	8008fde <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f06f 0202 	mvn.w	r2, #2
 8008fae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	f003 0303 	and.w	r3, r3, #3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f999 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8008fca:	e005      	b.n	8008fd8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f98b 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f99c 	bl	8009310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d020      	beq.n	800902a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01b      	beq.n	800902a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f06f 0204 	mvn.w	r2, #4
 8008ffa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 f973 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8009016:	e005      	b.n	8009024 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f965 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f976 	bl	8009310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	2b00      	cmp	r3, #0
 8009032:	d020      	beq.n	8009076 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 0308 	and.w	r3, r3, #8
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01b      	beq.n	8009076 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f06f 0208 	mvn.w	r2, #8
 8009046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2204      	movs	r2, #4
 800904c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f94d 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 8009062:	e005      	b.n	8009070 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f93f 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f950 	bl	8009310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	d020      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f003 0310 	and.w	r3, r3, #16
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01b      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f06f 0210 	mvn.w	r2, #16
 8009092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2208      	movs	r2, #8
 8009098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	69db      	ldr	r3, [r3, #28]
 80090a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f927 	bl	80092fc <HAL_TIM_IC_CaptureCallback>
 80090ae:	e005      	b.n	80090bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f919 	bl	80092e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f92a 	bl	8009310 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00c      	beq.n	80090e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d007      	beq.n	80090e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f06f 0201 	mvn.w	r2, #1
 80090de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7f9 fb93 	bl	800280c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00c      	beq.n	800910a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d007      	beq.n	800910a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fadd 	bl	80096c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00c      	beq.n	800912e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d007      	beq.n	800912e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f8fb 	bl	8009324 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00c      	beq.n	8009152 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d007      	beq.n	8009152 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f06f 0220 	mvn.w	r2, #32
 800914a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 faaf 	bl	80096b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b084      	sub	sp, #16
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916e:	2b01      	cmp	r3, #1
 8009170:	d101      	bne.n	8009176 <HAL_TIM_ConfigClockSource+0x1c>
 8009172:	2302      	movs	r3, #2
 8009174:	e0b4      	b.n	80092e0 <HAL_TIM_ConfigClockSource+0x186>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2202      	movs	r2, #2
 8009182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009194:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800919c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091ae:	d03e      	beq.n	800922e <HAL_TIM_ConfigClockSource+0xd4>
 80091b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b4:	f200 8087 	bhi.w	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091bc:	f000 8086 	beq.w	80092cc <HAL_TIM_ConfigClockSource+0x172>
 80091c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c4:	d87f      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091c6:	2b70      	cmp	r3, #112	@ 0x70
 80091c8:	d01a      	beq.n	8009200 <HAL_TIM_ConfigClockSource+0xa6>
 80091ca:	2b70      	cmp	r3, #112	@ 0x70
 80091cc:	d87b      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091ce:	2b60      	cmp	r3, #96	@ 0x60
 80091d0:	d050      	beq.n	8009274 <HAL_TIM_ConfigClockSource+0x11a>
 80091d2:	2b60      	cmp	r3, #96	@ 0x60
 80091d4:	d877      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091d6:	2b50      	cmp	r3, #80	@ 0x50
 80091d8:	d03c      	beq.n	8009254 <HAL_TIM_ConfigClockSource+0xfa>
 80091da:	2b50      	cmp	r3, #80	@ 0x50
 80091dc:	d873      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091de:	2b40      	cmp	r3, #64	@ 0x40
 80091e0:	d058      	beq.n	8009294 <HAL_TIM_ConfigClockSource+0x13a>
 80091e2:	2b40      	cmp	r3, #64	@ 0x40
 80091e4:	d86f      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091e6:	2b30      	cmp	r3, #48	@ 0x30
 80091e8:	d064      	beq.n	80092b4 <HAL_TIM_ConfigClockSource+0x15a>
 80091ea:	2b30      	cmp	r3, #48	@ 0x30
 80091ec:	d86b      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d060      	beq.n	80092b4 <HAL_TIM_ConfigClockSource+0x15a>
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d867      	bhi.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d05c      	beq.n	80092b4 <HAL_TIM_ConfigClockSource+0x15a>
 80091fa:	2b10      	cmp	r3, #16
 80091fc:	d05a      	beq.n	80092b4 <HAL_TIM_ConfigClockSource+0x15a>
 80091fe:	e062      	b.n	80092c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009210:	f000 f9b2 	bl	8009578 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009222:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	609a      	str	r2, [r3, #8]
      break;
 800922c:	e04f      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800923e:	f000 f99b 	bl	8009578 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009250:	609a      	str	r2, [r3, #8]
      break;
 8009252:	e03c      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009260:	461a      	mov	r2, r3
 8009262:	f000 f90f 	bl	8009484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2150      	movs	r1, #80	@ 0x50
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f968 	bl	8009542 <TIM_ITRx_SetConfig>
      break;
 8009272:	e02c      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009280:	461a      	mov	r2, r3
 8009282:	f000 f92e 	bl	80094e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2160      	movs	r1, #96	@ 0x60
 800928c:	4618      	mov	r0, r3
 800928e:	f000 f958 	bl	8009542 <TIM_ITRx_SetConfig>
      break;
 8009292:	e01c      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a0:	461a      	mov	r2, r3
 80092a2:	f000 f8ef 	bl	8009484 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2140      	movs	r1, #64	@ 0x40
 80092ac:	4618      	mov	r0, r3
 80092ae:	f000 f948 	bl	8009542 <TIM_ITRx_SetConfig>
      break;
 80092b2:	e00c      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f000 f93f 	bl	8009542 <TIM_ITRx_SetConfig>
      break;
 80092c4:	e003      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	73fb      	strb	r3, [r7, #15]
      break;
 80092ca:	e000      	b.n	80092ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009318:	bf00      	nop
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a43      	ldr	r2, [pc, #268]	@ (8009458 <TIM_Base_SetConfig+0x120>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d013      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009356:	d00f      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a40      	ldr	r2, [pc, #256]	@ (800945c <TIM_Base_SetConfig+0x124>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d00b      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a3f      	ldr	r2, [pc, #252]	@ (8009460 <TIM_Base_SetConfig+0x128>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d007      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a3e      	ldr	r2, [pc, #248]	@ (8009464 <TIM_Base_SetConfig+0x12c>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d003      	beq.n	8009378 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a3d      	ldr	r2, [pc, #244]	@ (8009468 <TIM_Base_SetConfig+0x130>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d108      	bne.n	800938a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800937e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	4313      	orrs	r3, r2
 8009388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a32      	ldr	r2, [pc, #200]	@ (8009458 <TIM_Base_SetConfig+0x120>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d02b      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009398:	d027      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a2f      	ldr	r2, [pc, #188]	@ (800945c <TIM_Base_SetConfig+0x124>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d023      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009460 <TIM_Base_SetConfig+0x128>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d01f      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a2d      	ldr	r2, [pc, #180]	@ (8009464 <TIM_Base_SetConfig+0x12c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d01b      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009468 <TIM_Base_SetConfig+0x130>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d017      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2b      	ldr	r2, [pc, #172]	@ (800946c <TIM_Base_SetConfig+0x134>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d013      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a2a      	ldr	r2, [pc, #168]	@ (8009470 <TIM_Base_SetConfig+0x138>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00f      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a29      	ldr	r2, [pc, #164]	@ (8009474 <TIM_Base_SetConfig+0x13c>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00b      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a28      	ldr	r2, [pc, #160]	@ (8009478 <TIM_Base_SetConfig+0x140>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d007      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a27      	ldr	r2, [pc, #156]	@ (800947c <TIM_Base_SetConfig+0x144>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d003      	beq.n	80093ea <TIM_Base_SetConfig+0xb2>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a26      	ldr	r2, [pc, #152]	@ (8009480 <TIM_Base_SetConfig+0x148>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d108      	bne.n	80093fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	689a      	ldr	r2, [r3, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a0e      	ldr	r2, [pc, #56]	@ (8009458 <TIM_Base_SetConfig+0x120>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d003      	beq.n	800942a <TIM_Base_SetConfig+0xf2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a10      	ldr	r2, [pc, #64]	@ (8009468 <TIM_Base_SetConfig+0x130>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d103      	bne.n	8009432 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	691a      	ldr	r2, [r3, #16]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f043 0204 	orr.w	r2, r3, #4
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40010000 	.word	0x40010000
 800945c:	40000400 	.word	0x40000400
 8009460:	40000800 	.word	0x40000800
 8009464:	40000c00 	.word	0x40000c00
 8009468:	40010400 	.word	0x40010400
 800946c:	40014000 	.word	0x40014000
 8009470:	40014400 	.word	0x40014400
 8009474:	40014800 	.word	0x40014800
 8009478:	40001800 	.word	0x40001800
 800947c:	40001c00 	.word	0x40001c00
 8009480:	40002000 	.word	0x40002000

08009484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a1b      	ldr	r3, [r3, #32]
 8009494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	f023 0201 	bic.w	r2, r3, #1
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	011b      	lsls	r3, r3, #4
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f023 030a 	bic.w	r3, r3, #10
 80094c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	621a      	str	r2, [r3, #32]
}
 80094d6:	bf00      	nop
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b087      	sub	sp, #28
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	f023 0210 	bic.w	r2, r3, #16
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800950c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	031b      	lsls	r3, r3, #12
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	4313      	orrs	r3, r2
 8009516:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800951e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	621a      	str	r2, [r3, #32]
}
 8009536:	bf00      	nop
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009542:	b480      	push	{r7}
 8009544:	b085      	sub	sp, #20
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800955a:	683a      	ldr	r2, [r7, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4313      	orrs	r3, r2
 8009560:	f043 0307 	orr.w	r3, r3, #7
 8009564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	609a      	str	r2, [r3, #8]
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	021a      	lsls	r2, r3, #8
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	431a      	orrs	r2, r3
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4313      	orrs	r3, r2
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	609a      	str	r2, [r3, #8]
}
 80095ac:	bf00      	nop
 80095ae:	371c      	adds	r7, #28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d101      	bne.n	80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095cc:	2302      	movs	r3, #2
 80095ce:	e05a      	b.n	8009686 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a21      	ldr	r2, [pc, #132]	@ (8009694 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d022      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961c:	d01d      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1d      	ldr	r2, [pc, #116]	@ (8009698 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d018      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1b      	ldr	r2, [pc, #108]	@ (800969c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1a      	ldr	r2, [pc, #104]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d00e      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d009      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a17      	ldr	r2, [pc, #92]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d004      	beq.n	800965a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a15      	ldr	r2, [pc, #84]	@ (80096ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10c      	bne.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	4313      	orrs	r3, r2
 800966a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40010000 	.word	0x40010000
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40001800 	.word	0x40001800

080096b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e042      	b.n	8009770 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fa fee6 	bl	80044d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2224      	movs	r2, #36	@ 0x24
 8009708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68da      	ldr	r2, [r3, #12]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800971a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 f8b7 	bl	800a890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691a      	ldr	r2, [r3, #16]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d101      	bne.n	800978a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e024      	b.n	80097d4 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2224      	movs	r2, #36	@ 0x24
 800978e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68da      	ldr	r2, [r3, #12]
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097a0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fb f81c 	bl	80047e0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b08a      	sub	sp, #40	@ 0x28
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4613      	mov	r3, r2
 80097ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d175      	bne.n	80098e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d002      	beq.n	8009808 <HAL_UART_Transmit+0x2c>
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e06e      	b.n	80098ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2221      	movs	r2, #33	@ 0x21
 8009816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800981a:	f7fb fad9 	bl	8004dd0 <HAL_GetTick>
 800981e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	88fa      	ldrh	r2, [r7, #6]
 8009824:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	88fa      	ldrh	r2, [r7, #6]
 800982a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009834:	d108      	bne.n	8009848 <HAL_UART_Transmit+0x6c>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e003      	b.n	8009850 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009850:	e02e      	b.n	80098b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2180      	movs	r1, #128	@ 0x80
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fd55 	bl	800a30c <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e03a      	b.n	80098ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10b      	bne.n	8009892 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	3302      	adds	r3, #2
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e007      	b.n	80098a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	781a      	ldrb	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	3301      	adds	r3, #1
 80098a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1cb      	bne.n	8009852 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2200      	movs	r2, #0
 80098c2:	2140      	movs	r1, #64	@ 0x40
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 fd21 	bl	800a30c <UART_WaitOnFlagUntilTimeout>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2220      	movs	r2, #32
 80098d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e006      	b.n	80098ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2220      	movs	r2, #32
 80098e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e000      	b.n	80098ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b08a      	sub	sp, #40	@ 0x28
 80098f6:	af02      	add	r7, sp, #8
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	603b      	str	r3, [r7, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b20      	cmp	r3, #32
 8009910:	f040 8081 	bne.w	8009a16 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d002      	beq.n	8009920 <HAL_UART_Receive+0x2e>
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d101      	bne.n	8009924 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e079      	b.n	8009a18 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2222      	movs	r2, #34	@ 0x22
 800992e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009938:	f7fb fa4a 	bl	8004dd0 <HAL_GetTick>
 800993c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	88fa      	ldrh	r2, [r7, #6]
 8009942:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	88fa      	ldrh	r2, [r7, #6]
 8009948:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009952:	d108      	bne.n	8009966 <HAL_UART_Receive+0x74>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800995c:	2300      	movs	r3, #0
 800995e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	e003      	b.n	800996e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800996a:	2300      	movs	r3, #0
 800996c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800996e:	e047      	b.n	8009a00 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	9300      	str	r3, [sp, #0]
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2200      	movs	r2, #0
 8009978:	2120      	movs	r1, #32
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fcc6 	bl	800a30c <UART_WaitOnFlagUntilTimeout>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2220      	movs	r2, #32
 800998a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800998e:	2303      	movs	r3, #3
 8009990:	e042      	b.n	8009a18 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d10c      	bne.n	80099b2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	3302      	adds	r3, #2
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	e01f      	b.n	80099f2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099ba:	d007      	beq.n	80099cc <HAL_UART_Receive+0xda>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10a      	bne.n	80099da <HAL_UART_Receive+0xe8>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d106      	bne.n	80099da <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	b2da      	uxtb	r2, r3
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	701a      	strb	r2, [r3, #0]
 80099d8:	e008      	b.n	80099ec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099e6:	b2da      	uxtb	r2, r3
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	3301      	adds	r3, #1
 80099f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1b2      	bne.n	8009970 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2220      	movs	r2, #32
 8009a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e000      	b.n	8009a18 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8009a16:	2302      	movs	r3, #2
  }
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3720      	adds	r7, #32
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d112      	bne.n	8009a60 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <HAL_UART_Receive_DMA+0x26>
 8009a40:	88fb      	ldrh	r3, [r7, #6]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e00b      	b.n	8009a62 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009a50:	88fb      	ldrh	r3, [r7, #6]
 8009a52:	461a      	mov	r2, r3
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 fcb2 	bl	800a3c0 <UART_Start_Receive_DMA>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	e000      	b.n	8009a62 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009a60:	2302      	movs	r3, #2
  }
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b090      	sub	sp, #64	@ 0x40
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	695b      	ldr	r3, [r3, #20]
 8009a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a80:	2b80      	cmp	r3, #128	@ 0x80
 8009a82:	bf0c      	ite	eq
 8009a84:	2301      	moveq	r3, #1
 8009a86:	2300      	movne	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b21      	cmp	r3, #33	@ 0x21
 8009a96:	d128      	bne.n	8009aea <HAL_UART_DMAStop+0x80>
 8009a98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d025      	beq.n	8009aea <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3314      	adds	r3, #20
 8009aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	623b      	str	r3, [r7, #32]
   return(result);
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3314      	adds	r3, #20
 8009abc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009abe:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e5      	bne.n	8009a9e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d004      	beq.n	8009ae4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fc f82a 	bl	8005b38 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fd11 	bl	800a50c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af4:	2b40      	cmp	r3, #64	@ 0x40
 8009af6:	bf0c      	ite	eq
 8009af8:	2301      	moveq	r3, #1
 8009afa:	2300      	movne	r3, #0
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b22      	cmp	r3, #34	@ 0x22
 8009b0a:	d128      	bne.n	8009b5e <HAL_UART_DMAStop+0xf4>
 8009b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d025      	beq.n	8009b5e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	3314      	adds	r3, #20
 8009b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3314      	adds	r3, #20
 8009b30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b32:	61fa      	str	r2, [r7, #28]
 8009b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	69b9      	ldr	r1, [r7, #24]
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e5      	bne.n	8009b12 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d004      	beq.n	8009b58 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fb fff0 	bl	8005b38 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fcff 	bl	800a55c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3740      	adds	r7, #64	@ 0x40
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	f003 030f 	and.w	r3, r3, #15
 8009ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10f      	bne.n	8009bce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb2:	f003 0320 	and.w	r3, r3, #32
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d009      	beq.n	8009bce <HAL_UART_IRQHandler+0x66>
 8009bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bbe:	f003 0320 	and.w	r3, r3, #32
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fda4 	bl	800a714 <UART_Receive_IT>
      return;
 8009bcc:	e273      	b.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	f000 80de 	beq.w	8009d94 <HAL_UART_IRQHandler+0x22c>
 8009bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bdc:	f003 0301 	and.w	r3, r3, #1
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d106      	bne.n	8009bf2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009be8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 80d1 	beq.w	8009d94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00b      	beq.n	8009c16 <HAL_UART_IRQHandler+0xae>
 8009bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d005      	beq.n	8009c16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c0e:	f043 0201 	orr.w	r2, r3, #1
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c1a:	f003 0304 	and.w	r3, r3, #4
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00b      	beq.n	8009c3a <HAL_UART_IRQHandler+0xd2>
 8009c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d005      	beq.n	8009c3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c32:	f043 0202 	orr.w	r2, r3, #2
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c3e:	f003 0302 	and.w	r3, r3, #2
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00b      	beq.n	8009c5e <HAL_UART_IRQHandler+0xf6>
 8009c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c56:	f043 0204 	orr.w	r2, r3, #4
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c62:	f003 0308 	and.w	r3, r3, #8
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d011      	beq.n	8009c8e <HAL_UART_IRQHandler+0x126>
 8009c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6e:	f003 0320 	and.w	r3, r3, #32
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d105      	bne.n	8009c82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c86:	f043 0208 	orr.w	r2, r3, #8
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 820a 	beq.w	800a0ac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d008      	beq.n	8009cb6 <HAL_UART_IRQHandler+0x14e>
 8009ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fd2f 	bl	800a714 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc0:	2b40      	cmp	r3, #64	@ 0x40
 8009cc2:	bf0c      	ite	eq
 8009cc4:	2301      	moveq	r3, #1
 8009cc6:	2300      	movne	r3, #0
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd2:	f003 0308 	and.w	r3, r3, #8
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <HAL_UART_IRQHandler+0x17a>
 8009cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d04f      	beq.n	8009d82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fc3a 	bl	800a55c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf2:	2b40      	cmp	r3, #64	@ 0x40
 8009cf4:	d141      	bne.n	8009d7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3314      	adds	r3, #20
 8009cfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3314      	adds	r3, #20
 8009d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1d9      	bne.n	8009cf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d013      	beq.n	8009d72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d4e:	4a8a      	ldr	r2, [pc, #552]	@ (8009f78 <HAL_UART_IRQHandler+0x410>)
 8009d50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fb ff5e 	bl	8005c18 <HAL_DMA_Abort_IT>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d016      	beq.n	8009d90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d70:	e00e      	b.n	8009d90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f9b6 	bl	800a0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d78:	e00a      	b.n	8009d90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f9b2 	bl	800a0e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d80:	e006      	b.n	8009d90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f9ae 	bl	800a0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009d8e:	e18d      	b.n	800a0ac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d90:	bf00      	nop
    return;
 8009d92:	e18b      	b.n	800a0ac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	f040 8167 	bne.w	800a06c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8160 	beq.w	800a06c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f000 8159 	beq.w	800a06c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60bb      	str	r3, [r7, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	60bb      	str	r3, [r7, #8]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	60bb      	str	r3, [r7, #8]
 8009dce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dda:	2b40      	cmp	r3, #64	@ 0x40
 8009ddc:	f040 80ce 	bne.w	8009f7c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 80a9 	beq.w	8009f48 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	f080 80a2 	bcs.w	8009f48 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e10:	69db      	ldr	r3, [r3, #28]
 8009e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e16:	f000 8088 	beq.w	8009f2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	330c      	adds	r3, #12
 8009e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e28:	e853 3f00 	ldrex	r3, [r3]
 8009e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	330c      	adds	r3, #12
 8009e42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e56:	e841 2300 	strex	r3, r2, [r1]
 8009e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1d9      	bne.n	8009e1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	3314      	adds	r3, #20
 8009e6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e70:	e853 3f00 	ldrex	r3, [r3]
 8009e74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e78:	f023 0301 	bic.w	r3, r3, #1
 8009e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3314      	adds	r3, #20
 8009e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e1      	bne.n	8009e66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3314      	adds	r3, #20
 8009ea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eac:	e853 3f00 	ldrex	r3, [r3]
 8009eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3314      	adds	r3, #20
 8009ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ec6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009ecc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1e3      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	330c      	adds	r3, #12
 8009eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef2:	e853 3f00 	ldrex	r3, [r3]
 8009ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009efa:	f023 0310 	bic.w	r3, r3, #16
 8009efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	330c      	adds	r3, #12
 8009f08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e3      	bne.n	8009ee8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fb fe07 	bl	8005b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f8d9 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f46:	e0b3      	b.n	800a0b0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f50:	429a      	cmp	r2, r3
 8009f52:	f040 80ad 	bne.w	800a0b0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f60:	f040 80a6 	bne.w	800a0b0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2202      	movs	r2, #2
 8009f68:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f6e:	4619      	mov	r1, r3
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 f8c1 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
      return;
 8009f76:	e09b      	b.n	800a0b0 <HAL_UART_IRQHandler+0x548>
 8009f78:	0800a623 	.word	0x0800a623
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	f000 808e 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 8089 	beq.w	800a0b4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	330c      	adds	r3, #12
 8009fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fac:	e853 3f00 	ldrex	r3, [r3]
 8009fb0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009fc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fce:	e841 2300 	strex	r3, r2, [r1]
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d1e3      	bne.n	8009fa2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	3314      	adds	r3, #20
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fe4:	e853 3f00 	ldrex	r3, [r3]
 8009fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	f023 0301 	bic.w	r3, r3, #1
 8009ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009ffe:	633a      	str	r2, [r7, #48]	@ 0x30
 800a000:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e3      	bne.n	8009fda <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2220      	movs	r2, #32
 800a016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	330c      	adds	r3, #12
 800a026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f023 0310 	bic.w	r3, r3, #16
 800a036:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a044:	61fa      	str	r2, [r7, #28]
 800a046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a048:	69b9      	ldr	r1, [r7, #24]
 800a04a:	69fa      	ldr	r2, [r7, #28]
 800a04c:	e841 2300 	strex	r3, r2, [r1]
 800a050:	617b      	str	r3, [r7, #20]
   return(result);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d1e3      	bne.n	800a020 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a05e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f847 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a06a:	e023      	b.n	800a0b4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a074:	2b00      	cmp	r3, #0
 800a076:	d009      	beq.n	800a08c <HAL_UART_IRQHandler+0x524>
 800a078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a07c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a080:	2b00      	cmp	r3, #0
 800a082:	d003      	beq.n	800a08c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fadd 	bl	800a644 <UART_Transmit_IT>
    return;
 800a08a:	e014      	b.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00e      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
 800a098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d008      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fb1d 	bl	800a6e4 <UART_EndTransmit_IT>
    return;
 800a0aa:	e004      	b.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
    return;
 800a0ac:	bf00      	nop
 800a0ae:	e002      	b.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
      return;
 800a0b0:	bf00      	nop
 800a0b2:	e000      	b.n	800a0b6 <HAL_UART_IRQHandler+0x54e>
      return;
 800a0b4:	bf00      	nop
  }
}
 800a0b6:	37e8      	adds	r7, #232	@ 0xe8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	460b      	mov	r3, r1
 800a102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b09c      	sub	sp, #112	@ 0x70
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d172      	bne.n	800a212 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a12c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a12e:	2200      	movs	r2, #0
 800a130:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	330c      	adds	r3, #12
 800a138:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a13a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a13c:	e853 3f00 	ldrex	r3, [r3]
 800a140:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a148:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a14a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	330c      	adds	r3, #12
 800a150:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a152:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a154:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a156:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a158:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a15a:	e841 2300 	strex	r3, r2, [r1]
 800a15e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a162:	2b00      	cmp	r3, #0
 800a164:	d1e5      	bne.n	800a132 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	3314      	adds	r3, #20
 800a16c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a170:	e853 3f00 	ldrex	r3, [r3]
 800a174:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a178:	f023 0301 	bic.w	r3, r3, #1
 800a17c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a17e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3314      	adds	r3, #20
 800a184:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a186:	647a      	str	r2, [r7, #68]	@ 0x44
 800a188:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a18c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1e5      	bne.n	800a166 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a19a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3314      	adds	r3, #20
 800a1a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	e853 3f00 	ldrex	r3, [r3]
 800a1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a1b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3314      	adds	r3, #20
 800a1b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a1ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e5      	bne.n	800a19a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d119      	bne.n	800a212 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	330c      	adds	r3, #12
 800a1e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	e853 3f00 	ldrex	r3, [r3]
 800a1ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f023 0310 	bic.w	r3, r3, #16
 800a1f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a1f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	330c      	adds	r3, #12
 800a1fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a1fe:	61fa      	str	r2, [r7, #28]
 800a200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	69b9      	ldr	r1, [r7, #24]
 800a204:	69fa      	ldr	r2, [r7, #28]
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	617b      	str	r3, [r7, #20]
   return(result);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e5      	bne.n	800a1de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a214:	2200      	movs	r2, #0
 800a216:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a21a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d106      	bne.n	800a22e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a222:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a224:	4619      	mov	r1, r3
 800a226:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a228:	f7ff ff66 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a22c:	e002      	b.n	800a234 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800a22e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a230:	f7fa fb54 	bl	80048dc <HAL_UART_RxCpltCallback>
}
 800a234:	bf00      	nop
 800a236:	3770      	adds	r7, #112	@ 0x70
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a254:	2b01      	cmp	r3, #1
 800a256:	d108      	bne.n	800a26a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a25c:	085b      	lsrs	r3, r3, #1
 800a25e:	b29b      	uxth	r3, r3
 800a260:	4619      	mov	r1, r3
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f7ff ff48 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a268:	e002      	b.n	800a270 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff ff30 	bl	800a0d0 <HAL_UART_RxHalfCpltCallback>
}
 800a270:	bf00      	nop
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a288:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a294:	2b80      	cmp	r3, #128	@ 0x80
 800a296:	bf0c      	ite	eq
 800a298:	2301      	moveq	r3, #1
 800a29a:	2300      	movne	r3, #0
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b21      	cmp	r3, #33	@ 0x21
 800a2aa:	d108      	bne.n	800a2be <UART_DMAError+0x46>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d005      	beq.n	800a2be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a2b8:	68b8      	ldr	r0, [r7, #8]
 800a2ba:	f000 f927 	bl	800a50c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ca:	bf0c      	ite	eq
 800a2cc:	2301      	moveq	r3, #1
 800a2ce:	2300      	movne	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b22      	cmp	r3, #34	@ 0x22
 800a2de:	d108      	bne.n	800a2f2 <UART_DMAError+0x7a>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d005      	beq.n	800a2f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a2ec:	68b8      	ldr	r0, [r7, #8]
 800a2ee:	f000 f935 	bl	800a55c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2f6:	f043 0210 	orr.w	r2, r3, #16
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2fe:	68b8      	ldr	r0, [r7, #8]
 800a300:	f7ff fef0 	bl	800a0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a304:	bf00      	nop
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	4613      	mov	r3, r2
 800a31a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a31c:	e03b      	b.n	800a396 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a31e:	6a3b      	ldr	r3, [r7, #32]
 800a320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a324:	d037      	beq.n	800a396 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a326:	f7fa fd53 	bl	8004dd0 <HAL_GetTick>
 800a32a:	4602      	mov	r2, r0
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	1ad3      	subs	r3, r2, r3
 800a330:	6a3a      	ldr	r2, [r7, #32]
 800a332:	429a      	cmp	r2, r3
 800a334:	d302      	bcc.n	800a33c <UART_WaitOnFlagUntilTimeout+0x30>
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e03a      	b.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f003 0304 	and.w	r3, r3, #4
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d023      	beq.n	800a396 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b80      	cmp	r3, #128	@ 0x80
 800a352:	d020      	beq.n	800a396 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b40      	cmp	r3, #64	@ 0x40
 800a358:	d01d      	beq.n	800a396 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0308 	and.w	r3, r3, #8
 800a364:	2b08      	cmp	r3, #8
 800a366:	d116      	bne.n	800a396 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a368:	2300      	movs	r3, #0
 800a36a:	617b      	str	r3, [r7, #20]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f000 f8ec 	bl	800a55c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2208      	movs	r2, #8
 800a388:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a392:	2301      	movs	r3, #1
 800a394:	e00f      	b.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	bf0c      	ite	eq
 800a3a6:	2301      	moveq	r3, #1
 800a3a8:	2300      	movne	r3, #0
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d0b4      	beq.n	800a31e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b098      	sub	sp, #96	@ 0x60
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	88fa      	ldrh	r2, [r7, #6]
 800a3d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2222      	movs	r2, #34	@ 0x22
 800a3e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ec:	4a44      	ldr	r2, [pc, #272]	@ (800a500 <UART_Start_Receive_DMA+0x140>)
 800a3ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f4:	4a43      	ldr	r2, [pc, #268]	@ (800a504 <UART_Start_Receive_DMA+0x144>)
 800a3f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3fc:	4a42      	ldr	r2, [pc, #264]	@ (800a508 <UART_Start_Receive_DMA+0x148>)
 800a3fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a404:	2200      	movs	r2, #0
 800a406:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a408:	f107 0308 	add.w	r3, r7, #8
 800a40c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	f7fb fb32 	bl	8005a88 <HAL_DMA_Start_IT>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d008      	beq.n	800a43c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2210      	movs	r2, #16
 800a42e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e05d      	b.n	800a4f8 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a43c:	2300      	movs	r3, #0
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	613b      	str	r3, [r7, #16]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d019      	beq.n	800a48e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	330c      	adds	r3, #12
 800a460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a46c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a470:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	330c      	adds	r3, #12
 800a478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a47a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a47c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e5      	bne.n	800a45a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3314      	adds	r3, #20
 800a494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	f043 0301 	orr.w	r3, r3, #1
 800a4a4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3314      	adds	r3, #20
 800a4ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a4b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a4b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	3314      	adds	r3, #20
 800a4c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3314      	adds	r3, #20
 800a4e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a4e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	6a39      	ldr	r1, [r7, #32]
 800a4e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e5      	bne.n	800a4c2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3760      	adds	r7, #96	@ 0x60
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	0800a111 	.word	0x0800a111
 800a504:	0800a23d 	.word	0x0800a23d
 800a508:	0800a279 	.word	0x0800a279

0800a50c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b089      	sub	sp, #36	@ 0x24
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	330c      	adds	r3, #12
 800a51a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	e853 3f00 	ldrex	r3, [r3]
 800a522:	60bb      	str	r3, [r7, #8]
   return(result);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a52a:	61fb      	str	r3, [r7, #28]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	330c      	adds	r3, #12
 800a532:	69fa      	ldr	r2, [r7, #28]
 800a534:	61ba      	str	r2, [r7, #24]
 800a536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a538:	6979      	ldr	r1, [r7, #20]
 800a53a:	69ba      	ldr	r2, [r7, #24]
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	613b      	str	r3, [r7, #16]
   return(result);
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e5      	bne.n	800a514 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2220      	movs	r2, #32
 800a54c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800a550:	bf00      	nop
 800a552:	3724      	adds	r7, #36	@ 0x24
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b095      	sub	sp, #84	@ 0x54
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	330c      	adds	r3, #12
 800a56a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a57a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	330c      	adds	r3, #12
 800a582:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a584:	643a      	str	r2, [r7, #64]	@ 0x40
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a58a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e5      	bne.n	800a564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3314      	adds	r3, #20
 800a59e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	e853 3f00 	ldrex	r3, [r3]
 800a5a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f023 0301 	bic.w	r3, r3, #1
 800a5ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3314      	adds	r3, #20
 800a5b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e5      	bne.n	800a598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d119      	bne.n	800a608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	330c      	adds	r3, #12
 800a5da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	e853 3f00 	ldrex	r3, [r3]
 800a5e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	f023 0310 	bic.w	r3, r3, #16
 800a5ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5f4:	61ba      	str	r2, [r7, #24]
 800a5f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	6979      	ldr	r1, [r7, #20]
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	e841 2300 	strex	r3, r2, [r1]
 800a600:	613b      	str	r3, [r7, #16]
   return(result);
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e5      	bne.n	800a5d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a616:	bf00      	nop
 800a618:	3754      	adds	r7, #84	@ 0x54
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b084      	sub	sp, #16
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a62e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fd54 	bl	800a0e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a63c:	bf00      	nop
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a644:	b480      	push	{r7}
 800a646:	b085      	sub	sp, #20
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b21      	cmp	r3, #33	@ 0x21
 800a656:	d13e      	bne.n	800a6d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a660:	d114      	bne.n	800a68c <UART_Transmit_IT+0x48>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	691b      	ldr	r3, [r3, #16]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d110      	bne.n	800a68c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a1b      	ldr	r3, [r3, #32]
 800a66e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	881b      	ldrh	r3, [r3, #0]
 800a674:	461a      	mov	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a67e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	1c9a      	adds	r2, r3, #2
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	621a      	str	r2, [r3, #32]
 800a68a:	e008      	b.n	800a69e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	1c59      	adds	r1, r3, #1
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	6211      	str	r1, [r2, #32]
 800a696:	781a      	ldrb	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	687a      	ldr	r2, [r7, #4]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d10f      	bne.n	800a6d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68da      	ldr	r2, [r3, #12]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a6d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e000      	b.n	800a6d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a6d6:	2302      	movs	r3, #2
  }
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68da      	ldr	r2, [r3, #12]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a6fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2220      	movs	r2, #32
 800a700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f7ff fcd9 	bl	800a0bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08c      	sub	sp, #48	@ 0x30
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a71c:	2300      	movs	r3, #0
 800a71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b22      	cmp	r3, #34	@ 0x22
 800a72e:	f040 80aa 	bne.w	800a886 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	689b      	ldr	r3, [r3, #8]
 800a736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a73a:	d115      	bne.n	800a768 <UART_Receive_IT+0x54>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d111      	bne.n	800a768 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a748:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	b29b      	uxth	r3, r3
 800a752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a756:	b29a      	uxth	r2, r3
 800a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a760:	1c9a      	adds	r2, r3, #2
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	629a      	str	r2, [r3, #40]	@ 0x28
 800a766:	e024      	b.n	800a7b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a76c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a776:	d007      	beq.n	800a788 <UART_Receive_IT+0x74>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10a      	bne.n	800a796 <UART_Receive_IT+0x82>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a792:	701a      	strb	r2, [r3, #0]
 800a794:	e008      	b.n	800a7a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ac:	1c5a      	adds	r2, r3, #1
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d15d      	bne.n	800a882 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68da      	ldr	r2, [r3, #12]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f022 0220 	bic.w	r2, r2, #32
 800a7d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a7e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695a      	ldr	r2, [r3, #20]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f022 0201 	bic.w	r2, r2, #1
 800a7f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d135      	bne.n	800a878 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	330c      	adds	r3, #12
 800a818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	e853 3f00 	ldrex	r3, [r3]
 800a820:	613b      	str	r3, [r7, #16]
   return(result);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f023 0310 	bic.w	r3, r3, #16
 800a828:	627b      	str	r3, [r7, #36]	@ 0x24
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	330c      	adds	r3, #12
 800a830:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a832:	623a      	str	r2, [r7, #32]
 800a834:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	69f9      	ldr	r1, [r7, #28]
 800a838:	6a3a      	ldr	r2, [r7, #32]
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e5      	bne.n	800a812 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b10      	cmp	r3, #16
 800a852:	d10a      	bne.n	800a86a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff fc41 	bl	800a0f8 <HAL_UARTEx_RxEventCallback>
 800a876:	e002      	b.n	800a87e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f7fa f82f 	bl	80048dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	e002      	b.n	800a888 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	e000      	b.n	800a888 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a886:	2302      	movs	r3, #2
  }
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3730      	adds	r7, #48	@ 0x30
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a894:	b0c0      	sub	sp, #256	@ 0x100
 800a896:	af00      	add	r7, sp, #0
 800a898:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8ac:	68d9      	ldr	r1, [r3, #12]
 800a8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	ea40 0301 	orr.w	r3, r0, r1
 800a8b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8be:	689a      	ldr	r2, [r3, #8]
 800a8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a8e8:	f021 010c 	bic.w	r1, r1, #12
 800a8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8f6:	430b      	orrs	r3, r1
 800a8f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a8fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	695b      	ldr	r3, [r3, #20]
 800a902:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a90a:	6999      	ldr	r1, [r3, #24]
 800a90c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	ea40 0301 	orr.w	r3, r0, r1
 800a916:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	4b8f      	ldr	r3, [pc, #572]	@ (800ab5c <UART_SetConfig+0x2cc>)
 800a920:	429a      	cmp	r2, r3
 800a922:	d005      	beq.n	800a930 <UART_SetConfig+0xa0>
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4b8d      	ldr	r3, [pc, #564]	@ (800ab60 <UART_SetConfig+0x2d0>)
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d104      	bne.n	800a93a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a930:	f7fd f89c 	bl	8007a6c <HAL_RCC_GetPCLK2Freq>
 800a934:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a938:	e003      	b.n	800a942 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a93a:	f7fd f883 	bl	8007a44 <HAL_RCC_GetPCLK1Freq>
 800a93e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a94c:	f040 810c 	bne.w	800ab68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a954:	2200      	movs	r2, #0
 800a956:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a95a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a95e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a962:	4622      	mov	r2, r4
 800a964:	462b      	mov	r3, r5
 800a966:	1891      	adds	r1, r2, r2
 800a968:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a96a:	415b      	adcs	r3, r3
 800a96c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a96e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a972:	4621      	mov	r1, r4
 800a974:	eb12 0801 	adds.w	r8, r2, r1
 800a978:	4629      	mov	r1, r5
 800a97a:	eb43 0901 	adc.w	r9, r3, r1
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	f04f 0300 	mov.w	r3, #0
 800a986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a98a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a98e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a992:	4690      	mov	r8, r2
 800a994:	4699      	mov	r9, r3
 800a996:	4623      	mov	r3, r4
 800a998:	eb18 0303 	adds.w	r3, r8, r3
 800a99c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	eb49 0303 	adc.w	r3, r9, r3
 800a9a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a9ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a9be:	460b      	mov	r3, r1
 800a9c0:	18db      	adds	r3, r3, r3
 800a9c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	eb42 0303 	adc.w	r3, r2, r3
 800a9ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a9d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a9d4:	f7f6 fad6 	bl	8000f84 <__aeabi_uldivmod>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4b61      	ldr	r3, [pc, #388]	@ (800ab64 <UART_SetConfig+0x2d4>)
 800a9de:	fba3 2302 	umull	r2, r3, r3, r2
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	011c      	lsls	r4, r3, #4
 800a9e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a9f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a9f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a9f8:	4642      	mov	r2, r8
 800a9fa:	464b      	mov	r3, r9
 800a9fc:	1891      	adds	r1, r2, r2
 800a9fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aa00:	415b      	adcs	r3, r3
 800aa02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aa08:	4641      	mov	r1, r8
 800aa0a:	eb12 0a01 	adds.w	sl, r2, r1
 800aa0e:	4649      	mov	r1, r9
 800aa10:	eb43 0b01 	adc.w	fp, r3, r1
 800aa14:	f04f 0200 	mov.w	r2, #0
 800aa18:	f04f 0300 	mov.w	r3, #0
 800aa1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa28:	4692      	mov	sl, r2
 800aa2a:	469b      	mov	fp, r3
 800aa2c:	4643      	mov	r3, r8
 800aa2e:	eb1a 0303 	adds.w	r3, sl, r3
 800aa32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa36:	464b      	mov	r3, r9
 800aa38:	eb4b 0303 	adc.w	r3, fp, r3
 800aa3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aa40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aa50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aa54:	460b      	mov	r3, r1
 800aa56:	18db      	adds	r3, r3, r3
 800aa58:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	eb42 0303 	adc.w	r3, r2, r3
 800aa60:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aa66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa6a:	f7f6 fa8b 	bl	8000f84 <__aeabi_uldivmod>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	460b      	mov	r3, r1
 800aa72:	4611      	mov	r1, r2
 800aa74:	4b3b      	ldr	r3, [pc, #236]	@ (800ab64 <UART_SetConfig+0x2d4>)
 800aa76:	fba3 2301 	umull	r2, r3, r3, r1
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	2264      	movs	r2, #100	@ 0x64
 800aa7e:	fb02 f303 	mul.w	r3, r2, r3
 800aa82:	1acb      	subs	r3, r1, r3
 800aa84:	00db      	lsls	r3, r3, #3
 800aa86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa8a:	4b36      	ldr	r3, [pc, #216]	@ (800ab64 <UART_SetConfig+0x2d4>)
 800aa8c:	fba3 2302 	umull	r2, r3, r3, r2
 800aa90:	095b      	lsrs	r3, r3, #5
 800aa92:	005b      	lsls	r3, r3, #1
 800aa94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aa98:	441c      	add	r4, r3
 800aa9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aaa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aaa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	1891      	adds	r1, r2, r2
 800aab2:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aab4:	415b      	adcs	r3, r3
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aabc:	4641      	mov	r1, r8
 800aabe:	1851      	adds	r1, r2, r1
 800aac0:	6339      	str	r1, [r7, #48]	@ 0x30
 800aac2:	4649      	mov	r1, r9
 800aac4:	414b      	adcs	r3, r1
 800aac6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	f04f 0300 	mov.w	r3, #0
 800aad0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aad4:	4659      	mov	r1, fp
 800aad6:	00cb      	lsls	r3, r1, #3
 800aad8:	4651      	mov	r1, sl
 800aada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aade:	4651      	mov	r1, sl
 800aae0:	00ca      	lsls	r2, r1, #3
 800aae2:	4610      	mov	r0, r2
 800aae4:	4619      	mov	r1, r3
 800aae6:	4603      	mov	r3, r0
 800aae8:	4642      	mov	r2, r8
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaf0:	464b      	mov	r3, r9
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	eb42 0303 	adc.w	r3, r2, r3
 800aaf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aafc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ab0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab10:	460b      	mov	r3, r1
 800ab12:	18db      	adds	r3, r3, r3
 800ab14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab16:	4613      	mov	r3, r2
 800ab18:	eb42 0303 	adc.w	r3, r2, r3
 800ab1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ab22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ab26:	f7f6 fa2d 	bl	8000f84 <__aeabi_uldivmod>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <UART_SetConfig+0x2d4>)
 800ab30:	fba3 1302 	umull	r1, r3, r3, r2
 800ab34:	095b      	lsrs	r3, r3, #5
 800ab36:	2164      	movs	r1, #100	@ 0x64
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	3332      	adds	r3, #50	@ 0x32
 800ab42:	4a08      	ldr	r2, [pc, #32]	@ (800ab64 <UART_SetConfig+0x2d4>)
 800ab44:	fba2 2303 	umull	r2, r3, r2, r3
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	f003 0207 	and.w	r2, r3, #7
 800ab4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4422      	add	r2, r4
 800ab56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab58:	e106      	b.n	800ad68 <UART_SetConfig+0x4d8>
 800ab5a:	bf00      	nop
 800ab5c:	40011000 	.word	0x40011000
 800ab60:	40011400 	.word	0x40011400
 800ab64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab7a:	4642      	mov	r2, r8
 800ab7c:	464b      	mov	r3, r9
 800ab7e:	1891      	adds	r1, r2, r2
 800ab80:	6239      	str	r1, [r7, #32]
 800ab82:	415b      	adcs	r3, r3
 800ab84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab8a:	4641      	mov	r1, r8
 800ab8c:	1854      	adds	r4, r2, r1
 800ab8e:	4649      	mov	r1, r9
 800ab90:	eb43 0501 	adc.w	r5, r3, r1
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	f04f 0300 	mov.w	r3, #0
 800ab9c:	00eb      	lsls	r3, r5, #3
 800ab9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aba2:	00e2      	lsls	r2, r4, #3
 800aba4:	4614      	mov	r4, r2
 800aba6:	461d      	mov	r5, r3
 800aba8:	4643      	mov	r3, r8
 800abaa:	18e3      	adds	r3, r4, r3
 800abac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800abb0:	464b      	mov	r3, r9
 800abb2:	eb45 0303 	adc.w	r3, r5, r3
 800abb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800abba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800abc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800abd6:	4629      	mov	r1, r5
 800abd8:	008b      	lsls	r3, r1, #2
 800abda:	4621      	mov	r1, r4
 800abdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800abe0:	4621      	mov	r1, r4
 800abe2:	008a      	lsls	r2, r1, #2
 800abe4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800abe8:	f7f6 f9cc 	bl	8000f84 <__aeabi_uldivmod>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4b60      	ldr	r3, [pc, #384]	@ (800ad74 <UART_SetConfig+0x4e4>)
 800abf2:	fba3 2302 	umull	r2, r3, r3, r2
 800abf6:	095b      	lsrs	r3, r3, #5
 800abf8:	011c      	lsls	r4, r3, #4
 800abfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ac08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ac0c:	4642      	mov	r2, r8
 800ac0e:	464b      	mov	r3, r9
 800ac10:	1891      	adds	r1, r2, r2
 800ac12:	61b9      	str	r1, [r7, #24]
 800ac14:	415b      	adcs	r3, r3
 800ac16:	61fb      	str	r3, [r7, #28]
 800ac18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac1c:	4641      	mov	r1, r8
 800ac1e:	1851      	adds	r1, r2, r1
 800ac20:	6139      	str	r1, [r7, #16]
 800ac22:	4649      	mov	r1, r9
 800ac24:	414b      	adcs	r3, r1
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	f04f 0200 	mov.w	r2, #0
 800ac2c:	f04f 0300 	mov.w	r3, #0
 800ac30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac34:	4659      	mov	r1, fp
 800ac36:	00cb      	lsls	r3, r1, #3
 800ac38:	4651      	mov	r1, sl
 800ac3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac3e:	4651      	mov	r1, sl
 800ac40:	00ca      	lsls	r2, r1, #3
 800ac42:	4610      	mov	r0, r2
 800ac44:	4619      	mov	r1, r3
 800ac46:	4603      	mov	r3, r0
 800ac48:	4642      	mov	r2, r8
 800ac4a:	189b      	adds	r3, r3, r2
 800ac4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac50:	464b      	mov	r3, r9
 800ac52:	460a      	mov	r2, r1
 800ac54:	eb42 0303 	adc.w	r3, r2, r3
 800ac58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ac66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac68:	f04f 0200 	mov.w	r2, #0
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac74:	4649      	mov	r1, r9
 800ac76:	008b      	lsls	r3, r1, #2
 800ac78:	4641      	mov	r1, r8
 800ac7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac7e:	4641      	mov	r1, r8
 800ac80:	008a      	lsls	r2, r1, #2
 800ac82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac86:	f7f6 f97d 	bl	8000f84 <__aeabi_uldivmod>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4611      	mov	r1, r2
 800ac90:	4b38      	ldr	r3, [pc, #224]	@ (800ad74 <UART_SetConfig+0x4e4>)
 800ac92:	fba3 2301 	umull	r2, r3, r3, r1
 800ac96:	095b      	lsrs	r3, r3, #5
 800ac98:	2264      	movs	r2, #100	@ 0x64
 800ac9a:	fb02 f303 	mul.w	r3, r2, r3
 800ac9e:	1acb      	subs	r3, r1, r3
 800aca0:	011b      	lsls	r3, r3, #4
 800aca2:	3332      	adds	r3, #50	@ 0x32
 800aca4:	4a33      	ldr	r2, [pc, #204]	@ (800ad74 <UART_SetConfig+0x4e4>)
 800aca6:	fba2 2303 	umull	r2, r3, r2, r3
 800acaa:	095b      	lsrs	r3, r3, #5
 800acac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acb0:	441c      	add	r4, r3
 800acb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800acb6:	2200      	movs	r2, #0
 800acb8:	673b      	str	r3, [r7, #112]	@ 0x70
 800acba:	677a      	str	r2, [r7, #116]	@ 0x74
 800acbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800acc0:	4642      	mov	r2, r8
 800acc2:	464b      	mov	r3, r9
 800acc4:	1891      	adds	r1, r2, r2
 800acc6:	60b9      	str	r1, [r7, #8]
 800acc8:	415b      	adcs	r3, r3
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acd0:	4641      	mov	r1, r8
 800acd2:	1851      	adds	r1, r2, r1
 800acd4:	6039      	str	r1, [r7, #0]
 800acd6:	4649      	mov	r1, r9
 800acd8:	414b      	adcs	r3, r1
 800acda:	607b      	str	r3, [r7, #4]
 800acdc:	f04f 0200 	mov.w	r2, #0
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ace8:	4659      	mov	r1, fp
 800acea:	00cb      	lsls	r3, r1, #3
 800acec:	4651      	mov	r1, sl
 800acee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800acf2:	4651      	mov	r1, sl
 800acf4:	00ca      	lsls	r2, r1, #3
 800acf6:	4610      	mov	r0, r2
 800acf8:	4619      	mov	r1, r3
 800acfa:	4603      	mov	r3, r0
 800acfc:	4642      	mov	r2, r8
 800acfe:	189b      	adds	r3, r3, r2
 800ad00:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad02:	464b      	mov	r3, r9
 800ad04:	460a      	mov	r2, r1
 800ad06:	eb42 0303 	adc.w	r3, r2, r3
 800ad0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad16:	667a      	str	r2, [r7, #100]	@ 0x64
 800ad18:	f04f 0200 	mov.w	r2, #0
 800ad1c:	f04f 0300 	mov.w	r3, #0
 800ad20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ad24:	4649      	mov	r1, r9
 800ad26:	008b      	lsls	r3, r1, #2
 800ad28:	4641      	mov	r1, r8
 800ad2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad2e:	4641      	mov	r1, r8
 800ad30:	008a      	lsls	r2, r1, #2
 800ad32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad36:	f7f6 f925 	bl	8000f84 <__aeabi_uldivmod>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ad74 <UART_SetConfig+0x4e4>)
 800ad40:	fba3 1302 	umull	r1, r3, r3, r2
 800ad44:	095b      	lsrs	r3, r3, #5
 800ad46:	2164      	movs	r1, #100	@ 0x64
 800ad48:	fb01 f303 	mul.w	r3, r1, r3
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	011b      	lsls	r3, r3, #4
 800ad50:	3332      	adds	r3, #50	@ 0x32
 800ad52:	4a08      	ldr	r2, [pc, #32]	@ (800ad74 <UART_SetConfig+0x4e4>)
 800ad54:	fba2 2303 	umull	r2, r3, r2, r3
 800ad58:	095b      	lsrs	r3, r3, #5
 800ad5a:	f003 020f 	and.w	r2, r3, #15
 800ad5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4422      	add	r2, r4
 800ad66:	609a      	str	r2, [r3, #8]
}
 800ad68:	bf00      	nop
 800ad6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad74:	51eb851f 	.word	0x51eb851f

0800ad78 <bme280_getVals>:


int currentIndex = 0;

static void bme280_getVals(bme280_struct_t* BME, uint32_t* ut, uint32_t* up, uint32_t* uh)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b08c      	sub	sp, #48	@ 0x30
 800ad7c:	af04      	add	r7, sp, #16
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	603b      	str	r3, [r7, #0]
	uint8_t params[8];
	HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, params, 1, 30);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6898      	ldr	r0, [r3, #8]
 800ad8a:	231e      	movs	r3, #30
 800ad8c:	9302      	str	r3, [sp, #8]
 800ad8e:	2301      	movs	r3, #1
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	f107 0314 	add.w	r3, r7, #20
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	2301      	movs	r3, #1
 800ad9a:	22f3      	movs	r2, #243	@ 0xf3
 800ad9c:	21ec      	movs	r1, #236	@ 0xec
 800ad9e:	f7fb feef 	bl	8006b80 <HAL_I2C_Mem_Read>
 800ada2:	4603      	mov	r3, r0
 800ada4:	77fb      	strb	r3, [r7, #31]
	BME->flags.is_bme_updated_1 = 0;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	BME->flags.is_bme_updated_3 = 0;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	if((params[0] & 0x01) == 0x00)
 800adb6:	7d3b      	ldrb	r3, [r7, #20]
 800adb8:	f003 0301 	and.w	r3, r3, #1
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d139      	bne.n	800ae34 <bme280_getVals+0xbc>
	{
		retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, params, 8, 20);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6898      	ldr	r0, [r3, #8]
 800adc4:	2314      	movs	r3, #20
 800adc6:	9302      	str	r3, [sp, #8]
 800adc8:	2308      	movs	r3, #8
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	f107 0314 	add.w	r3, r7, #20
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	2301      	movs	r3, #1
 800add4:	22f7      	movs	r2, #247	@ 0xf7
 800add6:	21ec      	movs	r1, #236	@ 0xec
 800add8:	f7fb fed2 	bl	8006b80 <HAL_I2C_Mem_Read>
 800addc:	4603      	mov	r3, r0
 800adde:	77fb      	strb	r3, [r7, #31]
		if (retVal == HAL_OK){
 800ade0:	7ffb      	ldrb	r3, [r7, #31]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d126      	bne.n	800ae34 <bme280_getVals+0xbc>
			BME->flags.is_bme_updated_1 = 1;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2201      	movs	r2, #1
 800adea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			BME->flags.is_bme_updated_3 = 1;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2201      	movs	r2, #1
 800adf2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			*ut = 	((int32_t)params[3] << 12) | ((int32_t)params[4] << 4) | ((int32_t)params[5]  >> 4);
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	031a      	lsls	r2, r3, #12
 800adfa:	7e3b      	ldrb	r3, [r7, #24]
 800adfc:	011b      	lsls	r3, r3, #4
 800adfe:	4313      	orrs	r3, r2
 800ae00:	7e7a      	ldrb	r2, [r7, #25]
 800ae02:	0912      	lsrs	r2, r2, #4
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	4313      	orrs	r3, r2
 800ae08:	461a      	mov	r2, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	601a      	str	r2, [r3, #0]
			*up =	((int32_t)params[0] << 12) | ((int32_t)params[1] << 4) | ((int32_t)params[2]  >> 4);
 800ae0e:	7d3b      	ldrb	r3, [r7, #20]
 800ae10:	031a      	lsls	r2, r3, #12
 800ae12:	7d7b      	ldrb	r3, [r7, #21]
 800ae14:	011b      	lsls	r3, r3, #4
 800ae16:	4313      	orrs	r3, r2
 800ae18:	7dba      	ldrb	r2, [r7, #22]
 800ae1a:	0912      	lsrs	r2, r2, #4
 800ae1c:	b2d2      	uxtb	r2, r2
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
			*uh =	((int32_t)params[6] << 8) | ((int32_t)params[7]);
 800ae26:	7ebb      	ldrb	r3, [r7, #26]
 800ae28:	021b      	lsls	r3, r3, #8
 800ae2a:	7efa      	ldrb	r2, [r7, #27]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	461a      	mov	r2, r3
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	601a      	str	r2, [r3, #0]
		}
	}
	UNUSED(retVal);
}
 800ae34:	bf00      	nop
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	0000      	movs	r0, r0
	...

0800ae40 <bme280_get_altitude>:

static void bme280_get_altitude(bme280_struct_t* BME)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
	float p_seaLevel = 1013.25;		//hPa
 800ae48:	4b31      	ldr	r3, [pc, #196]	@ (800af10 <bme280_get_altitude+0xd0>)
 800ae4a:	60fb      	str	r3, [r7, #12]
	float alt = 44330.0 * (1.0 - pow((BME->datas.pressure / p_seaLevel), (1.0 / 5.255)));
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	ed93 7a04 	vldr	s14, [r3, #16]
 800ae52:	edd7 7a03 	vldr	s15, [r7, #12]
 800ae56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ae5a:	ee16 0a90 	vmov	r0, s13
 800ae5e:	f7f5 fb93 	bl	8000588 <__aeabi_f2d>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	ed9f 1b26 	vldr	d1, [pc, #152]	@ 800af00 <bme280_get_altitude+0xc0>
 800ae6a:	ec43 2b10 	vmov	d0, r2, r3
 800ae6e:	f006 fc1d 	bl	80116ac <pow>
 800ae72:	ec53 2b10 	vmov	r2, r3, d0
 800ae76:	f04f 0000 	mov.w	r0, #0
 800ae7a:	4926      	ldr	r1, [pc, #152]	@ (800af14 <bme280_get_altitude+0xd4>)
 800ae7c:	f7f5 fa24 	bl	80002c8 <__aeabi_dsub>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4610      	mov	r0, r2
 800ae86:	4619      	mov	r1, r3
 800ae88:	a31f      	add	r3, pc, #124	@ (adr r3, 800af08 <bme280_get_altitude+0xc8>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fbd3 	bl	8000638 <__aeabi_dmul>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f7f5 fec5 	bl	8000c28 <__aeabi_d2f>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	60bb      	str	r3, [r7, #8]
	BME->datas.height = alt;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	619a      	str	r2, [r3, #24]
	BME->datas.altitude = alt - BME->parameters->base_alt;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800aeb0:	ed97 7a02 	vldr	s14, [r7, #8]
 800aeb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	edc3 7a07 	vstr	s15, [r3, #28]
	if(BME->datas.altitude > BME->parameters->max_alt && BME->parameters->base_alt != 0.0)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	ed93 7a07 	vldr	s14, [r3, #28]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800aecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed4:	dc00      	bgt.n	800aed8 <bme280_get_altitude+0x98>
	{
		BME->parameters->max_alt = BME->datas.altitude;
	}
}
 800aed6:	e00d      	b.n	800aef4 <bme280_get_altitude+0xb4>
	if(BME->datas.altitude > BME->parameters->max_alt && BME->parameters->base_alt != 0.0)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800aee0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee8:	d004      	beq.n	800aef4 <bme280_get_altitude+0xb4>
		BME->parameters->max_alt = BME->datas.altitude;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	69d2      	ldr	r2, [r2, #28]
 800aef2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800aef4:	bf00      	nop
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	f3af 8000 	nop.w
 800af00:	ccd9456c 	.word	0xccd9456c
 800af04:	3fc85b95 	.word	0x3fc85b95
 800af08:	00000000 	.word	0x00000000
 800af0c:	40e5a540 	.word	0x40e5a540
 800af10:	447d5000 	.word	0x447d5000
 800af14:	3ff00000 	.word	0x3ff00000

0800af18 <bme280_config>:
void bme280_config(bme280_struct_t* BME)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b090      	sub	sp, #64	@ 0x40
 800af1c:	af04      	add	r7, sp, #16
 800af1e:	6078      	str	r0, [r7, #4]
	uint8_t params[25];
	HAL_StatusTypeDef retVal;

	BME->parameters->base_alt = 0.0;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f04f 0200 	mov.w	r2, #0
 800af28:	625a      	str	r2, [r3, #36]	@ 0x24
//	uint8_t resetData = BME280_SOFT_RESET;
//	retVal = HAL_I2C_Mem_Write(I2C_bme, BME280_ADD, BME280_RESET, I2C_MEMADD_SIZE_8BIT, &resetData, 1, 50);		//Soft Reset.
//	HAL_Delay(50);
	HAL_I2C_DeInit(BME->device_config.BME_I2C);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fb fcfc 	bl	800692c <HAL_I2C_DeInit>
	HAL_Delay(5);
 800af34:	2005      	movs	r0, #5
 800af36:	f7f9 ff57 	bl	8004de8 <HAL_Delay>
	HAL_I2C_Init(BME->device_config.BME_I2C);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fb fbb0 	bl	80066a4 <HAL_I2C_Init>
	HAL_Delay(5);
 800af44:	2005      	movs	r0, #5
 800af46:	f7f9 ff4f 	bl	8004de8 <HAL_Delay>

	retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6898      	ldr	r0, [r3, #8]
 800af4e:	23c8      	movs	r3, #200	@ 0xc8
 800af50:	9302      	str	r3, [sp, #8]
 800af52:	2319      	movs	r3, #25
 800af54:	9301      	str	r3, [sp, #4]
 800af56:	f107 030c 	add.w	r3, r7, #12
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2301      	movs	r3, #1
 800af5e:	2288      	movs	r2, #136	@ 0x88
 800af60:	21ec      	movs	r1, #236	@ 0xec
 800af62:	f7fb fe0d 	bl	8006b80 <HAL_I2C_Mem_Read>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 800af6c:	7b3b      	ldrb	r3, [r7, #12]
 800af6e:	4619      	mov	r1, r3
 800af70:	7b7b      	ldrb	r3, [r7, #13]
 800af72:	021b      	lsls	r3, r3, #8
 800af74:	b29a      	uxth	r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	b292      	uxth	r2, r2
 800af7e:	801a      	strh	r2, [r3, #0]
	BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 800af80:	7bbb      	ldrb	r3, [r7, #14]
 800af82:	b219      	sxth	r1, r3
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	b21b      	sxth	r3, r3
 800af88:	021b      	lsls	r3, r3, #8
 800af8a:	b21a      	sxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	b212      	sxth	r2, r2
 800af94:	805a      	strh	r2, [r3, #2]
	BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 800af96:	7c3b      	ldrb	r3, [r7, #16]
 800af98:	b219      	sxth	r1, r3
 800af9a:	7c7b      	ldrb	r3, [r7, #17]
 800af9c:	b21b      	sxth	r3, r3
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	b21a      	sxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	430a      	orrs	r2, r1
 800afa8:	b212      	sxth	r2, r2
 800afaa:	809a      	strh	r2, [r3, #4]
	BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800afac:	7cbb      	ldrb	r3, [r7, #18]
 800afae:	b21a      	sxth	r2, r3
 800afb0:	7cfb      	ldrb	r3, [r7, #19]
 800afb2:	b21b      	sxth	r3, r3
 800afb4:	021b      	lsls	r3, r3, #8
 800afb6:	b21b      	sxth	r3, r3
 800afb8:	4313      	orrs	r3, r2
 800afba:	b21a      	sxth	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	b292      	uxth	r2, r2
 800afc2:	80da      	strh	r2, [r3, #6]
	BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 800afc4:	7d3b      	ldrb	r3, [r7, #20]
 800afc6:	b219      	sxth	r1, r3
 800afc8:	7d7b      	ldrb	r3, [r7, #21]
 800afca:	b21b      	sxth	r3, r3
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	b21a      	sxth	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	b212      	sxth	r2, r2
 800afd8:	811a      	strh	r2, [r3, #8]
	BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800afda:	7dbb      	ldrb	r3, [r7, #22]
 800afdc:	b219      	sxth	r1, r3
 800afde:	7dfb      	ldrb	r3, [r7, #23]
 800afe0:	b21b      	sxth	r3, r3
 800afe2:	021b      	lsls	r3, r3, #8
 800afe4:	b21a      	sxth	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	430a      	orrs	r2, r1
 800afec:	b212      	sxth	r2, r2
 800afee:	815a      	strh	r2, [r3, #10]
	BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 800aff0:	7e3b      	ldrb	r3, [r7, #24]
 800aff2:	b219      	sxth	r1, r3
 800aff4:	7e7b      	ldrb	r3, [r7, #25]
 800aff6:	b21b      	sxth	r3, r3
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	b21a      	sxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	430a      	orrs	r2, r1
 800b002:	b212      	sxth	r2, r2
 800b004:	819a      	strh	r2, [r3, #12]
	BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 800b006:	7ebb      	ldrb	r3, [r7, #26]
 800b008:	b219      	sxth	r1, r3
 800b00a:	7efb      	ldrb	r3, [r7, #27]
 800b00c:	b21b      	sxth	r3, r3
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	b21a      	sxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	b212      	sxth	r2, r2
 800b01a:	81da      	strh	r2, [r3, #14]
	BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800b01c:	7f3b      	ldrb	r3, [r7, #28]
 800b01e:	b219      	sxth	r1, r3
 800b020:	7f7b      	ldrb	r3, [r7, #29]
 800b022:	b21b      	sxth	r3, r3
 800b024:	021b      	lsls	r3, r3, #8
 800b026:	b21a      	sxth	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	b212      	sxth	r2, r2
 800b030:	821a      	strh	r2, [r3, #16]
	BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 800b032:	7fbb      	ldrb	r3, [r7, #30]
 800b034:	b219      	sxth	r1, r3
 800b036:	7ffb      	ldrb	r3, [r7, #31]
 800b038:	b21b      	sxth	r3, r3
 800b03a:	021b      	lsls	r3, r3, #8
 800b03c:	b21a      	sxth	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	430a      	orrs	r2, r1
 800b044:	b212      	sxth	r2, r2
 800b046:	825a      	strh	r2, [r3, #18]
	BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 800b048:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b04c:	b219      	sxth	r1, r3
 800b04e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b052:	b21b      	sxth	r3, r3
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	b21a      	sxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	430a      	orrs	r2, r1
 800b05e:	b212      	sxth	r2, r2
 800b060:	829a      	strh	r2, [r3, #20]
	BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 800b062:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b066:	b219      	sxth	r1, r3
 800b068:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b06c:	b21b      	sxth	r3, r3
 800b06e:	021b      	lsls	r3, r3, #8
 800b070:	b21a      	sxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	430a      	orrs	r2, r1
 800b078:	b212      	sxth	r2, r2
 800b07a:	82da      	strh	r2, [r3, #22]
	BME->parameters->dig_H1 = params[24];
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800b084:	761a      	strb	r2, [r3, #24]

	retVal = HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6898      	ldr	r0, [r3, #8]
 800b08a:	2332      	movs	r3, #50	@ 0x32
 800b08c:	9302      	str	r3, [sp, #8]
 800b08e:	2307      	movs	r3, #7
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	2301      	movs	r3, #1
 800b09a:	22e1      	movs	r2, #225	@ 0xe1
 800b09c:	21ec      	movs	r1, #236	@ 0xec
 800b09e:	f7fb fd6f 	bl	8006b80 <HAL_I2C_Mem_Read>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800b0a8:	7b3b      	ldrb	r3, [r7, #12]
 800b0aa:	b219      	sxth	r1, r3
 800b0ac:	7b7b      	ldrb	r3, [r7, #13]
 800b0ae:	b21b      	sxth	r3, r3
 800b0b0:	021b      	lsls	r3, r3, #8
 800b0b2:	b21a      	sxth	r2, r3
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	430a      	orrs	r2, r1
 800b0ba:	b212      	sxth	r2, r2
 800b0bc:	835a      	strh	r2, [r3, #26]
	BME->parameters->dig_H3	= params[2];
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	7bba      	ldrb	r2, [r7, #14]
 800b0c4:	771a      	strb	r2, [r3, #28]
	BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800b0c6:	7c3b      	ldrb	r3, [r7, #16]
 800b0c8:	b21b      	sxth	r3, r3
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	b219      	sxth	r1, r3
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	b21b      	sxth	r3, r3
 800b0d4:	011b      	lsls	r3, r3, #4
 800b0d6:	b21a      	sxth	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	b212      	sxth	r2, r2
 800b0e0:	83da      	strh	r2, [r3, #30]
	BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 800b0e2:	7c3b      	ldrb	r3, [r7, #16]
 800b0e4:	091b      	lsrs	r3, r3, #4
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	b219      	sxth	r1, r3
 800b0ea:	7c7b      	ldrb	r3, [r7, #17]
 800b0ec:	b21b      	sxth	r3, r3
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	b21a      	sxth	r2, r3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	b212      	sxth	r2, r2
 800b0fa:	841a      	strh	r2, [r3, #32]
	BME->parameters->dig_H6 = params[6];
 800b0fc:	7cba      	ldrb	r2, [r7, #18]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	b252      	sxtb	r2, r2
 800b104:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	uint8_t data_ctrl = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	72fb      	strb	r3, [r7, #11]
	data_ctrl = BME->device_config.over_sampling;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	795b      	ldrb	r3, [r3, #5]
 800b110:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Humidity sensor over sampling set to OS.
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6898      	ldr	r0, [r3, #8]
 800b116:	2332      	movs	r3, #50	@ 0x32
 800b118:	9302      	str	r3, [sp, #8]
 800b11a:	2301      	movs	r3, #1
 800b11c:	9301      	str	r3, [sp, #4]
 800b11e:	f107 030b 	add.w	r3, r7, #11
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	2301      	movs	r3, #1
 800b126:	22f2      	movs	r2, #242	@ 0xf2
 800b128:	21ec      	movs	r1, #236	@ 0xec
 800b12a:	f7fb fc2f 	bl	800698c <HAL_I2C_Mem_Write>
 800b12e:	4603      	mov	r3, r0
 800b130:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_ctrl = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	72fb      	strb	r3, [r7, #11]
	data_ctrl = BME->device_config.mode | (BME->device_config.over_sampling << 2) | (BME->device_config.over_sampling << 5);																		//Mode has been chosed.
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	791b      	ldrb	r3, [r3, #4]
 800b13c:	b25a      	sxtb	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	795b      	ldrb	r3, [r3, #5]
 800b142:	b25b      	sxtb	r3, r3
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	b25b      	sxtb	r3, r3
 800b148:	4313      	orrs	r3, r2
 800b14a:	b25a      	sxtb	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	795b      	ldrb	r3, [r3, #5]
 800b150:	b25b      	sxtb	r3, r3
 800b152:	015b      	lsls	r3, r3, #5
 800b154:	b25b      	sxtb	r3, r3
 800b156:	4313      	orrs	r3, r2
 800b158:	b25b      	sxtb	r3, r3
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);		//Temp and pressure sensors' over sampling set to OS.
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6898      	ldr	r0, [r3, #8]
 800b162:	2332      	movs	r3, #50	@ 0x32
 800b164:	9302      	str	r3, [sp, #8]
 800b166:	2301      	movs	r3, #1
 800b168:	9301      	str	r3, [sp, #4]
 800b16a:	f107 030b 	add.w	r3, r7, #11
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2301      	movs	r3, #1
 800b172:	22f4      	movs	r2, #244	@ 0xf4
 800b174:	21ec      	movs	r1, #236	@ 0xec
 800b176:	f7fb fc09 	bl	800698c <HAL_I2C_Mem_Write>
 800b17a:	4603      	mov	r3, r0
 800b17c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	data_ctrl = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	72fb      	strb	r3, [r7, #11]
	data_ctrl = (BME->device_config.filter << 2) | (BME->device_config.period << 5);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	799b      	ldrb	r3, [r3, #6]
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	b25a      	sxtb	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	79db      	ldrb	r3, [r3, #7]
 800b192:	b25b      	sxtb	r3, r3
 800b194:	015b      	lsls	r3, r3, #5
 800b196:	b25b      	sxtb	r3, r3
 800b198:	4313      	orrs	r3, r2
 800b19a:	b25b      	sxtb	r3, r3
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	72fb      	strb	r3, [r7, #11]
	retVal = HAL_I2C_Mem_Write(BME->device_config.BME_I2C, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6898      	ldr	r0, [r3, #8]
 800b1a4:	2332      	movs	r3, #50	@ 0x32
 800b1a6:	9302      	str	r3, [sp, #8]
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	f107 030b 	add.w	r3, r7, #11
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	22f5      	movs	r2, #245	@ 0xf5
 800b1b6:	21ec      	movs	r1, #236	@ 0xec
 800b1b8:	f7fb fbe8 	bl	800698c <HAL_I2C_Mem_Write>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	float base = 0.0;
 800b1c2:	f04f 0300 	mov.w	r3, #0
 800b1c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_Delay(100);
 800b1c8:	2064      	movs	r0, #100	@ 0x64
 800b1ca:	f7f9 fe0d 	bl	8004de8 <HAL_Delay>

	for(int i = 0; i < 30; i++)		//Taking base altitude
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1d2:	e011      	b.n	800b1f8 <bme280_config+0x2e0>
	{
	  bme280_update(BME);
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f853 	bl	800b280 <bme280_update>
	  base +=  BME->datas.altitude;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	edd3 7a07 	vldr	s15, [r3, #28]
 800b1e0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b1e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1e8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	  HAL_Delay(30);
 800b1ec:	201e      	movs	r0, #30
 800b1ee:	f7f9 fdfb 	bl	8004de8 <HAL_Delay>
	for(int i = 0; i < 30; i++)		//Taking base altitude
 800b1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f4:	3301      	adds	r3, #1
 800b1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	2b1d      	cmp	r3, #29
 800b1fc:	ddea      	ble.n	800b1d4 <bme280_config+0x2bc>
	}
	BME->parameters->base_alt = (base / 30.0);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800b206:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 800b20a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b20e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	BME->flags.is_bme_updated_2 = 1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	bme280_update(BME);
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f830 	bl	800b280 <bme280_update>
	BME->parameters->max_alt = 0.0;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f04f 0200 	mov.w	r2, #0
 800b228:	629a      	str	r2, [r3, #40]	@ 0x28

	UNUSED(retVal);
}
 800b22a:	bf00      	nop
 800b22c:	3730      	adds	r7, #48	@ 0x30
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <bme280_init>:

uint8_t bme280_init(bme280_struct_t* BME)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b088      	sub	sp, #32
 800b236:	af04      	add	r7, sp, #16
 800b238:	6078      	str	r0, [r7, #4]
	uint8_t buf[1];
	if(BME->parameters == NULL)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d106      	bne.n	800b250 <bme280_init+0x1e>
	{
		BME->parameters = malloc(sizeof(*BME->parameters));
 800b242:	202c      	movs	r0, #44	@ 0x2c
 800b244:	f001 fa1c 	bl	800c680 <malloc>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	601a      	str	r2, [r3, #0]
	}
	HAL_I2C_Mem_Read(BME->device_config.BME_I2C, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 20);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6898      	ldr	r0, [r3, #8]
 800b254:	2314      	movs	r3, #20
 800b256:	9302      	str	r3, [sp, #8]
 800b258:	2301      	movs	r3, #1
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	f107 030c 	add.w	r3, r7, #12
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	2301      	movs	r3, #1
 800b264:	22d0      	movs	r2, #208	@ 0xd0
 800b266:	21ec      	movs	r1, #236	@ 0xec
 800b268:	f7fb fc8a 	bl	8006b80 <HAL_I2C_Mem_Read>

	if(*buf == 0x60)
 800b26c:	7b3b      	ldrb	r3, [r7, #12]
 800b26e:	2b60      	cmp	r3, #96	@ 0x60
 800b270:	d101      	bne.n	800b276 <bme280_init+0x44>
		return 0;
 800b272:	2300      	movs	r3, #0
 800b274:	e000      	b.n	800b278 <bme280_init+0x46>

	return 1;
 800b276:	2301      	movs	r3, #1
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <bme280_update>:


void bme280_update(bme280_struct_t* BME){
 800b280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b284:	b0d8      	sub	sp, #352	@ 0x160
 800b286:	af00      	add	r7, sp, #0
 800b288:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int32_t var1_t, var2_t, T, adc_T;
	uint32_t	ut, up, uh;

	bme280_getVals(BME, &ut, &up, &uh);
 800b28c:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800b290:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800b294:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800b298:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800b29c:	f7ff fd6c 	bl	800ad78 <bme280_getVals>

	if(BME->flags.is_bme_updated_1 == 1)
 800b2a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	f040 83b1 	bne.w	800ba10 <bme280_update+0x790>
	{
		//For tempereature
		adc_T =	ut;
 800b2ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b2b2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
		var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 800b2b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b2ba:	10da      	asrs	r2, r3, #3
 800b2bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	005b      	lsls	r3, r3, #1
 800b2c6:	1ad2      	subs	r2, r2, r3
 800b2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
 800b2d6:	12db      	asrs	r3, r3, #11
 800b2d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 800b2dc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b2e0:	111a      	asrs	r2, r3, #4
 800b2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	881b      	ldrh	r3, [r3, #0]
 800b2ea:	1ad1      	subs	r1, r2, r3
 800b2ec:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800b2f0:	111a      	asrs	r2, r3, #4
 800b2f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	fb01 f303 	mul.w	r3, r1, r3
 800b300:	131a      	asrs	r2, r3, #12
 800b302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b30c:	fb02 f303 	mul.w	r3, r2, r3
 800b310:	139b      	asrs	r3, r3, #14
 800b312:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		int32_t t_fine = var1_t + var2_t;
 800b316:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 800b31a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800b31e:	4413      	add	r3, r2
 800b320:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
		T = (t_fine * 5 + 128) >> 8;
 800b324:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	3380      	adds	r3, #128	@ 0x80
 800b330:	121b      	asrs	r3, r3, #8
 800b332:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		BME->datas.temperature = (float)T / 100.0;
 800b336:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b342:	eddf 6abb 	vldr	s13, [pc, #748]	@ 800b630 <bme280_update+0x3b0>
 800b346:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b34a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b34e:	edc3 7a03 	vstr	s15, [r3, #12]

		//For pressure
		int64_t var1_p, var2_p, P, adc_P;
		adc_P = (int64_t)up;
 800b352:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b356:	2200      	movs	r2, #0
 800b358:	653b      	str	r3, [r7, #80]	@ 0x50
 800b35a:	657a      	str	r2, [r7, #84]	@ 0x54
 800b35c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b360:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
		var1_p = ((int64_t)t_fine) - 128000;
 800b364:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b368:	17da      	asrs	r2, r3, #31
 800b36a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b36e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b372:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b376:	460b      	mov	r3, r1
 800b378:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 800b37c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b37e:	4613      	mov	r3, r2
 800b380:	f143 33ff 	adc.w	r3, r3, #4294967295
 800b384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b386:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b38a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 800b38e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b392:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b396:	fb03 f102 	mul.w	r1, r3, r2
 800b39a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b39e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b3a2:	fb02 f303 	mul.w	r3, r2, r3
 800b3a6:	18ca      	adds	r2, r1, r3
 800b3a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b3ac:	fba3 4503 	umull	r4, r5, r3, r3
 800b3b0:	1953      	adds	r3, r2, r5
 800b3b2:	461d      	mov	r5, r3
 800b3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800b3be:	b21b      	sxth	r3, r3
 800b3c0:	17da      	asrs	r2, r3, #31
 800b3c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3c6:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b3ca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	fb03 f205 	mul.w	r2, r3, r5
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	fb04 f303 	mul.w	r3, r4, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	4602      	mov	r2, r0
 800b3de:	fba4 ab02 	umull	sl, fp, r4, r2
 800b3e2:	445b      	add	r3, fp
 800b3e4:	469b      	mov	fp, r3
 800b3e6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
 800b3ea:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
		var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 800b3ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b3f8:	b21b      	sxth	r3, r3
 800b3fa:	17da      	asrs	r2, r3, #31
 800b3fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b400:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b404:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b408:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800b40c:	462a      	mov	r2, r5
 800b40e:	fb02 f203 	mul.w	r2, r2, r3
 800b412:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b416:	4621      	mov	r1, r4
 800b418:	fb01 f303 	mul.w	r3, r1, r3
 800b41c:	441a      	add	r2, r3
 800b41e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b422:	4621      	mov	r1, r4
 800b424:	fba3 8901 	umull	r8, r9, r3, r1
 800b428:	eb02 0309 	add.w	r3, r2, r9
 800b42c:	4699      	mov	r9, r3
 800b42e:	f04f 0000 	mov.w	r0, #0
 800b432:	f04f 0100 	mov.w	r1, #0
 800b436:	ea4f 4149 	mov.w	r1, r9, lsl #17
 800b43a:	ea41 31d8 	orr.w	r1, r1, r8, lsr #15
 800b43e:	ea4f 4048 	mov.w	r0, r8, lsl #17
 800b442:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b446:	1814      	adds	r4, r2, r0
 800b448:	643c      	str	r4, [r7, #64]	@ 0x40
 800b44a:	414b      	adcs	r3, r1
 800b44c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b44e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800b452:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 800b456:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800b460:	b21b      	sxth	r3, r3
 800b462:	17da      	asrs	r2, r3, #31
 800b464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b468:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b46c:	f04f 0000 	mov.w	r0, #0
 800b470:	f04f 0100 	mov.w	r1, #0
 800b474:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b478:	00d9      	lsls	r1, r3, #3
 800b47a:	2000      	movs	r0, #0
 800b47c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b480:	1814      	adds	r4, r2, r0
 800b482:	63bc      	str	r4, [r7, #56]	@ 0x38
 800b484:	414b      	adcs	r3, r1
 800b486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b488:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b48c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
		var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 800b490:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b494:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b498:	fb03 f102 	mul.w	r1, r3, r2
 800b49c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800b4a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b4a4:	fb02 f303 	mul.w	r3, r2, r3
 800b4a8:	18ca      	adds	r2, r1, r3
 800b4aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b4ae:	fba3 1303 	umull	r1, r3, r3, r3
 800b4b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c0:	18d3      	adds	r3, r2, r3
 800b4c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b4c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b4d0:	b21b      	sxth	r3, r3
 800b4d2:	17da      	asrs	r2, r3, #31
 800b4d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b4d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b4dc:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	fb02 f203 	mul.w	r2, r2, r3
 800b4ec:	464b      	mov	r3, r9
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	fb01 f303 	mul.w	r3, r1, r3
 800b4f4:	4413      	add	r3, r2
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4641      	mov	r1, r8
 800b4fa:	fba2 1201 	umull	r1, r2, r2, r1
 800b4fe:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800b502:	460a      	mov	r2, r1
 800b504:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800b508:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b50c:	4413      	add	r3, r2
 800b50e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b512:	f04f 0000 	mov.w	r0, #0
 800b516:	f04f 0100 	mov.w	r1, #0
 800b51a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800b51e:	4623      	mov	r3, r4
 800b520:	0a18      	lsrs	r0, r3, #8
 800b522:	462b      	mov	r3, r5
 800b524:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b528:	462b      	mov	r3, r5
 800b52a:	1219      	asrs	r1, r3, #8
 800b52c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b536:	b21b      	sxth	r3, r3
 800b538:	17da      	asrs	r2, r3, #31
 800b53a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b53e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b542:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b54a:	464a      	mov	r2, r9
 800b54c:	fb02 f203 	mul.w	r2, r2, r3
 800b550:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b554:	4644      	mov	r4, r8
 800b556:	fb04 f303 	mul.w	r3, r4, r3
 800b55a:	441a      	add	r2, r3
 800b55c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800b560:	4644      	mov	r4, r8
 800b562:	fba3 4304 	umull	r4, r3, r3, r4
 800b566:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b56a:	4623      	mov	r3, r4
 800b56c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b574:	18d3      	adds	r3, r2, r3
 800b576:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800b586:	464c      	mov	r4, r9
 800b588:	0323      	lsls	r3, r4, #12
 800b58a:	4644      	mov	r4, r8
 800b58c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800b590:	4644      	mov	r4, r8
 800b592:	0322      	lsls	r2, r4, #12
 800b594:	1884      	adds	r4, r0, r2
 800b596:	633c      	str	r4, [r7, #48]	@ 0x30
 800b598:	eb41 0303 	adc.w	r3, r1, r3
 800b59c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b59e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b5a2:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
		var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 800b5a6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b5aa:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800b5ae:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800b5b2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800b5b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	88db      	ldrh	r3, [r3, #6]
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b5c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b5ca:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b5ce:	462b      	mov	r3, r5
 800b5d0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	fb02 f203 	mul.w	r2, r2, r3
 800b5da:	464b      	mov	r3, r9
 800b5dc:	4621      	mov	r1, r4
 800b5de:	fb01 f303 	mul.w	r3, r1, r3
 800b5e2:	4413      	add	r3, r2
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	fba2 1201 	umull	r1, r2, r2, r1
 800b5ec:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b5f0:	460a      	mov	r2, r1
 800b5f2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800b5f6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b600:	f04f 0200 	mov.w	r2, #0
 800b604:	f04f 0300 	mov.w	r3, #0
 800b608:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b60c:	4629      	mov	r1, r5
 800b60e:	104a      	asrs	r2, r1, #1
 800b610:	4629      	mov	r1, r5
 800b612:	17cb      	asrs	r3, r1, #31
 800b614:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		if(var1_p == 0)
 800b618:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b61c:	4313      	orrs	r3, r2
 800b61e:	d109      	bne.n	800b634 <bme280_update+0x3b4>
		{
			P = 0;
 800b620:	f04f 0200 	mov.w	r2, #0
 800b624:	f04f 0300 	mov.w	r3, #0
 800b628:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
 800b62c:	e14e      	b.n	800b8cc <bme280_update+0x64c>
 800b62e:	bf00      	nop
 800b630:	42c80000 	.word	0x42c80000
		}else
		{
		P = 1048576 - adc_P;
 800b634:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 800b638:	2100      	movs	r1, #0
 800b63a:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 800b63e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b640:	eb61 0303 	sbc.w	r3, r1, r3
 800b644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b646:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b64a:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		P = (((P << 31) - var2_p) * 3125) / var1_p;
 800b64e:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b652:	f04f 0000 	mov.w	r0, #0
 800b656:	f04f 0100 	mov.w	r1, #0
 800b65a:	07d9      	lsls	r1, r3, #31
 800b65c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 800b660:	07d0      	lsls	r0, r2, #31
 800b662:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b666:	1a84      	subs	r4, r0, r2
 800b668:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800b66c:	eb61 0303 	sbc.w	r3, r1, r3
 800b670:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b674:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800b678:	4622      	mov	r2, r4
 800b67a:	462b      	mov	r3, r5
 800b67c:	1891      	adds	r1, r2, r2
 800b67e:	6239      	str	r1, [r7, #32]
 800b680:	415b      	adcs	r3, r3
 800b682:	627b      	str	r3, [r7, #36]	@ 0x24
 800b684:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b688:	4621      	mov	r1, r4
 800b68a:	1851      	adds	r1, r2, r1
 800b68c:	61b9      	str	r1, [r7, #24]
 800b68e:	4629      	mov	r1, r5
 800b690:	414b      	adcs	r3, r1
 800b692:	61fb      	str	r3, [r7, #28]
 800b694:	f04f 0200 	mov.w	r2, #0
 800b698:	f04f 0300 	mov.w	r3, #0
 800b69c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	018b      	lsls	r3, r1, #6
 800b6a4:	4641      	mov	r1, r8
 800b6a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b6aa:	4641      	mov	r1, r8
 800b6ac:	018a      	lsls	r2, r1, #6
 800b6ae:	4641      	mov	r1, r8
 800b6b0:	1889      	adds	r1, r1, r2
 800b6b2:	6139      	str	r1, [r7, #16]
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	eb43 0101 	adc.w	r1, r3, r1
 800b6ba:	6179      	str	r1, [r7, #20]
 800b6bc:	f04f 0200 	mov.w	r2, #0
 800b6c0:	f04f 0300 	mov.w	r3, #0
 800b6c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800b6c8:	4649      	mov	r1, r9
 800b6ca:	008b      	lsls	r3, r1, #2
 800b6cc:	4641      	mov	r1, r8
 800b6ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6d2:	4641      	mov	r1, r8
 800b6d4:	008a      	lsls	r2, r1, #2
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4603      	mov	r3, r0
 800b6dc:	4622      	mov	r2, r4
 800b6de:	189b      	adds	r3, r3, r2
 800b6e0:	60bb      	str	r3, [r7, #8]
 800b6e2:	460b      	mov	r3, r1
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	eb42 0303 	adc.w	r3, r2, r3
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	f04f 0200 	mov.w	r2, #0
 800b6f0:	f04f 0300 	mov.w	r3, #0
 800b6f4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	008b      	lsls	r3, r1, #2
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b702:	4641      	mov	r1, r8
 800b704:	008a      	lsls	r2, r1, #2
 800b706:	4610      	mov	r0, r2
 800b708:	4619      	mov	r1, r3
 800b70a:	4603      	mov	r3, r0
 800b70c:	4622      	mov	r2, r4
 800b70e:	189b      	adds	r3, r3, r2
 800b710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b714:	462b      	mov	r3, r5
 800b716:	460a      	mov	r2, r1
 800b718:	eb42 0303 	adc.w	r3, r2, r3
 800b71c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b720:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b724:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b728:	f7f5 fbdc 	bl	8000ee4 <__aeabi_ldivmod>
 800b72c:	4602      	mov	r2, r0
 800b72e:	460b      	mov	r3, r1
 800b730:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
		var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 800b734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800b73e:	b21b      	sxth	r3, r3
 800b740:	17da      	asrs	r2, r3, #31
 800b742:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b744:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b746:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b74a:	f04f 0000 	mov.w	r0, #0
 800b74e:	f04f 0100 	mov.w	r1, #0
 800b752:	0b50      	lsrs	r0, r2, #13
 800b754:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b758:	1359      	asrs	r1, r3, #13
 800b75a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800b75e:	462b      	mov	r3, r5
 800b760:	fb00 f203 	mul.w	r2, r0, r3
 800b764:	4623      	mov	r3, r4
 800b766:	fb03 f301 	mul.w	r3, r3, r1
 800b76a:	4413      	add	r3, r2
 800b76c:	4622      	mov	r2, r4
 800b76e:	fba2 1200 	umull	r1, r2, r2, r0
 800b772:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b776:	460a      	mov	r2, r1
 800b778:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800b77c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b780:	4413      	add	r3, r2
 800b782:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b786:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 800b78a:	f04f 0000 	mov.w	r0, #0
 800b78e:	f04f 0100 	mov.w	r1, #0
 800b792:	0b50      	lsrs	r0, r2, #13
 800b794:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b798:	1359      	asrs	r1, r3, #13
 800b79a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800b79e:	462b      	mov	r3, r5
 800b7a0:	fb00 f203 	mul.w	r2, r0, r3
 800b7a4:	4623      	mov	r3, r4
 800b7a6:	fb03 f301 	mul.w	r3, r3, r1
 800b7aa:	4413      	add	r3, r2
 800b7ac:	4622      	mov	r2, r4
 800b7ae:	fba2 1200 	umull	r1, r2, r2, r0
 800b7b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b7b6:	460a      	mov	r2, r1
 800b7b8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800b7bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7c6:	f04f 0200 	mov.w	r2, #0
 800b7ca:	f04f 0300 	mov.w	r3, #0
 800b7ce:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	0e4a      	lsrs	r2, r1, #25
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800b7dc:	4629      	mov	r1, r5
 800b7de:	164b      	asrs	r3, r1, #25
 800b7e0:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
		var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 800b7e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800b7ee:	b21b      	sxth	r3, r3
 800b7f0:	17da      	asrs	r2, r3, #31
 800b7f2:	673b      	str	r3, [r7, #112]	@ 0x70
 800b7f4:	677a      	str	r2, [r7, #116]	@ 0x74
 800b7f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800b7fa:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800b7fe:	462a      	mov	r2, r5
 800b800:	fb02 f203 	mul.w	r2, r2, r3
 800b804:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800b808:	4621      	mov	r1, r4
 800b80a:	fb01 f303 	mul.w	r3, r1, r3
 800b80e:	4413      	add	r3, r2
 800b810:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 800b814:	4621      	mov	r1, r4
 800b816:	fba2 1201 	umull	r1, r2, r2, r1
 800b81a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b81e:	460a      	mov	r2, r1
 800b820:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800b824:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b828:	4413      	add	r3, r2
 800b82a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b82e:	f04f 0200 	mov.w	r2, #0
 800b832:	f04f 0300 	mov.w	r3, #0
 800b836:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800b83a:	4621      	mov	r1, r4
 800b83c:	0cca      	lsrs	r2, r1, #19
 800b83e:	4629      	mov	r1, r5
 800b840:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b844:	4629      	mov	r1, r5
 800b846:	14cb      	asrs	r3, r1, #19
 800b848:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
		P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 800b84c:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800b850:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 800b854:	1884      	adds	r4, r0, r2
 800b856:	66bc      	str	r4, [r7, #104]	@ 0x68
 800b858:	eb41 0303 	adc.w	r3, r1, r3
 800b85c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b85e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b862:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800b866:	4621      	mov	r1, r4
 800b868:	1889      	adds	r1, r1, r2
 800b86a:	6639      	str	r1, [r7, #96]	@ 0x60
 800b86c:	4629      	mov	r1, r5
 800b86e:	eb43 0101 	adc.w	r1, r3, r1
 800b872:	6679      	str	r1, [r7, #100]	@ 0x64
 800b874:	f04f 0000 	mov.w	r0, #0
 800b878:	f04f 0100 	mov.w	r1, #0
 800b87c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b880:	4623      	mov	r3, r4
 800b882:	0a18      	lsrs	r0, r3, #8
 800b884:	462b      	mov	r3, r5
 800b886:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b88a:	462b      	mov	r3, r5
 800b88c:	1219      	asrs	r1, r3, #8
 800b88e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b898:	b21b      	sxth	r3, r3
 800b89a:	17da      	asrs	r2, r3, #31
 800b89c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b89e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b8a0:	f04f 0200 	mov.w	r2, #0
 800b8a4:	f04f 0300 	mov.w	r3, #0
 800b8a8:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 800b8ac:	464c      	mov	r4, r9
 800b8ae:	0123      	lsls	r3, r4, #4
 800b8b0:	4644      	mov	r4, r8
 800b8b2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800b8b6:	4644      	mov	r4, r8
 800b8b8:	0122      	lsls	r2, r4, #4
 800b8ba:	1884      	adds	r4, r0, r2
 800b8bc:	603c      	str	r4, [r7, #0]
 800b8be:	eb41 0303 	adc.w	r3, r1, r3
 800b8c2:	607b      	str	r3, [r7, #4]
 800b8c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b8c8:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
		}

		BME->datas.pressure = ((float)P / 256.0 / 100.0);
 800b8cc:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 800b8d0:	f7f5 faca 	bl	8000e68 <__aeabi_l2f>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7f4 fe56 	bl	8000588 <__aeabi_f2d>
 800b8dc:	f04f 0200 	mov.w	r2, #0
 800b8e0:	4b4e      	ldr	r3, [pc, #312]	@ (800ba1c <bme280_update+0x79c>)
 800b8e2:	f7f4 ffd3 	bl	800088c <__aeabi_ddiv>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4610      	mov	r0, r2
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	f04f 0200 	mov.w	r2, #0
 800b8f2:	4b4b      	ldr	r3, [pc, #300]	@ (800ba20 <bme280_update+0x7a0>)
 800b8f4:	f7f4 ffca 	bl	800088c <__aeabi_ddiv>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4610      	mov	r0, r2
 800b8fe:	4619      	mov	r1, r3
 800b900:	f7f5 f992 	bl	8000c28 <__aeabi_d2f>
 800b904:	4602      	mov	r2, r0
 800b906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b90a:	611a      	str	r2, [r3, #16]

		//for humidity
		uint32_t var_h, adc_H;
		adc_H = uh;
 800b90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800b910:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

		var_h = (t_fine - ((int32_t)76800));
 800b914:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800b918:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 800b91c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 800b920:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800b924:	039a      	lsls	r2, r3, #14
 800b926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800b930:	051b      	lsls	r3, r3, #20
 800b932:	1ad2      	subs	r2, r2, r3
 800b934:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800b93e:	4619      	mov	r1, r3
 800b940:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b944:	fb01 f303 	mul.w	r3, r1, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800b94e:	0bdb      	lsrs	r3, r3, #15
 800b950:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 800b95a:	4611      	mov	r1, r2
 800b95c:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b960:	fb01 f202 	mul.w	r2, r1, r2
 800b964:	0a92      	lsrs	r2, r2, #10
 800b966:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800b96a:	6809      	ldr	r1, [r1, #0]
 800b96c:	7f09      	ldrb	r1, [r1, #28]
 800b96e:	4608      	mov	r0, r1
 800b970:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 800b974:	fb00 f101 	mul.w	r1, r0, r1
 800b978:	0ac9      	lsrs	r1, r1, #11
 800b97a:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 800b97e:	fb01 f202 	mul.w	r2, r1, r2
 800b982:	0a92      	lsrs	r2, r2, #10
 800b984:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b988:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 800b98c:	6809      	ldr	r1, [r1, #0]
 800b98e:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800b992:	fb01 f202 	mul.w	r2, r1, r2
 800b996:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b99a:	0b92      	lsrs	r2, r2, #14
 800b99c:	fb02 f303 	mul.w	r3, r2, r3
 800b9a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 800b9a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b9a8:	0bdb      	lsrs	r3, r3, #15
 800b9aa:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b9ae:	0bd2      	lsrs	r2, r2, #15
 800b9b0:	fb02 f303 	mul.w	r3, r2, r3
 800b9b4:	09db      	lsrs	r3, r3, #7
 800b9b6:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 800b9ba:	6812      	ldr	r2, [r2, #0]
 800b9bc:	7e12      	ldrb	r2, [r2, #24]
 800b9be:	fb02 f303 	mul.w	r3, r2, r3
 800b9c2:	091b      	lsrs	r3, r3, #4
 800b9c4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		var_h = (var_h < 0 ? 0 : var_h);
		var_h = (var_h > 419430400 ? 419430400 : var_h);
 800b9ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b9d2:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800b9d6:	bf28      	it	cs
 800b9d8:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 800b9dc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		BME->datas.humidity = ((float)(var_h >> 12)) / 1024.0;
 800b9e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800b9e4:	0b1b      	lsrs	r3, r3, #12
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9ee:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800ba24 <bme280_update+0x7a4>
 800b9f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fa:	edc3 7a05 	vstr	s15, [r3, #20]

		//get altitude
		bme280_get_altitude(BME);
 800b9fe:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 800ba02:	f7ff fa1d 	bl	800ae40 <bme280_get_altitude>
		BME->flags.is_bme_updated_1 = 0;
 800ba06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

}
 800ba10:	bf00      	nop
 800ba12:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800ba16:	46bd      	mov	sp, r7
 800ba18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba1c:	40700000 	.word	0x40700000
 800ba20:	40590000 	.word	0x40590000
 800ba24:	44800000 	.word	0x44800000

0800ba28 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af04      	add	r7, sp, #16
 800ba2e:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800ba40:	4b23      	ldr	r3, [pc, #140]	@ (800bad0 <bmi088_init+0xa8>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 800ba46:	4b23      	ldr	r3, [pc, #140]	@ (800bad4 <bmi088_init+0xac>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d107      	bne.n	800ba68 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 800ba58:	2101      	movs	r1, #1
 800ba5a:	2018      	movs	r0, #24
 800ba5c:	f000 fdf4 	bl	800c648 <calloc>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	68d8      	ldr	r0, [r3, #12]
 800ba6c:	2332      	movs	r3, #50	@ 0x32
 800ba6e:	9302      	str	r3, [sp, #8]
 800ba70:	2301      	movs	r3, #1
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	f107 030c 	add.w	r3, r7, #12
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2130      	movs	r1, #48	@ 0x30
 800ba80:	f7fb f87e 	bl	8006b80 <HAL_I2C_Mem_Read>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68d8      	ldr	r0, [r3, #12]
 800ba8c:	2332      	movs	r3, #50	@ 0x32
 800ba8e:	9302      	str	r3, [sp, #8]
 800ba90:	2301      	movs	r3, #1
 800ba92:	9301      	str	r3, [sp, #4]
 800ba94:	f107 030c 	add.w	r3, r7, #12
 800ba98:	3301      	adds	r3, #1
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	2200      	movs	r2, #0
 800baa0:	21d0      	movs	r1, #208	@ 0xd0
 800baa2:	f7fb f86d 	bl	8006b80 <HAL_I2C_Mem_Read>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 800baaa:	7b3b      	ldrb	r3, [r7, #12]
 800baac:	2b1e      	cmp	r3, #30
 800baae:	d003      	beq.n	800bab8 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	f043 0301 	orr.w	r3, r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 800bab8:	7b7b      	ldrb	r3, [r7, #13]
 800baba:	2b0f      	cmp	r3, #15
 800babc:	d003      	beq.n	800bac6 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	f043 0302 	orr.w	r3, r3, #2
 800bac4:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 800bac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20001b08 	.word	0x20001b08
 800bad4:	20001b09 	.word	0x20001b09

0800bad8 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af04      	add	r7, sp, #16
 800bade:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7f9 fea7 	bl	800583a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7f9 fea1 	bl	800583a <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 800baf8:	2300      	movs	r3, #0
 800bafa:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800bafc:	2301      	movs	r3, #1
 800bafe:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68d8      	ldr	r0, [r3, #12]
 800bb04:	2364      	movs	r3, #100	@ 0x64
 800bb06:	9302      	str	r3, [sp, #8]
 800bb08:	2301      	movs	r3, #1
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	f107 030c 	add.w	r3, r7, #12
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	2301      	movs	r3, #1
 800bb14:	227c      	movs	r2, #124	@ 0x7c
 800bb16:	2130      	movs	r1, #48	@ 0x30
 800bb18:	f7fa ff38 	bl	800698c <HAL_I2C_Mem_Write>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 800bb26:	2300      	movs	r3, #0
 800bb28:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68d8      	ldr	r0, [r3, #12]
 800bb2e:	2364      	movs	r3, #100	@ 0x64
 800bb30:	9302      	str	r3, [sp, #8]
 800bb32:	2301      	movs	r3, #1
 800bb34:	9301      	str	r3, [sp, #4]
 800bb36:	f107 030c 	add.w	r3, r7, #12
 800bb3a:	9300      	str	r3, [sp, #0]
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	227d      	movs	r2, #125	@ 0x7d
 800bb40:	2130      	movs	r1, #48	@ 0x30
 800bb42:	f7fa ff23 	bl	800698c <HAL_I2C_Mem_Write>
 800bb46:	4603      	mov	r3, r0
 800bb48:	461a      	mov	r2, r3
 800bb4a:	7bfb      	ldrb	r3, [r7, #15]
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800bb50:	2014      	movs	r0, #20
 800bb52:	f7f9 f949 	bl	8004de8 <HAL_Delay>

	buf[0] = ACC_RESET;
 800bb56:	23b6      	movs	r3, #182	@ 0xb6
 800bb58:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68d8      	ldr	r0, [r3, #12]
 800bb5e:	2364      	movs	r3, #100	@ 0x64
 800bb60:	9302      	str	r3, [sp, #8]
 800bb62:	2301      	movs	r3, #1
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	f107 030c 	add.w	r3, r7, #12
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	227e      	movs	r2, #126	@ 0x7e
 800bb70:	2130      	movs	r1, #48	@ 0x30
 800bb72:	f7fa ff0b 	bl	800698c <HAL_I2C_Mem_Write>
 800bb76:	4603      	mov	r3, r0
 800bb78:	461a      	mov	r2, r3
 800bb7a:	7bfb      	ldrb	r3, [r7, #15]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bb80:	7bfb      	ldrb	r3, [r7, #15]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <bmi088_config+0xb4>
 800bb86:	4bb4      	ldr	r3, [pc, #720]	@ (800be58 <bmi088_config+0x380>)
 800bb88:	22a0      	movs	r2, #160	@ 0xa0
 800bb8a:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800bb8c:	200a      	movs	r0, #10
 800bb8e:	f7f9 f92b 	bl	8004de8 <HAL_Delay>

	buf[0] = FIFO_RESET;
 800bb92:	23b0      	movs	r3, #176	@ 0xb0
 800bb94:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68d8      	ldr	r0, [r3, #12]
 800bb9a:	2364      	movs	r3, #100	@ 0x64
 800bb9c:	9302      	str	r3, [sp, #8]
 800bb9e:	2301      	movs	r3, #1
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	f107 030c 	add.w	r3, r7, #12
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	2301      	movs	r3, #1
 800bbaa:	227e      	movs	r2, #126	@ 0x7e
 800bbac:	2130      	movs	r1, #48	@ 0x30
 800bbae:	f7fa feed 	bl	800698c <HAL_I2C_Mem_Write>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d002      	beq.n	800bbc8 <bmi088_config+0xf0>
 800bbc2:	4ba5      	ldr	r3, [pc, #660]	@ (800be58 <bmi088_config+0x380>)
 800bbc4:	22a5      	movs	r2, #165	@ 0xa5
 800bbc6:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800bbc8:	200a      	movs	r0, #10
 800bbca:	f7f9 f90d 	bl	8004de8 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800bbce:	23b6      	movs	r3, #182	@ 0xb6
 800bbd0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	68d8      	ldr	r0, [r3, #12]
 800bbd6:	2364      	movs	r3, #100	@ 0x64
 800bbd8:	9302      	str	r3, [sp, #8]
 800bbda:	2301      	movs	r3, #1
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	f107 030c 	add.w	r3, r7, #12
 800bbe2:	9300      	str	r3, [sp, #0]
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	2214      	movs	r2, #20
 800bbe8:	21d0      	movs	r1, #208	@ 0xd0
 800bbea:	f7fa fecf 	bl	800698c <HAL_I2C_Mem_Write>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	461a      	mov	r2, r3
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d002      	beq.n	800bc04 <bmi088_config+0x12c>
 800bbfe:	4b96      	ldr	r3, [pc, #600]	@ (800be58 <bmi088_config+0x380>)
 800bc00:	22aa      	movs	r2, #170	@ 0xaa
 800bc02:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 800bc04:	200a      	movs	r0, #10
 800bc06:	f7f9 f8ef 	bl	8004de8 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	7a9b      	ldrb	r3, [r3, #10]
 800bc0e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68d8      	ldr	r0, [r3, #12]
 800bc14:	2364      	movs	r3, #100	@ 0x64
 800bc16:	9302      	str	r3, [sp, #8]
 800bc18:	2301      	movs	r3, #1
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	f107 030c 	add.w	r3, r7, #12
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	2301      	movs	r3, #1
 800bc24:	220f      	movs	r2, #15
 800bc26:	21d0      	movs	r1, #208	@ 0xd0
 800bc28:	f7fa feb0 	bl	800698c <HAL_I2C_Mem_Write>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	461a      	mov	r2, r3
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <bmi088_config+0x16a>
 800bc3c:	4b86      	ldr	r3, [pc, #536]	@ (800be58 <bmi088_config+0x380>)
 800bc3e:	22b0      	movs	r2, #176	@ 0xb0
 800bc40:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7a5b      	ldrb	r3, [r3, #9]
 800bc46:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68d8      	ldr	r0, [r3, #12]
 800bc4c:	2314      	movs	r3, #20
 800bc4e:	9302      	str	r3, [sp, #8]
 800bc50:	2301      	movs	r3, #1
 800bc52:	9301      	str	r3, [sp, #4]
 800bc54:	f107 030c 	add.w	r3, r7, #12
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	2210      	movs	r2, #16
 800bc5e:	21d0      	movs	r1, #208	@ 0xd0
 800bc60:	f7fa fe94 	bl	800698c <HAL_I2C_Mem_Write>
 800bc64:	4603      	mov	r3, r0
 800bc66:	461a      	mov	r2, r3
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bc6e:	7bfb      	ldrb	r3, [r7, #15]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <bmi088_config+0x1a2>
 800bc74:	4b78      	ldr	r3, [pc, #480]	@ (800be58 <bmi088_config+0x380>)
 800bc76:	22b4      	movs	r2, #180	@ 0xb4
 800bc78:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	7a1b      	ldrb	r3, [r3, #8]
 800bc7e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68d8      	ldr	r0, [r3, #12]
 800bc84:	2314      	movs	r3, #20
 800bc86:	9302      	str	r3, [sp, #8]
 800bc88:	2301      	movs	r3, #1
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	f107 030c 	add.w	r3, r7, #12
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	2301      	movs	r3, #1
 800bc94:	2211      	movs	r2, #17
 800bc96:	21d0      	movs	r1, #208	@ 0xd0
 800bc98:	f7fa fe78 	bl	800698c <HAL_I2C_Mem_Write>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d002      	beq.n	800bcb2 <bmi088_config+0x1da>
 800bcac:	4b6a      	ldr	r3, [pc, #424]	@ (800be58 <bmi088_config+0x380>)
 800bcae:	22b8      	movs	r2, #184	@ 0xb8
 800bcb0:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 800bcb2:	2014      	movs	r0, #20
 800bcb4:	f7f9 f898 	bl	8004de8 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 800bcb8:	2380      	movs	r3, #128	@ 0x80
 800bcba:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68d8      	ldr	r0, [r3, #12]
 800bcc0:	2314      	movs	r3, #20
 800bcc2:	9302      	str	r3, [sp, #8]
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	9301      	str	r3, [sp, #4]
 800bcc8:	f107 030c 	add.w	r3, r7, #12
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	2301      	movs	r3, #1
 800bcd0:	2215      	movs	r2, #21
 800bcd2:	21d0      	movs	r1, #208	@ 0xd0
 800bcd4:	f7fa fe5a 	bl	800698c <HAL_I2C_Mem_Write>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bce2:	7bfb      	ldrb	r3, [r7, #15]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <bmi088_config+0x216>
 800bce8:	4b5b      	ldr	r3, [pc, #364]	@ (800be58 <bmi088_config+0x380>)
 800bcea:	22be      	movs	r2, #190	@ 0xbe
 800bcec:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800bcee:	2305      	movs	r3, #5
 800bcf0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	68d8      	ldr	r0, [r3, #12]
 800bcf6:	2314      	movs	r3, #20
 800bcf8:	9302      	str	r3, [sp, #8]
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	f107 030c 	add.w	r3, r7, #12
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	2301      	movs	r3, #1
 800bd06:	2216      	movs	r2, #22
 800bd08:	21d0      	movs	r1, #208	@ 0xd0
 800bd0a:	f7fa fe3f 	bl	800698c <HAL_I2C_Mem_Write>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	461a      	mov	r2, r3
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <bmi088_config+0x24c>
 800bd1e:	4b4e      	ldr	r3, [pc, #312]	@ (800be58 <bmi088_config+0x380>)
 800bd20:	22c2      	movs	r2, #194	@ 0xc2
 800bd22:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 800bd24:	2381      	movs	r3, #129	@ 0x81
 800bd26:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	68d8      	ldr	r0, [r3, #12]
 800bd2c:	2314      	movs	r3, #20
 800bd2e:	9302      	str	r3, [sp, #8]
 800bd30:	2301      	movs	r3, #1
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	f107 030c 	add.w	r3, r7, #12
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	2218      	movs	r2, #24
 800bd3e:	21d0      	movs	r1, #208	@ 0xd0
 800bd40:	f7fa fe24 	bl	800698c <HAL_I2C_Mem_Write>
 800bd44:	4603      	mov	r3, r0
 800bd46:	461a      	mov	r2, r3
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bd4e:	7bfb      	ldrb	r3, [r7, #15]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <bmi088_config+0x282>
 800bd54:	4b40      	ldr	r3, [pc, #256]	@ (800be58 <bmi088_config+0x380>)
 800bd56:	22c6      	movs	r2, #198	@ 0xc6
 800bd58:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800bd5a:	2304      	movs	r3, #4
 800bd5c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68d8      	ldr	r0, [r3, #12]
 800bd62:	2314      	movs	r3, #20
 800bd64:	9302      	str	r3, [sp, #8]
 800bd66:	2301      	movs	r3, #1
 800bd68:	9301      	str	r3, [sp, #4]
 800bd6a:	f107 030c 	add.w	r3, r7, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	2301      	movs	r3, #1
 800bd72:	227d      	movs	r2, #125	@ 0x7d
 800bd74:	2130      	movs	r1, #48	@ 0x30
 800bd76:	f7fa fe09 	bl	800698c <HAL_I2C_Mem_Write>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	7bfb      	ldrb	r3, [r7, #15]
 800bd80:	4313      	orrs	r3, r2
 800bd82:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <bmi088_config+0x2b8>
 800bd8a:	4b33      	ldr	r3, [pc, #204]	@ (800be58 <bmi088_config+0x380>)
 800bd8c:	22cb      	movs	r2, #203	@ 0xcb
 800bd8e:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800bd90:	2008      	movs	r0, #8
 800bd92:	f7f9 f829 	bl	8004de8 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	791b      	ldrb	r3, [r3, #4]
 800bd9a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68d8      	ldr	r0, [r3, #12]
 800bda0:	2314      	movs	r3, #20
 800bda2:	9302      	str	r3, [sp, #8]
 800bda4:	2301      	movs	r3, #1
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	f107 030c 	add.w	r3, r7, #12
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	2301      	movs	r3, #1
 800bdb0:	227c      	movs	r2, #124	@ 0x7c
 800bdb2:	2130      	movs	r1, #48	@ 0x30
 800bdb4:	f7fa fdea 	bl	800698c <HAL_I2C_Mem_Write>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <bmi088_config+0x2f6>
 800bdc8:	4b23      	ldr	r3, [pc, #140]	@ (800be58 <bmi088_config+0x380>)
 800bdca:	22d0      	movs	r2, #208	@ 0xd0
 800bdcc:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800bdce:	2008      	movs	r0, #8
 800bdd0:	f7f9 f80a 	bl	8004de8 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	799b      	ldrb	r3, [r3, #6]
 800bdd8:	b25b      	sxtb	r3, r3
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	b25a      	sxtb	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	79db      	ldrb	r3, [r3, #7]
 800bde2:	b25b      	sxtb	r3, r3
 800bde4:	4313      	orrs	r3, r2
 800bde6:	b25b      	sxtb	r3, r3
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	68d8      	ldr	r0, [r3, #12]
 800bdf0:	2314      	movs	r3, #20
 800bdf2:	9302      	str	r3, [sp, #8]
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	f107 030c 	add.w	r3, r7, #12
 800bdfc:	9300      	str	r3, [sp, #0]
 800bdfe:	2301      	movs	r3, #1
 800be00:	2240      	movs	r2, #64	@ 0x40
 800be02:	2130      	movs	r1, #48	@ 0x30
 800be04:	f7fa fdc2 	bl	800698c <HAL_I2C_Mem_Write>
 800be08:	4603      	mov	r3, r0
 800be0a:	461a      	mov	r2, r3
 800be0c:	7bfb      	ldrb	r3, [r7, #15]
 800be0e:	4313      	orrs	r3, r2
 800be10:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800be12:	7bfb      	ldrb	r3, [r7, #15]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d002      	beq.n	800be1e <bmi088_config+0x346>
 800be18:	4b0f      	ldr	r3, [pc, #60]	@ (800be58 <bmi088_config+0x380>)
 800be1a:	22d5      	movs	r2, #213	@ 0xd5
 800be1c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	795b      	ldrb	r3, [r3, #5]
 800be22:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	68d8      	ldr	r0, [r3, #12]
 800be28:	2314      	movs	r3, #20
 800be2a:	9302      	str	r3, [sp, #8]
 800be2c:	2301      	movs	r3, #1
 800be2e:	9301      	str	r3, [sp, #4]
 800be30:	f107 030c 	add.w	r3, r7, #12
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	2301      	movs	r3, #1
 800be38:	2241      	movs	r2, #65	@ 0x41
 800be3a:	2130      	movs	r1, #48	@ 0x30
 800be3c:	f7fa fda6 	bl	800698c <HAL_I2C_Mem_Write>
 800be40:	4603      	mov	r3, r0
 800be42:	461a      	mov	r2, r3
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	4313      	orrs	r3, r2
 800be48:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d005      	beq.n	800be5c <bmi088_config+0x384>
 800be50:	4b01      	ldr	r3, [pc, #4]	@ (800be58 <bmi088_config+0x380>)
 800be52:	22d9      	movs	r2, #217	@ 0xd9
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	e001      	b.n	800be5c <bmi088_config+0x384>
 800be58:	20001b0c 	.word	0x20001b0c

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800be5c:	230a      	movs	r3, #10
 800be5e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68d8      	ldr	r0, [r3, #12]
 800be64:	2314      	movs	r3, #20
 800be66:	9302      	str	r3, [sp, #8]
 800be68:	2301      	movs	r3, #1
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	f107 030c 	add.w	r3, r7, #12
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	2301      	movs	r3, #1
 800be74:	2253      	movs	r2, #83	@ 0x53
 800be76:	2130      	movs	r1, #48	@ 0x30
 800be78:	f7fa fd88 	bl	800698c <HAL_I2C_Mem_Write>
 800be7c:	4603      	mov	r3, r0
 800be7e:	461a      	mov	r2, r3
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	4313      	orrs	r3, r2
 800be84:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 800be86:	2304      	movs	r3, #4
 800be88:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68d8      	ldr	r0, [r3, #12]
 800be8e:	2314      	movs	r3, #20
 800be90:	9302      	str	r3, [sp, #8]
 800be92:	2301      	movs	r3, #1
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	f107 030c 	add.w	r3, r7, #12
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2301      	movs	r3, #1
 800be9e:	2258      	movs	r2, #88	@ 0x58
 800bea0:	2130      	movs	r1, #48	@ 0x30
 800bea2:	f7fa fd73 	bl	800698c <HAL_I2C_Mem_Write>
 800bea6:	4603      	mov	r3, r0
 800bea8:	461a      	mov	r2, r3
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	4313      	orrs	r3, r2
 800beae:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7f9 fcb1 	bl	800581e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f7f9 fcab 	bl	800581e <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 800bec8:	2046      	movs	r0, #70	@ 0x46
 800beca:	f7f8 ff8d 	bl	8004de8 <HAL_Delay>
}
 800bece:	bf00      	nop
 800bed0:	3710      	adds	r7, #16
 800bed2:	46bd      	mov	sp, r7
 800bed4:	bd80      	pop	{r7, pc}
 800bed6:	bf00      	nop

0800bed8 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 800bed8:	b5b0      	push	{r4, r5, r7, lr}
 800beda:	b092      	sub	sp, #72	@ 0x48
 800bedc:	af04      	add	r7, sp, #16
 800bede:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	785b      	ldrb	r3, [r3, #1]
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 81d9 	beq.w	800c2a2 <bmi088_update+0x3ca>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	68d8      	ldr	r0, [r3, #12]
 800bef4:	2314      	movs	r3, #20
 800bef6:	9302      	str	r3, [sp, #8]
 800bef8:	2309      	movs	r3, #9
 800befa:	9301      	str	r3, [sp, #4]
 800befc:	f107 0314 	add.w	r3, r7, #20
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	2301      	movs	r3, #1
 800bf04:	2212      	movs	r2, #18
 800bf06:	2130      	movs	r1, #48	@ 0x30
 800bf08:	f7fa fe3a 	bl	8006b80 <HAL_I2C_Mem_Read>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68d8      	ldr	r0, [r3, #12]
 800bf16:	2314      	movs	r3, #20
 800bf18:	9302      	str	r3, [sp, #8]
 800bf1a:	2302      	movs	r3, #2
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	f107 0310 	add.w	r3, r7, #16
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	2301      	movs	r3, #1
 800bf26:	2222      	movs	r2, #34	@ 0x22
 800bf28:	2130      	movs	r1, #48	@ 0x30
 800bf2a:	f7fa fe29 	bl	8006b80 <HAL_I2C_Mem_Read>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 800bf34:	7c3b      	ldrb	r3, [r7, #16]
 800bf36:	b21b      	sxth	r3, r3
 800bf38:	00db      	lsls	r3, r3, #3
 800bf3a:	b21a      	sxth	r2, r3
 800bf3c:	7c7b      	ldrb	r3, [r7, #17]
 800bf3e:	095b      	lsrs	r3, r3, #5
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	b21b      	sxth	r3, r3
 800bf44:	4313      	orrs	r3, r2
 800bf46:	b21b      	sxth	r3, r3
 800bf48:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800bf4e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bf50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf54:	d305      	bcc.n	800bf62 <bmi088_update+0x8a>
				Temp_int11 = Temp_uint11 - 2048;
 800bf56:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bf58:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	867b      	strh	r3, [r7, #50]	@ 0x32
 800bf60:	e023      	b.n	800bfaa <bmi088_update+0xd2>
			}
			else{
				Temp_int11 = Temp_uint11;
 800bf62:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800bf64:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 800bf66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800bf6a:	ee07 3a90 	vmov	s15, r3
 800bf6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf72:	ee17 0a90 	vmov	r0, s15
 800bf76:	f7f4 fb07 	bl	8000588 <__aeabi_f2d>
 800bf7a:	f04f 0200 	mov.w	r2, #0
 800bf7e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bf82:	f7f4 fb59 	bl	8000638 <__aeabi_dmul>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f04f 0200 	mov.w	r2, #0
 800bf92:	4bb5      	ldr	r3, [pc, #724]	@ (800c268 <bmi088_update+0x390>)
 800bf94:	f7f4 f99a 	bl	80002cc <__adddf3>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	f7f4 fe42 	bl	8000c28 <__aeabi_d2f>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	649a      	str	r2, [r3, #72]	@ 0x48
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 800bfaa:	7f3b      	ldrb	r3, [r7, #28]
 800bfac:	041a      	lsls	r2, r3, #16
 800bfae:	7efb      	ldrb	r3, [r7, #27]
 800bfb0:	021b      	lsls	r3, r3, #8
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	7eba      	ldrb	r2, [r7, #26]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 800bfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfbc:	ee07 3a90 	vmov	s15, r3
 800bfc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfc4:	ee17 0a90 	vmov	r0, s15
 800bfc8:	f7f4 fade 	bl	8000588 <__aeabi_f2d>
 800bfcc:	a3a0      	add	r3, pc, #640	@ (adr r3, 800c250 <bmi088_update+0x378>)
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	f7f4 fb31 	bl	8000638 <__aeabi_dmul>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4610      	mov	r0, r2
 800bfdc:	4619      	mov	r1, r3
 800bfde:	a39e      	add	r3, pc, #632	@ (adr r3, 800c258 <bmi088_update+0x380>)
 800bfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe4:	f7f4 fc52 	bl	800088c <__aeabi_ddiv>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4610      	mov	r0, r2
 800bfee:	4619      	mov	r1, r3
 800bff0:	f7f4 fe1a 	bl	8000c28 <__aeabi_d2f>
 800bff4:	4602      	mov	r2, r0
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	64da      	str	r2, [r3, #76]	@ 0x4c

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 800bffa:	7e7b      	ldrb	r3, [r7, #25]
 800bffc:	b21b      	sxth	r3, r3
 800bffe:	021b      	lsls	r3, r3, #8
 800c000:	b21a      	sxth	r2, r3
 800c002:	7e3b      	ldrb	r3, [r7, #24]
 800c004:	b21b      	sxth	r3, r3
 800c006:	4313      	orrs	r3, r2
 800c008:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 800c00a:	7dfb      	ldrb	r3, [r7, #23]
 800c00c:	b21b      	sxth	r3, r3
 800c00e:	021b      	lsls	r3, r3, #8
 800c010:	b21a      	sxth	r2, r3
 800c012:	7dbb      	ldrb	r3, [r7, #22]
 800c014:	b21b      	sxth	r3, r3
 800c016:	4313      	orrs	r3, r2
 800c018:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 800c01a:	7d7b      	ldrb	r3, [r7, #21]
 800c01c:	b21b      	sxth	r3, r3
 800c01e:	021b      	lsls	r3, r3, #8
 800c020:	b21a      	sxth	r2, r3
 800c022:	7d3b      	ldrb	r3, [r7, #20]
 800c024:	b21b      	sxth	r3, r3
 800c026:	4313      	orrs	r3, r2
 800c028:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = (float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET;
 800c02a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c036:	ee17 0a90 	vmov	r0, s15
 800c03a:	f7f4 faa5 	bl	8000588 <__aeabi_f2d>
 800c03e:	f04f 0200 	mov.w	r2, #0
 800c042:	4b8a      	ldr	r3, [pc, #552]	@ (800c26c <bmi088_update+0x394>)
 800c044:	f7f4 fc22 	bl	800088c <__aeabi_ddiv>
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	4610      	mov	r0, r2
 800c04e:	4619      	mov	r1, r3
 800c050:	f04f 0200 	mov.w	r2, #0
 800c054:	4b86      	ldr	r3, [pc, #536]	@ (800c270 <bmi088_update+0x398>)
 800c056:	f7f4 faef 	bl	8000638 <__aeabi_dmul>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	4610      	mov	r0, r2
 800c060:	4619      	mov	r1, r3
 800c062:	f04f 0200 	mov.w	r2, #0
 800c066:	4b83      	ldr	r3, [pc, #524]	@ (800c274 <bmi088_update+0x39c>)
 800c068:	f7f4 fae6 	bl	8000638 <__aeabi_dmul>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	4614      	mov	r4, r2
 800c072:	461d      	mov	r5, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	795b      	ldrb	r3, [r3, #5]
 800c078:	3301      	adds	r3, #1
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c082:	ee17 0a90 	vmov	r0, s15
 800c086:	f7f4 fa7f 	bl	8000588 <__aeabi_f2d>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	ec43 2b11 	vmov	d1, r2, r3
 800c092:	ed9f 0b73 	vldr	d0, [pc, #460]	@ 800c260 <bmi088_update+0x388>
 800c096:	f005 fb09 	bl	80116ac <pow>
 800c09a:	ec53 2b10 	vmov	r2, r3, d0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f7f4 fac9 	bl	8000638 <__aeabi_dmul>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4610      	mov	r0, r2
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f04f 0200 	mov.w	r2, #0
 800c0b2:	4b71      	ldr	r3, [pc, #452]	@ (800c278 <bmi088_update+0x3a0>)
 800c0b4:	f7f4 f908 	bl	80002c8 <__aeabi_dsub>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4610      	mov	r0, r2
 800c0be:	4619      	mov	r1, r3
 800c0c0:	f7f4 fdb2 	bl	8000c28 <__aeabi_d2f>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	645a      	str	r2, [r3, #68]	@ 0x44
			BMI->datas.acc_y = (float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET;
 800c0ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0d6:	ee17 0a90 	vmov	r0, s15
 800c0da:	f7f4 fa55 	bl	8000588 <__aeabi_f2d>
 800c0de:	f04f 0200 	mov.w	r2, #0
 800c0e2:	4b62      	ldr	r3, [pc, #392]	@ (800c26c <bmi088_update+0x394>)
 800c0e4:	f7f4 fbd2 	bl	800088c <__aeabi_ddiv>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4610      	mov	r0, r2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	f04f 0200 	mov.w	r2, #0
 800c0f4:	4b5e      	ldr	r3, [pc, #376]	@ (800c270 <bmi088_update+0x398>)
 800c0f6:	f7f4 fa9f 	bl	8000638 <__aeabi_dmul>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4610      	mov	r0, r2
 800c100:	4619      	mov	r1, r3
 800c102:	f04f 0200 	mov.w	r2, #0
 800c106:	4b5b      	ldr	r3, [pc, #364]	@ (800c274 <bmi088_update+0x39c>)
 800c108:	f7f4 fa96 	bl	8000638 <__aeabi_dmul>
 800c10c:	4602      	mov	r2, r0
 800c10e:	460b      	mov	r3, r1
 800c110:	4614      	mov	r4, r2
 800c112:	461d      	mov	r5, r3
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	795b      	ldrb	r3, [r3, #5]
 800c118:	3301      	adds	r3, #1
 800c11a:	ee07 3a90 	vmov	s15, r3
 800c11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c122:	ee17 0a90 	vmov	r0, s15
 800c126:	f7f4 fa2f 	bl	8000588 <__aeabi_f2d>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	ec43 2b11 	vmov	d1, r2, r3
 800c132:	ed9f 0b4b 	vldr	d0, [pc, #300]	@ 800c260 <bmi088_update+0x388>
 800c136:	f005 fab9 	bl	80116ac <pow>
 800c13a:	ec53 2b10 	vmov	r2, r3, d0
 800c13e:	4620      	mov	r0, r4
 800c140:	4629      	mov	r1, r5
 800c142:	f7f4 fa79 	bl	8000638 <__aeabi_dmul>
 800c146:	4602      	mov	r2, r0
 800c148:	460b      	mov	r3, r1
 800c14a:	4610      	mov	r0, r2
 800c14c:	4619      	mov	r1, r3
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	4b4a      	ldr	r3, [pc, #296]	@ (800c27c <bmi088_update+0x3a4>)
 800c154:	f7f4 f8ba 	bl	80002cc <__adddf3>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4610      	mov	r0, r2
 800c15e:	4619      	mov	r1, r3
 800c160:	f7f4 fd62 	bl	8000c28 <__aeabi_d2f>
 800c164:	4602      	mov	r2, r0
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	641a      	str	r2, [r3, #64]	@ 0x40
			BMI->datas.acc_x = (float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET;
 800c16a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800c16e:	ee07 3a90 	vmov	s15, r3
 800c172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c176:	ee17 0a90 	vmov	r0, s15
 800c17a:	f7f4 fa05 	bl	8000588 <__aeabi_f2d>
 800c17e:	f04f 0200 	mov.w	r2, #0
 800c182:	4b3a      	ldr	r3, [pc, #232]	@ (800c26c <bmi088_update+0x394>)
 800c184:	f7f4 fb82 	bl	800088c <__aeabi_ddiv>
 800c188:	4602      	mov	r2, r0
 800c18a:	460b      	mov	r3, r1
 800c18c:	4610      	mov	r0, r2
 800c18e:	4619      	mov	r1, r3
 800c190:	f04f 0200 	mov.w	r2, #0
 800c194:	4b36      	ldr	r3, [pc, #216]	@ (800c270 <bmi088_update+0x398>)
 800c196:	f7f4 fa4f 	bl	8000638 <__aeabi_dmul>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4610      	mov	r0, r2
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	f04f 0200 	mov.w	r2, #0
 800c1a6:	4b33      	ldr	r3, [pc, #204]	@ (800c274 <bmi088_update+0x39c>)
 800c1a8:	f7f4 fa46 	bl	8000638 <__aeabi_dmul>
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	461d      	mov	r5, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	795b      	ldrb	r3, [r3, #5]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	ee07 3a90 	vmov	s15, r3
 800c1be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c1c2:	ee17 0a90 	vmov	r0, s15
 800c1c6:	f7f4 f9df 	bl	8000588 <__aeabi_f2d>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	ec43 2b11 	vmov	d1, r2, r3
 800c1d2:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 800c260 <bmi088_update+0x388>
 800c1d6:	f005 fa69 	bl	80116ac <pow>
 800c1da:	ec53 2b10 	vmov	r2, r3, d0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fa29 	bl	8000638 <__aeabi_dmul>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	4b21      	ldr	r3, [pc, #132]	@ (800c278 <bmi088_update+0x3a0>)
 800c1f4:	f7f4 f86a 	bl	80002cc <__adddf3>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4619      	mov	r1, r3
 800c200:	f7f4 fd12 	bl	8000c28 <__aeabi_d2f>
 800c204:	4602      	mov	r2, r0
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	63da      	str	r2, [r3, #60]	@ 0x3c

			if(is_starded)
 800c20a:	4b1d      	ldr	r3, [pc, #116]	@ (800c280 <bmi088_update+0x3a8>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d03a      	beq.n	800c288 <bmi088_update+0x3b0>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800c21e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c222:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22a:	d502      	bpl.n	800c232 <bmi088_update+0x35a>
 800c22c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c284 <bmi088_update+0x3ac>
 800c230:	e007      	b.n	800c242 <bmi088_update+0x36a>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800c23e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
 800c248:	e021      	b.n	800c28e <bmi088_update+0x3b6>
 800c24a:	bf00      	nop
 800c24c:	f3af 8000 	nop.w
 800c250:	00000000 	.word	0x00000000
 800c254:	40438800 	.word	0x40438800
 800c258:	00000000 	.word	0x00000000
 800c25c:	412e8480 	.word	0x412e8480
 800c260:	00000000 	.word	0x00000000
 800c264:	40000000 	.word	0x40000000
 800c268:	40370000 	.word	0x40370000
 800c26c:	40e00000 	.word	0x40e00000
 800c270:	408f4000 	.word	0x408f4000
 800c274:	3ff80000 	.word	0x3ff80000
 800c278:	40100000 	.word	0x40100000
 800c27c:	402e0000 	.word	0x402e0000
 800c280:	20001b09 	.word	0x20001b09
 800c284:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 800c288:	4ba9      	ldr	r3, [pc, #676]	@ (800c530 <bmi088_update+0x658>)
 800c28a:	2201      	movs	r2, #1
 800c28c:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	651a      	str	r2, [r3, #80]	@ 0x50
			BMI->flags.isAccelUpdated = 0;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 800c29c:	4ba5      	ldr	r3, [pc, #660]	@ (800c534 <bmi088_update+0x65c>)
 800c29e:	2201      	movs	r2, #1
 800c2a0:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 813b 	beq.w	800c522 <bmi088_update+0x64a>
 800c2ac:	4ba1      	ldr	r3, [pc, #644]	@ (800c534 <bmi088_update+0x65c>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	f000 8136 	beq.w	800c522 <bmi088_update+0x64a>
		{
			if(is_starded){
 800c2b6:	4b9e      	ldr	r3, [pc, #632]	@ (800c530 <bmi088_update+0x658>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	f000 8129 	beq.w	800c512 <bmi088_update+0x63a>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68d8      	ldr	r0, [r3, #12]
 800c2c4:	230a      	movs	r3, #10
 800c2c6:	9302      	str	r3, [sp, #8]
 800c2c8:	2306      	movs	r3, #6
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	f107 0308 	add.w	r3, r7, #8
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	21d0      	movs	r1, #208	@ 0xd0
 800c2d8:	f7fa fc52 	bl	8006b80 <HAL_I2C_Mem_Read>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800c2e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	f040 811a 	bne.w	800c520 <bmi088_update+0x648>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 800c2ec:	7a7b      	ldrb	r3, [r7, #9]
 800c2ee:	b21b      	sxth	r3, r3
 800c2f0:	021b      	lsls	r3, r3, #8
 800c2f2:	b21a      	sxth	r2, r3
 800c2f4:	7a3b      	ldrb	r3, [r7, #8]
 800c2f6:	b21b      	sxth	r3, r3
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 800c2fc:	7afb      	ldrb	r3, [r7, #11]
 800c2fe:	b21b      	sxth	r3, r3
 800c300:	021b      	lsls	r3, r3, #8
 800c302:	b21a      	sxth	r2, r3
 800c304:	7abb      	ldrb	r3, [r7, #10]
 800c306:	b21b      	sxth	r3, r3
 800c308:	4313      	orrs	r3, r2
 800c30a:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 800c30c:	7b7b      	ldrb	r3, [r7, #13]
 800c30e:	b21b      	sxth	r3, r3
 800c310:	021b      	lsls	r3, r3, #8
 800c312:	b21a      	sxth	r2, r3
 800c314:	7b3b      	ldrb	r3, [r7, #12]
 800c316:	b21b      	sxth	r3, r3
 800c318:	4313      	orrs	r3, r2
 800c31a:	843b      	strh	r3, [r7, #32]
/*
				BMI->delta_angle_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][2]) * BMI->deltaTime;
				BMI->delta_angle_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][1]) * BMI->deltaTime;
				BMI->delta_angle_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - g_offset[0][0]) * BMI->deltaTime;
*/
				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]);
 800c31c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c320:	ee07 3a90 	vmov	s15, r3
 800c324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c328:	ee17 0a90 	vmov	r0, s15
 800c32c:	f7f4 f92c 	bl	8000588 <__aeabi_f2d>
 800c330:	a37d      	add	r3, pc, #500	@ (adr r3, 800c528 <bmi088_update+0x650>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	f7f4 faa9 	bl	800088c <__aeabi_ddiv>
 800c33a:	4602      	mov	r2, r0
 800c33c:	460b      	mov	r3, r1
 800c33e:	4614      	mov	r4, r2
 800c340:	461d      	mov	r5, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7a9b      	ldrb	r3, [r3, #10]
 800c346:	461a      	mov	r2, r3
 800c348:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c34c:	4113      	asrs	r3, r2
 800c34e:	ee07 3a90 	vmov	s15, r3
 800c352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c356:	ee17 0a90 	vmov	r0, s15
 800c35a:	f7f4 f915 	bl	8000588 <__aeabi_f2d>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f4 f967 	bl	8000638 <__aeabi_dmul>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4614      	mov	r4, r2
 800c370:	461d      	mov	r5, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f4 f905 	bl	8000588 <__aeabi_f2d>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4620      	mov	r0, r4
 800c384:	4629      	mov	r1, r5
 800c386:	f7f3 ff9f 	bl	80002c8 <__aeabi_dsub>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	4610      	mov	r0, r2
 800c390:	4619      	mov	r1, r3
 800c392:	f7f4 fc49 	bl	8000c28 <__aeabi_d2f>
 800c396:	4602      	mov	r2, r0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]);
 800c39c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800c3a0:	ee07 3a90 	vmov	s15, r3
 800c3a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3a8:	ee17 0a90 	vmov	r0, s15
 800c3ac:	f7f4 f8ec 	bl	8000588 <__aeabi_f2d>
 800c3b0:	a35d      	add	r3, pc, #372	@ (adr r3, 800c528 <bmi088_update+0x650>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	f7f4 fa69 	bl	800088c <__aeabi_ddiv>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4614      	mov	r4, r2
 800c3c0:	461d      	mov	r5, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	7a9b      	ldrb	r3, [r3, #10]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c3cc:	4113      	asrs	r3, r2
 800c3ce:	ee07 3a90 	vmov	s15, r3
 800c3d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3d6:	ee17 0a90 	vmov	r0, s15
 800c3da:	f7f4 f8d5 	bl	8000588 <__aeabi_f2d>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	f7f4 f927 	bl	8000638 <__aeabi_dmul>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4614      	mov	r4, r2
 800c3f0:	461d      	mov	r5, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7f4 f8c5 	bl	8000588 <__aeabi_f2d>
 800c3fe:	4602      	mov	r2, r0
 800c400:	460b      	mov	r3, r1
 800c402:	4620      	mov	r0, r4
 800c404:	4629      	mov	r1, r5
 800c406:	f7f3 ff5f 	bl	80002c8 <__aeabi_dsub>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	4610      	mov	r0, r2
 800c410:	4619      	mov	r1, r3
 800c412:	f7f4 fc09 	bl	8000c28 <__aeabi_d2f>
 800c416:	4602      	mov	r2, r0
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]);
 800c41c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c420:	ee07 3a90 	vmov	s15, r3
 800c424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c428:	ee17 0a90 	vmov	r0, s15
 800c42c:	f7f4 f8ac 	bl	8000588 <__aeabi_f2d>
 800c430:	a33d      	add	r3, pc, #244	@ (adr r3, 800c528 <bmi088_update+0x650>)
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f7f4 fa29 	bl	800088c <__aeabi_ddiv>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	4614      	mov	r4, r2
 800c440:	461d      	mov	r5, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	7a9b      	ldrb	r3, [r3, #10]
 800c446:	461a      	mov	r2, r3
 800c448:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800c44c:	4113      	asrs	r3, r2
 800c44e:	ee07 3a90 	vmov	s15, r3
 800c452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c456:	ee17 0a90 	vmov	r0, s15
 800c45a:	f7f4 f895 	bl	8000588 <__aeabi_f2d>
 800c45e:	4602      	mov	r2, r0
 800c460:	460b      	mov	r3, r1
 800c462:	4620      	mov	r0, r4
 800c464:	4629      	mov	r1, r5
 800c466:	f7f4 f8e7 	bl	8000638 <__aeabi_dmul>
 800c46a:	4602      	mov	r2, r0
 800c46c:	460b      	mov	r3, r1
 800c46e:	4614      	mov	r4, r2
 800c470:	461d      	mov	r5, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7f4 f885 	bl	8000588 <__aeabi_f2d>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4620      	mov	r0, r4
 800c484:	4629      	mov	r1, r5
 800c486:	f7f3 ff1f 	bl	80002c8 <__aeabi_dsub>
 800c48a:	4602      	mov	r2, r0
 800c48c:	460b      	mov	r3, r1
 800c48e:	4610      	mov	r0, r2
 800c490:	4619      	mov	r1, r3
 800c492:	f7f4 fbc9 	bl	8000c28 <__aeabi_d2f>
 800c496:	4602      	mov	r2, r0
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	621a      	str	r2, [r3, #32]

				BMI->datas.gyro_x_angle += (BMI->datas.gyro_x) * BMI->datas.delta_time;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	edd3 6a06 	vldr	s13, [r3, #24]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c4ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.gyro_y_angle += (BMI->datas.gyro_y) * BMI->datas.delta_time;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	edd3 6a07 	vldr	s13, [r3, #28]
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c4ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.gyro_z_angle += (BMI->datas.gyro_z) * BMI->datas.delta_time;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	edd3 6a08 	vldr	s13, [r3, #32]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800c4ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				if(BMI->IMU_callback != NULL)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c500:	2b00      	cmp	r3, #0
 800c502:	d003      	beq.n	800c50c <bmi088_update+0x634>
				{
					BMI->IMU_callback(BMI);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	4798      	blx	r3

				/*
				updateQuaternion(-BMI->gyro_z * M_PI / 180.0, BMI->gyro_x * M_PI / 180.0, -BMI->gyro_y * M_PI / 180.0, BMI->deltaTime);
				quaternionToEuler();
				*/
				is_gyro_renewed = 1;
 800c50c:	4b0a      	ldr	r3, [pc, #40]	@ (800c538 <bmi088_update+0x660>)
 800c50e:	2201      	movs	r2, #1
 800c510:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 800c518:	4b06      	ldr	r3, [pc, #24]	@ (800c534 <bmi088_update+0x65c>)
 800c51a:	2200      	movs	r2, #0
 800c51c:	701a      	strb	r2, [r3, #0]
 800c51e:	e000      	b.n	800c522 <bmi088_update+0x64a>
					return;
 800c520:	bf00      	nop
		}
}
 800c522:	3738      	adds	r7, #56	@ 0x38
 800c524:	46bd      	mov	sp, r7
 800c526:	bdb0      	pop	{r4, r5, r7, pc}
 800c528:	00000000 	.word	0x00000000
 800c52c:	40dfffc0 	.word	0x40dfffc0
 800c530:	20001b09 	.word	0x20001b09
 800c534:	20001b08 	.word	0x20001b08
 800c538:	20001b0a 	.word	0x20001b0a

0800c53c <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	705a      	strb	r2, [r3, #1]
}
 800c54a:	bf00      	nop
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 800c556:	b480      	push	{r7}
 800c558:	b083      	sub	sp, #12
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	701a      	strb	r2, [r3, #0]
}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 800c578:	2300      	movs	r3, #0
 800c57a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		bmi088_update(BMI);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff fcab 	bl	800bed8 <bmi088_update>
		if(is_gyro_renewed == 1)
 800c582:	4b2f      	ldr	r3, [pc, #188]	@ (800c640 <get_offset+0xd0>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b01      	cmp	r3, #1
 800c588:	d1f8      	bne.n	800c57c <get_offset+0xc>
		{
			if(offsetCounter < 1000)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c590:	da2d      	bge.n	800c5ee <get_offset+0x7e>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	ed93 7a00 	vldr	s14, [r3]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	edd3 7a06 	vldr	s15, [r3, #24]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5a8:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	ed93 7a01 	vldr	s14, [r3, #4]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5c2:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	ed93 7a02 	vldr	s14, [r3, #8]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	edd3 7a08 	vldr	s15, [r3, #32]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	695b      	ldr	r3, [r3, #20]
 800c5d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5dc:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 800c5e6:	4b16      	ldr	r3, [pc, #88]	@ (800c640 <get_offset+0xd0>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	701a      	strb	r2, [r3, #0]
 800c5ec:	e7c6      	b.n	800c57c <get_offset+0xc>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	695b      	ldr	r3, [r3, #20]
 800c5f2:	ed93 7a00 	vldr	s14, [r3]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	695b      	ldr	r3, [r3, #20]
 800c5fa:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800c644 <get_offset+0xd4>
 800c5fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c602:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800c644 <get_offset+0xd4>
 800c616:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c61a:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	ed93 7a02 	vldr	s14, [r3, #8]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800c644 <get_offset+0xd4>
 800c62e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c632:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 800c636:	bf00      	nop
		}

	}
}
 800c638:	bf00      	nop
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	20001b0a 	.word	0x20001b0a
 800c644:	447a0000 	.word	0x447a0000

0800c648 <calloc>:
 800c648:	4b02      	ldr	r3, [pc, #8]	@ (800c654 <calloc+0xc>)
 800c64a:	460a      	mov	r2, r1
 800c64c:	4601      	mov	r1, r0
 800c64e:	6818      	ldr	r0, [r3, #0]
 800c650:	f000 b802 	b.w	800c658 <_calloc_r>
 800c654:	20000034 	.word	0x20000034

0800c658 <_calloc_r>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	fba1 5402 	umull	r5, r4, r1, r2
 800c65e:	b934      	cbnz	r4, 800c66e <_calloc_r+0x16>
 800c660:	4629      	mov	r1, r5
 800c662:	f000 f837 	bl	800c6d4 <_malloc_r>
 800c666:	4606      	mov	r6, r0
 800c668:	b928      	cbnz	r0, 800c676 <_calloc_r+0x1e>
 800c66a:	4630      	mov	r0, r6
 800c66c:	bd70      	pop	{r4, r5, r6, pc}
 800c66e:	220c      	movs	r2, #12
 800c670:	6002      	str	r2, [r0, #0]
 800c672:	2600      	movs	r6, #0
 800c674:	e7f9      	b.n	800c66a <_calloc_r+0x12>
 800c676:	462a      	mov	r2, r5
 800c678:	4621      	mov	r1, r4
 800c67a:	f001 f880 	bl	800d77e <memset>
 800c67e:	e7f4      	b.n	800c66a <_calloc_r+0x12>

0800c680 <malloc>:
 800c680:	4b02      	ldr	r3, [pc, #8]	@ (800c68c <malloc+0xc>)
 800c682:	4601      	mov	r1, r0
 800c684:	6818      	ldr	r0, [r3, #0]
 800c686:	f000 b825 	b.w	800c6d4 <_malloc_r>
 800c68a:	bf00      	nop
 800c68c:	20000034 	.word	0x20000034

0800c690 <sbrk_aligned>:
 800c690:	b570      	push	{r4, r5, r6, lr}
 800c692:	4e0f      	ldr	r6, [pc, #60]	@ (800c6d0 <sbrk_aligned+0x40>)
 800c694:	460c      	mov	r4, r1
 800c696:	6831      	ldr	r1, [r6, #0]
 800c698:	4605      	mov	r5, r0
 800c69a:	b911      	cbnz	r1, 800c6a2 <sbrk_aligned+0x12>
 800c69c:	f001 f8c6 	bl	800d82c <_sbrk_r>
 800c6a0:	6030      	str	r0, [r6, #0]
 800c6a2:	4621      	mov	r1, r4
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f001 f8c1 	bl	800d82c <_sbrk_r>
 800c6aa:	1c43      	adds	r3, r0, #1
 800c6ac:	d103      	bne.n	800c6b6 <sbrk_aligned+0x26>
 800c6ae:	f04f 34ff 	mov.w	r4, #4294967295
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	bd70      	pop	{r4, r5, r6, pc}
 800c6b6:	1cc4      	adds	r4, r0, #3
 800c6b8:	f024 0403 	bic.w	r4, r4, #3
 800c6bc:	42a0      	cmp	r0, r4
 800c6be:	d0f8      	beq.n	800c6b2 <sbrk_aligned+0x22>
 800c6c0:	1a21      	subs	r1, r4, r0
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f001 f8b2 	bl	800d82c <_sbrk_r>
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	d1f2      	bne.n	800c6b2 <sbrk_aligned+0x22>
 800c6cc:	e7ef      	b.n	800c6ae <sbrk_aligned+0x1e>
 800c6ce:	bf00      	nop
 800c6d0:	20001b10 	.word	0x20001b10

0800c6d4 <_malloc_r>:
 800c6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6d8:	1ccd      	adds	r5, r1, #3
 800c6da:	f025 0503 	bic.w	r5, r5, #3
 800c6de:	3508      	adds	r5, #8
 800c6e0:	2d0c      	cmp	r5, #12
 800c6e2:	bf38      	it	cc
 800c6e4:	250c      	movcc	r5, #12
 800c6e6:	2d00      	cmp	r5, #0
 800c6e8:	4606      	mov	r6, r0
 800c6ea:	db01      	blt.n	800c6f0 <_malloc_r+0x1c>
 800c6ec:	42a9      	cmp	r1, r5
 800c6ee:	d904      	bls.n	800c6fa <_malloc_r+0x26>
 800c6f0:	230c      	movs	r3, #12
 800c6f2:	6033      	str	r3, [r6, #0]
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7d0 <_malloc_r+0xfc>
 800c6fe:	f000 f869 	bl	800c7d4 <__malloc_lock>
 800c702:	f8d8 3000 	ldr.w	r3, [r8]
 800c706:	461c      	mov	r4, r3
 800c708:	bb44      	cbnz	r4, 800c75c <_malloc_r+0x88>
 800c70a:	4629      	mov	r1, r5
 800c70c:	4630      	mov	r0, r6
 800c70e:	f7ff ffbf 	bl	800c690 <sbrk_aligned>
 800c712:	1c43      	adds	r3, r0, #1
 800c714:	4604      	mov	r4, r0
 800c716:	d158      	bne.n	800c7ca <_malloc_r+0xf6>
 800c718:	f8d8 4000 	ldr.w	r4, [r8]
 800c71c:	4627      	mov	r7, r4
 800c71e:	2f00      	cmp	r7, #0
 800c720:	d143      	bne.n	800c7aa <_malloc_r+0xd6>
 800c722:	2c00      	cmp	r4, #0
 800c724:	d04b      	beq.n	800c7be <_malloc_r+0xea>
 800c726:	6823      	ldr	r3, [r4, #0]
 800c728:	4639      	mov	r1, r7
 800c72a:	4630      	mov	r0, r6
 800c72c:	eb04 0903 	add.w	r9, r4, r3
 800c730:	f001 f87c 	bl	800d82c <_sbrk_r>
 800c734:	4581      	cmp	r9, r0
 800c736:	d142      	bne.n	800c7be <_malloc_r+0xea>
 800c738:	6821      	ldr	r1, [r4, #0]
 800c73a:	1a6d      	subs	r5, r5, r1
 800c73c:	4629      	mov	r1, r5
 800c73e:	4630      	mov	r0, r6
 800c740:	f7ff ffa6 	bl	800c690 <sbrk_aligned>
 800c744:	3001      	adds	r0, #1
 800c746:	d03a      	beq.n	800c7be <_malloc_r+0xea>
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	442b      	add	r3, r5
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	f8d8 3000 	ldr.w	r3, [r8]
 800c752:	685a      	ldr	r2, [r3, #4]
 800c754:	bb62      	cbnz	r2, 800c7b0 <_malloc_r+0xdc>
 800c756:	f8c8 7000 	str.w	r7, [r8]
 800c75a:	e00f      	b.n	800c77c <_malloc_r+0xa8>
 800c75c:	6822      	ldr	r2, [r4, #0]
 800c75e:	1b52      	subs	r2, r2, r5
 800c760:	d420      	bmi.n	800c7a4 <_malloc_r+0xd0>
 800c762:	2a0b      	cmp	r2, #11
 800c764:	d917      	bls.n	800c796 <_malloc_r+0xc2>
 800c766:	1961      	adds	r1, r4, r5
 800c768:	42a3      	cmp	r3, r4
 800c76a:	6025      	str	r5, [r4, #0]
 800c76c:	bf18      	it	ne
 800c76e:	6059      	strne	r1, [r3, #4]
 800c770:	6863      	ldr	r3, [r4, #4]
 800c772:	bf08      	it	eq
 800c774:	f8c8 1000 	streq.w	r1, [r8]
 800c778:	5162      	str	r2, [r4, r5]
 800c77a:	604b      	str	r3, [r1, #4]
 800c77c:	4630      	mov	r0, r6
 800c77e:	f000 f82f 	bl	800c7e0 <__malloc_unlock>
 800c782:	f104 000b 	add.w	r0, r4, #11
 800c786:	1d23      	adds	r3, r4, #4
 800c788:	f020 0007 	bic.w	r0, r0, #7
 800c78c:	1ac2      	subs	r2, r0, r3
 800c78e:	bf1c      	itt	ne
 800c790:	1a1b      	subne	r3, r3, r0
 800c792:	50a3      	strne	r3, [r4, r2]
 800c794:	e7af      	b.n	800c6f6 <_malloc_r+0x22>
 800c796:	6862      	ldr	r2, [r4, #4]
 800c798:	42a3      	cmp	r3, r4
 800c79a:	bf0c      	ite	eq
 800c79c:	f8c8 2000 	streq.w	r2, [r8]
 800c7a0:	605a      	strne	r2, [r3, #4]
 800c7a2:	e7eb      	b.n	800c77c <_malloc_r+0xa8>
 800c7a4:	4623      	mov	r3, r4
 800c7a6:	6864      	ldr	r4, [r4, #4]
 800c7a8:	e7ae      	b.n	800c708 <_malloc_r+0x34>
 800c7aa:	463c      	mov	r4, r7
 800c7ac:	687f      	ldr	r7, [r7, #4]
 800c7ae:	e7b6      	b.n	800c71e <_malloc_r+0x4a>
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	42a3      	cmp	r3, r4
 800c7b6:	d1fb      	bne.n	800c7b0 <_malloc_r+0xdc>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	6053      	str	r3, [r2, #4]
 800c7bc:	e7de      	b.n	800c77c <_malloc_r+0xa8>
 800c7be:	230c      	movs	r3, #12
 800c7c0:	6033      	str	r3, [r6, #0]
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f000 f80c 	bl	800c7e0 <__malloc_unlock>
 800c7c8:	e794      	b.n	800c6f4 <_malloc_r+0x20>
 800c7ca:	6005      	str	r5, [r0, #0]
 800c7cc:	e7d6      	b.n	800c77c <_malloc_r+0xa8>
 800c7ce:	bf00      	nop
 800c7d0:	20001b14 	.word	0x20001b14

0800c7d4 <__malloc_lock>:
 800c7d4:	4801      	ldr	r0, [pc, #4]	@ (800c7dc <__malloc_lock+0x8>)
 800c7d6:	f001 b876 	b.w	800d8c6 <__retarget_lock_acquire_recursive>
 800c7da:	bf00      	nop
 800c7dc:	20001c58 	.word	0x20001c58

0800c7e0 <__malloc_unlock>:
 800c7e0:	4801      	ldr	r0, [pc, #4]	@ (800c7e8 <__malloc_unlock+0x8>)
 800c7e2:	f001 b871 	b.w	800d8c8 <__retarget_lock_release_recursive>
 800c7e6:	bf00      	nop
 800c7e8:	20001c58 	.word	0x20001c58

0800c7ec <__cvt>:
 800c7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7f0:	ec57 6b10 	vmov	r6, r7, d0
 800c7f4:	2f00      	cmp	r7, #0
 800c7f6:	460c      	mov	r4, r1
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	463b      	mov	r3, r7
 800c7fc:	bfbb      	ittet	lt
 800c7fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c802:	461f      	movlt	r7, r3
 800c804:	2300      	movge	r3, #0
 800c806:	232d      	movlt	r3, #45	@ 0x2d
 800c808:	700b      	strb	r3, [r1, #0]
 800c80a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c80c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c810:	4691      	mov	r9, r2
 800c812:	f023 0820 	bic.w	r8, r3, #32
 800c816:	bfbc      	itt	lt
 800c818:	4632      	movlt	r2, r6
 800c81a:	4616      	movlt	r6, r2
 800c81c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c820:	d005      	beq.n	800c82e <__cvt+0x42>
 800c822:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c826:	d100      	bne.n	800c82a <__cvt+0x3e>
 800c828:	3401      	adds	r4, #1
 800c82a:	2102      	movs	r1, #2
 800c82c:	e000      	b.n	800c830 <__cvt+0x44>
 800c82e:	2103      	movs	r1, #3
 800c830:	ab03      	add	r3, sp, #12
 800c832:	9301      	str	r3, [sp, #4]
 800c834:	ab02      	add	r3, sp, #8
 800c836:	9300      	str	r3, [sp, #0]
 800c838:	ec47 6b10 	vmov	d0, r6, r7
 800c83c:	4653      	mov	r3, sl
 800c83e:	4622      	mov	r2, r4
 800c840:	f001 f8e2 	bl	800da08 <_dtoa_r>
 800c844:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c848:	4605      	mov	r5, r0
 800c84a:	d119      	bne.n	800c880 <__cvt+0x94>
 800c84c:	f019 0f01 	tst.w	r9, #1
 800c850:	d00e      	beq.n	800c870 <__cvt+0x84>
 800c852:	eb00 0904 	add.w	r9, r0, r4
 800c856:	2200      	movs	r2, #0
 800c858:	2300      	movs	r3, #0
 800c85a:	4630      	mov	r0, r6
 800c85c:	4639      	mov	r1, r7
 800c85e:	f7f4 f953 	bl	8000b08 <__aeabi_dcmpeq>
 800c862:	b108      	cbz	r0, 800c868 <__cvt+0x7c>
 800c864:	f8cd 900c 	str.w	r9, [sp, #12]
 800c868:	2230      	movs	r2, #48	@ 0x30
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	454b      	cmp	r3, r9
 800c86e:	d31e      	bcc.n	800c8ae <__cvt+0xc2>
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c874:	1b5b      	subs	r3, r3, r5
 800c876:	4628      	mov	r0, r5
 800c878:	6013      	str	r3, [r2, #0]
 800c87a:	b004      	add	sp, #16
 800c87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c880:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c884:	eb00 0904 	add.w	r9, r0, r4
 800c888:	d1e5      	bne.n	800c856 <__cvt+0x6a>
 800c88a:	7803      	ldrb	r3, [r0, #0]
 800c88c:	2b30      	cmp	r3, #48	@ 0x30
 800c88e:	d10a      	bne.n	800c8a6 <__cvt+0xba>
 800c890:	2200      	movs	r2, #0
 800c892:	2300      	movs	r3, #0
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f4 f936 	bl	8000b08 <__aeabi_dcmpeq>
 800c89c:	b918      	cbnz	r0, 800c8a6 <__cvt+0xba>
 800c89e:	f1c4 0401 	rsb	r4, r4, #1
 800c8a2:	f8ca 4000 	str.w	r4, [sl]
 800c8a6:	f8da 3000 	ldr.w	r3, [sl]
 800c8aa:	4499      	add	r9, r3
 800c8ac:	e7d3      	b.n	800c856 <__cvt+0x6a>
 800c8ae:	1c59      	adds	r1, r3, #1
 800c8b0:	9103      	str	r1, [sp, #12]
 800c8b2:	701a      	strb	r2, [r3, #0]
 800c8b4:	e7d9      	b.n	800c86a <__cvt+0x7e>

0800c8b6 <__exponent>:
 800c8b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8b8:	2900      	cmp	r1, #0
 800c8ba:	bfba      	itte	lt
 800c8bc:	4249      	neglt	r1, r1
 800c8be:	232d      	movlt	r3, #45	@ 0x2d
 800c8c0:	232b      	movge	r3, #43	@ 0x2b
 800c8c2:	2909      	cmp	r1, #9
 800c8c4:	7002      	strb	r2, [r0, #0]
 800c8c6:	7043      	strb	r3, [r0, #1]
 800c8c8:	dd29      	ble.n	800c91e <__exponent+0x68>
 800c8ca:	f10d 0307 	add.w	r3, sp, #7
 800c8ce:	461d      	mov	r5, r3
 800c8d0:	270a      	movs	r7, #10
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c8d8:	fb07 1416 	mls	r4, r7, r6, r1
 800c8dc:	3430      	adds	r4, #48	@ 0x30
 800c8de:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	2c63      	cmp	r4, #99	@ 0x63
 800c8e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	dcf1      	bgt.n	800c8d2 <__exponent+0x1c>
 800c8ee:	3130      	adds	r1, #48	@ 0x30
 800c8f0:	1e94      	subs	r4, r2, #2
 800c8f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c8f6:	1c41      	adds	r1, r0, #1
 800c8f8:	4623      	mov	r3, r4
 800c8fa:	42ab      	cmp	r3, r5
 800c8fc:	d30a      	bcc.n	800c914 <__exponent+0x5e>
 800c8fe:	f10d 0309 	add.w	r3, sp, #9
 800c902:	1a9b      	subs	r3, r3, r2
 800c904:	42ac      	cmp	r4, r5
 800c906:	bf88      	it	hi
 800c908:	2300      	movhi	r3, #0
 800c90a:	3302      	adds	r3, #2
 800c90c:	4403      	add	r3, r0
 800c90e:	1a18      	subs	r0, r3, r0
 800c910:	b003      	add	sp, #12
 800c912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c914:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c918:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c91c:	e7ed      	b.n	800c8fa <__exponent+0x44>
 800c91e:	2330      	movs	r3, #48	@ 0x30
 800c920:	3130      	adds	r1, #48	@ 0x30
 800c922:	7083      	strb	r3, [r0, #2]
 800c924:	70c1      	strb	r1, [r0, #3]
 800c926:	1d03      	adds	r3, r0, #4
 800c928:	e7f1      	b.n	800c90e <__exponent+0x58>
	...

0800c92c <_printf_float>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	b08d      	sub	sp, #52	@ 0x34
 800c932:	460c      	mov	r4, r1
 800c934:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c938:	4616      	mov	r6, r2
 800c93a:	461f      	mov	r7, r3
 800c93c:	4605      	mov	r5, r0
 800c93e:	f000 ff3d 	bl	800d7bc <_localeconv_r>
 800c942:	6803      	ldr	r3, [r0, #0]
 800c944:	9304      	str	r3, [sp, #16]
 800c946:	4618      	mov	r0, r3
 800c948:	f7f3 fcb2 	bl	80002b0 <strlen>
 800c94c:	2300      	movs	r3, #0
 800c94e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c950:	f8d8 3000 	ldr.w	r3, [r8]
 800c954:	9005      	str	r0, [sp, #20]
 800c956:	3307      	adds	r3, #7
 800c958:	f023 0307 	bic.w	r3, r3, #7
 800c95c:	f103 0208 	add.w	r2, r3, #8
 800c960:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c964:	f8d4 b000 	ldr.w	fp, [r4]
 800c968:	f8c8 2000 	str.w	r2, [r8]
 800c96c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c970:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c974:	9307      	str	r3, [sp, #28]
 800c976:	f8cd 8018 	str.w	r8, [sp, #24]
 800c97a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c97e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c982:	4b9c      	ldr	r3, [pc, #624]	@ (800cbf4 <_printf_float+0x2c8>)
 800c984:	f04f 32ff 	mov.w	r2, #4294967295
 800c988:	f7f4 f8f0 	bl	8000b6c <__aeabi_dcmpun>
 800c98c:	bb70      	cbnz	r0, 800c9ec <_printf_float+0xc0>
 800c98e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c992:	4b98      	ldr	r3, [pc, #608]	@ (800cbf4 <_printf_float+0x2c8>)
 800c994:	f04f 32ff 	mov.w	r2, #4294967295
 800c998:	f7f4 f8ca 	bl	8000b30 <__aeabi_dcmple>
 800c99c:	bb30      	cbnz	r0, 800c9ec <_printf_float+0xc0>
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	4649      	mov	r1, r9
 800c9a6:	f7f4 f8b9 	bl	8000b1c <__aeabi_dcmplt>
 800c9aa:	b110      	cbz	r0, 800c9b2 <_printf_float+0x86>
 800c9ac:	232d      	movs	r3, #45	@ 0x2d
 800c9ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9b2:	4a91      	ldr	r2, [pc, #580]	@ (800cbf8 <_printf_float+0x2cc>)
 800c9b4:	4b91      	ldr	r3, [pc, #580]	@ (800cbfc <_printf_float+0x2d0>)
 800c9b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c9ba:	bf8c      	ite	hi
 800c9bc:	4690      	movhi	r8, r2
 800c9be:	4698      	movls	r8, r3
 800c9c0:	2303      	movs	r3, #3
 800c9c2:	6123      	str	r3, [r4, #16]
 800c9c4:	f02b 0304 	bic.w	r3, fp, #4
 800c9c8:	6023      	str	r3, [r4, #0]
 800c9ca:	f04f 0900 	mov.w	r9, #0
 800c9ce:	9700      	str	r7, [sp, #0]
 800c9d0:	4633      	mov	r3, r6
 800c9d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 f9d2 	bl	800cd80 <_printf_common>
 800c9dc:	3001      	adds	r0, #1
 800c9de:	f040 808d 	bne.w	800cafc <_printf_float+0x1d0>
 800c9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e6:	b00d      	add	sp, #52	@ 0x34
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	4642      	mov	r2, r8
 800c9ee:	464b      	mov	r3, r9
 800c9f0:	4640      	mov	r0, r8
 800c9f2:	4649      	mov	r1, r9
 800c9f4:	f7f4 f8ba 	bl	8000b6c <__aeabi_dcmpun>
 800c9f8:	b140      	cbz	r0, 800ca0c <_printf_float+0xe0>
 800c9fa:	464b      	mov	r3, r9
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	bfbc      	itt	lt
 800ca00:	232d      	movlt	r3, #45	@ 0x2d
 800ca02:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ca06:	4a7e      	ldr	r2, [pc, #504]	@ (800cc00 <_printf_float+0x2d4>)
 800ca08:	4b7e      	ldr	r3, [pc, #504]	@ (800cc04 <_printf_float+0x2d8>)
 800ca0a:	e7d4      	b.n	800c9b6 <_printf_float+0x8a>
 800ca0c:	6863      	ldr	r3, [r4, #4]
 800ca0e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ca12:	9206      	str	r2, [sp, #24]
 800ca14:	1c5a      	adds	r2, r3, #1
 800ca16:	d13b      	bne.n	800ca90 <_printf_float+0x164>
 800ca18:	2306      	movs	r3, #6
 800ca1a:	6063      	str	r3, [r4, #4]
 800ca1c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ca20:	2300      	movs	r3, #0
 800ca22:	6022      	str	r2, [r4, #0]
 800ca24:	9303      	str	r3, [sp, #12]
 800ca26:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca28:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ca2c:	ab09      	add	r3, sp, #36	@ 0x24
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	6861      	ldr	r1, [r4, #4]
 800ca32:	ec49 8b10 	vmov	d0, r8, r9
 800ca36:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f7ff fed6 	bl	800c7ec <__cvt>
 800ca40:	9b06      	ldr	r3, [sp, #24]
 800ca42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca44:	2b47      	cmp	r3, #71	@ 0x47
 800ca46:	4680      	mov	r8, r0
 800ca48:	d129      	bne.n	800ca9e <_printf_float+0x172>
 800ca4a:	1cc8      	adds	r0, r1, #3
 800ca4c:	db02      	blt.n	800ca54 <_printf_float+0x128>
 800ca4e:	6863      	ldr	r3, [r4, #4]
 800ca50:	4299      	cmp	r1, r3
 800ca52:	dd41      	ble.n	800cad8 <_printf_float+0x1ac>
 800ca54:	f1aa 0a02 	sub.w	sl, sl, #2
 800ca58:	fa5f fa8a 	uxtb.w	sl, sl
 800ca5c:	3901      	subs	r1, #1
 800ca5e:	4652      	mov	r2, sl
 800ca60:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ca64:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca66:	f7ff ff26 	bl	800c8b6 <__exponent>
 800ca6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca6c:	1813      	adds	r3, r2, r0
 800ca6e:	2a01      	cmp	r2, #1
 800ca70:	4681      	mov	r9, r0
 800ca72:	6123      	str	r3, [r4, #16]
 800ca74:	dc02      	bgt.n	800ca7c <_printf_float+0x150>
 800ca76:	6822      	ldr	r2, [r4, #0]
 800ca78:	07d2      	lsls	r2, r2, #31
 800ca7a:	d501      	bpl.n	800ca80 <_printf_float+0x154>
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	6123      	str	r3, [r4, #16]
 800ca80:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d0a2      	beq.n	800c9ce <_printf_float+0xa2>
 800ca88:	232d      	movs	r3, #45	@ 0x2d
 800ca8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca8e:	e79e      	b.n	800c9ce <_printf_float+0xa2>
 800ca90:	9a06      	ldr	r2, [sp, #24]
 800ca92:	2a47      	cmp	r2, #71	@ 0x47
 800ca94:	d1c2      	bne.n	800ca1c <_printf_float+0xf0>
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1c0      	bne.n	800ca1c <_printf_float+0xf0>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e7bd      	b.n	800ca1a <_printf_float+0xee>
 800ca9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800caa2:	d9db      	bls.n	800ca5c <_printf_float+0x130>
 800caa4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800caa8:	d118      	bne.n	800cadc <_printf_float+0x1b0>
 800caaa:	2900      	cmp	r1, #0
 800caac:	6863      	ldr	r3, [r4, #4]
 800caae:	dd0b      	ble.n	800cac8 <_printf_float+0x19c>
 800cab0:	6121      	str	r1, [r4, #16]
 800cab2:	b913      	cbnz	r3, 800caba <_printf_float+0x18e>
 800cab4:	6822      	ldr	r2, [r4, #0]
 800cab6:	07d0      	lsls	r0, r2, #31
 800cab8:	d502      	bpl.n	800cac0 <_printf_float+0x194>
 800caba:	3301      	adds	r3, #1
 800cabc:	440b      	add	r3, r1
 800cabe:	6123      	str	r3, [r4, #16]
 800cac0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cac2:	f04f 0900 	mov.w	r9, #0
 800cac6:	e7db      	b.n	800ca80 <_printf_float+0x154>
 800cac8:	b913      	cbnz	r3, 800cad0 <_printf_float+0x1a4>
 800caca:	6822      	ldr	r2, [r4, #0]
 800cacc:	07d2      	lsls	r2, r2, #31
 800cace:	d501      	bpl.n	800cad4 <_printf_float+0x1a8>
 800cad0:	3302      	adds	r3, #2
 800cad2:	e7f4      	b.n	800cabe <_printf_float+0x192>
 800cad4:	2301      	movs	r3, #1
 800cad6:	e7f2      	b.n	800cabe <_printf_float+0x192>
 800cad8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cadc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cade:	4299      	cmp	r1, r3
 800cae0:	db05      	blt.n	800caee <_printf_float+0x1c2>
 800cae2:	6823      	ldr	r3, [r4, #0]
 800cae4:	6121      	str	r1, [r4, #16]
 800cae6:	07d8      	lsls	r0, r3, #31
 800cae8:	d5ea      	bpl.n	800cac0 <_printf_float+0x194>
 800caea:	1c4b      	adds	r3, r1, #1
 800caec:	e7e7      	b.n	800cabe <_printf_float+0x192>
 800caee:	2900      	cmp	r1, #0
 800caf0:	bfd4      	ite	le
 800caf2:	f1c1 0202 	rsble	r2, r1, #2
 800caf6:	2201      	movgt	r2, #1
 800caf8:	4413      	add	r3, r2
 800cafa:	e7e0      	b.n	800cabe <_printf_float+0x192>
 800cafc:	6823      	ldr	r3, [r4, #0]
 800cafe:	055a      	lsls	r2, r3, #21
 800cb00:	d407      	bmi.n	800cb12 <_printf_float+0x1e6>
 800cb02:	6923      	ldr	r3, [r4, #16]
 800cb04:	4642      	mov	r2, r8
 800cb06:	4631      	mov	r1, r6
 800cb08:	4628      	mov	r0, r5
 800cb0a:	47b8      	blx	r7
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d12b      	bne.n	800cb68 <_printf_float+0x23c>
 800cb10:	e767      	b.n	800c9e2 <_printf_float+0xb6>
 800cb12:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cb16:	f240 80dd 	bls.w	800ccd4 <_printf_float+0x3a8>
 800cb1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb1e:	2200      	movs	r2, #0
 800cb20:	2300      	movs	r3, #0
 800cb22:	f7f3 fff1 	bl	8000b08 <__aeabi_dcmpeq>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d033      	beq.n	800cb92 <_printf_float+0x266>
 800cb2a:	4a37      	ldr	r2, [pc, #220]	@ (800cc08 <_printf_float+0x2dc>)
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b8      	blx	r7
 800cb34:	3001      	adds	r0, #1
 800cb36:	f43f af54 	beq.w	800c9e2 <_printf_float+0xb6>
 800cb3a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cb3e:	4543      	cmp	r3, r8
 800cb40:	db02      	blt.n	800cb48 <_printf_float+0x21c>
 800cb42:	6823      	ldr	r3, [r4, #0]
 800cb44:	07d8      	lsls	r0, r3, #31
 800cb46:	d50f      	bpl.n	800cb68 <_printf_float+0x23c>
 800cb48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4628      	mov	r0, r5
 800cb50:	47b8      	blx	r7
 800cb52:	3001      	adds	r0, #1
 800cb54:	f43f af45 	beq.w	800c9e2 <_printf_float+0xb6>
 800cb58:	f04f 0900 	mov.w	r9, #0
 800cb5c:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb60:	f104 0a1a 	add.w	sl, r4, #26
 800cb64:	45c8      	cmp	r8, r9
 800cb66:	dc09      	bgt.n	800cb7c <_printf_float+0x250>
 800cb68:	6823      	ldr	r3, [r4, #0]
 800cb6a:	079b      	lsls	r3, r3, #30
 800cb6c:	f100 8103 	bmi.w	800cd76 <_printf_float+0x44a>
 800cb70:	68e0      	ldr	r0, [r4, #12]
 800cb72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb74:	4298      	cmp	r0, r3
 800cb76:	bfb8      	it	lt
 800cb78:	4618      	movlt	r0, r3
 800cb7a:	e734      	b.n	800c9e6 <_printf_float+0xba>
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	4652      	mov	r2, sl
 800cb80:	4631      	mov	r1, r6
 800cb82:	4628      	mov	r0, r5
 800cb84:	47b8      	blx	r7
 800cb86:	3001      	adds	r0, #1
 800cb88:	f43f af2b 	beq.w	800c9e2 <_printf_float+0xb6>
 800cb8c:	f109 0901 	add.w	r9, r9, #1
 800cb90:	e7e8      	b.n	800cb64 <_printf_float+0x238>
 800cb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	dc39      	bgt.n	800cc0c <_printf_float+0x2e0>
 800cb98:	4a1b      	ldr	r2, [pc, #108]	@ (800cc08 <_printf_float+0x2dc>)
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	4628      	mov	r0, r5
 800cba0:	47b8      	blx	r7
 800cba2:	3001      	adds	r0, #1
 800cba4:	f43f af1d 	beq.w	800c9e2 <_printf_float+0xb6>
 800cba8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cbac:	ea59 0303 	orrs.w	r3, r9, r3
 800cbb0:	d102      	bne.n	800cbb8 <_printf_float+0x28c>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	07d9      	lsls	r1, r3, #31
 800cbb6:	d5d7      	bpl.n	800cb68 <_printf_float+0x23c>
 800cbb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	47b8      	blx	r7
 800cbc2:	3001      	adds	r0, #1
 800cbc4:	f43f af0d 	beq.w	800c9e2 <_printf_float+0xb6>
 800cbc8:	f04f 0a00 	mov.w	sl, #0
 800cbcc:	f104 0b1a 	add.w	fp, r4, #26
 800cbd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd2:	425b      	negs	r3, r3
 800cbd4:	4553      	cmp	r3, sl
 800cbd6:	dc01      	bgt.n	800cbdc <_printf_float+0x2b0>
 800cbd8:	464b      	mov	r3, r9
 800cbda:	e793      	b.n	800cb04 <_printf_float+0x1d8>
 800cbdc:	2301      	movs	r3, #1
 800cbde:	465a      	mov	r2, fp
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	47b8      	blx	r7
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	f43f aefb 	beq.w	800c9e2 <_printf_float+0xb6>
 800cbec:	f10a 0a01 	add.w	sl, sl, #1
 800cbf0:	e7ee      	b.n	800cbd0 <_printf_float+0x2a4>
 800cbf2:	bf00      	nop
 800cbf4:	7fefffff 	.word	0x7fefffff
 800cbf8:	08013454 	.word	0x08013454
 800cbfc:	08013450 	.word	0x08013450
 800cc00:	0801345c 	.word	0x0801345c
 800cc04:	08013458 	.word	0x08013458
 800cc08:	08013596 	.word	0x08013596
 800cc0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc0e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc12:	4553      	cmp	r3, sl
 800cc14:	bfa8      	it	ge
 800cc16:	4653      	movge	r3, sl
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	4699      	mov	r9, r3
 800cc1c:	dc36      	bgt.n	800cc8c <_printf_float+0x360>
 800cc1e:	f04f 0b00 	mov.w	fp, #0
 800cc22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc26:	f104 021a 	add.w	r2, r4, #26
 800cc2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc2c:	9306      	str	r3, [sp, #24]
 800cc2e:	eba3 0309 	sub.w	r3, r3, r9
 800cc32:	455b      	cmp	r3, fp
 800cc34:	dc31      	bgt.n	800cc9a <_printf_float+0x36e>
 800cc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc38:	459a      	cmp	sl, r3
 800cc3a:	dc3a      	bgt.n	800ccb2 <_printf_float+0x386>
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	07da      	lsls	r2, r3, #31
 800cc40:	d437      	bmi.n	800ccb2 <_printf_float+0x386>
 800cc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc44:	ebaa 0903 	sub.w	r9, sl, r3
 800cc48:	9b06      	ldr	r3, [sp, #24]
 800cc4a:	ebaa 0303 	sub.w	r3, sl, r3
 800cc4e:	4599      	cmp	r9, r3
 800cc50:	bfa8      	it	ge
 800cc52:	4699      	movge	r9, r3
 800cc54:	f1b9 0f00 	cmp.w	r9, #0
 800cc58:	dc33      	bgt.n	800ccc2 <_printf_float+0x396>
 800cc5a:	f04f 0800 	mov.w	r8, #0
 800cc5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc62:	f104 0b1a 	add.w	fp, r4, #26
 800cc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc68:	ebaa 0303 	sub.w	r3, sl, r3
 800cc6c:	eba3 0309 	sub.w	r3, r3, r9
 800cc70:	4543      	cmp	r3, r8
 800cc72:	f77f af79 	ble.w	800cb68 <_printf_float+0x23c>
 800cc76:	2301      	movs	r3, #1
 800cc78:	465a      	mov	r2, fp
 800cc7a:	4631      	mov	r1, r6
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b8      	blx	r7
 800cc80:	3001      	adds	r0, #1
 800cc82:	f43f aeae 	beq.w	800c9e2 <_printf_float+0xb6>
 800cc86:	f108 0801 	add.w	r8, r8, #1
 800cc8a:	e7ec      	b.n	800cc66 <_printf_float+0x33a>
 800cc8c:	4642      	mov	r2, r8
 800cc8e:	4631      	mov	r1, r6
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b8      	blx	r7
 800cc94:	3001      	adds	r0, #1
 800cc96:	d1c2      	bne.n	800cc1e <_printf_float+0x2f2>
 800cc98:	e6a3      	b.n	800c9e2 <_printf_float+0xb6>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4631      	mov	r1, r6
 800cc9e:	4628      	mov	r0, r5
 800cca0:	9206      	str	r2, [sp, #24]
 800cca2:	47b8      	blx	r7
 800cca4:	3001      	adds	r0, #1
 800cca6:	f43f ae9c 	beq.w	800c9e2 <_printf_float+0xb6>
 800ccaa:	9a06      	ldr	r2, [sp, #24]
 800ccac:	f10b 0b01 	add.w	fp, fp, #1
 800ccb0:	e7bb      	b.n	800cc2a <_printf_float+0x2fe>
 800ccb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b8      	blx	r7
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	d1c0      	bne.n	800cc42 <_printf_float+0x316>
 800ccc0:	e68f      	b.n	800c9e2 <_printf_float+0xb6>
 800ccc2:	9a06      	ldr	r2, [sp, #24]
 800ccc4:	464b      	mov	r3, r9
 800ccc6:	4442      	add	r2, r8
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4628      	mov	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	3001      	adds	r0, #1
 800ccd0:	d1c3      	bne.n	800cc5a <_printf_float+0x32e>
 800ccd2:	e686      	b.n	800c9e2 <_printf_float+0xb6>
 800ccd4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ccd8:	f1ba 0f01 	cmp.w	sl, #1
 800ccdc:	dc01      	bgt.n	800cce2 <_printf_float+0x3b6>
 800ccde:	07db      	lsls	r3, r3, #31
 800cce0:	d536      	bpl.n	800cd50 <_printf_float+0x424>
 800cce2:	2301      	movs	r3, #1
 800cce4:	4642      	mov	r2, r8
 800cce6:	4631      	mov	r1, r6
 800cce8:	4628      	mov	r0, r5
 800ccea:	47b8      	blx	r7
 800ccec:	3001      	adds	r0, #1
 800ccee:	f43f ae78 	beq.w	800c9e2 <_printf_float+0xb6>
 800ccf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccf6:	4631      	mov	r1, r6
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	47b8      	blx	r7
 800ccfc:	3001      	adds	r0, #1
 800ccfe:	f43f ae70 	beq.w	800c9e2 <_printf_float+0xb6>
 800cd02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd06:	2200      	movs	r2, #0
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd0e:	f7f3 fefb 	bl	8000b08 <__aeabi_dcmpeq>
 800cd12:	b9c0      	cbnz	r0, 800cd46 <_printf_float+0x41a>
 800cd14:	4653      	mov	r3, sl
 800cd16:	f108 0201 	add.w	r2, r8, #1
 800cd1a:	4631      	mov	r1, r6
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	47b8      	blx	r7
 800cd20:	3001      	adds	r0, #1
 800cd22:	d10c      	bne.n	800cd3e <_printf_float+0x412>
 800cd24:	e65d      	b.n	800c9e2 <_printf_float+0xb6>
 800cd26:	2301      	movs	r3, #1
 800cd28:	465a      	mov	r2, fp
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	47b8      	blx	r7
 800cd30:	3001      	adds	r0, #1
 800cd32:	f43f ae56 	beq.w	800c9e2 <_printf_float+0xb6>
 800cd36:	f108 0801 	add.w	r8, r8, #1
 800cd3a:	45d0      	cmp	r8, sl
 800cd3c:	dbf3      	blt.n	800cd26 <_printf_float+0x3fa>
 800cd3e:	464b      	mov	r3, r9
 800cd40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cd44:	e6df      	b.n	800cb06 <_printf_float+0x1da>
 800cd46:	f04f 0800 	mov.w	r8, #0
 800cd4a:	f104 0b1a 	add.w	fp, r4, #26
 800cd4e:	e7f4      	b.n	800cd3a <_printf_float+0x40e>
 800cd50:	2301      	movs	r3, #1
 800cd52:	4642      	mov	r2, r8
 800cd54:	e7e1      	b.n	800cd1a <_printf_float+0x3ee>
 800cd56:	2301      	movs	r3, #1
 800cd58:	464a      	mov	r2, r9
 800cd5a:	4631      	mov	r1, r6
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	47b8      	blx	r7
 800cd60:	3001      	adds	r0, #1
 800cd62:	f43f ae3e 	beq.w	800c9e2 <_printf_float+0xb6>
 800cd66:	f108 0801 	add.w	r8, r8, #1
 800cd6a:	68e3      	ldr	r3, [r4, #12]
 800cd6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd6e:	1a5b      	subs	r3, r3, r1
 800cd70:	4543      	cmp	r3, r8
 800cd72:	dcf0      	bgt.n	800cd56 <_printf_float+0x42a>
 800cd74:	e6fc      	b.n	800cb70 <_printf_float+0x244>
 800cd76:	f04f 0800 	mov.w	r8, #0
 800cd7a:	f104 0919 	add.w	r9, r4, #25
 800cd7e:	e7f4      	b.n	800cd6a <_printf_float+0x43e>

0800cd80 <_printf_common>:
 800cd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd84:	4616      	mov	r6, r2
 800cd86:	4698      	mov	r8, r3
 800cd88:	688a      	ldr	r2, [r1, #8]
 800cd8a:	690b      	ldr	r3, [r1, #16]
 800cd8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd90:	4293      	cmp	r3, r2
 800cd92:	bfb8      	it	lt
 800cd94:	4613      	movlt	r3, r2
 800cd96:	6033      	str	r3, [r6, #0]
 800cd98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cd9c:	4607      	mov	r7, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	b10a      	cbz	r2, 800cda6 <_printf_common+0x26>
 800cda2:	3301      	adds	r3, #1
 800cda4:	6033      	str	r3, [r6, #0]
 800cda6:	6823      	ldr	r3, [r4, #0]
 800cda8:	0699      	lsls	r1, r3, #26
 800cdaa:	bf42      	ittt	mi
 800cdac:	6833      	ldrmi	r3, [r6, #0]
 800cdae:	3302      	addmi	r3, #2
 800cdb0:	6033      	strmi	r3, [r6, #0]
 800cdb2:	6825      	ldr	r5, [r4, #0]
 800cdb4:	f015 0506 	ands.w	r5, r5, #6
 800cdb8:	d106      	bne.n	800cdc8 <_printf_common+0x48>
 800cdba:	f104 0a19 	add.w	sl, r4, #25
 800cdbe:	68e3      	ldr	r3, [r4, #12]
 800cdc0:	6832      	ldr	r2, [r6, #0]
 800cdc2:	1a9b      	subs	r3, r3, r2
 800cdc4:	42ab      	cmp	r3, r5
 800cdc6:	dc26      	bgt.n	800ce16 <_printf_common+0x96>
 800cdc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cdcc:	6822      	ldr	r2, [r4, #0]
 800cdce:	3b00      	subs	r3, #0
 800cdd0:	bf18      	it	ne
 800cdd2:	2301      	movne	r3, #1
 800cdd4:	0692      	lsls	r2, r2, #26
 800cdd6:	d42b      	bmi.n	800ce30 <_printf_common+0xb0>
 800cdd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cddc:	4641      	mov	r1, r8
 800cdde:	4638      	mov	r0, r7
 800cde0:	47c8      	blx	r9
 800cde2:	3001      	adds	r0, #1
 800cde4:	d01e      	beq.n	800ce24 <_printf_common+0xa4>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	6922      	ldr	r2, [r4, #16]
 800cdea:	f003 0306 	and.w	r3, r3, #6
 800cdee:	2b04      	cmp	r3, #4
 800cdf0:	bf02      	ittt	eq
 800cdf2:	68e5      	ldreq	r5, [r4, #12]
 800cdf4:	6833      	ldreq	r3, [r6, #0]
 800cdf6:	1aed      	subeq	r5, r5, r3
 800cdf8:	68a3      	ldr	r3, [r4, #8]
 800cdfa:	bf0c      	ite	eq
 800cdfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce00:	2500      	movne	r5, #0
 800ce02:	4293      	cmp	r3, r2
 800ce04:	bfc4      	itt	gt
 800ce06:	1a9b      	subgt	r3, r3, r2
 800ce08:	18ed      	addgt	r5, r5, r3
 800ce0a:	2600      	movs	r6, #0
 800ce0c:	341a      	adds	r4, #26
 800ce0e:	42b5      	cmp	r5, r6
 800ce10:	d11a      	bne.n	800ce48 <_printf_common+0xc8>
 800ce12:	2000      	movs	r0, #0
 800ce14:	e008      	b.n	800ce28 <_printf_common+0xa8>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4652      	mov	r2, sl
 800ce1a:	4641      	mov	r1, r8
 800ce1c:	4638      	mov	r0, r7
 800ce1e:	47c8      	blx	r9
 800ce20:	3001      	adds	r0, #1
 800ce22:	d103      	bne.n	800ce2c <_printf_common+0xac>
 800ce24:	f04f 30ff 	mov.w	r0, #4294967295
 800ce28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce2c:	3501      	adds	r5, #1
 800ce2e:	e7c6      	b.n	800cdbe <_printf_common+0x3e>
 800ce30:	18e1      	adds	r1, r4, r3
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	2030      	movs	r0, #48	@ 0x30
 800ce36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce3a:	4422      	add	r2, r4
 800ce3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce44:	3302      	adds	r3, #2
 800ce46:	e7c7      	b.n	800cdd8 <_printf_common+0x58>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	4622      	mov	r2, r4
 800ce4c:	4641      	mov	r1, r8
 800ce4e:	4638      	mov	r0, r7
 800ce50:	47c8      	blx	r9
 800ce52:	3001      	adds	r0, #1
 800ce54:	d0e6      	beq.n	800ce24 <_printf_common+0xa4>
 800ce56:	3601      	adds	r6, #1
 800ce58:	e7d9      	b.n	800ce0e <_printf_common+0x8e>
	...

0800ce5c <_printf_i>:
 800ce5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce60:	7e0f      	ldrb	r7, [r1, #24]
 800ce62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce64:	2f78      	cmp	r7, #120	@ 0x78
 800ce66:	4691      	mov	r9, r2
 800ce68:	4680      	mov	r8, r0
 800ce6a:	460c      	mov	r4, r1
 800ce6c:	469a      	mov	sl, r3
 800ce6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce72:	d807      	bhi.n	800ce84 <_printf_i+0x28>
 800ce74:	2f62      	cmp	r7, #98	@ 0x62
 800ce76:	d80a      	bhi.n	800ce8e <_printf_i+0x32>
 800ce78:	2f00      	cmp	r7, #0
 800ce7a:	f000 80d1 	beq.w	800d020 <_printf_i+0x1c4>
 800ce7e:	2f58      	cmp	r7, #88	@ 0x58
 800ce80:	f000 80b8 	beq.w	800cff4 <_printf_i+0x198>
 800ce84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ce8c:	e03a      	b.n	800cf04 <_printf_i+0xa8>
 800ce8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ce92:	2b15      	cmp	r3, #21
 800ce94:	d8f6      	bhi.n	800ce84 <_printf_i+0x28>
 800ce96:	a101      	add	r1, pc, #4	@ (adr r1, 800ce9c <_printf_i+0x40>)
 800ce98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce9c:	0800cef5 	.word	0x0800cef5
 800cea0:	0800cf09 	.word	0x0800cf09
 800cea4:	0800ce85 	.word	0x0800ce85
 800cea8:	0800ce85 	.word	0x0800ce85
 800ceac:	0800ce85 	.word	0x0800ce85
 800ceb0:	0800ce85 	.word	0x0800ce85
 800ceb4:	0800cf09 	.word	0x0800cf09
 800ceb8:	0800ce85 	.word	0x0800ce85
 800cebc:	0800ce85 	.word	0x0800ce85
 800cec0:	0800ce85 	.word	0x0800ce85
 800cec4:	0800ce85 	.word	0x0800ce85
 800cec8:	0800d007 	.word	0x0800d007
 800cecc:	0800cf33 	.word	0x0800cf33
 800ced0:	0800cfc1 	.word	0x0800cfc1
 800ced4:	0800ce85 	.word	0x0800ce85
 800ced8:	0800ce85 	.word	0x0800ce85
 800cedc:	0800d029 	.word	0x0800d029
 800cee0:	0800ce85 	.word	0x0800ce85
 800cee4:	0800cf33 	.word	0x0800cf33
 800cee8:	0800ce85 	.word	0x0800ce85
 800ceec:	0800ce85 	.word	0x0800ce85
 800cef0:	0800cfc9 	.word	0x0800cfc9
 800cef4:	6833      	ldr	r3, [r6, #0]
 800cef6:	1d1a      	adds	r2, r3, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6032      	str	r2, [r6, #0]
 800cefc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf04:	2301      	movs	r3, #1
 800cf06:	e09c      	b.n	800d042 <_printf_i+0x1e6>
 800cf08:	6833      	ldr	r3, [r6, #0]
 800cf0a:	6820      	ldr	r0, [r4, #0]
 800cf0c:	1d19      	adds	r1, r3, #4
 800cf0e:	6031      	str	r1, [r6, #0]
 800cf10:	0606      	lsls	r6, r0, #24
 800cf12:	d501      	bpl.n	800cf18 <_printf_i+0xbc>
 800cf14:	681d      	ldr	r5, [r3, #0]
 800cf16:	e003      	b.n	800cf20 <_printf_i+0xc4>
 800cf18:	0645      	lsls	r5, r0, #25
 800cf1a:	d5fb      	bpl.n	800cf14 <_printf_i+0xb8>
 800cf1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf20:	2d00      	cmp	r5, #0
 800cf22:	da03      	bge.n	800cf2c <_printf_i+0xd0>
 800cf24:	232d      	movs	r3, #45	@ 0x2d
 800cf26:	426d      	negs	r5, r5
 800cf28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf2c:	4858      	ldr	r0, [pc, #352]	@ (800d090 <_printf_i+0x234>)
 800cf2e:	230a      	movs	r3, #10
 800cf30:	e011      	b.n	800cf56 <_printf_i+0xfa>
 800cf32:	6821      	ldr	r1, [r4, #0]
 800cf34:	6833      	ldr	r3, [r6, #0]
 800cf36:	0608      	lsls	r0, r1, #24
 800cf38:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf3c:	d402      	bmi.n	800cf44 <_printf_i+0xe8>
 800cf3e:	0649      	lsls	r1, r1, #25
 800cf40:	bf48      	it	mi
 800cf42:	b2ad      	uxthmi	r5, r5
 800cf44:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf46:	4852      	ldr	r0, [pc, #328]	@ (800d090 <_printf_i+0x234>)
 800cf48:	6033      	str	r3, [r6, #0]
 800cf4a:	bf14      	ite	ne
 800cf4c:	230a      	movne	r3, #10
 800cf4e:	2308      	moveq	r3, #8
 800cf50:	2100      	movs	r1, #0
 800cf52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf56:	6866      	ldr	r6, [r4, #4]
 800cf58:	60a6      	str	r6, [r4, #8]
 800cf5a:	2e00      	cmp	r6, #0
 800cf5c:	db05      	blt.n	800cf6a <_printf_i+0x10e>
 800cf5e:	6821      	ldr	r1, [r4, #0]
 800cf60:	432e      	orrs	r6, r5
 800cf62:	f021 0104 	bic.w	r1, r1, #4
 800cf66:	6021      	str	r1, [r4, #0]
 800cf68:	d04b      	beq.n	800d002 <_printf_i+0x1a6>
 800cf6a:	4616      	mov	r6, r2
 800cf6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf70:	fb03 5711 	mls	r7, r3, r1, r5
 800cf74:	5dc7      	ldrb	r7, [r0, r7]
 800cf76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf7a:	462f      	mov	r7, r5
 800cf7c:	42bb      	cmp	r3, r7
 800cf7e:	460d      	mov	r5, r1
 800cf80:	d9f4      	bls.n	800cf6c <_printf_i+0x110>
 800cf82:	2b08      	cmp	r3, #8
 800cf84:	d10b      	bne.n	800cf9e <_printf_i+0x142>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	07df      	lsls	r7, r3, #31
 800cf8a:	d508      	bpl.n	800cf9e <_printf_i+0x142>
 800cf8c:	6923      	ldr	r3, [r4, #16]
 800cf8e:	6861      	ldr	r1, [r4, #4]
 800cf90:	4299      	cmp	r1, r3
 800cf92:	bfde      	ittt	le
 800cf94:	2330      	movle	r3, #48	@ 0x30
 800cf96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cf9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cf9e:	1b92      	subs	r2, r2, r6
 800cfa0:	6122      	str	r2, [r4, #16]
 800cfa2:	f8cd a000 	str.w	sl, [sp]
 800cfa6:	464b      	mov	r3, r9
 800cfa8:	aa03      	add	r2, sp, #12
 800cfaa:	4621      	mov	r1, r4
 800cfac:	4640      	mov	r0, r8
 800cfae:	f7ff fee7 	bl	800cd80 <_printf_common>
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	d14a      	bne.n	800d04c <_printf_i+0x1f0>
 800cfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfba:	b004      	add	sp, #16
 800cfbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc0:	6823      	ldr	r3, [r4, #0]
 800cfc2:	f043 0320 	orr.w	r3, r3, #32
 800cfc6:	6023      	str	r3, [r4, #0]
 800cfc8:	4832      	ldr	r0, [pc, #200]	@ (800d094 <_printf_i+0x238>)
 800cfca:	2778      	movs	r7, #120	@ 0x78
 800cfcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cfd0:	6823      	ldr	r3, [r4, #0]
 800cfd2:	6831      	ldr	r1, [r6, #0]
 800cfd4:	061f      	lsls	r7, r3, #24
 800cfd6:	f851 5b04 	ldr.w	r5, [r1], #4
 800cfda:	d402      	bmi.n	800cfe2 <_printf_i+0x186>
 800cfdc:	065f      	lsls	r7, r3, #25
 800cfde:	bf48      	it	mi
 800cfe0:	b2ad      	uxthmi	r5, r5
 800cfe2:	6031      	str	r1, [r6, #0]
 800cfe4:	07d9      	lsls	r1, r3, #31
 800cfe6:	bf44      	itt	mi
 800cfe8:	f043 0320 	orrmi.w	r3, r3, #32
 800cfec:	6023      	strmi	r3, [r4, #0]
 800cfee:	b11d      	cbz	r5, 800cff8 <_printf_i+0x19c>
 800cff0:	2310      	movs	r3, #16
 800cff2:	e7ad      	b.n	800cf50 <_printf_i+0xf4>
 800cff4:	4826      	ldr	r0, [pc, #152]	@ (800d090 <_printf_i+0x234>)
 800cff6:	e7e9      	b.n	800cfcc <_printf_i+0x170>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	f023 0320 	bic.w	r3, r3, #32
 800cffe:	6023      	str	r3, [r4, #0]
 800d000:	e7f6      	b.n	800cff0 <_printf_i+0x194>
 800d002:	4616      	mov	r6, r2
 800d004:	e7bd      	b.n	800cf82 <_printf_i+0x126>
 800d006:	6833      	ldr	r3, [r6, #0]
 800d008:	6825      	ldr	r5, [r4, #0]
 800d00a:	6961      	ldr	r1, [r4, #20]
 800d00c:	1d18      	adds	r0, r3, #4
 800d00e:	6030      	str	r0, [r6, #0]
 800d010:	062e      	lsls	r6, r5, #24
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	d501      	bpl.n	800d01a <_printf_i+0x1be>
 800d016:	6019      	str	r1, [r3, #0]
 800d018:	e002      	b.n	800d020 <_printf_i+0x1c4>
 800d01a:	0668      	lsls	r0, r5, #25
 800d01c:	d5fb      	bpl.n	800d016 <_printf_i+0x1ba>
 800d01e:	8019      	strh	r1, [r3, #0]
 800d020:	2300      	movs	r3, #0
 800d022:	6123      	str	r3, [r4, #16]
 800d024:	4616      	mov	r6, r2
 800d026:	e7bc      	b.n	800cfa2 <_printf_i+0x146>
 800d028:	6833      	ldr	r3, [r6, #0]
 800d02a:	1d1a      	adds	r2, r3, #4
 800d02c:	6032      	str	r2, [r6, #0]
 800d02e:	681e      	ldr	r6, [r3, #0]
 800d030:	6862      	ldr	r2, [r4, #4]
 800d032:	2100      	movs	r1, #0
 800d034:	4630      	mov	r0, r6
 800d036:	f7f3 f8eb 	bl	8000210 <memchr>
 800d03a:	b108      	cbz	r0, 800d040 <_printf_i+0x1e4>
 800d03c:	1b80      	subs	r0, r0, r6
 800d03e:	6060      	str	r0, [r4, #4]
 800d040:	6863      	ldr	r3, [r4, #4]
 800d042:	6123      	str	r3, [r4, #16]
 800d044:	2300      	movs	r3, #0
 800d046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d04a:	e7aa      	b.n	800cfa2 <_printf_i+0x146>
 800d04c:	6923      	ldr	r3, [r4, #16]
 800d04e:	4632      	mov	r2, r6
 800d050:	4649      	mov	r1, r9
 800d052:	4640      	mov	r0, r8
 800d054:	47d0      	blx	sl
 800d056:	3001      	adds	r0, #1
 800d058:	d0ad      	beq.n	800cfb6 <_printf_i+0x15a>
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	079b      	lsls	r3, r3, #30
 800d05e:	d413      	bmi.n	800d088 <_printf_i+0x22c>
 800d060:	68e0      	ldr	r0, [r4, #12]
 800d062:	9b03      	ldr	r3, [sp, #12]
 800d064:	4298      	cmp	r0, r3
 800d066:	bfb8      	it	lt
 800d068:	4618      	movlt	r0, r3
 800d06a:	e7a6      	b.n	800cfba <_printf_i+0x15e>
 800d06c:	2301      	movs	r3, #1
 800d06e:	4632      	mov	r2, r6
 800d070:	4649      	mov	r1, r9
 800d072:	4640      	mov	r0, r8
 800d074:	47d0      	blx	sl
 800d076:	3001      	adds	r0, #1
 800d078:	d09d      	beq.n	800cfb6 <_printf_i+0x15a>
 800d07a:	3501      	adds	r5, #1
 800d07c:	68e3      	ldr	r3, [r4, #12]
 800d07e:	9903      	ldr	r1, [sp, #12]
 800d080:	1a5b      	subs	r3, r3, r1
 800d082:	42ab      	cmp	r3, r5
 800d084:	dcf2      	bgt.n	800d06c <_printf_i+0x210>
 800d086:	e7eb      	b.n	800d060 <_printf_i+0x204>
 800d088:	2500      	movs	r5, #0
 800d08a:	f104 0619 	add.w	r6, r4, #25
 800d08e:	e7f5      	b.n	800d07c <_printf_i+0x220>
 800d090:	08013460 	.word	0x08013460
 800d094:	08013471 	.word	0x08013471

0800d098 <_scanf_float>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	b087      	sub	sp, #28
 800d09e:	4691      	mov	r9, r2
 800d0a0:	9303      	str	r3, [sp, #12]
 800d0a2:	688b      	ldr	r3, [r1, #8]
 800d0a4:	1e5a      	subs	r2, r3, #1
 800d0a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d0aa:	bf81      	itttt	hi
 800d0ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d0b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d0b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d0b8:	608b      	strhi	r3, [r1, #8]
 800d0ba:	680b      	ldr	r3, [r1, #0]
 800d0bc:	460a      	mov	r2, r1
 800d0be:	f04f 0500 	mov.w	r5, #0
 800d0c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d0c6:	f842 3b1c 	str.w	r3, [r2], #28
 800d0ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d0ce:	4680      	mov	r8, r0
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	bf98      	it	ls
 800d0d4:	f04f 0b00 	movls.w	fp, #0
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	4616      	mov	r6, r2
 800d0dc:	46aa      	mov	sl, r5
 800d0de:	462f      	mov	r7, r5
 800d0e0:	9502      	str	r5, [sp, #8]
 800d0e2:	68a2      	ldr	r2, [r4, #8]
 800d0e4:	b15a      	cbz	r2, 800d0fe <_scanf_float+0x66>
 800d0e6:	f8d9 3000 	ldr.w	r3, [r9]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b4e      	cmp	r3, #78	@ 0x4e
 800d0ee:	d863      	bhi.n	800d1b8 <_scanf_float+0x120>
 800d0f0:	2b40      	cmp	r3, #64	@ 0x40
 800d0f2:	d83b      	bhi.n	800d16c <_scanf_float+0xd4>
 800d0f4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d0f8:	b2c8      	uxtb	r0, r1
 800d0fa:	280e      	cmp	r0, #14
 800d0fc:	d939      	bls.n	800d172 <_scanf_float+0xda>
 800d0fe:	b11f      	cbz	r7, 800d108 <_scanf_float+0x70>
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d106:	6023      	str	r3, [r4, #0]
 800d108:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d10c:	f1ba 0f01 	cmp.w	sl, #1
 800d110:	f200 8114 	bhi.w	800d33c <_scanf_float+0x2a4>
 800d114:	9b01      	ldr	r3, [sp, #4]
 800d116:	429e      	cmp	r6, r3
 800d118:	f200 8105 	bhi.w	800d326 <_scanf_float+0x28e>
 800d11c:	2001      	movs	r0, #1
 800d11e:	b007      	add	sp, #28
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d128:	2a0d      	cmp	r2, #13
 800d12a:	d8e8      	bhi.n	800d0fe <_scanf_float+0x66>
 800d12c:	a101      	add	r1, pc, #4	@ (adr r1, 800d134 <_scanf_float+0x9c>)
 800d12e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d132:	bf00      	nop
 800d134:	0800d27d 	.word	0x0800d27d
 800d138:	0800d0ff 	.word	0x0800d0ff
 800d13c:	0800d0ff 	.word	0x0800d0ff
 800d140:	0800d0ff 	.word	0x0800d0ff
 800d144:	0800d2d9 	.word	0x0800d2d9
 800d148:	0800d2b3 	.word	0x0800d2b3
 800d14c:	0800d0ff 	.word	0x0800d0ff
 800d150:	0800d0ff 	.word	0x0800d0ff
 800d154:	0800d28b 	.word	0x0800d28b
 800d158:	0800d0ff 	.word	0x0800d0ff
 800d15c:	0800d0ff 	.word	0x0800d0ff
 800d160:	0800d0ff 	.word	0x0800d0ff
 800d164:	0800d0ff 	.word	0x0800d0ff
 800d168:	0800d247 	.word	0x0800d247
 800d16c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d170:	e7da      	b.n	800d128 <_scanf_float+0x90>
 800d172:	290e      	cmp	r1, #14
 800d174:	d8c3      	bhi.n	800d0fe <_scanf_float+0x66>
 800d176:	a001      	add	r0, pc, #4	@ (adr r0, 800d17c <_scanf_float+0xe4>)
 800d178:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d17c:	0800d237 	.word	0x0800d237
 800d180:	0800d0ff 	.word	0x0800d0ff
 800d184:	0800d237 	.word	0x0800d237
 800d188:	0800d2c7 	.word	0x0800d2c7
 800d18c:	0800d0ff 	.word	0x0800d0ff
 800d190:	0800d1d9 	.word	0x0800d1d9
 800d194:	0800d21d 	.word	0x0800d21d
 800d198:	0800d21d 	.word	0x0800d21d
 800d19c:	0800d21d 	.word	0x0800d21d
 800d1a0:	0800d21d 	.word	0x0800d21d
 800d1a4:	0800d21d 	.word	0x0800d21d
 800d1a8:	0800d21d 	.word	0x0800d21d
 800d1ac:	0800d21d 	.word	0x0800d21d
 800d1b0:	0800d21d 	.word	0x0800d21d
 800d1b4:	0800d21d 	.word	0x0800d21d
 800d1b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d1ba:	d809      	bhi.n	800d1d0 <_scanf_float+0x138>
 800d1bc:	2b60      	cmp	r3, #96	@ 0x60
 800d1be:	d8b1      	bhi.n	800d124 <_scanf_float+0x8c>
 800d1c0:	2b54      	cmp	r3, #84	@ 0x54
 800d1c2:	d07b      	beq.n	800d2bc <_scanf_float+0x224>
 800d1c4:	2b59      	cmp	r3, #89	@ 0x59
 800d1c6:	d19a      	bne.n	800d0fe <_scanf_float+0x66>
 800d1c8:	2d07      	cmp	r5, #7
 800d1ca:	d198      	bne.n	800d0fe <_scanf_float+0x66>
 800d1cc:	2508      	movs	r5, #8
 800d1ce:	e02f      	b.n	800d230 <_scanf_float+0x198>
 800d1d0:	2b74      	cmp	r3, #116	@ 0x74
 800d1d2:	d073      	beq.n	800d2bc <_scanf_float+0x224>
 800d1d4:	2b79      	cmp	r3, #121	@ 0x79
 800d1d6:	e7f6      	b.n	800d1c6 <_scanf_float+0x12e>
 800d1d8:	6821      	ldr	r1, [r4, #0]
 800d1da:	05c8      	lsls	r0, r1, #23
 800d1dc:	d51e      	bpl.n	800d21c <_scanf_float+0x184>
 800d1de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d1e2:	6021      	str	r1, [r4, #0]
 800d1e4:	3701      	adds	r7, #1
 800d1e6:	f1bb 0f00 	cmp.w	fp, #0
 800d1ea:	d003      	beq.n	800d1f4 <_scanf_float+0x15c>
 800d1ec:	3201      	adds	r2, #1
 800d1ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1f2:	60a2      	str	r2, [r4, #8]
 800d1f4:	68a3      	ldr	r3, [r4, #8]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	60a3      	str	r3, [r4, #8]
 800d1fa:	6923      	ldr	r3, [r4, #16]
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	6123      	str	r3, [r4, #16]
 800d200:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d204:	3b01      	subs	r3, #1
 800d206:	2b00      	cmp	r3, #0
 800d208:	f8c9 3004 	str.w	r3, [r9, #4]
 800d20c:	f340 8082 	ble.w	800d314 <_scanf_float+0x27c>
 800d210:	f8d9 3000 	ldr.w	r3, [r9]
 800d214:	3301      	adds	r3, #1
 800d216:	f8c9 3000 	str.w	r3, [r9]
 800d21a:	e762      	b.n	800d0e2 <_scanf_float+0x4a>
 800d21c:	eb1a 0105 	adds.w	r1, sl, r5
 800d220:	f47f af6d 	bne.w	800d0fe <_scanf_float+0x66>
 800d224:	6822      	ldr	r2, [r4, #0]
 800d226:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d22a:	6022      	str	r2, [r4, #0]
 800d22c:	460d      	mov	r5, r1
 800d22e:	468a      	mov	sl, r1
 800d230:	f806 3b01 	strb.w	r3, [r6], #1
 800d234:	e7de      	b.n	800d1f4 <_scanf_float+0x15c>
 800d236:	6822      	ldr	r2, [r4, #0]
 800d238:	0610      	lsls	r0, r2, #24
 800d23a:	f57f af60 	bpl.w	800d0fe <_scanf_float+0x66>
 800d23e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d242:	6022      	str	r2, [r4, #0]
 800d244:	e7f4      	b.n	800d230 <_scanf_float+0x198>
 800d246:	f1ba 0f00 	cmp.w	sl, #0
 800d24a:	d10c      	bne.n	800d266 <_scanf_float+0x1ce>
 800d24c:	b977      	cbnz	r7, 800d26c <_scanf_float+0x1d4>
 800d24e:	6822      	ldr	r2, [r4, #0]
 800d250:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d254:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d258:	d108      	bne.n	800d26c <_scanf_float+0x1d4>
 800d25a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d25e:	6022      	str	r2, [r4, #0]
 800d260:	f04f 0a01 	mov.w	sl, #1
 800d264:	e7e4      	b.n	800d230 <_scanf_float+0x198>
 800d266:	f1ba 0f02 	cmp.w	sl, #2
 800d26a:	d050      	beq.n	800d30e <_scanf_float+0x276>
 800d26c:	2d01      	cmp	r5, #1
 800d26e:	d002      	beq.n	800d276 <_scanf_float+0x1de>
 800d270:	2d04      	cmp	r5, #4
 800d272:	f47f af44 	bne.w	800d0fe <_scanf_float+0x66>
 800d276:	3501      	adds	r5, #1
 800d278:	b2ed      	uxtb	r5, r5
 800d27a:	e7d9      	b.n	800d230 <_scanf_float+0x198>
 800d27c:	f1ba 0f01 	cmp.w	sl, #1
 800d280:	f47f af3d 	bne.w	800d0fe <_scanf_float+0x66>
 800d284:	f04f 0a02 	mov.w	sl, #2
 800d288:	e7d2      	b.n	800d230 <_scanf_float+0x198>
 800d28a:	b975      	cbnz	r5, 800d2aa <_scanf_float+0x212>
 800d28c:	2f00      	cmp	r7, #0
 800d28e:	f47f af37 	bne.w	800d100 <_scanf_float+0x68>
 800d292:	6822      	ldr	r2, [r4, #0]
 800d294:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d298:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d29c:	f040 8103 	bne.w	800d4a6 <_scanf_float+0x40e>
 800d2a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d2a4:	6022      	str	r2, [r4, #0]
 800d2a6:	2501      	movs	r5, #1
 800d2a8:	e7c2      	b.n	800d230 <_scanf_float+0x198>
 800d2aa:	2d03      	cmp	r5, #3
 800d2ac:	d0e3      	beq.n	800d276 <_scanf_float+0x1de>
 800d2ae:	2d05      	cmp	r5, #5
 800d2b0:	e7df      	b.n	800d272 <_scanf_float+0x1da>
 800d2b2:	2d02      	cmp	r5, #2
 800d2b4:	f47f af23 	bne.w	800d0fe <_scanf_float+0x66>
 800d2b8:	2503      	movs	r5, #3
 800d2ba:	e7b9      	b.n	800d230 <_scanf_float+0x198>
 800d2bc:	2d06      	cmp	r5, #6
 800d2be:	f47f af1e 	bne.w	800d0fe <_scanf_float+0x66>
 800d2c2:	2507      	movs	r5, #7
 800d2c4:	e7b4      	b.n	800d230 <_scanf_float+0x198>
 800d2c6:	6822      	ldr	r2, [r4, #0]
 800d2c8:	0591      	lsls	r1, r2, #22
 800d2ca:	f57f af18 	bpl.w	800d0fe <_scanf_float+0x66>
 800d2ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d2d2:	6022      	str	r2, [r4, #0]
 800d2d4:	9702      	str	r7, [sp, #8]
 800d2d6:	e7ab      	b.n	800d230 <_scanf_float+0x198>
 800d2d8:	6822      	ldr	r2, [r4, #0]
 800d2da:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d2de:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d2e2:	d005      	beq.n	800d2f0 <_scanf_float+0x258>
 800d2e4:	0550      	lsls	r0, r2, #21
 800d2e6:	f57f af0a 	bpl.w	800d0fe <_scanf_float+0x66>
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	f000 80db 	beq.w	800d4a6 <_scanf_float+0x40e>
 800d2f0:	0591      	lsls	r1, r2, #22
 800d2f2:	bf58      	it	pl
 800d2f4:	9902      	ldrpl	r1, [sp, #8]
 800d2f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d2fa:	bf58      	it	pl
 800d2fc:	1a79      	subpl	r1, r7, r1
 800d2fe:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d302:	bf58      	it	pl
 800d304:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d308:	6022      	str	r2, [r4, #0]
 800d30a:	2700      	movs	r7, #0
 800d30c:	e790      	b.n	800d230 <_scanf_float+0x198>
 800d30e:	f04f 0a03 	mov.w	sl, #3
 800d312:	e78d      	b.n	800d230 <_scanf_float+0x198>
 800d314:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d318:	4649      	mov	r1, r9
 800d31a:	4640      	mov	r0, r8
 800d31c:	4798      	blx	r3
 800d31e:	2800      	cmp	r0, #0
 800d320:	f43f aedf 	beq.w	800d0e2 <_scanf_float+0x4a>
 800d324:	e6eb      	b.n	800d0fe <_scanf_float+0x66>
 800d326:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d32a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d32e:	464a      	mov	r2, r9
 800d330:	4640      	mov	r0, r8
 800d332:	4798      	blx	r3
 800d334:	6923      	ldr	r3, [r4, #16]
 800d336:	3b01      	subs	r3, #1
 800d338:	6123      	str	r3, [r4, #16]
 800d33a:	e6eb      	b.n	800d114 <_scanf_float+0x7c>
 800d33c:	1e6b      	subs	r3, r5, #1
 800d33e:	2b06      	cmp	r3, #6
 800d340:	d824      	bhi.n	800d38c <_scanf_float+0x2f4>
 800d342:	2d02      	cmp	r5, #2
 800d344:	d836      	bhi.n	800d3b4 <_scanf_float+0x31c>
 800d346:	9b01      	ldr	r3, [sp, #4]
 800d348:	429e      	cmp	r6, r3
 800d34a:	f67f aee7 	bls.w	800d11c <_scanf_float+0x84>
 800d34e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d356:	464a      	mov	r2, r9
 800d358:	4640      	mov	r0, r8
 800d35a:	4798      	blx	r3
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	3b01      	subs	r3, #1
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	e7f0      	b.n	800d346 <_scanf_float+0x2ae>
 800d364:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d368:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d36c:	464a      	mov	r2, r9
 800d36e:	4640      	mov	r0, r8
 800d370:	4798      	blx	r3
 800d372:	6923      	ldr	r3, [r4, #16]
 800d374:	3b01      	subs	r3, #1
 800d376:	6123      	str	r3, [r4, #16]
 800d378:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d37c:	fa5f fa8a 	uxtb.w	sl, sl
 800d380:	f1ba 0f02 	cmp.w	sl, #2
 800d384:	d1ee      	bne.n	800d364 <_scanf_float+0x2cc>
 800d386:	3d03      	subs	r5, #3
 800d388:	b2ed      	uxtb	r5, r5
 800d38a:	1b76      	subs	r6, r6, r5
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	05da      	lsls	r2, r3, #23
 800d390:	d530      	bpl.n	800d3f4 <_scanf_float+0x35c>
 800d392:	055b      	lsls	r3, r3, #21
 800d394:	d511      	bpl.n	800d3ba <_scanf_float+0x322>
 800d396:	9b01      	ldr	r3, [sp, #4]
 800d398:	429e      	cmp	r6, r3
 800d39a:	f67f aebf 	bls.w	800d11c <_scanf_float+0x84>
 800d39e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d3a6:	464a      	mov	r2, r9
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4798      	blx	r3
 800d3ac:	6923      	ldr	r3, [r4, #16]
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	6123      	str	r3, [r4, #16]
 800d3b2:	e7f0      	b.n	800d396 <_scanf_float+0x2fe>
 800d3b4:	46aa      	mov	sl, r5
 800d3b6:	46b3      	mov	fp, r6
 800d3b8:	e7de      	b.n	800d378 <_scanf_float+0x2e0>
 800d3ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	2965      	cmp	r1, #101	@ 0x65
 800d3c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800d3ca:	6123      	str	r3, [r4, #16]
 800d3cc:	d00c      	beq.n	800d3e8 <_scanf_float+0x350>
 800d3ce:	2945      	cmp	r1, #69	@ 0x45
 800d3d0:	d00a      	beq.n	800d3e8 <_scanf_float+0x350>
 800d3d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3d6:	464a      	mov	r2, r9
 800d3d8:	4640      	mov	r0, r8
 800d3da:	4798      	blx	r3
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d3e2:	3b01      	subs	r3, #1
 800d3e4:	1eb5      	subs	r5, r6, #2
 800d3e6:	6123      	str	r3, [r4, #16]
 800d3e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d3ec:	464a      	mov	r2, r9
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	4798      	blx	r3
 800d3f2:	462e      	mov	r6, r5
 800d3f4:	6822      	ldr	r2, [r4, #0]
 800d3f6:	f012 0210 	ands.w	r2, r2, #16
 800d3fa:	d001      	beq.n	800d400 <_scanf_float+0x368>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e68e      	b.n	800d11e <_scanf_float+0x86>
 800d400:	7032      	strb	r2, [r6, #0]
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d40c:	d125      	bne.n	800d45a <_scanf_float+0x3c2>
 800d40e:	9b02      	ldr	r3, [sp, #8]
 800d410:	429f      	cmp	r7, r3
 800d412:	d00a      	beq.n	800d42a <_scanf_float+0x392>
 800d414:	1bda      	subs	r2, r3, r7
 800d416:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d41a:	429e      	cmp	r6, r3
 800d41c:	bf28      	it	cs
 800d41e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d422:	4922      	ldr	r1, [pc, #136]	@ (800d4ac <_scanf_float+0x414>)
 800d424:	4630      	mov	r0, r6
 800d426:	f000 f907 	bl	800d638 <siprintf>
 800d42a:	9901      	ldr	r1, [sp, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	4640      	mov	r0, r8
 800d430:	f002 fbb2 	bl	800fb98 <_strtod_r>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	6821      	ldr	r1, [r4, #0]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f011 0f02 	tst.w	r1, #2
 800d43e:	ec57 6b10 	vmov	r6, r7, d0
 800d442:	f103 0204 	add.w	r2, r3, #4
 800d446:	d015      	beq.n	800d474 <_scanf_float+0x3dc>
 800d448:	9903      	ldr	r1, [sp, #12]
 800d44a:	600a      	str	r2, [r1, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	e9c3 6700 	strd	r6, r7, [r3]
 800d452:	68e3      	ldr	r3, [r4, #12]
 800d454:	3301      	adds	r3, #1
 800d456:	60e3      	str	r3, [r4, #12]
 800d458:	e7d0      	b.n	800d3fc <_scanf_float+0x364>
 800d45a:	9b04      	ldr	r3, [sp, #16]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0e4      	beq.n	800d42a <_scanf_float+0x392>
 800d460:	9905      	ldr	r1, [sp, #20]
 800d462:	230a      	movs	r3, #10
 800d464:	3101      	adds	r1, #1
 800d466:	4640      	mov	r0, r8
 800d468:	f002 fc16 	bl	800fc98 <_strtol_r>
 800d46c:	9b04      	ldr	r3, [sp, #16]
 800d46e:	9e05      	ldr	r6, [sp, #20]
 800d470:	1ac2      	subs	r2, r0, r3
 800d472:	e7d0      	b.n	800d416 <_scanf_float+0x37e>
 800d474:	f011 0f04 	tst.w	r1, #4
 800d478:	9903      	ldr	r1, [sp, #12]
 800d47a:	600a      	str	r2, [r1, #0]
 800d47c:	d1e6      	bne.n	800d44c <_scanf_float+0x3b4>
 800d47e:	681d      	ldr	r5, [r3, #0]
 800d480:	4632      	mov	r2, r6
 800d482:	463b      	mov	r3, r7
 800d484:	4630      	mov	r0, r6
 800d486:	4639      	mov	r1, r7
 800d488:	f7f3 fb70 	bl	8000b6c <__aeabi_dcmpun>
 800d48c:	b128      	cbz	r0, 800d49a <_scanf_float+0x402>
 800d48e:	4808      	ldr	r0, [pc, #32]	@ (800d4b0 <_scanf_float+0x418>)
 800d490:	f000 fa2a 	bl	800d8e8 <nanf>
 800d494:	ed85 0a00 	vstr	s0, [r5]
 800d498:	e7db      	b.n	800d452 <_scanf_float+0x3ba>
 800d49a:	4630      	mov	r0, r6
 800d49c:	4639      	mov	r1, r7
 800d49e:	f7f3 fbc3 	bl	8000c28 <__aeabi_d2f>
 800d4a2:	6028      	str	r0, [r5, #0]
 800d4a4:	e7d5      	b.n	800d452 <_scanf_float+0x3ba>
 800d4a6:	2700      	movs	r7, #0
 800d4a8:	e62e      	b.n	800d108 <_scanf_float+0x70>
 800d4aa:	bf00      	nop
 800d4ac:	08013482 	.word	0x08013482
 800d4b0:	080135de 	.word	0x080135de

0800d4b4 <std>:
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	b510      	push	{r4, lr}
 800d4b8:	4604      	mov	r4, r0
 800d4ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d4be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4c2:	6083      	str	r3, [r0, #8]
 800d4c4:	8181      	strh	r1, [r0, #12]
 800d4c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4c8:	81c2      	strh	r2, [r0, #14]
 800d4ca:	6183      	str	r3, [r0, #24]
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	2208      	movs	r2, #8
 800d4d0:	305c      	adds	r0, #92	@ 0x5c
 800d4d2:	f000 f954 	bl	800d77e <memset>
 800d4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d50c <std+0x58>)
 800d4d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d4da:	4b0d      	ldr	r3, [pc, #52]	@ (800d510 <std+0x5c>)
 800d4dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d4de:	4b0d      	ldr	r3, [pc, #52]	@ (800d514 <std+0x60>)
 800d4e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d518 <std+0x64>)
 800d4e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d51c <std+0x68>)
 800d4e8:	6224      	str	r4, [r4, #32]
 800d4ea:	429c      	cmp	r4, r3
 800d4ec:	d006      	beq.n	800d4fc <std+0x48>
 800d4ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d4f2:	4294      	cmp	r4, r2
 800d4f4:	d002      	beq.n	800d4fc <std+0x48>
 800d4f6:	33d0      	adds	r3, #208	@ 0xd0
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	d105      	bne.n	800d508 <std+0x54>
 800d4fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d504:	f000 b9de 	b.w	800d8c4 <__retarget_lock_init_recursive>
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	bf00      	nop
 800d50c:	0800d6d5 	.word	0x0800d6d5
 800d510:	0800d6fb 	.word	0x0800d6fb
 800d514:	0800d733 	.word	0x0800d733
 800d518:	0800d757 	.word	0x0800d757
 800d51c:	20001b18 	.word	0x20001b18

0800d520 <stdio_exit_handler>:
 800d520:	4a02      	ldr	r2, [pc, #8]	@ (800d52c <stdio_exit_handler+0xc>)
 800d522:	4903      	ldr	r1, [pc, #12]	@ (800d530 <stdio_exit_handler+0x10>)
 800d524:	4803      	ldr	r0, [pc, #12]	@ (800d534 <stdio_exit_handler+0x14>)
 800d526:	f000 b869 	b.w	800d5fc <_fwalk_sglue>
 800d52a:	bf00      	nop
 800d52c:	20000028 	.word	0x20000028
 800d530:	08010691 	.word	0x08010691
 800d534:	20000038 	.word	0x20000038

0800d538 <cleanup_stdio>:
 800d538:	6841      	ldr	r1, [r0, #4]
 800d53a:	4b0c      	ldr	r3, [pc, #48]	@ (800d56c <cleanup_stdio+0x34>)
 800d53c:	4299      	cmp	r1, r3
 800d53e:	b510      	push	{r4, lr}
 800d540:	4604      	mov	r4, r0
 800d542:	d001      	beq.n	800d548 <cleanup_stdio+0x10>
 800d544:	f003 f8a4 	bl	8010690 <_fflush_r>
 800d548:	68a1      	ldr	r1, [r4, #8]
 800d54a:	4b09      	ldr	r3, [pc, #36]	@ (800d570 <cleanup_stdio+0x38>)
 800d54c:	4299      	cmp	r1, r3
 800d54e:	d002      	beq.n	800d556 <cleanup_stdio+0x1e>
 800d550:	4620      	mov	r0, r4
 800d552:	f003 f89d 	bl	8010690 <_fflush_r>
 800d556:	68e1      	ldr	r1, [r4, #12]
 800d558:	4b06      	ldr	r3, [pc, #24]	@ (800d574 <cleanup_stdio+0x3c>)
 800d55a:	4299      	cmp	r1, r3
 800d55c:	d004      	beq.n	800d568 <cleanup_stdio+0x30>
 800d55e:	4620      	mov	r0, r4
 800d560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d564:	f003 b894 	b.w	8010690 <_fflush_r>
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	bf00      	nop
 800d56c:	20001b18 	.word	0x20001b18
 800d570:	20001b80 	.word	0x20001b80
 800d574:	20001be8 	.word	0x20001be8

0800d578 <global_stdio_init.part.0>:
 800d578:	b510      	push	{r4, lr}
 800d57a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5a8 <global_stdio_init.part.0+0x30>)
 800d57c:	4c0b      	ldr	r4, [pc, #44]	@ (800d5ac <global_stdio_init.part.0+0x34>)
 800d57e:	4a0c      	ldr	r2, [pc, #48]	@ (800d5b0 <global_stdio_init.part.0+0x38>)
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	4620      	mov	r0, r4
 800d584:	2200      	movs	r2, #0
 800d586:	2104      	movs	r1, #4
 800d588:	f7ff ff94 	bl	800d4b4 <std>
 800d58c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d590:	2201      	movs	r2, #1
 800d592:	2109      	movs	r1, #9
 800d594:	f7ff ff8e 	bl	800d4b4 <std>
 800d598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d59c:	2202      	movs	r2, #2
 800d59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a2:	2112      	movs	r1, #18
 800d5a4:	f7ff bf86 	b.w	800d4b4 <std>
 800d5a8:	20001c50 	.word	0x20001c50
 800d5ac:	20001b18 	.word	0x20001b18
 800d5b0:	0800d521 	.word	0x0800d521

0800d5b4 <__sfp_lock_acquire>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	@ (800d5bc <__sfp_lock_acquire+0x8>)
 800d5b6:	f000 b986 	b.w	800d8c6 <__retarget_lock_acquire_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	20001c59 	.word	0x20001c59

0800d5c0 <__sfp_lock_release>:
 800d5c0:	4801      	ldr	r0, [pc, #4]	@ (800d5c8 <__sfp_lock_release+0x8>)
 800d5c2:	f000 b981 	b.w	800d8c8 <__retarget_lock_release_recursive>
 800d5c6:	bf00      	nop
 800d5c8:	20001c59 	.word	0x20001c59

0800d5cc <__sinit>:
 800d5cc:	b510      	push	{r4, lr}
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	f7ff fff0 	bl	800d5b4 <__sfp_lock_acquire>
 800d5d4:	6a23      	ldr	r3, [r4, #32]
 800d5d6:	b11b      	cbz	r3, 800d5e0 <__sinit+0x14>
 800d5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5dc:	f7ff bff0 	b.w	800d5c0 <__sfp_lock_release>
 800d5e0:	4b04      	ldr	r3, [pc, #16]	@ (800d5f4 <__sinit+0x28>)
 800d5e2:	6223      	str	r3, [r4, #32]
 800d5e4:	4b04      	ldr	r3, [pc, #16]	@ (800d5f8 <__sinit+0x2c>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1f5      	bne.n	800d5d8 <__sinit+0xc>
 800d5ec:	f7ff ffc4 	bl	800d578 <global_stdio_init.part.0>
 800d5f0:	e7f2      	b.n	800d5d8 <__sinit+0xc>
 800d5f2:	bf00      	nop
 800d5f4:	0800d539 	.word	0x0800d539
 800d5f8:	20001c50 	.word	0x20001c50

0800d5fc <_fwalk_sglue>:
 800d5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d600:	4607      	mov	r7, r0
 800d602:	4688      	mov	r8, r1
 800d604:	4614      	mov	r4, r2
 800d606:	2600      	movs	r6, #0
 800d608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d60c:	f1b9 0901 	subs.w	r9, r9, #1
 800d610:	d505      	bpl.n	800d61e <_fwalk_sglue+0x22>
 800d612:	6824      	ldr	r4, [r4, #0]
 800d614:	2c00      	cmp	r4, #0
 800d616:	d1f7      	bne.n	800d608 <_fwalk_sglue+0xc>
 800d618:	4630      	mov	r0, r6
 800d61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d61e:	89ab      	ldrh	r3, [r5, #12]
 800d620:	2b01      	cmp	r3, #1
 800d622:	d907      	bls.n	800d634 <_fwalk_sglue+0x38>
 800d624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d628:	3301      	adds	r3, #1
 800d62a:	d003      	beq.n	800d634 <_fwalk_sglue+0x38>
 800d62c:	4629      	mov	r1, r5
 800d62e:	4638      	mov	r0, r7
 800d630:	47c0      	blx	r8
 800d632:	4306      	orrs	r6, r0
 800d634:	3568      	adds	r5, #104	@ 0x68
 800d636:	e7e9      	b.n	800d60c <_fwalk_sglue+0x10>

0800d638 <siprintf>:
 800d638:	b40e      	push	{r1, r2, r3}
 800d63a:	b510      	push	{r4, lr}
 800d63c:	b09d      	sub	sp, #116	@ 0x74
 800d63e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d640:	9002      	str	r0, [sp, #8]
 800d642:	9006      	str	r0, [sp, #24]
 800d644:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d648:	480a      	ldr	r0, [pc, #40]	@ (800d674 <siprintf+0x3c>)
 800d64a:	9107      	str	r1, [sp, #28]
 800d64c:	9104      	str	r1, [sp, #16]
 800d64e:	490a      	ldr	r1, [pc, #40]	@ (800d678 <siprintf+0x40>)
 800d650:	f853 2b04 	ldr.w	r2, [r3], #4
 800d654:	9105      	str	r1, [sp, #20]
 800d656:	2400      	movs	r4, #0
 800d658:	a902      	add	r1, sp, #8
 800d65a:	6800      	ldr	r0, [r0, #0]
 800d65c:	9301      	str	r3, [sp, #4]
 800d65e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d660:	f002 fb78 	bl	800fd54 <_svfiprintf_r>
 800d664:	9b02      	ldr	r3, [sp, #8]
 800d666:	701c      	strb	r4, [r3, #0]
 800d668:	b01d      	add	sp, #116	@ 0x74
 800d66a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d66e:	b003      	add	sp, #12
 800d670:	4770      	bx	lr
 800d672:	bf00      	nop
 800d674:	20000034 	.word	0x20000034
 800d678:	ffff0208 	.word	0xffff0208

0800d67c <siscanf>:
 800d67c:	b40e      	push	{r1, r2, r3}
 800d67e:	b570      	push	{r4, r5, r6, lr}
 800d680:	b09d      	sub	sp, #116	@ 0x74
 800d682:	ac21      	add	r4, sp, #132	@ 0x84
 800d684:	2500      	movs	r5, #0
 800d686:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d68a:	f854 6b04 	ldr.w	r6, [r4], #4
 800d68e:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d692:	951b      	str	r5, [sp, #108]	@ 0x6c
 800d694:	9002      	str	r0, [sp, #8]
 800d696:	9006      	str	r0, [sp, #24]
 800d698:	f7f2 fe0a 	bl	80002b0 <strlen>
 800d69c:	4b0b      	ldr	r3, [pc, #44]	@ (800d6cc <siscanf+0x50>)
 800d69e:	9003      	str	r0, [sp, #12]
 800d6a0:	9007      	str	r0, [sp, #28]
 800d6a2:	480b      	ldr	r0, [pc, #44]	@ (800d6d0 <siscanf+0x54>)
 800d6a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d6aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d6ae:	4632      	mov	r2, r6
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	a902      	add	r1, sp, #8
 800d6b4:	6800      	ldr	r0, [r0, #0]
 800d6b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d6b8:	9514      	str	r5, [sp, #80]	@ 0x50
 800d6ba:	9401      	str	r4, [sp, #4]
 800d6bc:	f002 fca0 	bl	8010000 <__ssvfiscanf_r>
 800d6c0:	b01d      	add	sp, #116	@ 0x74
 800d6c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d6c6:	b003      	add	sp, #12
 800d6c8:	4770      	bx	lr
 800d6ca:	bf00      	nop
 800d6cc:	0800d6f7 	.word	0x0800d6f7
 800d6d0:	20000034 	.word	0x20000034

0800d6d4 <__sread>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6dc:	f000 f894 	bl	800d808 <_read_r>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	bfab      	itete	ge
 800d6e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d6e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d6e8:	181b      	addge	r3, r3, r0
 800d6ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d6ee:	bfac      	ite	ge
 800d6f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d6f2:	81a3      	strhlt	r3, [r4, #12]
 800d6f4:	bd10      	pop	{r4, pc}

0800d6f6 <__seofread>:
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	4770      	bx	lr

0800d6fa <__swrite>:
 800d6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fe:	461f      	mov	r7, r3
 800d700:	898b      	ldrh	r3, [r1, #12]
 800d702:	05db      	lsls	r3, r3, #23
 800d704:	4605      	mov	r5, r0
 800d706:	460c      	mov	r4, r1
 800d708:	4616      	mov	r6, r2
 800d70a:	d505      	bpl.n	800d718 <__swrite+0x1e>
 800d70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d710:	2302      	movs	r3, #2
 800d712:	2200      	movs	r2, #0
 800d714:	f000 f866 	bl	800d7e4 <_lseek_r>
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d71e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d722:	81a3      	strh	r3, [r4, #12]
 800d724:	4632      	mov	r2, r6
 800d726:	463b      	mov	r3, r7
 800d728:	4628      	mov	r0, r5
 800d72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d72e:	f000 b88d 	b.w	800d84c <_write_r>

0800d732 <__sseek>:
 800d732:	b510      	push	{r4, lr}
 800d734:	460c      	mov	r4, r1
 800d736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d73a:	f000 f853 	bl	800d7e4 <_lseek_r>
 800d73e:	1c43      	adds	r3, r0, #1
 800d740:	89a3      	ldrh	r3, [r4, #12]
 800d742:	bf15      	itete	ne
 800d744:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d74a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d74e:	81a3      	strheq	r3, [r4, #12]
 800d750:	bf18      	it	ne
 800d752:	81a3      	strhne	r3, [r4, #12]
 800d754:	bd10      	pop	{r4, pc}

0800d756 <__sclose>:
 800d756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d75a:	f000 b833 	b.w	800d7c4 <_close_r>

0800d75e <memcmp>:
 800d75e:	b510      	push	{r4, lr}
 800d760:	3901      	subs	r1, #1
 800d762:	4402      	add	r2, r0
 800d764:	4290      	cmp	r0, r2
 800d766:	d101      	bne.n	800d76c <memcmp+0xe>
 800d768:	2000      	movs	r0, #0
 800d76a:	e005      	b.n	800d778 <memcmp+0x1a>
 800d76c:	7803      	ldrb	r3, [r0, #0]
 800d76e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d772:	42a3      	cmp	r3, r4
 800d774:	d001      	beq.n	800d77a <memcmp+0x1c>
 800d776:	1b18      	subs	r0, r3, r4
 800d778:	bd10      	pop	{r4, pc}
 800d77a:	3001      	adds	r0, #1
 800d77c:	e7f2      	b.n	800d764 <memcmp+0x6>

0800d77e <memset>:
 800d77e:	4402      	add	r2, r0
 800d780:	4603      	mov	r3, r0
 800d782:	4293      	cmp	r3, r2
 800d784:	d100      	bne.n	800d788 <memset+0xa>
 800d786:	4770      	bx	lr
 800d788:	f803 1b01 	strb.w	r1, [r3], #1
 800d78c:	e7f9      	b.n	800d782 <memset+0x4>

0800d78e <strstr>:
 800d78e:	780a      	ldrb	r2, [r1, #0]
 800d790:	b570      	push	{r4, r5, r6, lr}
 800d792:	b96a      	cbnz	r2, 800d7b0 <strstr+0x22>
 800d794:	bd70      	pop	{r4, r5, r6, pc}
 800d796:	429a      	cmp	r2, r3
 800d798:	d109      	bne.n	800d7ae <strstr+0x20>
 800d79a:	460c      	mov	r4, r1
 800d79c:	4605      	mov	r5, r0
 800d79e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d0f6      	beq.n	800d794 <strstr+0x6>
 800d7a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d7aa:	429e      	cmp	r6, r3
 800d7ac:	d0f7      	beq.n	800d79e <strstr+0x10>
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	7803      	ldrb	r3, [r0, #0]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d1ef      	bne.n	800d796 <strstr+0x8>
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	e7ec      	b.n	800d794 <strstr+0x6>
	...

0800d7bc <_localeconv_r>:
 800d7bc:	4800      	ldr	r0, [pc, #0]	@ (800d7c0 <_localeconv_r+0x4>)
 800d7be:	4770      	bx	lr
 800d7c0:	20000174 	.word	0x20000174

0800d7c4 <_close_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	4d06      	ldr	r5, [pc, #24]	@ (800d7e0 <_close_r+0x1c>)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	4608      	mov	r0, r1
 800d7ce:	602b      	str	r3, [r5, #0]
 800d7d0:	f7f6 f8b0 	bl	8003934 <_close>
 800d7d4:	1c43      	adds	r3, r0, #1
 800d7d6:	d102      	bne.n	800d7de <_close_r+0x1a>
 800d7d8:	682b      	ldr	r3, [r5, #0]
 800d7da:	b103      	cbz	r3, 800d7de <_close_r+0x1a>
 800d7dc:	6023      	str	r3, [r4, #0]
 800d7de:	bd38      	pop	{r3, r4, r5, pc}
 800d7e0:	20001c54 	.word	0x20001c54

0800d7e4 <_lseek_r>:
 800d7e4:	b538      	push	{r3, r4, r5, lr}
 800d7e6:	4d07      	ldr	r5, [pc, #28]	@ (800d804 <_lseek_r+0x20>)
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	4608      	mov	r0, r1
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	602a      	str	r2, [r5, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	f7f6 f8c5 	bl	8003982 <_lseek>
 800d7f8:	1c43      	adds	r3, r0, #1
 800d7fa:	d102      	bne.n	800d802 <_lseek_r+0x1e>
 800d7fc:	682b      	ldr	r3, [r5, #0]
 800d7fe:	b103      	cbz	r3, 800d802 <_lseek_r+0x1e>
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	bd38      	pop	{r3, r4, r5, pc}
 800d804:	20001c54 	.word	0x20001c54

0800d808 <_read_r>:
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4d07      	ldr	r5, [pc, #28]	@ (800d828 <_read_r+0x20>)
 800d80c:	4604      	mov	r4, r0
 800d80e:	4608      	mov	r0, r1
 800d810:	4611      	mov	r1, r2
 800d812:	2200      	movs	r2, #0
 800d814:	602a      	str	r2, [r5, #0]
 800d816:	461a      	mov	r2, r3
 800d818:	f7f6 f853 	bl	80038c2 <_read>
 800d81c:	1c43      	adds	r3, r0, #1
 800d81e:	d102      	bne.n	800d826 <_read_r+0x1e>
 800d820:	682b      	ldr	r3, [r5, #0]
 800d822:	b103      	cbz	r3, 800d826 <_read_r+0x1e>
 800d824:	6023      	str	r3, [r4, #0]
 800d826:	bd38      	pop	{r3, r4, r5, pc}
 800d828:	20001c54 	.word	0x20001c54

0800d82c <_sbrk_r>:
 800d82c:	b538      	push	{r3, r4, r5, lr}
 800d82e:	4d06      	ldr	r5, [pc, #24]	@ (800d848 <_sbrk_r+0x1c>)
 800d830:	2300      	movs	r3, #0
 800d832:	4604      	mov	r4, r0
 800d834:	4608      	mov	r0, r1
 800d836:	602b      	str	r3, [r5, #0]
 800d838:	f7f6 f8b0 	bl	800399c <_sbrk>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_sbrk_r+0x1a>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_sbrk_r+0x1a>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	20001c54 	.word	0x20001c54

0800d84c <_write_r>:
 800d84c:	b538      	push	{r3, r4, r5, lr}
 800d84e:	4d07      	ldr	r5, [pc, #28]	@ (800d86c <_write_r+0x20>)
 800d850:	4604      	mov	r4, r0
 800d852:	4608      	mov	r0, r1
 800d854:	4611      	mov	r1, r2
 800d856:	2200      	movs	r2, #0
 800d858:	602a      	str	r2, [r5, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	f7f6 f84e 	bl	80038fc <_write>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d102      	bne.n	800d86a <_write_r+0x1e>
 800d864:	682b      	ldr	r3, [r5, #0]
 800d866:	b103      	cbz	r3, 800d86a <_write_r+0x1e>
 800d868:	6023      	str	r3, [r4, #0]
 800d86a:	bd38      	pop	{r3, r4, r5, pc}
 800d86c:	20001c54 	.word	0x20001c54

0800d870 <__errno>:
 800d870:	4b01      	ldr	r3, [pc, #4]	@ (800d878 <__errno+0x8>)
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	20000034 	.word	0x20000034

0800d87c <__libc_init_array>:
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	4d0d      	ldr	r5, [pc, #52]	@ (800d8b4 <__libc_init_array+0x38>)
 800d880:	4c0d      	ldr	r4, [pc, #52]	@ (800d8b8 <__libc_init_array+0x3c>)
 800d882:	1b64      	subs	r4, r4, r5
 800d884:	10a4      	asrs	r4, r4, #2
 800d886:	2600      	movs	r6, #0
 800d888:	42a6      	cmp	r6, r4
 800d88a:	d109      	bne.n	800d8a0 <__libc_init_array+0x24>
 800d88c:	4d0b      	ldr	r5, [pc, #44]	@ (800d8bc <__libc_init_array+0x40>)
 800d88e:	4c0c      	ldr	r4, [pc, #48]	@ (800d8c0 <__libc_init_array+0x44>)
 800d890:	f005 fd56 	bl	8013340 <_init>
 800d894:	1b64      	subs	r4, r4, r5
 800d896:	10a4      	asrs	r4, r4, #2
 800d898:	2600      	movs	r6, #0
 800d89a:	42a6      	cmp	r6, r4
 800d89c:	d105      	bne.n	800d8aa <__libc_init_array+0x2e>
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8a4:	4798      	blx	r3
 800d8a6:	3601      	adds	r6, #1
 800d8a8:	e7ee      	b.n	800d888 <__libc_init_array+0xc>
 800d8aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8ae:	4798      	blx	r3
 800d8b0:	3601      	adds	r6, #1
 800d8b2:	e7f2      	b.n	800d89a <__libc_init_array+0x1e>
 800d8b4:	08013950 	.word	0x08013950
 800d8b8:	08013950 	.word	0x08013950
 800d8bc:	08013950 	.word	0x08013950
 800d8c0:	08013954 	.word	0x08013954

0800d8c4 <__retarget_lock_init_recursive>:
 800d8c4:	4770      	bx	lr

0800d8c6 <__retarget_lock_acquire_recursive>:
 800d8c6:	4770      	bx	lr

0800d8c8 <__retarget_lock_release_recursive>:
 800d8c8:	4770      	bx	lr

0800d8ca <memcpy>:
 800d8ca:	440a      	add	r2, r1
 800d8cc:	4291      	cmp	r1, r2
 800d8ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8d2:	d100      	bne.n	800d8d6 <memcpy+0xc>
 800d8d4:	4770      	bx	lr
 800d8d6:	b510      	push	{r4, lr}
 800d8d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8e0:	4291      	cmp	r1, r2
 800d8e2:	d1f9      	bne.n	800d8d8 <memcpy+0xe>
 800d8e4:	bd10      	pop	{r4, pc}
	...

0800d8e8 <nanf>:
 800d8e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d8f0 <nanf+0x8>
 800d8ec:	4770      	bx	lr
 800d8ee:	bf00      	nop
 800d8f0:	7fc00000 	.word	0x7fc00000

0800d8f4 <quorem>:
 800d8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f8:	6903      	ldr	r3, [r0, #16]
 800d8fa:	690c      	ldr	r4, [r1, #16]
 800d8fc:	42a3      	cmp	r3, r4
 800d8fe:	4607      	mov	r7, r0
 800d900:	db7e      	blt.n	800da00 <quorem+0x10c>
 800d902:	3c01      	subs	r4, #1
 800d904:	f101 0814 	add.w	r8, r1, #20
 800d908:	00a3      	lsls	r3, r4, #2
 800d90a:	f100 0514 	add.w	r5, r0, #20
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d91a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d91e:	3301      	adds	r3, #1
 800d920:	429a      	cmp	r2, r3
 800d922:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d926:	fbb2 f6f3 	udiv	r6, r2, r3
 800d92a:	d32e      	bcc.n	800d98a <quorem+0x96>
 800d92c:	f04f 0a00 	mov.w	sl, #0
 800d930:	46c4      	mov	ip, r8
 800d932:	46ae      	mov	lr, r5
 800d934:	46d3      	mov	fp, sl
 800d936:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d93a:	b298      	uxth	r0, r3
 800d93c:	fb06 a000 	mla	r0, r6, r0, sl
 800d940:	0c02      	lsrs	r2, r0, #16
 800d942:	0c1b      	lsrs	r3, r3, #16
 800d944:	fb06 2303 	mla	r3, r6, r3, r2
 800d948:	f8de 2000 	ldr.w	r2, [lr]
 800d94c:	b280      	uxth	r0, r0
 800d94e:	b292      	uxth	r2, r2
 800d950:	1a12      	subs	r2, r2, r0
 800d952:	445a      	add	r2, fp
 800d954:	f8de 0000 	ldr.w	r0, [lr]
 800d958:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d962:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d966:	b292      	uxth	r2, r2
 800d968:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d96c:	45e1      	cmp	r9, ip
 800d96e:	f84e 2b04 	str.w	r2, [lr], #4
 800d972:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d976:	d2de      	bcs.n	800d936 <quorem+0x42>
 800d978:	9b00      	ldr	r3, [sp, #0]
 800d97a:	58eb      	ldr	r3, [r5, r3]
 800d97c:	b92b      	cbnz	r3, 800d98a <quorem+0x96>
 800d97e:	9b01      	ldr	r3, [sp, #4]
 800d980:	3b04      	subs	r3, #4
 800d982:	429d      	cmp	r5, r3
 800d984:	461a      	mov	r2, r3
 800d986:	d32f      	bcc.n	800d9e8 <quorem+0xf4>
 800d988:	613c      	str	r4, [r7, #16]
 800d98a:	4638      	mov	r0, r7
 800d98c:	f001 f912 	bl	800ebb4 <__mcmp>
 800d990:	2800      	cmp	r0, #0
 800d992:	db25      	blt.n	800d9e0 <quorem+0xec>
 800d994:	4629      	mov	r1, r5
 800d996:	2000      	movs	r0, #0
 800d998:	f858 2b04 	ldr.w	r2, [r8], #4
 800d99c:	f8d1 c000 	ldr.w	ip, [r1]
 800d9a0:	fa1f fe82 	uxth.w	lr, r2
 800d9a4:	fa1f f38c 	uxth.w	r3, ip
 800d9a8:	eba3 030e 	sub.w	r3, r3, lr
 800d9ac:	4403      	add	r3, r0
 800d9ae:	0c12      	lsrs	r2, r2, #16
 800d9b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d9b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9be:	45c1      	cmp	r9, r8
 800d9c0:	f841 3b04 	str.w	r3, [r1], #4
 800d9c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d9c8:	d2e6      	bcs.n	800d998 <quorem+0xa4>
 800d9ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9d2:	b922      	cbnz	r2, 800d9de <quorem+0xea>
 800d9d4:	3b04      	subs	r3, #4
 800d9d6:	429d      	cmp	r5, r3
 800d9d8:	461a      	mov	r2, r3
 800d9da:	d30b      	bcc.n	800d9f4 <quorem+0x100>
 800d9dc:	613c      	str	r4, [r7, #16]
 800d9de:	3601      	adds	r6, #1
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	b003      	add	sp, #12
 800d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e8:	6812      	ldr	r2, [r2, #0]
 800d9ea:	3b04      	subs	r3, #4
 800d9ec:	2a00      	cmp	r2, #0
 800d9ee:	d1cb      	bne.n	800d988 <quorem+0x94>
 800d9f0:	3c01      	subs	r4, #1
 800d9f2:	e7c6      	b.n	800d982 <quorem+0x8e>
 800d9f4:	6812      	ldr	r2, [r2, #0]
 800d9f6:	3b04      	subs	r3, #4
 800d9f8:	2a00      	cmp	r2, #0
 800d9fa:	d1ef      	bne.n	800d9dc <quorem+0xe8>
 800d9fc:	3c01      	subs	r4, #1
 800d9fe:	e7ea      	b.n	800d9d6 <quorem+0xe2>
 800da00:	2000      	movs	r0, #0
 800da02:	e7ee      	b.n	800d9e2 <quorem+0xee>
 800da04:	0000      	movs	r0, r0
	...

0800da08 <_dtoa_r>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	69c7      	ldr	r7, [r0, #28]
 800da0e:	b097      	sub	sp, #92	@ 0x5c
 800da10:	ed8d 0b04 	vstr	d0, [sp, #16]
 800da14:	ec55 4b10 	vmov	r4, r5, d0
 800da18:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800da1a:	9107      	str	r1, [sp, #28]
 800da1c:	4681      	mov	r9, r0
 800da1e:	920c      	str	r2, [sp, #48]	@ 0x30
 800da20:	9311      	str	r3, [sp, #68]	@ 0x44
 800da22:	b97f      	cbnz	r7, 800da44 <_dtoa_r+0x3c>
 800da24:	2010      	movs	r0, #16
 800da26:	f7fe fe2b 	bl	800c680 <malloc>
 800da2a:	4602      	mov	r2, r0
 800da2c:	f8c9 001c 	str.w	r0, [r9, #28]
 800da30:	b920      	cbnz	r0, 800da3c <_dtoa_r+0x34>
 800da32:	4ba9      	ldr	r3, [pc, #676]	@ (800dcd8 <_dtoa_r+0x2d0>)
 800da34:	21ef      	movs	r1, #239	@ 0xef
 800da36:	48a9      	ldr	r0, [pc, #676]	@ (800dcdc <_dtoa_r+0x2d4>)
 800da38:	f002 fefa 	bl	8010830 <__assert_func>
 800da3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800da40:	6007      	str	r7, [r0, #0]
 800da42:	60c7      	str	r7, [r0, #12]
 800da44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800da48:	6819      	ldr	r1, [r3, #0]
 800da4a:	b159      	cbz	r1, 800da64 <_dtoa_r+0x5c>
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	604a      	str	r2, [r1, #4]
 800da50:	2301      	movs	r3, #1
 800da52:	4093      	lsls	r3, r2
 800da54:	608b      	str	r3, [r1, #8]
 800da56:	4648      	mov	r0, r9
 800da58:	f000 fe30 	bl	800e6bc <_Bfree>
 800da5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800da60:	2200      	movs	r2, #0
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	1e2b      	subs	r3, r5, #0
 800da66:	bfb9      	ittee	lt
 800da68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800da6c:	9305      	strlt	r3, [sp, #20]
 800da6e:	2300      	movge	r3, #0
 800da70:	6033      	strge	r3, [r6, #0]
 800da72:	9f05      	ldr	r7, [sp, #20]
 800da74:	4b9a      	ldr	r3, [pc, #616]	@ (800dce0 <_dtoa_r+0x2d8>)
 800da76:	bfbc      	itt	lt
 800da78:	2201      	movlt	r2, #1
 800da7a:	6032      	strlt	r2, [r6, #0]
 800da7c:	43bb      	bics	r3, r7
 800da7e:	d112      	bne.n	800daa6 <_dtoa_r+0x9e>
 800da80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800da82:	f242 730f 	movw	r3, #9999	@ 0x270f
 800da86:	6013      	str	r3, [r2, #0]
 800da88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800da8c:	4323      	orrs	r3, r4
 800da8e:	f000 855a 	beq.w	800e546 <_dtoa_r+0xb3e>
 800da92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da94:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800dcf4 <_dtoa_r+0x2ec>
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f000 855c 	beq.w	800e556 <_dtoa_r+0xb4e>
 800da9e:	f10a 0303 	add.w	r3, sl, #3
 800daa2:	f000 bd56 	b.w	800e552 <_dtoa_r+0xb4a>
 800daa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800daaa:	2200      	movs	r2, #0
 800daac:	ec51 0b17 	vmov	r0, r1, d7
 800dab0:	2300      	movs	r3, #0
 800dab2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800dab6:	f7f3 f827 	bl	8000b08 <__aeabi_dcmpeq>
 800daba:	4680      	mov	r8, r0
 800dabc:	b158      	cbz	r0, 800dad6 <_dtoa_r+0xce>
 800dabe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dac0:	2301      	movs	r3, #1
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dac6:	b113      	cbz	r3, 800dace <_dtoa_r+0xc6>
 800dac8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800daca:	4b86      	ldr	r3, [pc, #536]	@ (800dce4 <_dtoa_r+0x2dc>)
 800dacc:	6013      	str	r3, [r2, #0]
 800dace:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800dcf8 <_dtoa_r+0x2f0>
 800dad2:	f000 bd40 	b.w	800e556 <_dtoa_r+0xb4e>
 800dad6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800dada:	aa14      	add	r2, sp, #80	@ 0x50
 800dadc:	a915      	add	r1, sp, #84	@ 0x54
 800dade:	4648      	mov	r0, r9
 800dae0:	f001 f988 	bl	800edf4 <__d2b>
 800dae4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dae8:	9002      	str	r0, [sp, #8]
 800daea:	2e00      	cmp	r6, #0
 800daec:	d078      	beq.n	800dbe0 <_dtoa_r+0x1d8>
 800daee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800daf0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800daf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800daf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dafc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800db00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800db04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800db08:	4619      	mov	r1, r3
 800db0a:	2200      	movs	r2, #0
 800db0c:	4b76      	ldr	r3, [pc, #472]	@ (800dce8 <_dtoa_r+0x2e0>)
 800db0e:	f7f2 fbdb 	bl	80002c8 <__aeabi_dsub>
 800db12:	a36b      	add	r3, pc, #428	@ (adr r3, 800dcc0 <_dtoa_r+0x2b8>)
 800db14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db18:	f7f2 fd8e 	bl	8000638 <__aeabi_dmul>
 800db1c:	a36a      	add	r3, pc, #424	@ (adr r3, 800dcc8 <_dtoa_r+0x2c0>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fbd3 	bl	80002cc <__adddf3>
 800db26:	4604      	mov	r4, r0
 800db28:	4630      	mov	r0, r6
 800db2a:	460d      	mov	r5, r1
 800db2c:	f7f2 fd1a 	bl	8000564 <__aeabi_i2d>
 800db30:	a367      	add	r3, pc, #412	@ (adr r3, 800dcd0 <_dtoa_r+0x2c8>)
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fd7f 	bl	8000638 <__aeabi_dmul>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4620      	mov	r0, r4
 800db40:	4629      	mov	r1, r5
 800db42:	f7f2 fbc3 	bl	80002cc <__adddf3>
 800db46:	4604      	mov	r4, r0
 800db48:	460d      	mov	r5, r1
 800db4a:	f7f3 f825 	bl	8000b98 <__aeabi_d2iz>
 800db4e:	2200      	movs	r2, #0
 800db50:	4607      	mov	r7, r0
 800db52:	2300      	movs	r3, #0
 800db54:	4620      	mov	r0, r4
 800db56:	4629      	mov	r1, r5
 800db58:	f7f2 ffe0 	bl	8000b1c <__aeabi_dcmplt>
 800db5c:	b140      	cbz	r0, 800db70 <_dtoa_r+0x168>
 800db5e:	4638      	mov	r0, r7
 800db60:	f7f2 fd00 	bl	8000564 <__aeabi_i2d>
 800db64:	4622      	mov	r2, r4
 800db66:	462b      	mov	r3, r5
 800db68:	f7f2 ffce 	bl	8000b08 <__aeabi_dcmpeq>
 800db6c:	b900      	cbnz	r0, 800db70 <_dtoa_r+0x168>
 800db6e:	3f01      	subs	r7, #1
 800db70:	2f16      	cmp	r7, #22
 800db72:	d852      	bhi.n	800dc1a <_dtoa_r+0x212>
 800db74:	4b5d      	ldr	r3, [pc, #372]	@ (800dcec <_dtoa_r+0x2e4>)
 800db76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800db82:	f7f2 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 800db86:	2800      	cmp	r0, #0
 800db88:	d049      	beq.n	800dc1e <_dtoa_r+0x216>
 800db8a:	3f01      	subs	r7, #1
 800db8c:	2300      	movs	r3, #0
 800db8e:	9310      	str	r3, [sp, #64]	@ 0x40
 800db90:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800db92:	1b9b      	subs	r3, r3, r6
 800db94:	1e5a      	subs	r2, r3, #1
 800db96:	bf45      	ittet	mi
 800db98:	f1c3 0301 	rsbmi	r3, r3, #1
 800db9c:	9300      	strmi	r3, [sp, #0]
 800db9e:	2300      	movpl	r3, #0
 800dba0:	2300      	movmi	r3, #0
 800dba2:	9206      	str	r2, [sp, #24]
 800dba4:	bf54      	ite	pl
 800dba6:	9300      	strpl	r3, [sp, #0]
 800dba8:	9306      	strmi	r3, [sp, #24]
 800dbaa:	2f00      	cmp	r7, #0
 800dbac:	db39      	blt.n	800dc22 <_dtoa_r+0x21a>
 800dbae:	9b06      	ldr	r3, [sp, #24]
 800dbb0:	970d      	str	r7, [sp, #52]	@ 0x34
 800dbb2:	443b      	add	r3, r7
 800dbb4:	9306      	str	r3, [sp, #24]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	9308      	str	r3, [sp, #32]
 800dbba:	9b07      	ldr	r3, [sp, #28]
 800dbbc:	2b09      	cmp	r3, #9
 800dbbe:	d863      	bhi.n	800dc88 <_dtoa_r+0x280>
 800dbc0:	2b05      	cmp	r3, #5
 800dbc2:	bfc4      	itt	gt
 800dbc4:	3b04      	subgt	r3, #4
 800dbc6:	9307      	strgt	r3, [sp, #28]
 800dbc8:	9b07      	ldr	r3, [sp, #28]
 800dbca:	f1a3 0302 	sub.w	r3, r3, #2
 800dbce:	bfcc      	ite	gt
 800dbd0:	2400      	movgt	r4, #0
 800dbd2:	2401      	movle	r4, #1
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d863      	bhi.n	800dca0 <_dtoa_r+0x298>
 800dbd8:	e8df f003 	tbb	[pc, r3]
 800dbdc:	2b375452 	.word	0x2b375452
 800dbe0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800dbe4:	441e      	add	r6, r3
 800dbe6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dbea:	2b20      	cmp	r3, #32
 800dbec:	bfc1      	itttt	gt
 800dbee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dbf2:	409f      	lslgt	r7, r3
 800dbf4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dbf8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800dbfc:	bfd6      	itet	le
 800dbfe:	f1c3 0320 	rsble	r3, r3, #32
 800dc02:	ea47 0003 	orrgt.w	r0, r7, r3
 800dc06:	fa04 f003 	lslle.w	r0, r4, r3
 800dc0a:	f7f2 fc9b 	bl	8000544 <__aeabi_ui2d>
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800dc14:	3e01      	subs	r6, #1
 800dc16:	9212      	str	r2, [sp, #72]	@ 0x48
 800dc18:	e776      	b.n	800db08 <_dtoa_r+0x100>
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e7b7      	b.n	800db8e <_dtoa_r+0x186>
 800dc1e:	9010      	str	r0, [sp, #64]	@ 0x40
 800dc20:	e7b6      	b.n	800db90 <_dtoa_r+0x188>
 800dc22:	9b00      	ldr	r3, [sp, #0]
 800dc24:	1bdb      	subs	r3, r3, r7
 800dc26:	9300      	str	r3, [sp, #0]
 800dc28:	427b      	negs	r3, r7
 800dc2a:	9308      	str	r3, [sp, #32]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800dc30:	e7c3      	b.n	800dbba <_dtoa_r+0x1b2>
 800dc32:	2301      	movs	r3, #1
 800dc34:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc38:	eb07 0b03 	add.w	fp, r7, r3
 800dc3c:	f10b 0301 	add.w	r3, fp, #1
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	9303      	str	r3, [sp, #12]
 800dc44:	bfb8      	it	lt
 800dc46:	2301      	movlt	r3, #1
 800dc48:	e006      	b.n	800dc58 <_dtoa_r+0x250>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	dd28      	ble.n	800dca6 <_dtoa_r+0x29e>
 800dc54:	469b      	mov	fp, r3
 800dc56:	9303      	str	r3, [sp, #12]
 800dc58:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	2204      	movs	r2, #4
 800dc60:	f102 0514 	add.w	r5, r2, #20
 800dc64:	429d      	cmp	r5, r3
 800dc66:	d926      	bls.n	800dcb6 <_dtoa_r+0x2ae>
 800dc68:	6041      	str	r1, [r0, #4]
 800dc6a:	4648      	mov	r0, r9
 800dc6c:	f000 fce6 	bl	800e63c <_Balloc>
 800dc70:	4682      	mov	sl, r0
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d142      	bne.n	800dcfc <_dtoa_r+0x2f4>
 800dc76:	4b1e      	ldr	r3, [pc, #120]	@ (800dcf0 <_dtoa_r+0x2e8>)
 800dc78:	4602      	mov	r2, r0
 800dc7a:	f240 11af 	movw	r1, #431	@ 0x1af
 800dc7e:	e6da      	b.n	800da36 <_dtoa_r+0x2e>
 800dc80:	2300      	movs	r3, #0
 800dc82:	e7e3      	b.n	800dc4c <_dtoa_r+0x244>
 800dc84:	2300      	movs	r3, #0
 800dc86:	e7d5      	b.n	800dc34 <_dtoa_r+0x22c>
 800dc88:	2401      	movs	r4, #1
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	9307      	str	r3, [sp, #28]
 800dc8e:	9409      	str	r4, [sp, #36]	@ 0x24
 800dc90:	f04f 3bff 	mov.w	fp, #4294967295
 800dc94:	2200      	movs	r2, #0
 800dc96:	f8cd b00c 	str.w	fp, [sp, #12]
 800dc9a:	2312      	movs	r3, #18
 800dc9c:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc9e:	e7db      	b.n	800dc58 <_dtoa_r+0x250>
 800dca0:	2301      	movs	r3, #1
 800dca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800dca4:	e7f4      	b.n	800dc90 <_dtoa_r+0x288>
 800dca6:	f04f 0b01 	mov.w	fp, #1
 800dcaa:	f8cd b00c 	str.w	fp, [sp, #12]
 800dcae:	465b      	mov	r3, fp
 800dcb0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800dcb4:	e7d0      	b.n	800dc58 <_dtoa_r+0x250>
 800dcb6:	3101      	adds	r1, #1
 800dcb8:	0052      	lsls	r2, r2, #1
 800dcba:	e7d1      	b.n	800dc60 <_dtoa_r+0x258>
 800dcbc:	f3af 8000 	nop.w
 800dcc0:	636f4361 	.word	0x636f4361
 800dcc4:	3fd287a7 	.word	0x3fd287a7
 800dcc8:	8b60c8b3 	.word	0x8b60c8b3
 800dccc:	3fc68a28 	.word	0x3fc68a28
 800dcd0:	509f79fb 	.word	0x509f79fb
 800dcd4:	3fd34413 	.word	0x3fd34413
 800dcd8:	08013494 	.word	0x08013494
 800dcdc:	080134ab 	.word	0x080134ab
 800dce0:	7ff00000 	.word	0x7ff00000
 800dce4:	08013597 	.word	0x08013597
 800dce8:	3ff80000 	.word	0x3ff80000
 800dcec:	08013678 	.word	0x08013678
 800dcf0:	08013503 	.word	0x08013503
 800dcf4:	08013490 	.word	0x08013490
 800dcf8:	08013596 	.word	0x08013596
 800dcfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800dd00:	6018      	str	r0, [r3, #0]
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	2b0e      	cmp	r3, #14
 800dd06:	f200 80a1 	bhi.w	800de4c <_dtoa_r+0x444>
 800dd0a:	2c00      	cmp	r4, #0
 800dd0c:	f000 809e 	beq.w	800de4c <_dtoa_r+0x444>
 800dd10:	2f00      	cmp	r7, #0
 800dd12:	dd33      	ble.n	800dd7c <_dtoa_r+0x374>
 800dd14:	4b9c      	ldr	r3, [pc, #624]	@ (800df88 <_dtoa_r+0x580>)
 800dd16:	f007 020f 	and.w	r2, r7, #15
 800dd1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd1e:	ed93 7b00 	vldr	d7, [r3]
 800dd22:	05f8      	lsls	r0, r7, #23
 800dd24:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800dd28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dd2c:	d516      	bpl.n	800dd5c <_dtoa_r+0x354>
 800dd2e:	4b97      	ldr	r3, [pc, #604]	@ (800df8c <_dtoa_r+0x584>)
 800dd30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd38:	f7f2 fda8 	bl	800088c <__aeabi_ddiv>
 800dd3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd40:	f004 040f 	and.w	r4, r4, #15
 800dd44:	2603      	movs	r6, #3
 800dd46:	4d91      	ldr	r5, [pc, #580]	@ (800df8c <_dtoa_r+0x584>)
 800dd48:	b954      	cbnz	r4, 800dd60 <_dtoa_r+0x358>
 800dd4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800dd4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd52:	f7f2 fd9b 	bl	800088c <__aeabi_ddiv>
 800dd56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd5a:	e028      	b.n	800ddae <_dtoa_r+0x3a6>
 800dd5c:	2602      	movs	r6, #2
 800dd5e:	e7f2      	b.n	800dd46 <_dtoa_r+0x33e>
 800dd60:	07e1      	lsls	r1, r4, #31
 800dd62:	d508      	bpl.n	800dd76 <_dtoa_r+0x36e>
 800dd64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dd68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd6c:	f7f2 fc64 	bl	8000638 <__aeabi_dmul>
 800dd70:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dd74:	3601      	adds	r6, #1
 800dd76:	1064      	asrs	r4, r4, #1
 800dd78:	3508      	adds	r5, #8
 800dd7a:	e7e5      	b.n	800dd48 <_dtoa_r+0x340>
 800dd7c:	f000 80af 	beq.w	800dede <_dtoa_r+0x4d6>
 800dd80:	427c      	negs	r4, r7
 800dd82:	4b81      	ldr	r3, [pc, #516]	@ (800df88 <_dtoa_r+0x580>)
 800dd84:	4d81      	ldr	r5, [pc, #516]	@ (800df8c <_dtoa_r+0x584>)
 800dd86:	f004 020f 	and.w	r2, r4, #15
 800dd8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd92:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd96:	f7f2 fc4f 	bl	8000638 <__aeabi_dmul>
 800dd9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd9e:	1124      	asrs	r4, r4, #4
 800dda0:	2300      	movs	r3, #0
 800dda2:	2602      	movs	r6, #2
 800dda4:	2c00      	cmp	r4, #0
 800dda6:	f040 808f 	bne.w	800dec8 <_dtoa_r+0x4c0>
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1d3      	bne.n	800dd56 <_dtoa_r+0x34e>
 800ddae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ddb0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 8094 	beq.w	800dee2 <_dtoa_r+0x4da>
 800ddba:	4b75      	ldr	r3, [pc, #468]	@ (800df90 <_dtoa_r+0x588>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7f2 feab 	bl	8000b1c <__aeabi_dcmplt>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	f000 808b 	beq.w	800dee2 <_dtoa_r+0x4da>
 800ddcc:	9b03      	ldr	r3, [sp, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8087 	beq.w	800dee2 <_dtoa_r+0x4da>
 800ddd4:	f1bb 0f00 	cmp.w	fp, #0
 800ddd8:	dd34      	ble.n	800de44 <_dtoa_r+0x43c>
 800ddda:	4620      	mov	r0, r4
 800dddc:	4b6d      	ldr	r3, [pc, #436]	@ (800df94 <_dtoa_r+0x58c>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	4629      	mov	r1, r5
 800dde2:	f7f2 fc29 	bl	8000638 <__aeabi_dmul>
 800dde6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ddea:	f107 38ff 	add.w	r8, r7, #4294967295
 800ddee:	3601      	adds	r6, #1
 800ddf0:	465c      	mov	r4, fp
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7f2 fbb6 	bl	8000564 <__aeabi_i2d>
 800ddf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddfc:	f7f2 fc1c 	bl	8000638 <__aeabi_dmul>
 800de00:	4b65      	ldr	r3, [pc, #404]	@ (800df98 <_dtoa_r+0x590>)
 800de02:	2200      	movs	r2, #0
 800de04:	f7f2 fa62 	bl	80002cc <__adddf3>
 800de08:	4605      	mov	r5, r0
 800de0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800de0e:	2c00      	cmp	r4, #0
 800de10:	d16a      	bne.n	800dee8 <_dtoa_r+0x4e0>
 800de12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de16:	4b61      	ldr	r3, [pc, #388]	@ (800df9c <_dtoa_r+0x594>)
 800de18:	2200      	movs	r2, #0
 800de1a:	f7f2 fa55 	bl	80002c8 <__aeabi_dsub>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de26:	462a      	mov	r2, r5
 800de28:	4633      	mov	r3, r6
 800de2a:	f7f2 fe95 	bl	8000b58 <__aeabi_dcmpgt>
 800de2e:	2800      	cmp	r0, #0
 800de30:	f040 8298 	bne.w	800e364 <_dtoa_r+0x95c>
 800de34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de38:	462a      	mov	r2, r5
 800de3a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800de3e:	f7f2 fe6d 	bl	8000b1c <__aeabi_dcmplt>
 800de42:	bb38      	cbnz	r0, 800de94 <_dtoa_r+0x48c>
 800de44:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800de48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800de4c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f2c0 8157 	blt.w	800e102 <_dtoa_r+0x6fa>
 800de54:	2f0e      	cmp	r7, #14
 800de56:	f300 8154 	bgt.w	800e102 <_dtoa_r+0x6fa>
 800de5a:	4b4b      	ldr	r3, [pc, #300]	@ (800df88 <_dtoa_r+0x580>)
 800de5c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de60:	ed93 7b00 	vldr	d7, [r3]
 800de64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de66:	2b00      	cmp	r3, #0
 800de68:	ed8d 7b00 	vstr	d7, [sp]
 800de6c:	f280 80e5 	bge.w	800e03a <_dtoa_r+0x632>
 800de70:	9b03      	ldr	r3, [sp, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	f300 80e1 	bgt.w	800e03a <_dtoa_r+0x632>
 800de78:	d10c      	bne.n	800de94 <_dtoa_r+0x48c>
 800de7a:	4b48      	ldr	r3, [pc, #288]	@ (800df9c <_dtoa_r+0x594>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	ec51 0b17 	vmov	r0, r1, d7
 800de82:	f7f2 fbd9 	bl	8000638 <__aeabi_dmul>
 800de86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de8a:	f7f2 fe5b 	bl	8000b44 <__aeabi_dcmpge>
 800de8e:	2800      	cmp	r0, #0
 800de90:	f000 8266 	beq.w	800e360 <_dtoa_r+0x958>
 800de94:	2400      	movs	r4, #0
 800de96:	4625      	mov	r5, r4
 800de98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de9a:	4656      	mov	r6, sl
 800de9c:	ea6f 0803 	mvn.w	r8, r3
 800dea0:	2700      	movs	r7, #0
 800dea2:	4621      	mov	r1, r4
 800dea4:	4648      	mov	r0, r9
 800dea6:	f000 fc09 	bl	800e6bc <_Bfree>
 800deaa:	2d00      	cmp	r5, #0
 800deac:	f000 80bd 	beq.w	800e02a <_dtoa_r+0x622>
 800deb0:	b12f      	cbz	r7, 800debe <_dtoa_r+0x4b6>
 800deb2:	42af      	cmp	r7, r5
 800deb4:	d003      	beq.n	800debe <_dtoa_r+0x4b6>
 800deb6:	4639      	mov	r1, r7
 800deb8:	4648      	mov	r0, r9
 800deba:	f000 fbff 	bl	800e6bc <_Bfree>
 800debe:	4629      	mov	r1, r5
 800dec0:	4648      	mov	r0, r9
 800dec2:	f000 fbfb 	bl	800e6bc <_Bfree>
 800dec6:	e0b0      	b.n	800e02a <_dtoa_r+0x622>
 800dec8:	07e2      	lsls	r2, r4, #31
 800deca:	d505      	bpl.n	800ded8 <_dtoa_r+0x4d0>
 800decc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ded0:	f7f2 fbb2 	bl	8000638 <__aeabi_dmul>
 800ded4:	3601      	adds	r6, #1
 800ded6:	2301      	movs	r3, #1
 800ded8:	1064      	asrs	r4, r4, #1
 800deda:	3508      	adds	r5, #8
 800dedc:	e762      	b.n	800dda4 <_dtoa_r+0x39c>
 800dede:	2602      	movs	r6, #2
 800dee0:	e765      	b.n	800ddae <_dtoa_r+0x3a6>
 800dee2:	9c03      	ldr	r4, [sp, #12]
 800dee4:	46b8      	mov	r8, r7
 800dee6:	e784      	b.n	800ddf2 <_dtoa_r+0x3ea>
 800dee8:	4b27      	ldr	r3, [pc, #156]	@ (800df88 <_dtoa_r+0x580>)
 800deea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800deec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800def0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800def4:	4454      	add	r4, sl
 800def6:	2900      	cmp	r1, #0
 800def8:	d054      	beq.n	800dfa4 <_dtoa_r+0x59c>
 800defa:	4929      	ldr	r1, [pc, #164]	@ (800dfa0 <_dtoa_r+0x598>)
 800defc:	2000      	movs	r0, #0
 800defe:	f7f2 fcc5 	bl	800088c <__aeabi_ddiv>
 800df02:	4633      	mov	r3, r6
 800df04:	462a      	mov	r2, r5
 800df06:	f7f2 f9df 	bl	80002c8 <__aeabi_dsub>
 800df0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800df0e:	4656      	mov	r6, sl
 800df10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df14:	f7f2 fe40 	bl	8000b98 <__aeabi_d2iz>
 800df18:	4605      	mov	r5, r0
 800df1a:	f7f2 fb23 	bl	8000564 <__aeabi_i2d>
 800df1e:	4602      	mov	r2, r0
 800df20:	460b      	mov	r3, r1
 800df22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df26:	f7f2 f9cf 	bl	80002c8 <__aeabi_dsub>
 800df2a:	3530      	adds	r5, #48	@ 0x30
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df34:	f806 5b01 	strb.w	r5, [r6], #1
 800df38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df3c:	f7f2 fdee 	bl	8000b1c <__aeabi_dcmplt>
 800df40:	2800      	cmp	r0, #0
 800df42:	d172      	bne.n	800e02a <_dtoa_r+0x622>
 800df44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df48:	4911      	ldr	r1, [pc, #68]	@ (800df90 <_dtoa_r+0x588>)
 800df4a:	2000      	movs	r0, #0
 800df4c:	f7f2 f9bc 	bl	80002c8 <__aeabi_dsub>
 800df50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800df54:	f7f2 fde2 	bl	8000b1c <__aeabi_dcmplt>
 800df58:	2800      	cmp	r0, #0
 800df5a:	f040 80b4 	bne.w	800e0c6 <_dtoa_r+0x6be>
 800df5e:	42a6      	cmp	r6, r4
 800df60:	f43f af70 	beq.w	800de44 <_dtoa_r+0x43c>
 800df64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800df68:	4b0a      	ldr	r3, [pc, #40]	@ (800df94 <_dtoa_r+0x58c>)
 800df6a:	2200      	movs	r2, #0
 800df6c:	f7f2 fb64 	bl	8000638 <__aeabi_dmul>
 800df70:	4b08      	ldr	r3, [pc, #32]	@ (800df94 <_dtoa_r+0x58c>)
 800df72:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800df76:	2200      	movs	r2, #0
 800df78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df7c:	f7f2 fb5c 	bl	8000638 <__aeabi_dmul>
 800df80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df84:	e7c4      	b.n	800df10 <_dtoa_r+0x508>
 800df86:	bf00      	nop
 800df88:	08013678 	.word	0x08013678
 800df8c:	08013650 	.word	0x08013650
 800df90:	3ff00000 	.word	0x3ff00000
 800df94:	40240000 	.word	0x40240000
 800df98:	401c0000 	.word	0x401c0000
 800df9c:	40140000 	.word	0x40140000
 800dfa0:	3fe00000 	.word	0x3fe00000
 800dfa4:	4631      	mov	r1, r6
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f7f2 fb46 	bl	8000638 <__aeabi_dmul>
 800dfac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800dfb0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800dfb2:	4656      	mov	r6, sl
 800dfb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfb8:	f7f2 fdee 	bl	8000b98 <__aeabi_d2iz>
 800dfbc:	4605      	mov	r5, r0
 800dfbe:	f7f2 fad1 	bl	8000564 <__aeabi_i2d>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfca:	f7f2 f97d 	bl	80002c8 <__aeabi_dsub>
 800dfce:	3530      	adds	r5, #48	@ 0x30
 800dfd0:	f806 5b01 	strb.w	r5, [r6], #1
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	42a6      	cmp	r6, r4
 800dfda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dfde:	f04f 0200 	mov.w	r2, #0
 800dfe2:	d124      	bne.n	800e02e <_dtoa_r+0x626>
 800dfe4:	4baf      	ldr	r3, [pc, #700]	@ (800e2a4 <_dtoa_r+0x89c>)
 800dfe6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dfea:	f7f2 f96f 	bl	80002cc <__adddf3>
 800dfee:	4602      	mov	r2, r0
 800dff0:	460b      	mov	r3, r1
 800dff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dff6:	f7f2 fdaf 	bl	8000b58 <__aeabi_dcmpgt>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	d163      	bne.n	800e0c6 <_dtoa_r+0x6be>
 800dffe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e002:	49a8      	ldr	r1, [pc, #672]	@ (800e2a4 <_dtoa_r+0x89c>)
 800e004:	2000      	movs	r0, #0
 800e006:	f7f2 f95f 	bl	80002c8 <__aeabi_dsub>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e012:	f7f2 fd83 	bl	8000b1c <__aeabi_dcmplt>
 800e016:	2800      	cmp	r0, #0
 800e018:	f43f af14 	beq.w	800de44 <_dtoa_r+0x43c>
 800e01c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e01e:	1e73      	subs	r3, r6, #1
 800e020:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e022:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e026:	2b30      	cmp	r3, #48	@ 0x30
 800e028:	d0f8      	beq.n	800e01c <_dtoa_r+0x614>
 800e02a:	4647      	mov	r7, r8
 800e02c:	e03b      	b.n	800e0a6 <_dtoa_r+0x69e>
 800e02e:	4b9e      	ldr	r3, [pc, #632]	@ (800e2a8 <_dtoa_r+0x8a0>)
 800e030:	f7f2 fb02 	bl	8000638 <__aeabi_dmul>
 800e034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e038:	e7bc      	b.n	800dfb4 <_dtoa_r+0x5ac>
 800e03a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e03e:	4656      	mov	r6, sl
 800e040:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 fc20 	bl	800088c <__aeabi_ddiv>
 800e04c:	f7f2 fda4 	bl	8000b98 <__aeabi_d2iz>
 800e050:	4680      	mov	r8, r0
 800e052:	f7f2 fa87 	bl	8000564 <__aeabi_i2d>
 800e056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e05a:	f7f2 faed 	bl	8000638 <__aeabi_dmul>
 800e05e:	4602      	mov	r2, r0
 800e060:	460b      	mov	r3, r1
 800e062:	4620      	mov	r0, r4
 800e064:	4629      	mov	r1, r5
 800e066:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e06a:	f7f2 f92d 	bl	80002c8 <__aeabi_dsub>
 800e06e:	f806 4b01 	strb.w	r4, [r6], #1
 800e072:	9d03      	ldr	r5, [sp, #12]
 800e074:	eba6 040a 	sub.w	r4, r6, sl
 800e078:	42a5      	cmp	r5, r4
 800e07a:	4602      	mov	r2, r0
 800e07c:	460b      	mov	r3, r1
 800e07e:	d133      	bne.n	800e0e8 <_dtoa_r+0x6e0>
 800e080:	f7f2 f924 	bl	80002cc <__adddf3>
 800e084:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e088:	4604      	mov	r4, r0
 800e08a:	460d      	mov	r5, r1
 800e08c:	f7f2 fd64 	bl	8000b58 <__aeabi_dcmpgt>
 800e090:	b9c0      	cbnz	r0, 800e0c4 <_dtoa_r+0x6bc>
 800e092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e096:	4620      	mov	r0, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	f7f2 fd35 	bl	8000b08 <__aeabi_dcmpeq>
 800e09e:	b110      	cbz	r0, 800e0a6 <_dtoa_r+0x69e>
 800e0a0:	f018 0f01 	tst.w	r8, #1
 800e0a4:	d10e      	bne.n	800e0c4 <_dtoa_r+0x6bc>
 800e0a6:	9902      	ldr	r1, [sp, #8]
 800e0a8:	4648      	mov	r0, r9
 800e0aa:	f000 fb07 	bl	800e6bc <_Bfree>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	7033      	strb	r3, [r6, #0]
 800e0b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e0b4:	3701      	adds	r7, #1
 800e0b6:	601f      	str	r7, [r3, #0]
 800e0b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	f000 824b 	beq.w	800e556 <_dtoa_r+0xb4e>
 800e0c0:	601e      	str	r6, [r3, #0]
 800e0c2:	e248      	b.n	800e556 <_dtoa_r+0xb4e>
 800e0c4:	46b8      	mov	r8, r7
 800e0c6:	4633      	mov	r3, r6
 800e0c8:	461e      	mov	r6, r3
 800e0ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0ce:	2a39      	cmp	r2, #57	@ 0x39
 800e0d0:	d106      	bne.n	800e0e0 <_dtoa_r+0x6d8>
 800e0d2:	459a      	cmp	sl, r3
 800e0d4:	d1f8      	bne.n	800e0c8 <_dtoa_r+0x6c0>
 800e0d6:	2230      	movs	r2, #48	@ 0x30
 800e0d8:	f108 0801 	add.w	r8, r8, #1
 800e0dc:	f88a 2000 	strb.w	r2, [sl]
 800e0e0:	781a      	ldrb	r2, [r3, #0]
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	701a      	strb	r2, [r3, #0]
 800e0e6:	e7a0      	b.n	800e02a <_dtoa_r+0x622>
 800e0e8:	4b6f      	ldr	r3, [pc, #444]	@ (800e2a8 <_dtoa_r+0x8a0>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f7f2 faa4 	bl	8000638 <__aeabi_dmul>
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	4604      	mov	r4, r0
 800e0f6:	460d      	mov	r5, r1
 800e0f8:	f7f2 fd06 	bl	8000b08 <__aeabi_dcmpeq>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d09f      	beq.n	800e040 <_dtoa_r+0x638>
 800e100:	e7d1      	b.n	800e0a6 <_dtoa_r+0x69e>
 800e102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e104:	2a00      	cmp	r2, #0
 800e106:	f000 80ea 	beq.w	800e2de <_dtoa_r+0x8d6>
 800e10a:	9a07      	ldr	r2, [sp, #28]
 800e10c:	2a01      	cmp	r2, #1
 800e10e:	f300 80cd 	bgt.w	800e2ac <_dtoa_r+0x8a4>
 800e112:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e114:	2a00      	cmp	r2, #0
 800e116:	f000 80c1 	beq.w	800e29c <_dtoa_r+0x894>
 800e11a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e11e:	9c08      	ldr	r4, [sp, #32]
 800e120:	9e00      	ldr	r6, [sp, #0]
 800e122:	9a00      	ldr	r2, [sp, #0]
 800e124:	441a      	add	r2, r3
 800e126:	9200      	str	r2, [sp, #0]
 800e128:	9a06      	ldr	r2, [sp, #24]
 800e12a:	2101      	movs	r1, #1
 800e12c:	441a      	add	r2, r3
 800e12e:	4648      	mov	r0, r9
 800e130:	9206      	str	r2, [sp, #24]
 800e132:	f000 fbc1 	bl	800e8b8 <__i2b>
 800e136:	4605      	mov	r5, r0
 800e138:	b166      	cbz	r6, 800e154 <_dtoa_r+0x74c>
 800e13a:	9b06      	ldr	r3, [sp, #24]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	dd09      	ble.n	800e154 <_dtoa_r+0x74c>
 800e140:	42b3      	cmp	r3, r6
 800e142:	9a00      	ldr	r2, [sp, #0]
 800e144:	bfa8      	it	ge
 800e146:	4633      	movge	r3, r6
 800e148:	1ad2      	subs	r2, r2, r3
 800e14a:	9200      	str	r2, [sp, #0]
 800e14c:	9a06      	ldr	r2, [sp, #24]
 800e14e:	1af6      	subs	r6, r6, r3
 800e150:	1ad3      	subs	r3, r2, r3
 800e152:	9306      	str	r3, [sp, #24]
 800e154:	9b08      	ldr	r3, [sp, #32]
 800e156:	b30b      	cbz	r3, 800e19c <_dtoa_r+0x794>
 800e158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80c6 	beq.w	800e2ec <_dtoa_r+0x8e4>
 800e160:	2c00      	cmp	r4, #0
 800e162:	f000 80c0 	beq.w	800e2e6 <_dtoa_r+0x8de>
 800e166:	4629      	mov	r1, r5
 800e168:	4622      	mov	r2, r4
 800e16a:	4648      	mov	r0, r9
 800e16c:	f000 fc5c 	bl	800ea28 <__pow5mult>
 800e170:	9a02      	ldr	r2, [sp, #8]
 800e172:	4601      	mov	r1, r0
 800e174:	4605      	mov	r5, r0
 800e176:	4648      	mov	r0, r9
 800e178:	f000 fbb4 	bl	800e8e4 <__multiply>
 800e17c:	9902      	ldr	r1, [sp, #8]
 800e17e:	4680      	mov	r8, r0
 800e180:	4648      	mov	r0, r9
 800e182:	f000 fa9b 	bl	800e6bc <_Bfree>
 800e186:	9b08      	ldr	r3, [sp, #32]
 800e188:	1b1b      	subs	r3, r3, r4
 800e18a:	9308      	str	r3, [sp, #32]
 800e18c:	f000 80b1 	beq.w	800e2f2 <_dtoa_r+0x8ea>
 800e190:	9a08      	ldr	r2, [sp, #32]
 800e192:	4641      	mov	r1, r8
 800e194:	4648      	mov	r0, r9
 800e196:	f000 fc47 	bl	800ea28 <__pow5mult>
 800e19a:	9002      	str	r0, [sp, #8]
 800e19c:	2101      	movs	r1, #1
 800e19e:	4648      	mov	r0, r9
 800e1a0:	f000 fb8a 	bl	800e8b8 <__i2b>
 800e1a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f000 81d8 	beq.w	800e55e <_dtoa_r+0xb56>
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	4648      	mov	r0, r9
 800e1b4:	f000 fc38 	bl	800ea28 <__pow5mult>
 800e1b8:	9b07      	ldr	r3, [sp, #28]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	4604      	mov	r4, r0
 800e1be:	f300 809f 	bgt.w	800e300 <_dtoa_r+0x8f8>
 800e1c2:	9b04      	ldr	r3, [sp, #16]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	f040 8097 	bne.w	800e2f8 <_dtoa_r+0x8f0>
 800e1ca:	9b05      	ldr	r3, [sp, #20]
 800e1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f040 8093 	bne.w	800e2fc <_dtoa_r+0x8f4>
 800e1d6:	9b05      	ldr	r3, [sp, #20]
 800e1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e1dc:	0d1b      	lsrs	r3, r3, #20
 800e1de:	051b      	lsls	r3, r3, #20
 800e1e0:	b133      	cbz	r3, 800e1f0 <_dtoa_r+0x7e8>
 800e1e2:	9b00      	ldr	r3, [sp, #0]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	9300      	str	r3, [sp, #0]
 800e1e8:	9b06      	ldr	r3, [sp, #24]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	9306      	str	r3, [sp, #24]
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	9308      	str	r3, [sp, #32]
 800e1f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 81b8 	beq.w	800e56a <_dtoa_r+0xb62>
 800e1fa:	6923      	ldr	r3, [r4, #16]
 800e1fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e200:	6918      	ldr	r0, [r3, #16]
 800e202:	f000 fb0d 	bl	800e820 <__hi0bits>
 800e206:	f1c0 0020 	rsb	r0, r0, #32
 800e20a:	9b06      	ldr	r3, [sp, #24]
 800e20c:	4418      	add	r0, r3
 800e20e:	f010 001f 	ands.w	r0, r0, #31
 800e212:	f000 8082 	beq.w	800e31a <_dtoa_r+0x912>
 800e216:	f1c0 0320 	rsb	r3, r0, #32
 800e21a:	2b04      	cmp	r3, #4
 800e21c:	dd73      	ble.n	800e306 <_dtoa_r+0x8fe>
 800e21e:	9b00      	ldr	r3, [sp, #0]
 800e220:	f1c0 001c 	rsb	r0, r0, #28
 800e224:	4403      	add	r3, r0
 800e226:	9300      	str	r3, [sp, #0]
 800e228:	9b06      	ldr	r3, [sp, #24]
 800e22a:	4403      	add	r3, r0
 800e22c:	4406      	add	r6, r0
 800e22e:	9306      	str	r3, [sp, #24]
 800e230:	9b00      	ldr	r3, [sp, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	dd05      	ble.n	800e242 <_dtoa_r+0x83a>
 800e236:	9902      	ldr	r1, [sp, #8]
 800e238:	461a      	mov	r2, r3
 800e23a:	4648      	mov	r0, r9
 800e23c:	f000 fc4e 	bl	800eadc <__lshift>
 800e240:	9002      	str	r0, [sp, #8]
 800e242:	9b06      	ldr	r3, [sp, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	dd05      	ble.n	800e254 <_dtoa_r+0x84c>
 800e248:	4621      	mov	r1, r4
 800e24a:	461a      	mov	r2, r3
 800e24c:	4648      	mov	r0, r9
 800e24e:	f000 fc45 	bl	800eadc <__lshift>
 800e252:	4604      	mov	r4, r0
 800e254:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e256:	2b00      	cmp	r3, #0
 800e258:	d061      	beq.n	800e31e <_dtoa_r+0x916>
 800e25a:	9802      	ldr	r0, [sp, #8]
 800e25c:	4621      	mov	r1, r4
 800e25e:	f000 fca9 	bl	800ebb4 <__mcmp>
 800e262:	2800      	cmp	r0, #0
 800e264:	da5b      	bge.n	800e31e <_dtoa_r+0x916>
 800e266:	2300      	movs	r3, #0
 800e268:	9902      	ldr	r1, [sp, #8]
 800e26a:	220a      	movs	r2, #10
 800e26c:	4648      	mov	r0, r9
 800e26e:	f000 fa47 	bl	800e700 <__multadd>
 800e272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e274:	9002      	str	r0, [sp, #8]
 800e276:	f107 38ff 	add.w	r8, r7, #4294967295
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f000 8177 	beq.w	800e56e <_dtoa_r+0xb66>
 800e280:	4629      	mov	r1, r5
 800e282:	2300      	movs	r3, #0
 800e284:	220a      	movs	r2, #10
 800e286:	4648      	mov	r0, r9
 800e288:	f000 fa3a 	bl	800e700 <__multadd>
 800e28c:	f1bb 0f00 	cmp.w	fp, #0
 800e290:	4605      	mov	r5, r0
 800e292:	dc6f      	bgt.n	800e374 <_dtoa_r+0x96c>
 800e294:	9b07      	ldr	r3, [sp, #28]
 800e296:	2b02      	cmp	r3, #2
 800e298:	dc49      	bgt.n	800e32e <_dtoa_r+0x926>
 800e29a:	e06b      	b.n	800e374 <_dtoa_r+0x96c>
 800e29c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e29e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e2a2:	e73c      	b.n	800e11e <_dtoa_r+0x716>
 800e2a4:	3fe00000 	.word	0x3fe00000
 800e2a8:	40240000 	.word	0x40240000
 800e2ac:	9b03      	ldr	r3, [sp, #12]
 800e2ae:	1e5c      	subs	r4, r3, #1
 800e2b0:	9b08      	ldr	r3, [sp, #32]
 800e2b2:	42a3      	cmp	r3, r4
 800e2b4:	db09      	blt.n	800e2ca <_dtoa_r+0x8c2>
 800e2b6:	1b1c      	subs	r4, r3, r4
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f6bf af30 	bge.w	800e120 <_dtoa_r+0x718>
 800e2c0:	9b00      	ldr	r3, [sp, #0]
 800e2c2:	9a03      	ldr	r2, [sp, #12]
 800e2c4:	1a9e      	subs	r6, r3, r2
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e72b      	b.n	800e122 <_dtoa_r+0x71a>
 800e2ca:	9b08      	ldr	r3, [sp, #32]
 800e2cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e2ce:	9408      	str	r4, [sp, #32]
 800e2d0:	1ae3      	subs	r3, r4, r3
 800e2d2:	441a      	add	r2, r3
 800e2d4:	9e00      	ldr	r6, [sp, #0]
 800e2d6:	9b03      	ldr	r3, [sp, #12]
 800e2d8:	920d      	str	r2, [sp, #52]	@ 0x34
 800e2da:	2400      	movs	r4, #0
 800e2dc:	e721      	b.n	800e122 <_dtoa_r+0x71a>
 800e2de:	9c08      	ldr	r4, [sp, #32]
 800e2e0:	9e00      	ldr	r6, [sp, #0]
 800e2e2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e2e4:	e728      	b.n	800e138 <_dtoa_r+0x730>
 800e2e6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e2ea:	e751      	b.n	800e190 <_dtoa_r+0x788>
 800e2ec:	9a08      	ldr	r2, [sp, #32]
 800e2ee:	9902      	ldr	r1, [sp, #8]
 800e2f0:	e750      	b.n	800e194 <_dtoa_r+0x78c>
 800e2f2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e2f6:	e751      	b.n	800e19c <_dtoa_r+0x794>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e779      	b.n	800e1f0 <_dtoa_r+0x7e8>
 800e2fc:	9b04      	ldr	r3, [sp, #16]
 800e2fe:	e777      	b.n	800e1f0 <_dtoa_r+0x7e8>
 800e300:	2300      	movs	r3, #0
 800e302:	9308      	str	r3, [sp, #32]
 800e304:	e779      	b.n	800e1fa <_dtoa_r+0x7f2>
 800e306:	d093      	beq.n	800e230 <_dtoa_r+0x828>
 800e308:	9a00      	ldr	r2, [sp, #0]
 800e30a:	331c      	adds	r3, #28
 800e30c:	441a      	add	r2, r3
 800e30e:	9200      	str	r2, [sp, #0]
 800e310:	9a06      	ldr	r2, [sp, #24]
 800e312:	441a      	add	r2, r3
 800e314:	441e      	add	r6, r3
 800e316:	9206      	str	r2, [sp, #24]
 800e318:	e78a      	b.n	800e230 <_dtoa_r+0x828>
 800e31a:	4603      	mov	r3, r0
 800e31c:	e7f4      	b.n	800e308 <_dtoa_r+0x900>
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	46b8      	mov	r8, r7
 800e324:	dc20      	bgt.n	800e368 <_dtoa_r+0x960>
 800e326:	469b      	mov	fp, r3
 800e328:	9b07      	ldr	r3, [sp, #28]
 800e32a:	2b02      	cmp	r3, #2
 800e32c:	dd1e      	ble.n	800e36c <_dtoa_r+0x964>
 800e32e:	f1bb 0f00 	cmp.w	fp, #0
 800e332:	f47f adb1 	bne.w	800de98 <_dtoa_r+0x490>
 800e336:	4621      	mov	r1, r4
 800e338:	465b      	mov	r3, fp
 800e33a:	2205      	movs	r2, #5
 800e33c:	4648      	mov	r0, r9
 800e33e:	f000 f9df 	bl	800e700 <__multadd>
 800e342:	4601      	mov	r1, r0
 800e344:	4604      	mov	r4, r0
 800e346:	9802      	ldr	r0, [sp, #8]
 800e348:	f000 fc34 	bl	800ebb4 <__mcmp>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	f77f ada3 	ble.w	800de98 <_dtoa_r+0x490>
 800e352:	4656      	mov	r6, sl
 800e354:	2331      	movs	r3, #49	@ 0x31
 800e356:	f806 3b01 	strb.w	r3, [r6], #1
 800e35a:	f108 0801 	add.w	r8, r8, #1
 800e35e:	e59f      	b.n	800dea0 <_dtoa_r+0x498>
 800e360:	9c03      	ldr	r4, [sp, #12]
 800e362:	46b8      	mov	r8, r7
 800e364:	4625      	mov	r5, r4
 800e366:	e7f4      	b.n	800e352 <_dtoa_r+0x94a>
 800e368:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e36c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f000 8101 	beq.w	800e576 <_dtoa_r+0xb6e>
 800e374:	2e00      	cmp	r6, #0
 800e376:	dd05      	ble.n	800e384 <_dtoa_r+0x97c>
 800e378:	4629      	mov	r1, r5
 800e37a:	4632      	mov	r2, r6
 800e37c:	4648      	mov	r0, r9
 800e37e:	f000 fbad 	bl	800eadc <__lshift>
 800e382:	4605      	mov	r5, r0
 800e384:	9b08      	ldr	r3, [sp, #32]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d05c      	beq.n	800e444 <_dtoa_r+0xa3c>
 800e38a:	6869      	ldr	r1, [r5, #4]
 800e38c:	4648      	mov	r0, r9
 800e38e:	f000 f955 	bl	800e63c <_Balloc>
 800e392:	4606      	mov	r6, r0
 800e394:	b928      	cbnz	r0, 800e3a2 <_dtoa_r+0x99a>
 800e396:	4b82      	ldr	r3, [pc, #520]	@ (800e5a0 <_dtoa_r+0xb98>)
 800e398:	4602      	mov	r2, r0
 800e39a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e39e:	f7ff bb4a 	b.w	800da36 <_dtoa_r+0x2e>
 800e3a2:	692a      	ldr	r2, [r5, #16]
 800e3a4:	3202      	adds	r2, #2
 800e3a6:	0092      	lsls	r2, r2, #2
 800e3a8:	f105 010c 	add.w	r1, r5, #12
 800e3ac:	300c      	adds	r0, #12
 800e3ae:	f7ff fa8c 	bl	800d8ca <memcpy>
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	4631      	mov	r1, r6
 800e3b6:	4648      	mov	r0, r9
 800e3b8:	f000 fb90 	bl	800eadc <__lshift>
 800e3bc:	f10a 0301 	add.w	r3, sl, #1
 800e3c0:	9300      	str	r3, [sp, #0]
 800e3c2:	eb0a 030b 	add.w	r3, sl, fp
 800e3c6:	9308      	str	r3, [sp, #32]
 800e3c8:	9b04      	ldr	r3, [sp, #16]
 800e3ca:	f003 0301 	and.w	r3, r3, #1
 800e3ce:	462f      	mov	r7, r5
 800e3d0:	9306      	str	r3, [sp, #24]
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	9b00      	ldr	r3, [sp, #0]
 800e3d6:	9802      	ldr	r0, [sp, #8]
 800e3d8:	4621      	mov	r1, r4
 800e3da:	f103 3bff 	add.w	fp, r3, #4294967295
 800e3de:	f7ff fa89 	bl	800d8f4 <quorem>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	3330      	adds	r3, #48	@ 0x30
 800e3e6:	9003      	str	r0, [sp, #12]
 800e3e8:	4639      	mov	r1, r7
 800e3ea:	9802      	ldr	r0, [sp, #8]
 800e3ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3ee:	f000 fbe1 	bl	800ebb4 <__mcmp>
 800e3f2:	462a      	mov	r2, r5
 800e3f4:	9004      	str	r0, [sp, #16]
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4648      	mov	r0, r9
 800e3fa:	f000 fbf7 	bl	800ebec <__mdiff>
 800e3fe:	68c2      	ldr	r2, [r0, #12]
 800e400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e402:	4606      	mov	r6, r0
 800e404:	bb02      	cbnz	r2, 800e448 <_dtoa_r+0xa40>
 800e406:	4601      	mov	r1, r0
 800e408:	9802      	ldr	r0, [sp, #8]
 800e40a:	f000 fbd3 	bl	800ebb4 <__mcmp>
 800e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e410:	4602      	mov	r2, r0
 800e412:	4631      	mov	r1, r6
 800e414:	4648      	mov	r0, r9
 800e416:	920c      	str	r2, [sp, #48]	@ 0x30
 800e418:	9309      	str	r3, [sp, #36]	@ 0x24
 800e41a:	f000 f94f 	bl	800e6bc <_Bfree>
 800e41e:	9b07      	ldr	r3, [sp, #28]
 800e420:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800e422:	9e00      	ldr	r6, [sp, #0]
 800e424:	ea42 0103 	orr.w	r1, r2, r3
 800e428:	9b06      	ldr	r3, [sp, #24]
 800e42a:	4319      	orrs	r1, r3
 800e42c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e42e:	d10d      	bne.n	800e44c <_dtoa_r+0xa44>
 800e430:	2b39      	cmp	r3, #57	@ 0x39
 800e432:	d027      	beq.n	800e484 <_dtoa_r+0xa7c>
 800e434:	9a04      	ldr	r2, [sp, #16]
 800e436:	2a00      	cmp	r2, #0
 800e438:	dd01      	ble.n	800e43e <_dtoa_r+0xa36>
 800e43a:	9b03      	ldr	r3, [sp, #12]
 800e43c:	3331      	adds	r3, #49	@ 0x31
 800e43e:	f88b 3000 	strb.w	r3, [fp]
 800e442:	e52e      	b.n	800dea2 <_dtoa_r+0x49a>
 800e444:	4628      	mov	r0, r5
 800e446:	e7b9      	b.n	800e3bc <_dtoa_r+0x9b4>
 800e448:	2201      	movs	r2, #1
 800e44a:	e7e2      	b.n	800e412 <_dtoa_r+0xa0a>
 800e44c:	9904      	ldr	r1, [sp, #16]
 800e44e:	2900      	cmp	r1, #0
 800e450:	db04      	blt.n	800e45c <_dtoa_r+0xa54>
 800e452:	9807      	ldr	r0, [sp, #28]
 800e454:	4301      	orrs	r1, r0
 800e456:	9806      	ldr	r0, [sp, #24]
 800e458:	4301      	orrs	r1, r0
 800e45a:	d120      	bne.n	800e49e <_dtoa_r+0xa96>
 800e45c:	2a00      	cmp	r2, #0
 800e45e:	ddee      	ble.n	800e43e <_dtoa_r+0xa36>
 800e460:	9902      	ldr	r1, [sp, #8]
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	2201      	movs	r2, #1
 800e466:	4648      	mov	r0, r9
 800e468:	f000 fb38 	bl	800eadc <__lshift>
 800e46c:	4621      	mov	r1, r4
 800e46e:	9002      	str	r0, [sp, #8]
 800e470:	f000 fba0 	bl	800ebb4 <__mcmp>
 800e474:	2800      	cmp	r0, #0
 800e476:	9b00      	ldr	r3, [sp, #0]
 800e478:	dc02      	bgt.n	800e480 <_dtoa_r+0xa78>
 800e47a:	d1e0      	bne.n	800e43e <_dtoa_r+0xa36>
 800e47c:	07da      	lsls	r2, r3, #31
 800e47e:	d5de      	bpl.n	800e43e <_dtoa_r+0xa36>
 800e480:	2b39      	cmp	r3, #57	@ 0x39
 800e482:	d1da      	bne.n	800e43a <_dtoa_r+0xa32>
 800e484:	2339      	movs	r3, #57	@ 0x39
 800e486:	f88b 3000 	strb.w	r3, [fp]
 800e48a:	4633      	mov	r3, r6
 800e48c:	461e      	mov	r6, r3
 800e48e:	3b01      	subs	r3, #1
 800e490:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e494:	2a39      	cmp	r2, #57	@ 0x39
 800e496:	d04e      	beq.n	800e536 <_dtoa_r+0xb2e>
 800e498:	3201      	adds	r2, #1
 800e49a:	701a      	strb	r2, [r3, #0]
 800e49c:	e501      	b.n	800dea2 <_dtoa_r+0x49a>
 800e49e:	2a00      	cmp	r2, #0
 800e4a0:	dd03      	ble.n	800e4aa <_dtoa_r+0xaa2>
 800e4a2:	2b39      	cmp	r3, #57	@ 0x39
 800e4a4:	d0ee      	beq.n	800e484 <_dtoa_r+0xa7c>
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	e7c9      	b.n	800e43e <_dtoa_r+0xa36>
 800e4aa:	9a00      	ldr	r2, [sp, #0]
 800e4ac:	9908      	ldr	r1, [sp, #32]
 800e4ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e4b2:	428a      	cmp	r2, r1
 800e4b4:	d028      	beq.n	800e508 <_dtoa_r+0xb00>
 800e4b6:	9902      	ldr	r1, [sp, #8]
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	220a      	movs	r2, #10
 800e4bc:	4648      	mov	r0, r9
 800e4be:	f000 f91f 	bl	800e700 <__multadd>
 800e4c2:	42af      	cmp	r7, r5
 800e4c4:	9002      	str	r0, [sp, #8]
 800e4c6:	f04f 0300 	mov.w	r3, #0
 800e4ca:	f04f 020a 	mov.w	r2, #10
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	4648      	mov	r0, r9
 800e4d2:	d107      	bne.n	800e4e4 <_dtoa_r+0xadc>
 800e4d4:	f000 f914 	bl	800e700 <__multadd>
 800e4d8:	4607      	mov	r7, r0
 800e4da:	4605      	mov	r5, r0
 800e4dc:	9b00      	ldr	r3, [sp, #0]
 800e4de:	3301      	adds	r3, #1
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	e777      	b.n	800e3d4 <_dtoa_r+0x9cc>
 800e4e4:	f000 f90c 	bl	800e700 <__multadd>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	4607      	mov	r7, r0
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	220a      	movs	r2, #10
 800e4f0:	4648      	mov	r0, r9
 800e4f2:	f000 f905 	bl	800e700 <__multadd>
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	e7f0      	b.n	800e4dc <_dtoa_r+0xad4>
 800e4fa:	f1bb 0f00 	cmp.w	fp, #0
 800e4fe:	bfcc      	ite	gt
 800e500:	465e      	movgt	r6, fp
 800e502:	2601      	movle	r6, #1
 800e504:	4456      	add	r6, sl
 800e506:	2700      	movs	r7, #0
 800e508:	9902      	ldr	r1, [sp, #8]
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	2201      	movs	r2, #1
 800e50e:	4648      	mov	r0, r9
 800e510:	f000 fae4 	bl	800eadc <__lshift>
 800e514:	4621      	mov	r1, r4
 800e516:	9002      	str	r0, [sp, #8]
 800e518:	f000 fb4c 	bl	800ebb4 <__mcmp>
 800e51c:	2800      	cmp	r0, #0
 800e51e:	dcb4      	bgt.n	800e48a <_dtoa_r+0xa82>
 800e520:	d102      	bne.n	800e528 <_dtoa_r+0xb20>
 800e522:	9b00      	ldr	r3, [sp, #0]
 800e524:	07db      	lsls	r3, r3, #31
 800e526:	d4b0      	bmi.n	800e48a <_dtoa_r+0xa82>
 800e528:	4633      	mov	r3, r6
 800e52a:	461e      	mov	r6, r3
 800e52c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e530:	2a30      	cmp	r2, #48	@ 0x30
 800e532:	d0fa      	beq.n	800e52a <_dtoa_r+0xb22>
 800e534:	e4b5      	b.n	800dea2 <_dtoa_r+0x49a>
 800e536:	459a      	cmp	sl, r3
 800e538:	d1a8      	bne.n	800e48c <_dtoa_r+0xa84>
 800e53a:	2331      	movs	r3, #49	@ 0x31
 800e53c:	f108 0801 	add.w	r8, r8, #1
 800e540:	f88a 3000 	strb.w	r3, [sl]
 800e544:	e4ad      	b.n	800dea2 <_dtoa_r+0x49a>
 800e546:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e548:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e5a4 <_dtoa_r+0xb9c>
 800e54c:	b11b      	cbz	r3, 800e556 <_dtoa_r+0xb4e>
 800e54e:	f10a 0308 	add.w	r3, sl, #8
 800e552:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e554:	6013      	str	r3, [r2, #0]
 800e556:	4650      	mov	r0, sl
 800e558:	b017      	add	sp, #92	@ 0x5c
 800e55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55e:	9b07      	ldr	r3, [sp, #28]
 800e560:	2b01      	cmp	r3, #1
 800e562:	f77f ae2e 	ble.w	800e1c2 <_dtoa_r+0x7ba>
 800e566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e568:	9308      	str	r3, [sp, #32]
 800e56a:	2001      	movs	r0, #1
 800e56c:	e64d      	b.n	800e20a <_dtoa_r+0x802>
 800e56e:	f1bb 0f00 	cmp.w	fp, #0
 800e572:	f77f aed9 	ble.w	800e328 <_dtoa_r+0x920>
 800e576:	4656      	mov	r6, sl
 800e578:	9802      	ldr	r0, [sp, #8]
 800e57a:	4621      	mov	r1, r4
 800e57c:	f7ff f9ba 	bl	800d8f4 <quorem>
 800e580:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e584:	f806 3b01 	strb.w	r3, [r6], #1
 800e588:	eba6 020a 	sub.w	r2, r6, sl
 800e58c:	4593      	cmp	fp, r2
 800e58e:	ddb4      	ble.n	800e4fa <_dtoa_r+0xaf2>
 800e590:	9902      	ldr	r1, [sp, #8]
 800e592:	2300      	movs	r3, #0
 800e594:	220a      	movs	r2, #10
 800e596:	4648      	mov	r0, r9
 800e598:	f000 f8b2 	bl	800e700 <__multadd>
 800e59c:	9002      	str	r0, [sp, #8]
 800e59e:	e7eb      	b.n	800e578 <_dtoa_r+0xb70>
 800e5a0:	08013503 	.word	0x08013503
 800e5a4:	08013487 	.word	0x08013487

0800e5a8 <_free_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	2900      	cmp	r1, #0
 800e5ae:	d041      	beq.n	800e634 <_free_r+0x8c>
 800e5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5b4:	1f0c      	subs	r4, r1, #4
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	bfb8      	it	lt
 800e5ba:	18e4      	addlt	r4, r4, r3
 800e5bc:	f7fe f90a 	bl	800c7d4 <__malloc_lock>
 800e5c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e638 <_free_r+0x90>)
 800e5c2:	6813      	ldr	r3, [r2, #0]
 800e5c4:	b933      	cbnz	r3, 800e5d4 <_free_r+0x2c>
 800e5c6:	6063      	str	r3, [r4, #4]
 800e5c8:	6014      	str	r4, [r2, #0]
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5d0:	f7fe b906 	b.w	800c7e0 <__malloc_unlock>
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	d908      	bls.n	800e5ea <_free_r+0x42>
 800e5d8:	6820      	ldr	r0, [r4, #0]
 800e5da:	1821      	adds	r1, r4, r0
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	bf01      	itttt	eq
 800e5e0:	6819      	ldreq	r1, [r3, #0]
 800e5e2:	685b      	ldreq	r3, [r3, #4]
 800e5e4:	1809      	addeq	r1, r1, r0
 800e5e6:	6021      	streq	r1, [r4, #0]
 800e5e8:	e7ed      	b.n	800e5c6 <_free_r+0x1e>
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	b10b      	cbz	r3, 800e5f4 <_free_r+0x4c>
 800e5f0:	42a3      	cmp	r3, r4
 800e5f2:	d9fa      	bls.n	800e5ea <_free_r+0x42>
 800e5f4:	6811      	ldr	r1, [r2, #0]
 800e5f6:	1850      	adds	r0, r2, r1
 800e5f8:	42a0      	cmp	r0, r4
 800e5fa:	d10b      	bne.n	800e614 <_free_r+0x6c>
 800e5fc:	6820      	ldr	r0, [r4, #0]
 800e5fe:	4401      	add	r1, r0
 800e600:	1850      	adds	r0, r2, r1
 800e602:	4283      	cmp	r3, r0
 800e604:	6011      	str	r1, [r2, #0]
 800e606:	d1e0      	bne.n	800e5ca <_free_r+0x22>
 800e608:	6818      	ldr	r0, [r3, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	6053      	str	r3, [r2, #4]
 800e60e:	4408      	add	r0, r1
 800e610:	6010      	str	r0, [r2, #0]
 800e612:	e7da      	b.n	800e5ca <_free_r+0x22>
 800e614:	d902      	bls.n	800e61c <_free_r+0x74>
 800e616:	230c      	movs	r3, #12
 800e618:	602b      	str	r3, [r5, #0]
 800e61a:	e7d6      	b.n	800e5ca <_free_r+0x22>
 800e61c:	6820      	ldr	r0, [r4, #0]
 800e61e:	1821      	adds	r1, r4, r0
 800e620:	428b      	cmp	r3, r1
 800e622:	bf04      	itt	eq
 800e624:	6819      	ldreq	r1, [r3, #0]
 800e626:	685b      	ldreq	r3, [r3, #4]
 800e628:	6063      	str	r3, [r4, #4]
 800e62a:	bf04      	itt	eq
 800e62c:	1809      	addeq	r1, r1, r0
 800e62e:	6021      	streq	r1, [r4, #0]
 800e630:	6054      	str	r4, [r2, #4]
 800e632:	e7ca      	b.n	800e5ca <_free_r+0x22>
 800e634:	bd38      	pop	{r3, r4, r5, pc}
 800e636:	bf00      	nop
 800e638:	20001b14 	.word	0x20001b14

0800e63c <_Balloc>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	69c6      	ldr	r6, [r0, #28]
 800e640:	4604      	mov	r4, r0
 800e642:	460d      	mov	r5, r1
 800e644:	b976      	cbnz	r6, 800e664 <_Balloc+0x28>
 800e646:	2010      	movs	r0, #16
 800e648:	f7fe f81a 	bl	800c680 <malloc>
 800e64c:	4602      	mov	r2, r0
 800e64e:	61e0      	str	r0, [r4, #28]
 800e650:	b920      	cbnz	r0, 800e65c <_Balloc+0x20>
 800e652:	4b18      	ldr	r3, [pc, #96]	@ (800e6b4 <_Balloc+0x78>)
 800e654:	4818      	ldr	r0, [pc, #96]	@ (800e6b8 <_Balloc+0x7c>)
 800e656:	216b      	movs	r1, #107	@ 0x6b
 800e658:	f002 f8ea 	bl	8010830 <__assert_func>
 800e65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e660:	6006      	str	r6, [r0, #0]
 800e662:	60c6      	str	r6, [r0, #12]
 800e664:	69e6      	ldr	r6, [r4, #28]
 800e666:	68f3      	ldr	r3, [r6, #12]
 800e668:	b183      	cbz	r3, 800e68c <_Balloc+0x50>
 800e66a:	69e3      	ldr	r3, [r4, #28]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e672:	b9b8      	cbnz	r0, 800e6a4 <_Balloc+0x68>
 800e674:	2101      	movs	r1, #1
 800e676:	fa01 f605 	lsl.w	r6, r1, r5
 800e67a:	1d72      	adds	r2, r6, #5
 800e67c:	0092      	lsls	r2, r2, #2
 800e67e:	4620      	mov	r0, r4
 800e680:	f7fd ffea 	bl	800c658 <_calloc_r>
 800e684:	b160      	cbz	r0, 800e6a0 <_Balloc+0x64>
 800e686:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e68a:	e00e      	b.n	800e6aa <_Balloc+0x6e>
 800e68c:	2221      	movs	r2, #33	@ 0x21
 800e68e:	2104      	movs	r1, #4
 800e690:	4620      	mov	r0, r4
 800e692:	f7fd ffe1 	bl	800c658 <_calloc_r>
 800e696:	69e3      	ldr	r3, [r4, #28]
 800e698:	60f0      	str	r0, [r6, #12]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d1e4      	bne.n	800e66a <_Balloc+0x2e>
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	bd70      	pop	{r4, r5, r6, pc}
 800e6a4:	6802      	ldr	r2, [r0, #0]
 800e6a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6b0:	e7f7      	b.n	800e6a2 <_Balloc+0x66>
 800e6b2:	bf00      	nop
 800e6b4:	08013494 	.word	0x08013494
 800e6b8:	08013514 	.word	0x08013514

0800e6bc <_Bfree>:
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	69c6      	ldr	r6, [r0, #28]
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	460c      	mov	r4, r1
 800e6c4:	b976      	cbnz	r6, 800e6e4 <_Bfree+0x28>
 800e6c6:	2010      	movs	r0, #16
 800e6c8:	f7fd ffda 	bl	800c680 <malloc>
 800e6cc:	4602      	mov	r2, r0
 800e6ce:	61e8      	str	r0, [r5, #28]
 800e6d0:	b920      	cbnz	r0, 800e6dc <_Bfree+0x20>
 800e6d2:	4b09      	ldr	r3, [pc, #36]	@ (800e6f8 <_Bfree+0x3c>)
 800e6d4:	4809      	ldr	r0, [pc, #36]	@ (800e6fc <_Bfree+0x40>)
 800e6d6:	218f      	movs	r1, #143	@ 0x8f
 800e6d8:	f002 f8aa 	bl	8010830 <__assert_func>
 800e6dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6e0:	6006      	str	r6, [r0, #0]
 800e6e2:	60c6      	str	r6, [r0, #12]
 800e6e4:	b13c      	cbz	r4, 800e6f6 <_Bfree+0x3a>
 800e6e6:	69eb      	ldr	r3, [r5, #28]
 800e6e8:	6862      	ldr	r2, [r4, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6f0:	6021      	str	r1, [r4, #0]
 800e6f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}
 800e6f8:	08013494 	.word	0x08013494
 800e6fc:	08013514 	.word	0x08013514

0800e700 <__multadd>:
 800e700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e704:	690d      	ldr	r5, [r1, #16]
 800e706:	4607      	mov	r7, r0
 800e708:	460c      	mov	r4, r1
 800e70a:	461e      	mov	r6, r3
 800e70c:	f101 0c14 	add.w	ip, r1, #20
 800e710:	2000      	movs	r0, #0
 800e712:	f8dc 3000 	ldr.w	r3, [ip]
 800e716:	b299      	uxth	r1, r3
 800e718:	fb02 6101 	mla	r1, r2, r1, r6
 800e71c:	0c1e      	lsrs	r6, r3, #16
 800e71e:	0c0b      	lsrs	r3, r1, #16
 800e720:	fb02 3306 	mla	r3, r2, r6, r3
 800e724:	b289      	uxth	r1, r1
 800e726:	3001      	adds	r0, #1
 800e728:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e72c:	4285      	cmp	r5, r0
 800e72e:	f84c 1b04 	str.w	r1, [ip], #4
 800e732:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e736:	dcec      	bgt.n	800e712 <__multadd+0x12>
 800e738:	b30e      	cbz	r6, 800e77e <__multadd+0x7e>
 800e73a:	68a3      	ldr	r3, [r4, #8]
 800e73c:	42ab      	cmp	r3, r5
 800e73e:	dc19      	bgt.n	800e774 <__multadd+0x74>
 800e740:	6861      	ldr	r1, [r4, #4]
 800e742:	4638      	mov	r0, r7
 800e744:	3101      	adds	r1, #1
 800e746:	f7ff ff79 	bl	800e63c <_Balloc>
 800e74a:	4680      	mov	r8, r0
 800e74c:	b928      	cbnz	r0, 800e75a <__multadd+0x5a>
 800e74e:	4602      	mov	r2, r0
 800e750:	4b0c      	ldr	r3, [pc, #48]	@ (800e784 <__multadd+0x84>)
 800e752:	480d      	ldr	r0, [pc, #52]	@ (800e788 <__multadd+0x88>)
 800e754:	21ba      	movs	r1, #186	@ 0xba
 800e756:	f002 f86b 	bl	8010830 <__assert_func>
 800e75a:	6922      	ldr	r2, [r4, #16]
 800e75c:	3202      	adds	r2, #2
 800e75e:	f104 010c 	add.w	r1, r4, #12
 800e762:	0092      	lsls	r2, r2, #2
 800e764:	300c      	adds	r0, #12
 800e766:	f7ff f8b0 	bl	800d8ca <memcpy>
 800e76a:	4621      	mov	r1, r4
 800e76c:	4638      	mov	r0, r7
 800e76e:	f7ff ffa5 	bl	800e6bc <_Bfree>
 800e772:	4644      	mov	r4, r8
 800e774:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e778:	3501      	adds	r5, #1
 800e77a:	615e      	str	r6, [r3, #20]
 800e77c:	6125      	str	r5, [r4, #16]
 800e77e:	4620      	mov	r0, r4
 800e780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e784:	08013503 	.word	0x08013503
 800e788:	08013514 	.word	0x08013514

0800e78c <__s2b>:
 800e78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e790:	460c      	mov	r4, r1
 800e792:	4615      	mov	r5, r2
 800e794:	461f      	mov	r7, r3
 800e796:	2209      	movs	r2, #9
 800e798:	3308      	adds	r3, #8
 800e79a:	4606      	mov	r6, r0
 800e79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	db09      	blt.n	800e7bc <__s2b+0x30>
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	f7ff ff47 	bl	800e63c <_Balloc>
 800e7ae:	b940      	cbnz	r0, 800e7c2 <__s2b+0x36>
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	4b19      	ldr	r3, [pc, #100]	@ (800e818 <__s2b+0x8c>)
 800e7b4:	4819      	ldr	r0, [pc, #100]	@ (800e81c <__s2b+0x90>)
 800e7b6:	21d3      	movs	r1, #211	@ 0xd3
 800e7b8:	f002 f83a 	bl	8010830 <__assert_func>
 800e7bc:	0052      	lsls	r2, r2, #1
 800e7be:	3101      	adds	r1, #1
 800e7c0:	e7f0      	b.n	800e7a4 <__s2b+0x18>
 800e7c2:	9b08      	ldr	r3, [sp, #32]
 800e7c4:	6143      	str	r3, [r0, #20]
 800e7c6:	2d09      	cmp	r5, #9
 800e7c8:	f04f 0301 	mov.w	r3, #1
 800e7cc:	6103      	str	r3, [r0, #16]
 800e7ce:	dd16      	ble.n	800e7fe <__s2b+0x72>
 800e7d0:	f104 0909 	add.w	r9, r4, #9
 800e7d4:	46c8      	mov	r8, r9
 800e7d6:	442c      	add	r4, r5
 800e7d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e7dc:	4601      	mov	r1, r0
 800e7de:	3b30      	subs	r3, #48	@ 0x30
 800e7e0:	220a      	movs	r2, #10
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7ff ff8c 	bl	800e700 <__multadd>
 800e7e8:	45a0      	cmp	r8, r4
 800e7ea:	d1f5      	bne.n	800e7d8 <__s2b+0x4c>
 800e7ec:	f1a5 0408 	sub.w	r4, r5, #8
 800e7f0:	444c      	add	r4, r9
 800e7f2:	1b2d      	subs	r5, r5, r4
 800e7f4:	1963      	adds	r3, r4, r5
 800e7f6:	42bb      	cmp	r3, r7
 800e7f8:	db04      	blt.n	800e804 <__s2b+0x78>
 800e7fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7fe:	340a      	adds	r4, #10
 800e800:	2509      	movs	r5, #9
 800e802:	e7f6      	b.n	800e7f2 <__s2b+0x66>
 800e804:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e808:	4601      	mov	r1, r0
 800e80a:	3b30      	subs	r3, #48	@ 0x30
 800e80c:	220a      	movs	r2, #10
 800e80e:	4630      	mov	r0, r6
 800e810:	f7ff ff76 	bl	800e700 <__multadd>
 800e814:	e7ee      	b.n	800e7f4 <__s2b+0x68>
 800e816:	bf00      	nop
 800e818:	08013503 	.word	0x08013503
 800e81c:	08013514 	.word	0x08013514

0800e820 <__hi0bits>:
 800e820:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e824:	4603      	mov	r3, r0
 800e826:	bf36      	itet	cc
 800e828:	0403      	lslcc	r3, r0, #16
 800e82a:	2000      	movcs	r0, #0
 800e82c:	2010      	movcc	r0, #16
 800e82e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e832:	bf3c      	itt	cc
 800e834:	021b      	lslcc	r3, r3, #8
 800e836:	3008      	addcc	r0, #8
 800e838:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e83c:	bf3c      	itt	cc
 800e83e:	011b      	lslcc	r3, r3, #4
 800e840:	3004      	addcc	r0, #4
 800e842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e846:	bf3c      	itt	cc
 800e848:	009b      	lslcc	r3, r3, #2
 800e84a:	3002      	addcc	r0, #2
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	db05      	blt.n	800e85c <__hi0bits+0x3c>
 800e850:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e854:	f100 0001 	add.w	r0, r0, #1
 800e858:	bf08      	it	eq
 800e85a:	2020      	moveq	r0, #32
 800e85c:	4770      	bx	lr

0800e85e <__lo0bits>:
 800e85e:	6803      	ldr	r3, [r0, #0]
 800e860:	4602      	mov	r2, r0
 800e862:	f013 0007 	ands.w	r0, r3, #7
 800e866:	d00b      	beq.n	800e880 <__lo0bits+0x22>
 800e868:	07d9      	lsls	r1, r3, #31
 800e86a:	d421      	bmi.n	800e8b0 <__lo0bits+0x52>
 800e86c:	0798      	lsls	r0, r3, #30
 800e86e:	bf49      	itett	mi
 800e870:	085b      	lsrmi	r3, r3, #1
 800e872:	089b      	lsrpl	r3, r3, #2
 800e874:	2001      	movmi	r0, #1
 800e876:	6013      	strmi	r3, [r2, #0]
 800e878:	bf5c      	itt	pl
 800e87a:	6013      	strpl	r3, [r2, #0]
 800e87c:	2002      	movpl	r0, #2
 800e87e:	4770      	bx	lr
 800e880:	b299      	uxth	r1, r3
 800e882:	b909      	cbnz	r1, 800e888 <__lo0bits+0x2a>
 800e884:	0c1b      	lsrs	r3, r3, #16
 800e886:	2010      	movs	r0, #16
 800e888:	b2d9      	uxtb	r1, r3
 800e88a:	b909      	cbnz	r1, 800e890 <__lo0bits+0x32>
 800e88c:	3008      	adds	r0, #8
 800e88e:	0a1b      	lsrs	r3, r3, #8
 800e890:	0719      	lsls	r1, r3, #28
 800e892:	bf04      	itt	eq
 800e894:	091b      	lsreq	r3, r3, #4
 800e896:	3004      	addeq	r0, #4
 800e898:	0799      	lsls	r1, r3, #30
 800e89a:	bf04      	itt	eq
 800e89c:	089b      	lsreq	r3, r3, #2
 800e89e:	3002      	addeq	r0, #2
 800e8a0:	07d9      	lsls	r1, r3, #31
 800e8a2:	d403      	bmi.n	800e8ac <__lo0bits+0x4e>
 800e8a4:	085b      	lsrs	r3, r3, #1
 800e8a6:	f100 0001 	add.w	r0, r0, #1
 800e8aa:	d003      	beq.n	800e8b4 <__lo0bits+0x56>
 800e8ac:	6013      	str	r3, [r2, #0]
 800e8ae:	4770      	bx	lr
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	4770      	bx	lr
 800e8b4:	2020      	movs	r0, #32
 800e8b6:	4770      	bx	lr

0800e8b8 <__i2b>:
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	2101      	movs	r1, #1
 800e8be:	f7ff febd 	bl	800e63c <_Balloc>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	b928      	cbnz	r0, 800e8d2 <__i2b+0x1a>
 800e8c6:	4b05      	ldr	r3, [pc, #20]	@ (800e8dc <__i2b+0x24>)
 800e8c8:	4805      	ldr	r0, [pc, #20]	@ (800e8e0 <__i2b+0x28>)
 800e8ca:	f240 1145 	movw	r1, #325	@ 0x145
 800e8ce:	f001 ffaf 	bl	8010830 <__assert_func>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	6144      	str	r4, [r0, #20]
 800e8d6:	6103      	str	r3, [r0, #16]
 800e8d8:	bd10      	pop	{r4, pc}
 800e8da:	bf00      	nop
 800e8dc:	08013503 	.word	0x08013503
 800e8e0:	08013514 	.word	0x08013514

0800e8e4 <__multiply>:
 800e8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e8:	4617      	mov	r7, r2
 800e8ea:	690a      	ldr	r2, [r1, #16]
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	bfa8      	it	ge
 800e8f2:	463b      	movge	r3, r7
 800e8f4:	4689      	mov	r9, r1
 800e8f6:	bfa4      	itt	ge
 800e8f8:	460f      	movge	r7, r1
 800e8fa:	4699      	movge	r9, r3
 800e8fc:	693d      	ldr	r5, [r7, #16]
 800e8fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	6879      	ldr	r1, [r7, #4]
 800e906:	eb05 060a 	add.w	r6, r5, sl
 800e90a:	42b3      	cmp	r3, r6
 800e90c:	b085      	sub	sp, #20
 800e90e:	bfb8      	it	lt
 800e910:	3101      	addlt	r1, #1
 800e912:	f7ff fe93 	bl	800e63c <_Balloc>
 800e916:	b930      	cbnz	r0, 800e926 <__multiply+0x42>
 800e918:	4602      	mov	r2, r0
 800e91a:	4b41      	ldr	r3, [pc, #260]	@ (800ea20 <__multiply+0x13c>)
 800e91c:	4841      	ldr	r0, [pc, #260]	@ (800ea24 <__multiply+0x140>)
 800e91e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e922:	f001 ff85 	bl	8010830 <__assert_func>
 800e926:	f100 0414 	add.w	r4, r0, #20
 800e92a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e92e:	4623      	mov	r3, r4
 800e930:	2200      	movs	r2, #0
 800e932:	4573      	cmp	r3, lr
 800e934:	d320      	bcc.n	800e978 <__multiply+0x94>
 800e936:	f107 0814 	add.w	r8, r7, #20
 800e93a:	f109 0114 	add.w	r1, r9, #20
 800e93e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e942:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e946:	9302      	str	r3, [sp, #8]
 800e948:	1beb      	subs	r3, r5, r7
 800e94a:	3b15      	subs	r3, #21
 800e94c:	f023 0303 	bic.w	r3, r3, #3
 800e950:	3304      	adds	r3, #4
 800e952:	3715      	adds	r7, #21
 800e954:	42bd      	cmp	r5, r7
 800e956:	bf38      	it	cc
 800e958:	2304      	movcc	r3, #4
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	9b02      	ldr	r3, [sp, #8]
 800e95e:	9103      	str	r1, [sp, #12]
 800e960:	428b      	cmp	r3, r1
 800e962:	d80c      	bhi.n	800e97e <__multiply+0x9a>
 800e964:	2e00      	cmp	r6, #0
 800e966:	dd03      	ble.n	800e970 <__multiply+0x8c>
 800e968:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d055      	beq.n	800ea1c <__multiply+0x138>
 800e970:	6106      	str	r6, [r0, #16]
 800e972:	b005      	add	sp, #20
 800e974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e978:	f843 2b04 	str.w	r2, [r3], #4
 800e97c:	e7d9      	b.n	800e932 <__multiply+0x4e>
 800e97e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e982:	f1ba 0f00 	cmp.w	sl, #0
 800e986:	d01f      	beq.n	800e9c8 <__multiply+0xe4>
 800e988:	46c4      	mov	ip, r8
 800e98a:	46a1      	mov	r9, r4
 800e98c:	2700      	movs	r7, #0
 800e98e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e992:	f8d9 3000 	ldr.w	r3, [r9]
 800e996:	fa1f fb82 	uxth.w	fp, r2
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e9a0:	443b      	add	r3, r7
 800e9a2:	f8d9 7000 	ldr.w	r7, [r9]
 800e9a6:	0c12      	lsrs	r2, r2, #16
 800e9a8:	0c3f      	lsrs	r7, r7, #16
 800e9aa:	fb0a 7202 	mla	r2, sl, r2, r7
 800e9ae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9b8:	4565      	cmp	r5, ip
 800e9ba:	f849 3b04 	str.w	r3, [r9], #4
 800e9be:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e9c2:	d8e4      	bhi.n	800e98e <__multiply+0xaa>
 800e9c4:	9b01      	ldr	r3, [sp, #4]
 800e9c6:	50e7      	str	r7, [r4, r3]
 800e9c8:	9b03      	ldr	r3, [sp, #12]
 800e9ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e9ce:	3104      	adds	r1, #4
 800e9d0:	f1b9 0f00 	cmp.w	r9, #0
 800e9d4:	d020      	beq.n	800ea18 <__multiply+0x134>
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	4647      	mov	r7, r8
 800e9da:	46a4      	mov	ip, r4
 800e9dc:	f04f 0a00 	mov.w	sl, #0
 800e9e0:	f8b7 b000 	ldrh.w	fp, [r7]
 800e9e4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e9e8:	fb09 220b 	mla	r2, r9, fp, r2
 800e9ec:	4452      	add	r2, sl
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9f4:	f84c 3b04 	str.w	r3, [ip], #4
 800e9f8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e9fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea00:	f8bc 3000 	ldrh.w	r3, [ip]
 800ea04:	fb09 330a 	mla	r3, r9, sl, r3
 800ea08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ea0c:	42bd      	cmp	r5, r7
 800ea0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea12:	d8e5      	bhi.n	800e9e0 <__multiply+0xfc>
 800ea14:	9a01      	ldr	r2, [sp, #4]
 800ea16:	50a3      	str	r3, [r4, r2]
 800ea18:	3404      	adds	r4, #4
 800ea1a:	e79f      	b.n	800e95c <__multiply+0x78>
 800ea1c:	3e01      	subs	r6, #1
 800ea1e:	e7a1      	b.n	800e964 <__multiply+0x80>
 800ea20:	08013503 	.word	0x08013503
 800ea24:	08013514 	.word	0x08013514

0800ea28 <__pow5mult>:
 800ea28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea2c:	4615      	mov	r5, r2
 800ea2e:	f012 0203 	ands.w	r2, r2, #3
 800ea32:	4607      	mov	r7, r0
 800ea34:	460e      	mov	r6, r1
 800ea36:	d007      	beq.n	800ea48 <__pow5mult+0x20>
 800ea38:	4c25      	ldr	r4, [pc, #148]	@ (800ead0 <__pow5mult+0xa8>)
 800ea3a:	3a01      	subs	r2, #1
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ea42:	f7ff fe5d 	bl	800e700 <__multadd>
 800ea46:	4606      	mov	r6, r0
 800ea48:	10ad      	asrs	r5, r5, #2
 800ea4a:	d03d      	beq.n	800eac8 <__pow5mult+0xa0>
 800ea4c:	69fc      	ldr	r4, [r7, #28]
 800ea4e:	b97c      	cbnz	r4, 800ea70 <__pow5mult+0x48>
 800ea50:	2010      	movs	r0, #16
 800ea52:	f7fd fe15 	bl	800c680 <malloc>
 800ea56:	4602      	mov	r2, r0
 800ea58:	61f8      	str	r0, [r7, #28]
 800ea5a:	b928      	cbnz	r0, 800ea68 <__pow5mult+0x40>
 800ea5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ead4 <__pow5mult+0xac>)
 800ea5e:	481e      	ldr	r0, [pc, #120]	@ (800ead8 <__pow5mult+0xb0>)
 800ea60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ea64:	f001 fee4 	bl	8010830 <__assert_func>
 800ea68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ea6c:	6004      	str	r4, [r0, #0]
 800ea6e:	60c4      	str	r4, [r0, #12]
 800ea70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ea74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea78:	b94c      	cbnz	r4, 800ea8e <__pow5mult+0x66>
 800ea7a:	f240 2171 	movw	r1, #625	@ 0x271
 800ea7e:	4638      	mov	r0, r7
 800ea80:	f7ff ff1a 	bl	800e8b8 <__i2b>
 800ea84:	2300      	movs	r3, #0
 800ea86:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	6003      	str	r3, [r0, #0]
 800ea8e:	f04f 0900 	mov.w	r9, #0
 800ea92:	07eb      	lsls	r3, r5, #31
 800ea94:	d50a      	bpl.n	800eaac <__pow5mult+0x84>
 800ea96:	4631      	mov	r1, r6
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	f7ff ff22 	bl	800e8e4 <__multiply>
 800eaa0:	4631      	mov	r1, r6
 800eaa2:	4680      	mov	r8, r0
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	f7ff fe09 	bl	800e6bc <_Bfree>
 800eaaa:	4646      	mov	r6, r8
 800eaac:	106d      	asrs	r5, r5, #1
 800eaae:	d00b      	beq.n	800eac8 <__pow5mult+0xa0>
 800eab0:	6820      	ldr	r0, [r4, #0]
 800eab2:	b938      	cbnz	r0, 800eac4 <__pow5mult+0x9c>
 800eab4:	4622      	mov	r2, r4
 800eab6:	4621      	mov	r1, r4
 800eab8:	4638      	mov	r0, r7
 800eaba:	f7ff ff13 	bl	800e8e4 <__multiply>
 800eabe:	6020      	str	r0, [r4, #0]
 800eac0:	f8c0 9000 	str.w	r9, [r0]
 800eac4:	4604      	mov	r4, r0
 800eac6:	e7e4      	b.n	800ea92 <__pow5mult+0x6a>
 800eac8:	4630      	mov	r0, r6
 800eaca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eace:	bf00      	nop
 800ead0:	08013640 	.word	0x08013640
 800ead4:	08013494 	.word	0x08013494
 800ead8:	08013514 	.word	0x08013514

0800eadc <__lshift>:
 800eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eae0:	460c      	mov	r4, r1
 800eae2:	6849      	ldr	r1, [r1, #4]
 800eae4:	6923      	ldr	r3, [r4, #16]
 800eae6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eaea:	68a3      	ldr	r3, [r4, #8]
 800eaec:	4607      	mov	r7, r0
 800eaee:	4691      	mov	r9, r2
 800eaf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eaf4:	f108 0601 	add.w	r6, r8, #1
 800eaf8:	42b3      	cmp	r3, r6
 800eafa:	db0b      	blt.n	800eb14 <__lshift+0x38>
 800eafc:	4638      	mov	r0, r7
 800eafe:	f7ff fd9d 	bl	800e63c <_Balloc>
 800eb02:	4605      	mov	r5, r0
 800eb04:	b948      	cbnz	r0, 800eb1a <__lshift+0x3e>
 800eb06:	4602      	mov	r2, r0
 800eb08:	4b28      	ldr	r3, [pc, #160]	@ (800ebac <__lshift+0xd0>)
 800eb0a:	4829      	ldr	r0, [pc, #164]	@ (800ebb0 <__lshift+0xd4>)
 800eb0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800eb10:	f001 fe8e 	bl	8010830 <__assert_func>
 800eb14:	3101      	adds	r1, #1
 800eb16:	005b      	lsls	r3, r3, #1
 800eb18:	e7ee      	b.n	800eaf8 <__lshift+0x1c>
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f100 0114 	add.w	r1, r0, #20
 800eb20:	f100 0210 	add.w	r2, r0, #16
 800eb24:	4618      	mov	r0, r3
 800eb26:	4553      	cmp	r3, sl
 800eb28:	db33      	blt.n	800eb92 <__lshift+0xb6>
 800eb2a:	6920      	ldr	r0, [r4, #16]
 800eb2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eb30:	f104 0314 	add.w	r3, r4, #20
 800eb34:	f019 091f 	ands.w	r9, r9, #31
 800eb38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eb3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eb40:	d02b      	beq.n	800eb9a <__lshift+0xbe>
 800eb42:	f1c9 0e20 	rsb	lr, r9, #32
 800eb46:	468a      	mov	sl, r1
 800eb48:	2200      	movs	r2, #0
 800eb4a:	6818      	ldr	r0, [r3, #0]
 800eb4c:	fa00 f009 	lsl.w	r0, r0, r9
 800eb50:	4310      	orrs	r0, r2
 800eb52:	f84a 0b04 	str.w	r0, [sl], #4
 800eb56:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb5a:	459c      	cmp	ip, r3
 800eb5c:	fa22 f20e 	lsr.w	r2, r2, lr
 800eb60:	d8f3      	bhi.n	800eb4a <__lshift+0x6e>
 800eb62:	ebac 0304 	sub.w	r3, ip, r4
 800eb66:	3b15      	subs	r3, #21
 800eb68:	f023 0303 	bic.w	r3, r3, #3
 800eb6c:	3304      	adds	r3, #4
 800eb6e:	f104 0015 	add.w	r0, r4, #21
 800eb72:	4560      	cmp	r0, ip
 800eb74:	bf88      	it	hi
 800eb76:	2304      	movhi	r3, #4
 800eb78:	50ca      	str	r2, [r1, r3]
 800eb7a:	b10a      	cbz	r2, 800eb80 <__lshift+0xa4>
 800eb7c:	f108 0602 	add.w	r6, r8, #2
 800eb80:	3e01      	subs	r6, #1
 800eb82:	4638      	mov	r0, r7
 800eb84:	612e      	str	r6, [r5, #16]
 800eb86:	4621      	mov	r1, r4
 800eb88:	f7ff fd98 	bl	800e6bc <_Bfree>
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb92:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb96:	3301      	adds	r3, #1
 800eb98:	e7c5      	b.n	800eb26 <__lshift+0x4a>
 800eb9a:	3904      	subs	r1, #4
 800eb9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eba0:	f841 2f04 	str.w	r2, [r1, #4]!
 800eba4:	459c      	cmp	ip, r3
 800eba6:	d8f9      	bhi.n	800eb9c <__lshift+0xc0>
 800eba8:	e7ea      	b.n	800eb80 <__lshift+0xa4>
 800ebaa:	bf00      	nop
 800ebac:	08013503 	.word	0x08013503
 800ebb0:	08013514 	.word	0x08013514

0800ebb4 <__mcmp>:
 800ebb4:	690a      	ldr	r2, [r1, #16]
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	6900      	ldr	r0, [r0, #16]
 800ebba:	1a80      	subs	r0, r0, r2
 800ebbc:	b530      	push	{r4, r5, lr}
 800ebbe:	d10e      	bne.n	800ebde <__mcmp+0x2a>
 800ebc0:	3314      	adds	r3, #20
 800ebc2:	3114      	adds	r1, #20
 800ebc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ebc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ebcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ebd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ebd4:	4295      	cmp	r5, r2
 800ebd6:	d003      	beq.n	800ebe0 <__mcmp+0x2c>
 800ebd8:	d205      	bcs.n	800ebe6 <__mcmp+0x32>
 800ebda:	f04f 30ff 	mov.w	r0, #4294967295
 800ebde:	bd30      	pop	{r4, r5, pc}
 800ebe0:	42a3      	cmp	r3, r4
 800ebe2:	d3f3      	bcc.n	800ebcc <__mcmp+0x18>
 800ebe4:	e7fb      	b.n	800ebde <__mcmp+0x2a>
 800ebe6:	2001      	movs	r0, #1
 800ebe8:	e7f9      	b.n	800ebde <__mcmp+0x2a>
	...

0800ebec <__mdiff>:
 800ebec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf0:	4689      	mov	r9, r1
 800ebf2:	4606      	mov	r6, r0
 800ebf4:	4611      	mov	r1, r2
 800ebf6:	4648      	mov	r0, r9
 800ebf8:	4614      	mov	r4, r2
 800ebfa:	f7ff ffdb 	bl	800ebb4 <__mcmp>
 800ebfe:	1e05      	subs	r5, r0, #0
 800ec00:	d112      	bne.n	800ec28 <__mdiff+0x3c>
 800ec02:	4629      	mov	r1, r5
 800ec04:	4630      	mov	r0, r6
 800ec06:	f7ff fd19 	bl	800e63c <_Balloc>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	b928      	cbnz	r0, 800ec1a <__mdiff+0x2e>
 800ec0e:	4b3f      	ldr	r3, [pc, #252]	@ (800ed0c <__mdiff+0x120>)
 800ec10:	f240 2137 	movw	r1, #567	@ 0x237
 800ec14:	483e      	ldr	r0, [pc, #248]	@ (800ed10 <__mdiff+0x124>)
 800ec16:	f001 fe0b 	bl	8010830 <__assert_func>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ec20:	4610      	mov	r0, r2
 800ec22:	b003      	add	sp, #12
 800ec24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec28:	bfbc      	itt	lt
 800ec2a:	464b      	movlt	r3, r9
 800ec2c:	46a1      	movlt	r9, r4
 800ec2e:	4630      	mov	r0, r6
 800ec30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ec34:	bfba      	itte	lt
 800ec36:	461c      	movlt	r4, r3
 800ec38:	2501      	movlt	r5, #1
 800ec3a:	2500      	movge	r5, #0
 800ec3c:	f7ff fcfe 	bl	800e63c <_Balloc>
 800ec40:	4602      	mov	r2, r0
 800ec42:	b918      	cbnz	r0, 800ec4c <__mdiff+0x60>
 800ec44:	4b31      	ldr	r3, [pc, #196]	@ (800ed0c <__mdiff+0x120>)
 800ec46:	f240 2145 	movw	r1, #581	@ 0x245
 800ec4a:	e7e3      	b.n	800ec14 <__mdiff+0x28>
 800ec4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ec50:	6926      	ldr	r6, [r4, #16]
 800ec52:	60c5      	str	r5, [r0, #12]
 800ec54:	f109 0310 	add.w	r3, r9, #16
 800ec58:	f109 0514 	add.w	r5, r9, #20
 800ec5c:	f104 0e14 	add.w	lr, r4, #20
 800ec60:	f100 0b14 	add.w	fp, r0, #20
 800ec64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ec68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	46d9      	mov	r9, fp
 800ec70:	f04f 0c00 	mov.w	ip, #0
 800ec74:	9b01      	ldr	r3, [sp, #4]
 800ec76:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ec7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ec7e:	9301      	str	r3, [sp, #4]
 800ec80:	fa1f f38a 	uxth.w	r3, sl
 800ec84:	4619      	mov	r1, r3
 800ec86:	b283      	uxth	r3, r0
 800ec88:	1acb      	subs	r3, r1, r3
 800ec8a:	0c00      	lsrs	r0, r0, #16
 800ec8c:	4463      	add	r3, ip
 800ec8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ec92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ec9c:	4576      	cmp	r6, lr
 800ec9e:	f849 3b04 	str.w	r3, [r9], #4
 800eca2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eca6:	d8e5      	bhi.n	800ec74 <__mdiff+0x88>
 800eca8:	1b33      	subs	r3, r6, r4
 800ecaa:	3b15      	subs	r3, #21
 800ecac:	f023 0303 	bic.w	r3, r3, #3
 800ecb0:	3415      	adds	r4, #21
 800ecb2:	3304      	adds	r3, #4
 800ecb4:	42a6      	cmp	r6, r4
 800ecb6:	bf38      	it	cc
 800ecb8:	2304      	movcc	r3, #4
 800ecba:	441d      	add	r5, r3
 800ecbc:	445b      	add	r3, fp
 800ecbe:	461e      	mov	r6, r3
 800ecc0:	462c      	mov	r4, r5
 800ecc2:	4544      	cmp	r4, r8
 800ecc4:	d30e      	bcc.n	800ece4 <__mdiff+0xf8>
 800ecc6:	f108 0103 	add.w	r1, r8, #3
 800ecca:	1b49      	subs	r1, r1, r5
 800eccc:	f021 0103 	bic.w	r1, r1, #3
 800ecd0:	3d03      	subs	r5, #3
 800ecd2:	45a8      	cmp	r8, r5
 800ecd4:	bf38      	it	cc
 800ecd6:	2100      	movcc	r1, #0
 800ecd8:	440b      	add	r3, r1
 800ecda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ecde:	b191      	cbz	r1, 800ed06 <__mdiff+0x11a>
 800ece0:	6117      	str	r7, [r2, #16]
 800ece2:	e79d      	b.n	800ec20 <__mdiff+0x34>
 800ece4:	f854 1b04 	ldr.w	r1, [r4], #4
 800ece8:	46e6      	mov	lr, ip
 800ecea:	0c08      	lsrs	r0, r1, #16
 800ecec:	fa1c fc81 	uxtah	ip, ip, r1
 800ecf0:	4471      	add	r1, lr
 800ecf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ecf6:	b289      	uxth	r1, r1
 800ecf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ecfc:	f846 1b04 	str.w	r1, [r6], #4
 800ed00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ed04:	e7dd      	b.n	800ecc2 <__mdiff+0xd6>
 800ed06:	3f01      	subs	r7, #1
 800ed08:	e7e7      	b.n	800ecda <__mdiff+0xee>
 800ed0a:	bf00      	nop
 800ed0c:	08013503 	.word	0x08013503
 800ed10:	08013514 	.word	0x08013514

0800ed14 <__ulp>:
 800ed14:	b082      	sub	sp, #8
 800ed16:	ed8d 0b00 	vstr	d0, [sp]
 800ed1a:	9a01      	ldr	r2, [sp, #4]
 800ed1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed5c <__ulp+0x48>)
 800ed1e:	4013      	ands	r3, r2
 800ed20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dc08      	bgt.n	800ed3a <__ulp+0x26>
 800ed28:	425b      	negs	r3, r3
 800ed2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ed2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ed32:	da04      	bge.n	800ed3e <__ulp+0x2a>
 800ed34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ed38:	4113      	asrs	r3, r2
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	e008      	b.n	800ed50 <__ulp+0x3c>
 800ed3e:	f1a2 0314 	sub.w	r3, r2, #20
 800ed42:	2b1e      	cmp	r3, #30
 800ed44:	bfda      	itte	le
 800ed46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ed4a:	40da      	lsrle	r2, r3
 800ed4c:	2201      	movgt	r2, #1
 800ed4e:	2300      	movs	r3, #0
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	ec41 0b10 	vmov	d0, r0, r1
 800ed58:	b002      	add	sp, #8
 800ed5a:	4770      	bx	lr
 800ed5c:	7ff00000 	.word	0x7ff00000

0800ed60 <__b2d>:
 800ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed64:	6906      	ldr	r6, [r0, #16]
 800ed66:	f100 0814 	add.w	r8, r0, #20
 800ed6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ed6e:	1f37      	subs	r7, r6, #4
 800ed70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed74:	4610      	mov	r0, r2
 800ed76:	f7ff fd53 	bl	800e820 <__hi0bits>
 800ed7a:	f1c0 0320 	rsb	r3, r0, #32
 800ed7e:	280a      	cmp	r0, #10
 800ed80:	600b      	str	r3, [r1, #0]
 800ed82:	491b      	ldr	r1, [pc, #108]	@ (800edf0 <__b2d+0x90>)
 800ed84:	dc15      	bgt.n	800edb2 <__b2d+0x52>
 800ed86:	f1c0 0c0b 	rsb	ip, r0, #11
 800ed8a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ed8e:	45b8      	cmp	r8, r7
 800ed90:	ea43 0501 	orr.w	r5, r3, r1
 800ed94:	bf34      	ite	cc
 800ed96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ed9a:	2300      	movcs	r3, #0
 800ed9c:	3015      	adds	r0, #21
 800ed9e:	fa02 f000 	lsl.w	r0, r2, r0
 800eda2:	fa23 f30c 	lsr.w	r3, r3, ip
 800eda6:	4303      	orrs	r3, r0
 800eda8:	461c      	mov	r4, r3
 800edaa:	ec45 4b10 	vmov	d0, r4, r5
 800edae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb2:	45b8      	cmp	r8, r7
 800edb4:	bf3a      	itte	cc
 800edb6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800edba:	f1a6 0708 	subcc.w	r7, r6, #8
 800edbe:	2300      	movcs	r3, #0
 800edc0:	380b      	subs	r0, #11
 800edc2:	d012      	beq.n	800edea <__b2d+0x8a>
 800edc4:	f1c0 0120 	rsb	r1, r0, #32
 800edc8:	fa23 f401 	lsr.w	r4, r3, r1
 800edcc:	4082      	lsls	r2, r0
 800edce:	4322      	orrs	r2, r4
 800edd0:	4547      	cmp	r7, r8
 800edd2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800edd6:	bf8c      	ite	hi
 800edd8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800eddc:	2200      	movls	r2, #0
 800edde:	4083      	lsls	r3, r0
 800ede0:	40ca      	lsrs	r2, r1
 800ede2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ede6:	4313      	orrs	r3, r2
 800ede8:	e7de      	b.n	800eda8 <__b2d+0x48>
 800edea:	ea42 0501 	orr.w	r5, r2, r1
 800edee:	e7db      	b.n	800eda8 <__b2d+0x48>
 800edf0:	3ff00000 	.word	0x3ff00000

0800edf4 <__d2b>:
 800edf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800edf8:	460f      	mov	r7, r1
 800edfa:	2101      	movs	r1, #1
 800edfc:	ec59 8b10 	vmov	r8, r9, d0
 800ee00:	4616      	mov	r6, r2
 800ee02:	f7ff fc1b 	bl	800e63c <_Balloc>
 800ee06:	4604      	mov	r4, r0
 800ee08:	b930      	cbnz	r0, 800ee18 <__d2b+0x24>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	4b23      	ldr	r3, [pc, #140]	@ (800ee9c <__d2b+0xa8>)
 800ee0e:	4824      	ldr	r0, [pc, #144]	@ (800eea0 <__d2b+0xac>)
 800ee10:	f240 310f 	movw	r1, #783	@ 0x30f
 800ee14:	f001 fd0c 	bl	8010830 <__assert_func>
 800ee18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ee1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee20:	b10d      	cbz	r5, 800ee26 <__d2b+0x32>
 800ee22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	f1b8 0300 	subs.w	r3, r8, #0
 800ee2c:	d023      	beq.n	800ee76 <__d2b+0x82>
 800ee2e:	4668      	mov	r0, sp
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	f7ff fd14 	bl	800e85e <__lo0bits>
 800ee36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee3a:	b1d0      	cbz	r0, 800ee72 <__d2b+0x7e>
 800ee3c:	f1c0 0320 	rsb	r3, r0, #32
 800ee40:	fa02 f303 	lsl.w	r3, r2, r3
 800ee44:	430b      	orrs	r3, r1
 800ee46:	40c2      	lsrs	r2, r0
 800ee48:	6163      	str	r3, [r4, #20]
 800ee4a:	9201      	str	r2, [sp, #4]
 800ee4c:	9b01      	ldr	r3, [sp, #4]
 800ee4e:	61a3      	str	r3, [r4, #24]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	bf0c      	ite	eq
 800ee54:	2201      	moveq	r2, #1
 800ee56:	2202      	movne	r2, #2
 800ee58:	6122      	str	r2, [r4, #16]
 800ee5a:	b1a5      	cbz	r5, 800ee86 <__d2b+0x92>
 800ee5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ee60:	4405      	add	r5, r0
 800ee62:	603d      	str	r5, [r7, #0]
 800ee64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ee68:	6030      	str	r0, [r6, #0]
 800ee6a:	4620      	mov	r0, r4
 800ee6c:	b003      	add	sp, #12
 800ee6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee72:	6161      	str	r1, [r4, #20]
 800ee74:	e7ea      	b.n	800ee4c <__d2b+0x58>
 800ee76:	a801      	add	r0, sp, #4
 800ee78:	f7ff fcf1 	bl	800e85e <__lo0bits>
 800ee7c:	9b01      	ldr	r3, [sp, #4]
 800ee7e:	6163      	str	r3, [r4, #20]
 800ee80:	3020      	adds	r0, #32
 800ee82:	2201      	movs	r2, #1
 800ee84:	e7e8      	b.n	800ee58 <__d2b+0x64>
 800ee86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ee8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ee8e:	6038      	str	r0, [r7, #0]
 800ee90:	6918      	ldr	r0, [r3, #16]
 800ee92:	f7ff fcc5 	bl	800e820 <__hi0bits>
 800ee96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ee9a:	e7e5      	b.n	800ee68 <__d2b+0x74>
 800ee9c:	08013503 	.word	0x08013503
 800eea0:	08013514 	.word	0x08013514

0800eea4 <__ratio>:
 800eea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea8:	b085      	sub	sp, #20
 800eeaa:	e9cd 1000 	strd	r1, r0, [sp]
 800eeae:	a902      	add	r1, sp, #8
 800eeb0:	f7ff ff56 	bl	800ed60 <__b2d>
 800eeb4:	9800      	ldr	r0, [sp, #0]
 800eeb6:	a903      	add	r1, sp, #12
 800eeb8:	ec55 4b10 	vmov	r4, r5, d0
 800eebc:	f7ff ff50 	bl	800ed60 <__b2d>
 800eec0:	9b01      	ldr	r3, [sp, #4]
 800eec2:	6919      	ldr	r1, [r3, #16]
 800eec4:	9b00      	ldr	r3, [sp, #0]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	1ac9      	subs	r1, r1, r3
 800eeca:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800eece:	1a9b      	subs	r3, r3, r2
 800eed0:	ec5b ab10 	vmov	sl, fp, d0
 800eed4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	bfce      	itee	gt
 800eedc:	462a      	movgt	r2, r5
 800eede:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eee2:	465a      	movle	r2, fp
 800eee4:	462f      	mov	r7, r5
 800eee6:	46d9      	mov	r9, fp
 800eee8:	bfcc      	ite	gt
 800eeea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eeee:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800eef2:	464b      	mov	r3, r9
 800eef4:	4652      	mov	r2, sl
 800eef6:	4620      	mov	r0, r4
 800eef8:	4639      	mov	r1, r7
 800eefa:	f7f1 fcc7 	bl	800088c <__aeabi_ddiv>
 800eefe:	ec41 0b10 	vmov	d0, r0, r1
 800ef02:	b005      	add	sp, #20
 800ef04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef08 <__copybits>:
 800ef08:	3901      	subs	r1, #1
 800ef0a:	b570      	push	{r4, r5, r6, lr}
 800ef0c:	1149      	asrs	r1, r1, #5
 800ef0e:	6914      	ldr	r4, [r2, #16]
 800ef10:	3101      	adds	r1, #1
 800ef12:	f102 0314 	add.w	r3, r2, #20
 800ef16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ef1e:	1f05      	subs	r5, r0, #4
 800ef20:	42a3      	cmp	r3, r4
 800ef22:	d30c      	bcc.n	800ef3e <__copybits+0x36>
 800ef24:	1aa3      	subs	r3, r4, r2
 800ef26:	3b11      	subs	r3, #17
 800ef28:	f023 0303 	bic.w	r3, r3, #3
 800ef2c:	3211      	adds	r2, #17
 800ef2e:	42a2      	cmp	r2, r4
 800ef30:	bf88      	it	hi
 800ef32:	2300      	movhi	r3, #0
 800ef34:	4418      	add	r0, r3
 800ef36:	2300      	movs	r3, #0
 800ef38:	4288      	cmp	r0, r1
 800ef3a:	d305      	bcc.n	800ef48 <__copybits+0x40>
 800ef3c:	bd70      	pop	{r4, r5, r6, pc}
 800ef3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800ef42:	f845 6f04 	str.w	r6, [r5, #4]!
 800ef46:	e7eb      	b.n	800ef20 <__copybits+0x18>
 800ef48:	f840 3b04 	str.w	r3, [r0], #4
 800ef4c:	e7f4      	b.n	800ef38 <__copybits+0x30>

0800ef4e <__any_on>:
 800ef4e:	f100 0214 	add.w	r2, r0, #20
 800ef52:	6900      	ldr	r0, [r0, #16]
 800ef54:	114b      	asrs	r3, r1, #5
 800ef56:	4298      	cmp	r0, r3
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	db11      	blt.n	800ef80 <__any_on+0x32>
 800ef5c:	dd0a      	ble.n	800ef74 <__any_on+0x26>
 800ef5e:	f011 011f 	ands.w	r1, r1, #31
 800ef62:	d007      	beq.n	800ef74 <__any_on+0x26>
 800ef64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ef68:	fa24 f001 	lsr.w	r0, r4, r1
 800ef6c:	fa00 f101 	lsl.w	r1, r0, r1
 800ef70:	428c      	cmp	r4, r1
 800ef72:	d10b      	bne.n	800ef8c <__any_on+0x3e>
 800ef74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d803      	bhi.n	800ef84 <__any_on+0x36>
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	bd10      	pop	{r4, pc}
 800ef80:	4603      	mov	r3, r0
 800ef82:	e7f7      	b.n	800ef74 <__any_on+0x26>
 800ef84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef88:	2900      	cmp	r1, #0
 800ef8a:	d0f5      	beq.n	800ef78 <__any_on+0x2a>
 800ef8c:	2001      	movs	r0, #1
 800ef8e:	e7f6      	b.n	800ef7e <__any_on+0x30>

0800ef90 <sulp>:
 800ef90:	b570      	push	{r4, r5, r6, lr}
 800ef92:	4604      	mov	r4, r0
 800ef94:	460d      	mov	r5, r1
 800ef96:	ec45 4b10 	vmov	d0, r4, r5
 800ef9a:	4616      	mov	r6, r2
 800ef9c:	f7ff feba 	bl	800ed14 <__ulp>
 800efa0:	ec51 0b10 	vmov	r0, r1, d0
 800efa4:	b17e      	cbz	r6, 800efc6 <sulp+0x36>
 800efa6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800efaa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800efae:	2b00      	cmp	r3, #0
 800efb0:	dd09      	ble.n	800efc6 <sulp+0x36>
 800efb2:	051b      	lsls	r3, r3, #20
 800efb4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800efb8:	2400      	movs	r4, #0
 800efba:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800efbe:	4622      	mov	r2, r4
 800efc0:	462b      	mov	r3, r5
 800efc2:	f7f1 fb39 	bl	8000638 <__aeabi_dmul>
 800efc6:	ec41 0b10 	vmov	d0, r0, r1
 800efca:	bd70      	pop	{r4, r5, r6, pc}
 800efcc:	0000      	movs	r0, r0
	...

0800efd0 <_strtod_l>:
 800efd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	b09f      	sub	sp, #124	@ 0x7c
 800efd6:	460c      	mov	r4, r1
 800efd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800efda:	2200      	movs	r2, #0
 800efdc:	921a      	str	r2, [sp, #104]	@ 0x68
 800efde:	9005      	str	r0, [sp, #20]
 800efe0:	f04f 0a00 	mov.w	sl, #0
 800efe4:	f04f 0b00 	mov.w	fp, #0
 800efe8:	460a      	mov	r2, r1
 800efea:	9219      	str	r2, [sp, #100]	@ 0x64
 800efec:	7811      	ldrb	r1, [r2, #0]
 800efee:	292b      	cmp	r1, #43	@ 0x2b
 800eff0:	d04a      	beq.n	800f088 <_strtod_l+0xb8>
 800eff2:	d838      	bhi.n	800f066 <_strtod_l+0x96>
 800eff4:	290d      	cmp	r1, #13
 800eff6:	d832      	bhi.n	800f05e <_strtod_l+0x8e>
 800eff8:	2908      	cmp	r1, #8
 800effa:	d832      	bhi.n	800f062 <_strtod_l+0x92>
 800effc:	2900      	cmp	r1, #0
 800effe:	d03b      	beq.n	800f078 <_strtod_l+0xa8>
 800f000:	2200      	movs	r2, #0
 800f002:	920e      	str	r2, [sp, #56]	@ 0x38
 800f004:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f006:	782a      	ldrb	r2, [r5, #0]
 800f008:	2a30      	cmp	r2, #48	@ 0x30
 800f00a:	f040 80b2 	bne.w	800f172 <_strtod_l+0x1a2>
 800f00e:	786a      	ldrb	r2, [r5, #1]
 800f010:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f014:	2a58      	cmp	r2, #88	@ 0x58
 800f016:	d16e      	bne.n	800f0f6 <_strtod_l+0x126>
 800f018:	9302      	str	r3, [sp, #8]
 800f01a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f01c:	9301      	str	r3, [sp, #4]
 800f01e:	ab1a      	add	r3, sp, #104	@ 0x68
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	4a8f      	ldr	r2, [pc, #572]	@ (800f260 <_strtod_l+0x290>)
 800f024:	9805      	ldr	r0, [sp, #20]
 800f026:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f028:	a919      	add	r1, sp, #100	@ 0x64
 800f02a:	f001 fc87 	bl	801093c <__gethex>
 800f02e:	f010 060f 	ands.w	r6, r0, #15
 800f032:	4604      	mov	r4, r0
 800f034:	d005      	beq.n	800f042 <_strtod_l+0x72>
 800f036:	2e06      	cmp	r6, #6
 800f038:	d128      	bne.n	800f08c <_strtod_l+0xbc>
 800f03a:	3501      	adds	r5, #1
 800f03c:	2300      	movs	r3, #0
 800f03e:	9519      	str	r5, [sp, #100]	@ 0x64
 800f040:	930e      	str	r3, [sp, #56]	@ 0x38
 800f042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f044:	2b00      	cmp	r3, #0
 800f046:	f040 858e 	bne.w	800fb66 <_strtod_l+0xb96>
 800f04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f04c:	b1cb      	cbz	r3, 800f082 <_strtod_l+0xb2>
 800f04e:	4652      	mov	r2, sl
 800f050:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f054:	ec43 2b10 	vmov	d0, r2, r3
 800f058:	b01f      	add	sp, #124	@ 0x7c
 800f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05e:	2920      	cmp	r1, #32
 800f060:	d1ce      	bne.n	800f000 <_strtod_l+0x30>
 800f062:	3201      	adds	r2, #1
 800f064:	e7c1      	b.n	800efea <_strtod_l+0x1a>
 800f066:	292d      	cmp	r1, #45	@ 0x2d
 800f068:	d1ca      	bne.n	800f000 <_strtod_l+0x30>
 800f06a:	2101      	movs	r1, #1
 800f06c:	910e      	str	r1, [sp, #56]	@ 0x38
 800f06e:	1c51      	adds	r1, r2, #1
 800f070:	9119      	str	r1, [sp, #100]	@ 0x64
 800f072:	7852      	ldrb	r2, [r2, #1]
 800f074:	2a00      	cmp	r2, #0
 800f076:	d1c5      	bne.n	800f004 <_strtod_l+0x34>
 800f078:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f07a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f040 8570 	bne.w	800fb62 <_strtod_l+0xb92>
 800f082:	4652      	mov	r2, sl
 800f084:	465b      	mov	r3, fp
 800f086:	e7e5      	b.n	800f054 <_strtod_l+0x84>
 800f088:	2100      	movs	r1, #0
 800f08a:	e7ef      	b.n	800f06c <_strtod_l+0x9c>
 800f08c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f08e:	b13a      	cbz	r2, 800f0a0 <_strtod_l+0xd0>
 800f090:	2135      	movs	r1, #53	@ 0x35
 800f092:	a81c      	add	r0, sp, #112	@ 0x70
 800f094:	f7ff ff38 	bl	800ef08 <__copybits>
 800f098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f09a:	9805      	ldr	r0, [sp, #20]
 800f09c:	f7ff fb0e 	bl	800e6bc <_Bfree>
 800f0a0:	3e01      	subs	r6, #1
 800f0a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f0a4:	2e04      	cmp	r6, #4
 800f0a6:	d806      	bhi.n	800f0b6 <_strtod_l+0xe6>
 800f0a8:	e8df f006 	tbb	[pc, r6]
 800f0ac:	201d0314 	.word	0x201d0314
 800f0b0:	14          	.byte	0x14
 800f0b1:	00          	.byte	0x00
 800f0b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f0b6:	05e1      	lsls	r1, r4, #23
 800f0b8:	bf48      	it	mi
 800f0ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f0be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f0c2:	0d1b      	lsrs	r3, r3, #20
 800f0c4:	051b      	lsls	r3, r3, #20
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d1bb      	bne.n	800f042 <_strtod_l+0x72>
 800f0ca:	f7fe fbd1 	bl	800d870 <__errno>
 800f0ce:	2322      	movs	r3, #34	@ 0x22
 800f0d0:	6003      	str	r3, [r0, #0]
 800f0d2:	e7b6      	b.n	800f042 <_strtod_l+0x72>
 800f0d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f0d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f0dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f0e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f0e4:	e7e7      	b.n	800f0b6 <_strtod_l+0xe6>
 800f0e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800f268 <_strtod_l+0x298>
 800f0ea:	e7e4      	b.n	800f0b6 <_strtod_l+0xe6>
 800f0ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f0f0:	f04f 3aff 	mov.w	sl, #4294967295
 800f0f4:	e7df      	b.n	800f0b6 <_strtod_l+0xe6>
 800f0f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f0f8:	1c5a      	adds	r2, r3, #1
 800f0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800f0fc:	785b      	ldrb	r3, [r3, #1]
 800f0fe:	2b30      	cmp	r3, #48	@ 0x30
 800f100:	d0f9      	beq.n	800f0f6 <_strtod_l+0x126>
 800f102:	2b00      	cmp	r3, #0
 800f104:	d09d      	beq.n	800f042 <_strtod_l+0x72>
 800f106:	2301      	movs	r3, #1
 800f108:	2700      	movs	r7, #0
 800f10a:	9308      	str	r3, [sp, #32]
 800f10c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f10e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f110:	970b      	str	r7, [sp, #44]	@ 0x2c
 800f112:	46b9      	mov	r9, r7
 800f114:	220a      	movs	r2, #10
 800f116:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f118:	7805      	ldrb	r5, [r0, #0]
 800f11a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f11e:	b2d9      	uxtb	r1, r3
 800f120:	2909      	cmp	r1, #9
 800f122:	d928      	bls.n	800f176 <_strtod_l+0x1a6>
 800f124:	494f      	ldr	r1, [pc, #316]	@ (800f264 <_strtod_l+0x294>)
 800f126:	2201      	movs	r2, #1
 800f128:	f001 fb67 	bl	80107fa <strncmp>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d032      	beq.n	800f196 <_strtod_l+0x1c6>
 800f130:	2000      	movs	r0, #0
 800f132:	462a      	mov	r2, r5
 800f134:	900a      	str	r0, [sp, #40]	@ 0x28
 800f136:	464d      	mov	r5, r9
 800f138:	4603      	mov	r3, r0
 800f13a:	2a65      	cmp	r2, #101	@ 0x65
 800f13c:	d001      	beq.n	800f142 <_strtod_l+0x172>
 800f13e:	2a45      	cmp	r2, #69	@ 0x45
 800f140:	d114      	bne.n	800f16c <_strtod_l+0x19c>
 800f142:	b91d      	cbnz	r5, 800f14c <_strtod_l+0x17c>
 800f144:	9a08      	ldr	r2, [sp, #32]
 800f146:	4302      	orrs	r2, r0
 800f148:	d096      	beq.n	800f078 <_strtod_l+0xa8>
 800f14a:	2500      	movs	r5, #0
 800f14c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f14e:	1c62      	adds	r2, r4, #1
 800f150:	9219      	str	r2, [sp, #100]	@ 0x64
 800f152:	7862      	ldrb	r2, [r4, #1]
 800f154:	2a2b      	cmp	r2, #43	@ 0x2b
 800f156:	d07a      	beq.n	800f24e <_strtod_l+0x27e>
 800f158:	2a2d      	cmp	r2, #45	@ 0x2d
 800f15a:	d07e      	beq.n	800f25a <_strtod_l+0x28a>
 800f15c:	f04f 0c00 	mov.w	ip, #0
 800f160:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f164:	2909      	cmp	r1, #9
 800f166:	f240 8085 	bls.w	800f274 <_strtod_l+0x2a4>
 800f16a:	9419      	str	r4, [sp, #100]	@ 0x64
 800f16c:	f04f 0800 	mov.w	r8, #0
 800f170:	e0a5      	b.n	800f2be <_strtod_l+0x2ee>
 800f172:	2300      	movs	r3, #0
 800f174:	e7c8      	b.n	800f108 <_strtod_l+0x138>
 800f176:	f1b9 0f08 	cmp.w	r9, #8
 800f17a:	bfd8      	it	le
 800f17c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800f17e:	f100 0001 	add.w	r0, r0, #1
 800f182:	bfda      	itte	le
 800f184:	fb02 3301 	mlale	r3, r2, r1, r3
 800f188:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800f18a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800f18e:	f109 0901 	add.w	r9, r9, #1
 800f192:	9019      	str	r0, [sp, #100]	@ 0x64
 800f194:	e7bf      	b.n	800f116 <_strtod_l+0x146>
 800f196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f198:	1c5a      	adds	r2, r3, #1
 800f19a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f19c:	785a      	ldrb	r2, [r3, #1]
 800f19e:	f1b9 0f00 	cmp.w	r9, #0
 800f1a2:	d03b      	beq.n	800f21c <_strtod_l+0x24c>
 800f1a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1a6:	464d      	mov	r5, r9
 800f1a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f1ac:	2b09      	cmp	r3, #9
 800f1ae:	d912      	bls.n	800f1d6 <_strtod_l+0x206>
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	e7c2      	b.n	800f13a <_strtod_l+0x16a>
 800f1b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1b6:	1c5a      	adds	r2, r3, #1
 800f1b8:	9219      	str	r2, [sp, #100]	@ 0x64
 800f1ba:	785a      	ldrb	r2, [r3, #1]
 800f1bc:	3001      	adds	r0, #1
 800f1be:	2a30      	cmp	r2, #48	@ 0x30
 800f1c0:	d0f8      	beq.n	800f1b4 <_strtod_l+0x1e4>
 800f1c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f1c6:	2b08      	cmp	r3, #8
 800f1c8:	f200 84d2 	bhi.w	800fb70 <_strtod_l+0xba0>
 800f1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f1ce:	900a      	str	r0, [sp, #40]	@ 0x28
 800f1d0:	2000      	movs	r0, #0
 800f1d2:	930c      	str	r3, [sp, #48]	@ 0x30
 800f1d4:	4605      	mov	r5, r0
 800f1d6:	3a30      	subs	r2, #48	@ 0x30
 800f1d8:	f100 0301 	add.w	r3, r0, #1
 800f1dc:	d018      	beq.n	800f210 <_strtod_l+0x240>
 800f1de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f1e0:	4419      	add	r1, r3
 800f1e2:	910a      	str	r1, [sp, #40]	@ 0x28
 800f1e4:	462e      	mov	r6, r5
 800f1e6:	f04f 0e0a 	mov.w	lr, #10
 800f1ea:	1c71      	adds	r1, r6, #1
 800f1ec:	eba1 0c05 	sub.w	ip, r1, r5
 800f1f0:	4563      	cmp	r3, ip
 800f1f2:	dc15      	bgt.n	800f220 <_strtod_l+0x250>
 800f1f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800f1f8:	182b      	adds	r3, r5, r0
 800f1fa:	2b08      	cmp	r3, #8
 800f1fc:	f105 0501 	add.w	r5, r5, #1
 800f200:	4405      	add	r5, r0
 800f202:	dc1a      	bgt.n	800f23a <_strtod_l+0x26a>
 800f204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f206:	230a      	movs	r3, #10
 800f208:	fb03 2301 	mla	r3, r3, r1, r2
 800f20c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f20e:	2300      	movs	r3, #0
 800f210:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f212:	1c51      	adds	r1, r2, #1
 800f214:	9119      	str	r1, [sp, #100]	@ 0x64
 800f216:	7852      	ldrb	r2, [r2, #1]
 800f218:	4618      	mov	r0, r3
 800f21a:	e7c5      	b.n	800f1a8 <_strtod_l+0x1d8>
 800f21c:	4648      	mov	r0, r9
 800f21e:	e7ce      	b.n	800f1be <_strtod_l+0x1ee>
 800f220:	2e08      	cmp	r6, #8
 800f222:	dc05      	bgt.n	800f230 <_strtod_l+0x260>
 800f224:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f226:	fb0e f606 	mul.w	r6, lr, r6
 800f22a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800f22c:	460e      	mov	r6, r1
 800f22e:	e7dc      	b.n	800f1ea <_strtod_l+0x21a>
 800f230:	2910      	cmp	r1, #16
 800f232:	bfd8      	it	le
 800f234:	fb0e f707 	mulle.w	r7, lr, r7
 800f238:	e7f8      	b.n	800f22c <_strtod_l+0x25c>
 800f23a:	2b0f      	cmp	r3, #15
 800f23c:	bfdc      	itt	le
 800f23e:	230a      	movle	r3, #10
 800f240:	fb03 2707 	mlale	r7, r3, r7, r2
 800f244:	e7e3      	b.n	800f20e <_strtod_l+0x23e>
 800f246:	2300      	movs	r3, #0
 800f248:	930a      	str	r3, [sp, #40]	@ 0x28
 800f24a:	2301      	movs	r3, #1
 800f24c:	e77a      	b.n	800f144 <_strtod_l+0x174>
 800f24e:	f04f 0c00 	mov.w	ip, #0
 800f252:	1ca2      	adds	r2, r4, #2
 800f254:	9219      	str	r2, [sp, #100]	@ 0x64
 800f256:	78a2      	ldrb	r2, [r4, #2]
 800f258:	e782      	b.n	800f160 <_strtod_l+0x190>
 800f25a:	f04f 0c01 	mov.w	ip, #1
 800f25e:	e7f8      	b.n	800f252 <_strtod_l+0x282>
 800f260:	08013754 	.word	0x08013754
 800f264:	0801356d 	.word	0x0801356d
 800f268:	7ff00000 	.word	0x7ff00000
 800f26c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f26e:	1c51      	adds	r1, r2, #1
 800f270:	9119      	str	r1, [sp, #100]	@ 0x64
 800f272:	7852      	ldrb	r2, [r2, #1]
 800f274:	2a30      	cmp	r2, #48	@ 0x30
 800f276:	d0f9      	beq.n	800f26c <_strtod_l+0x29c>
 800f278:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f27c:	2908      	cmp	r1, #8
 800f27e:	f63f af75 	bhi.w	800f16c <_strtod_l+0x19c>
 800f282:	3a30      	subs	r2, #48	@ 0x30
 800f284:	9209      	str	r2, [sp, #36]	@ 0x24
 800f286:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f288:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f28a:	f04f 080a 	mov.w	r8, #10
 800f28e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f290:	1c56      	adds	r6, r2, #1
 800f292:	9619      	str	r6, [sp, #100]	@ 0x64
 800f294:	7852      	ldrb	r2, [r2, #1]
 800f296:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f29a:	f1be 0f09 	cmp.w	lr, #9
 800f29e:	d939      	bls.n	800f314 <_strtod_l+0x344>
 800f2a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f2a2:	1a76      	subs	r6, r6, r1
 800f2a4:	2e08      	cmp	r6, #8
 800f2a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f2aa:	dc03      	bgt.n	800f2b4 <_strtod_l+0x2e4>
 800f2ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f2ae:	4588      	cmp	r8, r1
 800f2b0:	bfa8      	it	ge
 800f2b2:	4688      	movge	r8, r1
 800f2b4:	f1bc 0f00 	cmp.w	ip, #0
 800f2b8:	d001      	beq.n	800f2be <_strtod_l+0x2ee>
 800f2ba:	f1c8 0800 	rsb	r8, r8, #0
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	d14e      	bne.n	800f360 <_strtod_l+0x390>
 800f2c2:	9908      	ldr	r1, [sp, #32]
 800f2c4:	4308      	orrs	r0, r1
 800f2c6:	f47f aebc 	bne.w	800f042 <_strtod_l+0x72>
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f47f aed4 	bne.w	800f078 <_strtod_l+0xa8>
 800f2d0:	2a69      	cmp	r2, #105	@ 0x69
 800f2d2:	d028      	beq.n	800f326 <_strtod_l+0x356>
 800f2d4:	dc25      	bgt.n	800f322 <_strtod_l+0x352>
 800f2d6:	2a49      	cmp	r2, #73	@ 0x49
 800f2d8:	d025      	beq.n	800f326 <_strtod_l+0x356>
 800f2da:	2a4e      	cmp	r2, #78	@ 0x4e
 800f2dc:	f47f aecc 	bne.w	800f078 <_strtod_l+0xa8>
 800f2e0:	499a      	ldr	r1, [pc, #616]	@ (800f54c <_strtod_l+0x57c>)
 800f2e2:	a819      	add	r0, sp, #100	@ 0x64
 800f2e4:	f001 fd4c 	bl	8010d80 <__match>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	f43f aec5 	beq.w	800f078 <_strtod_l+0xa8>
 800f2ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b28      	cmp	r3, #40	@ 0x28
 800f2f4:	d12e      	bne.n	800f354 <_strtod_l+0x384>
 800f2f6:	4996      	ldr	r1, [pc, #600]	@ (800f550 <_strtod_l+0x580>)
 800f2f8:	aa1c      	add	r2, sp, #112	@ 0x70
 800f2fa:	a819      	add	r0, sp, #100	@ 0x64
 800f2fc:	f001 fd54 	bl	8010da8 <__hexnan>
 800f300:	2805      	cmp	r0, #5
 800f302:	d127      	bne.n	800f354 <_strtod_l+0x384>
 800f304:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f306:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f30a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f30e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f312:	e696      	b.n	800f042 <_strtod_l+0x72>
 800f314:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f316:	fb08 2101 	mla	r1, r8, r1, r2
 800f31a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f31e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f320:	e7b5      	b.n	800f28e <_strtod_l+0x2be>
 800f322:	2a6e      	cmp	r2, #110	@ 0x6e
 800f324:	e7da      	b.n	800f2dc <_strtod_l+0x30c>
 800f326:	498b      	ldr	r1, [pc, #556]	@ (800f554 <_strtod_l+0x584>)
 800f328:	a819      	add	r0, sp, #100	@ 0x64
 800f32a:	f001 fd29 	bl	8010d80 <__match>
 800f32e:	2800      	cmp	r0, #0
 800f330:	f43f aea2 	beq.w	800f078 <_strtod_l+0xa8>
 800f334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f336:	4988      	ldr	r1, [pc, #544]	@ (800f558 <_strtod_l+0x588>)
 800f338:	3b01      	subs	r3, #1
 800f33a:	a819      	add	r0, sp, #100	@ 0x64
 800f33c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f33e:	f001 fd1f 	bl	8010d80 <__match>
 800f342:	b910      	cbnz	r0, 800f34a <_strtod_l+0x37a>
 800f344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f346:	3301      	adds	r3, #1
 800f348:	9319      	str	r3, [sp, #100]	@ 0x64
 800f34a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800f568 <_strtod_l+0x598>
 800f34e:	f04f 0a00 	mov.w	sl, #0
 800f352:	e676      	b.n	800f042 <_strtod_l+0x72>
 800f354:	4881      	ldr	r0, [pc, #516]	@ (800f55c <_strtod_l+0x58c>)
 800f356:	f001 fa63 	bl	8010820 <nan>
 800f35a:	ec5b ab10 	vmov	sl, fp, d0
 800f35e:	e670      	b.n	800f042 <_strtod_l+0x72>
 800f360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f362:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800f364:	eba8 0303 	sub.w	r3, r8, r3
 800f368:	f1b9 0f00 	cmp.w	r9, #0
 800f36c:	bf08      	it	eq
 800f36e:	46a9      	moveq	r9, r5
 800f370:	2d10      	cmp	r5, #16
 800f372:	9309      	str	r3, [sp, #36]	@ 0x24
 800f374:	462c      	mov	r4, r5
 800f376:	bfa8      	it	ge
 800f378:	2410      	movge	r4, #16
 800f37a:	f7f1 f8e3 	bl	8000544 <__aeabi_ui2d>
 800f37e:	2d09      	cmp	r5, #9
 800f380:	4682      	mov	sl, r0
 800f382:	468b      	mov	fp, r1
 800f384:	dc13      	bgt.n	800f3ae <_strtod_l+0x3de>
 800f386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f43f ae5a 	beq.w	800f042 <_strtod_l+0x72>
 800f38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f390:	dd78      	ble.n	800f484 <_strtod_l+0x4b4>
 800f392:	2b16      	cmp	r3, #22
 800f394:	dc5f      	bgt.n	800f456 <_strtod_l+0x486>
 800f396:	4972      	ldr	r1, [pc, #456]	@ (800f560 <_strtod_l+0x590>)
 800f398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f39c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3a0:	4652      	mov	r2, sl
 800f3a2:	465b      	mov	r3, fp
 800f3a4:	f7f1 f948 	bl	8000638 <__aeabi_dmul>
 800f3a8:	4682      	mov	sl, r0
 800f3aa:	468b      	mov	fp, r1
 800f3ac:	e649      	b.n	800f042 <_strtod_l+0x72>
 800f3ae:	4b6c      	ldr	r3, [pc, #432]	@ (800f560 <_strtod_l+0x590>)
 800f3b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f3b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f3b8:	f7f1 f93e 	bl	8000638 <__aeabi_dmul>
 800f3bc:	4682      	mov	sl, r0
 800f3be:	4638      	mov	r0, r7
 800f3c0:	468b      	mov	fp, r1
 800f3c2:	f7f1 f8bf 	bl	8000544 <__aeabi_ui2d>
 800f3c6:	4602      	mov	r2, r0
 800f3c8:	460b      	mov	r3, r1
 800f3ca:	4650      	mov	r0, sl
 800f3cc:	4659      	mov	r1, fp
 800f3ce:	f7f0 ff7d 	bl	80002cc <__adddf3>
 800f3d2:	2d0f      	cmp	r5, #15
 800f3d4:	4682      	mov	sl, r0
 800f3d6:	468b      	mov	fp, r1
 800f3d8:	ddd5      	ble.n	800f386 <_strtod_l+0x3b6>
 800f3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3dc:	1b2c      	subs	r4, r5, r4
 800f3de:	441c      	add	r4, r3
 800f3e0:	2c00      	cmp	r4, #0
 800f3e2:	f340 8093 	ble.w	800f50c <_strtod_l+0x53c>
 800f3e6:	f014 030f 	ands.w	r3, r4, #15
 800f3ea:	d00a      	beq.n	800f402 <_strtod_l+0x432>
 800f3ec:	495c      	ldr	r1, [pc, #368]	@ (800f560 <_strtod_l+0x590>)
 800f3ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3f2:	4652      	mov	r2, sl
 800f3f4:	465b      	mov	r3, fp
 800f3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3fa:	f7f1 f91d 	bl	8000638 <__aeabi_dmul>
 800f3fe:	4682      	mov	sl, r0
 800f400:	468b      	mov	fp, r1
 800f402:	f034 040f 	bics.w	r4, r4, #15
 800f406:	d073      	beq.n	800f4f0 <_strtod_l+0x520>
 800f408:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f40c:	dd49      	ble.n	800f4a2 <_strtod_l+0x4d2>
 800f40e:	2400      	movs	r4, #0
 800f410:	46a0      	mov	r8, r4
 800f412:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f414:	46a1      	mov	r9, r4
 800f416:	9a05      	ldr	r2, [sp, #20]
 800f418:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800f568 <_strtod_l+0x598>
 800f41c:	2322      	movs	r3, #34	@ 0x22
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	f04f 0a00 	mov.w	sl, #0
 800f424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f426:	2b00      	cmp	r3, #0
 800f428:	f43f ae0b 	beq.w	800f042 <_strtod_l+0x72>
 800f42c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f42e:	9805      	ldr	r0, [sp, #20]
 800f430:	f7ff f944 	bl	800e6bc <_Bfree>
 800f434:	9805      	ldr	r0, [sp, #20]
 800f436:	4649      	mov	r1, r9
 800f438:	f7ff f940 	bl	800e6bc <_Bfree>
 800f43c:	9805      	ldr	r0, [sp, #20]
 800f43e:	4641      	mov	r1, r8
 800f440:	f7ff f93c 	bl	800e6bc <_Bfree>
 800f444:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f446:	9805      	ldr	r0, [sp, #20]
 800f448:	f7ff f938 	bl	800e6bc <_Bfree>
 800f44c:	9805      	ldr	r0, [sp, #20]
 800f44e:	4621      	mov	r1, r4
 800f450:	f7ff f934 	bl	800e6bc <_Bfree>
 800f454:	e5f5      	b.n	800f042 <_strtod_l+0x72>
 800f456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f458:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800f45c:	4293      	cmp	r3, r2
 800f45e:	dbbc      	blt.n	800f3da <_strtod_l+0x40a>
 800f460:	4c3f      	ldr	r4, [pc, #252]	@ (800f560 <_strtod_l+0x590>)
 800f462:	f1c5 050f 	rsb	r5, r5, #15
 800f466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f46a:	4652      	mov	r2, sl
 800f46c:	465b      	mov	r3, fp
 800f46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f472:	f7f1 f8e1 	bl	8000638 <__aeabi_dmul>
 800f476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f478:	1b5d      	subs	r5, r3, r5
 800f47a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f47e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f482:	e78f      	b.n	800f3a4 <_strtod_l+0x3d4>
 800f484:	3316      	adds	r3, #22
 800f486:	dba8      	blt.n	800f3da <_strtod_l+0x40a>
 800f488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f48a:	eba3 0808 	sub.w	r8, r3, r8
 800f48e:	4b34      	ldr	r3, [pc, #208]	@ (800f560 <_strtod_l+0x590>)
 800f490:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800f494:	e9d8 2300 	ldrd	r2, r3, [r8]
 800f498:	4650      	mov	r0, sl
 800f49a:	4659      	mov	r1, fp
 800f49c:	f7f1 f9f6 	bl	800088c <__aeabi_ddiv>
 800f4a0:	e782      	b.n	800f3a8 <_strtod_l+0x3d8>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	4f2f      	ldr	r7, [pc, #188]	@ (800f564 <_strtod_l+0x594>)
 800f4a6:	1124      	asrs	r4, r4, #4
 800f4a8:	4650      	mov	r0, sl
 800f4aa:	4659      	mov	r1, fp
 800f4ac:	461e      	mov	r6, r3
 800f4ae:	2c01      	cmp	r4, #1
 800f4b0:	dc21      	bgt.n	800f4f6 <_strtod_l+0x526>
 800f4b2:	b10b      	cbz	r3, 800f4b8 <_strtod_l+0x4e8>
 800f4b4:	4682      	mov	sl, r0
 800f4b6:	468b      	mov	fp, r1
 800f4b8:	492a      	ldr	r1, [pc, #168]	@ (800f564 <_strtod_l+0x594>)
 800f4ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800f4be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800f4c2:	4652      	mov	r2, sl
 800f4c4:	465b      	mov	r3, fp
 800f4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ca:	f7f1 f8b5 	bl	8000638 <__aeabi_dmul>
 800f4ce:	4b26      	ldr	r3, [pc, #152]	@ (800f568 <_strtod_l+0x598>)
 800f4d0:	460a      	mov	r2, r1
 800f4d2:	400b      	ands	r3, r1
 800f4d4:	4925      	ldr	r1, [pc, #148]	@ (800f56c <_strtod_l+0x59c>)
 800f4d6:	428b      	cmp	r3, r1
 800f4d8:	4682      	mov	sl, r0
 800f4da:	d898      	bhi.n	800f40e <_strtod_l+0x43e>
 800f4dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800f4e0:	428b      	cmp	r3, r1
 800f4e2:	bf86      	itte	hi
 800f4e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800f570 <_strtod_l+0x5a0>
 800f4e8:	f04f 3aff 	movhi.w	sl, #4294967295
 800f4ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	9308      	str	r3, [sp, #32]
 800f4f4:	e076      	b.n	800f5e4 <_strtod_l+0x614>
 800f4f6:	07e2      	lsls	r2, r4, #31
 800f4f8:	d504      	bpl.n	800f504 <_strtod_l+0x534>
 800f4fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4fe:	f7f1 f89b 	bl	8000638 <__aeabi_dmul>
 800f502:	2301      	movs	r3, #1
 800f504:	3601      	adds	r6, #1
 800f506:	1064      	asrs	r4, r4, #1
 800f508:	3708      	adds	r7, #8
 800f50a:	e7d0      	b.n	800f4ae <_strtod_l+0x4de>
 800f50c:	d0f0      	beq.n	800f4f0 <_strtod_l+0x520>
 800f50e:	4264      	negs	r4, r4
 800f510:	f014 020f 	ands.w	r2, r4, #15
 800f514:	d00a      	beq.n	800f52c <_strtod_l+0x55c>
 800f516:	4b12      	ldr	r3, [pc, #72]	@ (800f560 <_strtod_l+0x590>)
 800f518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f51c:	4650      	mov	r0, sl
 800f51e:	4659      	mov	r1, fp
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	f7f1 f9b2 	bl	800088c <__aeabi_ddiv>
 800f528:	4682      	mov	sl, r0
 800f52a:	468b      	mov	fp, r1
 800f52c:	1124      	asrs	r4, r4, #4
 800f52e:	d0df      	beq.n	800f4f0 <_strtod_l+0x520>
 800f530:	2c1f      	cmp	r4, #31
 800f532:	dd1f      	ble.n	800f574 <_strtod_l+0x5a4>
 800f534:	2400      	movs	r4, #0
 800f536:	46a0      	mov	r8, r4
 800f538:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f53a:	46a1      	mov	r9, r4
 800f53c:	9a05      	ldr	r2, [sp, #20]
 800f53e:	2322      	movs	r3, #34	@ 0x22
 800f540:	f04f 0a00 	mov.w	sl, #0
 800f544:	f04f 0b00 	mov.w	fp, #0
 800f548:	6013      	str	r3, [r2, #0]
 800f54a:	e76b      	b.n	800f424 <_strtod_l+0x454>
 800f54c:	0801345d 	.word	0x0801345d
 800f550:	08013740 	.word	0x08013740
 800f554:	08013455 	.word	0x08013455
 800f558:	0801348a 	.word	0x0801348a
 800f55c:	080135de 	.word	0x080135de
 800f560:	08013678 	.word	0x08013678
 800f564:	08013650 	.word	0x08013650
 800f568:	7ff00000 	.word	0x7ff00000
 800f56c:	7ca00000 	.word	0x7ca00000
 800f570:	7fefffff 	.word	0x7fefffff
 800f574:	f014 0310 	ands.w	r3, r4, #16
 800f578:	bf18      	it	ne
 800f57a:	236a      	movne	r3, #106	@ 0x6a
 800f57c:	4ea9      	ldr	r6, [pc, #676]	@ (800f824 <_strtod_l+0x854>)
 800f57e:	9308      	str	r3, [sp, #32]
 800f580:	4650      	mov	r0, sl
 800f582:	4659      	mov	r1, fp
 800f584:	2300      	movs	r3, #0
 800f586:	07e7      	lsls	r7, r4, #31
 800f588:	d504      	bpl.n	800f594 <_strtod_l+0x5c4>
 800f58a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f58e:	f7f1 f853 	bl	8000638 <__aeabi_dmul>
 800f592:	2301      	movs	r3, #1
 800f594:	1064      	asrs	r4, r4, #1
 800f596:	f106 0608 	add.w	r6, r6, #8
 800f59a:	d1f4      	bne.n	800f586 <_strtod_l+0x5b6>
 800f59c:	b10b      	cbz	r3, 800f5a2 <_strtod_l+0x5d2>
 800f59e:	4682      	mov	sl, r0
 800f5a0:	468b      	mov	fp, r1
 800f5a2:	9b08      	ldr	r3, [sp, #32]
 800f5a4:	b1b3      	cbz	r3, 800f5d4 <_strtod_l+0x604>
 800f5a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f5aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	4659      	mov	r1, fp
 800f5b2:	dd0f      	ble.n	800f5d4 <_strtod_l+0x604>
 800f5b4:	2b1f      	cmp	r3, #31
 800f5b6:	dd56      	ble.n	800f666 <_strtod_l+0x696>
 800f5b8:	2b34      	cmp	r3, #52	@ 0x34
 800f5ba:	bfde      	ittt	le
 800f5bc:	f04f 33ff 	movle.w	r3, #4294967295
 800f5c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f5c4:	4093      	lslle	r3, r2
 800f5c6:	f04f 0a00 	mov.w	sl, #0
 800f5ca:	bfcc      	ite	gt
 800f5cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f5d0:	ea03 0b01 	andle.w	fp, r3, r1
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	4650      	mov	r0, sl
 800f5da:	4659      	mov	r1, fp
 800f5dc:	f7f1 fa94 	bl	8000b08 <__aeabi_dcmpeq>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d1a7      	bne.n	800f534 <_strtod_l+0x564>
 800f5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5e6:	9300      	str	r3, [sp, #0]
 800f5e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f5ea:	9805      	ldr	r0, [sp, #20]
 800f5ec:	462b      	mov	r3, r5
 800f5ee:	464a      	mov	r2, r9
 800f5f0:	f7ff f8cc 	bl	800e78c <__s2b>
 800f5f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	f43f af09 	beq.w	800f40e <_strtod_l+0x43e>
 800f5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f600:	2a00      	cmp	r2, #0
 800f602:	eba3 0308 	sub.w	r3, r3, r8
 800f606:	bfa8      	it	ge
 800f608:	2300      	movge	r3, #0
 800f60a:	9312      	str	r3, [sp, #72]	@ 0x48
 800f60c:	2400      	movs	r4, #0
 800f60e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f612:	9316      	str	r3, [sp, #88]	@ 0x58
 800f614:	46a0      	mov	r8, r4
 800f616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f618:	9805      	ldr	r0, [sp, #20]
 800f61a:	6859      	ldr	r1, [r3, #4]
 800f61c:	f7ff f80e 	bl	800e63c <_Balloc>
 800f620:	4681      	mov	r9, r0
 800f622:	2800      	cmp	r0, #0
 800f624:	f43f aef7 	beq.w	800f416 <_strtod_l+0x446>
 800f628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f62a:	691a      	ldr	r2, [r3, #16]
 800f62c:	3202      	adds	r2, #2
 800f62e:	f103 010c 	add.w	r1, r3, #12
 800f632:	0092      	lsls	r2, r2, #2
 800f634:	300c      	adds	r0, #12
 800f636:	f7fe f948 	bl	800d8ca <memcpy>
 800f63a:	ec4b ab10 	vmov	d0, sl, fp
 800f63e:	9805      	ldr	r0, [sp, #20]
 800f640:	aa1c      	add	r2, sp, #112	@ 0x70
 800f642:	a91b      	add	r1, sp, #108	@ 0x6c
 800f644:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f648:	f7ff fbd4 	bl	800edf4 <__d2b>
 800f64c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f64e:	2800      	cmp	r0, #0
 800f650:	f43f aee1 	beq.w	800f416 <_strtod_l+0x446>
 800f654:	9805      	ldr	r0, [sp, #20]
 800f656:	2101      	movs	r1, #1
 800f658:	f7ff f92e 	bl	800e8b8 <__i2b>
 800f65c:	4680      	mov	r8, r0
 800f65e:	b948      	cbnz	r0, 800f674 <_strtod_l+0x6a4>
 800f660:	f04f 0800 	mov.w	r8, #0
 800f664:	e6d7      	b.n	800f416 <_strtod_l+0x446>
 800f666:	f04f 32ff 	mov.w	r2, #4294967295
 800f66a:	fa02 f303 	lsl.w	r3, r2, r3
 800f66e:	ea03 0a0a 	and.w	sl, r3, sl
 800f672:	e7af      	b.n	800f5d4 <_strtod_l+0x604>
 800f674:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f676:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f678:	2d00      	cmp	r5, #0
 800f67a:	bfab      	itete	ge
 800f67c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f67e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f680:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f682:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f684:	bfac      	ite	ge
 800f686:	18ef      	addge	r7, r5, r3
 800f688:	1b5e      	sublt	r6, r3, r5
 800f68a:	9b08      	ldr	r3, [sp, #32]
 800f68c:	1aed      	subs	r5, r5, r3
 800f68e:	4415      	add	r5, r2
 800f690:	4b65      	ldr	r3, [pc, #404]	@ (800f828 <_strtod_l+0x858>)
 800f692:	3d01      	subs	r5, #1
 800f694:	429d      	cmp	r5, r3
 800f696:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f69a:	da50      	bge.n	800f73e <_strtod_l+0x76e>
 800f69c:	1b5b      	subs	r3, r3, r5
 800f69e:	2b1f      	cmp	r3, #31
 800f6a0:	eba2 0203 	sub.w	r2, r2, r3
 800f6a4:	f04f 0101 	mov.w	r1, #1
 800f6a8:	dc3d      	bgt.n	800f726 <_strtod_l+0x756>
 800f6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f6ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	9310      	str	r3, [sp, #64]	@ 0x40
 800f6b4:	18bd      	adds	r5, r7, r2
 800f6b6:	9b08      	ldr	r3, [sp, #32]
 800f6b8:	42af      	cmp	r7, r5
 800f6ba:	4416      	add	r6, r2
 800f6bc:	441e      	add	r6, r3
 800f6be:	463b      	mov	r3, r7
 800f6c0:	bfa8      	it	ge
 800f6c2:	462b      	movge	r3, r5
 800f6c4:	42b3      	cmp	r3, r6
 800f6c6:	bfa8      	it	ge
 800f6c8:	4633      	movge	r3, r6
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	bfc2      	ittt	gt
 800f6ce:	1aed      	subgt	r5, r5, r3
 800f6d0:	1af6      	subgt	r6, r6, r3
 800f6d2:	1aff      	subgt	r7, r7, r3
 800f6d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	dd16      	ble.n	800f708 <_strtod_l+0x738>
 800f6da:	4641      	mov	r1, r8
 800f6dc:	9805      	ldr	r0, [sp, #20]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	f7ff f9a2 	bl	800ea28 <__pow5mult>
 800f6e4:	4680      	mov	r8, r0
 800f6e6:	2800      	cmp	r0, #0
 800f6e8:	d0ba      	beq.n	800f660 <_strtod_l+0x690>
 800f6ea:	4601      	mov	r1, r0
 800f6ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f6ee:	9805      	ldr	r0, [sp, #20]
 800f6f0:	f7ff f8f8 	bl	800e8e4 <__multiply>
 800f6f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	f43f ae8d 	beq.w	800f416 <_strtod_l+0x446>
 800f6fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f6fe:	9805      	ldr	r0, [sp, #20]
 800f700:	f7fe ffdc 	bl	800e6bc <_Bfree>
 800f704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f706:	931a      	str	r3, [sp, #104]	@ 0x68
 800f708:	2d00      	cmp	r5, #0
 800f70a:	dc1d      	bgt.n	800f748 <_strtod_l+0x778>
 800f70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f70e:	2b00      	cmp	r3, #0
 800f710:	dd23      	ble.n	800f75a <_strtod_l+0x78a>
 800f712:	4649      	mov	r1, r9
 800f714:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f716:	9805      	ldr	r0, [sp, #20]
 800f718:	f7ff f986 	bl	800ea28 <__pow5mult>
 800f71c:	4681      	mov	r9, r0
 800f71e:	b9e0      	cbnz	r0, 800f75a <_strtod_l+0x78a>
 800f720:	f04f 0900 	mov.w	r9, #0
 800f724:	e677      	b.n	800f416 <_strtod_l+0x446>
 800f726:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f72a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f72e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f732:	35e2      	adds	r5, #226	@ 0xe2
 800f734:	fa01 f305 	lsl.w	r3, r1, r5
 800f738:	9310      	str	r3, [sp, #64]	@ 0x40
 800f73a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f73c:	e7ba      	b.n	800f6b4 <_strtod_l+0x6e4>
 800f73e:	2300      	movs	r3, #0
 800f740:	9310      	str	r3, [sp, #64]	@ 0x40
 800f742:	2301      	movs	r3, #1
 800f744:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f746:	e7b5      	b.n	800f6b4 <_strtod_l+0x6e4>
 800f748:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f74a:	9805      	ldr	r0, [sp, #20]
 800f74c:	462a      	mov	r2, r5
 800f74e:	f7ff f9c5 	bl	800eadc <__lshift>
 800f752:	901a      	str	r0, [sp, #104]	@ 0x68
 800f754:	2800      	cmp	r0, #0
 800f756:	d1d9      	bne.n	800f70c <_strtod_l+0x73c>
 800f758:	e65d      	b.n	800f416 <_strtod_l+0x446>
 800f75a:	2e00      	cmp	r6, #0
 800f75c:	dd07      	ble.n	800f76e <_strtod_l+0x79e>
 800f75e:	4649      	mov	r1, r9
 800f760:	9805      	ldr	r0, [sp, #20]
 800f762:	4632      	mov	r2, r6
 800f764:	f7ff f9ba 	bl	800eadc <__lshift>
 800f768:	4681      	mov	r9, r0
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d0d8      	beq.n	800f720 <_strtod_l+0x750>
 800f76e:	2f00      	cmp	r7, #0
 800f770:	dd08      	ble.n	800f784 <_strtod_l+0x7b4>
 800f772:	4641      	mov	r1, r8
 800f774:	9805      	ldr	r0, [sp, #20]
 800f776:	463a      	mov	r2, r7
 800f778:	f7ff f9b0 	bl	800eadc <__lshift>
 800f77c:	4680      	mov	r8, r0
 800f77e:	2800      	cmp	r0, #0
 800f780:	f43f ae49 	beq.w	800f416 <_strtod_l+0x446>
 800f784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f786:	9805      	ldr	r0, [sp, #20]
 800f788:	464a      	mov	r2, r9
 800f78a:	f7ff fa2f 	bl	800ebec <__mdiff>
 800f78e:	4604      	mov	r4, r0
 800f790:	2800      	cmp	r0, #0
 800f792:	f43f ae40 	beq.w	800f416 <_strtod_l+0x446>
 800f796:	68c3      	ldr	r3, [r0, #12]
 800f798:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f79a:	2300      	movs	r3, #0
 800f79c:	60c3      	str	r3, [r0, #12]
 800f79e:	4641      	mov	r1, r8
 800f7a0:	f7ff fa08 	bl	800ebb4 <__mcmp>
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	da45      	bge.n	800f834 <_strtod_l+0x864>
 800f7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7aa:	ea53 030a 	orrs.w	r3, r3, sl
 800f7ae:	d16b      	bne.n	800f888 <_strtod_l+0x8b8>
 800f7b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d167      	bne.n	800f888 <_strtod_l+0x8b8>
 800f7b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f7bc:	0d1b      	lsrs	r3, r3, #20
 800f7be:	051b      	lsls	r3, r3, #20
 800f7c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f7c4:	d960      	bls.n	800f888 <_strtod_l+0x8b8>
 800f7c6:	6963      	ldr	r3, [r4, #20]
 800f7c8:	b913      	cbnz	r3, 800f7d0 <_strtod_l+0x800>
 800f7ca:	6923      	ldr	r3, [r4, #16]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	dd5b      	ble.n	800f888 <_strtod_l+0x8b8>
 800f7d0:	4621      	mov	r1, r4
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	9805      	ldr	r0, [sp, #20]
 800f7d6:	f7ff f981 	bl	800eadc <__lshift>
 800f7da:	4641      	mov	r1, r8
 800f7dc:	4604      	mov	r4, r0
 800f7de:	f7ff f9e9 	bl	800ebb4 <__mcmp>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	dd50      	ble.n	800f888 <_strtod_l+0x8b8>
 800f7e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f7ea:	9a08      	ldr	r2, [sp, #32]
 800f7ec:	0d1b      	lsrs	r3, r3, #20
 800f7ee:	051b      	lsls	r3, r3, #20
 800f7f0:	2a00      	cmp	r2, #0
 800f7f2:	d06a      	beq.n	800f8ca <_strtod_l+0x8fa>
 800f7f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f7f8:	d867      	bhi.n	800f8ca <_strtod_l+0x8fa>
 800f7fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f7fe:	f67f ae9d 	bls.w	800f53c <_strtod_l+0x56c>
 800f802:	4b0a      	ldr	r3, [pc, #40]	@ (800f82c <_strtod_l+0x85c>)
 800f804:	4650      	mov	r0, sl
 800f806:	4659      	mov	r1, fp
 800f808:	2200      	movs	r2, #0
 800f80a:	f7f0 ff15 	bl	8000638 <__aeabi_dmul>
 800f80e:	4b08      	ldr	r3, [pc, #32]	@ (800f830 <_strtod_l+0x860>)
 800f810:	400b      	ands	r3, r1
 800f812:	4682      	mov	sl, r0
 800f814:	468b      	mov	fp, r1
 800f816:	2b00      	cmp	r3, #0
 800f818:	f47f ae08 	bne.w	800f42c <_strtod_l+0x45c>
 800f81c:	9a05      	ldr	r2, [sp, #20]
 800f81e:	2322      	movs	r3, #34	@ 0x22
 800f820:	6013      	str	r3, [r2, #0]
 800f822:	e603      	b.n	800f42c <_strtod_l+0x45c>
 800f824:	08013768 	.word	0x08013768
 800f828:	fffffc02 	.word	0xfffffc02
 800f82c:	39500000 	.word	0x39500000
 800f830:	7ff00000 	.word	0x7ff00000
 800f834:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f838:	d165      	bne.n	800f906 <_strtod_l+0x936>
 800f83a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f83c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f840:	b35a      	cbz	r2, 800f89a <_strtod_l+0x8ca>
 800f842:	4a9f      	ldr	r2, [pc, #636]	@ (800fac0 <_strtod_l+0xaf0>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d12b      	bne.n	800f8a0 <_strtod_l+0x8d0>
 800f848:	9b08      	ldr	r3, [sp, #32]
 800f84a:	4651      	mov	r1, sl
 800f84c:	b303      	cbz	r3, 800f890 <_strtod_l+0x8c0>
 800f84e:	4b9d      	ldr	r3, [pc, #628]	@ (800fac4 <_strtod_l+0xaf4>)
 800f850:	465a      	mov	r2, fp
 800f852:	4013      	ands	r3, r2
 800f854:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f858:	f04f 32ff 	mov.w	r2, #4294967295
 800f85c:	d81b      	bhi.n	800f896 <_strtod_l+0x8c6>
 800f85e:	0d1b      	lsrs	r3, r3, #20
 800f860:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f864:	fa02 f303 	lsl.w	r3, r2, r3
 800f868:	4299      	cmp	r1, r3
 800f86a:	d119      	bne.n	800f8a0 <_strtod_l+0x8d0>
 800f86c:	4b96      	ldr	r3, [pc, #600]	@ (800fac8 <_strtod_l+0xaf8>)
 800f86e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f870:	429a      	cmp	r2, r3
 800f872:	d102      	bne.n	800f87a <_strtod_l+0x8aa>
 800f874:	3101      	adds	r1, #1
 800f876:	f43f adce 	beq.w	800f416 <_strtod_l+0x446>
 800f87a:	4b92      	ldr	r3, [pc, #584]	@ (800fac4 <_strtod_l+0xaf4>)
 800f87c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f87e:	401a      	ands	r2, r3
 800f880:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f884:	f04f 0a00 	mov.w	sl, #0
 800f888:	9b08      	ldr	r3, [sp, #32]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1b9      	bne.n	800f802 <_strtod_l+0x832>
 800f88e:	e5cd      	b.n	800f42c <_strtod_l+0x45c>
 800f890:	f04f 33ff 	mov.w	r3, #4294967295
 800f894:	e7e8      	b.n	800f868 <_strtod_l+0x898>
 800f896:	4613      	mov	r3, r2
 800f898:	e7e6      	b.n	800f868 <_strtod_l+0x898>
 800f89a:	ea53 030a 	orrs.w	r3, r3, sl
 800f89e:	d0a2      	beq.n	800f7e6 <_strtod_l+0x816>
 800f8a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f8a2:	b1db      	cbz	r3, 800f8dc <_strtod_l+0x90c>
 800f8a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f8a6:	4213      	tst	r3, r2
 800f8a8:	d0ee      	beq.n	800f888 <_strtod_l+0x8b8>
 800f8aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8ac:	9a08      	ldr	r2, [sp, #32]
 800f8ae:	4650      	mov	r0, sl
 800f8b0:	4659      	mov	r1, fp
 800f8b2:	b1bb      	cbz	r3, 800f8e4 <_strtod_l+0x914>
 800f8b4:	f7ff fb6c 	bl	800ef90 <sulp>
 800f8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8bc:	ec53 2b10 	vmov	r2, r3, d0
 800f8c0:	f7f0 fd04 	bl	80002cc <__adddf3>
 800f8c4:	4682      	mov	sl, r0
 800f8c6:	468b      	mov	fp, r1
 800f8c8:	e7de      	b.n	800f888 <_strtod_l+0x8b8>
 800f8ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f8ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f8d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f8d6:	f04f 3aff 	mov.w	sl, #4294967295
 800f8da:	e7d5      	b.n	800f888 <_strtod_l+0x8b8>
 800f8dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f8de:	ea13 0f0a 	tst.w	r3, sl
 800f8e2:	e7e1      	b.n	800f8a8 <_strtod_l+0x8d8>
 800f8e4:	f7ff fb54 	bl	800ef90 <sulp>
 800f8e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8ec:	ec53 2b10 	vmov	r2, r3, d0
 800f8f0:	f7f0 fcea 	bl	80002c8 <__aeabi_dsub>
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4682      	mov	sl, r0
 800f8fa:	468b      	mov	fp, r1
 800f8fc:	f7f1 f904 	bl	8000b08 <__aeabi_dcmpeq>
 800f900:	2800      	cmp	r0, #0
 800f902:	d0c1      	beq.n	800f888 <_strtod_l+0x8b8>
 800f904:	e61a      	b.n	800f53c <_strtod_l+0x56c>
 800f906:	4641      	mov	r1, r8
 800f908:	4620      	mov	r0, r4
 800f90a:	f7ff facb 	bl	800eea4 <__ratio>
 800f90e:	ec57 6b10 	vmov	r6, r7, d0
 800f912:	2200      	movs	r2, #0
 800f914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f918:	4630      	mov	r0, r6
 800f91a:	4639      	mov	r1, r7
 800f91c:	f7f1 f908 	bl	8000b30 <__aeabi_dcmple>
 800f920:	2800      	cmp	r0, #0
 800f922:	d06f      	beq.n	800fa04 <_strtod_l+0xa34>
 800f924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f926:	2b00      	cmp	r3, #0
 800f928:	d17a      	bne.n	800fa20 <_strtod_l+0xa50>
 800f92a:	f1ba 0f00 	cmp.w	sl, #0
 800f92e:	d158      	bne.n	800f9e2 <_strtod_l+0xa12>
 800f930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f936:	2b00      	cmp	r3, #0
 800f938:	d15a      	bne.n	800f9f0 <_strtod_l+0xa20>
 800f93a:	4b64      	ldr	r3, [pc, #400]	@ (800facc <_strtod_l+0xafc>)
 800f93c:	2200      	movs	r2, #0
 800f93e:	4630      	mov	r0, r6
 800f940:	4639      	mov	r1, r7
 800f942:	f7f1 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 800f946:	2800      	cmp	r0, #0
 800f948:	d159      	bne.n	800f9fe <_strtod_l+0xa2e>
 800f94a:	4630      	mov	r0, r6
 800f94c:	4639      	mov	r1, r7
 800f94e:	4b60      	ldr	r3, [pc, #384]	@ (800fad0 <_strtod_l+0xb00>)
 800f950:	2200      	movs	r2, #0
 800f952:	f7f0 fe71 	bl	8000638 <__aeabi_dmul>
 800f956:	4606      	mov	r6, r0
 800f958:	460f      	mov	r7, r1
 800f95a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f95e:	9606      	str	r6, [sp, #24]
 800f960:	9307      	str	r3, [sp, #28]
 800f962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f966:	4d57      	ldr	r5, [pc, #348]	@ (800fac4 <_strtod_l+0xaf4>)
 800f968:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f96e:	401d      	ands	r5, r3
 800f970:	4b58      	ldr	r3, [pc, #352]	@ (800fad4 <_strtod_l+0xb04>)
 800f972:	429d      	cmp	r5, r3
 800f974:	f040 80b2 	bne.w	800fadc <_strtod_l+0xb0c>
 800f978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f97a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f97e:	ec4b ab10 	vmov	d0, sl, fp
 800f982:	f7ff f9c7 	bl	800ed14 <__ulp>
 800f986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f98a:	ec51 0b10 	vmov	r0, r1, d0
 800f98e:	f7f0 fe53 	bl	8000638 <__aeabi_dmul>
 800f992:	4652      	mov	r2, sl
 800f994:	465b      	mov	r3, fp
 800f996:	f7f0 fc99 	bl	80002cc <__adddf3>
 800f99a:	460b      	mov	r3, r1
 800f99c:	4949      	ldr	r1, [pc, #292]	@ (800fac4 <_strtod_l+0xaf4>)
 800f99e:	4a4e      	ldr	r2, [pc, #312]	@ (800fad8 <_strtod_l+0xb08>)
 800f9a0:	4019      	ands	r1, r3
 800f9a2:	4291      	cmp	r1, r2
 800f9a4:	4682      	mov	sl, r0
 800f9a6:	d942      	bls.n	800fa2e <_strtod_l+0xa5e>
 800f9a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f9aa:	4b47      	ldr	r3, [pc, #284]	@ (800fac8 <_strtod_l+0xaf8>)
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d103      	bne.n	800f9b8 <_strtod_l+0x9e8>
 800f9b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	f43f ad2f 	beq.w	800f416 <_strtod_l+0x446>
 800f9b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800fac8 <_strtod_l+0xaf8>
 800f9bc:	f04f 3aff 	mov.w	sl, #4294967295
 800f9c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9c2:	9805      	ldr	r0, [sp, #20]
 800f9c4:	f7fe fe7a 	bl	800e6bc <_Bfree>
 800f9c8:	9805      	ldr	r0, [sp, #20]
 800f9ca:	4649      	mov	r1, r9
 800f9cc:	f7fe fe76 	bl	800e6bc <_Bfree>
 800f9d0:	9805      	ldr	r0, [sp, #20]
 800f9d2:	4641      	mov	r1, r8
 800f9d4:	f7fe fe72 	bl	800e6bc <_Bfree>
 800f9d8:	9805      	ldr	r0, [sp, #20]
 800f9da:	4621      	mov	r1, r4
 800f9dc:	f7fe fe6e 	bl	800e6bc <_Bfree>
 800f9e0:	e619      	b.n	800f616 <_strtod_l+0x646>
 800f9e2:	f1ba 0f01 	cmp.w	sl, #1
 800f9e6:	d103      	bne.n	800f9f0 <_strtod_l+0xa20>
 800f9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f43f ada6 	beq.w	800f53c <_strtod_l+0x56c>
 800f9f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800faa0 <_strtod_l+0xad0>
 800f9f4:	4f35      	ldr	r7, [pc, #212]	@ (800facc <_strtod_l+0xafc>)
 800f9f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f9fa:	2600      	movs	r6, #0
 800f9fc:	e7b1      	b.n	800f962 <_strtod_l+0x992>
 800f9fe:	4f34      	ldr	r7, [pc, #208]	@ (800fad0 <_strtod_l+0xb00>)
 800fa00:	2600      	movs	r6, #0
 800fa02:	e7aa      	b.n	800f95a <_strtod_l+0x98a>
 800fa04:	4b32      	ldr	r3, [pc, #200]	@ (800fad0 <_strtod_l+0xb00>)
 800fa06:	4630      	mov	r0, r6
 800fa08:	4639      	mov	r1, r7
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f7f0 fe14 	bl	8000638 <__aeabi_dmul>
 800fa10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa12:	4606      	mov	r6, r0
 800fa14:	460f      	mov	r7, r1
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d09f      	beq.n	800f95a <_strtod_l+0x98a>
 800fa1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fa1e:	e7a0      	b.n	800f962 <_strtod_l+0x992>
 800fa20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800faa8 <_strtod_l+0xad8>
 800fa24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa28:	ec57 6b17 	vmov	r6, r7, d7
 800fa2c:	e799      	b.n	800f962 <_strtod_l+0x992>
 800fa2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fa32:	9b08      	ldr	r3, [sp, #32]
 800fa34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1c1      	bne.n	800f9c0 <_strtod_l+0x9f0>
 800fa3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fa40:	0d1b      	lsrs	r3, r3, #20
 800fa42:	051b      	lsls	r3, r3, #20
 800fa44:	429d      	cmp	r5, r3
 800fa46:	d1bb      	bne.n	800f9c0 <_strtod_l+0x9f0>
 800fa48:	4630      	mov	r0, r6
 800fa4a:	4639      	mov	r1, r7
 800fa4c:	f7f1 fab2 	bl	8000fb4 <__aeabi_d2lz>
 800fa50:	f7f0 fdc4 	bl	80005dc <__aeabi_l2d>
 800fa54:	4602      	mov	r2, r0
 800fa56:	460b      	mov	r3, r1
 800fa58:	4630      	mov	r0, r6
 800fa5a:	4639      	mov	r1, r7
 800fa5c:	f7f0 fc34 	bl	80002c8 <__aeabi_dsub>
 800fa60:	460b      	mov	r3, r1
 800fa62:	4602      	mov	r2, r0
 800fa64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800fa68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800fa6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa6e:	ea46 060a 	orr.w	r6, r6, sl
 800fa72:	431e      	orrs	r6, r3
 800fa74:	d06f      	beq.n	800fb56 <_strtod_l+0xb86>
 800fa76:	a30e      	add	r3, pc, #56	@ (adr r3, 800fab0 <_strtod_l+0xae0>)
 800fa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7c:	f7f1 f84e 	bl	8000b1c <__aeabi_dcmplt>
 800fa80:	2800      	cmp	r0, #0
 800fa82:	f47f acd3 	bne.w	800f42c <_strtod_l+0x45c>
 800fa86:	a30c      	add	r3, pc, #48	@ (adr r3, 800fab8 <_strtod_l+0xae8>)
 800fa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fa90:	f7f1 f862 	bl	8000b58 <__aeabi_dcmpgt>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d093      	beq.n	800f9c0 <_strtod_l+0x9f0>
 800fa98:	e4c8      	b.n	800f42c <_strtod_l+0x45c>
 800fa9a:	bf00      	nop
 800fa9c:	f3af 8000 	nop.w
 800faa0:	00000000 	.word	0x00000000
 800faa4:	bff00000 	.word	0xbff00000
 800faa8:	00000000 	.word	0x00000000
 800faac:	3ff00000 	.word	0x3ff00000
 800fab0:	94a03595 	.word	0x94a03595
 800fab4:	3fdfffff 	.word	0x3fdfffff
 800fab8:	35afe535 	.word	0x35afe535
 800fabc:	3fe00000 	.word	0x3fe00000
 800fac0:	000fffff 	.word	0x000fffff
 800fac4:	7ff00000 	.word	0x7ff00000
 800fac8:	7fefffff 	.word	0x7fefffff
 800facc:	3ff00000 	.word	0x3ff00000
 800fad0:	3fe00000 	.word	0x3fe00000
 800fad4:	7fe00000 	.word	0x7fe00000
 800fad8:	7c9fffff 	.word	0x7c9fffff
 800fadc:	9b08      	ldr	r3, [sp, #32]
 800fade:	b323      	cbz	r3, 800fb2a <_strtod_l+0xb5a>
 800fae0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800fae4:	d821      	bhi.n	800fb2a <_strtod_l+0xb5a>
 800fae6:	a328      	add	r3, pc, #160	@ (adr r3, 800fb88 <_strtod_l+0xbb8>)
 800fae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faec:	4630      	mov	r0, r6
 800faee:	4639      	mov	r1, r7
 800faf0:	f7f1 f81e 	bl	8000b30 <__aeabi_dcmple>
 800faf4:	b1a0      	cbz	r0, 800fb20 <_strtod_l+0xb50>
 800faf6:	4639      	mov	r1, r7
 800faf8:	4630      	mov	r0, r6
 800fafa:	f7f1 f875 	bl	8000be8 <__aeabi_d2uiz>
 800fafe:	2801      	cmp	r0, #1
 800fb00:	bf38      	it	cc
 800fb02:	2001      	movcc	r0, #1
 800fb04:	f7f0 fd1e 	bl	8000544 <__aeabi_ui2d>
 800fb08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	460f      	mov	r7, r1
 800fb0e:	b9fb      	cbnz	r3, 800fb50 <_strtod_l+0xb80>
 800fb10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fb14:	9014      	str	r0, [sp, #80]	@ 0x50
 800fb16:	9315      	str	r3, [sp, #84]	@ 0x54
 800fb18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800fb1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800fb20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800fb26:	1b5b      	subs	r3, r3, r5
 800fb28:	9311      	str	r3, [sp, #68]	@ 0x44
 800fb2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fb2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800fb32:	f7ff f8ef 	bl	800ed14 <__ulp>
 800fb36:	4650      	mov	r0, sl
 800fb38:	ec53 2b10 	vmov	r2, r3, d0
 800fb3c:	4659      	mov	r1, fp
 800fb3e:	f7f0 fd7b 	bl	8000638 <__aeabi_dmul>
 800fb42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800fb46:	f7f0 fbc1 	bl	80002cc <__adddf3>
 800fb4a:	4682      	mov	sl, r0
 800fb4c:	468b      	mov	fp, r1
 800fb4e:	e770      	b.n	800fa32 <_strtod_l+0xa62>
 800fb50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800fb54:	e7e0      	b.n	800fb18 <_strtod_l+0xb48>
 800fb56:	a30e      	add	r3, pc, #56	@ (adr r3, 800fb90 <_strtod_l+0xbc0>)
 800fb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb5c:	f7f0 ffde 	bl	8000b1c <__aeabi_dcmplt>
 800fb60:	e798      	b.n	800fa94 <_strtod_l+0xac4>
 800fb62:	2300      	movs	r3, #0
 800fb64:	930e      	str	r3, [sp, #56]	@ 0x38
 800fb66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800fb68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb6a:	6013      	str	r3, [r2, #0]
 800fb6c:	f7ff ba6d 	b.w	800f04a <_strtod_l+0x7a>
 800fb70:	2a65      	cmp	r2, #101	@ 0x65
 800fb72:	f43f ab68 	beq.w	800f246 <_strtod_l+0x276>
 800fb76:	2a45      	cmp	r2, #69	@ 0x45
 800fb78:	f43f ab65 	beq.w	800f246 <_strtod_l+0x276>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	f7ff bba0 	b.w	800f2c2 <_strtod_l+0x2f2>
 800fb82:	bf00      	nop
 800fb84:	f3af 8000 	nop.w
 800fb88:	ffc00000 	.word	0xffc00000
 800fb8c:	41dfffff 	.word	0x41dfffff
 800fb90:	94a03595 	.word	0x94a03595
 800fb94:	3fcfffff 	.word	0x3fcfffff

0800fb98 <_strtod_r>:
 800fb98:	4b01      	ldr	r3, [pc, #4]	@ (800fba0 <_strtod_r+0x8>)
 800fb9a:	f7ff ba19 	b.w	800efd0 <_strtod_l>
 800fb9e:	bf00      	nop
 800fba0:	20000084 	.word	0x20000084

0800fba4 <_strtol_l.isra.0>:
 800fba4:	2b24      	cmp	r3, #36	@ 0x24
 800fba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbaa:	4686      	mov	lr, r0
 800fbac:	4690      	mov	r8, r2
 800fbae:	d801      	bhi.n	800fbb4 <_strtol_l.isra.0+0x10>
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d106      	bne.n	800fbc2 <_strtol_l.isra.0+0x1e>
 800fbb4:	f7fd fe5c 	bl	800d870 <__errno>
 800fbb8:	2316      	movs	r3, #22
 800fbba:	6003      	str	r3, [r0, #0]
 800fbbc:	2000      	movs	r0, #0
 800fbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc2:	4834      	ldr	r0, [pc, #208]	@ (800fc94 <_strtol_l.isra.0+0xf0>)
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	462a      	mov	r2, r5
 800fbc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbcc:	5d06      	ldrb	r6, [r0, r4]
 800fbce:	f016 0608 	ands.w	r6, r6, #8
 800fbd2:	d1f8      	bne.n	800fbc6 <_strtol_l.isra.0+0x22>
 800fbd4:	2c2d      	cmp	r4, #45	@ 0x2d
 800fbd6:	d110      	bne.n	800fbfa <_strtol_l.isra.0+0x56>
 800fbd8:	782c      	ldrb	r4, [r5, #0]
 800fbda:	2601      	movs	r6, #1
 800fbdc:	1c95      	adds	r5, r2, #2
 800fbde:	f033 0210 	bics.w	r2, r3, #16
 800fbe2:	d115      	bne.n	800fc10 <_strtol_l.isra.0+0x6c>
 800fbe4:	2c30      	cmp	r4, #48	@ 0x30
 800fbe6:	d10d      	bne.n	800fc04 <_strtol_l.isra.0+0x60>
 800fbe8:	782a      	ldrb	r2, [r5, #0]
 800fbea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800fbee:	2a58      	cmp	r2, #88	@ 0x58
 800fbf0:	d108      	bne.n	800fc04 <_strtol_l.isra.0+0x60>
 800fbf2:	786c      	ldrb	r4, [r5, #1]
 800fbf4:	3502      	adds	r5, #2
 800fbf6:	2310      	movs	r3, #16
 800fbf8:	e00a      	b.n	800fc10 <_strtol_l.isra.0+0x6c>
 800fbfa:	2c2b      	cmp	r4, #43	@ 0x2b
 800fbfc:	bf04      	itt	eq
 800fbfe:	782c      	ldrbeq	r4, [r5, #0]
 800fc00:	1c95      	addeq	r5, r2, #2
 800fc02:	e7ec      	b.n	800fbde <_strtol_l.isra.0+0x3a>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1f6      	bne.n	800fbf6 <_strtol_l.isra.0+0x52>
 800fc08:	2c30      	cmp	r4, #48	@ 0x30
 800fc0a:	bf14      	ite	ne
 800fc0c:	230a      	movne	r3, #10
 800fc0e:	2308      	moveq	r3, #8
 800fc10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800fc14:	f10c 3cff 	add.w	ip, ip, #4294967295
 800fc18:	2200      	movs	r2, #0
 800fc1a:	fbbc f9f3 	udiv	r9, ip, r3
 800fc1e:	4610      	mov	r0, r2
 800fc20:	fb03 ca19 	mls	sl, r3, r9, ip
 800fc24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800fc28:	2f09      	cmp	r7, #9
 800fc2a:	d80f      	bhi.n	800fc4c <_strtol_l.isra.0+0xa8>
 800fc2c:	463c      	mov	r4, r7
 800fc2e:	42a3      	cmp	r3, r4
 800fc30:	dd1b      	ble.n	800fc6a <_strtol_l.isra.0+0xc6>
 800fc32:	1c57      	adds	r7, r2, #1
 800fc34:	d007      	beq.n	800fc46 <_strtol_l.isra.0+0xa2>
 800fc36:	4581      	cmp	r9, r0
 800fc38:	d314      	bcc.n	800fc64 <_strtol_l.isra.0+0xc0>
 800fc3a:	d101      	bne.n	800fc40 <_strtol_l.isra.0+0x9c>
 800fc3c:	45a2      	cmp	sl, r4
 800fc3e:	db11      	blt.n	800fc64 <_strtol_l.isra.0+0xc0>
 800fc40:	fb00 4003 	mla	r0, r0, r3, r4
 800fc44:	2201      	movs	r2, #1
 800fc46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc4a:	e7eb      	b.n	800fc24 <_strtol_l.isra.0+0x80>
 800fc4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800fc50:	2f19      	cmp	r7, #25
 800fc52:	d801      	bhi.n	800fc58 <_strtol_l.isra.0+0xb4>
 800fc54:	3c37      	subs	r4, #55	@ 0x37
 800fc56:	e7ea      	b.n	800fc2e <_strtol_l.isra.0+0x8a>
 800fc58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800fc5c:	2f19      	cmp	r7, #25
 800fc5e:	d804      	bhi.n	800fc6a <_strtol_l.isra.0+0xc6>
 800fc60:	3c57      	subs	r4, #87	@ 0x57
 800fc62:	e7e4      	b.n	800fc2e <_strtol_l.isra.0+0x8a>
 800fc64:	f04f 32ff 	mov.w	r2, #4294967295
 800fc68:	e7ed      	b.n	800fc46 <_strtol_l.isra.0+0xa2>
 800fc6a:	1c53      	adds	r3, r2, #1
 800fc6c:	d108      	bne.n	800fc80 <_strtol_l.isra.0+0xdc>
 800fc6e:	2322      	movs	r3, #34	@ 0x22
 800fc70:	f8ce 3000 	str.w	r3, [lr]
 800fc74:	4660      	mov	r0, ip
 800fc76:	f1b8 0f00 	cmp.w	r8, #0
 800fc7a:	d0a0      	beq.n	800fbbe <_strtol_l.isra.0+0x1a>
 800fc7c:	1e69      	subs	r1, r5, #1
 800fc7e:	e006      	b.n	800fc8e <_strtol_l.isra.0+0xea>
 800fc80:	b106      	cbz	r6, 800fc84 <_strtol_l.isra.0+0xe0>
 800fc82:	4240      	negs	r0, r0
 800fc84:	f1b8 0f00 	cmp.w	r8, #0
 800fc88:	d099      	beq.n	800fbbe <_strtol_l.isra.0+0x1a>
 800fc8a:	2a00      	cmp	r2, #0
 800fc8c:	d1f6      	bne.n	800fc7c <_strtol_l.isra.0+0xd8>
 800fc8e:	f8c8 1000 	str.w	r1, [r8]
 800fc92:	e794      	b.n	800fbbe <_strtol_l.isra.0+0x1a>
 800fc94:	08013791 	.word	0x08013791

0800fc98 <_strtol_r>:
 800fc98:	f7ff bf84 	b.w	800fba4 <_strtol_l.isra.0>

0800fc9c <__ssputs_r>:
 800fc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fca0:	688e      	ldr	r6, [r1, #8]
 800fca2:	461f      	mov	r7, r3
 800fca4:	42be      	cmp	r6, r7
 800fca6:	680b      	ldr	r3, [r1, #0]
 800fca8:	4682      	mov	sl, r0
 800fcaa:	460c      	mov	r4, r1
 800fcac:	4690      	mov	r8, r2
 800fcae:	d82d      	bhi.n	800fd0c <__ssputs_r+0x70>
 800fcb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fcb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fcb8:	d026      	beq.n	800fd08 <__ssputs_r+0x6c>
 800fcba:	6965      	ldr	r5, [r4, #20]
 800fcbc:	6909      	ldr	r1, [r1, #16]
 800fcbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcc2:	eba3 0901 	sub.w	r9, r3, r1
 800fcc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fcca:	1c7b      	adds	r3, r7, #1
 800fccc:	444b      	add	r3, r9
 800fcce:	106d      	asrs	r5, r5, #1
 800fcd0:	429d      	cmp	r5, r3
 800fcd2:	bf38      	it	cc
 800fcd4:	461d      	movcc	r5, r3
 800fcd6:	0553      	lsls	r3, r2, #21
 800fcd8:	d527      	bpl.n	800fd2a <__ssputs_r+0x8e>
 800fcda:	4629      	mov	r1, r5
 800fcdc:	f7fc fcfa 	bl	800c6d4 <_malloc_r>
 800fce0:	4606      	mov	r6, r0
 800fce2:	b360      	cbz	r0, 800fd3e <__ssputs_r+0xa2>
 800fce4:	6921      	ldr	r1, [r4, #16]
 800fce6:	464a      	mov	r2, r9
 800fce8:	f7fd fdef 	bl	800d8ca <memcpy>
 800fcec:	89a3      	ldrh	r3, [r4, #12]
 800fcee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fcf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcf6:	81a3      	strh	r3, [r4, #12]
 800fcf8:	6126      	str	r6, [r4, #16]
 800fcfa:	6165      	str	r5, [r4, #20]
 800fcfc:	444e      	add	r6, r9
 800fcfe:	eba5 0509 	sub.w	r5, r5, r9
 800fd02:	6026      	str	r6, [r4, #0]
 800fd04:	60a5      	str	r5, [r4, #8]
 800fd06:	463e      	mov	r6, r7
 800fd08:	42be      	cmp	r6, r7
 800fd0a:	d900      	bls.n	800fd0e <__ssputs_r+0x72>
 800fd0c:	463e      	mov	r6, r7
 800fd0e:	6820      	ldr	r0, [r4, #0]
 800fd10:	4632      	mov	r2, r6
 800fd12:	4641      	mov	r1, r8
 800fd14:	f000 fd57 	bl	80107c6 <memmove>
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	1b9b      	subs	r3, r3, r6
 800fd1c:	60a3      	str	r3, [r4, #8]
 800fd1e:	6823      	ldr	r3, [r4, #0]
 800fd20:	4433      	add	r3, r6
 800fd22:	6023      	str	r3, [r4, #0]
 800fd24:	2000      	movs	r0, #0
 800fd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd2a:	462a      	mov	r2, r5
 800fd2c:	f001 f8e9 	bl	8010f02 <_realloc_r>
 800fd30:	4606      	mov	r6, r0
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d1e0      	bne.n	800fcf8 <__ssputs_r+0x5c>
 800fd36:	6921      	ldr	r1, [r4, #16]
 800fd38:	4650      	mov	r0, sl
 800fd3a:	f7fe fc35 	bl	800e5a8 <_free_r>
 800fd3e:	230c      	movs	r3, #12
 800fd40:	f8ca 3000 	str.w	r3, [sl]
 800fd44:	89a3      	ldrh	r3, [r4, #12]
 800fd46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd4a:	81a3      	strh	r3, [r4, #12]
 800fd4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd50:	e7e9      	b.n	800fd26 <__ssputs_r+0x8a>
	...

0800fd54 <_svfiprintf_r>:
 800fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd58:	4698      	mov	r8, r3
 800fd5a:	898b      	ldrh	r3, [r1, #12]
 800fd5c:	061b      	lsls	r3, r3, #24
 800fd5e:	b09d      	sub	sp, #116	@ 0x74
 800fd60:	4607      	mov	r7, r0
 800fd62:	460d      	mov	r5, r1
 800fd64:	4614      	mov	r4, r2
 800fd66:	d510      	bpl.n	800fd8a <_svfiprintf_r+0x36>
 800fd68:	690b      	ldr	r3, [r1, #16]
 800fd6a:	b973      	cbnz	r3, 800fd8a <_svfiprintf_r+0x36>
 800fd6c:	2140      	movs	r1, #64	@ 0x40
 800fd6e:	f7fc fcb1 	bl	800c6d4 <_malloc_r>
 800fd72:	6028      	str	r0, [r5, #0]
 800fd74:	6128      	str	r0, [r5, #16]
 800fd76:	b930      	cbnz	r0, 800fd86 <_svfiprintf_r+0x32>
 800fd78:	230c      	movs	r3, #12
 800fd7a:	603b      	str	r3, [r7, #0]
 800fd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd80:	b01d      	add	sp, #116	@ 0x74
 800fd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd86:	2340      	movs	r3, #64	@ 0x40
 800fd88:	616b      	str	r3, [r5, #20]
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd8e:	2320      	movs	r3, #32
 800fd90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd94:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd98:	2330      	movs	r3, #48	@ 0x30
 800fd9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ff38 <_svfiprintf_r+0x1e4>
 800fd9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fda2:	f04f 0901 	mov.w	r9, #1
 800fda6:	4623      	mov	r3, r4
 800fda8:	469a      	mov	sl, r3
 800fdaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdae:	b10a      	cbz	r2, 800fdb4 <_svfiprintf_r+0x60>
 800fdb0:	2a25      	cmp	r2, #37	@ 0x25
 800fdb2:	d1f9      	bne.n	800fda8 <_svfiprintf_r+0x54>
 800fdb4:	ebba 0b04 	subs.w	fp, sl, r4
 800fdb8:	d00b      	beq.n	800fdd2 <_svfiprintf_r+0x7e>
 800fdba:	465b      	mov	r3, fp
 800fdbc:	4622      	mov	r2, r4
 800fdbe:	4629      	mov	r1, r5
 800fdc0:	4638      	mov	r0, r7
 800fdc2:	f7ff ff6b 	bl	800fc9c <__ssputs_r>
 800fdc6:	3001      	adds	r0, #1
 800fdc8:	f000 80a7 	beq.w	800ff1a <_svfiprintf_r+0x1c6>
 800fdcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fdce:	445a      	add	r2, fp
 800fdd0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fdd2:	f89a 3000 	ldrb.w	r3, [sl]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	f000 809f 	beq.w	800ff1a <_svfiprintf_r+0x1c6>
 800fddc:	2300      	movs	r3, #0
 800fdde:	f04f 32ff 	mov.w	r2, #4294967295
 800fde2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fde6:	f10a 0a01 	add.w	sl, sl, #1
 800fdea:	9304      	str	r3, [sp, #16]
 800fdec:	9307      	str	r3, [sp, #28]
 800fdee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fdf2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fdf4:	4654      	mov	r4, sl
 800fdf6:	2205      	movs	r2, #5
 800fdf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdfc:	484e      	ldr	r0, [pc, #312]	@ (800ff38 <_svfiprintf_r+0x1e4>)
 800fdfe:	f7f0 fa07 	bl	8000210 <memchr>
 800fe02:	9a04      	ldr	r2, [sp, #16]
 800fe04:	b9d8      	cbnz	r0, 800fe3e <_svfiprintf_r+0xea>
 800fe06:	06d0      	lsls	r0, r2, #27
 800fe08:	bf44      	itt	mi
 800fe0a:	2320      	movmi	r3, #32
 800fe0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe10:	0711      	lsls	r1, r2, #28
 800fe12:	bf44      	itt	mi
 800fe14:	232b      	movmi	r3, #43	@ 0x2b
 800fe16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fe1a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe20:	d015      	beq.n	800fe4e <_svfiprintf_r+0xfa>
 800fe22:	9a07      	ldr	r2, [sp, #28]
 800fe24:	4654      	mov	r4, sl
 800fe26:	2000      	movs	r0, #0
 800fe28:	f04f 0c0a 	mov.w	ip, #10
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe32:	3b30      	subs	r3, #48	@ 0x30
 800fe34:	2b09      	cmp	r3, #9
 800fe36:	d94b      	bls.n	800fed0 <_svfiprintf_r+0x17c>
 800fe38:	b1b0      	cbz	r0, 800fe68 <_svfiprintf_r+0x114>
 800fe3a:	9207      	str	r2, [sp, #28]
 800fe3c:	e014      	b.n	800fe68 <_svfiprintf_r+0x114>
 800fe3e:	eba0 0308 	sub.w	r3, r0, r8
 800fe42:	fa09 f303 	lsl.w	r3, r9, r3
 800fe46:	4313      	orrs	r3, r2
 800fe48:	9304      	str	r3, [sp, #16]
 800fe4a:	46a2      	mov	sl, r4
 800fe4c:	e7d2      	b.n	800fdf4 <_svfiprintf_r+0xa0>
 800fe4e:	9b03      	ldr	r3, [sp, #12]
 800fe50:	1d19      	adds	r1, r3, #4
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	9103      	str	r1, [sp, #12]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	bfbb      	ittet	lt
 800fe5a:	425b      	neglt	r3, r3
 800fe5c:	f042 0202 	orrlt.w	r2, r2, #2
 800fe60:	9307      	strge	r3, [sp, #28]
 800fe62:	9307      	strlt	r3, [sp, #28]
 800fe64:	bfb8      	it	lt
 800fe66:	9204      	strlt	r2, [sp, #16]
 800fe68:	7823      	ldrb	r3, [r4, #0]
 800fe6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe6c:	d10a      	bne.n	800fe84 <_svfiprintf_r+0x130>
 800fe6e:	7863      	ldrb	r3, [r4, #1]
 800fe70:	2b2a      	cmp	r3, #42	@ 0x2a
 800fe72:	d132      	bne.n	800feda <_svfiprintf_r+0x186>
 800fe74:	9b03      	ldr	r3, [sp, #12]
 800fe76:	1d1a      	adds	r2, r3, #4
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	9203      	str	r2, [sp, #12]
 800fe7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fe80:	3402      	adds	r4, #2
 800fe82:	9305      	str	r3, [sp, #20]
 800fe84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ff48 <_svfiprintf_r+0x1f4>
 800fe88:	7821      	ldrb	r1, [r4, #0]
 800fe8a:	2203      	movs	r2, #3
 800fe8c:	4650      	mov	r0, sl
 800fe8e:	f7f0 f9bf 	bl	8000210 <memchr>
 800fe92:	b138      	cbz	r0, 800fea4 <_svfiprintf_r+0x150>
 800fe94:	9b04      	ldr	r3, [sp, #16]
 800fe96:	eba0 000a 	sub.w	r0, r0, sl
 800fe9a:	2240      	movs	r2, #64	@ 0x40
 800fe9c:	4082      	lsls	r2, r0
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	3401      	adds	r4, #1
 800fea2:	9304      	str	r3, [sp, #16]
 800fea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fea8:	4824      	ldr	r0, [pc, #144]	@ (800ff3c <_svfiprintf_r+0x1e8>)
 800feaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800feae:	2206      	movs	r2, #6
 800feb0:	f7f0 f9ae 	bl	8000210 <memchr>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d036      	beq.n	800ff26 <_svfiprintf_r+0x1d2>
 800feb8:	4b21      	ldr	r3, [pc, #132]	@ (800ff40 <_svfiprintf_r+0x1ec>)
 800feba:	bb1b      	cbnz	r3, 800ff04 <_svfiprintf_r+0x1b0>
 800febc:	9b03      	ldr	r3, [sp, #12]
 800febe:	3307      	adds	r3, #7
 800fec0:	f023 0307 	bic.w	r3, r3, #7
 800fec4:	3308      	adds	r3, #8
 800fec6:	9303      	str	r3, [sp, #12]
 800fec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feca:	4433      	add	r3, r6
 800fecc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fece:	e76a      	b.n	800fda6 <_svfiprintf_r+0x52>
 800fed0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fed4:	460c      	mov	r4, r1
 800fed6:	2001      	movs	r0, #1
 800fed8:	e7a8      	b.n	800fe2c <_svfiprintf_r+0xd8>
 800feda:	2300      	movs	r3, #0
 800fedc:	3401      	adds	r4, #1
 800fede:	9305      	str	r3, [sp, #20]
 800fee0:	4619      	mov	r1, r3
 800fee2:	f04f 0c0a 	mov.w	ip, #10
 800fee6:	4620      	mov	r0, r4
 800fee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800feec:	3a30      	subs	r2, #48	@ 0x30
 800feee:	2a09      	cmp	r2, #9
 800fef0:	d903      	bls.n	800fefa <_svfiprintf_r+0x1a6>
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d0c6      	beq.n	800fe84 <_svfiprintf_r+0x130>
 800fef6:	9105      	str	r1, [sp, #20]
 800fef8:	e7c4      	b.n	800fe84 <_svfiprintf_r+0x130>
 800fefa:	fb0c 2101 	mla	r1, ip, r1, r2
 800fefe:	4604      	mov	r4, r0
 800ff00:	2301      	movs	r3, #1
 800ff02:	e7f0      	b.n	800fee6 <_svfiprintf_r+0x192>
 800ff04:	ab03      	add	r3, sp, #12
 800ff06:	9300      	str	r3, [sp, #0]
 800ff08:	462a      	mov	r2, r5
 800ff0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ff44 <_svfiprintf_r+0x1f0>)
 800ff0c:	a904      	add	r1, sp, #16
 800ff0e:	4638      	mov	r0, r7
 800ff10:	f7fc fd0c 	bl	800c92c <_printf_float>
 800ff14:	1c42      	adds	r2, r0, #1
 800ff16:	4606      	mov	r6, r0
 800ff18:	d1d6      	bne.n	800fec8 <_svfiprintf_r+0x174>
 800ff1a:	89ab      	ldrh	r3, [r5, #12]
 800ff1c:	065b      	lsls	r3, r3, #25
 800ff1e:	f53f af2d 	bmi.w	800fd7c <_svfiprintf_r+0x28>
 800ff22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ff24:	e72c      	b.n	800fd80 <_svfiprintf_r+0x2c>
 800ff26:	ab03      	add	r3, sp, #12
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	462a      	mov	r2, r5
 800ff2c:	4b05      	ldr	r3, [pc, #20]	@ (800ff44 <_svfiprintf_r+0x1f0>)
 800ff2e:	a904      	add	r1, sp, #16
 800ff30:	4638      	mov	r0, r7
 800ff32:	f7fc ff93 	bl	800ce5c <_printf_i>
 800ff36:	e7ed      	b.n	800ff14 <_svfiprintf_r+0x1c0>
 800ff38:	0801356f 	.word	0x0801356f
 800ff3c:	08013579 	.word	0x08013579
 800ff40:	0800c92d 	.word	0x0800c92d
 800ff44:	0800fc9d 	.word	0x0800fc9d
 800ff48:	08013575 	.word	0x08013575

0800ff4c <_sungetc_r>:
 800ff4c:	b538      	push	{r3, r4, r5, lr}
 800ff4e:	1c4b      	adds	r3, r1, #1
 800ff50:	4614      	mov	r4, r2
 800ff52:	d103      	bne.n	800ff5c <_sungetc_r+0x10>
 800ff54:	f04f 35ff 	mov.w	r5, #4294967295
 800ff58:	4628      	mov	r0, r5
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
 800ff5c:	8993      	ldrh	r3, [r2, #12]
 800ff5e:	f023 0320 	bic.w	r3, r3, #32
 800ff62:	8193      	strh	r3, [r2, #12]
 800ff64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff66:	6852      	ldr	r2, [r2, #4]
 800ff68:	b2cd      	uxtb	r5, r1
 800ff6a:	b18b      	cbz	r3, 800ff90 <_sungetc_r+0x44>
 800ff6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ff6e:	4293      	cmp	r3, r2
 800ff70:	dd08      	ble.n	800ff84 <_sungetc_r+0x38>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	1e5a      	subs	r2, r3, #1
 800ff76:	6022      	str	r2, [r4, #0]
 800ff78:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ff7c:	6863      	ldr	r3, [r4, #4]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	6063      	str	r3, [r4, #4]
 800ff82:	e7e9      	b.n	800ff58 <_sungetc_r+0xc>
 800ff84:	4621      	mov	r1, r4
 800ff86:	f000 fbe4 	bl	8010752 <__submore>
 800ff8a:	2800      	cmp	r0, #0
 800ff8c:	d0f1      	beq.n	800ff72 <_sungetc_r+0x26>
 800ff8e:	e7e1      	b.n	800ff54 <_sungetc_r+0x8>
 800ff90:	6921      	ldr	r1, [r4, #16]
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	b151      	cbz	r1, 800ffac <_sungetc_r+0x60>
 800ff96:	4299      	cmp	r1, r3
 800ff98:	d208      	bcs.n	800ffac <_sungetc_r+0x60>
 800ff9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ff9e:	42a9      	cmp	r1, r5
 800ffa0:	d104      	bne.n	800ffac <_sungetc_r+0x60>
 800ffa2:	3b01      	subs	r3, #1
 800ffa4:	3201      	adds	r2, #1
 800ffa6:	6023      	str	r3, [r4, #0]
 800ffa8:	6062      	str	r2, [r4, #4]
 800ffaa:	e7d5      	b.n	800ff58 <_sungetc_r+0xc>
 800ffac:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800ffb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ffba:	4623      	mov	r3, r4
 800ffbc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ffc0:	6023      	str	r3, [r4, #0]
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e7dc      	b.n	800ff80 <_sungetc_r+0x34>

0800ffc6 <__ssrefill_r>:
 800ffc6:	b510      	push	{r4, lr}
 800ffc8:	460c      	mov	r4, r1
 800ffca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ffcc:	b169      	cbz	r1, 800ffea <__ssrefill_r+0x24>
 800ffce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ffd2:	4299      	cmp	r1, r3
 800ffd4:	d001      	beq.n	800ffda <__ssrefill_r+0x14>
 800ffd6:	f7fe fae7 	bl	800e5a8 <_free_r>
 800ffda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ffdc:	6063      	str	r3, [r4, #4]
 800ffde:	2000      	movs	r0, #0
 800ffe0:	6360      	str	r0, [r4, #52]	@ 0x34
 800ffe2:	b113      	cbz	r3, 800ffea <__ssrefill_r+0x24>
 800ffe4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ffe6:	6023      	str	r3, [r4, #0]
 800ffe8:	bd10      	pop	{r4, pc}
 800ffea:	6923      	ldr	r3, [r4, #16]
 800ffec:	6023      	str	r3, [r4, #0]
 800ffee:	2300      	movs	r3, #0
 800fff0:	6063      	str	r3, [r4, #4]
 800fff2:	89a3      	ldrh	r3, [r4, #12]
 800fff4:	f043 0320 	orr.w	r3, r3, #32
 800fff8:	81a3      	strh	r3, [r4, #12]
 800fffa:	f04f 30ff 	mov.w	r0, #4294967295
 800fffe:	e7f3      	b.n	800ffe8 <__ssrefill_r+0x22>

08010000 <__ssvfiscanf_r>:
 8010000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010004:	460c      	mov	r4, r1
 8010006:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801000a:	2100      	movs	r1, #0
 801000c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010010:	49a6      	ldr	r1, [pc, #664]	@ (80102ac <__ssvfiscanf_r+0x2ac>)
 8010012:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010014:	f10d 0804 	add.w	r8, sp, #4
 8010018:	49a5      	ldr	r1, [pc, #660]	@ (80102b0 <__ssvfiscanf_r+0x2b0>)
 801001a:	4fa6      	ldr	r7, [pc, #664]	@ (80102b4 <__ssvfiscanf_r+0x2b4>)
 801001c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010020:	4606      	mov	r6, r0
 8010022:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	f892 9000 	ldrb.w	r9, [r2]
 801002a:	f1b9 0f00 	cmp.w	r9, #0
 801002e:	f000 8158 	beq.w	80102e2 <__ssvfiscanf_r+0x2e2>
 8010032:	f817 3009 	ldrb.w	r3, [r7, r9]
 8010036:	f013 0308 	ands.w	r3, r3, #8
 801003a:	f102 0501 	add.w	r5, r2, #1
 801003e:	d019      	beq.n	8010074 <__ssvfiscanf_r+0x74>
 8010040:	6863      	ldr	r3, [r4, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	dd0f      	ble.n	8010066 <__ssvfiscanf_r+0x66>
 8010046:	6823      	ldr	r3, [r4, #0]
 8010048:	781a      	ldrb	r2, [r3, #0]
 801004a:	5cba      	ldrb	r2, [r7, r2]
 801004c:	0712      	lsls	r2, r2, #28
 801004e:	d401      	bmi.n	8010054 <__ssvfiscanf_r+0x54>
 8010050:	462a      	mov	r2, r5
 8010052:	e7e8      	b.n	8010026 <__ssvfiscanf_r+0x26>
 8010054:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010056:	3201      	adds	r2, #1
 8010058:	9245      	str	r2, [sp, #276]	@ 0x114
 801005a:	6862      	ldr	r2, [r4, #4]
 801005c:	3301      	adds	r3, #1
 801005e:	3a01      	subs	r2, #1
 8010060:	6062      	str	r2, [r4, #4]
 8010062:	6023      	str	r3, [r4, #0]
 8010064:	e7ec      	b.n	8010040 <__ssvfiscanf_r+0x40>
 8010066:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010068:	4621      	mov	r1, r4
 801006a:	4630      	mov	r0, r6
 801006c:	4798      	blx	r3
 801006e:	2800      	cmp	r0, #0
 8010070:	d0e9      	beq.n	8010046 <__ssvfiscanf_r+0x46>
 8010072:	e7ed      	b.n	8010050 <__ssvfiscanf_r+0x50>
 8010074:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8010078:	f040 8085 	bne.w	8010186 <__ssvfiscanf_r+0x186>
 801007c:	9341      	str	r3, [sp, #260]	@ 0x104
 801007e:	9343      	str	r3, [sp, #268]	@ 0x10c
 8010080:	7853      	ldrb	r3, [r2, #1]
 8010082:	2b2a      	cmp	r3, #42	@ 0x2a
 8010084:	bf02      	ittt	eq
 8010086:	2310      	moveq	r3, #16
 8010088:	1c95      	addeq	r5, r2, #2
 801008a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801008c:	220a      	movs	r2, #10
 801008e:	46aa      	mov	sl, r5
 8010090:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010094:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010098:	2b09      	cmp	r3, #9
 801009a:	d91e      	bls.n	80100da <__ssvfiscanf_r+0xda>
 801009c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80102b8 <__ssvfiscanf_r+0x2b8>
 80100a0:	2203      	movs	r2, #3
 80100a2:	4658      	mov	r0, fp
 80100a4:	f7f0 f8b4 	bl	8000210 <memchr>
 80100a8:	b138      	cbz	r0, 80100ba <__ssvfiscanf_r+0xba>
 80100aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80100ac:	eba0 000b 	sub.w	r0, r0, fp
 80100b0:	2301      	movs	r3, #1
 80100b2:	4083      	lsls	r3, r0
 80100b4:	4313      	orrs	r3, r2
 80100b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80100b8:	4655      	mov	r5, sl
 80100ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80100be:	2b78      	cmp	r3, #120	@ 0x78
 80100c0:	d806      	bhi.n	80100d0 <__ssvfiscanf_r+0xd0>
 80100c2:	2b57      	cmp	r3, #87	@ 0x57
 80100c4:	d810      	bhi.n	80100e8 <__ssvfiscanf_r+0xe8>
 80100c6:	2b25      	cmp	r3, #37	@ 0x25
 80100c8:	d05d      	beq.n	8010186 <__ssvfiscanf_r+0x186>
 80100ca:	d857      	bhi.n	801017c <__ssvfiscanf_r+0x17c>
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d075      	beq.n	80101bc <__ssvfiscanf_r+0x1bc>
 80100d0:	2303      	movs	r3, #3
 80100d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80100d4:	230a      	movs	r3, #10
 80100d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80100d8:	e088      	b.n	80101ec <__ssvfiscanf_r+0x1ec>
 80100da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80100dc:	fb02 1103 	mla	r1, r2, r3, r1
 80100e0:	3930      	subs	r1, #48	@ 0x30
 80100e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80100e4:	4655      	mov	r5, sl
 80100e6:	e7d2      	b.n	801008e <__ssvfiscanf_r+0x8e>
 80100e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80100ec:	2a20      	cmp	r2, #32
 80100ee:	d8ef      	bhi.n	80100d0 <__ssvfiscanf_r+0xd0>
 80100f0:	a101      	add	r1, pc, #4	@ (adr r1, 80100f8 <__ssvfiscanf_r+0xf8>)
 80100f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80100f6:	bf00      	nop
 80100f8:	080101cb 	.word	0x080101cb
 80100fc:	080100d1 	.word	0x080100d1
 8010100:	080100d1 	.word	0x080100d1
 8010104:	08010225 	.word	0x08010225
 8010108:	080100d1 	.word	0x080100d1
 801010c:	080100d1 	.word	0x080100d1
 8010110:	080100d1 	.word	0x080100d1
 8010114:	080100d1 	.word	0x080100d1
 8010118:	080100d1 	.word	0x080100d1
 801011c:	080100d1 	.word	0x080100d1
 8010120:	080100d1 	.word	0x080100d1
 8010124:	0801023b 	.word	0x0801023b
 8010128:	08010221 	.word	0x08010221
 801012c:	08010183 	.word	0x08010183
 8010130:	08010183 	.word	0x08010183
 8010134:	08010183 	.word	0x08010183
 8010138:	080100d1 	.word	0x080100d1
 801013c:	080101dd 	.word	0x080101dd
 8010140:	080100d1 	.word	0x080100d1
 8010144:	080100d1 	.word	0x080100d1
 8010148:	080100d1 	.word	0x080100d1
 801014c:	080100d1 	.word	0x080100d1
 8010150:	0801024b 	.word	0x0801024b
 8010154:	080101e5 	.word	0x080101e5
 8010158:	080101c3 	.word	0x080101c3
 801015c:	080100d1 	.word	0x080100d1
 8010160:	080100d1 	.word	0x080100d1
 8010164:	08010247 	.word	0x08010247
 8010168:	080100d1 	.word	0x080100d1
 801016c:	08010221 	.word	0x08010221
 8010170:	080100d1 	.word	0x080100d1
 8010174:	080100d1 	.word	0x080100d1
 8010178:	080101cb 	.word	0x080101cb
 801017c:	3b45      	subs	r3, #69	@ 0x45
 801017e:	2b02      	cmp	r3, #2
 8010180:	d8a6      	bhi.n	80100d0 <__ssvfiscanf_r+0xd0>
 8010182:	2305      	movs	r3, #5
 8010184:	e031      	b.n	80101ea <__ssvfiscanf_r+0x1ea>
 8010186:	6863      	ldr	r3, [r4, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	dd0d      	ble.n	80101a8 <__ssvfiscanf_r+0x1a8>
 801018c:	6823      	ldr	r3, [r4, #0]
 801018e:	781a      	ldrb	r2, [r3, #0]
 8010190:	454a      	cmp	r2, r9
 8010192:	f040 80a6 	bne.w	80102e2 <__ssvfiscanf_r+0x2e2>
 8010196:	3301      	adds	r3, #1
 8010198:	6862      	ldr	r2, [r4, #4]
 801019a:	6023      	str	r3, [r4, #0]
 801019c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801019e:	3a01      	subs	r2, #1
 80101a0:	3301      	adds	r3, #1
 80101a2:	6062      	str	r2, [r4, #4]
 80101a4:	9345      	str	r3, [sp, #276]	@ 0x114
 80101a6:	e753      	b.n	8010050 <__ssvfiscanf_r+0x50>
 80101a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80101aa:	4621      	mov	r1, r4
 80101ac:	4630      	mov	r0, r6
 80101ae:	4798      	blx	r3
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d0eb      	beq.n	801018c <__ssvfiscanf_r+0x18c>
 80101b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80101b6:	2800      	cmp	r0, #0
 80101b8:	f040 808b 	bne.w	80102d2 <__ssvfiscanf_r+0x2d2>
 80101bc:	f04f 30ff 	mov.w	r0, #4294967295
 80101c0:	e08b      	b.n	80102da <__ssvfiscanf_r+0x2da>
 80101c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80101c4:	f042 0220 	orr.w	r2, r2, #32
 80101c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80101ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80101cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80101d0:	9241      	str	r2, [sp, #260]	@ 0x104
 80101d2:	2210      	movs	r2, #16
 80101d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80101d6:	9242      	str	r2, [sp, #264]	@ 0x108
 80101d8:	d902      	bls.n	80101e0 <__ssvfiscanf_r+0x1e0>
 80101da:	e005      	b.n	80101e8 <__ssvfiscanf_r+0x1e8>
 80101dc:	2300      	movs	r3, #0
 80101de:	9342      	str	r3, [sp, #264]	@ 0x108
 80101e0:	2303      	movs	r3, #3
 80101e2:	e002      	b.n	80101ea <__ssvfiscanf_r+0x1ea>
 80101e4:	2308      	movs	r3, #8
 80101e6:	9342      	str	r3, [sp, #264]	@ 0x108
 80101e8:	2304      	movs	r3, #4
 80101ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80101ec:	6863      	ldr	r3, [r4, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	dd39      	ble.n	8010266 <__ssvfiscanf_r+0x266>
 80101f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80101f4:	0659      	lsls	r1, r3, #25
 80101f6:	d404      	bmi.n	8010202 <__ssvfiscanf_r+0x202>
 80101f8:	6823      	ldr	r3, [r4, #0]
 80101fa:	781a      	ldrb	r2, [r3, #0]
 80101fc:	5cba      	ldrb	r2, [r7, r2]
 80101fe:	0712      	lsls	r2, r2, #28
 8010200:	d438      	bmi.n	8010274 <__ssvfiscanf_r+0x274>
 8010202:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010204:	2b02      	cmp	r3, #2
 8010206:	dc47      	bgt.n	8010298 <__ssvfiscanf_r+0x298>
 8010208:	466b      	mov	r3, sp
 801020a:	4622      	mov	r2, r4
 801020c:	a941      	add	r1, sp, #260	@ 0x104
 801020e:	4630      	mov	r0, r6
 8010210:	f000 f86c 	bl	80102ec <_scanf_chars>
 8010214:	2801      	cmp	r0, #1
 8010216:	d064      	beq.n	80102e2 <__ssvfiscanf_r+0x2e2>
 8010218:	2802      	cmp	r0, #2
 801021a:	f47f af19 	bne.w	8010050 <__ssvfiscanf_r+0x50>
 801021e:	e7c9      	b.n	80101b4 <__ssvfiscanf_r+0x1b4>
 8010220:	220a      	movs	r2, #10
 8010222:	e7d7      	b.n	80101d4 <__ssvfiscanf_r+0x1d4>
 8010224:	4629      	mov	r1, r5
 8010226:	4640      	mov	r0, r8
 8010228:	f000 fa5a 	bl	80106e0 <__sccl>
 801022c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801022e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010232:	9341      	str	r3, [sp, #260]	@ 0x104
 8010234:	4605      	mov	r5, r0
 8010236:	2301      	movs	r3, #1
 8010238:	e7d7      	b.n	80101ea <__ssvfiscanf_r+0x1ea>
 801023a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801023c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010240:	9341      	str	r3, [sp, #260]	@ 0x104
 8010242:	2300      	movs	r3, #0
 8010244:	e7d1      	b.n	80101ea <__ssvfiscanf_r+0x1ea>
 8010246:	2302      	movs	r3, #2
 8010248:	e7cf      	b.n	80101ea <__ssvfiscanf_r+0x1ea>
 801024a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801024c:	06c3      	lsls	r3, r0, #27
 801024e:	f53f aeff 	bmi.w	8010050 <__ssvfiscanf_r+0x50>
 8010252:	9b00      	ldr	r3, [sp, #0]
 8010254:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010256:	1d19      	adds	r1, r3, #4
 8010258:	9100      	str	r1, [sp, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	07c0      	lsls	r0, r0, #31
 801025e:	bf4c      	ite	mi
 8010260:	801a      	strhmi	r2, [r3, #0]
 8010262:	601a      	strpl	r2, [r3, #0]
 8010264:	e6f4      	b.n	8010050 <__ssvfiscanf_r+0x50>
 8010266:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010268:	4621      	mov	r1, r4
 801026a:	4630      	mov	r0, r6
 801026c:	4798      	blx	r3
 801026e:	2800      	cmp	r0, #0
 8010270:	d0bf      	beq.n	80101f2 <__ssvfiscanf_r+0x1f2>
 8010272:	e79f      	b.n	80101b4 <__ssvfiscanf_r+0x1b4>
 8010274:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010276:	3201      	adds	r2, #1
 8010278:	9245      	str	r2, [sp, #276]	@ 0x114
 801027a:	6862      	ldr	r2, [r4, #4]
 801027c:	3a01      	subs	r2, #1
 801027e:	2a00      	cmp	r2, #0
 8010280:	6062      	str	r2, [r4, #4]
 8010282:	dd02      	ble.n	801028a <__ssvfiscanf_r+0x28a>
 8010284:	3301      	adds	r3, #1
 8010286:	6023      	str	r3, [r4, #0]
 8010288:	e7b6      	b.n	80101f8 <__ssvfiscanf_r+0x1f8>
 801028a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801028c:	4621      	mov	r1, r4
 801028e:	4630      	mov	r0, r6
 8010290:	4798      	blx	r3
 8010292:	2800      	cmp	r0, #0
 8010294:	d0b0      	beq.n	80101f8 <__ssvfiscanf_r+0x1f8>
 8010296:	e78d      	b.n	80101b4 <__ssvfiscanf_r+0x1b4>
 8010298:	2b04      	cmp	r3, #4
 801029a:	dc0f      	bgt.n	80102bc <__ssvfiscanf_r+0x2bc>
 801029c:	466b      	mov	r3, sp
 801029e:	4622      	mov	r2, r4
 80102a0:	a941      	add	r1, sp, #260	@ 0x104
 80102a2:	4630      	mov	r0, r6
 80102a4:	f000 f87c 	bl	80103a0 <_scanf_i>
 80102a8:	e7b4      	b.n	8010214 <__ssvfiscanf_r+0x214>
 80102aa:	bf00      	nop
 80102ac:	0800ff4d 	.word	0x0800ff4d
 80102b0:	0800ffc7 	.word	0x0800ffc7
 80102b4:	08013791 	.word	0x08013791
 80102b8:	08013575 	.word	0x08013575
 80102bc:	4b0a      	ldr	r3, [pc, #40]	@ (80102e8 <__ssvfiscanf_r+0x2e8>)
 80102be:	2b00      	cmp	r3, #0
 80102c0:	f43f aec6 	beq.w	8010050 <__ssvfiscanf_r+0x50>
 80102c4:	466b      	mov	r3, sp
 80102c6:	4622      	mov	r2, r4
 80102c8:	a941      	add	r1, sp, #260	@ 0x104
 80102ca:	4630      	mov	r0, r6
 80102cc:	f7fc fee4 	bl	800d098 <_scanf_float>
 80102d0:	e7a0      	b.n	8010214 <__ssvfiscanf_r+0x214>
 80102d2:	89a3      	ldrh	r3, [r4, #12]
 80102d4:	065b      	lsls	r3, r3, #25
 80102d6:	f53f af71 	bmi.w	80101bc <__ssvfiscanf_r+0x1bc>
 80102da:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80102e4:	e7f9      	b.n	80102da <__ssvfiscanf_r+0x2da>
 80102e6:	bf00      	nop
 80102e8:	0800d099 	.word	0x0800d099

080102ec <_scanf_chars>:
 80102ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102f0:	4615      	mov	r5, r2
 80102f2:	688a      	ldr	r2, [r1, #8]
 80102f4:	4680      	mov	r8, r0
 80102f6:	460c      	mov	r4, r1
 80102f8:	b932      	cbnz	r2, 8010308 <_scanf_chars+0x1c>
 80102fa:	698a      	ldr	r2, [r1, #24]
 80102fc:	2a00      	cmp	r2, #0
 80102fe:	bf14      	ite	ne
 8010300:	f04f 32ff 	movne.w	r2, #4294967295
 8010304:	2201      	moveq	r2, #1
 8010306:	608a      	str	r2, [r1, #8]
 8010308:	6822      	ldr	r2, [r4, #0]
 801030a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801039c <_scanf_chars+0xb0>
 801030e:	06d1      	lsls	r1, r2, #27
 8010310:	bf5f      	itttt	pl
 8010312:	681a      	ldrpl	r2, [r3, #0]
 8010314:	1d11      	addpl	r1, r2, #4
 8010316:	6019      	strpl	r1, [r3, #0]
 8010318:	6816      	ldrpl	r6, [r2, #0]
 801031a:	2700      	movs	r7, #0
 801031c:	69a0      	ldr	r0, [r4, #24]
 801031e:	b188      	cbz	r0, 8010344 <_scanf_chars+0x58>
 8010320:	2801      	cmp	r0, #1
 8010322:	d107      	bne.n	8010334 <_scanf_chars+0x48>
 8010324:	682b      	ldr	r3, [r5, #0]
 8010326:	781a      	ldrb	r2, [r3, #0]
 8010328:	6963      	ldr	r3, [r4, #20]
 801032a:	5c9b      	ldrb	r3, [r3, r2]
 801032c:	b953      	cbnz	r3, 8010344 <_scanf_chars+0x58>
 801032e:	2f00      	cmp	r7, #0
 8010330:	d031      	beq.n	8010396 <_scanf_chars+0xaa>
 8010332:	e022      	b.n	801037a <_scanf_chars+0x8e>
 8010334:	2802      	cmp	r0, #2
 8010336:	d120      	bne.n	801037a <_scanf_chars+0x8e>
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	781b      	ldrb	r3, [r3, #0]
 801033c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010340:	071b      	lsls	r3, r3, #28
 8010342:	d41a      	bmi.n	801037a <_scanf_chars+0x8e>
 8010344:	6823      	ldr	r3, [r4, #0]
 8010346:	06da      	lsls	r2, r3, #27
 8010348:	bf5e      	ittt	pl
 801034a:	682b      	ldrpl	r3, [r5, #0]
 801034c:	781b      	ldrbpl	r3, [r3, #0]
 801034e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010352:	682a      	ldr	r2, [r5, #0]
 8010354:	686b      	ldr	r3, [r5, #4]
 8010356:	3201      	adds	r2, #1
 8010358:	602a      	str	r2, [r5, #0]
 801035a:	68a2      	ldr	r2, [r4, #8]
 801035c:	3b01      	subs	r3, #1
 801035e:	3a01      	subs	r2, #1
 8010360:	606b      	str	r3, [r5, #4]
 8010362:	3701      	adds	r7, #1
 8010364:	60a2      	str	r2, [r4, #8]
 8010366:	b142      	cbz	r2, 801037a <_scanf_chars+0x8e>
 8010368:	2b00      	cmp	r3, #0
 801036a:	dcd7      	bgt.n	801031c <_scanf_chars+0x30>
 801036c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010370:	4629      	mov	r1, r5
 8010372:	4640      	mov	r0, r8
 8010374:	4798      	blx	r3
 8010376:	2800      	cmp	r0, #0
 8010378:	d0d0      	beq.n	801031c <_scanf_chars+0x30>
 801037a:	6823      	ldr	r3, [r4, #0]
 801037c:	f013 0310 	ands.w	r3, r3, #16
 8010380:	d105      	bne.n	801038e <_scanf_chars+0xa2>
 8010382:	68e2      	ldr	r2, [r4, #12]
 8010384:	3201      	adds	r2, #1
 8010386:	60e2      	str	r2, [r4, #12]
 8010388:	69a2      	ldr	r2, [r4, #24]
 801038a:	b102      	cbz	r2, 801038e <_scanf_chars+0xa2>
 801038c:	7033      	strb	r3, [r6, #0]
 801038e:	6923      	ldr	r3, [r4, #16]
 8010390:	443b      	add	r3, r7
 8010392:	6123      	str	r3, [r4, #16]
 8010394:	2000      	movs	r0, #0
 8010396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801039a:	bf00      	nop
 801039c:	08013791 	.word	0x08013791

080103a0 <_scanf_i>:
 80103a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a4:	4698      	mov	r8, r3
 80103a6:	4b74      	ldr	r3, [pc, #464]	@ (8010578 <_scanf_i+0x1d8>)
 80103a8:	460c      	mov	r4, r1
 80103aa:	4682      	mov	sl, r0
 80103ac:	4616      	mov	r6, r2
 80103ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80103b2:	b087      	sub	sp, #28
 80103b4:	ab03      	add	r3, sp, #12
 80103b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80103ba:	4b70      	ldr	r3, [pc, #448]	@ (801057c <_scanf_i+0x1dc>)
 80103bc:	69a1      	ldr	r1, [r4, #24]
 80103be:	4a70      	ldr	r2, [pc, #448]	@ (8010580 <_scanf_i+0x1e0>)
 80103c0:	2903      	cmp	r1, #3
 80103c2:	bf08      	it	eq
 80103c4:	461a      	moveq	r2, r3
 80103c6:	68a3      	ldr	r3, [r4, #8]
 80103c8:	9201      	str	r2, [sp, #4]
 80103ca:	1e5a      	subs	r2, r3, #1
 80103cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80103d0:	bf88      	it	hi
 80103d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80103d6:	4627      	mov	r7, r4
 80103d8:	bf82      	ittt	hi
 80103da:	eb03 0905 	addhi.w	r9, r3, r5
 80103de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80103e2:	60a3      	strhi	r3, [r4, #8]
 80103e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80103e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80103ec:	bf98      	it	ls
 80103ee:	f04f 0900 	movls.w	r9, #0
 80103f2:	6023      	str	r3, [r4, #0]
 80103f4:	463d      	mov	r5, r7
 80103f6:	f04f 0b00 	mov.w	fp, #0
 80103fa:	6831      	ldr	r1, [r6, #0]
 80103fc:	ab03      	add	r3, sp, #12
 80103fe:	7809      	ldrb	r1, [r1, #0]
 8010400:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010404:	2202      	movs	r2, #2
 8010406:	f7ef ff03 	bl	8000210 <memchr>
 801040a:	b328      	cbz	r0, 8010458 <_scanf_i+0xb8>
 801040c:	f1bb 0f01 	cmp.w	fp, #1
 8010410:	d159      	bne.n	80104c6 <_scanf_i+0x126>
 8010412:	6862      	ldr	r2, [r4, #4]
 8010414:	b92a      	cbnz	r2, 8010422 <_scanf_i+0x82>
 8010416:	6822      	ldr	r2, [r4, #0]
 8010418:	2108      	movs	r1, #8
 801041a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801041e:	6061      	str	r1, [r4, #4]
 8010420:	6022      	str	r2, [r4, #0]
 8010422:	6822      	ldr	r2, [r4, #0]
 8010424:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010428:	6022      	str	r2, [r4, #0]
 801042a:	68a2      	ldr	r2, [r4, #8]
 801042c:	1e51      	subs	r1, r2, #1
 801042e:	60a1      	str	r1, [r4, #8]
 8010430:	b192      	cbz	r2, 8010458 <_scanf_i+0xb8>
 8010432:	6832      	ldr	r2, [r6, #0]
 8010434:	1c51      	adds	r1, r2, #1
 8010436:	6031      	str	r1, [r6, #0]
 8010438:	7812      	ldrb	r2, [r2, #0]
 801043a:	f805 2b01 	strb.w	r2, [r5], #1
 801043e:	6872      	ldr	r2, [r6, #4]
 8010440:	3a01      	subs	r2, #1
 8010442:	2a00      	cmp	r2, #0
 8010444:	6072      	str	r2, [r6, #4]
 8010446:	dc07      	bgt.n	8010458 <_scanf_i+0xb8>
 8010448:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801044c:	4631      	mov	r1, r6
 801044e:	4650      	mov	r0, sl
 8010450:	4790      	blx	r2
 8010452:	2800      	cmp	r0, #0
 8010454:	f040 8085 	bne.w	8010562 <_scanf_i+0x1c2>
 8010458:	f10b 0b01 	add.w	fp, fp, #1
 801045c:	f1bb 0f03 	cmp.w	fp, #3
 8010460:	d1cb      	bne.n	80103fa <_scanf_i+0x5a>
 8010462:	6863      	ldr	r3, [r4, #4]
 8010464:	b90b      	cbnz	r3, 801046a <_scanf_i+0xca>
 8010466:	230a      	movs	r3, #10
 8010468:	6063      	str	r3, [r4, #4]
 801046a:	6863      	ldr	r3, [r4, #4]
 801046c:	4945      	ldr	r1, [pc, #276]	@ (8010584 <_scanf_i+0x1e4>)
 801046e:	6960      	ldr	r0, [r4, #20]
 8010470:	1ac9      	subs	r1, r1, r3
 8010472:	f000 f935 	bl	80106e0 <__sccl>
 8010476:	f04f 0b00 	mov.w	fp, #0
 801047a:	68a3      	ldr	r3, [r4, #8]
 801047c:	6822      	ldr	r2, [r4, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d03d      	beq.n	80104fe <_scanf_i+0x15e>
 8010482:	6831      	ldr	r1, [r6, #0]
 8010484:	6960      	ldr	r0, [r4, #20]
 8010486:	f891 c000 	ldrb.w	ip, [r1]
 801048a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801048e:	2800      	cmp	r0, #0
 8010490:	d035      	beq.n	80104fe <_scanf_i+0x15e>
 8010492:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8010496:	d124      	bne.n	80104e2 <_scanf_i+0x142>
 8010498:	0510      	lsls	r0, r2, #20
 801049a:	d522      	bpl.n	80104e2 <_scanf_i+0x142>
 801049c:	f10b 0b01 	add.w	fp, fp, #1
 80104a0:	f1b9 0f00 	cmp.w	r9, #0
 80104a4:	d003      	beq.n	80104ae <_scanf_i+0x10e>
 80104a6:	3301      	adds	r3, #1
 80104a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80104ac:	60a3      	str	r3, [r4, #8]
 80104ae:	6873      	ldr	r3, [r6, #4]
 80104b0:	3b01      	subs	r3, #1
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	6073      	str	r3, [r6, #4]
 80104b6:	dd1b      	ble.n	80104f0 <_scanf_i+0x150>
 80104b8:	6833      	ldr	r3, [r6, #0]
 80104ba:	3301      	adds	r3, #1
 80104bc:	6033      	str	r3, [r6, #0]
 80104be:	68a3      	ldr	r3, [r4, #8]
 80104c0:	3b01      	subs	r3, #1
 80104c2:	60a3      	str	r3, [r4, #8]
 80104c4:	e7d9      	b.n	801047a <_scanf_i+0xda>
 80104c6:	f1bb 0f02 	cmp.w	fp, #2
 80104ca:	d1ae      	bne.n	801042a <_scanf_i+0x8a>
 80104cc:	6822      	ldr	r2, [r4, #0]
 80104ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80104d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80104d6:	d1c4      	bne.n	8010462 <_scanf_i+0xc2>
 80104d8:	2110      	movs	r1, #16
 80104da:	6061      	str	r1, [r4, #4]
 80104dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80104e0:	e7a2      	b.n	8010428 <_scanf_i+0x88>
 80104e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80104e6:	6022      	str	r2, [r4, #0]
 80104e8:	780b      	ldrb	r3, [r1, #0]
 80104ea:	f805 3b01 	strb.w	r3, [r5], #1
 80104ee:	e7de      	b.n	80104ae <_scanf_i+0x10e>
 80104f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80104f4:	4631      	mov	r1, r6
 80104f6:	4650      	mov	r0, sl
 80104f8:	4798      	blx	r3
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d0df      	beq.n	80104be <_scanf_i+0x11e>
 80104fe:	6823      	ldr	r3, [r4, #0]
 8010500:	05d9      	lsls	r1, r3, #23
 8010502:	d50d      	bpl.n	8010520 <_scanf_i+0x180>
 8010504:	42bd      	cmp	r5, r7
 8010506:	d909      	bls.n	801051c <_scanf_i+0x17c>
 8010508:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801050c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010510:	4632      	mov	r2, r6
 8010512:	4650      	mov	r0, sl
 8010514:	4798      	blx	r3
 8010516:	f105 39ff 	add.w	r9, r5, #4294967295
 801051a:	464d      	mov	r5, r9
 801051c:	42bd      	cmp	r5, r7
 801051e:	d028      	beq.n	8010572 <_scanf_i+0x1d2>
 8010520:	6822      	ldr	r2, [r4, #0]
 8010522:	f012 0210 	ands.w	r2, r2, #16
 8010526:	d113      	bne.n	8010550 <_scanf_i+0x1b0>
 8010528:	702a      	strb	r2, [r5, #0]
 801052a:	6863      	ldr	r3, [r4, #4]
 801052c:	9e01      	ldr	r6, [sp, #4]
 801052e:	4639      	mov	r1, r7
 8010530:	4650      	mov	r0, sl
 8010532:	47b0      	blx	r6
 8010534:	f8d8 3000 	ldr.w	r3, [r8]
 8010538:	6821      	ldr	r1, [r4, #0]
 801053a:	1d1a      	adds	r2, r3, #4
 801053c:	f8c8 2000 	str.w	r2, [r8]
 8010540:	f011 0f20 	tst.w	r1, #32
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	d00f      	beq.n	8010568 <_scanf_i+0x1c8>
 8010548:	6018      	str	r0, [r3, #0]
 801054a:	68e3      	ldr	r3, [r4, #12]
 801054c:	3301      	adds	r3, #1
 801054e:	60e3      	str	r3, [r4, #12]
 8010550:	6923      	ldr	r3, [r4, #16]
 8010552:	1bed      	subs	r5, r5, r7
 8010554:	445d      	add	r5, fp
 8010556:	442b      	add	r3, r5
 8010558:	6123      	str	r3, [r4, #16]
 801055a:	2000      	movs	r0, #0
 801055c:	b007      	add	sp, #28
 801055e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010562:	f04f 0b00 	mov.w	fp, #0
 8010566:	e7ca      	b.n	80104fe <_scanf_i+0x15e>
 8010568:	07ca      	lsls	r2, r1, #31
 801056a:	bf4c      	ite	mi
 801056c:	8018      	strhmi	r0, [r3, #0]
 801056e:	6018      	strpl	r0, [r3, #0]
 8010570:	e7eb      	b.n	801054a <_scanf_i+0x1aa>
 8010572:	2001      	movs	r0, #1
 8010574:	e7f2      	b.n	801055c <_scanf_i+0x1bc>
 8010576:	bf00      	nop
 8010578:	08013424 	.word	0x08013424
 801057c:	0800fc99 	.word	0x0800fc99
 8010580:	0801103d 	.word	0x0801103d
 8010584:	08013590 	.word	0x08013590

08010588 <__sflush_r>:
 8010588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801058c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010590:	0716      	lsls	r6, r2, #28
 8010592:	4605      	mov	r5, r0
 8010594:	460c      	mov	r4, r1
 8010596:	d454      	bmi.n	8010642 <__sflush_r+0xba>
 8010598:	684b      	ldr	r3, [r1, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	dc02      	bgt.n	80105a4 <__sflush_r+0x1c>
 801059e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	dd48      	ble.n	8010636 <__sflush_r+0xae>
 80105a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105a6:	2e00      	cmp	r6, #0
 80105a8:	d045      	beq.n	8010636 <__sflush_r+0xae>
 80105aa:	2300      	movs	r3, #0
 80105ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105b0:	682f      	ldr	r7, [r5, #0]
 80105b2:	6a21      	ldr	r1, [r4, #32]
 80105b4:	602b      	str	r3, [r5, #0]
 80105b6:	d030      	beq.n	801061a <__sflush_r+0x92>
 80105b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105ba:	89a3      	ldrh	r3, [r4, #12]
 80105bc:	0759      	lsls	r1, r3, #29
 80105be:	d505      	bpl.n	80105cc <__sflush_r+0x44>
 80105c0:	6863      	ldr	r3, [r4, #4]
 80105c2:	1ad2      	subs	r2, r2, r3
 80105c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80105c6:	b10b      	cbz	r3, 80105cc <__sflush_r+0x44>
 80105c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80105ca:	1ad2      	subs	r2, r2, r3
 80105cc:	2300      	movs	r3, #0
 80105ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105d0:	6a21      	ldr	r1, [r4, #32]
 80105d2:	4628      	mov	r0, r5
 80105d4:	47b0      	blx	r6
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	89a3      	ldrh	r3, [r4, #12]
 80105da:	d106      	bne.n	80105ea <__sflush_r+0x62>
 80105dc:	6829      	ldr	r1, [r5, #0]
 80105de:	291d      	cmp	r1, #29
 80105e0:	d82b      	bhi.n	801063a <__sflush_r+0xb2>
 80105e2:	4a2a      	ldr	r2, [pc, #168]	@ (801068c <__sflush_r+0x104>)
 80105e4:	40ca      	lsrs	r2, r1
 80105e6:	07d6      	lsls	r6, r2, #31
 80105e8:	d527      	bpl.n	801063a <__sflush_r+0xb2>
 80105ea:	2200      	movs	r2, #0
 80105ec:	6062      	str	r2, [r4, #4]
 80105ee:	04d9      	lsls	r1, r3, #19
 80105f0:	6922      	ldr	r2, [r4, #16]
 80105f2:	6022      	str	r2, [r4, #0]
 80105f4:	d504      	bpl.n	8010600 <__sflush_r+0x78>
 80105f6:	1c42      	adds	r2, r0, #1
 80105f8:	d101      	bne.n	80105fe <__sflush_r+0x76>
 80105fa:	682b      	ldr	r3, [r5, #0]
 80105fc:	b903      	cbnz	r3, 8010600 <__sflush_r+0x78>
 80105fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8010600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010602:	602f      	str	r7, [r5, #0]
 8010604:	b1b9      	cbz	r1, 8010636 <__sflush_r+0xae>
 8010606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801060a:	4299      	cmp	r1, r3
 801060c:	d002      	beq.n	8010614 <__sflush_r+0x8c>
 801060e:	4628      	mov	r0, r5
 8010610:	f7fd ffca 	bl	800e5a8 <_free_r>
 8010614:	2300      	movs	r3, #0
 8010616:	6363      	str	r3, [r4, #52]	@ 0x34
 8010618:	e00d      	b.n	8010636 <__sflush_r+0xae>
 801061a:	2301      	movs	r3, #1
 801061c:	4628      	mov	r0, r5
 801061e:	47b0      	blx	r6
 8010620:	4602      	mov	r2, r0
 8010622:	1c50      	adds	r0, r2, #1
 8010624:	d1c9      	bne.n	80105ba <__sflush_r+0x32>
 8010626:	682b      	ldr	r3, [r5, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d0c6      	beq.n	80105ba <__sflush_r+0x32>
 801062c:	2b1d      	cmp	r3, #29
 801062e:	d001      	beq.n	8010634 <__sflush_r+0xac>
 8010630:	2b16      	cmp	r3, #22
 8010632:	d11e      	bne.n	8010672 <__sflush_r+0xea>
 8010634:	602f      	str	r7, [r5, #0]
 8010636:	2000      	movs	r0, #0
 8010638:	e022      	b.n	8010680 <__sflush_r+0xf8>
 801063a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801063e:	b21b      	sxth	r3, r3
 8010640:	e01b      	b.n	801067a <__sflush_r+0xf2>
 8010642:	690f      	ldr	r7, [r1, #16]
 8010644:	2f00      	cmp	r7, #0
 8010646:	d0f6      	beq.n	8010636 <__sflush_r+0xae>
 8010648:	0793      	lsls	r3, r2, #30
 801064a:	680e      	ldr	r6, [r1, #0]
 801064c:	bf08      	it	eq
 801064e:	694b      	ldreq	r3, [r1, #20]
 8010650:	600f      	str	r7, [r1, #0]
 8010652:	bf18      	it	ne
 8010654:	2300      	movne	r3, #0
 8010656:	eba6 0807 	sub.w	r8, r6, r7
 801065a:	608b      	str	r3, [r1, #8]
 801065c:	f1b8 0f00 	cmp.w	r8, #0
 8010660:	dde9      	ble.n	8010636 <__sflush_r+0xae>
 8010662:	6a21      	ldr	r1, [r4, #32]
 8010664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010666:	4643      	mov	r3, r8
 8010668:	463a      	mov	r2, r7
 801066a:	4628      	mov	r0, r5
 801066c:	47b0      	blx	r6
 801066e:	2800      	cmp	r0, #0
 8010670:	dc08      	bgt.n	8010684 <__sflush_r+0xfc>
 8010672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	f04f 30ff 	mov.w	r0, #4294967295
 8010680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010684:	4407      	add	r7, r0
 8010686:	eba8 0800 	sub.w	r8, r8, r0
 801068a:	e7e7      	b.n	801065c <__sflush_r+0xd4>
 801068c:	20400001 	.word	0x20400001

08010690 <_fflush_r>:
 8010690:	b538      	push	{r3, r4, r5, lr}
 8010692:	690b      	ldr	r3, [r1, #16]
 8010694:	4605      	mov	r5, r0
 8010696:	460c      	mov	r4, r1
 8010698:	b913      	cbnz	r3, 80106a0 <_fflush_r+0x10>
 801069a:	2500      	movs	r5, #0
 801069c:	4628      	mov	r0, r5
 801069e:	bd38      	pop	{r3, r4, r5, pc}
 80106a0:	b118      	cbz	r0, 80106aa <_fflush_r+0x1a>
 80106a2:	6a03      	ldr	r3, [r0, #32]
 80106a4:	b90b      	cbnz	r3, 80106aa <_fflush_r+0x1a>
 80106a6:	f7fc ff91 	bl	800d5cc <__sinit>
 80106aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d0f3      	beq.n	801069a <_fflush_r+0xa>
 80106b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106b4:	07d0      	lsls	r0, r2, #31
 80106b6:	d404      	bmi.n	80106c2 <_fflush_r+0x32>
 80106b8:	0599      	lsls	r1, r3, #22
 80106ba:	d402      	bmi.n	80106c2 <_fflush_r+0x32>
 80106bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106be:	f7fd f902 	bl	800d8c6 <__retarget_lock_acquire_recursive>
 80106c2:	4628      	mov	r0, r5
 80106c4:	4621      	mov	r1, r4
 80106c6:	f7ff ff5f 	bl	8010588 <__sflush_r>
 80106ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80106cc:	07da      	lsls	r2, r3, #31
 80106ce:	4605      	mov	r5, r0
 80106d0:	d4e4      	bmi.n	801069c <_fflush_r+0xc>
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	059b      	lsls	r3, r3, #22
 80106d6:	d4e1      	bmi.n	801069c <_fflush_r+0xc>
 80106d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106da:	f7fd f8f5 	bl	800d8c8 <__retarget_lock_release_recursive>
 80106de:	e7dd      	b.n	801069c <_fflush_r+0xc>

080106e0 <__sccl>:
 80106e0:	b570      	push	{r4, r5, r6, lr}
 80106e2:	780b      	ldrb	r3, [r1, #0]
 80106e4:	4604      	mov	r4, r0
 80106e6:	2b5e      	cmp	r3, #94	@ 0x5e
 80106e8:	bf0b      	itete	eq
 80106ea:	784b      	ldrbeq	r3, [r1, #1]
 80106ec:	1c4a      	addne	r2, r1, #1
 80106ee:	1c8a      	addeq	r2, r1, #2
 80106f0:	2100      	movne	r1, #0
 80106f2:	bf08      	it	eq
 80106f4:	2101      	moveq	r1, #1
 80106f6:	3801      	subs	r0, #1
 80106f8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80106fc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010700:	42a8      	cmp	r0, r5
 8010702:	d1fb      	bne.n	80106fc <__sccl+0x1c>
 8010704:	b90b      	cbnz	r3, 801070a <__sccl+0x2a>
 8010706:	1e50      	subs	r0, r2, #1
 8010708:	bd70      	pop	{r4, r5, r6, pc}
 801070a:	f081 0101 	eor.w	r1, r1, #1
 801070e:	54e1      	strb	r1, [r4, r3]
 8010710:	4610      	mov	r0, r2
 8010712:	4602      	mov	r2, r0
 8010714:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010718:	2d2d      	cmp	r5, #45	@ 0x2d
 801071a:	d005      	beq.n	8010728 <__sccl+0x48>
 801071c:	2d5d      	cmp	r5, #93	@ 0x5d
 801071e:	d016      	beq.n	801074e <__sccl+0x6e>
 8010720:	2d00      	cmp	r5, #0
 8010722:	d0f1      	beq.n	8010708 <__sccl+0x28>
 8010724:	462b      	mov	r3, r5
 8010726:	e7f2      	b.n	801070e <__sccl+0x2e>
 8010728:	7846      	ldrb	r6, [r0, #1]
 801072a:	2e5d      	cmp	r6, #93	@ 0x5d
 801072c:	d0fa      	beq.n	8010724 <__sccl+0x44>
 801072e:	42b3      	cmp	r3, r6
 8010730:	dcf8      	bgt.n	8010724 <__sccl+0x44>
 8010732:	3002      	adds	r0, #2
 8010734:	461a      	mov	r2, r3
 8010736:	3201      	adds	r2, #1
 8010738:	4296      	cmp	r6, r2
 801073a:	54a1      	strb	r1, [r4, r2]
 801073c:	dcfb      	bgt.n	8010736 <__sccl+0x56>
 801073e:	1af2      	subs	r2, r6, r3
 8010740:	3a01      	subs	r2, #1
 8010742:	1c5d      	adds	r5, r3, #1
 8010744:	42b3      	cmp	r3, r6
 8010746:	bfa8      	it	ge
 8010748:	2200      	movge	r2, #0
 801074a:	18ab      	adds	r3, r5, r2
 801074c:	e7e1      	b.n	8010712 <__sccl+0x32>
 801074e:	4610      	mov	r0, r2
 8010750:	e7da      	b.n	8010708 <__sccl+0x28>

08010752 <__submore>:
 8010752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010756:	460c      	mov	r4, r1
 8010758:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801075a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801075e:	4299      	cmp	r1, r3
 8010760:	d11d      	bne.n	801079e <__submore+0x4c>
 8010762:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010766:	f7fb ffb5 	bl	800c6d4 <_malloc_r>
 801076a:	b918      	cbnz	r0, 8010774 <__submore+0x22>
 801076c:	f04f 30ff 	mov.w	r0, #4294967295
 8010770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010774:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010778:	63a3      	str	r3, [r4, #56]	@ 0x38
 801077a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801077e:	6360      	str	r0, [r4, #52]	@ 0x34
 8010780:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010784:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010788:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801078c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010790:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010794:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010798:	6020      	str	r0, [r4, #0]
 801079a:	2000      	movs	r0, #0
 801079c:	e7e8      	b.n	8010770 <__submore+0x1e>
 801079e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80107a0:	0077      	lsls	r7, r6, #1
 80107a2:	463a      	mov	r2, r7
 80107a4:	f000 fbad 	bl	8010f02 <_realloc_r>
 80107a8:	4605      	mov	r5, r0
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0de      	beq.n	801076c <__submore+0x1a>
 80107ae:	eb00 0806 	add.w	r8, r0, r6
 80107b2:	4601      	mov	r1, r0
 80107b4:	4632      	mov	r2, r6
 80107b6:	4640      	mov	r0, r8
 80107b8:	f7fd f887 	bl	800d8ca <memcpy>
 80107bc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80107c0:	f8c4 8000 	str.w	r8, [r4]
 80107c4:	e7e9      	b.n	801079a <__submore+0x48>

080107c6 <memmove>:
 80107c6:	4288      	cmp	r0, r1
 80107c8:	b510      	push	{r4, lr}
 80107ca:	eb01 0402 	add.w	r4, r1, r2
 80107ce:	d902      	bls.n	80107d6 <memmove+0x10>
 80107d0:	4284      	cmp	r4, r0
 80107d2:	4623      	mov	r3, r4
 80107d4:	d807      	bhi.n	80107e6 <memmove+0x20>
 80107d6:	1e43      	subs	r3, r0, #1
 80107d8:	42a1      	cmp	r1, r4
 80107da:	d008      	beq.n	80107ee <memmove+0x28>
 80107dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107e4:	e7f8      	b.n	80107d8 <memmove+0x12>
 80107e6:	4402      	add	r2, r0
 80107e8:	4601      	mov	r1, r0
 80107ea:	428a      	cmp	r2, r1
 80107ec:	d100      	bne.n	80107f0 <memmove+0x2a>
 80107ee:	bd10      	pop	{r4, pc}
 80107f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107f8:	e7f7      	b.n	80107ea <memmove+0x24>

080107fa <strncmp>:
 80107fa:	b510      	push	{r4, lr}
 80107fc:	b16a      	cbz	r2, 801081a <strncmp+0x20>
 80107fe:	3901      	subs	r1, #1
 8010800:	1884      	adds	r4, r0, r2
 8010802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801080a:	429a      	cmp	r2, r3
 801080c:	d103      	bne.n	8010816 <strncmp+0x1c>
 801080e:	42a0      	cmp	r0, r4
 8010810:	d001      	beq.n	8010816 <strncmp+0x1c>
 8010812:	2a00      	cmp	r2, #0
 8010814:	d1f5      	bne.n	8010802 <strncmp+0x8>
 8010816:	1ad0      	subs	r0, r2, r3
 8010818:	bd10      	pop	{r4, pc}
 801081a:	4610      	mov	r0, r2
 801081c:	e7fc      	b.n	8010818 <strncmp+0x1e>
	...

08010820 <nan>:
 8010820:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010828 <nan+0x8>
 8010824:	4770      	bx	lr
 8010826:	bf00      	nop
 8010828:	00000000 	.word	0x00000000
 801082c:	7ff80000 	.word	0x7ff80000

08010830 <__assert_func>:
 8010830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010832:	4614      	mov	r4, r2
 8010834:	461a      	mov	r2, r3
 8010836:	4b09      	ldr	r3, [pc, #36]	@ (801085c <__assert_func+0x2c>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4605      	mov	r5, r0
 801083c:	68d8      	ldr	r0, [r3, #12]
 801083e:	b14c      	cbz	r4, 8010854 <__assert_func+0x24>
 8010840:	4b07      	ldr	r3, [pc, #28]	@ (8010860 <__assert_func+0x30>)
 8010842:	9100      	str	r1, [sp, #0]
 8010844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010848:	4906      	ldr	r1, [pc, #24]	@ (8010864 <__assert_func+0x34>)
 801084a:	462b      	mov	r3, r5
 801084c:	f000 fc06 	bl	801105c <fiprintf>
 8010850:	f000 fc16 	bl	8011080 <abort>
 8010854:	4b04      	ldr	r3, [pc, #16]	@ (8010868 <__assert_func+0x38>)
 8010856:	461c      	mov	r4, r3
 8010858:	e7f3      	b.n	8010842 <__assert_func+0x12>
 801085a:	bf00      	nop
 801085c:	20000034 	.word	0x20000034
 8010860:	080135a3 	.word	0x080135a3
 8010864:	080135b0 	.word	0x080135b0
 8010868:	080135de 	.word	0x080135de

0801086c <rshift>:
 801086c:	6903      	ldr	r3, [r0, #16]
 801086e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010872:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010876:	ea4f 1261 	mov.w	r2, r1, asr #5
 801087a:	f100 0414 	add.w	r4, r0, #20
 801087e:	dd45      	ble.n	801090c <rshift+0xa0>
 8010880:	f011 011f 	ands.w	r1, r1, #31
 8010884:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010888:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801088c:	d10c      	bne.n	80108a8 <rshift+0x3c>
 801088e:	f100 0710 	add.w	r7, r0, #16
 8010892:	4629      	mov	r1, r5
 8010894:	42b1      	cmp	r1, r6
 8010896:	d334      	bcc.n	8010902 <rshift+0x96>
 8010898:	1a9b      	subs	r3, r3, r2
 801089a:	009b      	lsls	r3, r3, #2
 801089c:	1eea      	subs	r2, r5, #3
 801089e:	4296      	cmp	r6, r2
 80108a0:	bf38      	it	cc
 80108a2:	2300      	movcc	r3, #0
 80108a4:	4423      	add	r3, r4
 80108a6:	e015      	b.n	80108d4 <rshift+0x68>
 80108a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80108ac:	f1c1 0820 	rsb	r8, r1, #32
 80108b0:	40cf      	lsrs	r7, r1
 80108b2:	f105 0e04 	add.w	lr, r5, #4
 80108b6:	46a1      	mov	r9, r4
 80108b8:	4576      	cmp	r6, lr
 80108ba:	46f4      	mov	ip, lr
 80108bc:	d815      	bhi.n	80108ea <rshift+0x7e>
 80108be:	1a9a      	subs	r2, r3, r2
 80108c0:	0092      	lsls	r2, r2, #2
 80108c2:	3a04      	subs	r2, #4
 80108c4:	3501      	adds	r5, #1
 80108c6:	42ae      	cmp	r6, r5
 80108c8:	bf38      	it	cc
 80108ca:	2200      	movcc	r2, #0
 80108cc:	18a3      	adds	r3, r4, r2
 80108ce:	50a7      	str	r7, [r4, r2]
 80108d0:	b107      	cbz	r7, 80108d4 <rshift+0x68>
 80108d2:	3304      	adds	r3, #4
 80108d4:	1b1a      	subs	r2, r3, r4
 80108d6:	42a3      	cmp	r3, r4
 80108d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80108dc:	bf08      	it	eq
 80108de:	2300      	moveq	r3, #0
 80108e0:	6102      	str	r2, [r0, #16]
 80108e2:	bf08      	it	eq
 80108e4:	6143      	streq	r3, [r0, #20]
 80108e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108ea:	f8dc c000 	ldr.w	ip, [ip]
 80108ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80108f2:	ea4c 0707 	orr.w	r7, ip, r7
 80108f6:	f849 7b04 	str.w	r7, [r9], #4
 80108fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80108fe:	40cf      	lsrs	r7, r1
 8010900:	e7da      	b.n	80108b8 <rshift+0x4c>
 8010902:	f851 cb04 	ldr.w	ip, [r1], #4
 8010906:	f847 cf04 	str.w	ip, [r7, #4]!
 801090a:	e7c3      	b.n	8010894 <rshift+0x28>
 801090c:	4623      	mov	r3, r4
 801090e:	e7e1      	b.n	80108d4 <rshift+0x68>

08010910 <__hexdig_fun>:
 8010910:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010914:	2b09      	cmp	r3, #9
 8010916:	d802      	bhi.n	801091e <__hexdig_fun+0xe>
 8010918:	3820      	subs	r0, #32
 801091a:	b2c0      	uxtb	r0, r0
 801091c:	4770      	bx	lr
 801091e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010922:	2b05      	cmp	r3, #5
 8010924:	d801      	bhi.n	801092a <__hexdig_fun+0x1a>
 8010926:	3847      	subs	r0, #71	@ 0x47
 8010928:	e7f7      	b.n	801091a <__hexdig_fun+0xa>
 801092a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801092e:	2b05      	cmp	r3, #5
 8010930:	d801      	bhi.n	8010936 <__hexdig_fun+0x26>
 8010932:	3827      	subs	r0, #39	@ 0x27
 8010934:	e7f1      	b.n	801091a <__hexdig_fun+0xa>
 8010936:	2000      	movs	r0, #0
 8010938:	4770      	bx	lr
	...

0801093c <__gethex>:
 801093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010940:	b085      	sub	sp, #20
 8010942:	468a      	mov	sl, r1
 8010944:	9302      	str	r3, [sp, #8]
 8010946:	680b      	ldr	r3, [r1, #0]
 8010948:	9001      	str	r0, [sp, #4]
 801094a:	4690      	mov	r8, r2
 801094c:	1c9c      	adds	r4, r3, #2
 801094e:	46a1      	mov	r9, r4
 8010950:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010954:	2830      	cmp	r0, #48	@ 0x30
 8010956:	d0fa      	beq.n	801094e <__gethex+0x12>
 8010958:	eba9 0303 	sub.w	r3, r9, r3
 801095c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010960:	f7ff ffd6 	bl	8010910 <__hexdig_fun>
 8010964:	4605      	mov	r5, r0
 8010966:	2800      	cmp	r0, #0
 8010968:	d168      	bne.n	8010a3c <__gethex+0x100>
 801096a:	49a0      	ldr	r1, [pc, #640]	@ (8010bec <__gethex+0x2b0>)
 801096c:	2201      	movs	r2, #1
 801096e:	4648      	mov	r0, r9
 8010970:	f7ff ff43 	bl	80107fa <strncmp>
 8010974:	4607      	mov	r7, r0
 8010976:	2800      	cmp	r0, #0
 8010978:	d167      	bne.n	8010a4a <__gethex+0x10e>
 801097a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801097e:	4626      	mov	r6, r4
 8010980:	f7ff ffc6 	bl	8010910 <__hexdig_fun>
 8010984:	2800      	cmp	r0, #0
 8010986:	d062      	beq.n	8010a4e <__gethex+0x112>
 8010988:	4623      	mov	r3, r4
 801098a:	7818      	ldrb	r0, [r3, #0]
 801098c:	2830      	cmp	r0, #48	@ 0x30
 801098e:	4699      	mov	r9, r3
 8010990:	f103 0301 	add.w	r3, r3, #1
 8010994:	d0f9      	beq.n	801098a <__gethex+0x4e>
 8010996:	f7ff ffbb 	bl	8010910 <__hexdig_fun>
 801099a:	fab0 f580 	clz	r5, r0
 801099e:	096d      	lsrs	r5, r5, #5
 80109a0:	f04f 0b01 	mov.w	fp, #1
 80109a4:	464a      	mov	r2, r9
 80109a6:	4616      	mov	r6, r2
 80109a8:	3201      	adds	r2, #1
 80109aa:	7830      	ldrb	r0, [r6, #0]
 80109ac:	f7ff ffb0 	bl	8010910 <__hexdig_fun>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d1f8      	bne.n	80109a6 <__gethex+0x6a>
 80109b4:	498d      	ldr	r1, [pc, #564]	@ (8010bec <__gethex+0x2b0>)
 80109b6:	2201      	movs	r2, #1
 80109b8:	4630      	mov	r0, r6
 80109ba:	f7ff ff1e 	bl	80107fa <strncmp>
 80109be:	2800      	cmp	r0, #0
 80109c0:	d13f      	bne.n	8010a42 <__gethex+0x106>
 80109c2:	b944      	cbnz	r4, 80109d6 <__gethex+0x9a>
 80109c4:	1c74      	adds	r4, r6, #1
 80109c6:	4622      	mov	r2, r4
 80109c8:	4616      	mov	r6, r2
 80109ca:	3201      	adds	r2, #1
 80109cc:	7830      	ldrb	r0, [r6, #0]
 80109ce:	f7ff ff9f 	bl	8010910 <__hexdig_fun>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d1f8      	bne.n	80109c8 <__gethex+0x8c>
 80109d6:	1ba4      	subs	r4, r4, r6
 80109d8:	00a7      	lsls	r7, r4, #2
 80109da:	7833      	ldrb	r3, [r6, #0]
 80109dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80109e0:	2b50      	cmp	r3, #80	@ 0x50
 80109e2:	d13e      	bne.n	8010a62 <__gethex+0x126>
 80109e4:	7873      	ldrb	r3, [r6, #1]
 80109e6:	2b2b      	cmp	r3, #43	@ 0x2b
 80109e8:	d033      	beq.n	8010a52 <__gethex+0x116>
 80109ea:	2b2d      	cmp	r3, #45	@ 0x2d
 80109ec:	d034      	beq.n	8010a58 <__gethex+0x11c>
 80109ee:	1c71      	adds	r1, r6, #1
 80109f0:	2400      	movs	r4, #0
 80109f2:	7808      	ldrb	r0, [r1, #0]
 80109f4:	f7ff ff8c 	bl	8010910 <__hexdig_fun>
 80109f8:	1e43      	subs	r3, r0, #1
 80109fa:	b2db      	uxtb	r3, r3
 80109fc:	2b18      	cmp	r3, #24
 80109fe:	d830      	bhi.n	8010a62 <__gethex+0x126>
 8010a00:	f1a0 0210 	sub.w	r2, r0, #16
 8010a04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010a08:	f7ff ff82 	bl	8010910 <__hexdig_fun>
 8010a0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8010a10:	fa5f fc8c 	uxtb.w	ip, ip
 8010a14:	f1bc 0f18 	cmp.w	ip, #24
 8010a18:	f04f 030a 	mov.w	r3, #10
 8010a1c:	d91e      	bls.n	8010a5c <__gethex+0x120>
 8010a1e:	b104      	cbz	r4, 8010a22 <__gethex+0xe6>
 8010a20:	4252      	negs	r2, r2
 8010a22:	4417      	add	r7, r2
 8010a24:	f8ca 1000 	str.w	r1, [sl]
 8010a28:	b1ed      	cbz	r5, 8010a66 <__gethex+0x12a>
 8010a2a:	f1bb 0f00 	cmp.w	fp, #0
 8010a2e:	bf0c      	ite	eq
 8010a30:	2506      	moveq	r5, #6
 8010a32:	2500      	movne	r5, #0
 8010a34:	4628      	mov	r0, r5
 8010a36:	b005      	add	sp, #20
 8010a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3c:	2500      	movs	r5, #0
 8010a3e:	462c      	mov	r4, r5
 8010a40:	e7b0      	b.n	80109a4 <__gethex+0x68>
 8010a42:	2c00      	cmp	r4, #0
 8010a44:	d1c7      	bne.n	80109d6 <__gethex+0x9a>
 8010a46:	4627      	mov	r7, r4
 8010a48:	e7c7      	b.n	80109da <__gethex+0x9e>
 8010a4a:	464e      	mov	r6, r9
 8010a4c:	462f      	mov	r7, r5
 8010a4e:	2501      	movs	r5, #1
 8010a50:	e7c3      	b.n	80109da <__gethex+0x9e>
 8010a52:	2400      	movs	r4, #0
 8010a54:	1cb1      	adds	r1, r6, #2
 8010a56:	e7cc      	b.n	80109f2 <__gethex+0xb6>
 8010a58:	2401      	movs	r4, #1
 8010a5a:	e7fb      	b.n	8010a54 <__gethex+0x118>
 8010a5c:	fb03 0002 	mla	r0, r3, r2, r0
 8010a60:	e7ce      	b.n	8010a00 <__gethex+0xc4>
 8010a62:	4631      	mov	r1, r6
 8010a64:	e7de      	b.n	8010a24 <__gethex+0xe8>
 8010a66:	eba6 0309 	sub.w	r3, r6, r9
 8010a6a:	3b01      	subs	r3, #1
 8010a6c:	4629      	mov	r1, r5
 8010a6e:	2b07      	cmp	r3, #7
 8010a70:	dc0a      	bgt.n	8010a88 <__gethex+0x14c>
 8010a72:	9801      	ldr	r0, [sp, #4]
 8010a74:	f7fd fde2 	bl	800e63c <_Balloc>
 8010a78:	4604      	mov	r4, r0
 8010a7a:	b940      	cbnz	r0, 8010a8e <__gethex+0x152>
 8010a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8010bf0 <__gethex+0x2b4>)
 8010a7e:	4602      	mov	r2, r0
 8010a80:	21e4      	movs	r1, #228	@ 0xe4
 8010a82:	485c      	ldr	r0, [pc, #368]	@ (8010bf4 <__gethex+0x2b8>)
 8010a84:	f7ff fed4 	bl	8010830 <__assert_func>
 8010a88:	3101      	adds	r1, #1
 8010a8a:	105b      	asrs	r3, r3, #1
 8010a8c:	e7ef      	b.n	8010a6e <__gethex+0x132>
 8010a8e:	f100 0a14 	add.w	sl, r0, #20
 8010a92:	2300      	movs	r3, #0
 8010a94:	4655      	mov	r5, sl
 8010a96:	469b      	mov	fp, r3
 8010a98:	45b1      	cmp	r9, r6
 8010a9a:	d337      	bcc.n	8010b0c <__gethex+0x1d0>
 8010a9c:	f845 bb04 	str.w	fp, [r5], #4
 8010aa0:	eba5 050a 	sub.w	r5, r5, sl
 8010aa4:	10ad      	asrs	r5, r5, #2
 8010aa6:	6125      	str	r5, [r4, #16]
 8010aa8:	4658      	mov	r0, fp
 8010aaa:	f7fd feb9 	bl	800e820 <__hi0bits>
 8010aae:	016d      	lsls	r5, r5, #5
 8010ab0:	f8d8 6000 	ldr.w	r6, [r8]
 8010ab4:	1a2d      	subs	r5, r5, r0
 8010ab6:	42b5      	cmp	r5, r6
 8010ab8:	dd54      	ble.n	8010b64 <__gethex+0x228>
 8010aba:	1bad      	subs	r5, r5, r6
 8010abc:	4629      	mov	r1, r5
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f7fe fa45 	bl	800ef4e <__any_on>
 8010ac4:	4681      	mov	r9, r0
 8010ac6:	b178      	cbz	r0, 8010ae8 <__gethex+0x1ac>
 8010ac8:	1e6b      	subs	r3, r5, #1
 8010aca:	1159      	asrs	r1, r3, #5
 8010acc:	f003 021f 	and.w	r2, r3, #31
 8010ad0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010ad4:	f04f 0901 	mov.w	r9, #1
 8010ad8:	fa09 f202 	lsl.w	r2, r9, r2
 8010adc:	420a      	tst	r2, r1
 8010ade:	d003      	beq.n	8010ae8 <__gethex+0x1ac>
 8010ae0:	454b      	cmp	r3, r9
 8010ae2:	dc36      	bgt.n	8010b52 <__gethex+0x216>
 8010ae4:	f04f 0902 	mov.w	r9, #2
 8010ae8:	4629      	mov	r1, r5
 8010aea:	4620      	mov	r0, r4
 8010aec:	f7ff febe 	bl	801086c <rshift>
 8010af0:	442f      	add	r7, r5
 8010af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010af6:	42bb      	cmp	r3, r7
 8010af8:	da42      	bge.n	8010b80 <__gethex+0x244>
 8010afa:	9801      	ldr	r0, [sp, #4]
 8010afc:	4621      	mov	r1, r4
 8010afe:	f7fd fddd 	bl	800e6bc <_Bfree>
 8010b02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b04:	2300      	movs	r3, #0
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	25a3      	movs	r5, #163	@ 0xa3
 8010b0a:	e793      	b.n	8010a34 <__gethex+0xf8>
 8010b0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010b10:	2a2e      	cmp	r2, #46	@ 0x2e
 8010b12:	d012      	beq.n	8010b3a <__gethex+0x1fe>
 8010b14:	2b20      	cmp	r3, #32
 8010b16:	d104      	bne.n	8010b22 <__gethex+0x1e6>
 8010b18:	f845 bb04 	str.w	fp, [r5], #4
 8010b1c:	f04f 0b00 	mov.w	fp, #0
 8010b20:	465b      	mov	r3, fp
 8010b22:	7830      	ldrb	r0, [r6, #0]
 8010b24:	9303      	str	r3, [sp, #12]
 8010b26:	f7ff fef3 	bl	8010910 <__hexdig_fun>
 8010b2a:	9b03      	ldr	r3, [sp, #12]
 8010b2c:	f000 000f 	and.w	r0, r0, #15
 8010b30:	4098      	lsls	r0, r3
 8010b32:	ea4b 0b00 	orr.w	fp, fp, r0
 8010b36:	3304      	adds	r3, #4
 8010b38:	e7ae      	b.n	8010a98 <__gethex+0x15c>
 8010b3a:	45b1      	cmp	r9, r6
 8010b3c:	d8ea      	bhi.n	8010b14 <__gethex+0x1d8>
 8010b3e:	492b      	ldr	r1, [pc, #172]	@ (8010bec <__gethex+0x2b0>)
 8010b40:	9303      	str	r3, [sp, #12]
 8010b42:	2201      	movs	r2, #1
 8010b44:	4630      	mov	r0, r6
 8010b46:	f7ff fe58 	bl	80107fa <strncmp>
 8010b4a:	9b03      	ldr	r3, [sp, #12]
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	d1e1      	bne.n	8010b14 <__gethex+0x1d8>
 8010b50:	e7a2      	b.n	8010a98 <__gethex+0x15c>
 8010b52:	1ea9      	subs	r1, r5, #2
 8010b54:	4620      	mov	r0, r4
 8010b56:	f7fe f9fa 	bl	800ef4e <__any_on>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d0c2      	beq.n	8010ae4 <__gethex+0x1a8>
 8010b5e:	f04f 0903 	mov.w	r9, #3
 8010b62:	e7c1      	b.n	8010ae8 <__gethex+0x1ac>
 8010b64:	da09      	bge.n	8010b7a <__gethex+0x23e>
 8010b66:	1b75      	subs	r5, r6, r5
 8010b68:	4621      	mov	r1, r4
 8010b6a:	9801      	ldr	r0, [sp, #4]
 8010b6c:	462a      	mov	r2, r5
 8010b6e:	f7fd ffb5 	bl	800eadc <__lshift>
 8010b72:	1b7f      	subs	r7, r7, r5
 8010b74:	4604      	mov	r4, r0
 8010b76:	f100 0a14 	add.w	sl, r0, #20
 8010b7a:	f04f 0900 	mov.w	r9, #0
 8010b7e:	e7b8      	b.n	8010af2 <__gethex+0x1b6>
 8010b80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010b84:	42bd      	cmp	r5, r7
 8010b86:	dd6f      	ble.n	8010c68 <__gethex+0x32c>
 8010b88:	1bed      	subs	r5, r5, r7
 8010b8a:	42ae      	cmp	r6, r5
 8010b8c:	dc34      	bgt.n	8010bf8 <__gethex+0x2bc>
 8010b8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010b92:	2b02      	cmp	r3, #2
 8010b94:	d022      	beq.n	8010bdc <__gethex+0x2a0>
 8010b96:	2b03      	cmp	r3, #3
 8010b98:	d024      	beq.n	8010be4 <__gethex+0x2a8>
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d115      	bne.n	8010bca <__gethex+0x28e>
 8010b9e:	42ae      	cmp	r6, r5
 8010ba0:	d113      	bne.n	8010bca <__gethex+0x28e>
 8010ba2:	2e01      	cmp	r6, #1
 8010ba4:	d10b      	bne.n	8010bbe <__gethex+0x282>
 8010ba6:	9a02      	ldr	r2, [sp, #8]
 8010ba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010bac:	6013      	str	r3, [r2, #0]
 8010bae:	2301      	movs	r3, #1
 8010bb0:	6123      	str	r3, [r4, #16]
 8010bb2:	f8ca 3000 	str.w	r3, [sl]
 8010bb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bb8:	2562      	movs	r5, #98	@ 0x62
 8010bba:	601c      	str	r4, [r3, #0]
 8010bbc:	e73a      	b.n	8010a34 <__gethex+0xf8>
 8010bbe:	1e71      	subs	r1, r6, #1
 8010bc0:	4620      	mov	r0, r4
 8010bc2:	f7fe f9c4 	bl	800ef4e <__any_on>
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d1ed      	bne.n	8010ba6 <__gethex+0x26a>
 8010bca:	9801      	ldr	r0, [sp, #4]
 8010bcc:	4621      	mov	r1, r4
 8010bce:	f7fd fd75 	bl	800e6bc <_Bfree>
 8010bd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	6013      	str	r3, [r2, #0]
 8010bd8:	2550      	movs	r5, #80	@ 0x50
 8010bda:	e72b      	b.n	8010a34 <__gethex+0xf8>
 8010bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d1f3      	bne.n	8010bca <__gethex+0x28e>
 8010be2:	e7e0      	b.n	8010ba6 <__gethex+0x26a>
 8010be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d1dd      	bne.n	8010ba6 <__gethex+0x26a>
 8010bea:	e7ee      	b.n	8010bca <__gethex+0x28e>
 8010bec:	0801356d 	.word	0x0801356d
 8010bf0:	08013503 	.word	0x08013503
 8010bf4:	080135df 	.word	0x080135df
 8010bf8:	1e6f      	subs	r7, r5, #1
 8010bfa:	f1b9 0f00 	cmp.w	r9, #0
 8010bfe:	d130      	bne.n	8010c62 <__gethex+0x326>
 8010c00:	b127      	cbz	r7, 8010c0c <__gethex+0x2d0>
 8010c02:	4639      	mov	r1, r7
 8010c04:	4620      	mov	r0, r4
 8010c06:	f7fe f9a2 	bl	800ef4e <__any_on>
 8010c0a:	4681      	mov	r9, r0
 8010c0c:	117a      	asrs	r2, r7, #5
 8010c0e:	2301      	movs	r3, #1
 8010c10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010c14:	f007 071f 	and.w	r7, r7, #31
 8010c18:	40bb      	lsls	r3, r7
 8010c1a:	4213      	tst	r3, r2
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	4620      	mov	r0, r4
 8010c20:	bf18      	it	ne
 8010c22:	f049 0902 	orrne.w	r9, r9, #2
 8010c26:	f7ff fe21 	bl	801086c <rshift>
 8010c2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010c2e:	1b76      	subs	r6, r6, r5
 8010c30:	2502      	movs	r5, #2
 8010c32:	f1b9 0f00 	cmp.w	r9, #0
 8010c36:	d047      	beq.n	8010cc8 <__gethex+0x38c>
 8010c38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010c3c:	2b02      	cmp	r3, #2
 8010c3e:	d015      	beq.n	8010c6c <__gethex+0x330>
 8010c40:	2b03      	cmp	r3, #3
 8010c42:	d017      	beq.n	8010c74 <__gethex+0x338>
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d109      	bne.n	8010c5c <__gethex+0x320>
 8010c48:	f019 0f02 	tst.w	r9, #2
 8010c4c:	d006      	beq.n	8010c5c <__gethex+0x320>
 8010c4e:	f8da 3000 	ldr.w	r3, [sl]
 8010c52:	ea49 0903 	orr.w	r9, r9, r3
 8010c56:	f019 0f01 	tst.w	r9, #1
 8010c5a:	d10e      	bne.n	8010c7a <__gethex+0x33e>
 8010c5c:	f045 0510 	orr.w	r5, r5, #16
 8010c60:	e032      	b.n	8010cc8 <__gethex+0x38c>
 8010c62:	f04f 0901 	mov.w	r9, #1
 8010c66:	e7d1      	b.n	8010c0c <__gethex+0x2d0>
 8010c68:	2501      	movs	r5, #1
 8010c6a:	e7e2      	b.n	8010c32 <__gethex+0x2f6>
 8010c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c6e:	f1c3 0301 	rsb	r3, r3, #1
 8010c72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d0f0      	beq.n	8010c5c <__gethex+0x320>
 8010c7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010c7e:	f104 0314 	add.w	r3, r4, #20
 8010c82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010c86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010c8a:	f04f 0c00 	mov.w	ip, #0
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010c98:	d01b      	beq.n	8010cd2 <__gethex+0x396>
 8010c9a:	3201      	adds	r2, #1
 8010c9c:	6002      	str	r2, [r0, #0]
 8010c9e:	2d02      	cmp	r5, #2
 8010ca0:	f104 0314 	add.w	r3, r4, #20
 8010ca4:	d13c      	bne.n	8010d20 <__gethex+0x3e4>
 8010ca6:	f8d8 2000 	ldr.w	r2, [r8]
 8010caa:	3a01      	subs	r2, #1
 8010cac:	42b2      	cmp	r2, r6
 8010cae:	d109      	bne.n	8010cc4 <__gethex+0x388>
 8010cb0:	1171      	asrs	r1, r6, #5
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010cb8:	f006 061f 	and.w	r6, r6, #31
 8010cbc:	fa02 f606 	lsl.w	r6, r2, r6
 8010cc0:	421e      	tst	r6, r3
 8010cc2:	d13a      	bne.n	8010d3a <__gethex+0x3fe>
 8010cc4:	f045 0520 	orr.w	r5, r5, #32
 8010cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010cca:	601c      	str	r4, [r3, #0]
 8010ccc:	9b02      	ldr	r3, [sp, #8]
 8010cce:	601f      	str	r7, [r3, #0]
 8010cd0:	e6b0      	b.n	8010a34 <__gethex+0xf8>
 8010cd2:	4299      	cmp	r1, r3
 8010cd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010cd8:	d8d9      	bhi.n	8010c8e <__gethex+0x352>
 8010cda:	68a3      	ldr	r3, [r4, #8]
 8010cdc:	459b      	cmp	fp, r3
 8010cde:	db17      	blt.n	8010d10 <__gethex+0x3d4>
 8010ce0:	6861      	ldr	r1, [r4, #4]
 8010ce2:	9801      	ldr	r0, [sp, #4]
 8010ce4:	3101      	adds	r1, #1
 8010ce6:	f7fd fca9 	bl	800e63c <_Balloc>
 8010cea:	4681      	mov	r9, r0
 8010cec:	b918      	cbnz	r0, 8010cf6 <__gethex+0x3ba>
 8010cee:	4b1a      	ldr	r3, [pc, #104]	@ (8010d58 <__gethex+0x41c>)
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	2184      	movs	r1, #132	@ 0x84
 8010cf4:	e6c5      	b.n	8010a82 <__gethex+0x146>
 8010cf6:	6922      	ldr	r2, [r4, #16]
 8010cf8:	3202      	adds	r2, #2
 8010cfa:	f104 010c 	add.w	r1, r4, #12
 8010cfe:	0092      	lsls	r2, r2, #2
 8010d00:	300c      	adds	r0, #12
 8010d02:	f7fc fde2 	bl	800d8ca <memcpy>
 8010d06:	4621      	mov	r1, r4
 8010d08:	9801      	ldr	r0, [sp, #4]
 8010d0a:	f7fd fcd7 	bl	800e6bc <_Bfree>
 8010d0e:	464c      	mov	r4, r9
 8010d10:	6923      	ldr	r3, [r4, #16]
 8010d12:	1c5a      	adds	r2, r3, #1
 8010d14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d18:	6122      	str	r2, [r4, #16]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	615a      	str	r2, [r3, #20]
 8010d1e:	e7be      	b.n	8010c9e <__gethex+0x362>
 8010d20:	6922      	ldr	r2, [r4, #16]
 8010d22:	455a      	cmp	r2, fp
 8010d24:	dd0b      	ble.n	8010d3e <__gethex+0x402>
 8010d26:	2101      	movs	r1, #1
 8010d28:	4620      	mov	r0, r4
 8010d2a:	f7ff fd9f 	bl	801086c <rshift>
 8010d2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d32:	3701      	adds	r7, #1
 8010d34:	42bb      	cmp	r3, r7
 8010d36:	f6ff aee0 	blt.w	8010afa <__gethex+0x1be>
 8010d3a:	2501      	movs	r5, #1
 8010d3c:	e7c2      	b.n	8010cc4 <__gethex+0x388>
 8010d3e:	f016 061f 	ands.w	r6, r6, #31
 8010d42:	d0fa      	beq.n	8010d3a <__gethex+0x3fe>
 8010d44:	4453      	add	r3, sl
 8010d46:	f1c6 0620 	rsb	r6, r6, #32
 8010d4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010d4e:	f7fd fd67 	bl	800e820 <__hi0bits>
 8010d52:	42b0      	cmp	r0, r6
 8010d54:	dbe7      	blt.n	8010d26 <__gethex+0x3ea>
 8010d56:	e7f0      	b.n	8010d3a <__gethex+0x3fe>
 8010d58:	08013503 	.word	0x08013503

08010d5c <L_shift>:
 8010d5c:	f1c2 0208 	rsb	r2, r2, #8
 8010d60:	0092      	lsls	r2, r2, #2
 8010d62:	b570      	push	{r4, r5, r6, lr}
 8010d64:	f1c2 0620 	rsb	r6, r2, #32
 8010d68:	6843      	ldr	r3, [r0, #4]
 8010d6a:	6804      	ldr	r4, [r0, #0]
 8010d6c:	fa03 f506 	lsl.w	r5, r3, r6
 8010d70:	432c      	orrs	r4, r5
 8010d72:	40d3      	lsrs	r3, r2
 8010d74:	6004      	str	r4, [r0, #0]
 8010d76:	f840 3f04 	str.w	r3, [r0, #4]!
 8010d7a:	4288      	cmp	r0, r1
 8010d7c:	d3f4      	bcc.n	8010d68 <L_shift+0xc>
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}

08010d80 <__match>:
 8010d80:	b530      	push	{r4, r5, lr}
 8010d82:	6803      	ldr	r3, [r0, #0]
 8010d84:	3301      	adds	r3, #1
 8010d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d8a:	b914      	cbnz	r4, 8010d92 <__match+0x12>
 8010d8c:	6003      	str	r3, [r0, #0]
 8010d8e:	2001      	movs	r0, #1
 8010d90:	bd30      	pop	{r4, r5, pc}
 8010d92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010d9a:	2d19      	cmp	r5, #25
 8010d9c:	bf98      	it	ls
 8010d9e:	3220      	addls	r2, #32
 8010da0:	42a2      	cmp	r2, r4
 8010da2:	d0f0      	beq.n	8010d86 <__match+0x6>
 8010da4:	2000      	movs	r0, #0
 8010da6:	e7f3      	b.n	8010d90 <__match+0x10>

08010da8 <__hexnan>:
 8010da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dac:	680b      	ldr	r3, [r1, #0]
 8010dae:	6801      	ldr	r1, [r0, #0]
 8010db0:	115e      	asrs	r6, r3, #5
 8010db2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010db6:	f013 031f 	ands.w	r3, r3, #31
 8010dba:	b087      	sub	sp, #28
 8010dbc:	bf18      	it	ne
 8010dbe:	3604      	addne	r6, #4
 8010dc0:	2500      	movs	r5, #0
 8010dc2:	1f37      	subs	r7, r6, #4
 8010dc4:	4682      	mov	sl, r0
 8010dc6:	4690      	mov	r8, r2
 8010dc8:	9301      	str	r3, [sp, #4]
 8010dca:	f846 5c04 	str.w	r5, [r6, #-4]
 8010dce:	46b9      	mov	r9, r7
 8010dd0:	463c      	mov	r4, r7
 8010dd2:	9502      	str	r5, [sp, #8]
 8010dd4:	46ab      	mov	fp, r5
 8010dd6:	784a      	ldrb	r2, [r1, #1]
 8010dd8:	1c4b      	adds	r3, r1, #1
 8010dda:	9303      	str	r3, [sp, #12]
 8010ddc:	b342      	cbz	r2, 8010e30 <__hexnan+0x88>
 8010dde:	4610      	mov	r0, r2
 8010de0:	9105      	str	r1, [sp, #20]
 8010de2:	9204      	str	r2, [sp, #16]
 8010de4:	f7ff fd94 	bl	8010910 <__hexdig_fun>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	d151      	bne.n	8010e90 <__hexnan+0xe8>
 8010dec:	9a04      	ldr	r2, [sp, #16]
 8010dee:	9905      	ldr	r1, [sp, #20]
 8010df0:	2a20      	cmp	r2, #32
 8010df2:	d818      	bhi.n	8010e26 <__hexnan+0x7e>
 8010df4:	9b02      	ldr	r3, [sp, #8]
 8010df6:	459b      	cmp	fp, r3
 8010df8:	dd13      	ble.n	8010e22 <__hexnan+0x7a>
 8010dfa:	454c      	cmp	r4, r9
 8010dfc:	d206      	bcs.n	8010e0c <__hexnan+0x64>
 8010dfe:	2d07      	cmp	r5, #7
 8010e00:	dc04      	bgt.n	8010e0c <__hexnan+0x64>
 8010e02:	462a      	mov	r2, r5
 8010e04:	4649      	mov	r1, r9
 8010e06:	4620      	mov	r0, r4
 8010e08:	f7ff ffa8 	bl	8010d5c <L_shift>
 8010e0c:	4544      	cmp	r4, r8
 8010e0e:	d952      	bls.n	8010eb6 <__hexnan+0x10e>
 8010e10:	2300      	movs	r3, #0
 8010e12:	f1a4 0904 	sub.w	r9, r4, #4
 8010e16:	f844 3c04 	str.w	r3, [r4, #-4]
 8010e1a:	f8cd b008 	str.w	fp, [sp, #8]
 8010e1e:	464c      	mov	r4, r9
 8010e20:	461d      	mov	r5, r3
 8010e22:	9903      	ldr	r1, [sp, #12]
 8010e24:	e7d7      	b.n	8010dd6 <__hexnan+0x2e>
 8010e26:	2a29      	cmp	r2, #41	@ 0x29
 8010e28:	d157      	bne.n	8010eda <__hexnan+0x132>
 8010e2a:	3102      	adds	r1, #2
 8010e2c:	f8ca 1000 	str.w	r1, [sl]
 8010e30:	f1bb 0f00 	cmp.w	fp, #0
 8010e34:	d051      	beq.n	8010eda <__hexnan+0x132>
 8010e36:	454c      	cmp	r4, r9
 8010e38:	d206      	bcs.n	8010e48 <__hexnan+0xa0>
 8010e3a:	2d07      	cmp	r5, #7
 8010e3c:	dc04      	bgt.n	8010e48 <__hexnan+0xa0>
 8010e3e:	462a      	mov	r2, r5
 8010e40:	4649      	mov	r1, r9
 8010e42:	4620      	mov	r0, r4
 8010e44:	f7ff ff8a 	bl	8010d5c <L_shift>
 8010e48:	4544      	cmp	r4, r8
 8010e4a:	d936      	bls.n	8010eba <__hexnan+0x112>
 8010e4c:	f1a8 0204 	sub.w	r2, r8, #4
 8010e50:	4623      	mov	r3, r4
 8010e52:	f853 1b04 	ldr.w	r1, [r3], #4
 8010e56:	f842 1f04 	str.w	r1, [r2, #4]!
 8010e5a:	429f      	cmp	r7, r3
 8010e5c:	d2f9      	bcs.n	8010e52 <__hexnan+0xaa>
 8010e5e:	1b3b      	subs	r3, r7, r4
 8010e60:	f023 0303 	bic.w	r3, r3, #3
 8010e64:	3304      	adds	r3, #4
 8010e66:	3401      	adds	r4, #1
 8010e68:	3e03      	subs	r6, #3
 8010e6a:	42b4      	cmp	r4, r6
 8010e6c:	bf88      	it	hi
 8010e6e:	2304      	movhi	r3, #4
 8010e70:	4443      	add	r3, r8
 8010e72:	2200      	movs	r2, #0
 8010e74:	f843 2b04 	str.w	r2, [r3], #4
 8010e78:	429f      	cmp	r7, r3
 8010e7a:	d2fb      	bcs.n	8010e74 <__hexnan+0xcc>
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	b91b      	cbnz	r3, 8010e88 <__hexnan+0xe0>
 8010e80:	4547      	cmp	r7, r8
 8010e82:	d128      	bne.n	8010ed6 <__hexnan+0x12e>
 8010e84:	2301      	movs	r3, #1
 8010e86:	603b      	str	r3, [r7, #0]
 8010e88:	2005      	movs	r0, #5
 8010e8a:	b007      	add	sp, #28
 8010e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e90:	3501      	adds	r5, #1
 8010e92:	2d08      	cmp	r5, #8
 8010e94:	f10b 0b01 	add.w	fp, fp, #1
 8010e98:	dd06      	ble.n	8010ea8 <__hexnan+0x100>
 8010e9a:	4544      	cmp	r4, r8
 8010e9c:	d9c1      	bls.n	8010e22 <__hexnan+0x7a>
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ea4:	2501      	movs	r5, #1
 8010ea6:	3c04      	subs	r4, #4
 8010ea8:	6822      	ldr	r2, [r4, #0]
 8010eaa:	f000 000f 	and.w	r0, r0, #15
 8010eae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010eb2:	6020      	str	r0, [r4, #0]
 8010eb4:	e7b5      	b.n	8010e22 <__hexnan+0x7a>
 8010eb6:	2508      	movs	r5, #8
 8010eb8:	e7b3      	b.n	8010e22 <__hexnan+0x7a>
 8010eba:	9b01      	ldr	r3, [sp, #4]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d0dd      	beq.n	8010e7c <__hexnan+0xd4>
 8010ec0:	f1c3 0320 	rsb	r3, r3, #32
 8010ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ec8:	40da      	lsrs	r2, r3
 8010eca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010ece:	4013      	ands	r3, r2
 8010ed0:	f846 3c04 	str.w	r3, [r6, #-4]
 8010ed4:	e7d2      	b.n	8010e7c <__hexnan+0xd4>
 8010ed6:	3f04      	subs	r7, #4
 8010ed8:	e7d0      	b.n	8010e7c <__hexnan+0xd4>
 8010eda:	2004      	movs	r0, #4
 8010edc:	e7d5      	b.n	8010e8a <__hexnan+0xe2>

08010ede <__ascii_mbtowc>:
 8010ede:	b082      	sub	sp, #8
 8010ee0:	b901      	cbnz	r1, 8010ee4 <__ascii_mbtowc+0x6>
 8010ee2:	a901      	add	r1, sp, #4
 8010ee4:	b142      	cbz	r2, 8010ef8 <__ascii_mbtowc+0x1a>
 8010ee6:	b14b      	cbz	r3, 8010efc <__ascii_mbtowc+0x1e>
 8010ee8:	7813      	ldrb	r3, [r2, #0]
 8010eea:	600b      	str	r3, [r1, #0]
 8010eec:	7812      	ldrb	r2, [r2, #0]
 8010eee:	1e10      	subs	r0, r2, #0
 8010ef0:	bf18      	it	ne
 8010ef2:	2001      	movne	r0, #1
 8010ef4:	b002      	add	sp, #8
 8010ef6:	4770      	bx	lr
 8010ef8:	4610      	mov	r0, r2
 8010efa:	e7fb      	b.n	8010ef4 <__ascii_mbtowc+0x16>
 8010efc:	f06f 0001 	mvn.w	r0, #1
 8010f00:	e7f8      	b.n	8010ef4 <__ascii_mbtowc+0x16>

08010f02 <_realloc_r>:
 8010f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f06:	4607      	mov	r7, r0
 8010f08:	4614      	mov	r4, r2
 8010f0a:	460d      	mov	r5, r1
 8010f0c:	b921      	cbnz	r1, 8010f18 <_realloc_r+0x16>
 8010f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f12:	4611      	mov	r1, r2
 8010f14:	f7fb bbde 	b.w	800c6d4 <_malloc_r>
 8010f18:	b92a      	cbnz	r2, 8010f26 <_realloc_r+0x24>
 8010f1a:	f7fd fb45 	bl	800e5a8 <_free_r>
 8010f1e:	4625      	mov	r5, r4
 8010f20:	4628      	mov	r0, r5
 8010f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f26:	f000 f8b2 	bl	801108e <_malloc_usable_size_r>
 8010f2a:	4284      	cmp	r4, r0
 8010f2c:	4606      	mov	r6, r0
 8010f2e:	d802      	bhi.n	8010f36 <_realloc_r+0x34>
 8010f30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010f34:	d8f4      	bhi.n	8010f20 <_realloc_r+0x1e>
 8010f36:	4621      	mov	r1, r4
 8010f38:	4638      	mov	r0, r7
 8010f3a:	f7fb fbcb 	bl	800c6d4 <_malloc_r>
 8010f3e:	4680      	mov	r8, r0
 8010f40:	b908      	cbnz	r0, 8010f46 <_realloc_r+0x44>
 8010f42:	4645      	mov	r5, r8
 8010f44:	e7ec      	b.n	8010f20 <_realloc_r+0x1e>
 8010f46:	42b4      	cmp	r4, r6
 8010f48:	4622      	mov	r2, r4
 8010f4a:	4629      	mov	r1, r5
 8010f4c:	bf28      	it	cs
 8010f4e:	4632      	movcs	r2, r6
 8010f50:	f7fc fcbb 	bl	800d8ca <memcpy>
 8010f54:	4629      	mov	r1, r5
 8010f56:	4638      	mov	r0, r7
 8010f58:	f7fd fb26 	bl	800e5a8 <_free_r>
 8010f5c:	e7f1      	b.n	8010f42 <_realloc_r+0x40>
	...

08010f60 <_strtoul_l.isra.0>:
 8010f60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f64:	4e34      	ldr	r6, [pc, #208]	@ (8011038 <_strtoul_l.isra.0+0xd8>)
 8010f66:	4686      	mov	lr, r0
 8010f68:	460d      	mov	r5, r1
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010f70:	5d37      	ldrb	r7, [r6, r4]
 8010f72:	f017 0708 	ands.w	r7, r7, #8
 8010f76:	d1f8      	bne.n	8010f6a <_strtoul_l.isra.0+0xa>
 8010f78:	2c2d      	cmp	r4, #45	@ 0x2d
 8010f7a:	d110      	bne.n	8010f9e <_strtoul_l.isra.0+0x3e>
 8010f7c:	782c      	ldrb	r4, [r5, #0]
 8010f7e:	2701      	movs	r7, #1
 8010f80:	1c85      	adds	r5, r0, #2
 8010f82:	f033 0010 	bics.w	r0, r3, #16
 8010f86:	d115      	bne.n	8010fb4 <_strtoul_l.isra.0+0x54>
 8010f88:	2c30      	cmp	r4, #48	@ 0x30
 8010f8a:	d10d      	bne.n	8010fa8 <_strtoul_l.isra.0+0x48>
 8010f8c:	7828      	ldrb	r0, [r5, #0]
 8010f8e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010f92:	2858      	cmp	r0, #88	@ 0x58
 8010f94:	d108      	bne.n	8010fa8 <_strtoul_l.isra.0+0x48>
 8010f96:	786c      	ldrb	r4, [r5, #1]
 8010f98:	3502      	adds	r5, #2
 8010f9a:	2310      	movs	r3, #16
 8010f9c:	e00a      	b.n	8010fb4 <_strtoul_l.isra.0+0x54>
 8010f9e:	2c2b      	cmp	r4, #43	@ 0x2b
 8010fa0:	bf04      	itt	eq
 8010fa2:	782c      	ldrbeq	r4, [r5, #0]
 8010fa4:	1c85      	addeq	r5, r0, #2
 8010fa6:	e7ec      	b.n	8010f82 <_strtoul_l.isra.0+0x22>
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d1f6      	bne.n	8010f9a <_strtoul_l.isra.0+0x3a>
 8010fac:	2c30      	cmp	r4, #48	@ 0x30
 8010fae:	bf14      	ite	ne
 8010fb0:	230a      	movne	r3, #10
 8010fb2:	2308      	moveq	r3, #8
 8010fb4:	f04f 38ff 	mov.w	r8, #4294967295
 8010fb8:	2600      	movs	r6, #0
 8010fba:	fbb8 f8f3 	udiv	r8, r8, r3
 8010fbe:	fb03 f908 	mul.w	r9, r3, r8
 8010fc2:	ea6f 0909 	mvn.w	r9, r9
 8010fc6:	4630      	mov	r0, r6
 8010fc8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010fcc:	f1bc 0f09 	cmp.w	ip, #9
 8010fd0:	d810      	bhi.n	8010ff4 <_strtoul_l.isra.0+0x94>
 8010fd2:	4664      	mov	r4, ip
 8010fd4:	42a3      	cmp	r3, r4
 8010fd6:	dd1e      	ble.n	8011016 <_strtoul_l.isra.0+0xb6>
 8010fd8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010fdc:	d007      	beq.n	8010fee <_strtoul_l.isra.0+0x8e>
 8010fde:	4580      	cmp	r8, r0
 8010fe0:	d316      	bcc.n	8011010 <_strtoul_l.isra.0+0xb0>
 8010fe2:	d101      	bne.n	8010fe8 <_strtoul_l.isra.0+0x88>
 8010fe4:	45a1      	cmp	r9, r4
 8010fe6:	db13      	blt.n	8011010 <_strtoul_l.isra.0+0xb0>
 8010fe8:	fb00 4003 	mla	r0, r0, r3, r4
 8010fec:	2601      	movs	r6, #1
 8010fee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ff2:	e7e9      	b.n	8010fc8 <_strtoul_l.isra.0+0x68>
 8010ff4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010ff8:	f1bc 0f19 	cmp.w	ip, #25
 8010ffc:	d801      	bhi.n	8011002 <_strtoul_l.isra.0+0xa2>
 8010ffe:	3c37      	subs	r4, #55	@ 0x37
 8011000:	e7e8      	b.n	8010fd4 <_strtoul_l.isra.0+0x74>
 8011002:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011006:	f1bc 0f19 	cmp.w	ip, #25
 801100a:	d804      	bhi.n	8011016 <_strtoul_l.isra.0+0xb6>
 801100c:	3c57      	subs	r4, #87	@ 0x57
 801100e:	e7e1      	b.n	8010fd4 <_strtoul_l.isra.0+0x74>
 8011010:	f04f 36ff 	mov.w	r6, #4294967295
 8011014:	e7eb      	b.n	8010fee <_strtoul_l.isra.0+0x8e>
 8011016:	1c73      	adds	r3, r6, #1
 8011018:	d106      	bne.n	8011028 <_strtoul_l.isra.0+0xc8>
 801101a:	2322      	movs	r3, #34	@ 0x22
 801101c:	f8ce 3000 	str.w	r3, [lr]
 8011020:	4630      	mov	r0, r6
 8011022:	b932      	cbnz	r2, 8011032 <_strtoul_l.isra.0+0xd2>
 8011024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011028:	b107      	cbz	r7, 801102c <_strtoul_l.isra.0+0xcc>
 801102a:	4240      	negs	r0, r0
 801102c:	2a00      	cmp	r2, #0
 801102e:	d0f9      	beq.n	8011024 <_strtoul_l.isra.0+0xc4>
 8011030:	b106      	cbz	r6, 8011034 <_strtoul_l.isra.0+0xd4>
 8011032:	1e69      	subs	r1, r5, #1
 8011034:	6011      	str	r1, [r2, #0]
 8011036:	e7f5      	b.n	8011024 <_strtoul_l.isra.0+0xc4>
 8011038:	08013791 	.word	0x08013791

0801103c <_strtoul_r>:
 801103c:	f7ff bf90 	b.w	8010f60 <_strtoul_l.isra.0>

08011040 <__ascii_wctomb>:
 8011040:	4603      	mov	r3, r0
 8011042:	4608      	mov	r0, r1
 8011044:	b141      	cbz	r1, 8011058 <__ascii_wctomb+0x18>
 8011046:	2aff      	cmp	r2, #255	@ 0xff
 8011048:	d904      	bls.n	8011054 <__ascii_wctomb+0x14>
 801104a:	228a      	movs	r2, #138	@ 0x8a
 801104c:	601a      	str	r2, [r3, #0]
 801104e:	f04f 30ff 	mov.w	r0, #4294967295
 8011052:	4770      	bx	lr
 8011054:	700a      	strb	r2, [r1, #0]
 8011056:	2001      	movs	r0, #1
 8011058:	4770      	bx	lr
	...

0801105c <fiprintf>:
 801105c:	b40e      	push	{r1, r2, r3}
 801105e:	b503      	push	{r0, r1, lr}
 8011060:	4601      	mov	r1, r0
 8011062:	ab03      	add	r3, sp, #12
 8011064:	4805      	ldr	r0, [pc, #20]	@ (801107c <fiprintf+0x20>)
 8011066:	f853 2b04 	ldr.w	r2, [r3], #4
 801106a:	6800      	ldr	r0, [r0, #0]
 801106c:	9301      	str	r3, [sp, #4]
 801106e:	f000 f83f 	bl	80110f0 <_vfiprintf_r>
 8011072:	b002      	add	sp, #8
 8011074:	f85d eb04 	ldr.w	lr, [sp], #4
 8011078:	b003      	add	sp, #12
 801107a:	4770      	bx	lr
 801107c:	20000034 	.word	0x20000034

08011080 <abort>:
 8011080:	b508      	push	{r3, lr}
 8011082:	2006      	movs	r0, #6
 8011084:	f000 fa08 	bl	8011498 <raise>
 8011088:	2001      	movs	r0, #1
 801108a:	f7f2 fc0f 	bl	80038ac <_exit>

0801108e <_malloc_usable_size_r>:
 801108e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011092:	1f18      	subs	r0, r3, #4
 8011094:	2b00      	cmp	r3, #0
 8011096:	bfbc      	itt	lt
 8011098:	580b      	ldrlt	r3, [r1, r0]
 801109a:	18c0      	addlt	r0, r0, r3
 801109c:	4770      	bx	lr

0801109e <__sfputc_r>:
 801109e:	6893      	ldr	r3, [r2, #8]
 80110a0:	3b01      	subs	r3, #1
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	b410      	push	{r4}
 80110a6:	6093      	str	r3, [r2, #8]
 80110a8:	da08      	bge.n	80110bc <__sfputc_r+0x1e>
 80110aa:	6994      	ldr	r4, [r2, #24]
 80110ac:	42a3      	cmp	r3, r4
 80110ae:	db01      	blt.n	80110b4 <__sfputc_r+0x16>
 80110b0:	290a      	cmp	r1, #10
 80110b2:	d103      	bne.n	80110bc <__sfputc_r+0x1e>
 80110b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110b8:	f000 b932 	b.w	8011320 <__swbuf_r>
 80110bc:	6813      	ldr	r3, [r2, #0]
 80110be:	1c58      	adds	r0, r3, #1
 80110c0:	6010      	str	r0, [r2, #0]
 80110c2:	7019      	strb	r1, [r3, #0]
 80110c4:	4608      	mov	r0, r1
 80110c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <__sfputs_r>:
 80110cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ce:	4606      	mov	r6, r0
 80110d0:	460f      	mov	r7, r1
 80110d2:	4614      	mov	r4, r2
 80110d4:	18d5      	adds	r5, r2, r3
 80110d6:	42ac      	cmp	r4, r5
 80110d8:	d101      	bne.n	80110de <__sfputs_r+0x12>
 80110da:	2000      	movs	r0, #0
 80110dc:	e007      	b.n	80110ee <__sfputs_r+0x22>
 80110de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110e2:	463a      	mov	r2, r7
 80110e4:	4630      	mov	r0, r6
 80110e6:	f7ff ffda 	bl	801109e <__sfputc_r>
 80110ea:	1c43      	adds	r3, r0, #1
 80110ec:	d1f3      	bne.n	80110d6 <__sfputs_r+0xa>
 80110ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080110f0 <_vfiprintf_r>:
 80110f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f4:	460d      	mov	r5, r1
 80110f6:	b09d      	sub	sp, #116	@ 0x74
 80110f8:	4614      	mov	r4, r2
 80110fa:	4698      	mov	r8, r3
 80110fc:	4606      	mov	r6, r0
 80110fe:	b118      	cbz	r0, 8011108 <_vfiprintf_r+0x18>
 8011100:	6a03      	ldr	r3, [r0, #32]
 8011102:	b90b      	cbnz	r3, 8011108 <_vfiprintf_r+0x18>
 8011104:	f7fc fa62 	bl	800d5cc <__sinit>
 8011108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801110a:	07d9      	lsls	r1, r3, #31
 801110c:	d405      	bmi.n	801111a <_vfiprintf_r+0x2a>
 801110e:	89ab      	ldrh	r3, [r5, #12]
 8011110:	059a      	lsls	r2, r3, #22
 8011112:	d402      	bmi.n	801111a <_vfiprintf_r+0x2a>
 8011114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011116:	f7fc fbd6 	bl	800d8c6 <__retarget_lock_acquire_recursive>
 801111a:	89ab      	ldrh	r3, [r5, #12]
 801111c:	071b      	lsls	r3, r3, #28
 801111e:	d501      	bpl.n	8011124 <_vfiprintf_r+0x34>
 8011120:	692b      	ldr	r3, [r5, #16]
 8011122:	b99b      	cbnz	r3, 801114c <_vfiprintf_r+0x5c>
 8011124:	4629      	mov	r1, r5
 8011126:	4630      	mov	r0, r6
 8011128:	f000 f938 	bl	801139c <__swsetup_r>
 801112c:	b170      	cbz	r0, 801114c <_vfiprintf_r+0x5c>
 801112e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011130:	07dc      	lsls	r4, r3, #31
 8011132:	d504      	bpl.n	801113e <_vfiprintf_r+0x4e>
 8011134:	f04f 30ff 	mov.w	r0, #4294967295
 8011138:	b01d      	add	sp, #116	@ 0x74
 801113a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801113e:	89ab      	ldrh	r3, [r5, #12]
 8011140:	0598      	lsls	r0, r3, #22
 8011142:	d4f7      	bmi.n	8011134 <_vfiprintf_r+0x44>
 8011144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011146:	f7fc fbbf 	bl	800d8c8 <__retarget_lock_release_recursive>
 801114a:	e7f3      	b.n	8011134 <_vfiprintf_r+0x44>
 801114c:	2300      	movs	r3, #0
 801114e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011150:	2320      	movs	r3, #32
 8011152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011156:	f8cd 800c 	str.w	r8, [sp, #12]
 801115a:	2330      	movs	r3, #48	@ 0x30
 801115c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801130c <_vfiprintf_r+0x21c>
 8011160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011164:	f04f 0901 	mov.w	r9, #1
 8011168:	4623      	mov	r3, r4
 801116a:	469a      	mov	sl, r3
 801116c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011170:	b10a      	cbz	r2, 8011176 <_vfiprintf_r+0x86>
 8011172:	2a25      	cmp	r2, #37	@ 0x25
 8011174:	d1f9      	bne.n	801116a <_vfiprintf_r+0x7a>
 8011176:	ebba 0b04 	subs.w	fp, sl, r4
 801117a:	d00b      	beq.n	8011194 <_vfiprintf_r+0xa4>
 801117c:	465b      	mov	r3, fp
 801117e:	4622      	mov	r2, r4
 8011180:	4629      	mov	r1, r5
 8011182:	4630      	mov	r0, r6
 8011184:	f7ff ffa2 	bl	80110cc <__sfputs_r>
 8011188:	3001      	adds	r0, #1
 801118a:	f000 80a7 	beq.w	80112dc <_vfiprintf_r+0x1ec>
 801118e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011190:	445a      	add	r2, fp
 8011192:	9209      	str	r2, [sp, #36]	@ 0x24
 8011194:	f89a 3000 	ldrb.w	r3, [sl]
 8011198:	2b00      	cmp	r3, #0
 801119a:	f000 809f 	beq.w	80112dc <_vfiprintf_r+0x1ec>
 801119e:	2300      	movs	r3, #0
 80111a0:	f04f 32ff 	mov.w	r2, #4294967295
 80111a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111a8:	f10a 0a01 	add.w	sl, sl, #1
 80111ac:	9304      	str	r3, [sp, #16]
 80111ae:	9307      	str	r3, [sp, #28]
 80111b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80111b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80111b6:	4654      	mov	r4, sl
 80111b8:	2205      	movs	r2, #5
 80111ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111be:	4853      	ldr	r0, [pc, #332]	@ (801130c <_vfiprintf_r+0x21c>)
 80111c0:	f7ef f826 	bl	8000210 <memchr>
 80111c4:	9a04      	ldr	r2, [sp, #16]
 80111c6:	b9d8      	cbnz	r0, 8011200 <_vfiprintf_r+0x110>
 80111c8:	06d1      	lsls	r1, r2, #27
 80111ca:	bf44      	itt	mi
 80111cc:	2320      	movmi	r3, #32
 80111ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111d2:	0713      	lsls	r3, r2, #28
 80111d4:	bf44      	itt	mi
 80111d6:	232b      	movmi	r3, #43	@ 0x2b
 80111d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80111dc:	f89a 3000 	ldrb.w	r3, [sl]
 80111e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80111e2:	d015      	beq.n	8011210 <_vfiprintf_r+0x120>
 80111e4:	9a07      	ldr	r2, [sp, #28]
 80111e6:	4654      	mov	r4, sl
 80111e8:	2000      	movs	r0, #0
 80111ea:	f04f 0c0a 	mov.w	ip, #10
 80111ee:	4621      	mov	r1, r4
 80111f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111f4:	3b30      	subs	r3, #48	@ 0x30
 80111f6:	2b09      	cmp	r3, #9
 80111f8:	d94b      	bls.n	8011292 <_vfiprintf_r+0x1a2>
 80111fa:	b1b0      	cbz	r0, 801122a <_vfiprintf_r+0x13a>
 80111fc:	9207      	str	r2, [sp, #28]
 80111fe:	e014      	b.n	801122a <_vfiprintf_r+0x13a>
 8011200:	eba0 0308 	sub.w	r3, r0, r8
 8011204:	fa09 f303 	lsl.w	r3, r9, r3
 8011208:	4313      	orrs	r3, r2
 801120a:	9304      	str	r3, [sp, #16]
 801120c:	46a2      	mov	sl, r4
 801120e:	e7d2      	b.n	80111b6 <_vfiprintf_r+0xc6>
 8011210:	9b03      	ldr	r3, [sp, #12]
 8011212:	1d19      	adds	r1, r3, #4
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	9103      	str	r1, [sp, #12]
 8011218:	2b00      	cmp	r3, #0
 801121a:	bfbb      	ittet	lt
 801121c:	425b      	neglt	r3, r3
 801121e:	f042 0202 	orrlt.w	r2, r2, #2
 8011222:	9307      	strge	r3, [sp, #28]
 8011224:	9307      	strlt	r3, [sp, #28]
 8011226:	bfb8      	it	lt
 8011228:	9204      	strlt	r2, [sp, #16]
 801122a:	7823      	ldrb	r3, [r4, #0]
 801122c:	2b2e      	cmp	r3, #46	@ 0x2e
 801122e:	d10a      	bne.n	8011246 <_vfiprintf_r+0x156>
 8011230:	7863      	ldrb	r3, [r4, #1]
 8011232:	2b2a      	cmp	r3, #42	@ 0x2a
 8011234:	d132      	bne.n	801129c <_vfiprintf_r+0x1ac>
 8011236:	9b03      	ldr	r3, [sp, #12]
 8011238:	1d1a      	adds	r2, r3, #4
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	9203      	str	r2, [sp, #12]
 801123e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011242:	3402      	adds	r4, #2
 8011244:	9305      	str	r3, [sp, #20]
 8011246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801131c <_vfiprintf_r+0x22c>
 801124a:	7821      	ldrb	r1, [r4, #0]
 801124c:	2203      	movs	r2, #3
 801124e:	4650      	mov	r0, sl
 8011250:	f7ee ffde 	bl	8000210 <memchr>
 8011254:	b138      	cbz	r0, 8011266 <_vfiprintf_r+0x176>
 8011256:	9b04      	ldr	r3, [sp, #16]
 8011258:	eba0 000a 	sub.w	r0, r0, sl
 801125c:	2240      	movs	r2, #64	@ 0x40
 801125e:	4082      	lsls	r2, r0
 8011260:	4313      	orrs	r3, r2
 8011262:	3401      	adds	r4, #1
 8011264:	9304      	str	r3, [sp, #16]
 8011266:	f814 1b01 	ldrb.w	r1, [r4], #1
 801126a:	4829      	ldr	r0, [pc, #164]	@ (8011310 <_vfiprintf_r+0x220>)
 801126c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011270:	2206      	movs	r2, #6
 8011272:	f7ee ffcd 	bl	8000210 <memchr>
 8011276:	2800      	cmp	r0, #0
 8011278:	d03f      	beq.n	80112fa <_vfiprintf_r+0x20a>
 801127a:	4b26      	ldr	r3, [pc, #152]	@ (8011314 <_vfiprintf_r+0x224>)
 801127c:	bb1b      	cbnz	r3, 80112c6 <_vfiprintf_r+0x1d6>
 801127e:	9b03      	ldr	r3, [sp, #12]
 8011280:	3307      	adds	r3, #7
 8011282:	f023 0307 	bic.w	r3, r3, #7
 8011286:	3308      	adds	r3, #8
 8011288:	9303      	str	r3, [sp, #12]
 801128a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801128c:	443b      	add	r3, r7
 801128e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011290:	e76a      	b.n	8011168 <_vfiprintf_r+0x78>
 8011292:	fb0c 3202 	mla	r2, ip, r2, r3
 8011296:	460c      	mov	r4, r1
 8011298:	2001      	movs	r0, #1
 801129a:	e7a8      	b.n	80111ee <_vfiprintf_r+0xfe>
 801129c:	2300      	movs	r3, #0
 801129e:	3401      	adds	r4, #1
 80112a0:	9305      	str	r3, [sp, #20]
 80112a2:	4619      	mov	r1, r3
 80112a4:	f04f 0c0a 	mov.w	ip, #10
 80112a8:	4620      	mov	r0, r4
 80112aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80112ae:	3a30      	subs	r2, #48	@ 0x30
 80112b0:	2a09      	cmp	r2, #9
 80112b2:	d903      	bls.n	80112bc <_vfiprintf_r+0x1cc>
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d0c6      	beq.n	8011246 <_vfiprintf_r+0x156>
 80112b8:	9105      	str	r1, [sp, #20]
 80112ba:	e7c4      	b.n	8011246 <_vfiprintf_r+0x156>
 80112bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80112c0:	4604      	mov	r4, r0
 80112c2:	2301      	movs	r3, #1
 80112c4:	e7f0      	b.n	80112a8 <_vfiprintf_r+0x1b8>
 80112c6:	ab03      	add	r3, sp, #12
 80112c8:	9300      	str	r3, [sp, #0]
 80112ca:	462a      	mov	r2, r5
 80112cc:	4b12      	ldr	r3, [pc, #72]	@ (8011318 <_vfiprintf_r+0x228>)
 80112ce:	a904      	add	r1, sp, #16
 80112d0:	4630      	mov	r0, r6
 80112d2:	f7fb fb2b 	bl	800c92c <_printf_float>
 80112d6:	4607      	mov	r7, r0
 80112d8:	1c78      	adds	r0, r7, #1
 80112da:	d1d6      	bne.n	801128a <_vfiprintf_r+0x19a>
 80112dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80112de:	07d9      	lsls	r1, r3, #31
 80112e0:	d405      	bmi.n	80112ee <_vfiprintf_r+0x1fe>
 80112e2:	89ab      	ldrh	r3, [r5, #12]
 80112e4:	059a      	lsls	r2, r3, #22
 80112e6:	d402      	bmi.n	80112ee <_vfiprintf_r+0x1fe>
 80112e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80112ea:	f7fc faed 	bl	800d8c8 <__retarget_lock_release_recursive>
 80112ee:	89ab      	ldrh	r3, [r5, #12]
 80112f0:	065b      	lsls	r3, r3, #25
 80112f2:	f53f af1f 	bmi.w	8011134 <_vfiprintf_r+0x44>
 80112f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80112f8:	e71e      	b.n	8011138 <_vfiprintf_r+0x48>
 80112fa:	ab03      	add	r3, sp, #12
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	462a      	mov	r2, r5
 8011300:	4b05      	ldr	r3, [pc, #20]	@ (8011318 <_vfiprintf_r+0x228>)
 8011302:	a904      	add	r1, sp, #16
 8011304:	4630      	mov	r0, r6
 8011306:	f7fb fda9 	bl	800ce5c <_printf_i>
 801130a:	e7e4      	b.n	80112d6 <_vfiprintf_r+0x1e6>
 801130c:	0801356f 	.word	0x0801356f
 8011310:	08013579 	.word	0x08013579
 8011314:	0800c92d 	.word	0x0800c92d
 8011318:	080110cd 	.word	0x080110cd
 801131c:	08013575 	.word	0x08013575

08011320 <__swbuf_r>:
 8011320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011322:	460e      	mov	r6, r1
 8011324:	4614      	mov	r4, r2
 8011326:	4605      	mov	r5, r0
 8011328:	b118      	cbz	r0, 8011332 <__swbuf_r+0x12>
 801132a:	6a03      	ldr	r3, [r0, #32]
 801132c:	b90b      	cbnz	r3, 8011332 <__swbuf_r+0x12>
 801132e:	f7fc f94d 	bl	800d5cc <__sinit>
 8011332:	69a3      	ldr	r3, [r4, #24]
 8011334:	60a3      	str	r3, [r4, #8]
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	071a      	lsls	r2, r3, #28
 801133a:	d501      	bpl.n	8011340 <__swbuf_r+0x20>
 801133c:	6923      	ldr	r3, [r4, #16]
 801133e:	b943      	cbnz	r3, 8011352 <__swbuf_r+0x32>
 8011340:	4621      	mov	r1, r4
 8011342:	4628      	mov	r0, r5
 8011344:	f000 f82a 	bl	801139c <__swsetup_r>
 8011348:	b118      	cbz	r0, 8011352 <__swbuf_r+0x32>
 801134a:	f04f 37ff 	mov.w	r7, #4294967295
 801134e:	4638      	mov	r0, r7
 8011350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	6922      	ldr	r2, [r4, #16]
 8011356:	1a98      	subs	r0, r3, r2
 8011358:	6963      	ldr	r3, [r4, #20]
 801135a:	b2f6      	uxtb	r6, r6
 801135c:	4283      	cmp	r3, r0
 801135e:	4637      	mov	r7, r6
 8011360:	dc05      	bgt.n	801136e <__swbuf_r+0x4e>
 8011362:	4621      	mov	r1, r4
 8011364:	4628      	mov	r0, r5
 8011366:	f7ff f993 	bl	8010690 <_fflush_r>
 801136a:	2800      	cmp	r0, #0
 801136c:	d1ed      	bne.n	801134a <__swbuf_r+0x2a>
 801136e:	68a3      	ldr	r3, [r4, #8]
 8011370:	3b01      	subs	r3, #1
 8011372:	60a3      	str	r3, [r4, #8]
 8011374:	6823      	ldr	r3, [r4, #0]
 8011376:	1c5a      	adds	r2, r3, #1
 8011378:	6022      	str	r2, [r4, #0]
 801137a:	701e      	strb	r6, [r3, #0]
 801137c:	6962      	ldr	r2, [r4, #20]
 801137e:	1c43      	adds	r3, r0, #1
 8011380:	429a      	cmp	r2, r3
 8011382:	d004      	beq.n	801138e <__swbuf_r+0x6e>
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	07db      	lsls	r3, r3, #31
 8011388:	d5e1      	bpl.n	801134e <__swbuf_r+0x2e>
 801138a:	2e0a      	cmp	r6, #10
 801138c:	d1df      	bne.n	801134e <__swbuf_r+0x2e>
 801138e:	4621      	mov	r1, r4
 8011390:	4628      	mov	r0, r5
 8011392:	f7ff f97d 	bl	8010690 <_fflush_r>
 8011396:	2800      	cmp	r0, #0
 8011398:	d0d9      	beq.n	801134e <__swbuf_r+0x2e>
 801139a:	e7d6      	b.n	801134a <__swbuf_r+0x2a>

0801139c <__swsetup_r>:
 801139c:	b538      	push	{r3, r4, r5, lr}
 801139e:	4b29      	ldr	r3, [pc, #164]	@ (8011444 <__swsetup_r+0xa8>)
 80113a0:	4605      	mov	r5, r0
 80113a2:	6818      	ldr	r0, [r3, #0]
 80113a4:	460c      	mov	r4, r1
 80113a6:	b118      	cbz	r0, 80113b0 <__swsetup_r+0x14>
 80113a8:	6a03      	ldr	r3, [r0, #32]
 80113aa:	b90b      	cbnz	r3, 80113b0 <__swsetup_r+0x14>
 80113ac:	f7fc f90e 	bl	800d5cc <__sinit>
 80113b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113b4:	0719      	lsls	r1, r3, #28
 80113b6:	d422      	bmi.n	80113fe <__swsetup_r+0x62>
 80113b8:	06da      	lsls	r2, r3, #27
 80113ba:	d407      	bmi.n	80113cc <__swsetup_r+0x30>
 80113bc:	2209      	movs	r2, #9
 80113be:	602a      	str	r2, [r5, #0]
 80113c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113c4:	81a3      	strh	r3, [r4, #12]
 80113c6:	f04f 30ff 	mov.w	r0, #4294967295
 80113ca:	e033      	b.n	8011434 <__swsetup_r+0x98>
 80113cc:	0758      	lsls	r0, r3, #29
 80113ce:	d512      	bpl.n	80113f6 <__swsetup_r+0x5a>
 80113d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80113d2:	b141      	cbz	r1, 80113e6 <__swsetup_r+0x4a>
 80113d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80113d8:	4299      	cmp	r1, r3
 80113da:	d002      	beq.n	80113e2 <__swsetup_r+0x46>
 80113dc:	4628      	mov	r0, r5
 80113de:	f7fd f8e3 	bl	800e5a8 <_free_r>
 80113e2:	2300      	movs	r3, #0
 80113e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80113e6:	89a3      	ldrh	r3, [r4, #12]
 80113e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80113ec:	81a3      	strh	r3, [r4, #12]
 80113ee:	2300      	movs	r3, #0
 80113f0:	6063      	str	r3, [r4, #4]
 80113f2:	6923      	ldr	r3, [r4, #16]
 80113f4:	6023      	str	r3, [r4, #0]
 80113f6:	89a3      	ldrh	r3, [r4, #12]
 80113f8:	f043 0308 	orr.w	r3, r3, #8
 80113fc:	81a3      	strh	r3, [r4, #12]
 80113fe:	6923      	ldr	r3, [r4, #16]
 8011400:	b94b      	cbnz	r3, 8011416 <__swsetup_r+0x7a>
 8011402:	89a3      	ldrh	r3, [r4, #12]
 8011404:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801140c:	d003      	beq.n	8011416 <__swsetup_r+0x7a>
 801140e:	4621      	mov	r1, r4
 8011410:	4628      	mov	r0, r5
 8011412:	f000 f883 	bl	801151c <__smakebuf_r>
 8011416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801141a:	f013 0201 	ands.w	r2, r3, #1
 801141e:	d00a      	beq.n	8011436 <__swsetup_r+0x9a>
 8011420:	2200      	movs	r2, #0
 8011422:	60a2      	str	r2, [r4, #8]
 8011424:	6962      	ldr	r2, [r4, #20]
 8011426:	4252      	negs	r2, r2
 8011428:	61a2      	str	r2, [r4, #24]
 801142a:	6922      	ldr	r2, [r4, #16]
 801142c:	b942      	cbnz	r2, 8011440 <__swsetup_r+0xa4>
 801142e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011432:	d1c5      	bne.n	80113c0 <__swsetup_r+0x24>
 8011434:	bd38      	pop	{r3, r4, r5, pc}
 8011436:	0799      	lsls	r1, r3, #30
 8011438:	bf58      	it	pl
 801143a:	6962      	ldrpl	r2, [r4, #20]
 801143c:	60a2      	str	r2, [r4, #8]
 801143e:	e7f4      	b.n	801142a <__swsetup_r+0x8e>
 8011440:	2000      	movs	r0, #0
 8011442:	e7f7      	b.n	8011434 <__swsetup_r+0x98>
 8011444:	20000034 	.word	0x20000034

08011448 <_raise_r>:
 8011448:	291f      	cmp	r1, #31
 801144a:	b538      	push	{r3, r4, r5, lr}
 801144c:	4605      	mov	r5, r0
 801144e:	460c      	mov	r4, r1
 8011450:	d904      	bls.n	801145c <_raise_r+0x14>
 8011452:	2316      	movs	r3, #22
 8011454:	6003      	str	r3, [r0, #0]
 8011456:	f04f 30ff 	mov.w	r0, #4294967295
 801145a:	bd38      	pop	{r3, r4, r5, pc}
 801145c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801145e:	b112      	cbz	r2, 8011466 <_raise_r+0x1e>
 8011460:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011464:	b94b      	cbnz	r3, 801147a <_raise_r+0x32>
 8011466:	4628      	mov	r0, r5
 8011468:	f000 f830 	bl	80114cc <_getpid_r>
 801146c:	4622      	mov	r2, r4
 801146e:	4601      	mov	r1, r0
 8011470:	4628      	mov	r0, r5
 8011472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011476:	f000 b817 	b.w	80114a8 <_kill_r>
 801147a:	2b01      	cmp	r3, #1
 801147c:	d00a      	beq.n	8011494 <_raise_r+0x4c>
 801147e:	1c59      	adds	r1, r3, #1
 8011480:	d103      	bne.n	801148a <_raise_r+0x42>
 8011482:	2316      	movs	r3, #22
 8011484:	6003      	str	r3, [r0, #0]
 8011486:	2001      	movs	r0, #1
 8011488:	e7e7      	b.n	801145a <_raise_r+0x12>
 801148a:	2100      	movs	r1, #0
 801148c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011490:	4620      	mov	r0, r4
 8011492:	4798      	blx	r3
 8011494:	2000      	movs	r0, #0
 8011496:	e7e0      	b.n	801145a <_raise_r+0x12>

08011498 <raise>:
 8011498:	4b02      	ldr	r3, [pc, #8]	@ (80114a4 <raise+0xc>)
 801149a:	4601      	mov	r1, r0
 801149c:	6818      	ldr	r0, [r3, #0]
 801149e:	f7ff bfd3 	b.w	8011448 <_raise_r>
 80114a2:	bf00      	nop
 80114a4:	20000034 	.word	0x20000034

080114a8 <_kill_r>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	4d07      	ldr	r5, [pc, #28]	@ (80114c8 <_kill_r+0x20>)
 80114ac:	2300      	movs	r3, #0
 80114ae:	4604      	mov	r4, r0
 80114b0:	4608      	mov	r0, r1
 80114b2:	4611      	mov	r1, r2
 80114b4:	602b      	str	r3, [r5, #0]
 80114b6:	f7f2 f9e9 	bl	800388c <_kill>
 80114ba:	1c43      	adds	r3, r0, #1
 80114bc:	d102      	bne.n	80114c4 <_kill_r+0x1c>
 80114be:	682b      	ldr	r3, [r5, #0]
 80114c0:	b103      	cbz	r3, 80114c4 <_kill_r+0x1c>
 80114c2:	6023      	str	r3, [r4, #0]
 80114c4:	bd38      	pop	{r3, r4, r5, pc}
 80114c6:	bf00      	nop
 80114c8:	20001c54 	.word	0x20001c54

080114cc <_getpid_r>:
 80114cc:	f7f2 b9d6 	b.w	800387c <_getpid>

080114d0 <__swhatbuf_r>:
 80114d0:	b570      	push	{r4, r5, r6, lr}
 80114d2:	460c      	mov	r4, r1
 80114d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114d8:	2900      	cmp	r1, #0
 80114da:	b096      	sub	sp, #88	@ 0x58
 80114dc:	4615      	mov	r5, r2
 80114de:	461e      	mov	r6, r3
 80114e0:	da0d      	bge.n	80114fe <__swhatbuf_r+0x2e>
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80114e8:	f04f 0100 	mov.w	r1, #0
 80114ec:	bf14      	ite	ne
 80114ee:	2340      	movne	r3, #64	@ 0x40
 80114f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80114f4:	2000      	movs	r0, #0
 80114f6:	6031      	str	r1, [r6, #0]
 80114f8:	602b      	str	r3, [r5, #0]
 80114fa:	b016      	add	sp, #88	@ 0x58
 80114fc:	bd70      	pop	{r4, r5, r6, pc}
 80114fe:	466a      	mov	r2, sp
 8011500:	f000 f848 	bl	8011594 <_fstat_r>
 8011504:	2800      	cmp	r0, #0
 8011506:	dbec      	blt.n	80114e2 <__swhatbuf_r+0x12>
 8011508:	9901      	ldr	r1, [sp, #4]
 801150a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801150e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011512:	4259      	negs	r1, r3
 8011514:	4159      	adcs	r1, r3
 8011516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801151a:	e7eb      	b.n	80114f4 <__swhatbuf_r+0x24>

0801151c <__smakebuf_r>:
 801151c:	898b      	ldrh	r3, [r1, #12]
 801151e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011520:	079d      	lsls	r5, r3, #30
 8011522:	4606      	mov	r6, r0
 8011524:	460c      	mov	r4, r1
 8011526:	d507      	bpl.n	8011538 <__smakebuf_r+0x1c>
 8011528:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801152c:	6023      	str	r3, [r4, #0]
 801152e:	6123      	str	r3, [r4, #16]
 8011530:	2301      	movs	r3, #1
 8011532:	6163      	str	r3, [r4, #20]
 8011534:	b003      	add	sp, #12
 8011536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011538:	ab01      	add	r3, sp, #4
 801153a:	466a      	mov	r2, sp
 801153c:	f7ff ffc8 	bl	80114d0 <__swhatbuf_r>
 8011540:	9f00      	ldr	r7, [sp, #0]
 8011542:	4605      	mov	r5, r0
 8011544:	4639      	mov	r1, r7
 8011546:	4630      	mov	r0, r6
 8011548:	f7fb f8c4 	bl	800c6d4 <_malloc_r>
 801154c:	b948      	cbnz	r0, 8011562 <__smakebuf_r+0x46>
 801154e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011552:	059a      	lsls	r2, r3, #22
 8011554:	d4ee      	bmi.n	8011534 <__smakebuf_r+0x18>
 8011556:	f023 0303 	bic.w	r3, r3, #3
 801155a:	f043 0302 	orr.w	r3, r3, #2
 801155e:	81a3      	strh	r3, [r4, #12]
 8011560:	e7e2      	b.n	8011528 <__smakebuf_r+0xc>
 8011562:	89a3      	ldrh	r3, [r4, #12]
 8011564:	6020      	str	r0, [r4, #0]
 8011566:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801156a:	81a3      	strh	r3, [r4, #12]
 801156c:	9b01      	ldr	r3, [sp, #4]
 801156e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011572:	b15b      	cbz	r3, 801158c <__smakebuf_r+0x70>
 8011574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011578:	4630      	mov	r0, r6
 801157a:	f000 f81d 	bl	80115b8 <_isatty_r>
 801157e:	b128      	cbz	r0, 801158c <__smakebuf_r+0x70>
 8011580:	89a3      	ldrh	r3, [r4, #12]
 8011582:	f023 0303 	bic.w	r3, r3, #3
 8011586:	f043 0301 	orr.w	r3, r3, #1
 801158a:	81a3      	strh	r3, [r4, #12]
 801158c:	89a3      	ldrh	r3, [r4, #12]
 801158e:	431d      	orrs	r5, r3
 8011590:	81a5      	strh	r5, [r4, #12]
 8011592:	e7cf      	b.n	8011534 <__smakebuf_r+0x18>

08011594 <_fstat_r>:
 8011594:	b538      	push	{r3, r4, r5, lr}
 8011596:	4d07      	ldr	r5, [pc, #28]	@ (80115b4 <_fstat_r+0x20>)
 8011598:	2300      	movs	r3, #0
 801159a:	4604      	mov	r4, r0
 801159c:	4608      	mov	r0, r1
 801159e:	4611      	mov	r1, r2
 80115a0:	602b      	str	r3, [r5, #0]
 80115a2:	f7f2 f9d3 	bl	800394c <_fstat>
 80115a6:	1c43      	adds	r3, r0, #1
 80115a8:	d102      	bne.n	80115b0 <_fstat_r+0x1c>
 80115aa:	682b      	ldr	r3, [r5, #0]
 80115ac:	b103      	cbz	r3, 80115b0 <_fstat_r+0x1c>
 80115ae:	6023      	str	r3, [r4, #0]
 80115b0:	bd38      	pop	{r3, r4, r5, pc}
 80115b2:	bf00      	nop
 80115b4:	20001c54 	.word	0x20001c54

080115b8 <_isatty_r>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	4d06      	ldr	r5, [pc, #24]	@ (80115d4 <_isatty_r+0x1c>)
 80115bc:	2300      	movs	r3, #0
 80115be:	4604      	mov	r4, r0
 80115c0:	4608      	mov	r0, r1
 80115c2:	602b      	str	r3, [r5, #0]
 80115c4:	f7f2 f9d2 	bl	800396c <_isatty>
 80115c8:	1c43      	adds	r3, r0, #1
 80115ca:	d102      	bne.n	80115d2 <_isatty_r+0x1a>
 80115cc:	682b      	ldr	r3, [r5, #0]
 80115ce:	b103      	cbz	r3, 80115d2 <_isatty_r+0x1a>
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	bd38      	pop	{r3, r4, r5, pc}
 80115d4:	20001c54 	.word	0x20001c54

080115d8 <acos>:
 80115d8:	b538      	push	{r3, r4, r5, lr}
 80115da:	ed2d 8b02 	vpush	{d8}
 80115de:	ec55 4b10 	vmov	r4, r5, d0
 80115e2:	f000 f9e9 	bl	80119b8 <__ieee754_acos>
 80115e6:	4622      	mov	r2, r4
 80115e8:	462b      	mov	r3, r5
 80115ea:	4620      	mov	r0, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	eeb0 8a40 	vmov.f32	s16, s0
 80115f2:	eef0 8a60 	vmov.f32	s17, s1
 80115f6:	f7ef fab9 	bl	8000b6c <__aeabi_dcmpun>
 80115fa:	b9a8      	cbnz	r0, 8011628 <acos+0x50>
 80115fc:	ec45 4b10 	vmov	d0, r4, r5
 8011600:	f000 f8f0 	bl	80117e4 <fabs>
 8011604:	4b0c      	ldr	r3, [pc, #48]	@ (8011638 <acos+0x60>)
 8011606:	ec51 0b10 	vmov	r0, r1, d0
 801160a:	2200      	movs	r2, #0
 801160c:	f7ef faa4 	bl	8000b58 <__aeabi_dcmpgt>
 8011610:	b150      	cbz	r0, 8011628 <acos+0x50>
 8011612:	f7fc f92d 	bl	800d870 <__errno>
 8011616:	ecbd 8b02 	vpop	{d8}
 801161a:	2321      	movs	r3, #33	@ 0x21
 801161c:	6003      	str	r3, [r0, #0]
 801161e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011622:	4806      	ldr	r0, [pc, #24]	@ (801163c <acos+0x64>)
 8011624:	f7ff b8fc 	b.w	8010820 <nan>
 8011628:	eeb0 0a48 	vmov.f32	s0, s16
 801162c:	eef0 0a68 	vmov.f32	s1, s17
 8011630:	ecbd 8b02 	vpop	{d8}
 8011634:	bd38      	pop	{r3, r4, r5, pc}
 8011636:	bf00      	nop
 8011638:	3ff00000 	.word	0x3ff00000
 801163c:	080135de 	.word	0x080135de

08011640 <asin>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	ed2d 8b02 	vpush	{d8}
 8011646:	ec55 4b10 	vmov	r4, r5, d0
 801164a:	f000 fc11 	bl	8011e70 <__ieee754_asin>
 801164e:	4622      	mov	r2, r4
 8011650:	462b      	mov	r3, r5
 8011652:	4620      	mov	r0, r4
 8011654:	4629      	mov	r1, r5
 8011656:	eeb0 8a40 	vmov.f32	s16, s0
 801165a:	eef0 8a60 	vmov.f32	s17, s1
 801165e:	f7ef fa85 	bl	8000b6c <__aeabi_dcmpun>
 8011662:	b9a8      	cbnz	r0, 8011690 <asin+0x50>
 8011664:	ec45 4b10 	vmov	d0, r4, r5
 8011668:	f000 f8bc 	bl	80117e4 <fabs>
 801166c:	4b0c      	ldr	r3, [pc, #48]	@ (80116a0 <asin+0x60>)
 801166e:	ec51 0b10 	vmov	r0, r1, d0
 8011672:	2200      	movs	r2, #0
 8011674:	f7ef fa70 	bl	8000b58 <__aeabi_dcmpgt>
 8011678:	b150      	cbz	r0, 8011690 <asin+0x50>
 801167a:	f7fc f8f9 	bl	800d870 <__errno>
 801167e:	ecbd 8b02 	vpop	{d8}
 8011682:	2321      	movs	r3, #33	@ 0x21
 8011684:	6003      	str	r3, [r0, #0]
 8011686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801168a:	4806      	ldr	r0, [pc, #24]	@ (80116a4 <asin+0x64>)
 801168c:	f7ff b8c8 	b.w	8010820 <nan>
 8011690:	eeb0 0a48 	vmov.f32	s0, s16
 8011694:	eef0 0a68 	vmov.f32	s1, s17
 8011698:	ecbd 8b02 	vpop	{d8}
 801169c:	bd38      	pop	{r3, r4, r5, pc}
 801169e:	bf00      	nop
 80116a0:	3ff00000 	.word	0x3ff00000
 80116a4:	080135de 	.word	0x080135de

080116a8 <atan2>:
 80116a8:	f000 bde6 	b.w	8012278 <__ieee754_atan2>

080116ac <pow>:
 80116ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ae:	ed2d 8b02 	vpush	{d8}
 80116b2:	eeb0 8a40 	vmov.f32	s16, s0
 80116b6:	eef0 8a60 	vmov.f32	s17, s1
 80116ba:	ec55 4b11 	vmov	r4, r5, d1
 80116be:	f000 fea3 	bl	8012408 <__ieee754_pow>
 80116c2:	4622      	mov	r2, r4
 80116c4:	462b      	mov	r3, r5
 80116c6:	4620      	mov	r0, r4
 80116c8:	4629      	mov	r1, r5
 80116ca:	ec57 6b10 	vmov	r6, r7, d0
 80116ce:	f7ef fa4d 	bl	8000b6c <__aeabi_dcmpun>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	d13b      	bne.n	801174e <pow+0xa2>
 80116d6:	ec51 0b18 	vmov	r0, r1, d8
 80116da:	2200      	movs	r2, #0
 80116dc:	2300      	movs	r3, #0
 80116de:	f7ef fa13 	bl	8000b08 <__aeabi_dcmpeq>
 80116e2:	b1b8      	cbz	r0, 8011714 <pow+0x68>
 80116e4:	2200      	movs	r2, #0
 80116e6:	2300      	movs	r3, #0
 80116e8:	4620      	mov	r0, r4
 80116ea:	4629      	mov	r1, r5
 80116ec:	f7ef fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	d146      	bne.n	8011782 <pow+0xd6>
 80116f4:	ec45 4b10 	vmov	d0, r4, r5
 80116f8:	f000 f87c 	bl	80117f4 <finite>
 80116fc:	b338      	cbz	r0, 801174e <pow+0xa2>
 80116fe:	2200      	movs	r2, #0
 8011700:	2300      	movs	r3, #0
 8011702:	4620      	mov	r0, r4
 8011704:	4629      	mov	r1, r5
 8011706:	f7ef fa09 	bl	8000b1c <__aeabi_dcmplt>
 801170a:	b300      	cbz	r0, 801174e <pow+0xa2>
 801170c:	f7fc f8b0 	bl	800d870 <__errno>
 8011710:	2322      	movs	r3, #34	@ 0x22
 8011712:	e01b      	b.n	801174c <pow+0xa0>
 8011714:	ec47 6b10 	vmov	d0, r6, r7
 8011718:	f000 f86c 	bl	80117f4 <finite>
 801171c:	b9e0      	cbnz	r0, 8011758 <pow+0xac>
 801171e:	eeb0 0a48 	vmov.f32	s0, s16
 8011722:	eef0 0a68 	vmov.f32	s1, s17
 8011726:	f000 f865 	bl	80117f4 <finite>
 801172a:	b1a8      	cbz	r0, 8011758 <pow+0xac>
 801172c:	ec45 4b10 	vmov	d0, r4, r5
 8011730:	f000 f860 	bl	80117f4 <finite>
 8011734:	b180      	cbz	r0, 8011758 <pow+0xac>
 8011736:	4632      	mov	r2, r6
 8011738:	463b      	mov	r3, r7
 801173a:	4630      	mov	r0, r6
 801173c:	4639      	mov	r1, r7
 801173e:	f7ef fa15 	bl	8000b6c <__aeabi_dcmpun>
 8011742:	2800      	cmp	r0, #0
 8011744:	d0e2      	beq.n	801170c <pow+0x60>
 8011746:	f7fc f893 	bl	800d870 <__errno>
 801174a:	2321      	movs	r3, #33	@ 0x21
 801174c:	6003      	str	r3, [r0, #0]
 801174e:	ecbd 8b02 	vpop	{d8}
 8011752:	ec47 6b10 	vmov	d0, r6, r7
 8011756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011758:	2200      	movs	r2, #0
 801175a:	2300      	movs	r3, #0
 801175c:	4630      	mov	r0, r6
 801175e:	4639      	mov	r1, r7
 8011760:	f7ef f9d2 	bl	8000b08 <__aeabi_dcmpeq>
 8011764:	2800      	cmp	r0, #0
 8011766:	d0f2      	beq.n	801174e <pow+0xa2>
 8011768:	eeb0 0a48 	vmov.f32	s0, s16
 801176c:	eef0 0a68 	vmov.f32	s1, s17
 8011770:	f000 f840 	bl	80117f4 <finite>
 8011774:	2800      	cmp	r0, #0
 8011776:	d0ea      	beq.n	801174e <pow+0xa2>
 8011778:	ec45 4b10 	vmov	d0, r4, r5
 801177c:	f000 f83a 	bl	80117f4 <finite>
 8011780:	e7c3      	b.n	801170a <pow+0x5e>
 8011782:	4f01      	ldr	r7, [pc, #4]	@ (8011788 <pow+0xdc>)
 8011784:	2600      	movs	r6, #0
 8011786:	e7e2      	b.n	801174e <pow+0xa2>
 8011788:	3ff00000 	.word	0x3ff00000

0801178c <sqrt>:
 801178c:	b538      	push	{r3, r4, r5, lr}
 801178e:	ed2d 8b02 	vpush	{d8}
 8011792:	ec55 4b10 	vmov	r4, r5, d0
 8011796:	f000 f839 	bl	801180c <__ieee754_sqrt>
 801179a:	4622      	mov	r2, r4
 801179c:	462b      	mov	r3, r5
 801179e:	4620      	mov	r0, r4
 80117a0:	4629      	mov	r1, r5
 80117a2:	eeb0 8a40 	vmov.f32	s16, s0
 80117a6:	eef0 8a60 	vmov.f32	s17, s1
 80117aa:	f7ef f9df 	bl	8000b6c <__aeabi_dcmpun>
 80117ae:	b990      	cbnz	r0, 80117d6 <sqrt+0x4a>
 80117b0:	2200      	movs	r2, #0
 80117b2:	2300      	movs	r3, #0
 80117b4:	4620      	mov	r0, r4
 80117b6:	4629      	mov	r1, r5
 80117b8:	f7ef f9b0 	bl	8000b1c <__aeabi_dcmplt>
 80117bc:	b158      	cbz	r0, 80117d6 <sqrt+0x4a>
 80117be:	f7fc f857 	bl	800d870 <__errno>
 80117c2:	2321      	movs	r3, #33	@ 0x21
 80117c4:	6003      	str	r3, [r0, #0]
 80117c6:	2200      	movs	r2, #0
 80117c8:	2300      	movs	r3, #0
 80117ca:	4610      	mov	r0, r2
 80117cc:	4619      	mov	r1, r3
 80117ce:	f7ef f85d 	bl	800088c <__aeabi_ddiv>
 80117d2:	ec41 0b18 	vmov	d8, r0, r1
 80117d6:	eeb0 0a48 	vmov.f32	s0, s16
 80117da:	eef0 0a68 	vmov.f32	s1, s17
 80117de:	ecbd 8b02 	vpop	{d8}
 80117e2:	bd38      	pop	{r3, r4, r5, pc}

080117e4 <fabs>:
 80117e4:	ec51 0b10 	vmov	r0, r1, d0
 80117e8:	4602      	mov	r2, r0
 80117ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80117ee:	ec43 2b10 	vmov	d0, r2, r3
 80117f2:	4770      	bx	lr

080117f4 <finite>:
 80117f4:	b082      	sub	sp, #8
 80117f6:	ed8d 0b00 	vstr	d0, [sp]
 80117fa:	9801      	ldr	r0, [sp, #4]
 80117fc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011800:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011804:	0fc0      	lsrs	r0, r0, #31
 8011806:	b002      	add	sp, #8
 8011808:	4770      	bx	lr
	...

0801180c <__ieee754_sqrt>:
 801180c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011810:	4a66      	ldr	r2, [pc, #408]	@ (80119ac <__ieee754_sqrt+0x1a0>)
 8011812:	ec55 4b10 	vmov	r4, r5, d0
 8011816:	43aa      	bics	r2, r5
 8011818:	462b      	mov	r3, r5
 801181a:	4621      	mov	r1, r4
 801181c:	d110      	bne.n	8011840 <__ieee754_sqrt+0x34>
 801181e:	4622      	mov	r2, r4
 8011820:	4620      	mov	r0, r4
 8011822:	4629      	mov	r1, r5
 8011824:	f7ee ff08 	bl	8000638 <__aeabi_dmul>
 8011828:	4602      	mov	r2, r0
 801182a:	460b      	mov	r3, r1
 801182c:	4620      	mov	r0, r4
 801182e:	4629      	mov	r1, r5
 8011830:	f7ee fd4c 	bl	80002cc <__adddf3>
 8011834:	4604      	mov	r4, r0
 8011836:	460d      	mov	r5, r1
 8011838:	ec45 4b10 	vmov	d0, r4, r5
 801183c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011840:	2d00      	cmp	r5, #0
 8011842:	dc0e      	bgt.n	8011862 <__ieee754_sqrt+0x56>
 8011844:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011848:	4322      	orrs	r2, r4
 801184a:	d0f5      	beq.n	8011838 <__ieee754_sqrt+0x2c>
 801184c:	b19d      	cbz	r5, 8011876 <__ieee754_sqrt+0x6a>
 801184e:	4622      	mov	r2, r4
 8011850:	4620      	mov	r0, r4
 8011852:	4629      	mov	r1, r5
 8011854:	f7ee fd38 	bl	80002c8 <__aeabi_dsub>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	f7ef f816 	bl	800088c <__aeabi_ddiv>
 8011860:	e7e8      	b.n	8011834 <__ieee754_sqrt+0x28>
 8011862:	152a      	asrs	r2, r5, #20
 8011864:	d115      	bne.n	8011892 <__ieee754_sqrt+0x86>
 8011866:	2000      	movs	r0, #0
 8011868:	e009      	b.n	801187e <__ieee754_sqrt+0x72>
 801186a:	0acb      	lsrs	r3, r1, #11
 801186c:	3a15      	subs	r2, #21
 801186e:	0549      	lsls	r1, r1, #21
 8011870:	2b00      	cmp	r3, #0
 8011872:	d0fa      	beq.n	801186a <__ieee754_sqrt+0x5e>
 8011874:	e7f7      	b.n	8011866 <__ieee754_sqrt+0x5a>
 8011876:	462a      	mov	r2, r5
 8011878:	e7fa      	b.n	8011870 <__ieee754_sqrt+0x64>
 801187a:	005b      	lsls	r3, r3, #1
 801187c:	3001      	adds	r0, #1
 801187e:	02dc      	lsls	r4, r3, #11
 8011880:	d5fb      	bpl.n	801187a <__ieee754_sqrt+0x6e>
 8011882:	1e44      	subs	r4, r0, #1
 8011884:	1b12      	subs	r2, r2, r4
 8011886:	f1c0 0420 	rsb	r4, r0, #32
 801188a:	fa21 f404 	lsr.w	r4, r1, r4
 801188e:	4323      	orrs	r3, r4
 8011890:	4081      	lsls	r1, r0
 8011892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011896:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801189a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801189e:	07d2      	lsls	r2, r2, #31
 80118a0:	bf5c      	itt	pl
 80118a2:	005b      	lslpl	r3, r3, #1
 80118a4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80118a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80118ac:	bf58      	it	pl
 80118ae:	0049      	lslpl	r1, r1, #1
 80118b0:	2600      	movs	r6, #0
 80118b2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80118b6:	107f      	asrs	r7, r7, #1
 80118b8:	0049      	lsls	r1, r1, #1
 80118ba:	2016      	movs	r0, #22
 80118bc:	4632      	mov	r2, r6
 80118be:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80118c2:	1915      	adds	r5, r2, r4
 80118c4:	429d      	cmp	r5, r3
 80118c6:	bfde      	ittt	le
 80118c8:	192a      	addle	r2, r5, r4
 80118ca:	1b5b      	suble	r3, r3, r5
 80118cc:	1936      	addle	r6, r6, r4
 80118ce:	0fcd      	lsrs	r5, r1, #31
 80118d0:	3801      	subs	r0, #1
 80118d2:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80118d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118da:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80118de:	d1f0      	bne.n	80118c2 <__ieee754_sqrt+0xb6>
 80118e0:	4605      	mov	r5, r0
 80118e2:	2420      	movs	r4, #32
 80118e4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80118e8:	4293      	cmp	r3, r2
 80118ea:	eb0c 0e00 	add.w	lr, ip, r0
 80118ee:	dc02      	bgt.n	80118f6 <__ieee754_sqrt+0xea>
 80118f0:	d113      	bne.n	801191a <__ieee754_sqrt+0x10e>
 80118f2:	458e      	cmp	lr, r1
 80118f4:	d811      	bhi.n	801191a <__ieee754_sqrt+0x10e>
 80118f6:	f1be 0f00 	cmp.w	lr, #0
 80118fa:	eb0e 000c 	add.w	r0, lr, ip
 80118fe:	da3f      	bge.n	8011980 <__ieee754_sqrt+0x174>
 8011900:	2800      	cmp	r0, #0
 8011902:	db3d      	blt.n	8011980 <__ieee754_sqrt+0x174>
 8011904:	f102 0801 	add.w	r8, r2, #1
 8011908:	1a9b      	subs	r3, r3, r2
 801190a:	458e      	cmp	lr, r1
 801190c:	bf88      	it	hi
 801190e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011912:	eba1 010e 	sub.w	r1, r1, lr
 8011916:	4465      	add	r5, ip
 8011918:	4642      	mov	r2, r8
 801191a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801191e:	3c01      	subs	r4, #1
 8011920:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011924:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011928:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801192c:	d1dc      	bne.n	80118e8 <__ieee754_sqrt+0xdc>
 801192e:	4319      	orrs	r1, r3
 8011930:	d01b      	beq.n	801196a <__ieee754_sqrt+0x15e>
 8011932:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80119b0 <__ieee754_sqrt+0x1a4>
 8011936:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80119b4 <__ieee754_sqrt+0x1a8>
 801193a:	e9da 0100 	ldrd	r0, r1, [sl]
 801193e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011942:	f7ee fcc1 	bl	80002c8 <__aeabi_dsub>
 8011946:	e9da 8900 	ldrd	r8, r9, [sl]
 801194a:	4602      	mov	r2, r0
 801194c:	460b      	mov	r3, r1
 801194e:	4640      	mov	r0, r8
 8011950:	4649      	mov	r1, r9
 8011952:	f7ef f8ed 	bl	8000b30 <__aeabi_dcmple>
 8011956:	b140      	cbz	r0, 801196a <__ieee754_sqrt+0x15e>
 8011958:	f1b5 3fff 	cmp.w	r5, #4294967295
 801195c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011960:	e9db 2300 	ldrd	r2, r3, [fp]
 8011964:	d10e      	bne.n	8011984 <__ieee754_sqrt+0x178>
 8011966:	3601      	adds	r6, #1
 8011968:	4625      	mov	r5, r4
 801196a:	1073      	asrs	r3, r6, #1
 801196c:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011970:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011974:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8011978:	086b      	lsrs	r3, r5, #1
 801197a:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801197e:	e759      	b.n	8011834 <__ieee754_sqrt+0x28>
 8011980:	4690      	mov	r8, r2
 8011982:	e7c1      	b.n	8011908 <__ieee754_sqrt+0xfc>
 8011984:	f7ee fca2 	bl	80002cc <__adddf3>
 8011988:	e9da 8900 	ldrd	r8, r9, [sl]
 801198c:	4602      	mov	r2, r0
 801198e:	460b      	mov	r3, r1
 8011990:	4640      	mov	r0, r8
 8011992:	4649      	mov	r1, r9
 8011994:	f7ef f8c2 	bl	8000b1c <__aeabi_dcmplt>
 8011998:	b120      	cbz	r0, 80119a4 <__ieee754_sqrt+0x198>
 801199a:	1cab      	adds	r3, r5, #2
 801199c:	bf08      	it	eq
 801199e:	3601      	addeq	r6, #1
 80119a0:	3502      	adds	r5, #2
 80119a2:	e7e2      	b.n	801196a <__ieee754_sqrt+0x15e>
 80119a4:	1c6b      	adds	r3, r5, #1
 80119a6:	f023 0501 	bic.w	r5, r3, #1
 80119aa:	e7de      	b.n	801196a <__ieee754_sqrt+0x15e>
 80119ac:	7ff00000 	.word	0x7ff00000
 80119b0:	080138a0 	.word	0x080138a0
 80119b4:	08013898 	.word	0x08013898

080119b8 <__ieee754_acos>:
 80119b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119bc:	ec55 4b10 	vmov	r4, r5, d0
 80119c0:	49b7      	ldr	r1, [pc, #732]	@ (8011ca0 <__ieee754_acos+0x2e8>)
 80119c2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80119c6:	428b      	cmp	r3, r1
 80119c8:	d919      	bls.n	80119fe <__ieee754_acos+0x46>
 80119ca:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80119ce:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80119d2:	4323      	orrs	r3, r4
 80119d4:	d106      	bne.n	80119e4 <__ieee754_acos+0x2c>
 80119d6:	2d00      	cmp	r5, #0
 80119d8:	f340 8210 	ble.w	8011dfc <__ieee754_acos+0x444>
 80119dc:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8011c30 <__ieee754_acos+0x278>
 80119e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119e4:	4622      	mov	r2, r4
 80119e6:	462b      	mov	r3, r5
 80119e8:	4620      	mov	r0, r4
 80119ea:	4629      	mov	r1, r5
 80119ec:	f7ee fc6c 	bl	80002c8 <__aeabi_dsub>
 80119f0:	4602      	mov	r2, r0
 80119f2:	460b      	mov	r3, r1
 80119f4:	f7ee ff4a 	bl	800088c <__aeabi_ddiv>
 80119f8:	ec41 0b10 	vmov	d0, r0, r1
 80119fc:	e7f0      	b.n	80119e0 <__ieee754_acos+0x28>
 80119fe:	49a9      	ldr	r1, [pc, #676]	@ (8011ca4 <__ieee754_acos+0x2ec>)
 8011a00:	428b      	cmp	r3, r1
 8011a02:	f200 8085 	bhi.w	8011b10 <__ieee754_acos+0x158>
 8011a06:	4aa8      	ldr	r2, [pc, #672]	@ (8011ca8 <__ieee754_acos+0x2f0>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	f240 81fa 	bls.w	8011e02 <__ieee754_acos+0x44a>
 8011a0e:	4622      	mov	r2, r4
 8011a10:	462b      	mov	r3, r5
 8011a12:	4620      	mov	r0, r4
 8011a14:	4629      	mov	r1, r5
 8011a16:	f7ee fe0f 	bl	8000638 <__aeabi_dmul>
 8011a1a:	a387      	add	r3, pc, #540	@ (adr r3, 8011c38 <__ieee754_acos+0x280>)
 8011a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a20:	4606      	mov	r6, r0
 8011a22:	460f      	mov	r7, r1
 8011a24:	f7ee fe08 	bl	8000638 <__aeabi_dmul>
 8011a28:	a385      	add	r3, pc, #532	@ (adr r3, 8011c40 <__ieee754_acos+0x288>)
 8011a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a2e:	f7ee fc4d 	bl	80002cc <__adddf3>
 8011a32:	4632      	mov	r2, r6
 8011a34:	463b      	mov	r3, r7
 8011a36:	f7ee fdff 	bl	8000638 <__aeabi_dmul>
 8011a3a:	a383      	add	r3, pc, #524	@ (adr r3, 8011c48 <__ieee754_acos+0x290>)
 8011a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a40:	f7ee fc42 	bl	80002c8 <__aeabi_dsub>
 8011a44:	4632      	mov	r2, r6
 8011a46:	463b      	mov	r3, r7
 8011a48:	f7ee fdf6 	bl	8000638 <__aeabi_dmul>
 8011a4c:	a380      	add	r3, pc, #512	@ (adr r3, 8011c50 <__ieee754_acos+0x298>)
 8011a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a52:	f7ee fc3b 	bl	80002cc <__adddf3>
 8011a56:	4632      	mov	r2, r6
 8011a58:	463b      	mov	r3, r7
 8011a5a:	f7ee fded 	bl	8000638 <__aeabi_dmul>
 8011a5e:	a37e      	add	r3, pc, #504	@ (adr r3, 8011c58 <__ieee754_acos+0x2a0>)
 8011a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a64:	f7ee fc30 	bl	80002c8 <__aeabi_dsub>
 8011a68:	4632      	mov	r2, r6
 8011a6a:	463b      	mov	r3, r7
 8011a6c:	f7ee fde4 	bl	8000638 <__aeabi_dmul>
 8011a70:	a37b      	add	r3, pc, #492	@ (adr r3, 8011c60 <__ieee754_acos+0x2a8>)
 8011a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a76:	f7ee fc29 	bl	80002cc <__adddf3>
 8011a7a:	4632      	mov	r2, r6
 8011a7c:	463b      	mov	r3, r7
 8011a7e:	f7ee fddb 	bl	8000638 <__aeabi_dmul>
 8011a82:	a379      	add	r3, pc, #484	@ (adr r3, 8011c68 <__ieee754_acos+0x2b0>)
 8011a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a88:	4680      	mov	r8, r0
 8011a8a:	4689      	mov	r9, r1
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	4639      	mov	r1, r7
 8011a90:	f7ee fdd2 	bl	8000638 <__aeabi_dmul>
 8011a94:	a376      	add	r3, pc, #472	@ (adr r3, 8011c70 <__ieee754_acos+0x2b8>)
 8011a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9a:	f7ee fc15 	bl	80002c8 <__aeabi_dsub>
 8011a9e:	4632      	mov	r2, r6
 8011aa0:	463b      	mov	r3, r7
 8011aa2:	f7ee fdc9 	bl	8000638 <__aeabi_dmul>
 8011aa6:	a374      	add	r3, pc, #464	@ (adr r3, 8011c78 <__ieee754_acos+0x2c0>)
 8011aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aac:	f7ee fc0e 	bl	80002cc <__adddf3>
 8011ab0:	4632      	mov	r2, r6
 8011ab2:	463b      	mov	r3, r7
 8011ab4:	f7ee fdc0 	bl	8000638 <__aeabi_dmul>
 8011ab8:	a371      	add	r3, pc, #452	@ (adr r3, 8011c80 <__ieee754_acos+0x2c8>)
 8011aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abe:	f7ee fc03 	bl	80002c8 <__aeabi_dsub>
 8011ac2:	4632      	mov	r2, r6
 8011ac4:	463b      	mov	r3, r7
 8011ac6:	f7ee fdb7 	bl	8000638 <__aeabi_dmul>
 8011aca:	4b78      	ldr	r3, [pc, #480]	@ (8011cac <__ieee754_acos+0x2f4>)
 8011acc:	2200      	movs	r2, #0
 8011ace:	f7ee fbfd 	bl	80002cc <__adddf3>
 8011ad2:	4602      	mov	r2, r0
 8011ad4:	460b      	mov	r3, r1
 8011ad6:	4640      	mov	r0, r8
 8011ad8:	4649      	mov	r1, r9
 8011ada:	f7ee fed7 	bl	800088c <__aeabi_ddiv>
 8011ade:	4622      	mov	r2, r4
 8011ae0:	462b      	mov	r3, r5
 8011ae2:	f7ee fda9 	bl	8000638 <__aeabi_dmul>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	460b      	mov	r3, r1
 8011aea:	a167      	add	r1, pc, #412	@ (adr r1, 8011c88 <__ieee754_acos+0x2d0>)
 8011aec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011af0:	f7ee fbea 	bl	80002c8 <__aeabi_dsub>
 8011af4:	4602      	mov	r2, r0
 8011af6:	460b      	mov	r3, r1
 8011af8:	4620      	mov	r0, r4
 8011afa:	4629      	mov	r1, r5
 8011afc:	f7ee fbe4 	bl	80002c8 <__aeabi_dsub>
 8011b00:	4602      	mov	r2, r0
 8011b02:	460b      	mov	r3, r1
 8011b04:	a162      	add	r1, pc, #392	@ (adr r1, 8011c90 <__ieee754_acos+0x2d8>)
 8011b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b0a:	f7ee fbdd 	bl	80002c8 <__aeabi_dsub>
 8011b0e:	e773      	b.n	80119f8 <__ieee754_acos+0x40>
 8011b10:	2d00      	cmp	r5, #0
 8011b12:	f280 80cf 	bge.w	8011cb4 <__ieee754_acos+0x2fc>
 8011b16:	4b65      	ldr	r3, [pc, #404]	@ (8011cac <__ieee754_acos+0x2f4>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	4620      	mov	r0, r4
 8011b1c:	4629      	mov	r1, r5
 8011b1e:	f7ee fbd5 	bl	80002cc <__adddf3>
 8011b22:	4b63      	ldr	r3, [pc, #396]	@ (8011cb0 <__ieee754_acos+0x2f8>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	f7ee fd87 	bl	8000638 <__aeabi_dmul>
 8011b2a:	a343      	add	r3, pc, #268	@ (adr r3, 8011c38 <__ieee754_acos+0x280>)
 8011b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b30:	4604      	mov	r4, r0
 8011b32:	460d      	mov	r5, r1
 8011b34:	f7ee fd80 	bl	8000638 <__aeabi_dmul>
 8011b38:	a341      	add	r3, pc, #260	@ (adr r3, 8011c40 <__ieee754_acos+0x288>)
 8011b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b3e:	f7ee fbc5 	bl	80002cc <__adddf3>
 8011b42:	4622      	mov	r2, r4
 8011b44:	462b      	mov	r3, r5
 8011b46:	f7ee fd77 	bl	8000638 <__aeabi_dmul>
 8011b4a:	a33f      	add	r3, pc, #252	@ (adr r3, 8011c48 <__ieee754_acos+0x290>)
 8011b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b50:	f7ee fbba 	bl	80002c8 <__aeabi_dsub>
 8011b54:	4622      	mov	r2, r4
 8011b56:	462b      	mov	r3, r5
 8011b58:	f7ee fd6e 	bl	8000638 <__aeabi_dmul>
 8011b5c:	a33c      	add	r3, pc, #240	@ (adr r3, 8011c50 <__ieee754_acos+0x298>)
 8011b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b62:	f7ee fbb3 	bl	80002cc <__adddf3>
 8011b66:	4622      	mov	r2, r4
 8011b68:	462b      	mov	r3, r5
 8011b6a:	f7ee fd65 	bl	8000638 <__aeabi_dmul>
 8011b6e:	a33a      	add	r3, pc, #232	@ (adr r3, 8011c58 <__ieee754_acos+0x2a0>)
 8011b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b74:	f7ee fba8 	bl	80002c8 <__aeabi_dsub>
 8011b78:	4622      	mov	r2, r4
 8011b7a:	462b      	mov	r3, r5
 8011b7c:	f7ee fd5c 	bl	8000638 <__aeabi_dmul>
 8011b80:	a337      	add	r3, pc, #220	@ (adr r3, 8011c60 <__ieee754_acos+0x2a8>)
 8011b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b86:	f7ee fba1 	bl	80002cc <__adddf3>
 8011b8a:	4622      	mov	r2, r4
 8011b8c:	462b      	mov	r3, r5
 8011b8e:	f7ee fd53 	bl	8000638 <__aeabi_dmul>
 8011b92:	a335      	add	r3, pc, #212	@ (adr r3, 8011c68 <__ieee754_acos+0x2b0>)
 8011b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b98:	4606      	mov	r6, r0
 8011b9a:	460f      	mov	r7, r1
 8011b9c:	4620      	mov	r0, r4
 8011b9e:	4629      	mov	r1, r5
 8011ba0:	f7ee fd4a 	bl	8000638 <__aeabi_dmul>
 8011ba4:	a332      	add	r3, pc, #200	@ (adr r3, 8011c70 <__ieee754_acos+0x2b8>)
 8011ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011baa:	f7ee fb8d 	bl	80002c8 <__aeabi_dsub>
 8011bae:	4622      	mov	r2, r4
 8011bb0:	462b      	mov	r3, r5
 8011bb2:	f7ee fd41 	bl	8000638 <__aeabi_dmul>
 8011bb6:	a330      	add	r3, pc, #192	@ (adr r3, 8011c78 <__ieee754_acos+0x2c0>)
 8011bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbc:	f7ee fb86 	bl	80002cc <__adddf3>
 8011bc0:	4622      	mov	r2, r4
 8011bc2:	462b      	mov	r3, r5
 8011bc4:	f7ee fd38 	bl	8000638 <__aeabi_dmul>
 8011bc8:	a32d      	add	r3, pc, #180	@ (adr r3, 8011c80 <__ieee754_acos+0x2c8>)
 8011bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bce:	f7ee fb7b 	bl	80002c8 <__aeabi_dsub>
 8011bd2:	4622      	mov	r2, r4
 8011bd4:	462b      	mov	r3, r5
 8011bd6:	f7ee fd2f 	bl	8000638 <__aeabi_dmul>
 8011bda:	4b34      	ldr	r3, [pc, #208]	@ (8011cac <__ieee754_acos+0x2f4>)
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f7ee fb75 	bl	80002cc <__adddf3>
 8011be2:	ec45 4b10 	vmov	d0, r4, r5
 8011be6:	4680      	mov	r8, r0
 8011be8:	4689      	mov	r9, r1
 8011bea:	f7ff fe0f 	bl	801180c <__ieee754_sqrt>
 8011bee:	ec55 4b10 	vmov	r4, r5, d0
 8011bf2:	4642      	mov	r2, r8
 8011bf4:	464b      	mov	r3, r9
 8011bf6:	4630      	mov	r0, r6
 8011bf8:	4639      	mov	r1, r7
 8011bfa:	f7ee fe47 	bl	800088c <__aeabi_ddiv>
 8011bfe:	4622      	mov	r2, r4
 8011c00:	462b      	mov	r3, r5
 8011c02:	f7ee fd19 	bl	8000638 <__aeabi_dmul>
 8011c06:	a320      	add	r3, pc, #128	@ (adr r3, 8011c88 <__ieee754_acos+0x2d0>)
 8011c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0c:	f7ee fb5c 	bl	80002c8 <__aeabi_dsub>
 8011c10:	4622      	mov	r2, r4
 8011c12:	462b      	mov	r3, r5
 8011c14:	f7ee fb5a 	bl	80002cc <__adddf3>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	f7ee fb56 	bl	80002cc <__adddf3>
 8011c20:	4602      	mov	r2, r0
 8011c22:	460b      	mov	r3, r1
 8011c24:	a11c      	add	r1, pc, #112	@ (adr r1, 8011c98 <__ieee754_acos+0x2e0>)
 8011c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c2a:	e76e      	b.n	8011b0a <__ieee754_acos+0x152>
 8011c2c:	f3af 8000 	nop.w
	...
 8011c38:	0dfdf709 	.word	0x0dfdf709
 8011c3c:	3f023de1 	.word	0x3f023de1
 8011c40:	7501b288 	.word	0x7501b288
 8011c44:	3f49efe0 	.word	0x3f49efe0
 8011c48:	b5688f3b 	.word	0xb5688f3b
 8011c4c:	3fa48228 	.word	0x3fa48228
 8011c50:	0e884455 	.word	0x0e884455
 8011c54:	3fc9c155 	.word	0x3fc9c155
 8011c58:	03eb6f7d 	.word	0x03eb6f7d
 8011c5c:	3fd4d612 	.word	0x3fd4d612
 8011c60:	55555555 	.word	0x55555555
 8011c64:	3fc55555 	.word	0x3fc55555
 8011c68:	b12e9282 	.word	0xb12e9282
 8011c6c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011c70:	1b8d0159 	.word	0x1b8d0159
 8011c74:	3fe6066c 	.word	0x3fe6066c
 8011c78:	9c598ac8 	.word	0x9c598ac8
 8011c7c:	40002ae5 	.word	0x40002ae5
 8011c80:	1c8a2d4b 	.word	0x1c8a2d4b
 8011c84:	40033a27 	.word	0x40033a27
 8011c88:	33145c07 	.word	0x33145c07
 8011c8c:	3c91a626 	.word	0x3c91a626
 8011c90:	54442d18 	.word	0x54442d18
 8011c94:	3ff921fb 	.word	0x3ff921fb
 8011c98:	54442d18 	.word	0x54442d18
 8011c9c:	400921fb 	.word	0x400921fb
 8011ca0:	3fefffff 	.word	0x3fefffff
 8011ca4:	3fdfffff 	.word	0x3fdfffff
 8011ca8:	3c600000 	.word	0x3c600000
 8011cac:	3ff00000 	.word	0x3ff00000
 8011cb0:	3fe00000 	.word	0x3fe00000
 8011cb4:	4622      	mov	r2, r4
 8011cb6:	462b      	mov	r3, r5
 8011cb8:	496b      	ldr	r1, [pc, #428]	@ (8011e68 <__ieee754_acos+0x4b0>)
 8011cba:	2000      	movs	r0, #0
 8011cbc:	f7ee fb04 	bl	80002c8 <__aeabi_dsub>
 8011cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8011e6c <__ieee754_acos+0x4b4>)
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	f7ee fcb8 	bl	8000638 <__aeabi_dmul>
 8011cc8:	4604      	mov	r4, r0
 8011cca:	460d      	mov	r5, r1
 8011ccc:	ec45 4b10 	vmov	d0, r4, r5
 8011cd0:	f7ff fd9c 	bl	801180c <__ieee754_sqrt>
 8011cd4:	a34c      	add	r3, pc, #304	@ (adr r3, 8011e08 <__ieee754_acos+0x450>)
 8011cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cda:	4620      	mov	r0, r4
 8011cdc:	4629      	mov	r1, r5
 8011cde:	ec59 8b10 	vmov	r8, r9, d0
 8011ce2:	f7ee fca9 	bl	8000638 <__aeabi_dmul>
 8011ce6:	a34a      	add	r3, pc, #296	@ (adr r3, 8011e10 <__ieee754_acos+0x458>)
 8011ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cec:	f7ee faee 	bl	80002cc <__adddf3>
 8011cf0:	4622      	mov	r2, r4
 8011cf2:	462b      	mov	r3, r5
 8011cf4:	f7ee fca0 	bl	8000638 <__aeabi_dmul>
 8011cf8:	a347      	add	r3, pc, #284	@ (adr r3, 8011e18 <__ieee754_acos+0x460>)
 8011cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfe:	f7ee fae3 	bl	80002c8 <__aeabi_dsub>
 8011d02:	4622      	mov	r2, r4
 8011d04:	462b      	mov	r3, r5
 8011d06:	f7ee fc97 	bl	8000638 <__aeabi_dmul>
 8011d0a:	a345      	add	r3, pc, #276	@ (adr r3, 8011e20 <__ieee754_acos+0x468>)
 8011d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d10:	f7ee fadc 	bl	80002cc <__adddf3>
 8011d14:	4622      	mov	r2, r4
 8011d16:	462b      	mov	r3, r5
 8011d18:	f7ee fc8e 	bl	8000638 <__aeabi_dmul>
 8011d1c:	a342      	add	r3, pc, #264	@ (adr r3, 8011e28 <__ieee754_acos+0x470>)
 8011d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d22:	f7ee fad1 	bl	80002c8 <__aeabi_dsub>
 8011d26:	4622      	mov	r2, r4
 8011d28:	462b      	mov	r3, r5
 8011d2a:	f7ee fc85 	bl	8000638 <__aeabi_dmul>
 8011d2e:	a340      	add	r3, pc, #256	@ (adr r3, 8011e30 <__ieee754_acos+0x478>)
 8011d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d34:	f7ee faca 	bl	80002cc <__adddf3>
 8011d38:	4622      	mov	r2, r4
 8011d3a:	462b      	mov	r3, r5
 8011d3c:	f7ee fc7c 	bl	8000638 <__aeabi_dmul>
 8011d40:	a33d      	add	r3, pc, #244	@ (adr r3, 8011e38 <__ieee754_acos+0x480>)
 8011d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d46:	4682      	mov	sl, r0
 8011d48:	468b      	mov	fp, r1
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	4629      	mov	r1, r5
 8011d4e:	f7ee fc73 	bl	8000638 <__aeabi_dmul>
 8011d52:	a33b      	add	r3, pc, #236	@ (adr r3, 8011e40 <__ieee754_acos+0x488>)
 8011d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d58:	f7ee fab6 	bl	80002c8 <__aeabi_dsub>
 8011d5c:	4622      	mov	r2, r4
 8011d5e:	462b      	mov	r3, r5
 8011d60:	f7ee fc6a 	bl	8000638 <__aeabi_dmul>
 8011d64:	a338      	add	r3, pc, #224	@ (adr r3, 8011e48 <__ieee754_acos+0x490>)
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	f7ee faaf 	bl	80002cc <__adddf3>
 8011d6e:	4622      	mov	r2, r4
 8011d70:	462b      	mov	r3, r5
 8011d72:	f7ee fc61 	bl	8000638 <__aeabi_dmul>
 8011d76:	a336      	add	r3, pc, #216	@ (adr r3, 8011e50 <__ieee754_acos+0x498>)
 8011d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7c:	f7ee faa4 	bl	80002c8 <__aeabi_dsub>
 8011d80:	4622      	mov	r2, r4
 8011d82:	462b      	mov	r3, r5
 8011d84:	f7ee fc58 	bl	8000638 <__aeabi_dmul>
 8011d88:	4b37      	ldr	r3, [pc, #220]	@ (8011e68 <__ieee754_acos+0x4b0>)
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f7ee fa9e 	bl	80002cc <__adddf3>
 8011d90:	4602      	mov	r2, r0
 8011d92:	460b      	mov	r3, r1
 8011d94:	4650      	mov	r0, sl
 8011d96:	4659      	mov	r1, fp
 8011d98:	f7ee fd78 	bl	800088c <__aeabi_ddiv>
 8011d9c:	4642      	mov	r2, r8
 8011d9e:	464b      	mov	r3, r9
 8011da0:	f7ee fc4a 	bl	8000638 <__aeabi_dmul>
 8011da4:	2600      	movs	r6, #0
 8011da6:	4682      	mov	sl, r0
 8011da8:	468b      	mov	fp, r1
 8011daa:	4632      	mov	r2, r6
 8011dac:	464b      	mov	r3, r9
 8011dae:	4630      	mov	r0, r6
 8011db0:	4649      	mov	r1, r9
 8011db2:	f7ee fc41 	bl	8000638 <__aeabi_dmul>
 8011db6:	4602      	mov	r2, r0
 8011db8:	460b      	mov	r3, r1
 8011dba:	4620      	mov	r0, r4
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	f7ee fa83 	bl	80002c8 <__aeabi_dsub>
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	460d      	mov	r5, r1
 8011dc8:	464b      	mov	r3, r9
 8011dca:	4640      	mov	r0, r8
 8011dcc:	4649      	mov	r1, r9
 8011dce:	f7ee fa7d 	bl	80002cc <__adddf3>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	4629      	mov	r1, r5
 8011dda:	f7ee fd57 	bl	800088c <__aeabi_ddiv>
 8011dde:	4602      	mov	r2, r0
 8011de0:	460b      	mov	r3, r1
 8011de2:	4650      	mov	r0, sl
 8011de4:	4659      	mov	r1, fp
 8011de6:	f7ee fa71 	bl	80002cc <__adddf3>
 8011dea:	4632      	mov	r2, r6
 8011dec:	464b      	mov	r3, r9
 8011dee:	f7ee fa6d 	bl	80002cc <__adddf3>
 8011df2:	4602      	mov	r2, r0
 8011df4:	460b      	mov	r3, r1
 8011df6:	f7ee fa69 	bl	80002cc <__adddf3>
 8011dfa:	e5fd      	b.n	80119f8 <__ieee754_acos+0x40>
 8011dfc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8011e58 <__ieee754_acos+0x4a0>
 8011e00:	e5ee      	b.n	80119e0 <__ieee754_acos+0x28>
 8011e02:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011e60 <__ieee754_acos+0x4a8>
 8011e06:	e5eb      	b.n	80119e0 <__ieee754_acos+0x28>
 8011e08:	0dfdf709 	.word	0x0dfdf709
 8011e0c:	3f023de1 	.word	0x3f023de1
 8011e10:	7501b288 	.word	0x7501b288
 8011e14:	3f49efe0 	.word	0x3f49efe0
 8011e18:	b5688f3b 	.word	0xb5688f3b
 8011e1c:	3fa48228 	.word	0x3fa48228
 8011e20:	0e884455 	.word	0x0e884455
 8011e24:	3fc9c155 	.word	0x3fc9c155
 8011e28:	03eb6f7d 	.word	0x03eb6f7d
 8011e2c:	3fd4d612 	.word	0x3fd4d612
 8011e30:	55555555 	.word	0x55555555
 8011e34:	3fc55555 	.word	0x3fc55555
 8011e38:	b12e9282 	.word	0xb12e9282
 8011e3c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011e40:	1b8d0159 	.word	0x1b8d0159
 8011e44:	3fe6066c 	.word	0x3fe6066c
 8011e48:	9c598ac8 	.word	0x9c598ac8
 8011e4c:	40002ae5 	.word	0x40002ae5
 8011e50:	1c8a2d4b 	.word	0x1c8a2d4b
 8011e54:	40033a27 	.word	0x40033a27
 8011e58:	54442d18 	.word	0x54442d18
 8011e5c:	400921fb 	.word	0x400921fb
 8011e60:	54442d18 	.word	0x54442d18
 8011e64:	3ff921fb 	.word	0x3ff921fb
 8011e68:	3ff00000 	.word	0x3ff00000
 8011e6c:	3fe00000 	.word	0x3fe00000

08011e70 <__ieee754_asin>:
 8011e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	ec55 4b10 	vmov	r4, r5, d0
 8011e78:	4bc7      	ldr	r3, [pc, #796]	@ (8012198 <__ieee754_asin+0x328>)
 8011e7a:	b087      	sub	sp, #28
 8011e7c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8011e80:	429e      	cmp	r6, r3
 8011e82:	9501      	str	r5, [sp, #4]
 8011e84:	d92d      	bls.n	8011ee2 <__ieee754_asin+0x72>
 8011e86:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8011e8a:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8011e8e:	4326      	orrs	r6, r4
 8011e90:	d116      	bne.n	8011ec0 <__ieee754_asin+0x50>
 8011e92:	a3a7      	add	r3, pc, #668	@ (adr r3, 8012130 <__ieee754_asin+0x2c0>)
 8011e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e98:	4620      	mov	r0, r4
 8011e9a:	4629      	mov	r1, r5
 8011e9c:	f7ee fbcc 	bl	8000638 <__aeabi_dmul>
 8011ea0:	a3a5      	add	r3, pc, #660	@ (adr r3, 8012138 <__ieee754_asin+0x2c8>)
 8011ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea6:	4606      	mov	r6, r0
 8011ea8:	460f      	mov	r7, r1
 8011eaa:	4620      	mov	r0, r4
 8011eac:	4629      	mov	r1, r5
 8011eae:	f7ee fbc3 	bl	8000638 <__aeabi_dmul>
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	460b      	mov	r3, r1
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	4639      	mov	r1, r7
 8011eba:	f7ee fa07 	bl	80002cc <__adddf3>
 8011ebe:	e009      	b.n	8011ed4 <__ieee754_asin+0x64>
 8011ec0:	4622      	mov	r2, r4
 8011ec2:	462b      	mov	r3, r5
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f7ee f9fe 	bl	80002c8 <__aeabi_dsub>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	f7ee fcdc 	bl	800088c <__aeabi_ddiv>
 8011ed4:	4604      	mov	r4, r0
 8011ed6:	460d      	mov	r5, r1
 8011ed8:	ec45 4b10 	vmov	d0, r4, r5
 8011edc:	b007      	add	sp, #28
 8011ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee2:	4bae      	ldr	r3, [pc, #696]	@ (801219c <__ieee754_asin+0x32c>)
 8011ee4:	429e      	cmp	r6, r3
 8011ee6:	d810      	bhi.n	8011f0a <__ieee754_asin+0x9a>
 8011ee8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8011eec:	f080 80ad 	bcs.w	801204a <__ieee754_asin+0x1da>
 8011ef0:	a393      	add	r3, pc, #588	@ (adr r3, 8012140 <__ieee754_asin+0x2d0>)
 8011ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	4629      	mov	r1, r5
 8011efa:	f7ee f9e7 	bl	80002cc <__adddf3>
 8011efe:	4ba8      	ldr	r3, [pc, #672]	@ (80121a0 <__ieee754_asin+0x330>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	f7ee fe29 	bl	8000b58 <__aeabi_dcmpgt>
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d1e6      	bne.n	8011ed8 <__ieee754_asin+0x68>
 8011f0a:	ec45 4b10 	vmov	d0, r4, r5
 8011f0e:	f7ff fc69 	bl	80117e4 <fabs>
 8011f12:	49a3      	ldr	r1, [pc, #652]	@ (80121a0 <__ieee754_asin+0x330>)
 8011f14:	ec53 2b10 	vmov	r2, r3, d0
 8011f18:	2000      	movs	r0, #0
 8011f1a:	f7ee f9d5 	bl	80002c8 <__aeabi_dsub>
 8011f1e:	4ba1      	ldr	r3, [pc, #644]	@ (80121a4 <__ieee754_asin+0x334>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	f7ee fb89 	bl	8000638 <__aeabi_dmul>
 8011f26:	a388      	add	r3, pc, #544	@ (adr r3, 8012148 <__ieee754_asin+0x2d8>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	460d      	mov	r5, r1
 8011f30:	f7ee fb82 	bl	8000638 <__aeabi_dmul>
 8011f34:	a386      	add	r3, pc, #536	@ (adr r3, 8012150 <__ieee754_asin+0x2e0>)
 8011f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3a:	f7ee f9c7 	bl	80002cc <__adddf3>
 8011f3e:	4622      	mov	r2, r4
 8011f40:	462b      	mov	r3, r5
 8011f42:	f7ee fb79 	bl	8000638 <__aeabi_dmul>
 8011f46:	a384      	add	r3, pc, #528	@ (adr r3, 8012158 <__ieee754_asin+0x2e8>)
 8011f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4c:	f7ee f9bc 	bl	80002c8 <__aeabi_dsub>
 8011f50:	4622      	mov	r2, r4
 8011f52:	462b      	mov	r3, r5
 8011f54:	f7ee fb70 	bl	8000638 <__aeabi_dmul>
 8011f58:	a381      	add	r3, pc, #516	@ (adr r3, 8012160 <__ieee754_asin+0x2f0>)
 8011f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5e:	f7ee f9b5 	bl	80002cc <__adddf3>
 8011f62:	4622      	mov	r2, r4
 8011f64:	462b      	mov	r3, r5
 8011f66:	f7ee fb67 	bl	8000638 <__aeabi_dmul>
 8011f6a:	a37f      	add	r3, pc, #508	@ (adr r3, 8012168 <__ieee754_asin+0x2f8>)
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	f7ee f9aa 	bl	80002c8 <__aeabi_dsub>
 8011f74:	4622      	mov	r2, r4
 8011f76:	462b      	mov	r3, r5
 8011f78:	f7ee fb5e 	bl	8000638 <__aeabi_dmul>
 8011f7c:	a37c      	add	r3, pc, #496	@ (adr r3, 8012170 <__ieee754_asin+0x300>)
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	f7ee f9a3 	bl	80002cc <__adddf3>
 8011f86:	4622      	mov	r2, r4
 8011f88:	462b      	mov	r3, r5
 8011f8a:	f7ee fb55 	bl	8000638 <__aeabi_dmul>
 8011f8e:	a37a      	add	r3, pc, #488	@ (adr r3, 8012178 <__ieee754_asin+0x308>)
 8011f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f98:	4620      	mov	r0, r4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	f7ee fb4c 	bl	8000638 <__aeabi_dmul>
 8011fa0:	a377      	add	r3, pc, #476	@ (adr r3, 8012180 <__ieee754_asin+0x310>)
 8011fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa6:	f7ee f98f 	bl	80002c8 <__aeabi_dsub>
 8011faa:	4622      	mov	r2, r4
 8011fac:	462b      	mov	r3, r5
 8011fae:	f7ee fb43 	bl	8000638 <__aeabi_dmul>
 8011fb2:	a375      	add	r3, pc, #468	@ (adr r3, 8012188 <__ieee754_asin+0x318>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee f988 	bl	80002cc <__adddf3>
 8011fbc:	4622      	mov	r2, r4
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	f7ee fb3a 	bl	8000638 <__aeabi_dmul>
 8011fc4:	a372      	add	r3, pc, #456	@ (adr r3, 8012190 <__ieee754_asin+0x320>)
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	f7ee f97d 	bl	80002c8 <__aeabi_dsub>
 8011fce:	4622      	mov	r2, r4
 8011fd0:	462b      	mov	r3, r5
 8011fd2:	f7ee fb31 	bl	8000638 <__aeabi_dmul>
 8011fd6:	4b72      	ldr	r3, [pc, #456]	@ (80121a0 <__ieee754_asin+0x330>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	f7ee f977 	bl	80002cc <__adddf3>
 8011fde:	ec45 4b10 	vmov	d0, r4, r5
 8011fe2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011fe6:	f7ff fc11 	bl	801180c <__ieee754_sqrt>
 8011fea:	4b6f      	ldr	r3, [pc, #444]	@ (80121a8 <__ieee754_asin+0x338>)
 8011fec:	429e      	cmp	r6, r3
 8011fee:	ec5b ab10 	vmov	sl, fp, d0
 8011ff2:	f240 80db 	bls.w	80121ac <__ieee754_asin+0x33c>
 8011ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ffe:	f7ee fc45 	bl	800088c <__aeabi_ddiv>
 8012002:	4652      	mov	r2, sl
 8012004:	465b      	mov	r3, fp
 8012006:	f7ee fb17 	bl	8000638 <__aeabi_dmul>
 801200a:	4652      	mov	r2, sl
 801200c:	465b      	mov	r3, fp
 801200e:	f7ee f95d 	bl	80002cc <__adddf3>
 8012012:	4602      	mov	r2, r0
 8012014:	460b      	mov	r3, r1
 8012016:	f7ee f959 	bl	80002cc <__adddf3>
 801201a:	a347      	add	r3, pc, #284	@ (adr r3, 8012138 <__ieee754_asin+0x2c8>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	f7ee f952 	bl	80002c8 <__aeabi_dsub>
 8012024:	4602      	mov	r2, r0
 8012026:	460b      	mov	r3, r1
 8012028:	a141      	add	r1, pc, #260	@ (adr r1, 8012130 <__ieee754_asin+0x2c0>)
 801202a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801202e:	f7ee f94b 	bl	80002c8 <__aeabi_dsub>
 8012032:	9b01      	ldr	r3, [sp, #4]
 8012034:	2b00      	cmp	r3, #0
 8012036:	bfdc      	itt	le
 8012038:	4602      	movle	r2, r0
 801203a:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801203e:	4604      	mov	r4, r0
 8012040:	460d      	mov	r5, r1
 8012042:	bfdc      	itt	le
 8012044:	4614      	movle	r4, r2
 8012046:	461d      	movle	r5, r3
 8012048:	e746      	b.n	8011ed8 <__ieee754_asin+0x68>
 801204a:	4622      	mov	r2, r4
 801204c:	462b      	mov	r3, r5
 801204e:	4620      	mov	r0, r4
 8012050:	4629      	mov	r1, r5
 8012052:	f7ee faf1 	bl	8000638 <__aeabi_dmul>
 8012056:	a33c      	add	r3, pc, #240	@ (adr r3, 8012148 <__ieee754_asin+0x2d8>)
 8012058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205c:	4606      	mov	r6, r0
 801205e:	460f      	mov	r7, r1
 8012060:	f7ee faea 	bl	8000638 <__aeabi_dmul>
 8012064:	a33a      	add	r3, pc, #232	@ (adr r3, 8012150 <__ieee754_asin+0x2e0>)
 8012066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206a:	f7ee f92f 	bl	80002cc <__adddf3>
 801206e:	4632      	mov	r2, r6
 8012070:	463b      	mov	r3, r7
 8012072:	f7ee fae1 	bl	8000638 <__aeabi_dmul>
 8012076:	a338      	add	r3, pc, #224	@ (adr r3, 8012158 <__ieee754_asin+0x2e8>)
 8012078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207c:	f7ee f924 	bl	80002c8 <__aeabi_dsub>
 8012080:	4632      	mov	r2, r6
 8012082:	463b      	mov	r3, r7
 8012084:	f7ee fad8 	bl	8000638 <__aeabi_dmul>
 8012088:	a335      	add	r3, pc, #212	@ (adr r3, 8012160 <__ieee754_asin+0x2f0>)
 801208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208e:	f7ee f91d 	bl	80002cc <__adddf3>
 8012092:	4632      	mov	r2, r6
 8012094:	463b      	mov	r3, r7
 8012096:	f7ee facf 	bl	8000638 <__aeabi_dmul>
 801209a:	a333      	add	r3, pc, #204	@ (adr r3, 8012168 <__ieee754_asin+0x2f8>)
 801209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a0:	f7ee f912 	bl	80002c8 <__aeabi_dsub>
 80120a4:	4632      	mov	r2, r6
 80120a6:	463b      	mov	r3, r7
 80120a8:	f7ee fac6 	bl	8000638 <__aeabi_dmul>
 80120ac:	a330      	add	r3, pc, #192	@ (adr r3, 8012170 <__ieee754_asin+0x300>)
 80120ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b2:	f7ee f90b 	bl	80002cc <__adddf3>
 80120b6:	4632      	mov	r2, r6
 80120b8:	463b      	mov	r3, r7
 80120ba:	f7ee fabd 	bl	8000638 <__aeabi_dmul>
 80120be:	a32e      	add	r3, pc, #184	@ (adr r3, 8012178 <__ieee754_asin+0x308>)
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	4680      	mov	r8, r0
 80120c6:	4689      	mov	r9, r1
 80120c8:	4630      	mov	r0, r6
 80120ca:	4639      	mov	r1, r7
 80120cc:	f7ee fab4 	bl	8000638 <__aeabi_dmul>
 80120d0:	a32b      	add	r3, pc, #172	@ (adr r3, 8012180 <__ieee754_asin+0x310>)
 80120d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d6:	f7ee f8f7 	bl	80002c8 <__aeabi_dsub>
 80120da:	4632      	mov	r2, r6
 80120dc:	463b      	mov	r3, r7
 80120de:	f7ee faab 	bl	8000638 <__aeabi_dmul>
 80120e2:	a329      	add	r3, pc, #164	@ (adr r3, 8012188 <__ieee754_asin+0x318>)
 80120e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e8:	f7ee f8f0 	bl	80002cc <__adddf3>
 80120ec:	4632      	mov	r2, r6
 80120ee:	463b      	mov	r3, r7
 80120f0:	f7ee faa2 	bl	8000638 <__aeabi_dmul>
 80120f4:	a326      	add	r3, pc, #152	@ (adr r3, 8012190 <__ieee754_asin+0x320>)
 80120f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fa:	f7ee f8e5 	bl	80002c8 <__aeabi_dsub>
 80120fe:	4632      	mov	r2, r6
 8012100:	463b      	mov	r3, r7
 8012102:	f7ee fa99 	bl	8000638 <__aeabi_dmul>
 8012106:	4b26      	ldr	r3, [pc, #152]	@ (80121a0 <__ieee754_asin+0x330>)
 8012108:	2200      	movs	r2, #0
 801210a:	f7ee f8df 	bl	80002cc <__adddf3>
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	4640      	mov	r0, r8
 8012114:	4649      	mov	r1, r9
 8012116:	f7ee fbb9 	bl	800088c <__aeabi_ddiv>
 801211a:	4622      	mov	r2, r4
 801211c:	462b      	mov	r3, r5
 801211e:	f7ee fa8b 	bl	8000638 <__aeabi_dmul>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	4620      	mov	r0, r4
 8012128:	4629      	mov	r1, r5
 801212a:	e6c6      	b.n	8011eba <__ieee754_asin+0x4a>
 801212c:	f3af 8000 	nop.w
 8012130:	54442d18 	.word	0x54442d18
 8012134:	3ff921fb 	.word	0x3ff921fb
 8012138:	33145c07 	.word	0x33145c07
 801213c:	3c91a626 	.word	0x3c91a626
 8012140:	8800759c 	.word	0x8800759c
 8012144:	7e37e43c 	.word	0x7e37e43c
 8012148:	0dfdf709 	.word	0x0dfdf709
 801214c:	3f023de1 	.word	0x3f023de1
 8012150:	7501b288 	.word	0x7501b288
 8012154:	3f49efe0 	.word	0x3f49efe0
 8012158:	b5688f3b 	.word	0xb5688f3b
 801215c:	3fa48228 	.word	0x3fa48228
 8012160:	0e884455 	.word	0x0e884455
 8012164:	3fc9c155 	.word	0x3fc9c155
 8012168:	03eb6f7d 	.word	0x03eb6f7d
 801216c:	3fd4d612 	.word	0x3fd4d612
 8012170:	55555555 	.word	0x55555555
 8012174:	3fc55555 	.word	0x3fc55555
 8012178:	b12e9282 	.word	0xb12e9282
 801217c:	3fb3b8c5 	.word	0x3fb3b8c5
 8012180:	1b8d0159 	.word	0x1b8d0159
 8012184:	3fe6066c 	.word	0x3fe6066c
 8012188:	9c598ac8 	.word	0x9c598ac8
 801218c:	40002ae5 	.word	0x40002ae5
 8012190:	1c8a2d4b 	.word	0x1c8a2d4b
 8012194:	40033a27 	.word	0x40033a27
 8012198:	3fefffff 	.word	0x3fefffff
 801219c:	3fdfffff 	.word	0x3fdfffff
 80121a0:	3ff00000 	.word	0x3ff00000
 80121a4:	3fe00000 	.word	0x3fe00000
 80121a8:	3fef3332 	.word	0x3fef3332
 80121ac:	4652      	mov	r2, sl
 80121ae:	465b      	mov	r3, fp
 80121b0:	4650      	mov	r0, sl
 80121b2:	4659      	mov	r1, fp
 80121b4:	f7ee f88a 	bl	80002cc <__adddf3>
 80121b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121bc:	4606      	mov	r6, r0
 80121be:	460f      	mov	r7, r1
 80121c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121c4:	f7ee fb62 	bl	800088c <__aeabi_ddiv>
 80121c8:	4602      	mov	r2, r0
 80121ca:	460b      	mov	r3, r1
 80121cc:	4630      	mov	r0, r6
 80121ce:	4639      	mov	r1, r7
 80121d0:	f7ee fa32 	bl	8000638 <__aeabi_dmul>
 80121d4:	f04f 0800 	mov.w	r8, #0
 80121d8:	4606      	mov	r6, r0
 80121da:	460f      	mov	r7, r1
 80121dc:	4642      	mov	r2, r8
 80121de:	465b      	mov	r3, fp
 80121e0:	4640      	mov	r0, r8
 80121e2:	4659      	mov	r1, fp
 80121e4:	f7ee fa28 	bl	8000638 <__aeabi_dmul>
 80121e8:	4602      	mov	r2, r0
 80121ea:	460b      	mov	r3, r1
 80121ec:	4620      	mov	r0, r4
 80121ee:	4629      	mov	r1, r5
 80121f0:	f7ee f86a 	bl	80002c8 <__aeabi_dsub>
 80121f4:	4642      	mov	r2, r8
 80121f6:	4604      	mov	r4, r0
 80121f8:	460d      	mov	r5, r1
 80121fa:	465b      	mov	r3, fp
 80121fc:	4650      	mov	r0, sl
 80121fe:	4659      	mov	r1, fp
 8012200:	f7ee f864 	bl	80002cc <__adddf3>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	4620      	mov	r0, r4
 801220a:	4629      	mov	r1, r5
 801220c:	f7ee fb3e 	bl	800088c <__aeabi_ddiv>
 8012210:	4602      	mov	r2, r0
 8012212:	460b      	mov	r3, r1
 8012214:	f7ee f85a 	bl	80002cc <__adddf3>
 8012218:	4602      	mov	r2, r0
 801221a:	460b      	mov	r3, r1
 801221c:	a112      	add	r1, pc, #72	@ (adr r1, 8012268 <__ieee754_asin+0x3f8>)
 801221e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012222:	f7ee f851 	bl	80002c8 <__aeabi_dsub>
 8012226:	4602      	mov	r2, r0
 8012228:	460b      	mov	r3, r1
 801222a:	4630      	mov	r0, r6
 801222c:	4639      	mov	r1, r7
 801222e:	f7ee f84b 	bl	80002c8 <__aeabi_dsub>
 8012232:	4642      	mov	r2, r8
 8012234:	4604      	mov	r4, r0
 8012236:	460d      	mov	r5, r1
 8012238:	465b      	mov	r3, fp
 801223a:	4640      	mov	r0, r8
 801223c:	4659      	mov	r1, fp
 801223e:	f7ee f845 	bl	80002cc <__adddf3>
 8012242:	4602      	mov	r2, r0
 8012244:	460b      	mov	r3, r1
 8012246:	a10a      	add	r1, pc, #40	@ (adr r1, 8012270 <__ieee754_asin+0x400>)
 8012248:	e9d1 0100 	ldrd	r0, r1, [r1]
 801224c:	f7ee f83c 	bl	80002c8 <__aeabi_dsub>
 8012250:	4602      	mov	r2, r0
 8012252:	460b      	mov	r3, r1
 8012254:	4620      	mov	r0, r4
 8012256:	4629      	mov	r1, r5
 8012258:	f7ee f836 	bl	80002c8 <__aeabi_dsub>
 801225c:	4602      	mov	r2, r0
 801225e:	460b      	mov	r3, r1
 8012260:	a103      	add	r1, pc, #12	@ (adr r1, 8012270 <__ieee754_asin+0x400>)
 8012262:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012266:	e6e2      	b.n	801202e <__ieee754_asin+0x1be>
 8012268:	33145c07 	.word	0x33145c07
 801226c:	3c91a626 	.word	0x3c91a626
 8012270:	54442d18 	.word	0x54442d18
 8012274:	3fe921fb 	.word	0x3fe921fb

08012278 <__ieee754_atan2>:
 8012278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801227c:	ec57 6b11 	vmov	r6, r7, d1
 8012280:	4273      	negs	r3, r6
 8012282:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8012400 <__ieee754_atan2+0x188>
 8012286:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801228a:	4333      	orrs	r3, r6
 801228c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8012290:	4543      	cmp	r3, r8
 8012292:	ec51 0b10 	vmov	r0, r1, d0
 8012296:	4635      	mov	r5, r6
 8012298:	d809      	bhi.n	80122ae <__ieee754_atan2+0x36>
 801229a:	4244      	negs	r4, r0
 801229c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80122a0:	4304      	orrs	r4, r0
 80122a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80122a6:	4544      	cmp	r4, r8
 80122a8:	468e      	mov	lr, r1
 80122aa:	4681      	mov	r9, r0
 80122ac:	d907      	bls.n	80122be <__ieee754_atan2+0x46>
 80122ae:	4632      	mov	r2, r6
 80122b0:	463b      	mov	r3, r7
 80122b2:	f7ee f80b 	bl	80002cc <__adddf3>
 80122b6:	ec41 0b10 	vmov	d0, r0, r1
 80122ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80122c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80122c6:	4334      	orrs	r4, r6
 80122c8:	d103      	bne.n	80122d2 <__ieee754_atan2+0x5a>
 80122ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122ce:	f000 bde7 	b.w	8012ea0 <atan>
 80122d2:	17bc      	asrs	r4, r7, #30
 80122d4:	f004 0402 	and.w	r4, r4, #2
 80122d8:	ea53 0909 	orrs.w	r9, r3, r9
 80122dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80122e0:	d107      	bne.n	80122f2 <__ieee754_atan2+0x7a>
 80122e2:	2c02      	cmp	r4, #2
 80122e4:	d05f      	beq.n	80123a6 <__ieee754_atan2+0x12e>
 80122e6:	2c03      	cmp	r4, #3
 80122e8:	d1e5      	bne.n	80122b6 <__ieee754_atan2+0x3e>
 80122ea:	a143      	add	r1, pc, #268	@ (adr r1, 80123f8 <__ieee754_atan2+0x180>)
 80122ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122f0:	e7e1      	b.n	80122b6 <__ieee754_atan2+0x3e>
 80122f2:	4315      	orrs	r5, r2
 80122f4:	d106      	bne.n	8012304 <__ieee754_atan2+0x8c>
 80122f6:	f1be 0f00 	cmp.w	lr, #0
 80122fa:	db5f      	blt.n	80123bc <__ieee754_atan2+0x144>
 80122fc:	a136      	add	r1, pc, #216	@ (adr r1, 80123d8 <__ieee754_atan2+0x160>)
 80122fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012302:	e7d8      	b.n	80122b6 <__ieee754_atan2+0x3e>
 8012304:	4542      	cmp	r2, r8
 8012306:	d10f      	bne.n	8012328 <__ieee754_atan2+0xb0>
 8012308:	4293      	cmp	r3, r2
 801230a:	f104 34ff 	add.w	r4, r4, #4294967295
 801230e:	d107      	bne.n	8012320 <__ieee754_atan2+0xa8>
 8012310:	2c02      	cmp	r4, #2
 8012312:	d84c      	bhi.n	80123ae <__ieee754_atan2+0x136>
 8012314:	4b36      	ldr	r3, [pc, #216]	@ (80123f0 <__ieee754_atan2+0x178>)
 8012316:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801231a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801231e:	e7ca      	b.n	80122b6 <__ieee754_atan2+0x3e>
 8012320:	2c02      	cmp	r4, #2
 8012322:	d848      	bhi.n	80123b6 <__ieee754_atan2+0x13e>
 8012324:	4b33      	ldr	r3, [pc, #204]	@ (80123f4 <__ieee754_atan2+0x17c>)
 8012326:	e7f6      	b.n	8012316 <__ieee754_atan2+0x9e>
 8012328:	4543      	cmp	r3, r8
 801232a:	d0e4      	beq.n	80122f6 <__ieee754_atan2+0x7e>
 801232c:	1a9b      	subs	r3, r3, r2
 801232e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8012332:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012336:	da1e      	bge.n	8012376 <__ieee754_atan2+0xfe>
 8012338:	2f00      	cmp	r7, #0
 801233a:	da01      	bge.n	8012340 <__ieee754_atan2+0xc8>
 801233c:	323c      	adds	r2, #60	@ 0x3c
 801233e:	db1e      	blt.n	801237e <__ieee754_atan2+0x106>
 8012340:	4632      	mov	r2, r6
 8012342:	463b      	mov	r3, r7
 8012344:	f7ee faa2 	bl	800088c <__aeabi_ddiv>
 8012348:	ec41 0b10 	vmov	d0, r0, r1
 801234c:	f7ff fa4a 	bl	80117e4 <fabs>
 8012350:	f000 fda6 	bl	8012ea0 <atan>
 8012354:	ec51 0b10 	vmov	r0, r1, d0
 8012358:	2c01      	cmp	r4, #1
 801235a:	d013      	beq.n	8012384 <__ieee754_atan2+0x10c>
 801235c:	2c02      	cmp	r4, #2
 801235e:	d015      	beq.n	801238c <__ieee754_atan2+0x114>
 8012360:	2c00      	cmp	r4, #0
 8012362:	d0a8      	beq.n	80122b6 <__ieee754_atan2+0x3e>
 8012364:	a318      	add	r3, pc, #96	@ (adr r3, 80123c8 <__ieee754_atan2+0x150>)
 8012366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236a:	f7ed ffad 	bl	80002c8 <__aeabi_dsub>
 801236e:	a318      	add	r3, pc, #96	@ (adr r3, 80123d0 <__ieee754_atan2+0x158>)
 8012370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012374:	e014      	b.n	80123a0 <__ieee754_atan2+0x128>
 8012376:	a118      	add	r1, pc, #96	@ (adr r1, 80123d8 <__ieee754_atan2+0x160>)
 8012378:	e9d1 0100 	ldrd	r0, r1, [r1]
 801237c:	e7ec      	b.n	8012358 <__ieee754_atan2+0xe0>
 801237e:	2000      	movs	r0, #0
 8012380:	2100      	movs	r1, #0
 8012382:	e7e9      	b.n	8012358 <__ieee754_atan2+0xe0>
 8012384:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012388:	4619      	mov	r1, r3
 801238a:	e794      	b.n	80122b6 <__ieee754_atan2+0x3e>
 801238c:	a30e      	add	r3, pc, #56	@ (adr r3, 80123c8 <__ieee754_atan2+0x150>)
 801238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012392:	f7ed ff99 	bl	80002c8 <__aeabi_dsub>
 8012396:	4602      	mov	r2, r0
 8012398:	460b      	mov	r3, r1
 801239a:	a10d      	add	r1, pc, #52	@ (adr r1, 80123d0 <__ieee754_atan2+0x158>)
 801239c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123a0:	f7ed ff92 	bl	80002c8 <__aeabi_dsub>
 80123a4:	e787      	b.n	80122b6 <__ieee754_atan2+0x3e>
 80123a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80123d0 <__ieee754_atan2+0x158>)
 80123a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ac:	e783      	b.n	80122b6 <__ieee754_atan2+0x3e>
 80123ae:	a10c      	add	r1, pc, #48	@ (adr r1, 80123e0 <__ieee754_atan2+0x168>)
 80123b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123b4:	e77f      	b.n	80122b6 <__ieee754_atan2+0x3e>
 80123b6:	2000      	movs	r0, #0
 80123b8:	2100      	movs	r1, #0
 80123ba:	e77c      	b.n	80122b6 <__ieee754_atan2+0x3e>
 80123bc:	a10a      	add	r1, pc, #40	@ (adr r1, 80123e8 <__ieee754_atan2+0x170>)
 80123be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123c2:	e778      	b.n	80122b6 <__ieee754_atan2+0x3e>
 80123c4:	f3af 8000 	nop.w
 80123c8:	33145c07 	.word	0x33145c07
 80123cc:	3ca1a626 	.word	0x3ca1a626
 80123d0:	54442d18 	.word	0x54442d18
 80123d4:	400921fb 	.word	0x400921fb
 80123d8:	54442d18 	.word	0x54442d18
 80123dc:	3ff921fb 	.word	0x3ff921fb
 80123e0:	54442d18 	.word	0x54442d18
 80123e4:	3fe921fb 	.word	0x3fe921fb
 80123e8:	54442d18 	.word	0x54442d18
 80123ec:	bff921fb 	.word	0xbff921fb
 80123f0:	080138c0 	.word	0x080138c0
 80123f4:	080138a8 	.word	0x080138a8
 80123f8:	54442d18 	.word	0x54442d18
 80123fc:	c00921fb 	.word	0xc00921fb
 8012400:	7ff00000 	.word	0x7ff00000
 8012404:	00000000 	.word	0x00000000

08012408 <__ieee754_pow>:
 8012408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240c:	b091      	sub	sp, #68	@ 0x44
 801240e:	ed8d 1b00 	vstr	d1, [sp]
 8012412:	e9dd 1900 	ldrd	r1, r9, [sp]
 8012416:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801241a:	ea5a 0001 	orrs.w	r0, sl, r1
 801241e:	ec57 6b10 	vmov	r6, r7, d0
 8012422:	d113      	bne.n	801244c <__ieee754_pow+0x44>
 8012424:	19b3      	adds	r3, r6, r6
 8012426:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801242a:	4152      	adcs	r2, r2
 801242c:	4298      	cmp	r0, r3
 801242e:	4b9a      	ldr	r3, [pc, #616]	@ (8012698 <__ieee754_pow+0x290>)
 8012430:	4193      	sbcs	r3, r2
 8012432:	f080 84ee 	bcs.w	8012e12 <__ieee754_pow+0xa0a>
 8012436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801243a:	4630      	mov	r0, r6
 801243c:	4639      	mov	r1, r7
 801243e:	f7ed ff45 	bl	80002cc <__adddf3>
 8012442:	ec41 0b10 	vmov	d0, r0, r1
 8012446:	b011      	add	sp, #68	@ 0x44
 8012448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244c:	4a93      	ldr	r2, [pc, #588]	@ (801269c <__ieee754_pow+0x294>)
 801244e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8012452:	4295      	cmp	r5, r2
 8012454:	46b8      	mov	r8, r7
 8012456:	4633      	mov	r3, r6
 8012458:	d80a      	bhi.n	8012470 <__ieee754_pow+0x68>
 801245a:	d104      	bne.n	8012466 <__ieee754_pow+0x5e>
 801245c:	2e00      	cmp	r6, #0
 801245e:	d1ea      	bne.n	8012436 <__ieee754_pow+0x2e>
 8012460:	45aa      	cmp	sl, r5
 8012462:	d8e8      	bhi.n	8012436 <__ieee754_pow+0x2e>
 8012464:	e001      	b.n	801246a <__ieee754_pow+0x62>
 8012466:	4592      	cmp	sl, r2
 8012468:	d802      	bhi.n	8012470 <__ieee754_pow+0x68>
 801246a:	4592      	cmp	sl, r2
 801246c:	d10f      	bne.n	801248e <__ieee754_pow+0x86>
 801246e:	b171      	cbz	r1, 801248e <__ieee754_pow+0x86>
 8012470:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8012474:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8012478:	ea58 0803 	orrs.w	r8, r8, r3
 801247c:	d1db      	bne.n	8012436 <__ieee754_pow+0x2e>
 801247e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012482:	18db      	adds	r3, r3, r3
 8012484:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8012488:	4152      	adcs	r2, r2
 801248a:	4598      	cmp	r8, r3
 801248c:	e7cf      	b.n	801242e <__ieee754_pow+0x26>
 801248e:	f1b8 0f00 	cmp.w	r8, #0
 8012492:	46ab      	mov	fp, r5
 8012494:	da43      	bge.n	801251e <__ieee754_pow+0x116>
 8012496:	4a82      	ldr	r2, [pc, #520]	@ (80126a0 <__ieee754_pow+0x298>)
 8012498:	4592      	cmp	sl, r2
 801249a:	d856      	bhi.n	801254a <__ieee754_pow+0x142>
 801249c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80124a0:	4592      	cmp	sl, r2
 80124a2:	f240 84c5 	bls.w	8012e30 <__ieee754_pow+0xa28>
 80124a6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80124aa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80124ae:	2a14      	cmp	r2, #20
 80124b0:	dd18      	ble.n	80124e4 <__ieee754_pow+0xdc>
 80124b2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80124b6:	fa21 f402 	lsr.w	r4, r1, r2
 80124ba:	fa04 f202 	lsl.w	r2, r4, r2
 80124be:	428a      	cmp	r2, r1
 80124c0:	f040 84b6 	bne.w	8012e30 <__ieee754_pow+0xa28>
 80124c4:	f004 0401 	and.w	r4, r4, #1
 80124c8:	f1c4 0402 	rsb	r4, r4, #2
 80124cc:	2900      	cmp	r1, #0
 80124ce:	d159      	bne.n	8012584 <__ieee754_pow+0x17c>
 80124d0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80124d4:	d148      	bne.n	8012568 <__ieee754_pow+0x160>
 80124d6:	4632      	mov	r2, r6
 80124d8:	463b      	mov	r3, r7
 80124da:	4630      	mov	r0, r6
 80124dc:	4639      	mov	r1, r7
 80124de:	f7ee f8ab 	bl	8000638 <__aeabi_dmul>
 80124e2:	e7ae      	b.n	8012442 <__ieee754_pow+0x3a>
 80124e4:	2900      	cmp	r1, #0
 80124e6:	d14c      	bne.n	8012582 <__ieee754_pow+0x17a>
 80124e8:	f1c2 0214 	rsb	r2, r2, #20
 80124ec:	fa4a f402 	asr.w	r4, sl, r2
 80124f0:	fa04 f202 	lsl.w	r2, r4, r2
 80124f4:	4552      	cmp	r2, sl
 80124f6:	f040 8498 	bne.w	8012e2a <__ieee754_pow+0xa22>
 80124fa:	f004 0401 	and.w	r4, r4, #1
 80124fe:	f1c4 0402 	rsb	r4, r4, #2
 8012502:	4a68      	ldr	r2, [pc, #416]	@ (80126a4 <__ieee754_pow+0x29c>)
 8012504:	4592      	cmp	sl, r2
 8012506:	d1e3      	bne.n	80124d0 <__ieee754_pow+0xc8>
 8012508:	f1b9 0f00 	cmp.w	r9, #0
 801250c:	f280 8489 	bge.w	8012e22 <__ieee754_pow+0xa1a>
 8012510:	4964      	ldr	r1, [pc, #400]	@ (80126a4 <__ieee754_pow+0x29c>)
 8012512:	4632      	mov	r2, r6
 8012514:	463b      	mov	r3, r7
 8012516:	2000      	movs	r0, #0
 8012518:	f7ee f9b8 	bl	800088c <__aeabi_ddiv>
 801251c:	e791      	b.n	8012442 <__ieee754_pow+0x3a>
 801251e:	2400      	movs	r4, #0
 8012520:	bb81      	cbnz	r1, 8012584 <__ieee754_pow+0x17c>
 8012522:	4a5e      	ldr	r2, [pc, #376]	@ (801269c <__ieee754_pow+0x294>)
 8012524:	4592      	cmp	sl, r2
 8012526:	d1ec      	bne.n	8012502 <__ieee754_pow+0xfa>
 8012528:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 801252c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8012530:	431a      	orrs	r2, r3
 8012532:	f000 846e 	beq.w	8012e12 <__ieee754_pow+0xa0a>
 8012536:	4b5c      	ldr	r3, [pc, #368]	@ (80126a8 <__ieee754_pow+0x2a0>)
 8012538:	429d      	cmp	r5, r3
 801253a:	d908      	bls.n	801254e <__ieee754_pow+0x146>
 801253c:	f1b9 0f00 	cmp.w	r9, #0
 8012540:	f280 846b 	bge.w	8012e1a <__ieee754_pow+0xa12>
 8012544:	2000      	movs	r0, #0
 8012546:	2100      	movs	r1, #0
 8012548:	e77b      	b.n	8012442 <__ieee754_pow+0x3a>
 801254a:	2402      	movs	r4, #2
 801254c:	e7e8      	b.n	8012520 <__ieee754_pow+0x118>
 801254e:	f1b9 0f00 	cmp.w	r9, #0
 8012552:	f04f 0000 	mov.w	r0, #0
 8012556:	f04f 0100 	mov.w	r1, #0
 801255a:	f6bf af72 	bge.w	8012442 <__ieee754_pow+0x3a>
 801255e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012562:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012566:	e76c      	b.n	8012442 <__ieee754_pow+0x3a>
 8012568:	4a50      	ldr	r2, [pc, #320]	@ (80126ac <__ieee754_pow+0x2a4>)
 801256a:	4591      	cmp	r9, r2
 801256c:	d10a      	bne.n	8012584 <__ieee754_pow+0x17c>
 801256e:	f1b8 0f00 	cmp.w	r8, #0
 8012572:	db07      	blt.n	8012584 <__ieee754_pow+0x17c>
 8012574:	ec47 6b10 	vmov	d0, r6, r7
 8012578:	b011      	add	sp, #68	@ 0x44
 801257a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801257e:	f7ff b945 	b.w	801180c <__ieee754_sqrt>
 8012582:	2400      	movs	r4, #0
 8012584:	ec47 6b10 	vmov	d0, r6, r7
 8012588:	9302      	str	r3, [sp, #8]
 801258a:	f7ff f92b 	bl	80117e4 <fabs>
 801258e:	9b02      	ldr	r3, [sp, #8]
 8012590:	ec51 0b10 	vmov	r0, r1, d0
 8012594:	bb43      	cbnz	r3, 80125e8 <__ieee754_pow+0x1e0>
 8012596:	4b43      	ldr	r3, [pc, #268]	@ (80126a4 <__ieee754_pow+0x29c>)
 8012598:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801259c:	429a      	cmp	r2, r3
 801259e:	d000      	beq.n	80125a2 <__ieee754_pow+0x19a>
 80125a0:	bb15      	cbnz	r5, 80125e8 <__ieee754_pow+0x1e0>
 80125a2:	f1b9 0f00 	cmp.w	r9, #0
 80125a6:	da05      	bge.n	80125b4 <__ieee754_pow+0x1ac>
 80125a8:	4602      	mov	r2, r0
 80125aa:	460b      	mov	r3, r1
 80125ac:	2000      	movs	r0, #0
 80125ae:	493d      	ldr	r1, [pc, #244]	@ (80126a4 <__ieee754_pow+0x29c>)
 80125b0:	f7ee f96c 	bl	800088c <__aeabi_ddiv>
 80125b4:	f1b8 0f00 	cmp.w	r8, #0
 80125b8:	f6bf af43 	bge.w	8012442 <__ieee754_pow+0x3a>
 80125bc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80125c0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80125c4:	4325      	orrs	r5, r4
 80125c6:	d108      	bne.n	80125da <__ieee754_pow+0x1d2>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4610      	mov	r0, r2
 80125ce:	4619      	mov	r1, r3
 80125d0:	f7ed fe7a 	bl	80002c8 <__aeabi_dsub>
 80125d4:	4602      	mov	r2, r0
 80125d6:	460b      	mov	r3, r1
 80125d8:	e79e      	b.n	8012518 <__ieee754_pow+0x110>
 80125da:	2c01      	cmp	r4, #1
 80125dc:	f47f af31 	bne.w	8012442 <__ieee754_pow+0x3a>
 80125e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80125e4:	4619      	mov	r1, r3
 80125e6:	e72c      	b.n	8012442 <__ieee754_pow+0x3a>
 80125e8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80125ec:	3b01      	subs	r3, #1
 80125ee:	ea53 0204 	orrs.w	r2, r3, r4
 80125f2:	d102      	bne.n	80125fa <__ieee754_pow+0x1f2>
 80125f4:	4632      	mov	r2, r6
 80125f6:	463b      	mov	r3, r7
 80125f8:	e7e8      	b.n	80125cc <__ieee754_pow+0x1c4>
 80125fa:	3c01      	subs	r4, #1
 80125fc:	431c      	orrs	r4, r3
 80125fe:	d016      	beq.n	801262e <__ieee754_pow+0x226>
 8012600:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012688 <__ieee754_pow+0x280>
 8012604:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8012608:	ed8d 7b02 	vstr	d7, [sp, #8]
 801260c:	f240 8110 	bls.w	8012830 <__ieee754_pow+0x428>
 8012610:	4b27      	ldr	r3, [pc, #156]	@ (80126b0 <__ieee754_pow+0x2a8>)
 8012612:	459a      	cmp	sl, r3
 8012614:	4b24      	ldr	r3, [pc, #144]	@ (80126a8 <__ieee754_pow+0x2a0>)
 8012616:	d916      	bls.n	8012646 <__ieee754_pow+0x23e>
 8012618:	429d      	cmp	r5, r3
 801261a:	d80b      	bhi.n	8012634 <__ieee754_pow+0x22c>
 801261c:	f1b9 0f00 	cmp.w	r9, #0
 8012620:	da0b      	bge.n	801263a <__ieee754_pow+0x232>
 8012622:	2000      	movs	r0, #0
 8012624:	b011      	add	sp, #68	@ 0x44
 8012626:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801262a:	f000 be81 	b.w	8013330 <__math_oflow>
 801262e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8012690 <__ieee754_pow+0x288>
 8012632:	e7e7      	b.n	8012604 <__ieee754_pow+0x1fc>
 8012634:	f1b9 0f00 	cmp.w	r9, #0
 8012638:	dcf3      	bgt.n	8012622 <__ieee754_pow+0x21a>
 801263a:	2000      	movs	r0, #0
 801263c:	b011      	add	sp, #68	@ 0x44
 801263e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012642:	f000 be6d 	b.w	8013320 <__math_uflow>
 8012646:	429d      	cmp	r5, r3
 8012648:	d20c      	bcs.n	8012664 <__ieee754_pow+0x25c>
 801264a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801264e:	2200      	movs	r2, #0
 8012650:	2300      	movs	r3, #0
 8012652:	f7ee fa63 	bl	8000b1c <__aeabi_dcmplt>
 8012656:	3800      	subs	r0, #0
 8012658:	bf18      	it	ne
 801265a:	2001      	movne	r0, #1
 801265c:	f1b9 0f00 	cmp.w	r9, #0
 8012660:	daec      	bge.n	801263c <__ieee754_pow+0x234>
 8012662:	e7df      	b.n	8012624 <__ieee754_pow+0x21c>
 8012664:	4b0f      	ldr	r3, [pc, #60]	@ (80126a4 <__ieee754_pow+0x29c>)
 8012666:	429d      	cmp	r5, r3
 8012668:	f04f 0200 	mov.w	r2, #0
 801266c:	d922      	bls.n	80126b4 <__ieee754_pow+0x2ac>
 801266e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012672:	2300      	movs	r3, #0
 8012674:	f7ee fa52 	bl	8000b1c <__aeabi_dcmplt>
 8012678:	3800      	subs	r0, #0
 801267a:	bf18      	it	ne
 801267c:	2001      	movne	r0, #1
 801267e:	f1b9 0f00 	cmp.w	r9, #0
 8012682:	dccf      	bgt.n	8012624 <__ieee754_pow+0x21c>
 8012684:	e7da      	b.n	801263c <__ieee754_pow+0x234>
 8012686:	bf00      	nop
 8012688:	00000000 	.word	0x00000000
 801268c:	3ff00000 	.word	0x3ff00000
 8012690:	00000000 	.word	0x00000000
 8012694:	bff00000 	.word	0xbff00000
 8012698:	fff00000 	.word	0xfff00000
 801269c:	7ff00000 	.word	0x7ff00000
 80126a0:	433fffff 	.word	0x433fffff
 80126a4:	3ff00000 	.word	0x3ff00000
 80126a8:	3fefffff 	.word	0x3fefffff
 80126ac:	3fe00000 	.word	0x3fe00000
 80126b0:	43f00000 	.word	0x43f00000
 80126b4:	4b5a      	ldr	r3, [pc, #360]	@ (8012820 <__ieee754_pow+0x418>)
 80126b6:	f7ed fe07 	bl	80002c8 <__aeabi_dsub>
 80126ba:	a351      	add	r3, pc, #324	@ (adr r3, 8012800 <__ieee754_pow+0x3f8>)
 80126bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c0:	4604      	mov	r4, r0
 80126c2:	460d      	mov	r5, r1
 80126c4:	f7ed ffb8 	bl	8000638 <__aeabi_dmul>
 80126c8:	a34f      	add	r3, pc, #316	@ (adr r3, 8012808 <__ieee754_pow+0x400>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	4606      	mov	r6, r0
 80126d0:	460f      	mov	r7, r1
 80126d2:	4620      	mov	r0, r4
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7ed ffaf 	bl	8000638 <__aeabi_dmul>
 80126da:	4b52      	ldr	r3, [pc, #328]	@ (8012824 <__ieee754_pow+0x41c>)
 80126dc:	4682      	mov	sl, r0
 80126de:	468b      	mov	fp, r1
 80126e0:	2200      	movs	r2, #0
 80126e2:	4620      	mov	r0, r4
 80126e4:	4629      	mov	r1, r5
 80126e6:	f7ed ffa7 	bl	8000638 <__aeabi_dmul>
 80126ea:	4602      	mov	r2, r0
 80126ec:	460b      	mov	r3, r1
 80126ee:	a148      	add	r1, pc, #288	@ (adr r1, 8012810 <__ieee754_pow+0x408>)
 80126f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80126f4:	f7ed fde8 	bl	80002c8 <__aeabi_dsub>
 80126f8:	4622      	mov	r2, r4
 80126fa:	462b      	mov	r3, r5
 80126fc:	f7ed ff9c 	bl	8000638 <__aeabi_dmul>
 8012700:	4602      	mov	r2, r0
 8012702:	460b      	mov	r3, r1
 8012704:	2000      	movs	r0, #0
 8012706:	4948      	ldr	r1, [pc, #288]	@ (8012828 <__ieee754_pow+0x420>)
 8012708:	f7ed fdde 	bl	80002c8 <__aeabi_dsub>
 801270c:	4622      	mov	r2, r4
 801270e:	4680      	mov	r8, r0
 8012710:	4689      	mov	r9, r1
 8012712:	462b      	mov	r3, r5
 8012714:	4620      	mov	r0, r4
 8012716:	4629      	mov	r1, r5
 8012718:	f7ed ff8e 	bl	8000638 <__aeabi_dmul>
 801271c:	4602      	mov	r2, r0
 801271e:	460b      	mov	r3, r1
 8012720:	4640      	mov	r0, r8
 8012722:	4649      	mov	r1, r9
 8012724:	f7ed ff88 	bl	8000638 <__aeabi_dmul>
 8012728:	a33b      	add	r3, pc, #236	@ (adr r3, 8012818 <__ieee754_pow+0x410>)
 801272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272e:	f7ed ff83 	bl	8000638 <__aeabi_dmul>
 8012732:	4602      	mov	r2, r0
 8012734:	460b      	mov	r3, r1
 8012736:	4650      	mov	r0, sl
 8012738:	4659      	mov	r1, fp
 801273a:	f7ed fdc5 	bl	80002c8 <__aeabi_dsub>
 801273e:	4602      	mov	r2, r0
 8012740:	460b      	mov	r3, r1
 8012742:	4680      	mov	r8, r0
 8012744:	4689      	mov	r9, r1
 8012746:	4630      	mov	r0, r6
 8012748:	4639      	mov	r1, r7
 801274a:	f7ed fdbf 	bl	80002cc <__adddf3>
 801274e:	2400      	movs	r4, #0
 8012750:	4632      	mov	r2, r6
 8012752:	463b      	mov	r3, r7
 8012754:	4620      	mov	r0, r4
 8012756:	460d      	mov	r5, r1
 8012758:	f7ed fdb6 	bl	80002c8 <__aeabi_dsub>
 801275c:	4602      	mov	r2, r0
 801275e:	460b      	mov	r3, r1
 8012760:	4640      	mov	r0, r8
 8012762:	4649      	mov	r1, r9
 8012764:	f7ed fdb0 	bl	80002c8 <__aeabi_dsub>
 8012768:	e9dd 2300 	ldrd	r2, r3, [sp]
 801276c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012770:	2300      	movs	r3, #0
 8012772:	9304      	str	r3, [sp, #16]
 8012774:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012778:	4606      	mov	r6, r0
 801277a:	460f      	mov	r7, r1
 801277c:	465b      	mov	r3, fp
 801277e:	4652      	mov	r2, sl
 8012780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012784:	f7ed fda0 	bl	80002c8 <__aeabi_dsub>
 8012788:	4622      	mov	r2, r4
 801278a:	462b      	mov	r3, r5
 801278c:	f7ed ff54 	bl	8000638 <__aeabi_dmul>
 8012790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012794:	4680      	mov	r8, r0
 8012796:	4689      	mov	r9, r1
 8012798:	4630      	mov	r0, r6
 801279a:	4639      	mov	r1, r7
 801279c:	f7ed ff4c 	bl	8000638 <__aeabi_dmul>
 80127a0:	4602      	mov	r2, r0
 80127a2:	460b      	mov	r3, r1
 80127a4:	4640      	mov	r0, r8
 80127a6:	4649      	mov	r1, r9
 80127a8:	f7ed fd90 	bl	80002cc <__adddf3>
 80127ac:	465b      	mov	r3, fp
 80127ae:	4606      	mov	r6, r0
 80127b0:	460f      	mov	r7, r1
 80127b2:	4652      	mov	r2, sl
 80127b4:	4620      	mov	r0, r4
 80127b6:	4629      	mov	r1, r5
 80127b8:	f7ed ff3e 	bl	8000638 <__aeabi_dmul>
 80127bc:	460b      	mov	r3, r1
 80127be:	4602      	mov	r2, r0
 80127c0:	4680      	mov	r8, r0
 80127c2:	4689      	mov	r9, r1
 80127c4:	4630      	mov	r0, r6
 80127c6:	4639      	mov	r1, r7
 80127c8:	f7ed fd80 	bl	80002cc <__adddf3>
 80127cc:	4b17      	ldr	r3, [pc, #92]	@ (801282c <__ieee754_pow+0x424>)
 80127ce:	4299      	cmp	r1, r3
 80127d0:	4604      	mov	r4, r0
 80127d2:	460d      	mov	r5, r1
 80127d4:	468b      	mov	fp, r1
 80127d6:	f340 820b 	ble.w	8012bf0 <__ieee754_pow+0x7e8>
 80127da:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80127de:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80127e2:	4303      	orrs	r3, r0
 80127e4:	f000 81ea 	beq.w	8012bbc <__ieee754_pow+0x7b4>
 80127e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ec:	2200      	movs	r2, #0
 80127ee:	2300      	movs	r3, #0
 80127f0:	f7ee f994 	bl	8000b1c <__aeabi_dcmplt>
 80127f4:	3800      	subs	r0, #0
 80127f6:	bf18      	it	ne
 80127f8:	2001      	movne	r0, #1
 80127fa:	e713      	b.n	8012624 <__ieee754_pow+0x21c>
 80127fc:	f3af 8000 	nop.w
 8012800:	60000000 	.word	0x60000000
 8012804:	3ff71547 	.word	0x3ff71547
 8012808:	f85ddf44 	.word	0xf85ddf44
 801280c:	3e54ae0b 	.word	0x3e54ae0b
 8012810:	55555555 	.word	0x55555555
 8012814:	3fd55555 	.word	0x3fd55555
 8012818:	652b82fe 	.word	0x652b82fe
 801281c:	3ff71547 	.word	0x3ff71547
 8012820:	3ff00000 	.word	0x3ff00000
 8012824:	3fd00000 	.word	0x3fd00000
 8012828:	3fe00000 	.word	0x3fe00000
 801282c:	408fffff 	.word	0x408fffff
 8012830:	4bd5      	ldr	r3, [pc, #852]	@ (8012b88 <__ieee754_pow+0x780>)
 8012832:	ea08 0303 	and.w	r3, r8, r3
 8012836:	2200      	movs	r2, #0
 8012838:	b92b      	cbnz	r3, 8012846 <__ieee754_pow+0x43e>
 801283a:	4bd4      	ldr	r3, [pc, #848]	@ (8012b8c <__ieee754_pow+0x784>)
 801283c:	f7ed fefc 	bl	8000638 <__aeabi_dmul>
 8012840:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8012844:	468b      	mov	fp, r1
 8012846:	ea4f 532b 	mov.w	r3, fp, asr #20
 801284a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801284e:	4413      	add	r3, r2
 8012850:	930a      	str	r3, [sp, #40]	@ 0x28
 8012852:	4bcf      	ldr	r3, [pc, #828]	@ (8012b90 <__ieee754_pow+0x788>)
 8012854:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8012858:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801285c:	459b      	cmp	fp, r3
 801285e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012862:	dd08      	ble.n	8012876 <__ieee754_pow+0x46e>
 8012864:	4bcb      	ldr	r3, [pc, #812]	@ (8012b94 <__ieee754_pow+0x78c>)
 8012866:	459b      	cmp	fp, r3
 8012868:	f340 81a5 	ble.w	8012bb6 <__ieee754_pow+0x7ae>
 801286c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801286e:	3301      	adds	r3, #1
 8012870:	930a      	str	r3, [sp, #40]	@ 0x28
 8012872:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8012876:	f04f 0a00 	mov.w	sl, #0
 801287a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801287e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012880:	4bc5      	ldr	r3, [pc, #788]	@ (8012b98 <__ieee754_pow+0x790>)
 8012882:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012886:	ed93 7b00 	vldr	d7, [r3]
 801288a:	4629      	mov	r1, r5
 801288c:	ec53 2b17 	vmov	r2, r3, d7
 8012890:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012894:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012898:	f7ed fd16 	bl	80002c8 <__aeabi_dsub>
 801289c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80128a0:	4606      	mov	r6, r0
 80128a2:	460f      	mov	r7, r1
 80128a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128a8:	f7ed fd10 	bl	80002cc <__adddf3>
 80128ac:	4602      	mov	r2, r0
 80128ae:	460b      	mov	r3, r1
 80128b0:	2000      	movs	r0, #0
 80128b2:	49ba      	ldr	r1, [pc, #744]	@ (8012b9c <__ieee754_pow+0x794>)
 80128b4:	f7ed ffea 	bl	800088c <__aeabi_ddiv>
 80128b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80128bc:	4602      	mov	r2, r0
 80128be:	460b      	mov	r3, r1
 80128c0:	4630      	mov	r0, r6
 80128c2:	4639      	mov	r1, r7
 80128c4:	f7ed feb8 	bl	8000638 <__aeabi_dmul>
 80128c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128cc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80128d0:	106d      	asrs	r5, r5, #1
 80128d2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80128d6:	f04f 0b00 	mov.w	fp, #0
 80128da:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80128de:	4661      	mov	r1, ip
 80128e0:	2200      	movs	r2, #0
 80128e2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80128e6:	4658      	mov	r0, fp
 80128e8:	46e1      	mov	r9, ip
 80128ea:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80128ee:	4614      	mov	r4, r2
 80128f0:	461d      	mov	r5, r3
 80128f2:	f7ed fea1 	bl	8000638 <__aeabi_dmul>
 80128f6:	4602      	mov	r2, r0
 80128f8:	460b      	mov	r3, r1
 80128fa:	4630      	mov	r0, r6
 80128fc:	4639      	mov	r1, r7
 80128fe:	f7ed fce3 	bl	80002c8 <__aeabi_dsub>
 8012902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012906:	4606      	mov	r6, r0
 8012908:	460f      	mov	r7, r1
 801290a:	4620      	mov	r0, r4
 801290c:	4629      	mov	r1, r5
 801290e:	f7ed fcdb 	bl	80002c8 <__aeabi_dsub>
 8012912:	4602      	mov	r2, r0
 8012914:	460b      	mov	r3, r1
 8012916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801291a:	f7ed fcd5 	bl	80002c8 <__aeabi_dsub>
 801291e:	465a      	mov	r2, fp
 8012920:	464b      	mov	r3, r9
 8012922:	f7ed fe89 	bl	8000638 <__aeabi_dmul>
 8012926:	4602      	mov	r2, r0
 8012928:	460b      	mov	r3, r1
 801292a:	4630      	mov	r0, r6
 801292c:	4639      	mov	r1, r7
 801292e:	f7ed fccb 	bl	80002c8 <__aeabi_dsub>
 8012932:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8012936:	f7ed fe7f 	bl	8000638 <__aeabi_dmul>
 801293a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012942:	4610      	mov	r0, r2
 8012944:	4619      	mov	r1, r3
 8012946:	f7ed fe77 	bl	8000638 <__aeabi_dmul>
 801294a:	a37d      	add	r3, pc, #500	@ (adr r3, 8012b40 <__ieee754_pow+0x738>)
 801294c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012950:	4604      	mov	r4, r0
 8012952:	460d      	mov	r5, r1
 8012954:	f7ed fe70 	bl	8000638 <__aeabi_dmul>
 8012958:	a37b      	add	r3, pc, #492	@ (adr r3, 8012b48 <__ieee754_pow+0x740>)
 801295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295e:	f7ed fcb5 	bl	80002cc <__adddf3>
 8012962:	4622      	mov	r2, r4
 8012964:	462b      	mov	r3, r5
 8012966:	f7ed fe67 	bl	8000638 <__aeabi_dmul>
 801296a:	a379      	add	r3, pc, #484	@ (adr r3, 8012b50 <__ieee754_pow+0x748>)
 801296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012970:	f7ed fcac 	bl	80002cc <__adddf3>
 8012974:	4622      	mov	r2, r4
 8012976:	462b      	mov	r3, r5
 8012978:	f7ed fe5e 	bl	8000638 <__aeabi_dmul>
 801297c:	a376      	add	r3, pc, #472	@ (adr r3, 8012b58 <__ieee754_pow+0x750>)
 801297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012982:	f7ed fca3 	bl	80002cc <__adddf3>
 8012986:	4622      	mov	r2, r4
 8012988:	462b      	mov	r3, r5
 801298a:	f7ed fe55 	bl	8000638 <__aeabi_dmul>
 801298e:	a374      	add	r3, pc, #464	@ (adr r3, 8012b60 <__ieee754_pow+0x758>)
 8012990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012994:	f7ed fc9a 	bl	80002cc <__adddf3>
 8012998:	4622      	mov	r2, r4
 801299a:	462b      	mov	r3, r5
 801299c:	f7ed fe4c 	bl	8000638 <__aeabi_dmul>
 80129a0:	a371      	add	r3, pc, #452	@ (adr r3, 8012b68 <__ieee754_pow+0x760>)
 80129a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a6:	f7ed fc91 	bl	80002cc <__adddf3>
 80129aa:	4622      	mov	r2, r4
 80129ac:	4606      	mov	r6, r0
 80129ae:	460f      	mov	r7, r1
 80129b0:	462b      	mov	r3, r5
 80129b2:	4620      	mov	r0, r4
 80129b4:	4629      	mov	r1, r5
 80129b6:	f7ed fe3f 	bl	8000638 <__aeabi_dmul>
 80129ba:	4602      	mov	r2, r0
 80129bc:	460b      	mov	r3, r1
 80129be:	4630      	mov	r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	f7ed fe39 	bl	8000638 <__aeabi_dmul>
 80129c6:	465a      	mov	r2, fp
 80129c8:	4604      	mov	r4, r0
 80129ca:	460d      	mov	r5, r1
 80129cc:	464b      	mov	r3, r9
 80129ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80129d2:	f7ed fc7b 	bl	80002cc <__adddf3>
 80129d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129da:	f7ed fe2d 	bl	8000638 <__aeabi_dmul>
 80129de:	4622      	mov	r2, r4
 80129e0:	462b      	mov	r3, r5
 80129e2:	f7ed fc73 	bl	80002cc <__adddf3>
 80129e6:	465a      	mov	r2, fp
 80129e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80129ec:	464b      	mov	r3, r9
 80129ee:	4658      	mov	r0, fp
 80129f0:	4649      	mov	r1, r9
 80129f2:	f7ed fe21 	bl	8000638 <__aeabi_dmul>
 80129f6:	4b6a      	ldr	r3, [pc, #424]	@ (8012ba0 <__ieee754_pow+0x798>)
 80129f8:	2200      	movs	r2, #0
 80129fa:	4606      	mov	r6, r0
 80129fc:	460f      	mov	r7, r1
 80129fe:	f7ed fc65 	bl	80002cc <__adddf3>
 8012a02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012a06:	f7ed fc61 	bl	80002cc <__adddf3>
 8012a0a:	46d8      	mov	r8, fp
 8012a0c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8012a10:	460d      	mov	r5, r1
 8012a12:	465a      	mov	r2, fp
 8012a14:	460b      	mov	r3, r1
 8012a16:	4640      	mov	r0, r8
 8012a18:	4649      	mov	r1, r9
 8012a1a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8012a1e:	f7ed fe0b 	bl	8000638 <__aeabi_dmul>
 8012a22:	465c      	mov	r4, fp
 8012a24:	4680      	mov	r8, r0
 8012a26:	4689      	mov	r9, r1
 8012a28:	4b5d      	ldr	r3, [pc, #372]	@ (8012ba0 <__ieee754_pow+0x798>)
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	4620      	mov	r0, r4
 8012a2e:	4629      	mov	r1, r5
 8012a30:	f7ed fc4a 	bl	80002c8 <__aeabi_dsub>
 8012a34:	4632      	mov	r2, r6
 8012a36:	463b      	mov	r3, r7
 8012a38:	f7ed fc46 	bl	80002c8 <__aeabi_dsub>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012a44:	f7ed fc40 	bl	80002c8 <__aeabi_dsub>
 8012a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a4c:	f7ed fdf4 	bl	8000638 <__aeabi_dmul>
 8012a50:	4622      	mov	r2, r4
 8012a52:	4606      	mov	r6, r0
 8012a54:	460f      	mov	r7, r1
 8012a56:	462b      	mov	r3, r5
 8012a58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a5c:	f7ed fdec 	bl	8000638 <__aeabi_dmul>
 8012a60:	4602      	mov	r2, r0
 8012a62:	460b      	mov	r3, r1
 8012a64:	4630      	mov	r0, r6
 8012a66:	4639      	mov	r1, r7
 8012a68:	f7ed fc30 	bl	80002cc <__adddf3>
 8012a6c:	4606      	mov	r6, r0
 8012a6e:	460f      	mov	r7, r1
 8012a70:	4602      	mov	r2, r0
 8012a72:	460b      	mov	r3, r1
 8012a74:	4640      	mov	r0, r8
 8012a76:	4649      	mov	r1, r9
 8012a78:	f7ed fc28 	bl	80002cc <__adddf3>
 8012a7c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8012a80:	a33b      	add	r3, pc, #236	@ (adr r3, 8012b70 <__ieee754_pow+0x768>)
 8012a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a86:	4658      	mov	r0, fp
 8012a88:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8012a8c:	460d      	mov	r5, r1
 8012a8e:	f7ed fdd3 	bl	8000638 <__aeabi_dmul>
 8012a92:	465c      	mov	r4, fp
 8012a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a98:	4642      	mov	r2, r8
 8012a9a:	464b      	mov	r3, r9
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	4629      	mov	r1, r5
 8012aa0:	f7ed fc12 	bl	80002c8 <__aeabi_dsub>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ed fc0c 	bl	80002c8 <__aeabi_dsub>
 8012ab0:	a331      	add	r3, pc, #196	@ (adr r3, 8012b78 <__ieee754_pow+0x770>)
 8012ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab6:	f7ed fdbf 	bl	8000638 <__aeabi_dmul>
 8012aba:	a331      	add	r3, pc, #196	@ (adr r3, 8012b80 <__ieee754_pow+0x778>)
 8012abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac0:	4606      	mov	r6, r0
 8012ac2:	460f      	mov	r7, r1
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	4629      	mov	r1, r5
 8012ac8:	f7ed fdb6 	bl	8000638 <__aeabi_dmul>
 8012acc:	4602      	mov	r2, r0
 8012ace:	460b      	mov	r3, r1
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	4639      	mov	r1, r7
 8012ad4:	f7ed fbfa 	bl	80002cc <__adddf3>
 8012ad8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012ada:	4b32      	ldr	r3, [pc, #200]	@ (8012ba4 <__ieee754_pow+0x79c>)
 8012adc:	4413      	add	r3, r2
 8012ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae2:	f7ed fbf3 	bl	80002cc <__adddf3>
 8012ae6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012aea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8012aec:	f7ed fd3a 	bl	8000564 <__aeabi_i2d>
 8012af0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012af2:	4b2d      	ldr	r3, [pc, #180]	@ (8012ba8 <__ieee754_pow+0x7a0>)
 8012af4:	4413      	add	r3, r2
 8012af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012afa:	4606      	mov	r6, r0
 8012afc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012b00:	460f      	mov	r7, r1
 8012b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b06:	f7ed fbe1 	bl	80002cc <__adddf3>
 8012b0a:	4642      	mov	r2, r8
 8012b0c:	464b      	mov	r3, r9
 8012b0e:	f7ed fbdd 	bl	80002cc <__adddf3>
 8012b12:	4632      	mov	r2, r6
 8012b14:	463b      	mov	r3, r7
 8012b16:	f7ed fbd9 	bl	80002cc <__adddf3>
 8012b1a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8012b1e:	4632      	mov	r2, r6
 8012b20:	463b      	mov	r3, r7
 8012b22:	4658      	mov	r0, fp
 8012b24:	460d      	mov	r5, r1
 8012b26:	f7ed fbcf 	bl	80002c8 <__aeabi_dsub>
 8012b2a:	4642      	mov	r2, r8
 8012b2c:	464b      	mov	r3, r9
 8012b2e:	f7ed fbcb 	bl	80002c8 <__aeabi_dsub>
 8012b32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b36:	f7ed fbc7 	bl	80002c8 <__aeabi_dsub>
 8012b3a:	465c      	mov	r4, fp
 8012b3c:	e036      	b.n	8012bac <__ieee754_pow+0x7a4>
 8012b3e:	bf00      	nop
 8012b40:	4a454eef 	.word	0x4a454eef
 8012b44:	3fca7e28 	.word	0x3fca7e28
 8012b48:	93c9db65 	.word	0x93c9db65
 8012b4c:	3fcd864a 	.word	0x3fcd864a
 8012b50:	a91d4101 	.word	0xa91d4101
 8012b54:	3fd17460 	.word	0x3fd17460
 8012b58:	518f264d 	.word	0x518f264d
 8012b5c:	3fd55555 	.word	0x3fd55555
 8012b60:	db6fabff 	.word	0xdb6fabff
 8012b64:	3fdb6db6 	.word	0x3fdb6db6
 8012b68:	33333303 	.word	0x33333303
 8012b6c:	3fe33333 	.word	0x3fe33333
 8012b70:	e0000000 	.word	0xe0000000
 8012b74:	3feec709 	.word	0x3feec709
 8012b78:	dc3a03fd 	.word	0xdc3a03fd
 8012b7c:	3feec709 	.word	0x3feec709
 8012b80:	145b01f5 	.word	0x145b01f5
 8012b84:	be3e2fe0 	.word	0xbe3e2fe0
 8012b88:	7ff00000 	.word	0x7ff00000
 8012b8c:	43400000 	.word	0x43400000
 8012b90:	0003988e 	.word	0x0003988e
 8012b94:	000bb679 	.word	0x000bb679
 8012b98:	080138f8 	.word	0x080138f8
 8012b9c:	3ff00000 	.word	0x3ff00000
 8012ba0:	40080000 	.word	0x40080000
 8012ba4:	080138d8 	.word	0x080138d8
 8012ba8:	080138e8 	.word	0x080138e8
 8012bac:	4602      	mov	r2, r0
 8012bae:	460b      	mov	r3, r1
 8012bb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bb4:	e5d6      	b.n	8012764 <__ieee754_pow+0x35c>
 8012bb6:	f04f 0a01 	mov.w	sl, #1
 8012bba:	e65e      	b.n	801287a <__ieee754_pow+0x472>
 8012bbc:	a3b5      	add	r3, pc, #724	@ (adr r3, 8012e94 <__ieee754_pow+0xa8c>)
 8012bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	f7ed fb81 	bl	80002cc <__adddf3>
 8012bca:	4642      	mov	r2, r8
 8012bcc:	e9cd 0100 	strd	r0, r1, [sp]
 8012bd0:	464b      	mov	r3, r9
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	4629      	mov	r1, r5
 8012bd6:	f7ed fb77 	bl	80002c8 <__aeabi_dsub>
 8012bda:	4602      	mov	r2, r0
 8012bdc:	460b      	mov	r3, r1
 8012bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012be2:	f7ed ffb9 	bl	8000b58 <__aeabi_dcmpgt>
 8012be6:	2800      	cmp	r0, #0
 8012be8:	f47f adfe 	bne.w	80127e8 <__ieee754_pow+0x3e0>
 8012bec:	4ba2      	ldr	r3, [pc, #648]	@ (8012e78 <__ieee754_pow+0xa70>)
 8012bee:	e022      	b.n	8012c36 <__ieee754_pow+0x82e>
 8012bf0:	4ca2      	ldr	r4, [pc, #648]	@ (8012e7c <__ieee754_pow+0xa74>)
 8012bf2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012bf6:	42a3      	cmp	r3, r4
 8012bf8:	d919      	bls.n	8012c2e <__ieee754_pow+0x826>
 8012bfa:	4ba1      	ldr	r3, [pc, #644]	@ (8012e80 <__ieee754_pow+0xa78>)
 8012bfc:	440b      	add	r3, r1
 8012bfe:	4303      	orrs	r3, r0
 8012c00:	d009      	beq.n	8012c16 <__ieee754_pow+0x80e>
 8012c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c06:	2200      	movs	r2, #0
 8012c08:	2300      	movs	r3, #0
 8012c0a:	f7ed ff87 	bl	8000b1c <__aeabi_dcmplt>
 8012c0e:	3800      	subs	r0, #0
 8012c10:	bf18      	it	ne
 8012c12:	2001      	movne	r0, #1
 8012c14:	e512      	b.n	801263c <__ieee754_pow+0x234>
 8012c16:	4642      	mov	r2, r8
 8012c18:	464b      	mov	r3, r9
 8012c1a:	f7ed fb55 	bl	80002c8 <__aeabi_dsub>
 8012c1e:	4632      	mov	r2, r6
 8012c20:	463b      	mov	r3, r7
 8012c22:	f7ed ff8f 	bl	8000b44 <__aeabi_dcmpge>
 8012c26:	2800      	cmp	r0, #0
 8012c28:	d1eb      	bne.n	8012c02 <__ieee754_pow+0x7fa>
 8012c2a:	4b96      	ldr	r3, [pc, #600]	@ (8012e84 <__ieee754_pow+0xa7c>)
 8012c2c:	e003      	b.n	8012c36 <__ieee754_pow+0x82e>
 8012c2e:	4a96      	ldr	r2, [pc, #600]	@ (8012e88 <__ieee754_pow+0xa80>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	f240 80e7 	bls.w	8012e04 <__ieee754_pow+0x9fc>
 8012c36:	151b      	asrs	r3, r3, #20
 8012c38:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8012c3c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8012c40:	fa4a fa03 	asr.w	sl, sl, r3
 8012c44:	44da      	add	sl, fp
 8012c46:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012c4a:	4890      	ldr	r0, [pc, #576]	@ (8012e8c <__ieee754_pow+0xa84>)
 8012c4c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8012c50:	4108      	asrs	r0, r1
 8012c52:	ea00 030a 	and.w	r3, r0, sl
 8012c56:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012c5a:	f1c1 0114 	rsb	r1, r1, #20
 8012c5e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8012c62:	fa4a fa01 	asr.w	sl, sl, r1
 8012c66:	f1bb 0f00 	cmp.w	fp, #0
 8012c6a:	4640      	mov	r0, r8
 8012c6c:	4649      	mov	r1, r9
 8012c6e:	f04f 0200 	mov.w	r2, #0
 8012c72:	bfb8      	it	lt
 8012c74:	f1ca 0a00 	rsblt	sl, sl, #0
 8012c78:	f7ed fb26 	bl	80002c8 <__aeabi_dsub>
 8012c7c:	4680      	mov	r8, r0
 8012c7e:	4689      	mov	r9, r1
 8012c80:	4632      	mov	r2, r6
 8012c82:	463b      	mov	r3, r7
 8012c84:	4640      	mov	r0, r8
 8012c86:	4649      	mov	r1, r9
 8012c88:	f7ed fb20 	bl	80002cc <__adddf3>
 8012c8c:	2400      	movs	r4, #0
 8012c8e:	a36a      	add	r3, pc, #424	@ (adr r3, 8012e38 <__ieee754_pow+0xa30>)
 8012c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c94:	4620      	mov	r0, r4
 8012c96:	460d      	mov	r5, r1
 8012c98:	f7ed fcce 	bl	8000638 <__aeabi_dmul>
 8012c9c:	4642      	mov	r2, r8
 8012c9e:	e9cd 0100 	strd	r0, r1, [sp]
 8012ca2:	464b      	mov	r3, r9
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	4629      	mov	r1, r5
 8012ca8:	f7ed fb0e 	bl	80002c8 <__aeabi_dsub>
 8012cac:	4602      	mov	r2, r0
 8012cae:	460b      	mov	r3, r1
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	4639      	mov	r1, r7
 8012cb4:	f7ed fb08 	bl	80002c8 <__aeabi_dsub>
 8012cb8:	a361      	add	r3, pc, #388	@ (adr r3, 8012e40 <__ieee754_pow+0xa38>)
 8012cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cbe:	f7ed fcbb 	bl	8000638 <__aeabi_dmul>
 8012cc2:	a361      	add	r3, pc, #388	@ (adr r3, 8012e48 <__ieee754_pow+0xa40>)
 8012cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc8:	4680      	mov	r8, r0
 8012cca:	4689      	mov	r9, r1
 8012ccc:	4620      	mov	r0, r4
 8012cce:	4629      	mov	r1, r5
 8012cd0:	f7ed fcb2 	bl	8000638 <__aeabi_dmul>
 8012cd4:	4602      	mov	r2, r0
 8012cd6:	460b      	mov	r3, r1
 8012cd8:	4640      	mov	r0, r8
 8012cda:	4649      	mov	r1, r9
 8012cdc:	f7ed faf6 	bl	80002cc <__adddf3>
 8012ce0:	4604      	mov	r4, r0
 8012ce2:	460d      	mov	r5, r1
 8012ce4:	4602      	mov	r2, r0
 8012ce6:	460b      	mov	r3, r1
 8012ce8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cec:	f7ed faee 	bl	80002cc <__adddf3>
 8012cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cf4:	4680      	mov	r8, r0
 8012cf6:	4689      	mov	r9, r1
 8012cf8:	f7ed fae6 	bl	80002c8 <__aeabi_dsub>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	460b      	mov	r3, r1
 8012d00:	4620      	mov	r0, r4
 8012d02:	4629      	mov	r1, r5
 8012d04:	f7ed fae0 	bl	80002c8 <__aeabi_dsub>
 8012d08:	4642      	mov	r2, r8
 8012d0a:	4606      	mov	r6, r0
 8012d0c:	460f      	mov	r7, r1
 8012d0e:	464b      	mov	r3, r9
 8012d10:	4640      	mov	r0, r8
 8012d12:	4649      	mov	r1, r9
 8012d14:	f7ed fc90 	bl	8000638 <__aeabi_dmul>
 8012d18:	a34d      	add	r3, pc, #308	@ (adr r3, 8012e50 <__ieee754_pow+0xa48>)
 8012d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d1e:	4604      	mov	r4, r0
 8012d20:	460d      	mov	r5, r1
 8012d22:	f7ed fc89 	bl	8000638 <__aeabi_dmul>
 8012d26:	a34c      	add	r3, pc, #304	@ (adr r3, 8012e58 <__ieee754_pow+0xa50>)
 8012d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2c:	f7ed facc 	bl	80002c8 <__aeabi_dsub>
 8012d30:	4622      	mov	r2, r4
 8012d32:	462b      	mov	r3, r5
 8012d34:	f7ed fc80 	bl	8000638 <__aeabi_dmul>
 8012d38:	a349      	add	r3, pc, #292	@ (adr r3, 8012e60 <__ieee754_pow+0xa58>)
 8012d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3e:	f7ed fac5 	bl	80002cc <__adddf3>
 8012d42:	4622      	mov	r2, r4
 8012d44:	462b      	mov	r3, r5
 8012d46:	f7ed fc77 	bl	8000638 <__aeabi_dmul>
 8012d4a:	a347      	add	r3, pc, #284	@ (adr r3, 8012e68 <__ieee754_pow+0xa60>)
 8012d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d50:	f7ed faba 	bl	80002c8 <__aeabi_dsub>
 8012d54:	4622      	mov	r2, r4
 8012d56:	462b      	mov	r3, r5
 8012d58:	f7ed fc6e 	bl	8000638 <__aeabi_dmul>
 8012d5c:	a344      	add	r3, pc, #272	@ (adr r3, 8012e70 <__ieee754_pow+0xa68>)
 8012d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d62:	f7ed fab3 	bl	80002cc <__adddf3>
 8012d66:	4622      	mov	r2, r4
 8012d68:	462b      	mov	r3, r5
 8012d6a:	f7ed fc65 	bl	8000638 <__aeabi_dmul>
 8012d6e:	4602      	mov	r2, r0
 8012d70:	460b      	mov	r3, r1
 8012d72:	4640      	mov	r0, r8
 8012d74:	4649      	mov	r1, r9
 8012d76:	f7ed faa7 	bl	80002c8 <__aeabi_dsub>
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	460d      	mov	r5, r1
 8012d7e:	4602      	mov	r2, r0
 8012d80:	460b      	mov	r3, r1
 8012d82:	4640      	mov	r0, r8
 8012d84:	4649      	mov	r1, r9
 8012d86:	f7ed fc57 	bl	8000638 <__aeabi_dmul>
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	e9cd 0100 	strd	r0, r1, [sp]
 8012d90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012d94:	4620      	mov	r0, r4
 8012d96:	4629      	mov	r1, r5
 8012d98:	f7ed fa96 	bl	80002c8 <__aeabi_dsub>
 8012d9c:	4602      	mov	r2, r0
 8012d9e:	460b      	mov	r3, r1
 8012da0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012da4:	f7ed fd72 	bl	800088c <__aeabi_ddiv>
 8012da8:	4632      	mov	r2, r6
 8012daa:	4604      	mov	r4, r0
 8012dac:	460d      	mov	r5, r1
 8012dae:	463b      	mov	r3, r7
 8012db0:	4640      	mov	r0, r8
 8012db2:	4649      	mov	r1, r9
 8012db4:	f7ed fc40 	bl	8000638 <__aeabi_dmul>
 8012db8:	4632      	mov	r2, r6
 8012dba:	463b      	mov	r3, r7
 8012dbc:	f7ed fa86 	bl	80002cc <__adddf3>
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	460b      	mov	r3, r1
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	4629      	mov	r1, r5
 8012dc8:	f7ed fa7e 	bl	80002c8 <__aeabi_dsub>
 8012dcc:	4642      	mov	r2, r8
 8012dce:	464b      	mov	r3, r9
 8012dd0:	f7ed fa7a 	bl	80002c8 <__aeabi_dsub>
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	492d      	ldr	r1, [pc, #180]	@ (8012e90 <__ieee754_pow+0xa88>)
 8012dda:	2000      	movs	r0, #0
 8012ddc:	f7ed fa74 	bl	80002c8 <__aeabi_dsub>
 8012de0:	ec41 0b10 	vmov	d0, r0, r1
 8012de4:	ee10 3a90 	vmov	r3, s1
 8012de8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012df0:	da0b      	bge.n	8012e0a <__ieee754_pow+0xa02>
 8012df2:	4650      	mov	r0, sl
 8012df4:	f000 f9ec 	bl	80131d0 <scalbn>
 8012df8:	ec51 0b10 	vmov	r0, r1, d0
 8012dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e00:	f7ff bb6d 	b.w	80124de <__ieee754_pow+0xd6>
 8012e04:	f8dd a010 	ldr.w	sl, [sp, #16]
 8012e08:	e73a      	b.n	8012c80 <__ieee754_pow+0x878>
 8012e0a:	ec51 0b10 	vmov	r0, r1, d0
 8012e0e:	4619      	mov	r1, r3
 8012e10:	e7f4      	b.n	8012dfc <__ieee754_pow+0x9f4>
 8012e12:	491f      	ldr	r1, [pc, #124]	@ (8012e90 <__ieee754_pow+0xa88>)
 8012e14:	2000      	movs	r0, #0
 8012e16:	f7ff bb14 	b.w	8012442 <__ieee754_pow+0x3a>
 8012e1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e1e:	f7ff bb10 	b.w	8012442 <__ieee754_pow+0x3a>
 8012e22:	4630      	mov	r0, r6
 8012e24:	4639      	mov	r1, r7
 8012e26:	f7ff bb0c 	b.w	8012442 <__ieee754_pow+0x3a>
 8012e2a:	460c      	mov	r4, r1
 8012e2c:	f7ff bb69 	b.w	8012502 <__ieee754_pow+0xfa>
 8012e30:	2400      	movs	r4, #0
 8012e32:	f7ff bb4b 	b.w	80124cc <__ieee754_pow+0xc4>
 8012e36:	bf00      	nop
 8012e38:	00000000 	.word	0x00000000
 8012e3c:	3fe62e43 	.word	0x3fe62e43
 8012e40:	fefa39ef 	.word	0xfefa39ef
 8012e44:	3fe62e42 	.word	0x3fe62e42
 8012e48:	0ca86c39 	.word	0x0ca86c39
 8012e4c:	be205c61 	.word	0xbe205c61
 8012e50:	72bea4d0 	.word	0x72bea4d0
 8012e54:	3e663769 	.word	0x3e663769
 8012e58:	c5d26bf1 	.word	0xc5d26bf1
 8012e5c:	3ebbbd41 	.word	0x3ebbbd41
 8012e60:	af25de2c 	.word	0xaf25de2c
 8012e64:	3f11566a 	.word	0x3f11566a
 8012e68:	16bebd93 	.word	0x16bebd93
 8012e6c:	3f66c16c 	.word	0x3f66c16c
 8012e70:	5555553e 	.word	0x5555553e
 8012e74:	3fc55555 	.word	0x3fc55555
 8012e78:	40900000 	.word	0x40900000
 8012e7c:	4090cbff 	.word	0x4090cbff
 8012e80:	3f6f3400 	.word	0x3f6f3400
 8012e84:	4090cc00 	.word	0x4090cc00
 8012e88:	3fe00000 	.word	0x3fe00000
 8012e8c:	fff00000 	.word	0xfff00000
 8012e90:	3ff00000 	.word	0x3ff00000
 8012e94:	652b82fe 	.word	0x652b82fe
 8012e98:	3c971547 	.word	0x3c971547
 8012e9c:	00000000 	.word	0x00000000

08012ea0 <atan>:
 8012ea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	ec55 4b10 	vmov	r4, r5, d0
 8012ea8:	4bbf      	ldr	r3, [pc, #764]	@ (80131a8 <atan+0x308>)
 8012eaa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8012eae:	429e      	cmp	r6, r3
 8012eb0:	46ab      	mov	fp, r5
 8012eb2:	d918      	bls.n	8012ee6 <atan+0x46>
 8012eb4:	4bbd      	ldr	r3, [pc, #756]	@ (80131ac <atan+0x30c>)
 8012eb6:	429e      	cmp	r6, r3
 8012eb8:	d801      	bhi.n	8012ebe <atan+0x1e>
 8012eba:	d109      	bne.n	8012ed0 <atan+0x30>
 8012ebc:	b144      	cbz	r4, 8012ed0 <atan+0x30>
 8012ebe:	4622      	mov	r2, r4
 8012ec0:	462b      	mov	r3, r5
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	4629      	mov	r1, r5
 8012ec6:	f7ed fa01 	bl	80002cc <__adddf3>
 8012eca:	4604      	mov	r4, r0
 8012ecc:	460d      	mov	r5, r1
 8012ece:	e006      	b.n	8012ede <atan+0x3e>
 8012ed0:	f1bb 0f00 	cmp.w	fp, #0
 8012ed4:	f340 812b 	ble.w	801312e <atan+0x28e>
 8012ed8:	a597      	add	r5, pc, #604	@ (adr r5, 8013138 <atan+0x298>)
 8012eda:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012ede:	ec45 4b10 	vmov	d0, r4, r5
 8012ee2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee6:	4bb2      	ldr	r3, [pc, #712]	@ (80131b0 <atan+0x310>)
 8012ee8:	429e      	cmp	r6, r3
 8012eea:	d813      	bhi.n	8012f14 <atan+0x74>
 8012eec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8012ef0:	429e      	cmp	r6, r3
 8012ef2:	d80c      	bhi.n	8012f0e <atan+0x6e>
 8012ef4:	a392      	add	r3, pc, #584	@ (adr r3, 8013140 <atan+0x2a0>)
 8012ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efa:	4620      	mov	r0, r4
 8012efc:	4629      	mov	r1, r5
 8012efe:	f7ed f9e5 	bl	80002cc <__adddf3>
 8012f02:	4bac      	ldr	r3, [pc, #688]	@ (80131b4 <atan+0x314>)
 8012f04:	2200      	movs	r2, #0
 8012f06:	f7ed fe27 	bl	8000b58 <__aeabi_dcmpgt>
 8012f0a:	2800      	cmp	r0, #0
 8012f0c:	d1e7      	bne.n	8012ede <atan+0x3e>
 8012f0e:	f04f 3aff 	mov.w	sl, #4294967295
 8012f12:	e029      	b.n	8012f68 <atan+0xc8>
 8012f14:	f7fe fc66 	bl	80117e4 <fabs>
 8012f18:	4ba7      	ldr	r3, [pc, #668]	@ (80131b8 <atan+0x318>)
 8012f1a:	429e      	cmp	r6, r3
 8012f1c:	ec55 4b10 	vmov	r4, r5, d0
 8012f20:	f200 80bc 	bhi.w	801309c <atan+0x1fc>
 8012f24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8012f28:	429e      	cmp	r6, r3
 8012f2a:	f200 809e 	bhi.w	801306a <atan+0x1ca>
 8012f2e:	4622      	mov	r2, r4
 8012f30:	462b      	mov	r3, r5
 8012f32:	4620      	mov	r0, r4
 8012f34:	4629      	mov	r1, r5
 8012f36:	f7ed f9c9 	bl	80002cc <__adddf3>
 8012f3a:	4b9e      	ldr	r3, [pc, #632]	@ (80131b4 <atan+0x314>)
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	f7ed f9c3 	bl	80002c8 <__aeabi_dsub>
 8012f42:	2200      	movs	r2, #0
 8012f44:	4606      	mov	r6, r0
 8012f46:	460f      	mov	r7, r1
 8012f48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	4629      	mov	r1, r5
 8012f50:	f7ed f9bc 	bl	80002cc <__adddf3>
 8012f54:	4602      	mov	r2, r0
 8012f56:	460b      	mov	r3, r1
 8012f58:	4630      	mov	r0, r6
 8012f5a:	4639      	mov	r1, r7
 8012f5c:	f7ed fc96 	bl	800088c <__aeabi_ddiv>
 8012f60:	f04f 0a00 	mov.w	sl, #0
 8012f64:	4604      	mov	r4, r0
 8012f66:	460d      	mov	r5, r1
 8012f68:	4622      	mov	r2, r4
 8012f6a:	462b      	mov	r3, r5
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	4629      	mov	r1, r5
 8012f70:	f7ed fb62 	bl	8000638 <__aeabi_dmul>
 8012f74:	4602      	mov	r2, r0
 8012f76:	460b      	mov	r3, r1
 8012f78:	4680      	mov	r8, r0
 8012f7a:	4689      	mov	r9, r1
 8012f7c:	f7ed fb5c 	bl	8000638 <__aeabi_dmul>
 8012f80:	a371      	add	r3, pc, #452	@ (adr r3, 8013148 <atan+0x2a8>)
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	4606      	mov	r6, r0
 8012f88:	460f      	mov	r7, r1
 8012f8a:	f7ed fb55 	bl	8000638 <__aeabi_dmul>
 8012f8e:	a370      	add	r3, pc, #448	@ (adr r3, 8013150 <atan+0x2b0>)
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f94:	f7ed f99a 	bl	80002cc <__adddf3>
 8012f98:	4632      	mov	r2, r6
 8012f9a:	463b      	mov	r3, r7
 8012f9c:	f7ed fb4c 	bl	8000638 <__aeabi_dmul>
 8012fa0:	a36d      	add	r3, pc, #436	@ (adr r3, 8013158 <atan+0x2b8>)
 8012fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa6:	f7ed f991 	bl	80002cc <__adddf3>
 8012faa:	4632      	mov	r2, r6
 8012fac:	463b      	mov	r3, r7
 8012fae:	f7ed fb43 	bl	8000638 <__aeabi_dmul>
 8012fb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8013160 <atan+0x2c0>)
 8012fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fb8:	f7ed f988 	bl	80002cc <__adddf3>
 8012fbc:	4632      	mov	r2, r6
 8012fbe:	463b      	mov	r3, r7
 8012fc0:	f7ed fb3a 	bl	8000638 <__aeabi_dmul>
 8012fc4:	a368      	add	r3, pc, #416	@ (adr r3, 8013168 <atan+0x2c8>)
 8012fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fca:	f7ed f97f 	bl	80002cc <__adddf3>
 8012fce:	4632      	mov	r2, r6
 8012fd0:	463b      	mov	r3, r7
 8012fd2:	f7ed fb31 	bl	8000638 <__aeabi_dmul>
 8012fd6:	a366      	add	r3, pc, #408	@ (adr r3, 8013170 <atan+0x2d0>)
 8012fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fdc:	f7ed f976 	bl	80002cc <__adddf3>
 8012fe0:	4642      	mov	r2, r8
 8012fe2:	464b      	mov	r3, r9
 8012fe4:	f7ed fb28 	bl	8000638 <__aeabi_dmul>
 8012fe8:	a363      	add	r3, pc, #396	@ (adr r3, 8013178 <atan+0x2d8>)
 8012fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fee:	4680      	mov	r8, r0
 8012ff0:	4689      	mov	r9, r1
 8012ff2:	4630      	mov	r0, r6
 8012ff4:	4639      	mov	r1, r7
 8012ff6:	f7ed fb1f 	bl	8000638 <__aeabi_dmul>
 8012ffa:	a361      	add	r3, pc, #388	@ (adr r3, 8013180 <atan+0x2e0>)
 8012ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013000:	f7ed f962 	bl	80002c8 <__aeabi_dsub>
 8013004:	4632      	mov	r2, r6
 8013006:	463b      	mov	r3, r7
 8013008:	f7ed fb16 	bl	8000638 <__aeabi_dmul>
 801300c:	a35e      	add	r3, pc, #376	@ (adr r3, 8013188 <atan+0x2e8>)
 801300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013012:	f7ed f959 	bl	80002c8 <__aeabi_dsub>
 8013016:	4632      	mov	r2, r6
 8013018:	463b      	mov	r3, r7
 801301a:	f7ed fb0d 	bl	8000638 <__aeabi_dmul>
 801301e:	a35c      	add	r3, pc, #368	@ (adr r3, 8013190 <atan+0x2f0>)
 8013020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013024:	f7ed f950 	bl	80002c8 <__aeabi_dsub>
 8013028:	4632      	mov	r2, r6
 801302a:	463b      	mov	r3, r7
 801302c:	f7ed fb04 	bl	8000638 <__aeabi_dmul>
 8013030:	a359      	add	r3, pc, #356	@ (adr r3, 8013198 <atan+0x2f8>)
 8013032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013036:	f7ed f947 	bl	80002c8 <__aeabi_dsub>
 801303a:	4632      	mov	r2, r6
 801303c:	463b      	mov	r3, r7
 801303e:	f7ed fafb 	bl	8000638 <__aeabi_dmul>
 8013042:	4602      	mov	r2, r0
 8013044:	460b      	mov	r3, r1
 8013046:	4640      	mov	r0, r8
 8013048:	4649      	mov	r1, r9
 801304a:	f7ed f93f 	bl	80002cc <__adddf3>
 801304e:	4622      	mov	r2, r4
 8013050:	462b      	mov	r3, r5
 8013052:	f7ed faf1 	bl	8000638 <__aeabi_dmul>
 8013056:	f1ba 3fff 	cmp.w	sl, #4294967295
 801305a:	4602      	mov	r2, r0
 801305c:	460b      	mov	r3, r1
 801305e:	d148      	bne.n	80130f2 <atan+0x252>
 8013060:	4620      	mov	r0, r4
 8013062:	4629      	mov	r1, r5
 8013064:	f7ed f930 	bl	80002c8 <__aeabi_dsub>
 8013068:	e72f      	b.n	8012eca <atan+0x2a>
 801306a:	4b52      	ldr	r3, [pc, #328]	@ (80131b4 <atan+0x314>)
 801306c:	2200      	movs	r2, #0
 801306e:	4620      	mov	r0, r4
 8013070:	4629      	mov	r1, r5
 8013072:	f7ed f929 	bl	80002c8 <__aeabi_dsub>
 8013076:	4b4f      	ldr	r3, [pc, #316]	@ (80131b4 <atan+0x314>)
 8013078:	4606      	mov	r6, r0
 801307a:	460f      	mov	r7, r1
 801307c:	2200      	movs	r2, #0
 801307e:	4620      	mov	r0, r4
 8013080:	4629      	mov	r1, r5
 8013082:	f7ed f923 	bl	80002cc <__adddf3>
 8013086:	4602      	mov	r2, r0
 8013088:	460b      	mov	r3, r1
 801308a:	4630      	mov	r0, r6
 801308c:	4639      	mov	r1, r7
 801308e:	f7ed fbfd 	bl	800088c <__aeabi_ddiv>
 8013092:	f04f 0a01 	mov.w	sl, #1
 8013096:	4604      	mov	r4, r0
 8013098:	460d      	mov	r5, r1
 801309a:	e765      	b.n	8012f68 <atan+0xc8>
 801309c:	4b47      	ldr	r3, [pc, #284]	@ (80131bc <atan+0x31c>)
 801309e:	429e      	cmp	r6, r3
 80130a0:	d21c      	bcs.n	80130dc <atan+0x23c>
 80130a2:	4b47      	ldr	r3, [pc, #284]	@ (80131c0 <atan+0x320>)
 80130a4:	2200      	movs	r2, #0
 80130a6:	4620      	mov	r0, r4
 80130a8:	4629      	mov	r1, r5
 80130aa:	f7ed f90d 	bl	80002c8 <__aeabi_dsub>
 80130ae:	4b44      	ldr	r3, [pc, #272]	@ (80131c0 <atan+0x320>)
 80130b0:	4606      	mov	r6, r0
 80130b2:	460f      	mov	r7, r1
 80130b4:	2200      	movs	r2, #0
 80130b6:	4620      	mov	r0, r4
 80130b8:	4629      	mov	r1, r5
 80130ba:	f7ed fabd 	bl	8000638 <__aeabi_dmul>
 80130be:	4b3d      	ldr	r3, [pc, #244]	@ (80131b4 <atan+0x314>)
 80130c0:	2200      	movs	r2, #0
 80130c2:	f7ed f903 	bl	80002cc <__adddf3>
 80130c6:	4602      	mov	r2, r0
 80130c8:	460b      	mov	r3, r1
 80130ca:	4630      	mov	r0, r6
 80130cc:	4639      	mov	r1, r7
 80130ce:	f7ed fbdd 	bl	800088c <__aeabi_ddiv>
 80130d2:	f04f 0a02 	mov.w	sl, #2
 80130d6:	4604      	mov	r4, r0
 80130d8:	460d      	mov	r5, r1
 80130da:	e745      	b.n	8012f68 <atan+0xc8>
 80130dc:	4622      	mov	r2, r4
 80130de:	462b      	mov	r3, r5
 80130e0:	4938      	ldr	r1, [pc, #224]	@ (80131c4 <atan+0x324>)
 80130e2:	2000      	movs	r0, #0
 80130e4:	f7ed fbd2 	bl	800088c <__aeabi_ddiv>
 80130e8:	f04f 0a03 	mov.w	sl, #3
 80130ec:	4604      	mov	r4, r0
 80130ee:	460d      	mov	r5, r1
 80130f0:	e73a      	b.n	8012f68 <atan+0xc8>
 80130f2:	4b35      	ldr	r3, [pc, #212]	@ (80131c8 <atan+0x328>)
 80130f4:	4e35      	ldr	r6, [pc, #212]	@ (80131cc <atan+0x32c>)
 80130f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80130fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fe:	f7ed f8e3 	bl	80002c8 <__aeabi_dsub>
 8013102:	4622      	mov	r2, r4
 8013104:	462b      	mov	r3, r5
 8013106:	f7ed f8df 	bl	80002c8 <__aeabi_dsub>
 801310a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801310e:	4602      	mov	r2, r0
 8013110:	460b      	mov	r3, r1
 8013112:	e9d6 0100 	ldrd	r0, r1, [r6]
 8013116:	f7ed f8d7 	bl	80002c8 <__aeabi_dsub>
 801311a:	f1bb 0f00 	cmp.w	fp, #0
 801311e:	4604      	mov	r4, r0
 8013120:	460d      	mov	r5, r1
 8013122:	f6bf aedc 	bge.w	8012ede <atan+0x3e>
 8013126:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801312a:	461d      	mov	r5, r3
 801312c:	e6d7      	b.n	8012ede <atan+0x3e>
 801312e:	a51c      	add	r5, pc, #112	@ (adr r5, 80131a0 <atan+0x300>)
 8013130:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013134:	e6d3      	b.n	8012ede <atan+0x3e>
 8013136:	bf00      	nop
 8013138:	54442d18 	.word	0x54442d18
 801313c:	3ff921fb 	.word	0x3ff921fb
 8013140:	8800759c 	.word	0x8800759c
 8013144:	7e37e43c 	.word	0x7e37e43c
 8013148:	e322da11 	.word	0xe322da11
 801314c:	3f90ad3a 	.word	0x3f90ad3a
 8013150:	24760deb 	.word	0x24760deb
 8013154:	3fa97b4b 	.word	0x3fa97b4b
 8013158:	a0d03d51 	.word	0xa0d03d51
 801315c:	3fb10d66 	.word	0x3fb10d66
 8013160:	c54c206e 	.word	0xc54c206e
 8013164:	3fb745cd 	.word	0x3fb745cd
 8013168:	920083ff 	.word	0x920083ff
 801316c:	3fc24924 	.word	0x3fc24924
 8013170:	5555550d 	.word	0x5555550d
 8013174:	3fd55555 	.word	0x3fd55555
 8013178:	2c6a6c2f 	.word	0x2c6a6c2f
 801317c:	bfa2b444 	.word	0xbfa2b444
 8013180:	52defd9a 	.word	0x52defd9a
 8013184:	3fadde2d 	.word	0x3fadde2d
 8013188:	af749a6d 	.word	0xaf749a6d
 801318c:	3fb3b0f2 	.word	0x3fb3b0f2
 8013190:	fe231671 	.word	0xfe231671
 8013194:	3fbc71c6 	.word	0x3fbc71c6
 8013198:	9998ebc4 	.word	0x9998ebc4
 801319c:	3fc99999 	.word	0x3fc99999
 80131a0:	54442d18 	.word	0x54442d18
 80131a4:	bff921fb 	.word	0xbff921fb
 80131a8:	440fffff 	.word	0x440fffff
 80131ac:	7ff00000 	.word	0x7ff00000
 80131b0:	3fdbffff 	.word	0x3fdbffff
 80131b4:	3ff00000 	.word	0x3ff00000
 80131b8:	3ff2ffff 	.word	0x3ff2ffff
 80131bc:	40038000 	.word	0x40038000
 80131c0:	3ff80000 	.word	0x3ff80000
 80131c4:	bff00000 	.word	0xbff00000
 80131c8:	08013908 	.word	0x08013908
 80131cc:	08013928 	.word	0x08013928

080131d0 <scalbn>:
 80131d0:	b570      	push	{r4, r5, r6, lr}
 80131d2:	ec55 4b10 	vmov	r4, r5, d0
 80131d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80131da:	4606      	mov	r6, r0
 80131dc:	462b      	mov	r3, r5
 80131de:	b991      	cbnz	r1, 8013206 <scalbn+0x36>
 80131e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80131e4:	4323      	orrs	r3, r4
 80131e6:	d03b      	beq.n	8013260 <scalbn+0x90>
 80131e8:	4b33      	ldr	r3, [pc, #204]	@ (80132b8 <scalbn+0xe8>)
 80131ea:	4620      	mov	r0, r4
 80131ec:	4629      	mov	r1, r5
 80131ee:	2200      	movs	r2, #0
 80131f0:	f7ed fa22 	bl	8000638 <__aeabi_dmul>
 80131f4:	4b31      	ldr	r3, [pc, #196]	@ (80132bc <scalbn+0xec>)
 80131f6:	429e      	cmp	r6, r3
 80131f8:	4604      	mov	r4, r0
 80131fa:	460d      	mov	r5, r1
 80131fc:	da0f      	bge.n	801321e <scalbn+0x4e>
 80131fe:	a326      	add	r3, pc, #152	@ (adr r3, 8013298 <scalbn+0xc8>)
 8013200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013204:	e01e      	b.n	8013244 <scalbn+0x74>
 8013206:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801320a:	4291      	cmp	r1, r2
 801320c:	d10b      	bne.n	8013226 <scalbn+0x56>
 801320e:	4622      	mov	r2, r4
 8013210:	4620      	mov	r0, r4
 8013212:	4629      	mov	r1, r5
 8013214:	f7ed f85a 	bl	80002cc <__adddf3>
 8013218:	4604      	mov	r4, r0
 801321a:	460d      	mov	r5, r1
 801321c:	e020      	b.n	8013260 <scalbn+0x90>
 801321e:	460b      	mov	r3, r1
 8013220:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013224:	3936      	subs	r1, #54	@ 0x36
 8013226:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801322a:	4296      	cmp	r6, r2
 801322c:	dd0d      	ble.n	801324a <scalbn+0x7a>
 801322e:	2d00      	cmp	r5, #0
 8013230:	a11b      	add	r1, pc, #108	@ (adr r1, 80132a0 <scalbn+0xd0>)
 8013232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013236:	da02      	bge.n	801323e <scalbn+0x6e>
 8013238:	a11b      	add	r1, pc, #108	@ (adr r1, 80132a8 <scalbn+0xd8>)
 801323a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801323e:	a318      	add	r3, pc, #96	@ (adr r3, 80132a0 <scalbn+0xd0>)
 8013240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013244:	f7ed f9f8 	bl	8000638 <__aeabi_dmul>
 8013248:	e7e6      	b.n	8013218 <scalbn+0x48>
 801324a:	1872      	adds	r2, r6, r1
 801324c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013250:	428a      	cmp	r2, r1
 8013252:	dcec      	bgt.n	801322e <scalbn+0x5e>
 8013254:	2a00      	cmp	r2, #0
 8013256:	dd06      	ble.n	8013266 <scalbn+0x96>
 8013258:	f36f 531e 	bfc	r3, #20, #11
 801325c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013260:	ec45 4b10 	vmov	d0, r4, r5
 8013264:	bd70      	pop	{r4, r5, r6, pc}
 8013266:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801326a:	da08      	bge.n	801327e <scalbn+0xae>
 801326c:	2d00      	cmp	r5, #0
 801326e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013298 <scalbn+0xc8>)
 8013270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013274:	dac3      	bge.n	80131fe <scalbn+0x2e>
 8013276:	a10e      	add	r1, pc, #56	@ (adr r1, 80132b0 <scalbn+0xe0>)
 8013278:	e9d1 0100 	ldrd	r0, r1, [r1]
 801327c:	e7bf      	b.n	80131fe <scalbn+0x2e>
 801327e:	3236      	adds	r2, #54	@ 0x36
 8013280:	f36f 531e 	bfc	r3, #20, #11
 8013284:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013288:	4620      	mov	r0, r4
 801328a:	4b0d      	ldr	r3, [pc, #52]	@ (80132c0 <scalbn+0xf0>)
 801328c:	4629      	mov	r1, r5
 801328e:	2200      	movs	r2, #0
 8013290:	e7d8      	b.n	8013244 <scalbn+0x74>
 8013292:	bf00      	nop
 8013294:	f3af 8000 	nop.w
 8013298:	c2f8f359 	.word	0xc2f8f359
 801329c:	01a56e1f 	.word	0x01a56e1f
 80132a0:	8800759c 	.word	0x8800759c
 80132a4:	7e37e43c 	.word	0x7e37e43c
 80132a8:	8800759c 	.word	0x8800759c
 80132ac:	fe37e43c 	.word	0xfe37e43c
 80132b0:	c2f8f359 	.word	0xc2f8f359
 80132b4:	81a56e1f 	.word	0x81a56e1f
 80132b8:	43500000 	.word	0x43500000
 80132bc:	ffff3cb0 	.word	0xffff3cb0
 80132c0:	3c900000 	.word	0x3c900000

080132c4 <with_errno>:
 80132c4:	b510      	push	{r4, lr}
 80132c6:	ed2d 8b02 	vpush	{d8}
 80132ca:	eeb0 8a40 	vmov.f32	s16, s0
 80132ce:	eef0 8a60 	vmov.f32	s17, s1
 80132d2:	4604      	mov	r4, r0
 80132d4:	f7fa facc 	bl	800d870 <__errno>
 80132d8:	eeb0 0a48 	vmov.f32	s0, s16
 80132dc:	eef0 0a68 	vmov.f32	s1, s17
 80132e0:	ecbd 8b02 	vpop	{d8}
 80132e4:	6004      	str	r4, [r0, #0]
 80132e6:	bd10      	pop	{r4, pc}

080132e8 <xflow>:
 80132e8:	4603      	mov	r3, r0
 80132ea:	b507      	push	{r0, r1, r2, lr}
 80132ec:	ec51 0b10 	vmov	r0, r1, d0
 80132f0:	b183      	cbz	r3, 8013314 <xflow+0x2c>
 80132f2:	4602      	mov	r2, r0
 80132f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80132f8:	e9cd 2300 	strd	r2, r3, [sp]
 80132fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013300:	f7ed f99a 	bl	8000638 <__aeabi_dmul>
 8013304:	ec41 0b10 	vmov	d0, r0, r1
 8013308:	2022      	movs	r0, #34	@ 0x22
 801330a:	b003      	add	sp, #12
 801330c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013310:	f7ff bfd8 	b.w	80132c4 <with_errno>
 8013314:	4602      	mov	r2, r0
 8013316:	460b      	mov	r3, r1
 8013318:	e7ee      	b.n	80132f8 <xflow+0x10>
 801331a:	0000      	movs	r0, r0
 801331c:	0000      	movs	r0, r0
	...

08013320 <__math_uflow>:
 8013320:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013328 <__math_uflow+0x8>
 8013324:	f7ff bfe0 	b.w	80132e8 <xflow>
 8013328:	00000000 	.word	0x00000000
 801332c:	10000000 	.word	0x10000000

08013330 <__math_oflow>:
 8013330:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013338 <__math_oflow+0x8>
 8013334:	f7ff bfd8 	b.w	80132e8 <xflow>
 8013338:	00000000 	.word	0x00000000
 801333c:	70000000 	.word	0x70000000

08013340 <_init>:
 8013340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013342:	bf00      	nop
 8013344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013346:	bc08      	pop	{r3}
 8013348:	469e      	mov	lr, r3
 801334a:	4770      	bx	lr

0801334c <_fini>:
 801334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801334e:	bf00      	nop
 8013350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013352:	bc08      	pop	{r3}
 8013354:	469e      	mov	lr, r3
 8013356:	4770      	bx	lr
